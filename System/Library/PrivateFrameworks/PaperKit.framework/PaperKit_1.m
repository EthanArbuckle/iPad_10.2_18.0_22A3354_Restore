Swift::Void __swiftcall CanvasElementDrawingView.didMoveToWindow()()
{
  char *v0;
  char *v1;
  id v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD v23[5];
  objc_super v24;

  v1 = v0;
  v24.receiver = v0;
  v24.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v24, sel_didMoveToWindow);
  v2 = objc_msgSend(v0, sel_window);

  if (v2)
  {
    v3 = &v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
    v4 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v4
      && (v6 = v4, v7 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x88))(), v6, v7))
    {
      v8 = &v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection];
      swift_beginAccess();
      v9 = *v8;

    }
    else
    {
      v9 = 1;
    }
    objc_msgSend(v1, sel_setWantsDataDetection_, v9);
    v12 = (void *)objc_opt_self();
    v13 = objc_msgSend(v12, sel_standardUserDefaults);
    v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4EF00);
    v15 = objc_msgSend(v13, sel_BOOLForKey_, v14);

    objc_msgSend(v1, sel_setWantsHashtagDetection_, v15);
    v16 = objc_msgSend(v12, sel_standardUserDefaults);
    v17 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4EF00);
    v18 = objc_msgSend(v16, sel_BOOLForKey_, v17);

    objc_msgSend(v1, sel_setWantsMentionDetection_, v18);
    v23[3] = &type metadata for PencilAndPaperFeatureFlags;
    v23[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    LOBYTE(v23[0]) = 7;
    LOBYTE(v16) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    objc_msgSend(v1, sel_setWantsProofreadingDetection_, v16 & 1, v23[0]);
    v19 = (_QWORD *)MEMORY[0x1DF0E666C](v3);
    v20 = (unint64_t)v19;
    if (v19)
    {
      v21 = (char *)(*(uint64_t (**)(void))((*v5 & *v19) + 0x88))();

      if (v21)
      {
        v22 = &v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud];
        swift_beginAccess();
        v20 = *v22;

      }
      else
      {
        v20 = 0;
      }
    }
    objc_msgSend(v1, sel_setIsSharedViaICloud_, v20);
  }
  else
  {
    v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v10)
    {
      v11 = *(void **)(v10 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v11)
        objc_msgSend(v11, sel_dismissPopovers);
    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.layoutSubviews()()
{
  char *v0;
  uint64_t v1;
  void *v2;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v1)
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v2)
      objc_msgSend(v2, sel_layoutSubviews);
  }
}

Swift::Bool __swiftcall CanvasElementDrawingView._handleSingleTap(atDrawingLocation:)(CGPoint atDrawingLocation)
{
  char *v1;
  double y;
  double x;
  char v4;
  uint64_t v5;
  void *v6;
  objc_super v8;
  _BYTE v9[24];
  ValueMetadata *v10;
  unint64_t v11;

  y = atDrawingLocation.y;
  x = atDrawingLocation.x;
  v10 = &type metadata for PencilAndPaperFeatureFlags;
  v11 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v9[0] = 0;
  v4 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if ((v4 & 1) == 0)
  {
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v5)
    {
      v6 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v6)
      {
        if ((objc_msgSend(v6, sel_handleSingleTapAtDrawingLocation_, x, y) & 1) != 0)
          return 1;
      }
    }
  }
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  return objc_msgSendSuper2(&v8, sel__handleSingleTapAtDrawingLocation_, x, y);
}

Swift::Void __swiftcall CanvasElementDrawingView.eraserMoved(toLocation:)(CGPoint toLocation)
{
  char *v1;
  double y;
  double x;
  uint64_t v4;
  void *v5;
  objc_super v6;

  y = toLocation.y;
  x = toLocation.x;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v4)
  {
    v5 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v5)
      objc_msgSend(v5, sel_eraserMovedToLocation_, toLocation.x, toLocation.y);
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v6, sel_eraserMovedToLocation_, x, y);
}

void CanvasElementDrawingView.additionalStrokes.didset()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  Class isa;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  Class v32;
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PKStroke();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v39 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v33 - v13;
  v15 = objc_msgSend(v0, sel_additionalStrokes, v12);
  if (v15)
  {
    v16 = v15;
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v40 = MEMORY[0x1E0DEE9D8];
    v38 = *(_QWORD *)(v17 + 16);
    v33 = v1;
    if (v38)
    {
      v18 = 0;
      v34 = v14;
      v35 = v5;
      v37 = v17;
      while (v18 < *(_QWORD *)(v17 + 16))
      {
        v19 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        v20 = *(_QWORD *)(v7 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v5, v17 + v19 + v20 * v18, v6);
        v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
        v36(v5, 0, 1, v6);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
          goto LABEL_16;
        v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v21(v14, v5, v6);
        isa = PKStroke._bridgeToObjectiveC()().super.isa;
        v23 = v6;
        v24 = v14;
        v25 = -[objc_class _isHidden](isa, sel__isHidden);

        if (v25)
        {
          v21(v39, v24, v23);
          v26 = v40;
          v6 = v23;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
            v26 = v40;
          }
          v17 = v37;
          v28 = *(_QWORD *)(v26 + 16);
          v27 = *(_QWORD *)(v26 + 24);
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
            v26 = v40;
          }
          *(_QWORD *)(v26 + 16) = v28 + 1;
          v21((char *)(v26 + v19 + v28 * v20), v39, v6);
          v40 = v26;
          v14 = v34;
          v5 = v35;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v7 + 8))(v24, v23);
          v14 = v24;
          v6 = v23;
          v17 = v37;
        }
        if (v38 == ++v18)
        {
          v36(v5, 1, 1, v6);
          goto LABEL_16;
        }
      }
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
LABEL_16:
      swift_bridgeObjectRelease();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
      v29 = *(_QWORD *)&v33[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
      if (v29
        && (v30 = *(void **)(v29 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) != 0)
      {
        v31 = v30;
        v32 = Array._bridgeToObjectiveC()().super.isa;
        swift_release();
        objc_msgSend(v31, sel_didEraseStrokes_, v32);

      }
      else
      {
        swift_release();
      }
    }
  }
}

uint64_t CanvasElementDrawingView.becomeFirstResponder()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags();
  v20 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a3;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v13, v9, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v19);
  return 0;
}

void closure #1 in CanvasElementDrawingView.becomeFirstResponder()(uint64_t a1, SEL *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = (_QWORD *)MEMORY[0x1DF0E666C](a1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v3)
  {
    v7 = v3;
    v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))();
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, *a2);

      v6 = v5;
    }
    else
    {
      v6 = v7;
    }

  }
}

Swift::Void __swiftcall CanvasElementDrawingView.drawingDidChangeVisibleStrokes(_:)(Swift::Bool a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  objc_class *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  void *v22;
  char *v23;
  _BYTE v24[24];
  char *v25;
  objc_super v26;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for PKDrawing();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v24[-v16];
  v18 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v26.receiver = v2;
  v26.super_class = v18;
  objc_msgSendSuper2(&v26, sel_drawingDidChangeVisibleStrokes_, a1);
  CanvasElementDrawingView.mergeLiveEraseDrawing()();
  v19 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v19)
  {
    v20 = (_QWORD *)v19;
    v21 = objc_msgSend(v2, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v17, v13, v9);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    v22 = v25;
    v23 = &v25[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v23, v4);

    (*(void (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x2B0))(v8);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
}

void __swiftcall CanvasElementDrawingView.inlineView(at:)(UIView_optional *__return_ptr retstr, CGPoint at)
{
  char *v2;
  double y;
  double x;
  uint64_t v5;
  void *v6;
  id v7;
  objc_super v8;

  y = at.y;
  x = at.x;
  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (!v5
    || (v6 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) == 0
    || !objc_msgSend(v6, sel_hitTest_, at.x, at.y))
  {
    v8.receiver = v2;
    v8.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
    v7 = -[UIView_optional inlineViewAtPoint:](&v8, sel_inlineViewAtPoint_, x, y);
  }
}

void CanvasElementDrawingView.drawingTransform.getter(__int128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  CGAffineTransform *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[7];
  CGAffineTransform v17;
  _BYTE v18[56];

  v3 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (!v3)
  {
    v7 = xmmword_1DDF33A30;
    v9 = xmmword_1DDF33970;
    v8 = 0uLL;
    goto LABEL_7;
  }
  v4 = (_QWORD *)v3;
  v5 = (void *)MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v5)
  {

  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v11 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x88))();
    if (v11)
    {
      v12 = v11;
      (*(void (**)(_QWORD *__return_ptr))((*v10 & *v11) + 0x5B8))(v16);

      v6 = (CGAffineTransform *)v18;
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v16, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
      if (v18[48] != 1)
        goto LABEL_5;
    }
  }
  v6 = &v17;
  AnyCanvasElementView.paperBoundsTransform()(&v17);
LABEL_5:
  v14 = *(_OWORD *)&v6->c;
  v15 = *(_OWORD *)&v6->a;
  v13 = *(_OWORD *)&v6->tx;

  v8 = v13;
  v7 = v14;
  v9 = v15;
LABEL_7:
  *a1 = v9;
  a1[1] = v7;
  a1[2] = v8;
}

uint64_t CanvasElementDrawingView.merge<A>(_:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  char v14;
  objc_class *v15;
  id v16;
  void *v17;
  id v18;
  PKDrawing *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  objc_super v24;
  void *v25;

  v1 = v0;
  v2 = type metadata accessor for PKDrawing();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v23 - v10;
  v12 = objc_msgSend(v0, sel_drawing, v9);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v6, v2);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  v13 = v25;
  v14 = PKDrawingCoherence.merge<A>(_:)();

  if ((v14 & 1) != 0)
  {
    v15 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
    v24.receiver = v1;
    v24.super_class = v15;
    objc_msgSendSuper2(&v24, sel_drawingDidChange);
    v16 = objc_msgSend(v1, sel_tiledView);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v1, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      PKDrawing._bridgeToObjectiveC()(v19);
      v21 = v20;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      objc_msgSend(v17, sel_updateCurrentSelectionWithNewDrawingIfNecessary_, v21);

    }
  }
  return v14 & 1;
}

Swift::Void __swiftcall CanvasElementDrawingView.didBeginDrawing()()
{
  char *v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  objc_super v5;

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v5, sel_didBeginDrawing);
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v1)
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v2)
      objc_msgSend(v2, sel_didBeginDrawing);
  }
  v3 = (_QWORD *)MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v3)
  {
    v4 = v3;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2C0))();

  }
}

void CanvasElementDrawingView.beganStroke(_:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Class isa;
  objc_class *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_super v32;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = PKStroke._bridgeToObjectiveC()().super.isa;
  v8 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v32.receiver = v1;
  v32.super_class = v8;
  objc_msgSendSuper2(&v32, sel_beganStroke_, isa);

  v9 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink], sel_invalidate);
  v10 = *(void **)&v1[v9];
  *(_QWORD *)&v1[v9] = 0;

  v11 = &v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
  v12 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v12)
  {
    v14 = v12;
    v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x88))();

    if (v15)
    {
      specialized LiveEditable.didChangeLiveEditing()();

    }
  }
  v16 = (_QWORD *)MEMORY[0x1DF0E666C](v11);
  if (v16)
  {
    v17 = v16;
    v18 = (char *)(*(uint64_t (**)(void))((*v13 & *v16) + 0x88))();

    if (v18)
    {
      v19 = &v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
      swift_beginAccess();
      LODWORD(v19) = *v19;

      if ((_DWORD)v19 == 1)
      {
        v20 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v1, sel_displayLinkUpdateLiveDrawing);
        objc_msgSend(v20, sel_setPreferredFramesPerSecond_, 60);
        v21 = objc_msgSend((id)objc_opt_self(), sel_currentRunLoop);
        objc_msgSend(v20, sel_addToRunLoop_forMode_, v21, *MEMORY[0x1E0C99860]);

        v22 = *(void **)&v1[v9];
        *(_QWORD *)&v1[v9] = v20;
        v23 = v20;

        v24 = (_QWORD *)MEMORY[0x1DF0E666C](v11);
        v25 = v23;
        if (v24)
        {
          v26 = v24;
          v27 = (*(uint64_t (**)(void))((*v13 & *v24) + 0x88))();

          v25 = v23;
          if (v27)
          {
            specialized LiveEditable.didChangeLiveEditing()();

            v25 = (void *)v27;
          }
        }

        v28 = objc_msgSend((id)objc_opt_self(), sel_now);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSinceReferenceDate.getter();
        v30 = v29;

        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
        *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval] = v30;
      }
    }
  }
}

void CanvasElementDrawingView.cancelledStroke(_:)()
{
  char *v0;
  char *v1;
  Class isa;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  objc_super v8;

  v1 = v0;
  isa = PKStroke._bridgeToObjectiveC()().super.isa;
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v8, sel_cancelledStroke_, isa);

  v3 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink], sel_invalidate);
  v4 = *(void **)&v1[v3];
  *(_QWORD *)&v1[v3] = 0;

  v5 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v5)
  {
    v6 = v5;
    v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x88))();

    if (v7)
    {
      specialized LiveEditable.didChangeLiveEditing()();

    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.displayLinkUpdateLiveDrawing()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  double v12;
  double v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(), sel_now);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSinceReferenceDate.getter();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (*(double *)(v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval) + 60.0 < v13)
  {
    v14 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink), sel_invalidate);
    v15 = *(void **)(v1 + v14);
    *(_QWORD *)(v1 + v14) = 0;

    v16 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
    if (v16)
    {
      v17 = v16;
      v18 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x88))();

      if (v18)
      {
        specialized LiveEditable.didChangeLiveEditing()();

      }
    }
  }
  v19 = type metadata accessor for PKStroke();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  CanvasElementDrawingView.updateLiveDrawing(stroke:)((uint64_t)v5);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
}

void CanvasElementDrawingView.updateLiveDrawing(stroke:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  char *v36;
  PKStroke v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;

  v47 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKStroke();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v44 - v22;
  v24 = v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView;
  v25 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView, v21);
  if (v25)
  {
    v26 = v25;
    v27 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25) + 0x88))();

    if (v27)
    {
      v28 = &v27[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
      swift_beginAccess();
      LODWORD(v28) = *v28;

      if ((_DWORD)v28 == 1)
      {
        v29 = (_QWORD *)MEMORY[0x1DF0E666C](v24);
        if (v29)
        {
          v30 = v29;
          v31 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v29) + 0x88))();

          if (v31)
          {
            v32 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v31) + 0x320))();

            if (v32)
            {
              v33 = objc_msgSend(v32, sel__liveDrawing);
              if (v33)
              {
                v34 = v33;
                static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

                v35 = type metadata accessor for PKDrawing();
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v18, 0, 1, v35);
              }
              else
              {
                v35 = type metadata accessor for PKDrawing();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v18, 1, 1, v35);
              }
              outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v18, (uint64_t)v23, &demangling cache variable for type metadata for PKDrawing?);
              type metadata accessor for PKDrawing();
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v23, 1, v35) == 1)
              {

                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PKDrawing?);
                return;
              }
              type metadata accessor for PKDrawingCoherence(0);
              if ((swift_dynamicCast() & 1) != 0)
              {
                v36 = v48;
                outlined init with copy of PKStroke?(v47, (uint64_t)v9);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
                {
                  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
                  v37.super.isa = PKStroke._bridgeToObjectiveC()().super.isa;
                  v38 = (char *)objc_msgSend(v36, sel__rootStrokesCount);
                  if (__OFSUB__(v38, 1))
                  {
                    __break(1u);
                    return;
                  }
                  objc_msgSend(v36, sel_updateStroke_indexHint_, v37.super.isa, v38 - 1);

                  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
                }
                v39 = MEMORY[0x1DF0E666C](v24);
                if (v39)
                {
                  v40 = (_QWORD *)v39;
                  v41 = &v36[OBJC_IVAR___PKDrawingCoherence_model];
                  swift_beginAccess();
                  v43 = v45;
                  v42 = v46;
                  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v5, v41, v46);
                  (*(void (**)(char *))((*MEMORY[0x1E0DEEDD8] & *v40) + 0x2B0))(v5);

                  (*(void (**)(char *, uint64_t))(v43 + 8))(v5, v42);
                  return;
                }

              }
            }
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.mergeLiveEraseDrawing()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  id v17;
  void *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PKDrawing();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v21 - v13;
  v15 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing];
  if (v15)
  {
    v22 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing;
    v16 = v15;
    v23 = v0;
    v17 = objc_msgSend(v0, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v10, v6);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    v18 = v24;
    v19 = &v16[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v19, v1);
    swift_beginAccess();
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    LOBYTE(v19) = Capsule.merge<A>(_:)();
    swift_endAccess();
    if ((v19 & 1) != 0)
      objc_msgSend(v18, sel_invalidateVisibleStrokes);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    v20 = *(void **)&v23[v22];
    *(_QWORD *)&v23[v22] = 0;

  }
}

Swift::Void __swiftcall CanvasElementDrawingView.drawingDidEraseStrokes(_:)(Swift::OpaquePointer a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  objc_class *v11;
  uint64_t v12;
  void *v13;
  id v14;
  Class v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  char *v25;
  id v26;
  objc_class *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  char *v36;
  Class v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t v48;
  objc_super v49;
  char *v50;
  objc_super v51;

  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v48 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PKDrawing();
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v11 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v51.receiver = v2;
  v51.super_class = v11;
  objc_msgSendSuper2(&v51, sel_drawingDidEraseStrokes_, isa);

  v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v12)
  {
    v13 = *(void **)(v12 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v13)
    {
      v14 = v13;
      v15 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, sel_didEraseStrokes_, v15);

    }
  }
  v16 = &v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
  v17 = (_QWORD *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v17)
  {
    v19 = v17;
    v20 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x88))();
    if (v20)
    {
      v21 = v20;
      (*(void (**)(void *))((*v18 & *v20) + 0x5D0))(v19);

      v19 = v21;
    }

  }
  v22 = (_QWORD *)MEMORY[0x1DF0E666C](v16);
  if (v22)
  {
    v23 = v22;
    v24 = (char *)(*(uint64_t (**)(void))((*v18 & *v22) + 0x88))();

    if (v24)
    {
      v25 = &v24[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
      swift_beginAccess();
      LODWORD(v25) = *v25;

      if ((_DWORD)v25 == 1)
      {
        v26 = objc_msgSend(v2, sel_drawing);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        v27 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v28 = v50;
          v29 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing;
          v30 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing];
          if (v30)
            goto LABEL_14;
          v46 = v50;
          v31 = &v50[OBJC_IVAR___PKDrawingCoherence_model];
          swift_beginAccess();
          v32 = v47;
          v45 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
          v45(v7, v31, v47);
          v33 = (char *)objc_allocWithZone(v27);
          v45(&v33[OBJC_IVAR___PKDrawingCoherence_model], v7, v32);
          v49.receiver = v33;
          v49.super_class = v27;
          v28 = v46;
          v34 = objc_msgSendSuper2(&v49, sel_init);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v32);
          v35 = *(void **)&v2[v29];
          *(_QWORD *)&v2[v29] = v34;

          v30 = *(void **)&v2[v29];
          if (v30)
          {
LABEL_14:
            v36 = v30;
            v37 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v36, sel_deleteStrokes_, v37);

            v38 = MEMORY[0x1DF0E666C](v16);
            if (v38)
            {
              v39 = (_QWORD *)v38;
              v40 = &v36[OBJC_IVAR___PKDrawingCoherence_model];
              swift_beginAccess();
              v41 = v48;
              v42 = v40;
              v43 = v47;
              (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v7, v42, v47);
              (*(void (**)(char *))((*v18 & *v39) + 0x2B0))(v7);

              (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v43);
            }
            else
            {

            }
          }
          else
          {

          }
        }
      }
    }
  }
}

void CanvasElementDrawingView.endedStroke(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Class isa;
  objc_class *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v30;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = PKStroke._bridgeToObjectiveC()().super.isa;
  v9 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v30.receiver = v2;
  v30.super_class = v9;
  objc_msgSendSuper2(&v30, sel_endedStroke_, isa);

  v10 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v10)
  {
    v11 = *(void **)(v10 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v11)
      objc_msgSend(v11, sel_dismissPopovers);
  }
  *(CFTimeInterval *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp] = CACurrentMediaTime();
  v12 = type metadata accessor for PKStroke();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, a1, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  CanvasElementDrawingView.updateLiveDrawing(stroke:)((uint64_t)v7);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  v14 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink], sel_invalidate);
  v15 = *(void **)&v2[v14];
  *(_QWORD *)&v2[v14] = 0;

  v16 = &v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
  v17 = (_QWORD *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v17)
  {
    v18 = v17;
    v19 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x88))();

    if (v19)
    {
      specialized LiveEditable.didChangeLiveEditing()();

    }
  }
  CanvasElementDrawingView.mergeLiveEraseDrawing()();
  v20 = objc_msgSend(v2, sel_tiledView);
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v20, sel_canvasView);

    if (v22)
    {
      v23 = objc_msgSend(v22, sel_drawingGestureRecognizer);

      v24 = objc_msgSend(v23, sel_state);
      if (v24 == (id)3)
      {
        v25 = (_QWORD *)MEMORY[0x1DF0E666C](v16);
        if (v25)
        {
          v26 = v25;
          v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25) + 0x88))();

          if (v27)
          {
            AnyCanvas.selectedCanvasElementIds.getter();
            v29 = *(_QWORD *)(v28 + 16);
            swift_bridgeObjectRelease();
            if (v29)
              AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x1E0DEE9D8]);

          }
        }
      }
    }
  }
}

uint64_t @objc CanvasElementDrawingView.beganStroke(_:)(void *a1, uint64_t a2, void *a3, void (*a4)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v15;

  v7 = type metadata accessor for PKStroke();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3;
  v13 = a1;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  a4(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

Swift::Void __swiftcall CanvasElementDrawingView.updateFrameForTextContainer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v1)
  {
    v7 = (_QWORD *)v1;
    v2 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    v3 = v7;
    if (!v2)
    {
      v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v5 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x88))();
      if (!v5)
      {
        v6 = v7;
        goto LABEL_6;
      }
      v2 = (uint64_t)v5;
      (*(void (**)(void))((*v4 & *v5) + 0x568))();
      v3 = v7;
    }

    v6 = (void *)v2;
LABEL_6:

  }
}

uint64_t CanvasElementDrawingView.isAtEndOfDocument.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v1)
  {
    v2 = (_QWORD *)v1;
    v3 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v3)
    {
      v4 = (_QWORD *)v3;
      v5 = 0;
    }
    else
    {
      v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v7 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x88))();
      if (!v7)
      {
        v5 = 0;
        goto LABEL_8;
      }
      v4 = v7;
      v5 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x570))();
    }

    v2 = v4;
LABEL_8:

    return v5 & 1;
  }
  v5 = 0;
  return v5 & 1;
}

Swift::Bool __swiftcall CanvasElementDrawingView.hit(byTouchLocation:bounds:)(CGPoint byTouchLocation, __C::CGRect bounds)
{
  char *v2;
  double height;
  double width;
  double y;
  double x;
  double v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  Swift::Bool v24;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  char v29;
  objc_super v30;
  CGPoint v31;
  CGRect v32;

  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  v7 = byTouchLocation.y;
  v8 = byTouchLocation.x;
  v9 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (!v9)
  {
    v30.receiver = v2;
    v30.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
    return objc_msgSendSuper2(&v30, sel_hitByTouchLocation_bounds_, v8, v7, x, y, width, height);
  }
  v10 = (_QWORD *)v9;
  objc_msgSend(v2, sel_convertPoint_toCoordinateSpace_, v9, v8, v7);
  v12 = v11;
  v14 = v13;
  objc_msgSend(v2, sel_convertRect_toCoordinateSpace_, v10, x, y, width, height);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = (void *)MEMORY[0x1DF0E666C]((char *)v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v23)
  {

LABEL_4:
    v32.origin.x = v16;
    v32.origin.y = v18;
    v32.size.width = v20;
    v32.size.height = v22;
    v31.x = v12;
    v31.y = v14;
    v24 = CGRectContainsPoint(v32, v31);

    return v24;
  }
  v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v27 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x88))();
  if (!v27)
    goto LABEL_4;
  v28 = v27;
  v29 = (*(uint64_t (**)(double, double, double, double, double, double))((*v26 & *v27) + 0x578))(v12, v14, v16, v18, v20, v22);

  return v29 & 1;
}

void CanvasElementDrawingView.height(from:delta:)(double a1)
{
  char *v1;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  PKDrawing *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  CGRect v11;

  v3 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v3)
  {
    v4 = v3;
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))();
    if (v6)
    {
      v8 = (_QWORD *)v6;
      PKDrawing._bridgeToObjectiveC()(v7);
      v10 = v9;
      (*(void (**)(double))((*v5 & *v8) + 0x580))(a1);

      return;
    }

  }
  PKDrawing.bounds.getter();
  CGRectGetHeight(v11);
  objc_msgSend(v1, sel_drawingTransform);
}

id CanvasElementDrawingView.attachmentContainerView.getter()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  id v8;

  v1 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v1)
  {
    v2 = v1;
    v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v4 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
    if (v4)
    {
      v5 = v4;
      v6 = (*(uint64_t (**)(void *))((*v3 & *v4) + 0x5E8))(v2);

      if (v6)
        return (id)v6;
    }
    else
    {

    }
  }
  return v8;
}

void __swiftcall CanvasElementDrawingView.hitMiniMenu(_:)(UIView_optional *__return_ptr retstr, CGPoint a2)
{
  uint64_t v2;
  uint64_t v3;
  double y;
  double x;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = v2;
  y = a2.y;
  x = a2.x;
  v6 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v6)
  {
    v7 = v6;
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x88))();
    if (v9)
    {
      v10 = (_QWORD *)v9;
      objc_msgSend(v7, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      (*(void (**)(void *))((*v8 & *v10) + 0x5F0))(v7);

      v7 = v10;
    }

  }
}

Swift::Bool __swiftcall CanvasElementDrawingView.hitChrome(_:isStylus:)(CGPoint _, Swift::Bool isStylus)
{
  uint64_t v2;
  uint64_t v3;
  double y;
  double x;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;

  v3 = v2;
  y = _.y;
  x = _.x;
  v7 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v7)
  {
    v8 = v7;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v10 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x88))();
    if (v10)
    {
      v11 = (_QWORD *)v10;
      objc_msgSend(v8, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      v12 = (*(uint64_t (**)(void *, Swift::Bool))((*v9 & *v11) + 0x5F8))(v8, isStylus);

      v8 = v11;
    }
    else
    {
      v12 = 0;
    }

  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

id CanvasElementDrawingView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementDrawingView()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of PKStroke?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_1DDBB1FC8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in CanvasElementDrawingView.resignFirstResponder()()
{
  uint64_t v0;

  closure #1 in CanvasElementDrawingView.becomeFirstResponder()(*(_QWORD *)(v0 + 16), (SEL *)&selRef_resignFirstResponder);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

void partial apply for closure #1 in CanvasElementDrawingView.becomeFirstResponder()()
{
  uint64_t v0;

  closure #1 in CanvasElementDrawingView.becomeFirstResponder()(*(_QWORD *)(v0 + 16), (SEL *)&selRef_becomeFirstResponder);
}

void specialized CanvasElementDrawingView.init(coder:)()
{
  char *v0;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CanvasView.editingMode.setter(unsigned __int8 a1)
{
  uint64_t v1;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;

  v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  specialized Canvas.editingMode.didset(v4);
  v5 = *(void **)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (v5)
  {
    v6 = *v3;
    v7 = v6 >= 2;
    if ((_DWORD)v6 != 2)
      v6 = 0;
    if (v7)
      v8 = v6;
    else
      v8 = 0;
    v9 = v7;
    v10 = objc_msgSend(v5, sel_canvasView);
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v10, sel_drawingGestureRecognizer);

      objc_msgSend(v12, sel_setEnabled_, v9);
    }
    objc_msgSend(v5, sel_setDrawingPolicy_, v8);
  }
  else
  {
    __break(1u);
  }
}

void *PaperViewController.imageViewController.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PaperViewController.imageViewController.setter(void *a1)
{
  PaperViewController.imageViewController.setter(a1, &OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
}

uint64_t (*PaperViewController.imageViewController.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

void key path setter for PaperViewController.imageViewController : PaperViewController(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  void **v6;
  void *v7;
  id v8;

  v5 = *a1;
  v6 = (void **)(*a2 + *a5);
  swift_beginAccess();
  v7 = *v6;
  *v6 = v5;
  v8 = v5;

}

void *PaperViewController.pdfViewController.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PaperViewController.pdfViewController.setter(void *a1)
{
  PaperViewController.imageViewController.setter(a1, &OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
}

void PaperViewController.imageViewController.setter(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;

}

uint64_t (*PaperViewController.pdfViewController.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t PaperViewController.display(_:readOnly:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  NSURL *v22;
  const __CFURL *v23;
  CGImageSourceRef v24;
  char v25;
  CGImageSource *v26;
  const __CFString *v27;
  __CFString *v28;
  char v29;
  char v30;
  void (*v31)(char *, uint64_t);
  char v32;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36[2];
  unint64_t v37;
  unint64_t v38;

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UTType();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v36 - v18;
  v20 = (_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
  swift_beginAccess();
  if (*v20)
    goto LABEL_20;
  v21 = (_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
  swift_beginAccess();
  if (*v21)
    goto LABEL_20;
  if (!URL.startAccessingSecurityScopedResource()())
    goto LABEL_20;
  v36[0] = a1;
  URL._bridgeToObjectiveC()(v22);
  v3 = v23;
  v24 = CGImageSourceCreateWithURL(v23, 0);

  if (!v24)
    goto LABEL_20;
  v25 = (char)a2;
  v36[1] = v4;
  v26 = v24;
  v27 = (id)CGImageSourceGetType(v26);
  if (!v27
    || (v28 = (__CFString *)v27,
        v37 = 0,
        v38 = 0,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v28,
        (a2 = (void *)v38) == 0))
  {

    goto LABEL_20;
  }
  v3 = (void *)v37;
  swift_bridgeObjectRetain();
  UTType.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    swift_bridgeObjectRelease();

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for UTType?);
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v10, v11);
  if ((v25 & 1) != 0)
    v29 = 0;
  else
    v29 = 3;
  static UTType.pdf.getter();
  v30 = UTType.conforms(to:)();
  v31 = *(void (**)(char *, uint64_t))(v12 + 8);
  v31(v15, v11);
  if ((v30 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    LOBYTE(v37) = v29;
    PaperViewController.loadPDF(_:editingMode:)(v36[0], (char *)&v37);
  }
  else
  {
    static UTType.image.getter();
    v32 = UTType.conforms(to:)();
    v31(v15, v11);
    if ((v32 & 1) == 0)
    {
      while (1)
      {
        v37 = 0;
        v38 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v37 = 0xD000000000000014;
        v38 = 0x80000001DDF4F020;
        v34._countAndFlagsBits = (uint64_t)v3;
        v34._object = a2;
        String.append(_:)(v34);
        v35._countAndFlagsBits = 46;
        v35._object = (void *)0xE100000000000000;
        String.append(_:)(v35);
LABEL_20:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    swift_bridgeObjectRelease();
    LOBYTE(v37) = v29;
    PaperViewController.loadImage(_:editingMode:)(v36[0], &v37);
  }

  return ((uint64_t (*)(char *, uint64_t))v31)(v19, v11);
}

void PaperViewController.loadImage(_:editingMode:)(uint64_t a1, _BYTE *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  Class isa;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void **v71;
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v79 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_context];
  LOBYTE(a2) = *a2;
  v19 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementViewController<Image>));
  v20 = v18;
  v21 = (char *)specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(v20, (char)a2, 1, 0, 1, 0, 0);

  v22 = objc_msgSend(v3, sel_view);
  if (!v22)
  {
    __break(1u);
    goto LABEL_13;
  }
  v23 = v22;
  v77 = v10;
  v78 = v17;
  v24 = objc_msgSend(v21, sel_view);
  if (!v24)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v25 = v24;
  objc_msgSend(v23, sel_insertSubview_atIndex_, v24, 0);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1DDF329D0;
  v27 = objc_msgSend(v3, sel_view);
  if (!v27)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v28 = v27;
  v75 = a1;
  v76 = v13;
  v29 = objc_msgSend(v27, sel_topAnchor);

  v30 = objc_msgSend(v21, sel_view);
  if (!v30)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v31 = v30;
  v74 = v9;
  v32 = objc_msgSend(v30, sel_topAnchor);

  v33 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v32);
  *(_QWORD *)(v26 + 32) = v33;
  v34 = objc_msgSend(v3, sel_view);
  if (!v34)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v35 = v34;
  v36 = objc_msgSend(v34, sel_bottomAnchor);

  v37 = objc_msgSend(v21, sel_view);
  if (!v37)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v38 = v37;
  v39 = objc_msgSend(v37, sel_bottomAnchor);

  v40 = objc_msgSend(v36, sel_constraintEqualToAnchor_, v39);
  *(_QWORD *)(v26 + 40) = v40;
  v41 = objc_msgSend(v3, sel_view);
  if (!v41)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v42 = v41;
  v43 = objc_msgSend(v41, sel_trailingAnchor);

  v44 = objc_msgSend(v21, sel_view);
  if (!v44)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v45 = v44;
  v46 = objc_msgSend(v44, sel_trailingAnchor);

  v47 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v46);
  *(_QWORD *)(v26 + 48) = v47;
  v48 = objc_msgSend(v3, sel_view);
  if (!v48)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v49 = v48;
  v50 = objc_msgSend(v48, sel_leadingAnchor);

  v51 = objc_msgSend(v21, sel_view);
  if (v51)
  {
    v52 = v51;
    v53 = (void *)objc_opt_self();
    v54 = objc_msgSend(v52, sel_leadingAnchor);

    v55 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v54);
    *(_QWORD *)(v26 + 56) = v55;
    v80 = v26;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v53, sel_activateConstraints_, isa);

    objc_msgSend(v3, sel_addChildViewController_, v21);
    objc_msgSend(v21, sel_didMoveToParentViewController_, v3);
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v78, 1, 1, v57);
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v76, v75, v77);
    LOBYTE(v80) = 0;
    v81 = 0;
    v82 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRCustomFileSyncManager<ImageFileSync>);
    swift_allocObject();
    v58 = v20;
    v59 = CRCustomFileSyncManager.init(_:sync:at:customSync:)();
    v60 = type metadata accessor for TaskPriority();
    v61 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v74, 1, 1, v60);
    v62 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    v63 = static MainActor.shared.getter();
    v64 = (_QWORD *)swift_allocObject();
    v65 = MEMORY[0x1E0DF06E8];
    v64[2] = v63;
    v64[3] = v65;
    v64[4] = v59;
    v64[5] = v62;
    swift_release();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v61, (uint64_t)&async function pointer to partial apply for closure #1 in PaperViewController.loadImage(_:editingMode:), (uint64_t)v64);
    swift_release();
    v66 = *(_QWORD *)&v21[direct field offset for CanvasElementViewController.passThroughSubject];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<Image>, Never>>);
    v67 = swift_allocObject();
    *(_QWORD *)(v67 + 16) = v66;
    v80 = v67;
    v68 = swift_allocObject();
    *(_QWORD *)(v68 + 16) = v21;
    *(_QWORD *)(v68 + 24) = v59;
    swift_retain();
    swift_retain();
    v69 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Image>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>, MEMORY[0x1E0C95D90]);
    v70 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageCancellable] = v70;
    swift_release();
    v71 = (void **)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController];
    swift_beginAccess();
    v72 = *v71;
    *v71 = v21;
    swift_release();

    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t closure #1 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[11] = a4;
  v5[12] = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5[13] = v6;
  v5[14] = *(_QWORD *)(v6 - 8);
  v5[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Image>>);
  v5[18] = v7;
  v5[19] = *(_QWORD *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Image>>.Iterator);
  v5[21] = v8;
  v5[22] = *(_QWORD *)(v8 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = type metadata accessor for MainActor();
  v5[25] = static MainActor.shared.getter();
  v5[26] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[27] = v9;
  return swift_task_switch();
}

uint64_t closure #1 in PaperViewController.loadImage(_:editingMode:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  CRCustomFileSyncManager.updates.getter();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  v0[28] = static MainActor.shared.getter();
  v4 = (_QWORD *)swift_task_alloc();
  v0[29] = v4;
  *v4 = v0;
  v4[1] = closure #1 in PaperViewController.loadImage(_:editingMode:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

void closure #1 in PaperViewController.loadImage(_:editingMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  char *v8;
  void *v9;
  id v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v4 = *(_QWORD *)(v0 + 96) + 16;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 120), v1, v2);
  v5 = MEMORY[0x1DF0E666C](v4);
  if (!v5)
    goto LABEL_13;
  v6 = (_QWORD *)v5;
  v7 = (void **)(v5 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v8 = (char *)*v7;
  if (!*v7)
  {
    v21 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 104);
    v23 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 16))(v21, *(_QWORD *)(v0 + 120), v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
    specialized CanvasElementViewController.updateViewForPaper(_:)(v21);
    outlined destroy of StocksKitCurrencyCache.Provider?(v21, &demangling cache variable for type metadata for Capsule<Image>?);
    v15 = v6;
LABEL_12:

LABEL_13:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    *(_QWORD *)(v0 + 224) = static MainActor.shared.getter();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v24;
    *v24 = v0;
    v24[1] = closure #1 in PaperViewController.loadImage(_:editingMode:);
    AsyncStream.Iterator.next(isolation:)();
    return;
  }
  v9 = *(void **)&v8[direct field offset for Canvas.paperView];
  swift_beginAccess();
  type metadata accessor for Image();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v10 = v9;
  v11 = v8;
  Capsule.merge<A>(_:)();
  swift_endAccess();

  v12 = v11;
  specialized CanvasView.persistUIState(_:)((uint64_t)v12, v12);

  v13 = *(_BYTE **)&v12[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v13)
  {
    v14 = MEMORY[0x1DF0E666C](&v13[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v14)
    {
      v15 = (_QWORD *)v14;
      if (*(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController])
      {
        v16 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
        v17 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
        v18 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
        v19 = v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
        v20 = v13;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MiniMenuState.update(from:in:)(v16, v17, v18, v19, v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

      }
    }
    else
    {

      v15 = v12;
    }
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t closure #2 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t result;

  v2 = (_BYTE *)(a2 + direct field offset for CanvasElementViewController.editingMode);
  result = swift_beginAccess();
  if (*v2)
    return CRCustomFileSyncManager.sync(_:)();
  return result;
}

id PaperViewController.loadPDF(_:editingMode:)(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  void *v18;
  id v19;
  id v20;
  id result;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  Class isa;
  void **v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD v64[2];
  uint64_t v65;

  v3 = v2;
  v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v60 - v15;
  v17 = *a2;
  static CRKeyPath.unique.getter();
  v62 = a1;
  v63 = v3;
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.init(id:initClosure:)();
  type metadata accessor for CRContext();
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v18 = (void *)MEMORY[0x1DF0E3C90](0, v64);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v16, v8);
  LOBYTE(v64[0]) = v17;
  v19 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  v20 = specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(v18, (uint64_t)v12, (unsigned __int8 *)v64);

  result = objc_msgSend(v3, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v22 = result;
  result = objc_msgSend(v20, sel_view);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v23 = result;
  objc_msgSend(v22, sel_insertSubview_atIndex_, result, 0);

  v24 = objc_msgSend(v20, sel_view);
  if (!v24)
    goto LABEL_6;
  v25 = v24;
  result = objc_msgSend(v3, sel_view);
  if (result)
  {
    v26 = result;
    objc_msgSend(result, sel_bounds);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;

    objc_msgSend(v25, sel_setFrame_, v28, v30, v32, v34);
LABEL_6:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_1DDF329D0;
    result = objc_msgSend(v3, sel_view);
    if (result)
    {
      v36 = result;
      v60 = v9;
      v61 = v8;
      v37 = objc_msgSend(result, sel_topAnchor);

      result = objc_msgSend(v20, sel_view);
      if (result)
      {
        v38 = result;
        v39 = objc_msgSend(result, sel_topAnchor);

        v40 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v39);
        *(_QWORD *)(v35 + 32) = v40;
        result = objc_msgSend(v3, sel_view);
        if (result)
        {
          v41 = result;
          v42 = objc_msgSend(result, sel_bottomAnchor);

          result = objc_msgSend(v20, sel_view);
          if (result)
          {
            v43 = result;
            v44 = objc_msgSend(result, sel_bottomAnchor);

            v45 = objc_msgSend(v42, sel_constraintEqualToAnchor_, v44);
            *(_QWORD *)(v35 + 40) = v45;
            result = objc_msgSend(v3, sel_view);
            if (result)
            {
              v46 = result;
              v47 = objc_msgSend(result, sel_trailingAnchor);

              result = objc_msgSend(v20, sel_view);
              if (result)
              {
                v48 = result;
                v49 = objc_msgSend(result, sel_trailingAnchor);

                v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
                *(_QWORD *)(v35 + 48) = v50;
                result = objc_msgSend(v3, sel_view);
                if (result)
                {
                  v51 = result;
                  v52 = objc_msgSend(result, sel_leadingAnchor);

                  result = objc_msgSend(v20, sel_view);
                  if (result)
                  {
                    v53 = result;
                    v54 = (void *)objc_opt_self();
                    v55 = objc_msgSend(v53, sel_leadingAnchor);

                    v56 = objc_msgSend(v52, sel_constraintEqualToAnchor_, v55);
                    *(_QWORD *)(v35 + 56) = v56;
                    *(_QWORD *)&v64[0] = v35;
                    specialized Array._endMutation()();
                    type metadata accessor for NSLayoutConstraint();
                    isa = Array._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    objc_msgSend(v54, sel_activateConstraints_, isa);

                    objc_msgSend(v3, sel_addChildViewController_, v20);
                    objc_msgSend(v20, sel_didMoveToParentViewController_, v3);
                    v58 = (void **)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController];
                    swift_beginAccess();
                    v59 = *v58;
                    *v58 = v20;

                    return (id)(*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v16, v61);
                  }
                  goto LABEL_24;
                }
LABEL_23:
                __break(1u);
LABEL_24:
                __break(1u);
                goto LABEL_25;
              }
LABEL_22:
              __break(1u);
              goto LABEL_23;
            }
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t closure #1 in PaperViewController.loadPDF(_:editingMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v28, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v27 - v11;
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a2, v13, v20);
  swift_retain();
  v23 = CRContext.assetManager.getter();
  specialized PaperDocument.init<A>(url:in:assetManager:)((uint64_t)v17, a1, v23, (uint64_t)v22);
  v24 = type metadata accessor for PaperDocument(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v22, 1, v24) != 1)
    return outlined init with take of PaperDocument((uint64_t)v22, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v25 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 1, 1, v25);
  outlined init with copy of CRAsset?((uint64_t)v12, (uint64_t)v8);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(a3 + *(int *)(v24 + 24)) = MEMORY[0x1E0DEE9E0];
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for PaperDocument?);
}

Swift::Void __swiftcall PaperViewController.setCanvasEditingMode(_:)(PaperKit::CanvasEditingMode a1)
{
  uint64_t v1;
  char v2;
  void **v3;
  char *v4;
  char *v5;
  char v6;
  char *v7;
  id *v8;
  char *v9;
  void **v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned __int8 v17;

  v2 = *(_BYTE *)a1;
  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
  swift_beginAccess();
  v4 = (char *)*v3;
  if (*v3)
  {
    v5 = &v4[direct field offset for CanvasElementViewController.editingMode];
    swift_beginAccess();
    v6 = *v5;
    *v5 = v2;
    v7 = v4;
    specialized CanvasElementViewController.editingMode.didset(v6);
  }
  else
  {
    v8 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
    swift_beginAccess();
    v7 = (char *)*v8;
    if (!v7)
      return;
    v9 = &v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode];
    swift_beginAccess();
    *v9 = v2;
    v10 = (void **)&v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v11 = (char *)*v10;
    if (*v10)
    {
      v12 = (unsigned __int8 *)&v11[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      v13 = *v12;
      *v12 = v2;
      v17 = v13;
      v14 = v7;
      v15 = v11;
      PaperDocumentView.editingMode.didset(&v17);

    }
    else
    {
      v16 = v7;
    }
    PaperDocumentViewController.updatePlusButton()();
  }

}

Swift::Void __swiftcall PaperViewController.revertAllChanges()()
{
  uint64_t v0;
  void **v1;
  char *v2;
  void **v3;
  void *v4;
  char *v5;
  id v6;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
  swift_beginAccess();
  v2 = (char *)*v1;
  if (*v1)
  {
    v3 = (void **)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v4 = *v3;
    if (*v3)
    {
      v5 = v2;
      v6 = v4;
      PaperDocumentView.revertAllChanges()();

    }
  }
}

id PaperViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id PaperViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  objc_super v14;
  _OWORD v15[2];
  uint64_t v16;

  v4 = v3;
  v8 = OBJC_IVAR____TtC8PaperKit19PaperViewController_context;
  type metadata accessor for CRContext();
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v9 = v3;
  v10 = MEMORY[0x1DF0E3C90](0, v15);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(_QWORD *)&v4[v8] = v10;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageFileSyncManager] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageCancellable] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController] = 0;

  if (a2)
  {
    v11 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for PaperViewController();
  v12 = objc_msgSendSuper2(&v14, sel_initWithNibName_bundle_, v11, a3);

  return v12;
}

id PaperViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id PaperViewController.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;
  _OWORD v10[2];
  uint64_t v11;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit19PaperViewController_context;
  type metadata accessor for CRContext();
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v5 = v1;
  v6 = MEMORY[0x1DF0E3C90](0, v10);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(_QWORD *)&v2[v4] = v6;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageFileSyncManager] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageCancellable] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController] = 0;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for PaperViewController();
  v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

id PaperViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized CanvasElementViewController.editingMode.didset(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  _BYTE *v10;
  id v11;
  _BYTE *v12;
  char *v14;
  void *v15;
  _UNKNOWN **v16;
  id v17;
  uint64_t ObjectType;
  uint64_t (*v19)(uint64_t, _UNKNOWN **);
  id v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  id v48;
  void (*v49)(char *, uint64_t);
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v5 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  v59 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v57 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized CanvasElementViewController.updateToolPickerVisibility()();
  v8 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v9 = *v8;
  if (*v8)
  {
    v10 = (_BYTE *)(v1 + direct field offset for CanvasElementViewController.editingMode);
    swift_beginAccess();
    LOBYTE(v10) = *v10;
    v11 = v9;
    specialized CanvasView.editingMode.setter(v10);

  }
  specialized CanvasElementViewController.updatePlusButton()();
  v12 = (_BYTE *)(v2 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  if (*v12 == 1 && a1 != 1)
  {
    v14 = (char *)*v8;
    if (*v8)
    {
      v15 = *(void **)&v14[direct field offset for Canvas._editingView];
      if (v15)
      {
        v16 = *(_UNKNOWN ***)&v14[direct field offset for Canvas._editingView + 8];
        v17 = *(id *)&v14[direct field offset for Canvas._editingView];
      }
      else
      {
        v17 = *(id *)&v14[direct field offset for Canvas.paperView];
        v16 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      ObjectType = swift_getObjectType();
      v19 = (uint64_t (*)(uint64_t, _UNKNOWN **))v16[18];
      v20 = v15;
      v21 = (void *)v19(ObjectType, v16);

      if (v21)
      {
        v53 = v2;
        v22 = FormFillingView.formFields.getter();
        v23 = v22;
        if (v22 >> 62)
          goto LABEL_44;
        v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        while (1)
        {
          v54 = v21;
          if (!v24)
            break;
          v55 = v23;
          v56 = v23 & 0xC000000000000001;
          v25 = 4;
          v26 = v58;
          v27 = v59;
          v28 = v57;
          while (1)
          {
            v21 = (void *)(v25 - 4);
            v29 = v56 ? (id)MEMORY[0x1DF0E4D64](v25 - 4, v23) : *(id *)(v23 + 8 * v25);
            v30 = v29;
            v31 = v25 - 3;
            if (__OFADD__(v21, 1))
              break;
            type metadata accessor for ShapeView();
            v32 = (_QWORD *)swift_dynamicCastClass();
            if (v32)
            {
              v33 = (char *)v32 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v32) + 0x380);
              swift_beginAccess();
              (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v28, v33, v26);
              swift_getKeyPath();
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
              v34 = v24;
              v35 = v30;
              Capsule<>.subscript.getter();
              swift_release();
              (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v26);
              v36 = v35;

              v24 = v34;
              v23 = v55;
              if (v60 != 50 && v60 != 1)
              {
                swift_bridgeObjectRelease_n();
LABEL_26:
                v21 = v54;
                goto LABEL_28;
              }
            }

            ++v25;
            if (v31 == v24)
            {
              swift_bridgeObjectRelease_n();
              v36 = 0;
              goto LABEL_26;
            }
          }
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          swift_bridgeObjectRetain();
          v24 = _CocoaArrayWrapper.endIndex.getter();
        }
        swift_bridgeObjectRelease_n();
        v36 = 0;
LABEL_28:
        v37 = FormFillingView.formFields.getter();
        v38 = v37;
        if (v37 >> 62)
        {
          swift_bridgeObjectRetain();
          v39 = _CocoaArrayWrapper.endIndex.getter();
          if (v39)
            goto LABEL_30;
        }
        else
        {
          v39 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v39)
          {
LABEL_30:
            v52 = v36;
            v55 = v39;
            v56 = v38 & 0xC000000000000001;
            v40 = 4;
            v42 = v57;
            v41 = v58;
            while (1)
            {
              v21 = (void *)(v40 - 4);
              if (v56)
                v43 = (id)MEMORY[0x1DF0E4D64](v40 - 4, v38);
              else
                v43 = *(id *)(v38 + 8 * v40);
              v23 = (unint64_t)v43;
              v44 = v40 - 3;
              if (__OFADD__(v21, 1))
                goto LABEL_43;
              type metadata accessor for ShapeView();
              v45 = (_QWORD *)swift_dynamicCastClass();
              if (!v45)
                break;
              v46 = (char *)v45 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v45) + 0x380);
              swift_beginAccess();
              v47 = v59;
              (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v42, v46, v41);
              swift_getKeyPath();
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
              v48 = (id)v23;
              Capsule<>.subscript.getter();
              swift_release();
              v49 = *(void (**)(char *, uint64_t))(v47 + 8);
              v50 = v55;
              v49(v42, v41);

              if (v61 != 50)
                break;

              ++v40;
              if (v44 == v50)
              {
                swift_bridgeObjectRelease_n();
                v23 = 0;
                goto LABEL_40;
              }
            }
            swift_bridgeObjectRelease_n();
LABEL_40:
            v21 = v54;
            v36 = v52;
            if (v52)
              goto LABEL_49;
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRelease_n();
        v23 = 0;
        if (!v36)
        {
LABEL_47:
          if (!v23)
          {
            v23 = (unint64_t)v21;
            goto LABEL_50;
          }
          v23 = (unint64_t)(id)v23;
          v36 = (void *)v23;
        }
LABEL_49:
        objc_msgSend(v36, sel_becomeFirstResponder);

LABEL_50:
      }
    }
  }
  specialized CanvasElementViewController.updateActionInfoViewVisibility()();
}

UIView *specialized CanvasElementViewController.updatePlusButton()()
{
  char *v0;
  char *v1;
  char *v2;
  int v3;
  void *v4;
  id v5;
  id *v6;
  UIView *result;
  UIView *v8;

  v1 = v0;
  v2 = &v0[direct field offset for CanvasElementViewController.editingMode];
  swift_beginAccess();
  v3 = *v2;
  v4 = *(void **)&v1[direct field offset for CanvasElementViewController.plusButton];
  if (v3 != 1)
    return (UIView *)objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_removeFromSuperview);
  v5 = objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_superview);

  if (v5)
    objc_msgSend(v4, sel_removeFromSuperview);
  v6 = (id *)&v1[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (*v6)
    objc_msgSend(*v6, sel_addSubview_, v4);
  result = (UIView *)objc_msgSend(v1, sel_view);
  if (result)
  {
    v8 = result;
    FormPlusButtonView.setConstraintsBasedOn(_:)(result);

    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)();
    swift_release_n();
    return (UIView *)swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  double v20;
  double v21;
  uint64_t (*v22)(void);
  void *v23;
  id v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t inited;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  id v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    v6 = (_QWORD *)swift_beginAccess();
    v7 = *v5;
    if (*v5
      && ((v8 = *(void **)(v7 + direct field offset for Canvas._editingView)) == 0
        ? (v6 = *(id *)(v7 + direct field offset for Canvas.paperView), v9 = v6)
        : (v9 = *(_QWORD **)(v7 + direct field offset for Canvas._editingView)),
          v10 = (_QWORD *)MEMORY[0x1E0DEEDD8],
          v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x88))(v6),
          v12 = v8,
          v9,
          v11))
    {
      v13 = objc_msgSend(v4, sel_view);
      if (!v13)
      {
LABEL_16:
        __break(1u);
        return;
      }
      v14 = v13;
      objc_msgSend(v13, sel_center);
      v16 = v15;
      v18 = v17;

      if (one-time initialization token for defaultFormFieldSize != -1)
        swift_once();
      v19 = static FormFillingView.defaultFormFieldSize;
      v20 = v16 - *(double *)&static FormFillingView.defaultFormFieldSize * 0.5;
      v21 = v18 - *((double *)&static FormFillingView.defaultFormFieldSize + 1) * 0.5;
      v22 = *(uint64_t (**)(void))((*v10 & *v11) + 0x2F8);
      v23 = (void *)v22();
      v24 = objc_msgSend(v4, sel_view);
      objc_msgSend(v23, sel_convertRect_fromView_, v24, v20, v21, v19);
      v26 = v25;
      v28 = v27;
      v30 = v29;
      v32 = v31;

      LOBYTE(v59) = 1;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v11, 0, 0, 0, 0, 1, (unsigned __int8 *)&v59, 0x7FFFFFFFFFFFFFFFLL, v26, v28, v30, v32, 1u, 0, 0xBu, 5u);
      v34 = v33;
      v35 = (void *)v22();
      v37 = v36;
      ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
      *(_QWORD *)(inited + 32) = v34;
      v59 = inited;
      specialized Array._endMutation()();
      v40 = v59;
      v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 168);
      v42 = v34;
      v41(v40, ObjectType, v37);
      swift_bridgeObjectRelease();

      v43 = v42;
      v44 = specialized CanvasMembers.init(_:)(v43);
      v46 = v45;
      v48 = v47;
      LOBYTE(ObjectType) = v49;

      AnyCanvas.selection.setter(v44, v46, v48, ObjectType & 1);
      v50 = (void *)v22();
      v52 = v51;
      v53 = swift_getObjectType();
      v54 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 144))(v53, v52);

      if (v54)
      {
        v55 = *(_QWORD *)&v54[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
        swift_retain();

        v56 = *(_QWORD *)(v55 + 48);
        v57 = __OFADD__(v56, 1);
        v58 = v56 + 1;
        if (!v57)
        {
          *(_QWORD *)(v55 + 48) = v58;
          swift_release();
          return;
        }
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {

    }
  }
}

uint64_t specialized closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  void *v5;
  id v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  uint64_t v15;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v2);
  if (result)
  {
    v4 = (char *)result;
    if (one-time initialization token for shared != -1)
      swift_once();
    v5 = *(void **)&v4[direct field offset for CanvasElementViewController.plusButton];
    v6 = v5;
    objc_msgSend(v6, sel_bounds);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    specialized SignatureManager.showSignatures(_:_:_:_:)(v4, v5, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton(), v15, v8, v10, v12, v14);

    return swift_release_n();
  }
  return result;
}

void specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(_BYTE *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v9 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v9)
  {
    v10 = (void *)v9;
    if (a1
      && (v11 = (uint64_t *)(v9 + direct field offset for CanvasElementViewController.canvasView),
          v12 = (_QWORD *)swift_beginAccess(),
          (v13 = *v11) != 0))
    {
      v14 = *(void **)(v13 + direct field offset for Canvas._editingView);
      if (v14)
      {
        v15 = *(_QWORD **)(v13 + direct field offset for Canvas._editingView);
      }
      else
      {
        v12 = *(id *)(v13 + direct field offset for Canvas.paperView);
        v15 = v12;
      }
      v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x88))(v12);
      v18 = a1;
      v19 = v14;

      if (v17)
      {
        type metadata accessor for SignatureManager();
        swift_initStaticObject();
        v20 = objc_msgSend(v10, sel_view);
        if (v20)
        {
          v21 = v20;
          objc_msgSend(v20, sel_center);
          v23 = v22;
          v25 = v24;

          SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v18, 0, 1, 0, 1, v23, v25);
          v26 = *(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **))((*v16 & *v17) + 0x480);
          v27 = type metadata accessor for Signature();
          v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
          v26(v8, 1, 0, 0, v27, v28, &protocol witness table for Signature);

          (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }
        else
        {
          __break(1u);
        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

uint64_t type metadata accessor for PaperViewController()
{
  return objc_opt_self();
}

id sub_1DDBB51D8@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController, a2);
}

void sub_1DDBB51E4(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  key path setter for PaperViewController.imageViewController : PaperViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
}

id sub_1DDBB5200@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController, a2);
}

id keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, void **a3@<X8>)
{
  void **v4;
  void *v5;

  v4 = (void **)(*a1 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *a3 = *v4;
  return v5;
}

void sub_1DDBB5258(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  key path setter for PaperViewController.imageViewController : PaperViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
}

uint64_t method lookup function for PaperViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PaperViewController.imageViewController.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PaperViewController.imageViewController.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of PaperViewController.imageViewController.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of PaperViewController.pdfViewController.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PaperViewController.pdfViewController.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PaperViewController.pdfViewController.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of PaperViewController.display(_:readOnly:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of PaperViewController.setCanvasEditingMode(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of PaperViewController.revertAllChanges()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

void specialized Canvas.editingMode.didset(unsigned __int8 a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  void (*v5)(uint64_t *__return_ptr);
  void *v6;
  uint64_t (*v7)(void);
  char v8;
  char **v9;
  void *v10;
  _UNKNOWN **v11;
  id v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t, _UNKNOWN **);
  id v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;

  v2 = v1;
  v3 = a1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2C8);
  v5((uint64_t *)((char *)&v19 + 2));
  if (BYTE2(v19) != v3)
  {
    v6 = *(void **)((char *)v1 + direct field offset for Canvas.dropInteraction);
    if (v6)
    {
      v7 = *(uint64_t (**)(void))((*v4 & *v1) + 0xAF8);
      v18 = v6;
      v8 = v7();
      v9 = &selRef_addInteraction_;
      if ((v8 & 1) == 0)
        v9 = &selRef_removeInteraction_;
      ((void (*)(uint64_t *__return_ptr, id))v5)((uint64_t *)((char *)&v19 + 1), objc_msgSend(v1, *v9, v18));
      if (v3 == 1 || BYTE1(v19) == 1)
      {
        v10 = *(void **)((char *)v1 + direct field offset for Canvas._editingView);
        if (v10)
        {
          v11 = *(_UNKNOWN ***)((char *)v1 + direct field offset for Canvas._editingView + 8);
          v12 = *(id *)((char *)v1 + direct field offset for Canvas._editingView);
        }
        else
        {
          v12 = *(id *)((char *)v1 + direct field offset for Canvas.paperView);
          v11 = &protocol witness table for ContainerCanvasElementView<A>;
        }
        ObjectType = swift_getObjectType();
        v14 = (void (*)(uint64_t, _UNKNOWN **))v11[3];
        v15 = v10;
        v14(ObjectType, v11);

      }
      v5(&v19);
      if ((_BYTE)v19)
        goto LABEL_17;
      v16 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v16)
      {
        v17 = (_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(_QWORD *)(*v17 + 16) || *(_QWORD *)(v17[1] + 16))
          AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
LABEL_17:

        return;
      }
      __break(1u);
    }
  }
}

uint64_t sub_1DDBB5560()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in CanvasElementViewController.updatePlusButton()(a1, v1);
}

uint64_t partial apply for specialized closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #2 in CanvasElementViewController.updatePlusButton()(a1, v1);
}

void partial apply for specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1)
{
  uint64_t v1;

  specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(a1, v1);
}

uint64_t partial apply for closure #1 in PaperViewController.loadPDF(_:editingMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PaperViewController.loadPDF(_:editingMode:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type CRAsset? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    v2 = MEMORY[0x1E0D12950];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined init with take of PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PaperDocument(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDBB5644()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperViewController.loadImage(_:editingMode:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1DDBB56F0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PaperViewController.loadImage(_:editingMode:)(a1, *(_QWORD *)(v1 + 16));
}

Swift::Void __swiftcall StrokeWidthViewController.viewDidLoad()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  char *v5;
  id v6;
  uint64_t v7;
  id v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  Class isa;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  char *v28;
  id v29;
  uint64_t v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  char *v41;
  id v42;
  id v43;
  id v44;
  Class v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  objc_super v51;

  v51.receiver = v0;
  v51.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v51, sel_viewDidLoad);
  v49 = (id)objc_opt_self();
  v50 = objc_msgSend(v49, sel_configurationWithPointSize_weight_, 3, 30.0);
  v1 = (void *)MEMORY[0x1DF0E41AC](0x6169642E656E696CLL, 0xED00006C616E6F67);
  v48 = (id)objc_opt_self();
  v2 = objc_msgSend(v48, sel_systemImageNamed_withConfiguration_, v1, v50);

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v2);
  v47 = (id)objc_opt_self();
  v4 = objc_msgSend(v47, sel_labelColor);
  objc_msgSend(v3, sel_setTintColor_, v4);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v5 = ValueEditingViewController.slider.getter();
  v6 = *(id *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  objc_msgSend(v6, sel_addSubview_, v3);
  v46 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1DDF354A0;
  v8 = objc_msgSend(v3, sel_centerYAnchor);
  v9 = ValueEditingViewController.slider.getter();
  v10 = objc_msgSend(v9, (SEL)&selRef_contentView + 4);

  v11 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v10);
  *(_QWORD *)(v7 + 32) = v11;
  v12 = objc_msgSend(v3, sel_leadingAnchor);
  v13 = ValueEditingViewController.slider.getter();
  v14 = *(id *)&v13[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v15 = objc_msgSend(v14, sel_leadingAnchor);
  v16 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v15);

  *(_QWORD *)(v7 + 40) = v16;
  v17 = objc_msgSend(v3, sel_trailingAnchor);
  v18 = ValueEditingViewController.slider.getter();
  v19 = *(id *)&v18[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v20 = objc_msgSend(v19, (SEL)&selRef_done_);
  v21 = objc_msgSend(v17, sel_constraintLessThanOrEqualToAnchor_, v20);

  *(_QWORD *)(v7 + 48) = v21;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_activateConstraints_, isa);

  v23 = objc_msgSend(v49, sel_configurationWithPointSize_weight_, 9, 30.0);
  v24 = (void *)MEMORY[0x1DF0E41AC](0x6169642E656E696CLL, 0xED00006C616E6F67);
  v25 = objc_msgSend(v48, sel_systemImageNamed_withConfiguration_, v24, v23);

  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v25);
  v27 = objc_msgSend(v47, sel_labelColor);
  objc_msgSend(v26, sel_setTintColor_, v27);

  objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v28 = ValueEditingViewController.slider.getter();
  v29 = *(id *)&v28[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

  objc_msgSend(v29, sel_addSubview_, v26);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1DDF354A0;
  v31 = objc_msgSend(v26, sel_centerYAnchor);
  v32 = ValueEditingViewController.slider.getter();
  v33 = objc_msgSend(v32, sel_centerYAnchor);

  v34 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v33);
  *(_QWORD *)(v30 + 32) = v34;
  v35 = objc_msgSend(v26, sel_leadingAnchor);
  v36 = ValueEditingViewController.slider.getter();
  v37 = *(id *)&v36[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

  v38 = objc_msgSend(v37, sel_leadingAnchor);
  v39 = objc_msgSend(v35, sel_constraintGreaterThanOrEqualToAnchor_, v38);

  *(_QWORD *)(v30 + 40) = v39;
  v40 = objc_msgSend(v26, sel_trailingAnchor);
  v41 = ValueEditingViewController.slider.getter();
  v42 = *(id *)&v41[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

  v43 = objc_msgSend(v42, sel_trailingAnchor);
  v44 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v43);

  *(_QWORD *)(v30 + 48) = v44;
  specialized Array._endMutation()();
  v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_activateConstraints_, v45);

}

uint64_t type metadata accessor for StrokeWidthViewController()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for SignatureLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, SignatureLogger);
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t static SignatureManager.shared.getter()
{
  type metadata accessor for SignatureManager();
  return swift_initStaticObject();
}

uint64_t type metadata accessor for SignatureManager()
{
  return objc_opt_self();
}

uint64_t SignatureManager.signatureItems.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v1 = specialized SignatureManager.loadSignatures()();
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

BOOL SignatureManager.hasSignatures.getter()
{
  unint64_t v0;
  uint64_t v1;

  v0 = SignatureManager.signatureItems.getter();
  if (v0 >> 62)
    v1 = _CocoaArrayWrapper.endIndex.getter();
  else
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  return v1 != 0;
}

void closure #1 in SignatureManager.signatureViewController(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  char *v8;
  char *v9;

  v7 = objc_allocWithZone((Class)type metadata accessor for SignatureEditViewController());
  swift_retain();
  v9 = (char *)objc_msgSend(v7, sel_initWithNibName_bundle_, 0, 0);
  v8 = &v9[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  *(_QWORD *)v8 = a2;
  *((_QWORD *)v8 + 1) = a3;
  swift_release();
  if (a4)
    objc_msgSend(a4, sel_presentViewController_animated_completion_, v9, 1, 0);

}

Swift::Bool __swiftcall SignatureManager.isShowingSignatures(_:)(UIViewController *a1)
{
  UIViewController *v1;
  UIViewController *v2;
  Swift::Bool v3;

  v1 = -[UIViewController presentedViewController](a1, sel_presentedViewController);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for SignatureEditViewController();
  if (swift_dynamicCastClass()
    || (type metadata accessor for SignatureCreationViewController(), swift_dynamicCastClass()))
  {
    v3 = 1;
  }
  else
  {
    type metadata accessor for SignatureListController();
    v3 = swift_dynamicCastClass() != 0;
  }

  return v3;
}

void SignatureManager.hideSignatures(_:_:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[6];

  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)SignatureLogger);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1DDB0F000, v7, v8, "hide signature panel", v9, 2u);
    MEMORY[0x1DF0E6558](v9, -1, -1);
  }

  v10 = objc_msgSend(a1, sel_presentedViewController);
  if (v10)
  {
    v11 = v10;
    type metadata accessor for SignatureEditViewController();
    if (swift_dynamicCastClass()
      || (type metadata accessor for SignatureCreationViewController(), swift_dynamicCastClass()))
    {

    }
    else
    {
      type metadata accessor for SignatureListController();
      v14 = swift_dynamicCastClass();

      if (!v14)
        return;
    }
    v12 = objc_msgSend(a1, sel_presentedViewController);
    if (v12)
    {
      v13 = v12;
      if (a2)
      {
        v15[4] = a2;
        v15[5] = a3;
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 1107296256;
        v15[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v15[3] = &block_descriptor_10;
        a2 = _Block_copy(v15);
        swift_retain();
        swift_release();
      }
      objc_msgSend(v13, sel_dismissViewControllerAnimated_completion_, 1, a2);
      _Block_release(a2);

    }
  }
}

uint64_t SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BYTE v29[16];
  uint64_t v30;
  double v31;
  double v32;
  double *v33;
  __int128 v34;
  __int128 v35;
  double v36[2];

  v14 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = type metadata accessor for Signature();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v29[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a5 & 1) != 0)
    v20 = 72.0;
  else
    v20 = *(double *)&a4;
  v21 = SignatureItem.size.getter();
  v23 = 400.0 / v21;
  if (400.0 / v21 > 1.0)
    v23 = 1.0;
  v24 = v21 * v23;
  v25 = v22 * v23;
  v26 = v20 / v25;
  if (v20 / v25 > 1.0)
    v26 = 1.0;
  v36[0] = v24 * v26;
  v36[1] = v25 * v26;
  v27 = v25 * v26 * -0.5;
  if ((a3 & 1) == 0)
    a7 = *(double *)&a2 + v27;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v34 = 0u;
  v35 = 0u;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v34 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v34 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignatureItem?);
  lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v34 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v34 = 0;
  BYTE8(v34) = 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v19[*(int *)(v16 + 36)] = MEMORY[0x1E0DEE9E0];
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  Capsule<>.init(_:id:)();
  v30 = a1;
  v31 = a6;
  v32 = a7;
  v33 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  return Capsule.callAsFunction<A>(_:)();
}

uint64_t closure #1 in SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(double a1, double a2, uint64_t a3, void *a4, double *a5)
{
  void (*v9)(CGColor **, _QWORD);
  id v10;
  double v11;
  double v12;
  double v13;
  void (*v14)(CGColor **, _QWORD);
  id v15;
  uint64_t (*v16)(CGColor **, _QWORD);
  CGColor *v18[4];

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  v9 = (void (*)(CGColor **, _QWORD))Capsule.Ref<>.root.modify();
  type metadata accessor for Signature();
  v10 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  CRRegister.wrappedValue.setter();
  v9(v18, 0);
  v11 = *a5;
  v12 = a5[1];
  v13 = a1 - *a5 * 0.5;
  v14 = (void (*)(CGColor **, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v14(v18, 0);
  v15 = objc_msgSend((id)objc_opt_self(), sel_blackColor, *(_QWORD *)&v13, a2 - v12 * 0.5, *(_QWORD *)&v11, *(_QWORD *)&v12);
  Color.init(cgColor:)((CGColor *)objc_msgSend(v15, sel_CGColor), v18);

  v16 = (uint64_t (*)(CGColor **, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  return v16(v18, 0);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

void SignatureManager.saveSignature(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t inited;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  NSNumber v35;
  void *v36;
  id v37;
  NSData v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  NSDictionary v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *oslog;
  os_log_t osloga;
  unint64_t v56;
  Swift::String v57;

  v2 = v1;
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)SignatureLogger);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DDB0F000, v5, v6, "saving signature", v7, 2u);
    MEMORY[0x1DF0E6558](v7, -1, -1);
  }

  v8 = SignatureItem.dataForKeychain()();
  if (v9 >> 60 == 15)
  {
    oslog = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1DDB0F000, oslog, v10, "failed to create archive data for keychain", v11, 2u);
      MEMORY[0x1DF0E6558](v11, -1, -1);
    }

  }
  else
  {
    v12 = v9;
    v52 = v2;
    v53 = v8;
    v13 = Data.base64EncodedData(options:)();
    osloga = v14;
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v57._countAndFlagsBits = 0xD000000000000052;
    v15._countAndFlagsBits = 0xD000000000000072;
    v57._object = (void *)0x80000001DDF4F320;
    v15._object = (void *)0x80000001DDF4F2A0;
    v16.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v16.value._object = (void *)0xEB00000000656C62;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v57);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF354E0;
    v20 = (void *)*MEMORY[0x1E0CD6C98];
    v21 = (void *)*MEMORY[0x1E0CD6CA8];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CD6C98];
    *(_QWORD *)(inited + 40) = v21;
    v22 = (void *)*MEMORY[0x1E0CD6B58];
    *(_QWORD *)(inited + 48) = *MEMORY[0x1E0CD6B58];
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v26 = MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF4F250);
    v27 = (void *)*MEMORY[0x1E0CD6A90];
    *(_QWORD *)(inited + 56) = v26;
    *(_QWORD *)(inited + 64) = v27;
    v28 = v27;
    v29 = MEMORY[0x1DF0E41AC](0xD00000000000001CLL, 0x80000001DDF4F380);
    v30 = (void *)*MEMORY[0x1E0CD6898];
    *(_QWORD *)(inited + 72) = v29;
    *(_QWORD *)(inited + 80) = v30;
    v31 = v30;
    v32 = MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4F280);
    v33 = (void *)*MEMORY[0x1E0CD6B80];
    *(_QWORD *)(inited + 88) = v32;
    *(_QWORD *)(inited + 96) = v33;
    v34 = v33;
    v35.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v36 = (void *)*MEMORY[0x1E0CD70D8];
    *(NSNumber *)(inited + 104) = v35;
    *(_QWORD *)(inited + 112) = v36;
    v37 = v36;
    v38.super.isa = Data._bridgeToObjectiveC()().super.isa;
    v39 = (void *)*MEMORY[0x1E0CD68F8];
    *(NSData *)(inited + 120) = v38;
    *(_QWORD *)(inited + 128) = v39;
    v40 = v39;
    v41 = UUID.uuidString.getter();
    v42 = MEMORY[0x1DF0E41AC](v41);
    swift_bridgeObjectRelease();
    v43 = (void *)*MEMORY[0x1E0CD6988];
    *(_QWORD *)(inited + 136) = v42;
    *(_QWORD *)(inited + 144) = v43;
    v44 = v43;
    v45 = MEMORY[0x1DF0E41AC](v18._countAndFlagsBits, v18._object);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 152) = v45;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v46.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (SecItemAdd(v46.super.isa, 0))
    {
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v49 = 67109120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1DDB0F000, v47, v48, "failed to add new signature. error:%d", v49, 8u);
        MEMORY[0x1DF0E6558](v49, -1, -1);
      }
      outlined consume of Data._Representation(v13, (unint64_t)osloga);

      outlined consume of Data?(v53, v12);
    }
    else
    {
      v50 = a1;
      v56 = SignatureManager.signatureItems.getter();
      if (v56 >> 62
        && (swift_bridgeObjectRetain(), v51 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), v51 < 0))
      {
        __break(1u);
      }
      else
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v50);
        *(_QWORD *)(v52 + 16) = v56;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v13, (unint64_t)osloga);

        outlined consume of Data?(v53, v12);
      }
    }
  }
}

Swift::Bool __swiftcall SignatureManager.removeSignature(atIndex:)(Swift::Int atIndex)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  id v16;
  void *v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)SignatureLogger);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1DDB0F000, v10, v11, "removing signature", v12, 2u);
    MEMORY[0x1DF0E6558](v12, -1, -1);
  }

  if (atIndex < 0)
    goto LABEL_14;
  v13 = SignatureManager.signatureItems.getter();
  v14 = v13 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (v14 <= atIndex)
    goto LABEL_14;
  v15 = SignatureManager.signatureItems.getter();
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (id)MEMORY[0x1DF0E4D64](atIndex, v15);
  }
  else
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)atIndex)
    {
      __break(1u);
      return v15;
    }
    v16 = *(id *)(v15 + 8 * atIndex + 32);
  }
  v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, (uint64_t)v17 + OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID, v4);

  v18 = specialized SignatureManager.removeSignature(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if ((v18 & 1) == 0)
  {
LABEL_14:
    LOBYTE(v15) = 0;
  }
  else
  {
    v21 = SignatureManager.signatureItems.getter();

    *(_QWORD *)(v2 + 16) = v21;
    swift_bridgeObjectRelease();
    LOBYTE(v15) = 1;
  }
  return v15;
}

uint64_t SignatureManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SignatureManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id SignatureListController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureListController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  unint64_t v35;
  Swift::Int v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  id v43;
  id v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  void **v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  id v53;
  id v54;
  uint64_t v55;
  int v56;
  char *v57;
  int v58;
  uint64_t *v59;
  Swift::Int v60;
  Swift::Int v61;
  uint64_t *v62;
  uint64_t v63;
  Swift::Int v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  Swift::Int v66;
  void *v67;
  Swift::Int v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  char v78;
  void (*v79)(uint64_t, uint64_t);
  void *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  char v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  Swift::Int v146;
  char *v147;
  uint64_t v148;
  Swift::Int v149;
  char *v150;
  Swift::Int v151;
  Swift::Int v152;
  unsigned int (*v153)(uint64_t, uint64_t, uint64_t);
  char *v154;
  uint64_t v155;
  void **v156;
  uint64_t v157;
  char *v158;
  Swift::Int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v161 = (uint64_t)&v142 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v142 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v155 = (uint64_t)&v142 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v142 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v148 = (uint64_t)&v142 - v23;
  v24 = a1[1];
  v25 = _minimumMergeRunLength(_:)(v24);
  if (v25 >= v24)
  {
    if (v24 < 0)
      goto LABEL_139;
    if (v24)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v24, 1, a1);
    return;
  }
  if (v24 >= 0)
    v26 = v24;
  else
    v26 = v24 + 1;
  if (v24 < -1)
    goto LABEL_153;
  v146 = v25;
  v152 = v24;
  v157 = v1;
  v143 = a1;
  if (v24 < 2)
  {
    v30 = (char *)MEMORY[0x1E0DEE9D8];
    v162 = MEMORY[0x1E0DEE9D8];
    v156 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v24 != 1)
    {
      v35 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_105:
      if (v35 >= 2)
      {
        v134 = *v143;
        do
        {
          v135 = v35 - 2;
          if (v35 < 2)
            goto LABEL_134;
          if (!v134)
            goto LABEL_150;
          v136 = v30;
          v137 = *(_QWORD *)&v30[16 * v135 + 32];
          v138 = *(_QWORD *)&v30[16 * v35 + 24];
          v139 = v157;
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v134 + 8 * v137), (void **)(v134 + 8 * *(_QWORD *)&v30[16 * v35 + 16]), (void **)(v134 + 8 * v138), v156);
          v157 = v139;
          if (v139)
            break;
          if (v138 < v137)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v136 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v136);
          if (v135 >= *((_QWORD *)v136 + 2))
            goto LABEL_136;
          v140 = &v136[16 * v135 + 32];
          *(_QWORD *)v140 = v137;
          *((_QWORD *)v140 + 1) = v138;
          v141 = *((_QWORD *)v136 + 2);
          if (v35 > v141)
            goto LABEL_137;
          memmove(&v136[16 * v35 + 16], &v136[16 * v35 + 32], 16 * (v141 - v35));
          v30 = v136;
          *((_QWORD *)v136 + 2) = v141 - 1;
          v35 = v141 - 1;
        }
        while (v141 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v162 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v27 = a1;
    v28 = v26 >> 1;
    type metadata accessor for SignatureItem();
    v29 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) = v28;
    a1 = v27;
    v156 = (void **)((v29 & 0xFFFFFFFFFFFFFF8) + 32);
    v162 = v29;
  }
  v31 = 0;
  v32 = *a1;
  v33 = *a1 + 16;
  v144 = *a1 - 8;
  v145 = v33;
  v30 = (char *)MEMORY[0x1E0DEE9D8];
  v150 = v13;
  v34 = v152;
  v154 = v20;
  v160 = v32;
  v158 = v6;
  while (1)
  {
    v36 = v31++;
    v151 = v36;
    if (v31 < v34)
    {
      v147 = v30;
      v37 = *(void **)(v32 + 8 * v31);
      v38 = *(void **)(v32 + 8 * v36);
      v39 = v148;
      outlined init with copy of Date?((uint64_t)v37 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v148);
      v40 = type metadata accessor for Date();
      v41 = *(_QWORD *)(v40 - 8);
      v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
      if (v42(v39, 1, v40) == 1)
        goto LABEL_151;
      outlined init with copy of Date?((uint64_t)v38 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v20);
      v153 = v42;
      if (v42((uint64_t)v20, 1, v40) == 1)
        goto LABEL_152;
      v43 = v37;
      v44 = v38;
      v45 = v148;
      LODWORD(v159) = static Date.> infix(_:_:)();
      v46 = *(void (**)(char *, uint64_t))(v41 + 8);
      v46(v20, v40);
      v46((char *)v45, v40);

      v36 = v151;
      v31 = v151 + 2;
      if (v151 + 2 < v152)
      {
        v47 = (void **)(v145 + 8 * v151);
        do
        {
          v48 = *(v47 - 1);
          v49 = *v47;
          v50 = v155;
          outlined init with copy of Date?((uint64_t)*v47 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v155);
          v51 = v50;
          v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v153;
          if (v153(v51, 1, v40) == 1)
            goto LABEL_147;
          outlined init with copy of Date?((uint64_t)v48 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v13);
          if (v52(v13, 1, v40) == 1)
            goto LABEL_148;
          v53 = v49;
          v54 = v48;
          v55 = v155;
          v56 = static Date.> infix(_:_:)();
          v57 = v13;
          v58 = v56;
          v46(v57, v40);
          v46((char *)v55, v40);

          if (((v159 ^ v58) & 1) != 0)
            goto LABEL_25;
          ++v31;
          ++v47;
          v13 = v150;
        }
        while (v152 != v31);
        v31 = v152;
LABEL_25:
        v20 = v154;
        v36 = v151;
      }
      v30 = v147;
      v32 = v160;
      if ((v159 & 1) != 0)
      {
        if (v31 < v36)
          goto LABEL_140;
        if (v36 < v31)
        {
          v59 = (uint64_t *)(v144 + 8 * v31);
          v60 = v31;
          v61 = v36;
          v62 = (uint64_t *)(v160 + 8 * v36);
          do
          {
            if (v61 != --v60)
            {
              if (!v32)
                goto LABEL_149;
              v63 = *v62;
              *v62 = *v59;
              *v59 = v63;
            }
            ++v61;
            --v59;
            ++v62;
          }
          while (v61 < v60);
        }
      }
    }
    if (v31 < v152)
    {
      if (__OFSUB__(v31, v36))
        goto LABEL_138;
      if (v31 - v36 < v146)
        break;
    }
LABEL_55:
    if (v31 < v36)
      goto LABEL_133;
    v81 = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v30 = v81;
    else
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v81 + 2) + 1, 1, v81);
    v83 = *((_QWORD *)v30 + 2);
    v82 = *((_QWORD *)v30 + 3);
    v35 = v83 + 1;
    v32 = v160;
    if (v83 >= v82 >> 1)
    {
      v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, v30);
      v32 = v160;
      v30 = v133;
    }
    *((_QWORD *)v30 + 2) = v35;
    v84 = &v30[16 * v83 + 32];
    *(_QWORD *)v84 = v36;
    *((_QWORD *)v84 + 1) = v31;
    if (v83)
    {
      v85 = v30 + 32;
      while (1)
      {
        v86 = v35 - 1;
        if (v35 >= 4)
        {
          v91 = &v85[16 * v35];
          v92 = *((_QWORD *)v91 - 8);
          v93 = *((_QWORD *)v91 - 7);
          v97 = __OFSUB__(v93, v92);
          v94 = v93 - v92;
          if (v97)
            goto LABEL_122;
          v96 = *((_QWORD *)v91 - 6);
          v95 = *((_QWORD *)v91 - 5);
          v97 = __OFSUB__(v95, v96);
          v89 = v95 - v96;
          v90 = v97;
          if (v97)
            goto LABEL_123;
          v98 = v35 - 2;
          v99 = &v85[16 * v35 - 32];
          v101 = *(_QWORD *)v99;
          v100 = *((_QWORD *)v99 + 1);
          v97 = __OFSUB__(v100, v101);
          v102 = v100 - v101;
          if (v97)
            goto LABEL_125;
          v97 = __OFADD__(v89, v102);
          v103 = v89 + v102;
          if (v97)
            goto LABEL_128;
          if (v103 >= v94)
          {
            v121 = &v85[16 * v86];
            v123 = *(_QWORD *)v121;
            v122 = *((_QWORD *)v121 + 1);
            v97 = __OFSUB__(v122, v123);
            v124 = v122 - v123;
            if (v97)
              goto LABEL_132;
            v114 = v89 < v124;
            goto LABEL_93;
          }
        }
        else
        {
          if (v35 != 3)
          {
            v115 = *((_QWORD *)v30 + 4);
            v116 = *((_QWORD *)v30 + 5);
            v97 = __OFSUB__(v116, v115);
            v108 = v116 - v115;
            v109 = v97;
            goto LABEL_87;
          }
          v88 = *((_QWORD *)v30 + 4);
          v87 = *((_QWORD *)v30 + 5);
          v97 = __OFSUB__(v87, v88);
          v89 = v87 - v88;
          v90 = v97;
        }
        if ((v90 & 1) != 0)
          goto LABEL_124;
        v98 = v35 - 2;
        v104 = &v85[16 * v35 - 32];
        v106 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        v107 = __OFSUB__(v105, v106);
        v108 = v105 - v106;
        v109 = v107;
        if (v107)
          goto LABEL_127;
        v110 = &v85[16 * v86];
        v112 = *(_QWORD *)v110;
        v111 = *((_QWORD *)v110 + 1);
        v97 = __OFSUB__(v111, v112);
        v113 = v111 - v112;
        if (v97)
          goto LABEL_130;
        if (__OFADD__(v108, v113))
          goto LABEL_131;
        if (v108 + v113 >= v89)
        {
          v114 = v89 < v113;
LABEL_93:
          if (v114)
            v86 = v98;
          goto LABEL_95;
        }
LABEL_87:
        if ((v109 & 1) != 0)
          goto LABEL_126;
        v117 = &v85[16 * v86];
        v119 = *(_QWORD *)v117;
        v118 = *((_QWORD *)v117 + 1);
        v97 = __OFSUB__(v118, v119);
        v120 = v118 - v119;
        if (v97)
          goto LABEL_129;
        if (v120 < v108)
          goto LABEL_14;
LABEL_95:
        v125 = v86 - 1;
        if (v86 - 1 >= v35)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v32)
          goto LABEL_146;
        v126 = v30;
        v127 = &v85[16 * v125];
        v128 = *(_QWORD *)v127;
        v129 = &v85[16 * v86];
        v130 = *((_QWORD *)v129 + 1);
        v131 = v157;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v32 + 8 * *(_QWORD *)v127), (void **)(v32 + 8 * *(_QWORD *)v129), (void **)(v32 + 8 * v130), v156);
        v157 = v131;
        if (v131)
          goto LABEL_116;
        if (v130 < v128)
          goto LABEL_119;
        if (v86 > *((_QWORD *)v126 + 2))
          goto LABEL_120;
        *(_QWORD *)v127 = v128;
        *(_QWORD *)&v85[16 * v125 + 8] = v130;
        v132 = *((_QWORD *)v126 + 2);
        if (v86 >= v132)
          goto LABEL_121;
        v35 = v132 - 1;
        memmove(&v85[16 * v86], v129 + 16, 16 * (v132 - 1 - v86));
        v30 = v126;
        *((_QWORD *)v126 + 2) = v132 - 1;
        v20 = v154;
        v32 = v160;
        if (v132 <= 2)
          goto LABEL_14;
      }
    }
    v35 = 1;
LABEL_14:
    v34 = v152;
    v13 = v150;
    if (v31 >= v152)
      goto LABEL_105;
  }
  if (__OFADD__(v36, v146))
    goto LABEL_141;
  if (v36 + v146 >= v152)
    v64 = v152;
  else
    v64 = v36 + v146;
  if (v64 >= v36)
  {
    if (v31 != v64)
    {
      v147 = v30;
      v65 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v144 + 8 * v31);
      v149 = v64;
      do
      {
        v67 = *(void **)(v32 + 8 * v31);
        v68 = v36;
        v153 = v65;
        v159 = v31;
        while (1)
        {
          v69 = *(void **)v65;
          v70 = v161;
          outlined init with copy of Date?((uint64_t)v67 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v161);
          v71 = type metadata accessor for Date();
          v72 = *(_QWORD *)(v71 - 8);
          v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
          if (v73(v70, 1, v71) == 1)
            goto LABEL_143;
          v74 = (uint64_t)v158;
          outlined init with copy of Date?((uint64_t)v69 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v158);
          if (v73(v74, 1, v71) == 1)
            goto LABEL_144;
          v75 = v67;
          v76 = v69;
          v77 = v161;
          v78 = static Date.> infix(_:_:)();
          v79 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
          v79(v74, v71);
          v79(v77, v71);

          if ((v78 & 1) == 0)
            break;
          v66 = v159;
          v32 = v160;
          if (!v160)
            goto LABEL_145;
          v80 = *(_QWORD *)v65;
          v67 = (void *)*((_QWORD *)v65 + 1);
          *(_QWORD *)v65 = v67;
          *((_QWORD *)v65 + 1) = v80;
          v65 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)v65 - 8);
          if (v66 == ++v68)
            goto LABEL_46;
        }
        v66 = v159;
        v32 = v160;
LABEL_46:
        v31 = v66 + 1;
        v65 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)v153 + 8);
        v36 = v151;
      }
      while (v31 != v149);
      v31 = v149;
      v30 = v147;
      v20 = v154;
    }
    goto LABEL_55;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;

  v33 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v7, v8);
  v35 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v39 = (uint64_t)&v31 - v12;
  v32 = a2;
  if (a3 != a2)
  {
    v36 = *a4;
    v13 = v36 + 8 * a3 - 8;
    v14 = &OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate;
LABEL_5:
    v15 = *(void **)(v36 + 8 * a3);
    v16 = v33;
    v34 = v13;
    v37 = a3;
    while (1)
    {
      v17 = *(void **)v13;
      v18 = v39;
      outlined init with copy of Date?((uint64_t)v15 + *v14, v39);
      v19 = type metadata accessor for Date();
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
      if (v21(v18, 1, v19) == 1)
        break;
      v22 = v35;
      outlined init with copy of Date?((uint64_t)v17 + *v14, v35);
      if (v21(v22, 1, v19) == 1)
        goto LABEL_13;
      v38 = v15;
      v23 = v17;
      v24 = v14;
      v25 = v39;
      v26 = static Date.> infix(_:_:)();
      v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v27(v22, v19);
      v28 = v25;
      v14 = v24;
      v27(v28, v19);

      v29 = v37;
      if ((v26 & 1) != 0)
      {
        if (!v36)
          goto LABEL_14;
        v30 = *(void **)v13;
        v15 = *(void **)(v13 + 8);
        *(_QWORD *)v13 = v15;
        *(_QWORD *)(v13 + 8) = v30;
        v13 -= 8;
        if (v29 != ++v16)
          continue;
      }
      a3 = v29 + 1;
      v13 = v34 + 8;
      if (a3 == v32)
        return;
      goto LABEL_5;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(unint64_t, uint64_t, uint64_t);
  uint64_t v33;
  id v34;
  id v35;
  unint64_t v36;
  char v37;
  void (*v38)(uint64_t, uint64_t);
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  void **v46;
  void *v47;
  void **v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  void **v55;
  unint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  void (*v63)(uint64_t, uint64_t);
  BOOL v64;
  unint64_t v65;
  uint64_t result;
  uint64_t v67;
  void **v68;
  char *v69;
  void **v70;
  void **v71;
  unint64_t v72;
  uint64_t v73;
  void **v74;
  void **v75;
  void **v76;
  void **v77;
  void **v78;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v8, v9);
  v69 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v73 = (uint64_t)&v67 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  v71 = a3;
  v72 = (unint64_t)&v67 - v19;
  v20 = (char *)a2 - (char *)a1;
  v21 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v21 = (char *)a2 - (char *)a1;
  v22 = v21 >> 3;
  v23 = a2;
  v24 = (char *)a3 - (char *)a2;
  v25 = v24 / 8;
  v78 = a1;
  v77 = a4;
  v74 = a1;
  if (v21 >> 3 < v24 / 8)
  {
    if (v20 < -7)
      goto LABEL_52;
    v73 = v18;
    if (a4 != a1 || &a1[v22] <= a4)
      memmove(a4, a1, 8 * v22);
    v70 = &a4[v22];
    v76 = v70;
    if (v23 < v71 && v20 >= 8)
    {
      v26 = v23;
      while (1)
      {
        v75 = v26;
        v27 = *v26;
        v28 = *a4;
        v29 = v72;
        outlined init with copy of Date?((uint64_t)*v26 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v72);
        v30 = type metadata accessor for Date();
        v31 = *(_QWORD *)(v30 - 8);
        v32 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v31 + 48);
        if (v32(v29, 1, v30) == 1)
          goto LABEL_49;
        v33 = v73;
        outlined init with copy of Date?((uint64_t)v28 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v73);
        if (v32(v33, 1, v30) == 1)
          goto LABEL_50;
        v34 = v27;
        v35 = v28;
        v36 = v72;
        v37 = static Date.> infix(_:_:)();
        v38 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
        v38(v33, v30);
        v38(v36, v30);

        if ((v37 & 1) != 0)
        {
          v39 = v74;
          v40 = v75 + 1;
          if (v74 < v75 || v74 >= v40 || v74 != v75)
            *v74 = *v75;
        }
        else
        {
          v39 = v74;
          v41 = v75;
          if (v74 != a4)
            *v74 = *a4;
          v77 = ++a4;
          v40 = v41;
        }
        v74 = v39 + 1;
        v78 = v39 + 1;
        if (a4 < v70)
        {
          v26 = v40;
          if (v40 < v71)
            continue;
        }
        break;
      }
    }
LABEL_47:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v78, &v77, &v76);
    return 1;
  }
  if (v24 < -7)
    goto LABEL_52;
  v42 = v23;
  if (a4 != v23 || &v23[v25] <= a4)
    memmove(a4, v23, 8 * v25);
  v43 = (unint64_t)&a4[v25];
  v76 = (void **)v43;
  v78 = v23;
  v44 = (uint64_t)v69;
  if (a1 >= v23 || v24 < 8)
    goto LABEL_47;
  v45 = v71 - 1;
  v46 = v23;
  v68 = a4;
  while (1)
  {
    v71 = v45;
    v72 = v43;
    v75 = v42;
    v48 = (void **)(v43 - 8);
    v47 = *(void **)(v43 - 8);
    v49 = *(v46 - 1);
    v70 = v46 - 1;
    v50 = v73;
    outlined init with copy of Date?((uint64_t)v47 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v73);
    v51 = type metadata accessor for Date();
    v52 = *(_QWORD *)(v51 - 8);
    v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
    if (v53(v50, 1, v51) == 1)
      break;
    v54 = v44;
    outlined init with copy of Date?((uint64_t)v49 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v44);
    if (v53(v44, 1, v51) == 1)
      goto LABEL_51;
    v55 = v71;
    v56 = (unint64_t)(v71 + 1);
    v57 = v47;
    v58 = v49;
    v59 = v73;
    v60 = static Date.> infix(_:_:)();
    v61 = v54;
    v62 = v60;
    v63 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v63(v61, v51);
    v63(v59, v51);

    if ((v62 & 1) != 0)
    {
      v43 = v72;
      v46 = v70;
      if ((void **)v56 != v75 || v55 >= v75)
        *v55 = *v70;
      v78 = v46;
    }
    else
    {
      v76 = v48;
      if (v56 >= v72 && (unint64_t)v55 < v72)
      {
        v64 = v56 == v72;
        v44 = (uint64_t)v69;
        if (!v64)
          *v55 = *v48;
        v46 = v75;
        v43 = (unint64_t)v48;
        v65 = (unint64_t)v68;
        goto LABEL_45;
      }
      *v55 = *v48;
      v46 = v75;
      v43 = (unint64_t)v48;
    }
    v65 = (unint64_t)v68;
    v44 = (uint64_t)v69;
LABEL_45:
    if (v46 > v74)
    {
      v45 = v55 - 1;
      v42 = v46;
      if (v43 > v65)
        continue;
    }
    goto LABEL_47;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SignatureManager.loadSignatures()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t inited;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSNumber v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSNumber v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSDictionary v24;
  OSStatus v25;
  OSStatus v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t ObjectType;
  id v45;
  Class v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  Class v54;
  uint64_t v55;
  id v56;
  NSDictionary v57;
  OSStatus v58;
  OSStatus v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  Class v73;
  id v74;
  void *v75;
  uint64_t ObjCClassFromMetadata;
  id v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  id v82;
  void *v83;
  void *v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  Class isa;
  void *v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  CFTypeRef v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  CFTypeRef result[20];

  result[17] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1DDB0F000, v1, v2, "load signatures", v3, 2u);
    MEMORY[0x1DF0E6558](v3, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32930;
  v5 = (void *)*MEMORY[0x1E0CD6C98];
  v6 = (void *)*MEMORY[0x1E0CD6CA8];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CD6C98];
  *(_QWORD *)(inited + 40) = v6;
  v7 = (void *)*MEMORY[0x1E0CD7010];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0CD7010];
  v98 = v5;
  v100 = v6;
  v8 = v7;
  v9.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v10 = (void *)*MEMORY[0x1E0CD6898];
  *(NSNumber *)(inited + 56) = v9;
  *(_QWORD *)(inited + 64) = v10;
  v99 = v10;
  v11 = MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4F280);
  v12 = (void *)*MEMORY[0x1E0CD6B80];
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 80) = v12;
  v13 = v12;
  v14.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v15 = (void *)*MEMORY[0x1E0CD6B58];
  *(NSNumber *)(inited + 88) = v14;
  *(_QWORD *)(inited + 96) = v15;
  v16 = v15;
  v17 = MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF4F250);
  v18 = (void *)*MEMORY[0x1E0CD6F30];
  *(_QWORD *)(inited + 104) = v17;
  *(_QWORD *)(inited + 112) = v18;
  v19 = (void *)*MEMORY[0x1E0CD6F38];
  *(_QWORD *)(inited + 120) = *MEMORY[0x1E0CD6F38];
  v20 = v18;
  v21 = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  v23 = v22;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v24.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  result[0] = 0;
  isa = v24.super.isa;
  v25 = SecItemCopyMatching(v24.super.isa, result);
  if (v25)
  {
    v26 = v25;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v29 = 67109120;
      LODWORD(v107[0]) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v27, v28, "no signatures. error:%d", v29, 8u);
      MEMORY[0x1DF0E6558](v29, -1, -1);
    }

    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v101 = v23;
  v95 = v20;
  v96 = v16;
  v97 = v13;
  if (result[0])
  {
    *(CFTypeRef *)&v107[0] = result[0];
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[CFStringRef : Any]]);
    swift_dynamicCast();
    v103 = MEMORY[0x1E0DEE9D8];
    v31 = *(_QWORD *)(v105 + 16);
    if (!v31)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      specialized MutableCollection<>.sort(by:)(&v103);

      v30 = v103;
      swift_unknownObjectRelease();
      return v30;
    }
    v32 = (uint64_t *)(v105 + 32);
    v102 = (void *)*MEMORY[0x1E0CD68F8];
    v93 = (void *)*MEMORY[0x1E0CD6F40];
    v92 = (void *)*MEMORY[0x1E0CD7018];
    v33 = v98;
    v34 = v23;
    while (1)
    {
      v35 = *v32;
      if (!*(_QWORD *)(*v32 + 16))
      {
        v105 = 0u;
        v106 = 0u;
LABEL_26:
        outlined destroy of Any?((uint64_t)&v105);
        v64 = Logger.logObject.getter();
        v65 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v64, v65))
        {
          v66 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v66 = 0;
          _os_log_impl(&dword_1DDB0F000, v64, v65, "entry missing kSecAttrAccount entry", v66, 2u);
          MEMORY[0x1DF0E6558](v66, -1, -1);
        }

        goto LABEL_14;
      }
      swift_bridgeObjectRetain();
      v36 = v102;
      v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v36);
      if ((v38 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v35 + 56) + 32 * v37, (uint64_t)&v105);
      }
      else
      {
        v105 = 0u;
        v106 = 0u;
      }

      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v106 + 1))
        goto LABEL_26;
      outlined init with take of Any(&v105, v107);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
      v39 = swift_initStackObject();
      *(_OWORD *)(v39 + 16) = xmmword_1DDF354F0;
      *(_QWORD *)(v39 + 32) = v33;
      *(_QWORD *)(v39 + 40) = v100;
      *(_QWORD *)(v39 + 64) = v34;
      *(_QWORD *)(v39 + 72) = v99;
      v40 = v33;
      v41 = v100;
      v42 = v99;
      v43 = MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4F280);
      ObjectType = swift_getObjectType();
      *(_QWORD *)(v39 + 80) = v43;
      *(_QWORD *)(v39 + 104) = ObjectType;
      *(_QWORD *)(v39 + 112) = v97;
      v45 = v97;
      v46 = Bool._bridgeToObjectiveC()().super.super.isa;
      v47 = swift_getObjectType();
      *(_QWORD *)(v39 + 120) = v46;
      *(_QWORD *)(v39 + 144) = v47;
      *(_QWORD *)(v39 + 152) = v96;
      v48 = v96;
      v34 = v101;
      v49 = MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF4F250);
      v50 = swift_getObjectType();
      *(_QWORD *)(v39 + 160) = v49;
      *(_QWORD *)(v39 + 184) = v50;
      *(_QWORD *)(v39 + 192) = v95;
      *(_QWORD *)(v39 + 200) = v93;
      *(_QWORD *)(v39 + 224) = v101;
      *(_QWORD *)(v39 + 232) = v92;
      v51 = v95;
      v52 = v93;
      v53 = v92;
      v54 = Bool._bridgeToObjectiveC()().super.super.isa;
      v55 = swift_getObjectType();
      *(_QWORD *)(v39 + 240) = v54;
      *(_QWORD *)(v39 + 264) = v55;
      *(_QWORD *)(v39 + 272) = v36;
      outlined init with copy of Any((uint64_t)v107, v39 + 280);
      v56 = v36;
      specialized Dictionary.init(dictionaryLiteral:)(v39);
      v57.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v104 = 0;
      v58 = SecItemCopyMatching(v57.super.isa, &v104);
      if (v58)
      {
        v59 = v58;
        v60 = Logger.logObject.getter();
        v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = swift_slowAlloc();
          *(_DWORD *)v62 = 67109120;
          *(_DWORD *)(v62 + 4) = v59;
          _os_log_impl(&dword_1DDB0F000, v60, v61, "failed to load. error:%d", (uint8_t *)v62, 8u);
          v63 = v62;
          v34 = v101;
          MEMORY[0x1DF0E6558](v63, -1, -1);
        }

      }
      else
      {
        if (!v104)
        {

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
          goto LABEL_32;
        }
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v67 = v105;
        v68 = Data.init(base64Encoded:options:)();
        if (v69 >> 60 == 15)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
          outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));

LABEL_32:
          swift_unknownObjectRelease();
          goto LABEL_14;
        }
        v70 = v69;
        v71 = v68;
        v72 = objc_allocWithZone(MEMORY[0x1E0CB3710]);
        v91 = v71;
        v73 = Data._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v105 = 0;
        v74 = objc_msgSend(v72, sel_initForReadingFromData_error_, v73, &v105);

        v75 = (void *)v105;
        v90 = v70;
        if (v74)
        {
          type metadata accessor for SignatureItem();
          ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          v77 = v75;
          v78 = v74;
          v79 = v74;
          v80 = (void *)MEMORY[0x1DF0E41AC](0x74616E6769534B41, 0xEB00000000657275);
          objc_msgSend(v79, sel_setClass_forClassName_, ObjCClassFromMetadata, v80);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          v81 = v79;
          v84 = (void *)NSCoder.decodeTopLevelObject<A>(of:forKey:)();

          swift_bridgeObjectRelease();
          v34 = v101;
        }
        else
        {
          v78 = 0;
          v82 = (id)v105;
          v83 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          v84 = 0;
        }
        objc_msgSend(v78, sel_finishDecoding);

        if (v84)
        {
          v85 = v84;
          MEMORY[0x1DF0E4398]();
          if (*(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));

          outlined consume of Data?(v91, v90);
        }
        else
        {
          v86 = Logger.logObject.getter();
          v87 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v86, v87))
          {
            v88 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v88 = 0;
            _os_log_impl(&dword_1DDB0F000, v86, v87, "failed to unarchive signature", v88, 2u);
            MEMORY[0x1DF0E6558](v88, -1, -1);
          }
          outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));

          outlined consume of Data?(v91, v90);
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
      swift_unknownObjectRelease();
      v33 = v98;
LABEL_14:
      ++v32;
      if (!--v31)
        goto LABEL_43;
    }
  }

  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized SignatureManager.removeSignature(_:)()
{
  uint64_t inited;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  NSNumber v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSNumber v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSDictionary v25;
  uint64_t v27;
  void *v28;
  id v29;
  NSDictionary v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  CFTypeRef result[20];

  result[19] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF354F0;
  v1 = (void *)*MEMORY[0x1E0CD6C98];
  v2 = (void *)*MEMORY[0x1E0CD6CA8];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CD6C98];
  *(_QWORD *)(inited + 40) = v2;
  v3 = (void *)*MEMORY[0x1E0CD7020];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0CD7020];
  v4 = v1;
  v5 = v2;
  v6 = v3;
  v7.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v8 = (void *)*MEMORY[0x1E0CD6B58];
  *(NSNumber *)(inited + 56) = v7;
  *(_QWORD *)(inited + 64) = v8;
  v9 = v8;
  v10 = MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF4F250);
  v11 = (void *)*MEMORY[0x1E0CD6898];
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = v11;
  v12 = v11;
  v13 = MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4F280);
  v14 = (void *)*MEMORY[0x1E0CD6B80];
  *(_QWORD *)(inited + 88) = v13;
  *(_QWORD *)(inited + 96) = v14;
  v15 = v14;
  v16.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v17 = (void *)*MEMORY[0x1E0CD6F30];
  *(NSNumber *)(inited + 104) = v16;
  *(_QWORD *)(inited + 112) = v17;
  v18 = (void *)*MEMORY[0x1E0CD6F40];
  v19 = (void *)*MEMORY[0x1E0CD68F8];
  *(_QWORD *)(inited + 120) = *MEMORY[0x1E0CD6F40];
  *(_QWORD *)(inited + 128) = v19;
  v20 = v17;
  v21 = v18;
  v22 = v19;
  v23 = UUID.uuidString.getter();
  v24 = MEMORY[0x1DF0E41AC](v23);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 136) = v24;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v25.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  result[0] = 0;
  if (SecItemCopyMatching(v25.super.isa, result))
  {
    swift_unknownObjectRelease();
LABEL_3:

    return 0;
  }
  if (!result[0])
    goto LABEL_3;
  swift_unknownObjectRetain();
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CFDataRef)>);
  v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_1DDF32CF0;
  v28 = (void *)*MEMORY[0x1E0CD70E0];
  *(_QWORD *)(v27 + 32) = *MEMORY[0x1E0CD70E0];
  v29 = v28;
  *(NSData *)(v27 + 40) = Data._bridgeToObjectiveC()();
  specialized Dictionary.init(dictionaryLiteral:)(v27);
  type metadata accessor for CFDataRef(0);
  v30.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (SecItemDelete(v30.super.isa))
  {
    if (one-time initialization token for SignatureLogger != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)SignatureLogger);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v34 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v32, v33, "failed to delete signature. error:%d", v34, 8u);
      MEMORY[0x1DF0E6558](v34, -1, -1);
    }
    outlined consume of Data._Representation(v35, v36);

    swift_unknownObjectRelease();
    return 0;
  }
  outlined consume of Data._Representation(v35, v36);

  swift_unknownObjectRelease();
  return 1;
}

char *specialized SignatureManager.signatureViewController(_:_:_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  char *v23;
  id v24;
  id v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  void *v32;
  Swift::String v33;
  Swift::String_optional v34;
  Swift::String v35;
  Swift::String v36;
  _QWORD *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  Swift::String v43;
  Swift::String_optional v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  id v55;
  uint64_t *v56;
  uint64_t aBlock;
  uint64_t v59;
  void (*v60)(uint64_t, void *);
  void *v61;
  void *v62;
  _QWORD *v63;
  Swift::String v64;
  Swift::String v65;
  CGRect v66;

  type metadata accessor for SignatureManager();
  swift_initStaticObject();
  v16 = SignatureManager.signatureItems.getter();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17 >= 1)
      goto LABEL_3;
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17 >= 1)
    {
LABEL_3:
      if (one-time initialization token for SignatureLogger != -1)
        swift_once();
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)SignatureLogger);
      swift_bridgeObjectRetain();
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v21 = 134217984;
        swift_bridgeObjectRelease();
        aBlock = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v19, v20, "showing list of signatures, count: %ld", v21, 0xCu);
        MEMORY[0x1DF0E6558](v21, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for SignatureListViewController();
      swift_retain();
      v22 = (void *)SignatureListViewController.__allocating_init(editable:_:)(0, a3, a4);
      type metadata accessor for SignatureListController();
      v23 = (char *)objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
      objc_msgSend(v23, sel_setContentViewController_, v22);
      objc_msgSend(v23, sel_setModalPresentationStyle_, 7);
      v24 = objc_msgSend(v23, sel_popoverPresentationController);
      objc_msgSend(v24, sel_setSourceView_, a2);

      v25 = objc_msgSend(v23, sel_popoverPresentationController);
      if (v25)
      {
        v26 = v25;
        if (a2)
        {
          v66.origin.x = a5;
          v66.origin.y = a6;
          v66.size.width = a7;
          v66.size.height = a8;
          if (CGRectIsEmpty(v66))
          {
            objc_msgSend(a2, sel_bounds);
            a5 = v27;
            a6 = v28;
            a7 = v29;
            a8 = v30;
          }
        }
        objc_msgSend(v26, sel_setSourceRect_, a5, a6, a7, a8);

      }
      v31 = objc_msgSend(v23, sel_popoverPresentationController);
      if (v31)
      {
        v32 = v31;
        objc_msgSend(v31, sel_setPermittedArrowDirections_, 15);

      }
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v64._countAndFlagsBits = 0xD00000000000003ELL;
      v64._object = (void *)0x80000001DDF4F1D0;
      v33._object = (void *)0x80000001DDF4F1B0;
      v33._countAndFlagsBits = 0xD000000000000017;
      v34.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v34.value._object = (void *)0xEB00000000656C62;
      v35._countAndFlagsBits = 0;
      v35._object = (void *)0xE000000000000000;
      v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, paperKitBundle, v35, v64);
      v37 = (_QWORD *)swift_allocObject();
      v37[2] = a3;
      v37[3] = a4;
      v37[4] = a1;
      v38 = a1;
      swift_retain();
      v39 = (void *)MEMORY[0x1DF0E41AC](v36._countAndFlagsBits, v36._object);
      swift_bridgeObjectRelease();
      v62 = partial apply for closure #1 in SignatureManager.signatureViewController(_:_:_:_:);
      v63 = v37;
      aBlock = MEMORY[0x1E0C809B0];
      v59 = 1107296256;
      v60 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
      v61 = &block_descriptor_3_2;
      v40 = _Block_copy(&aBlock);
      swift_release();
      v41 = (void *)objc_opt_self();
      v42 = objc_msgSend(v41, sel_actionWithTitle_style_handler_, v39, 0, v40);
      _Block_release(v40);

      objc_msgSend(v23, sel_addAction_, v42);
      v65._object = (void *)0x80000001DDF4F230;
      v43._countAndFlagsBits = 0x6C65636E6143;
      v43._object = (void *)0xE600000000000000;
      v44.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v44.value._object = (void *)0xEB00000000656C62;
      v45._countAndFlagsBits = 0;
      v45._object = (void *)0xE000000000000000;
      v65._countAndFlagsBits = 0xD000000000000017;
      v46 = NSLocalizedString(_:tableName:bundle:value:comment:)(v43, v44, paperKitBundle, v45, v65);
      v47 = swift_allocObject();
      *(_QWORD *)(v47 + 16) = a3;
      *(_QWORD *)(v47 + 24) = a4;
      swift_retain();
      v48 = (void *)MEMORY[0x1DF0E41AC](v46._countAndFlagsBits, v46._object);
      swift_bridgeObjectRelease();
      v62 = partial apply for closure #2 in SignatureManager.signatureViewController(_:_:_:_:);
      v63 = (_QWORD *)v47;
      aBlock = MEMORY[0x1E0C809B0];
      v59 = 1107296256;
      v60 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
      v61 = &block_descriptor_9;
      v49 = _Block_copy(&aBlock);
      swift_release();
      v50 = objc_msgSend(v41, sel_actionWithTitle_style_handler_, v48, 1, v49);
      _Block_release(v49);

      objc_msgSend(v23, sel_addAction_, v50);
      return v23;
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v51 = type metadata accessor for Logger();
  __swift_project_value_buffer(v51, (uint64_t)SignatureLogger);
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v54 = 0;
    _os_log_impl(&dword_1DDB0F000, v52, v53, "no signatures. showing signature creation panel", v54, 2u);
    MEMORY[0x1DF0E6558](v54, -1, -1);
  }

  v55 = objc_allocWithZone((Class)type metadata accessor for SignatureCreationViewController());
  swift_retain();
  v23 = (char *)objc_msgSend(v55, sel_initWithNibName_bundle_, 0, 0);
  v56 = (uint64_t *)&v23[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *v56 = a3;
  v56[1] = a4;
  swift_release();
  return v23;
}

void specialized SignatureManager.showSignatures(_:_:_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  char *v24;
  void *v25;

  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)SignatureLogger);
  v17 = a1;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v20 = 138477827;
    v25 = a2;
    v22 = a3;
    v23 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v21 = v17;

    a3 = v22;
    a2 = v25;
    _os_log_impl(&dword_1DDB0F000, v18, v19, "show signature panel on viewController: %{private}@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v21, -1, -1);
    MEMORY[0x1DF0E6558](v20, -1, -1);

  }
  else
  {

  }
  v24 = specialized SignatureManager.signatureViewController(_:_:_:_:)(v17, a2, a3, a4, a5, a6, a7, a8);
  objc_msgSend(v17, sel_presentViewController_animated_completion_, v24, 1, 0);

}

uint64_t type metadata accessor for SignatureListController()
{
  return objc_opt_self();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(*(double *)(v1 + 24), *(double *)(v1 + 32), a1, *(void **)(v1 + 16), *(double **)(v1 + 40));
}

uint64_t method lookup function for SignatureManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SignatureManager.hasSignatures.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SignatureManager.showSignatures(_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SignatureManager.isShowingSignatures(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SignatureManager.hideSignatures(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 160))(a1, a2, a3 & 1, a4, a5 & 1);
}

uint64_t sub_1DDBB9AFC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in SignatureManager.signatureViewController(_:_:_:_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SignatureManager.signatureViewController(_:_:_:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1DDBB9B34()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SignatureManager.signatureViewController(_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

BOOL specialized static SignatureManager.ownsSignature(_:)()
{
  uint64_t inited;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSNumber v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  NSNumber v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  const __CFDictionary *isa;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF354F0;
  v1 = (void *)*MEMORY[0x1E0CD6C98];
  v2 = (void *)*MEMORY[0x1E0CD6CA8];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CD6C98];
  *(_QWORD *)(inited + 40) = v2;
  v3 = (void *)*MEMORY[0x1E0CD6898];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0CD6898];
  v4 = v1;
  v5 = v2;
  v6 = v3;
  v7 = MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4F280);
  v8 = (void *)*MEMORY[0x1E0CD6B80];
  *(_QWORD *)(inited + 56) = v7;
  *(_QWORD *)(inited + 64) = v8;
  v9 = v8;
  v10.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v11 = (void *)*MEMORY[0x1E0CD6B58];
  *(NSNumber *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = v11;
  v12 = v11;
  v13 = MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF4F250);
  v14 = (void *)*MEMORY[0x1E0CD6F30];
  *(_QWORD *)(inited + 88) = v13;
  *(_QWORD *)(inited + 96) = v14;
  v15 = (void *)*MEMORY[0x1E0CD6F40];
  v16 = (void *)*MEMORY[0x1E0CD7018];
  *(_QWORD *)(inited + 104) = *MEMORY[0x1E0CD6F40];
  *(_QWORD *)(inited + 112) = v16;
  v17 = v14;
  v18 = v15;
  v19 = v16;
  v20.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v21 = (void *)*MEMORY[0x1E0CD68F8];
  *(NSNumber *)(inited + 120) = v20;
  *(_QWORD *)(inited + 128) = v21;
  v22 = v21;
  v23 = UUID.uuidString.getter();
  v24 = MEMORY[0x1DF0E41AC](v23);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 136) = v24;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LODWORD(inited) = SecItemCopyMatching(isa, 0);

  return (_DWORD)inited == 0;
}

id @objc AKControllerDelegateHelper.undoManager(forAnnotationController:)(uint64_t a1, uint64_t a2, uint64_t a3, Class *a4)
{
  return objc_msgSend(objc_allocWithZone(*a4), sel_init);
}

id AKControllerDelegateHelper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AKControllerDelegateHelper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static AnnotationImporter.translateStrokedAnnotation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(uint64_t, _QWORD, uint64_t, uint64_t);
  CGFloat v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  id v80;
  id v81;
  CGFloat v82;
  id v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  float64x2_t v87;
  id v88;
  CGFloat v89;
  double v90;
  id v91;
  float64x2_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  uint64_t v100;
  void *v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  void *v106;
  CGFloat v107;
  double v108;
  double v109;
  char *v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  id v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  id v123;
  id v124;
  double v125;
  double v126;
  uint64_t v127;
  void *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  void *v140;
  double v141;
  CGFloat v142;
  double MaxX;
  double v144;
  double v145;
  double MidY;
  double v147;
  double v148;
  CGFloat v149;
  CGFloat v150;
  CGFloat v151;
  CGFloat v152;
  double v153;
  CGFloat v154;
  double v155;
  CGFloat v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  id v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  double v167;
  id v168;
  void *v169;
  Class isa;
  id v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  void *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  CGFloat v181;
  CGFloat v182;
  CGFloat v183;
  CGFloat v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  CGFloat v191;
  CGFloat v192;
  CGFloat v193;
  CGFloat v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  CGFloat v200;
  double v201;
  CGFloat v202;
  CGFloat v203;
  CGFloat v204;
  CGFloat v205;
  CGFloat v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  CGFloat v212;
  double v213;
  CGFloat v214;
  uint64_t v215;
  double v216;
  double v217;
  double v218;
  double v219;
  id v220;
  char v221;
  id v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  id v232;
  double v233;
  double v234;
  double Width;
  double Height;
  double v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  void (*v241)(CGAffineTransform *, _QWORD);
  _QWORD *v242;
  _QWORD *v243;
  void (*v244)(CGAffineTransform *, _QWORD);
  _QWORD *v245;
  void (*v246)(CGAffineTransform *, _QWORD);
  id v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  void (*v253)(char *, char *, uint64_t);
  char *v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(char *, uint64_t);
  uint64_t v259;
  void *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  void *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  CGFloat v275;
  uint64_t v276;
  id v277;
  id v278;
  uint64_t v279;
  double v280;
  double v281;
  id v282;
  void *v283;
  id v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  id v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  float64_t v297;
  double v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  float64_t v302;
  uint64_t v303;
  void *v304;
  id v305;
  id v306;
  CGFloat v307;
  CGFloat v308;
  double v309;
  double v310;
  id v311;
  void *v312;
  id v313;
  char v314;
  void *v315;
  id v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  id v320;
  uint64_t v321;
  CGFloat v322;
  uint64_t v323;
  void *v324;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  CGFloat v334;
  double v335;
  CGFloat v336;
  double v337;
  float64x2_t v338;
  char *v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  CGFloat v344;
  char *v345;
  double v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  char *v350;
  double v351;
  unint64_t v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  void (*v357)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  id v367;
  uint64_t v368;
  unsigned __int8 v369;
  CGAffineTransform v370;
  void *v371;
  CGRect v372;
  CGRect v373;
  CGRect v374;
  CGRect v375;
  CGRect v376;
  CGRect v377;
  CGRect v378;
  CGRect v379;
  CGRect v380;
  CGRect v381;
  CGRect v382;
  CGRect v383;
  CGRect v384;
  CGRect v385;
  CGRect v386;
  CGRect v387;
  CGRect v388;
  CGRect v389;
  CGRect v390;
  CGRect v391;
  CGRect v392;
  CGRect v393;
  CGRect v394;
  CGRect v395;
  CGRect v396;
  CGRect v397;
  CGRect v398;
  CGRect v399;

  v361 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v355 = (char *)&v338 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v354 = (char *)&v338 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v353 = (char *)&v338 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v13, v14);
  v348 = (unint64_t)&v338 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v349 = (unint64_t)&v338 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v350 = (char *)&v338 - v21;
  v347 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v351 = *(double *)(v347 - 8);
  MEMORY[0x1E0C80A78](v347, v22);
  v345 = (char *)&v338 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v343 = (uint64_t)&v338 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v342 = (char *)&v338 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v340 = (uint64_t)&v338 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  *(_QWORD *)&v346 = (char *)v338.f64 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v338 - v38;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v338 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v45);
  v47 = (char *)&v338 - v46;
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v338 - v50;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
  MEMORY[0x1E0C80A78](v52, v53);
  v359 = (uint64_t)&v338 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v55, v56);
  v339 = (char *)&v338 - v57;
  MEMORY[0x1E0C80A78](v58, v59);
  v341 = (char *)&v338 - v60;
  MEMORY[0x1E0C80A78](v61, v62);
  *(_QWORD *)&v344 = (char *)v338.f64 - v63;
  MEMORY[0x1E0C80A78](v64, v65);
  v356 = (char *)&v338 - v66;
  MEMORY[0x1E0C80A78](v67, v68);
  v70 = (char *)&v338 - v69;
  v71 = type metadata accessor for Shape();
  v360 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71, v72);
  v74 = (char *)&v338 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  Shape.init()((uint64_t)v74);
  v364 = v4;
  v75 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56);
  v366 = v70;
  v362 = v3;
  v357 = v75;
  v75((uint64_t)v70, 1, 1, v3);
  objc_msgSend(a1, sel_drawingBounds);
  v370.a = v76;
  v370.b = v77;
  v370.c = v78;
  v370.d = v79;
  v358 = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v80 = objc_msgSend(a1, sel_strokeColor);
  if (v80)
  {
    v81 = v80;
    Color.init(cgColor:)((CGColor *)objc_msgSend(v81, sel_CGColor), (CGColor **)&v370);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.setter();

  }
  objc_msgSend(a1, sel_strokeWidth);
  v370.a = v82;
  v352 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.setter();
  v83 = a1;
  specialized TaggedValue_2<>.init<A>(for:)(v83);
  v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v51, 0, 1, v84);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v51, (uint64_t)v47, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v368 = v71;
  v85 = &v74[*(int *)(v71 + 52)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v47, (uint64_t)v43, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v365 = type metadata accessor for ShapeSecondaryProperties();
  v367 = v85;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v47, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v51, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v86 = (uint64_t)v74;
  if (objc_msgSend(v83, sel_hasShadow))
  {
    objc_msgSend(v83, sel_originalModelBaseScaleFactor);
    if (one-time initialization token for defaultShadowOffset != -1)
    {
      v338 = v87;
      swift_once();
      v87 = v338;
    }
    v88 = v367;
    if (one-time initialization token for defaultShadowColor != -1)
    {
      v338 = v87;
      swift_once();
      v87.f64[0] = v338.f64[0];
    }
    v89 = *(double *)&static UIConstants.defaultShadowColor;
    v338 = vmulq_n_f64((float64x2_t)static UIConstants.defaultShadowOffset, v87.f64[0]);
    v90 = v87.f64[0] * 3.0;
    v91 = (id)static UIConstants.defaultShadowColor;
    v92 = v338;
  }
  else
  {
    v89 = 0.0;
    v92 = 0uLL;
    v90 = 0.0;
    v88 = v367;
  }
  *(float64x2_t *)&v370.a = v92;
  v370.c = v90;
  v370.d = v89;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.setter();
  v371 = &unk_1F049E6C0;
  v93 = swift_dynamicCastObjCProtocolConditional();
  if (v93)
  {
    v94 = (void *)v93;
    v95 = v83;
    objc_msgSend(v94, sel_rectangle);
    v370.a = v96;
    v370.b = v97;
    v370.c = v98;
    v370.d = v99;
    CRRegister.wrappedValue.setter();

  }
  objc_opt_self();
  v100 = swift_dynamicCastObjCClass();
  v363 = v86;
  if (v100)
  {
    v101 = (void *)v100;
    v102 = v83;
    v103 = objc_msgSend(v101, sel_fillColor);
    if (v103)
    {
      v104 = v103;
      Color.init(cgColor:)((CGColor *)objc_msgSend(v104, sel_CGColor), (CGColor **)&v370);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.setter();

    }
    objc_opt_self();
    v105 = swift_dynamicCastObjCClass();
    if (v105)
    {
      v106 = (void *)v105;
      v107 = COERCE_DOUBLE(v102);
      objc_msgSend(v106, sel_rotationAngle);
      v109 = v108;
      v110 = (char *)(v86 + *(int *)(v368 + 20));
      CRRegister.value.getter();
      if (vabdd_f64(v370.a, v109) > 0.01)
      {
        v370.a = v109;
        CRRegister.value.setter();
      }
      objc_msgSend(*(id *)&v107, sel_drawingBounds);
      v112 = v111;
      v114 = v113;
      objc_msgSend(v106, sel_rectangle);
      ShapeSecondaryProperties.appearanceStreamOffset.setter(v112 - v115, v114 - v116);
      v117 = objc_msgSend(v106, sel_typingAttributes);
      v118 = v364;
      if (!v117)
        goto LABEL_44;
      v119 = v117;
      v120 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v121 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v120);
      swift_bridgeObjectRelease();
      if (!v121)
        goto LABEL_44;
      v345 = v110;
      *(_QWORD *)&v370.a = v121;
      objc_msgSend(*(id *)&v107, sel_originalModelBaseScaleFactor);
      Dictionary<>.scaleBy(_:)(v122);
      v123 = objc_msgSend(v106, sel_annotationText);
      if (!v123)
      {
        if (objc_msgSend(v106, sel_shouldUsePlaceholderText))
        {
          if (object_getClass(*(id *)&v107))
          {
            swift_getObjCClassMetadata();
            v161 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultPlaceholderText);
            if (v161)
            {
              v162 = v161;
              v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v165 = v164;

              swift_bridgeObjectRetain();
              objc_msgSend(*(id *)&v107, sel_originalModelBaseScaleFactor);
              v167 = v166;
              v168 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
              v169 = (void *)MEMORY[0x1DF0E41AC](v163, v165);
              swift_bridgeObjectRelease();
              type metadata accessor for NSAttributedStringKey(0);
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
              isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              v171 = objc_msgSend(v168, sel_initWithString_attributes_, v169, isa);

              v172 = v340;
              CRAttributedString<>.init(nsAttributedString:scale:)(v171, v340, v167);
              v173 = v351;
              v174 = v347;
              (*(void (**)(id, uint64_t, uint64_t))(*(_QWORD *)&v351 + 40))(v88, v172, v347);
              (*(void (**)(char *, id, uint64_t))(*(_QWORD *)&v173 + 16))(v342, v88, v174);
              v175 = (void *)CRAttributedString.attributedString.getter();
              v176 = objc_msgSend(v175, sel_string);

              v177 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v179 = v178;

              if (v177 || v179 != 0xE000000000000000)
              {
                v314 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(*(_QWORD *)&v351 + 8))(v342, v174);
                if ((v314 & 1) == 0)
                {
                  v315 = (void *)CRAttributedString.attributedString.getter();
                  v316 = objc_msgSend(v315, sel_length);

                  if (__OFSUB__(v316, 1))
                  {
                    __break(1u);
                    goto LABEL_127;
                  }
                  v317 = (uint64_t)v350;
                  CRAttributedString.attributes(at:effectiveRange:)();
                  v318 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v318 - 8) + 56))(v317, 0, 1, v318);
                  v319 = v349;
                  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v317, v349, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v319, v348, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
                  CRRegister.wrappedValue.setter();
                  outlined destroy of StocksKitCurrencyCache.Provider?(v319, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  outlined destroy of StocksKitCurrencyCache.Provider?(v317, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(*(_QWORD *)&v351 + 8))(v342, v174);
              }
            }
          }
        }
        goto LABEL_43;
      }
      v124 = v123;
      objc_msgSend(*(id *)&v107, sel_originalModelBaseScaleFactor);
      CRAttributedString<>.init(nsAttributedString:scale:)(v124, (uint64_t)v39, v125);
      v126 = v351;
      v127 = v347;
      (*(void (**)(id, char *, uint64_t))(*(_QWORD *)&v351 + 40))(v88, v39, v347);
      (*(void (**)(double, id, uint64_t))(*(_QWORD *)&v126 + 16))(COERCE_DOUBLE(*(_QWORD *)&v346), v88, v127);
      v128 = (void *)CRAttributedString.attributedString.getter();
      v129 = objc_msgSend(v128, sel_string);

      v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v132 = v131;

      if (!v130 && v132 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(double, uint64_t))(*(_QWORD *)&v351 + 8))(COERCE_DOUBLE(*(_QWORD *)&v346), v127);
LABEL_40:

LABEL_43:
        v227 = (uint64_t)v350;
        CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(*(uint64_t *)&v370.a, 0);
        v228 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v228 - 8) + 56))(v227, 0, 1, v228);
        v229 = v349;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v227, v349, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v229, v348, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?(v229, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v227, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        v110 = v345;
LABEL_44:
        ShapeSecondaryProperties.maximumNumberOfCharacters.setter((uint64_t)objc_msgSend(v106, sel_maximumNumberOfCharacters));
        objc_opt_self();
        v230 = swift_dynamicCastObjCClass();
        if (v230)
        {
          v231 = (void *)v230;
          v232 = *(id *)&v107;
          objc_msgSend(v231, sel_cornerRadius);
          if (v233 <= 0.0)
          {
            lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            lazy protocol witness table accessor for type Line and conformance Line();
            lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            v135 = (uint64_t)v356;
            TaggedValue_9.init(_:)();
          }
          else
          {
            v234 = v233;
            objc_msgSend(v106, sel_rectangle);
            Width = CGRectGetWidth(v392);
            objc_msgSend(v106, sel_rectangle);
            Height = CGRectGetHeight(v393);
            if (Height >= Width)
              Height = Width;
            v237 = v234 / Height;
            if (v237 > 0.5)
              v237 = 0.5;
            if (v237 < 0.0)
              v237 = 0.0;
            v370.a = v237;
            lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            lazy protocol witness table accessor for type Line and conformance Line();
            lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            v135 = *(_QWORD *)&v344;
            TaggedValue_9.init(_:)();
          }

          goto LABEL_65;
        }
        objc_opt_self();
        v238 = swift_dynamicCastObjCClass();
        if (v238)
        {
          v239 = (void *)v238;
          v352 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
          lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
          lazy protocol witness table accessor for type Line and conformance Line();
          lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
          lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
          lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
          lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
          lazy protocol witness table accessor for type Star and conformance Star();
          lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
          v358 = *(id *)&v107;
          v118 = v364;
          v240 = (uint64_t)v356;
          TaggedValue_9.init(_:)();
          v107 = *(double *)&v366;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v366, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
          v134 = v362;
          v357(v240, 0, 1, v362);
          outlined init with take of (key: Int, value: AnyCRValue)?(v240, *(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
          v241 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
          *v242 = 3;
          v241(&v370, 0);
          if (objc_msgSend(v239, sel_textIsFixedWidth))
          {
            v244 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
            if ((*v243 & 1) != 0)
              *v243 &= ~1uLL;
            v244(&v370, 0);
          }
          if (objc_msgSend(v239, sel_textIsFixedHeight))
          {
            v246 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
            if ((*v245 & 2) != 0)
              *v245 &= ~2uLL;
            v246(&v370, 0);
          }
          FormContentType.init(_:)((uint64_t)objc_msgSend(v239, sel_formContentType), (char *)&v369);
          *(_QWORD *)&v370.a = v369;
          LOBYTE(v370.b) = 0;
          ShapeSecondaryProperties.textContentType.setter((uint64_t *)&v370);
          v247 = v358;
          objc_msgSend(v239, sel_setFormContentType_, objc_msgSend(v239, sel_formContentType));

          goto LABEL_67;
        }
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
          lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
          lazy protocol witness table accessor for type Line and conformance Line();
          lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
          lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
          lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
          lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
          lazy protocol witness table accessor for type Star and conformance Star();
          lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
          v135 = (uint64_t)v356;
          TaggedValue_9.init(_:)();

LABEL_65:
          v107 = *(double *)&v366;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v366, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
          v136 = v135;
          v134 = v362;
          goto LABEL_66;
        }
        v345 = v110;
        objc_opt_self();
        v259 = swift_dynamicCastObjCClass();
        if (v259)
        {
          v260 = (void *)v259;
          v367 = *(id *)&v107;
          v261 = (uint64_t)objc_msgSend(v260, sel_pointCount);
          v262 = 3;
          if (v261 > 3)
            v262 = v261;
          if (v262 >= 0xC)
            v262 = 12;
          *(_QWORD *)&v370.a = v262;
          v263 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
          v264 = (void *)lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
          *(double *)&v265 = COERCE_DOUBLE(lazy protocol witness table accessor for type Line and conformance Line());
          v266 = lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
          v267 = lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
          v268 = lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
          v269 = lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
          lazy protocol witness table accessor for type Star and conformance Star();
          lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
          v347 = v269;
          v348 = v268;
          v349 = v267;
          v350 = (char *)v266;
          v351 = *(double *)&v265;
          v358 = v264;
          v365 = v263;
          v270 = (uint64_t)v341;
          TaggedValue_9.init(_:)();
          v271 = (uint64_t)v366;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v366, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
          v357(v270, 0, 1, v362);
          outlined init with take of (key: Int, value: AnyCRValue)?(v270, v271, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
          if (objc_msgSend(v260, sel_pointCount) == (id)6)
          {
            CRRegister.value.getter();
            if (fabs(v370.a + -0.523598776) > 0.01)
            {
              v370.a = 0.523598776;
              CRRegister.value.setter();
            }
          }
          objc_opt_self();
          v272 = swift_dynamicCastObjCClass();
          if (!v272)
          {
            v320 = v367;

            v134 = v362;
            v118 = v364;
            v107 = *(double *)&v366;
            goto LABEL_67;
          }
          v129 = (id)v272;
          v222 = v367;
          *(double *)&v273 = COERCE_DOUBLE(objc_msgSend(v129, sel_pointCount));
          v274 = 3;
          if (v273 > 3)
            v274 = v273;
          if (v274 >= 0xA)
            *(_QWORD *)&v107 = 10;
          else
            v107 = *(double *)&v274;
          if (one-time initialization token for defaultInnerRadius == -1)
            goto LABEL_89;
          goto LABEL_125;
        }
        objc_opt_self();
        v303 = swift_dynamicCastObjCClass();
        if (v303)
        {
          v304 = (void *)v303;
          v305 = *(id *)&v107;
          v306 = objc_msgSend(v304, sel_path);
          if (!v306)
          {

            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v366, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            outlined destroy of PKStrokeProperties(v363, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            goto LABEL_69;
          }
          v222 = v306;
          objc_msgSend(v304, sel_rectangle);
          v307 = 1.0 / CGRectGetWidth(v394);
          objc_msgSend(v304, sel_rectangle);
          v308 = CGRectGetHeight(v395);
          CGAffineTransformMakeScale(&v370, v307, -1.0 / v308);
          objc_msgSend(v222, sel_applyTransform_, &v370);
          objc_msgSend(v222, sel_bounds);
          CGAffineTransformMakeTranslation(&v370, -v309, -v310);
          objc_msgSend(v222, sel_applyTransform_, &v370);
          v311 = objc_msgSend(v304, sel_path);
          if (v311)
          {
            v312 = v311;
            v313 = objc_msgSend(v311, sel_CGPath);

            *(_QWORD *)&v370.a = v313;
            lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            lazy protocol witness table accessor for type Line and conformance Line();
            lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            v276 = (uint64_t)v339;
            TaggedValue_9.init(_:)();

            goto LABEL_110;
          }
LABEL_127:
          __break(1u);
LABEL_128:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1DDBBC9E0);
        }
        objc_opt_self();
        v321 = swift_dynamicCastObjCClass();
        v134 = v362;
        if (v321)
        {
          v367 = (id)lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
          lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
          lazy protocol witness table accessor for type Line and conformance Line();
          lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
          lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
          lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
          v322 = v107;
          lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
          lazy protocol witness table accessor for type Star and conformance Star();
          lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
          v135 = (uint64_t)v356;
          TaggedValue_9.init(_:)();
        }
        else
        {
          objc_opt_self();
          if (!swift_dynamicCastObjCClass() || (objc_opt_self(), (v323 = swift_dynamicCastObjCClass()) == 0))
          {

            v107 = *(double *)&v366;
            goto LABEL_67;
          }
          v324 = (void *)v323;
          v322 = COERCE_DOUBLE(*(id *)&v107);
          CRRegister.wrappedValue.getter();
          a = v370.a;
          b = v370.b;
          c = v370.c;
          d = v370.d;
          objc_msgSend(v324, sel_pointyBitPoint);
          v330 = v329;
          v332 = v331;
          v396.origin.x = a;
          v396.origin.y = b;
          v396.size.width = c;
          v396.size.height = d;
          v333 = v330 - CGRectGetMinX(v396);
          v397.origin.x = a;
          v397.origin.y = b;
          v397.size.width = c;
          v397.size.height = d;
          v334 = v333 / CGRectGetWidth(v397);
          v398.origin.x = a;
          v398.origin.y = b;
          v398.size.width = c;
          v398.size.height = d;
          v335 = v332 - CGRectGetMinY(v398);
          v399.origin.x = a;
          v399.origin.y = b;
          v399.size.width = c;
          v399.size.height = d;
          v336 = 1.0 - v335 / CGRectGetHeight(v399);
          objc_msgSend(v324, sel_pointyBitBaseWidthAngle);
          v370.a = v334;
          v370.b = v336;
          v370.c = v337 * 3.14159265 / 180.0 * 0.5;
          lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
          lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
          lazy protocol witness table accessor for type Line and conformance Line();
          lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
          lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
          lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
          lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
          lazy protocol witness table accessor for type Star and conformance Star();
          lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
          v118 = v364;
          v135 = (uint64_t)v356;
          TaggedValue_9.init(_:)();

        }
        v107 = *(double *)&v366;
LABEL_26:
        outlined destroy of StocksKitCurrencyCache.Provider?(*(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
        v136 = v135;
LABEL_66:
        v357(v136, 0, 1, v134);
        outlined init with take of (key: Int, value: AnyCRValue)?(v135, *(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
        goto LABEL_67;
      }
      v221 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(double, uint64_t))(*(_QWORD *)&v351 + 8))(COERCE_DOUBLE(*(_QWORD *)&v346), v127);
      if ((v221 & 1) != 0)
        goto LABEL_40;
      v351 = v107;
      v222 = (id)CRAttributedString.attributedString.getter();
      v223 = objc_msgSend(v222, sel_length);

      if (!__OFSUB__(v223, 1))
      {
        v224 = (uint64_t)v350;
        CRAttributedString.attributes(at:effectiveRange:)();
        v225 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v225 - 8) + 56))(v224, 0, 1, v225);
        v226 = v349;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v224, v349, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v226, v348, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?(v226, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v224, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);

        v107 = v351;
        goto LABEL_43;
      }
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      swift_once();
LABEL_89:
      objc_msgSend(v129, sel_innerRadiusFactor);
      v370.a = v107;
      v370.b = v275;
      v276 = (uint64_t)v356;
      TaggedValue_9.init(_:)();

LABEL_110:
      v107 = *(double *)&v366;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v366, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
      v134 = v362;
      v357(v276, 0, 1, v362);
      outlined init with take of (key: Int, value: AnyCRValue)?(v276, *(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
      v118 = v364;
      goto LABEL_67;
    }
    objc_opt_self();
    v137 = swift_dynamicCastObjCClass();
    v107 = *(double *)&v366;
    if (v137)
    {
      v138 = (void *)v137;
      objc_opt_self();
      v139 = swift_dynamicCastObjCClass();
      v134 = v362;
      v352 = (unint64_t)v138;
      *(_QWORD *)&v338.f64[0] = v102;
      if (!v139)
      {
        v180 = v102;
        CRRegister.wrappedValue.getter();
        v181 = v370.a;
        v182 = v370.b;
        v183 = v370.c;
        v184 = v370.d;
        objc_msgSend(v138, sel_startPoint);
        v186 = v185;
        v188 = v187;
        v380.origin.x = v181;
        v380.origin.y = v182;
        v380.size.width = v183;
        v380.size.height = v184;
        v189 = v186 - CGRectGetMinX(v380);
        v381.origin.x = v181;
        v381.origin.y = v182;
        v381.size.width = v183;
        v381.size.height = v184;
        v346 = v189 / CGRectGetWidth(v381);
        v382.origin.x = v181;
        v382.origin.y = v182;
        v382.size.width = v183;
        v382.size.height = v184;
        v190 = v188 - CGRectGetMinY(v382);
        v383.origin.x = v181;
        v383.origin.y = v182;
        v383.size.width = v183;
        v383.size.height = v184;
        v344 = 1.0 - v190 / CGRectGetHeight(v383);
        CRRegister.wrappedValue.getter();
        v191 = v370.a;
        v192 = v370.b;
        v193 = v370.c;
        v194 = v370.d;
        objc_msgSend(v138, sel_midPoint);
        v196 = v195;
        v198 = v197;
        v384.origin.x = v191;
        v384.origin.y = v192;
        v384.size.width = v193;
        v384.size.height = v194;
        v199 = v196 - CGRectGetMinX(v384);
        v385.origin.x = v191;
        v385.origin.y = v192;
        v385.size.width = v193;
        v385.size.height = v194;
        v200 = v199 / CGRectGetWidth(v385);
        v386.origin.x = v191;
        v386.origin.y = v192;
        v386.size.width = v193;
        v386.size.height = v194;
        v201 = v198 - CGRectGetMinY(v386);
        v387.origin.x = v191;
        v387.origin.y = v192;
        v387.size.width = v193;
        v387.size.height = v194;
        v202 = 1.0 - v201 / CGRectGetHeight(v387);
        CRRegister.wrappedValue.getter();
        v203 = v370.a;
        v204 = v370.b;
        v205 = v370.c;
        v206 = v370.d;
        objc_msgSend(v138, sel_endPoint);
        v208 = v207;
        v210 = v209;
        v388.origin.x = v203;
        v388.origin.y = v204;
        v388.size.width = v205;
        v388.size.height = v206;
        v211 = v208 - CGRectGetMinX(v388);
        v389.origin.x = v203;
        v389.origin.y = v204;
        v389.size.width = v205;
        v389.size.height = v206;
        v212 = v211 / CGRectGetWidth(v389);
        v390.origin.x = v203;
        v390.origin.y = v204;
        v390.size.width = v205;
        v390.size.height = v206;
        v213 = v210 - CGRectGetMinY(v390);
        v391.origin.x = v203;
        v391.origin.y = v204;
        v391.size.width = v205;
        v391.size.height = v206;
        v214 = CGRectGetHeight(v391);
        v370.a = v346;
        v370.b = v344;
        v370.c = v200;
        v370.d = v202;
        v370.tx = v212;
        v370.ty = 1.0 - v213 / v214;
        lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
        lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
        lazy protocol witness table accessor for type Line and conformance Line();
        lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
        lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
        lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
        lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
        lazy protocol witness table accessor for type Star and conformance Star();
        lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
        v157 = (void *)v352;
        v215 = (uint64_t)v356;
        TaggedValue_9.init(_:)();
        v107 = *(double *)&v366;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v366, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
        v357(v215, 0, 1, v134);
        outlined init with take of (key: Int, value: AnyCRValue)?(v215, *(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
        objc_msgSend(v157, sel_drawingBounds);
        v217 = v216;
        v219 = v218;
        CRRegister.wrappedValue.getter();
        ShapeSecondaryProperties.appearanceStreamOffset.setter(v217 - v370.a, v219 - v370.b);
        v220 = objc_msgSend(v157, sel_arrowHeadStyle);
        v118 = v364;
        v159 = v347;
        v160 = v345;
        switch((unint64_t)v220)
        {
          case 0uLL:
            goto LABEL_94;
          case 1uLL:
            *(_QWORD *)&v370.a = 8;
            LOBYTE(v370.b) = 0;
            goto LABEL_91;
          case 2uLL:
            *(_QWORD *)&v370.a = 8;
            LOBYTE(v370.b) = 0;
LABEL_91:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
            goto LABEL_93;
          case 3uLL:
            *(_QWORD *)&v370.a = 8;
            LOBYTE(v370.b) = 0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
            CRRegister.wrappedValue.setter();
            *(_QWORD *)&v370.a = 8;
            v157 = (void *)v352;
            LOBYTE(v370.b) = 0;
LABEL_93:
            CRRegister.wrappedValue.setter();
            goto LABEL_94;
          default:
            goto LABEL_128;
        }
      }
      v140 = (void *)v139;
      objc_msgSend(v102, sel_strokeWidth);
      v142 = v141 * 4.0;
      CRRegister.wrappedValue.getter();
      v372.origin.x = v370.a;
      v372.origin.y = v370.b;
      v372.size.width = v370.c;
      v372.size.height = v370.d;
      v373 = CGRectInset(v372, v142, v142);
      v370.a = v373.origin.x;
      v370.b = v373.origin.y;
      v370.c = v373.size.width;
      v370.d = v373.size.height;
      CRRegister.wrappedValue.setter();
      CRRegister.wrappedValue.getter();
      v374.origin.x = v370.a;
      v374.origin.y = v370.b;
      v374.size.width = v370.c;
      v374.size.height = v370.d;
      MaxX = CGRectGetMaxX(v374);
      objc_msgSend(v140, sel_arrowHeadLength);
      v145 = MaxX - v144;
      CRRegister.wrappedValue.getter();
      v375.origin.x = v370.a;
      v375.origin.y = v370.b;
      v375.size.width = v370.c;
      v375.size.height = v370.d;
      MidY = CGRectGetMidY(v375);
      objc_msgSend(v140, sel_arrowLineWidth);
      v148 = MidY + v147 * 0.5;
      CRRegister.wrappedValue.getter();
      v149 = v370.a;
      v150 = v370.b;
      v151 = v370.c;
      v152 = v370.d;
      v376.origin.x = v370.a;
      v376.origin.y = v370.b;
      v376.size.width = v370.c;
      v376.size.height = v370.d;
      v153 = v145 - CGRectGetMinX(v376);
      v377.origin.x = v149;
      v377.origin.y = v150;
      v377.size.width = v151;
      v377.size.height = v152;
      v154 = v153 / CGRectGetWidth(v377);
      v378.origin.x = v149;
      v378.origin.y = v150;
      v378.size.width = v151;
      v378.size.height = v152;
      v155 = v148 - CGRectGetMinY(v378);
      v379.origin.x = v149;
      v379.origin.y = v150;
      v379.size.width = v151;
      v379.size.height = v152;
      v156 = CGRectGetHeight(v379);
      v370.a = v154;
      v370.b = 1.0 - v155 / v156;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      v157 = (void *)v352;
      v158 = (uint64_t)v356;
      TaggedValue_9.init(_:)();
      v107 = *(double *)&v366;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v366, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
      v357(v158, 0, 1, v134);
      outlined init with take of (key: Int, value: AnyCRValue)?(v158, *(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
      v118 = v364;
      v159 = v347;
      v160 = v345;
LABEL_94:
      v277 = objc_msgSend(v157, sel_annotationText, *(_QWORD *)&v338.f64[0]);
      if (v277)
      {
        v278 = v277;
        objc_msgSend(*(id *)&v338.f64[0], sel_originalModelBaseScaleFactor);
        v279 = v343;
        CRAttributedString<>.init(nsAttributedString:scale:)(v278, v343, v280);
        v281 = v351;
        v282 = v367;
        (*(void (**)(id, uint64_t, uint64_t))(*(_QWORD *)&v351 + 40))(v367, v279, v159);
        (*(void (**)(char *, id, uint64_t))(*(_QWORD *)&v281 + 16))(v160, v282, v159);
        v283 = (void *)CRAttributedString.attributedString.getter();
        v284 = objc_msgSend(v283, sel_string);

        v285 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v287 = v286;

        if (v285 || v287 != 0xE000000000000000)
        {
          v288 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)&v351 + 8))(v160, v159);
          if ((v288 & 1) == 0)
          {
            v222 = v367;
            v289 = (void *)CRAttributedString.attributedString.getter();
            v129 = objc_msgSend(v289, sel_length);

            if (__OFSUB__(v129, 1))
              goto LABEL_124;
            v290 = (uint64_t)v350;
            CRAttributedString.attributes(at:effectiveRange:)();
            v291 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v291 - 8) + 56))(v290, 0, 1, v291);
            v292 = v349;
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v290, v349, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v292, v348, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
            CRRegister.wrappedValue.setter();
            outlined destroy of StocksKitCurrencyCache.Provider?(v292, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v290, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)&v351 + 8))(v160, v159);
        }

        v157 = (void *)v352;
      }
      v293 = objc_msgSend(v157, sel_typingAttributes);
      if (v293
        && (v294 = v293,
            v295 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
            v294,
            v296 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v295),
            swift_bridgeObjectRelease(),
            v296))
      {
        *(_QWORD *)&v370.a = v296;
        v297 = v338.f64[0];
        objc_msgSend(*(id *)&v338.f64[0], sel_originalModelBaseScaleFactor);
        Dictionary<>.scaleBy(_:)(v298);
        v299 = (uint64_t)v350;
        CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(*(uint64_t *)&v370.a, 0);
        v300 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v300 - 8) + 56))(v299, 0, 1, v300);
        v301 = v349;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v299, v349, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v301, v348, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?(v301, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v299, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);

      }
      else
      {
        v302 = v338.f64[0];

      }
      goto LABEL_67;
    }

    v134 = v362;
    v118 = v364;
  }
  else
  {
    objc_opt_self();
    v133 = swift_dynamicCastObjCClass();
    v134 = v362;
    v118 = v364;
    v107 = *(double *)&v366;
    if (v133)
    {
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      v107 = *(double *)&v366;
      v135 = (uint64_t)v356;
      TaggedValue_9.init(_:)();
      goto LABEL_26;
    }
  }
LABEL_67:
  v248 = v359;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(uint64_t *)&v107, v359, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v248, 1, v134) != 1)
  {
    v252 = v353;
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v353, v248, v134);
    v253 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
    v254 = v354;
    v253(v354, v252, v134);
    v253(v355, v254, v134);
    v255 = v368;
    v256 = v363;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    CRRegister.wrappedValue.setter();
    v257 = *(void (**)(char *, uint64_t))(v118 + 8);
    v251 = v255;
    v257(v254, v134);
    v257(v252, v134);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
    v250 = v361;
    outlined init with take of PKStrokeStruct(v256, v361, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v249 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v360 + 56))(v250, v249, 1, v251);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(uint64_t *)&v107, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
  outlined destroy of PKStrokeProperties(v363, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  outlined destroy of StocksKitCurrencyCache.Provider?(v248, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
LABEL_69:
  v249 = 1;
  v250 = v361;
  v251 = v368;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v360 + 56))(v250, v249, 1, v251);
}

void specialized TaggedValue_2<>.init<A>(for:)(void *a1)
{
  double v2;
  double v3;
  uint64_t v4;

  switch((unint64_t)objc_msgSend(a1, sel_brushStyle))
  {
    case 0uLL:
      if (objc_msgSend(a1, sel_isDashed))
      {
        objc_msgSend(a1, sel_strokeWidth);
        v3 = v2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
        v4 = swift_allocObject();
        *(_OWORD *)(v4 + 16) = xmmword_1DDF33AB0;
        *(double *)(v4 + 32) = (v3 + 7.0) / v3;
        *(double *)(v4 + 40) = (v3 * 3.0 + 4.0) / v3;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BrushStyle>);
      lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRExtensible<BrushStyle> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BrushStyle>, MEMORY[0x1E0D11CB8]);
      TaggedValue_2.init(_:)();
      break;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BrushStyle>);
      lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRExtensible<BrushStyle> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BrushStyle>, MEMORY[0x1E0D11CB8]);
      TaggedValue_2.init(_:)();
      break;
  }

}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  uint64_t v27;
  _OWORD v29[4];
  void *v30;
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v2 = -1 << *(_BYTE *)(a1 + 32);
  if (-v2 < 64)
    v3 = ~(-1 << -(char)v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v2) >> 6;
  v5 = v1 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | (v7 << 6);
      v11 = v7;
      goto LABEL_28;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v26)
      goto LABEL_39;
    v13 = *(_QWORD *)(v27 + 8 * v12);
    v11 = v7 + 1;
    if (!v13)
    {
      v11 = v7 + 2;
      if (v7 + 2 >= v26)
        goto LABEL_39;
      v13 = *(_QWORD *)(v27 + 8 * v11);
      if (!v13)
      {
        v11 = v7 + 3;
        if (v7 + 3 >= v26)
          goto LABEL_39;
        v13 = *(_QWORD *)(v27 + 8 * v11);
        if (!v13)
        {
          v11 = v7 + 4;
          if (v7 + 4 >= v26)
            goto LABEL_39;
          v13 = *(_QWORD *)(v27 + 8 * v11);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v9 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v10, (uint64_t)v37);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    outlined init with copy of AnyHashable((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for NSAttributedStringKey(0);
    if (!swift_dynamicCast())
    {
      v30 = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      v25 = v30;
      swift_release();

      outlined consume of [AnyHashable : Any].Iterator._Variant();
      swift_release();
      return 0;
    }
    v15 = v30;
    outlined init with copy of Any((uint64_t)v35 + 8, (uint64_t)v31);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v31, (_OWORD *)((char *)v32 + 8));
    outlined init with take of Any((_OWORD *)((char *)v32 + 8), v29);
    v16 = v15;
    outlined init with take of Any(v29, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v17 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v18 = -1 << *(_BYTE *)(v1 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v5 + 8 * (v19 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v5 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v5 + 8 * v20);
      }
      while (v24 == -1);
      v8 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v8) = v16;
    result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v1 + 56) + 32 * v8));
    ++*(_QWORD *)(v1 + 16);
    v7 = v11;
    v4 = v9;
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v1;
  }
  v13 = *(_QWORD *)(v27 + 8 * v14);
  if (v13)
  {
    v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v11 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v11 >= v26)
      goto LABEL_39;
    v13 = *(_QWORD *)(v27 + 8 * v11);
    ++v14;
    if (v13)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

id static AnnotationImporter.translateDoodleAnnotation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  CGFloat v31;
  CGFloat Height;
  double v33;
  double v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  CGFloat v54;
  id v55;
  CGFloat v56;
  __int128 v57;
  id result;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  void *v63;
  CGFloat v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  CGAffineTransform v78;
  CGRect v79;
  CGRect v80;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v67 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v67 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v20, v21);
  v75 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Shape();
  v24 = *(_QWORD *)(v23 - 8);
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v28 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = objc_msgSend(a1, sel_path, v26);
  if (!v29)
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(a2, 1, 1, v23);
  v30 = v29;
  v72 = v15;
  v73 = v11;
  v74 = v7;
  v68 = v24;
  v69 = a2;
  objc_msgSend(v29, sel_bounds);
  v31 = 1.0 / CGRectGetWidth(v79);
  objc_msgSend(v30, sel_bounds);
  Height = CGRectGetHeight(v80);
  CGAffineTransformMakeScale(&v78, v31, -1.0 / Height);
  objc_msgSend(v30, sel_applyTransform_, &v78);
  objc_msgSend(v30, sel_bounds);
  CGAffineTransformMakeTranslation(&v78, -v33, -v34);
  objc_msgSend(v30, sel_applyTransform_, &v78);
  v67 = v30;
  *(_QWORD *)&v78.a = objc_msgSend(v30, sel_CGPath);
  v70 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  *(_QWORD *)&v71 = v19;
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v35 = v75;
  TaggedValue_9.init(_:)();
  v77 = 0;
  v78.a = 0.0;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v37 = v71;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v71, 1, 1, v36);
  v76 = 0;
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v35, (uint64_t *)&v78, &v77, v37, &v76, (uint64_t)v28, 0.0, 0.0, 0.0, 0.0, 5.0);
  objc_msgSend(a1, sel_rectangle);
  v78.a = v38;
  v78.b = v39;
  v78.c = v40;
  v78.d = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  objc_msgSend(a1, sel_drawingBounds);
  v43 = v42;
  v45 = v44;
  objc_msgSend(a1, sel_rectangle);
  ShapeSecondaryProperties.appearanceStreamOffset.setter(v43 - v46, v45 - v47);
  objc_msgSend(a1, sel_rotationAngle);
  v49 = v48;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(v78.a, v49) > 0.01)
  {
    v78.a = v49;
    CRRegister.value.setter();
  }
  v51 = objc_msgSend(a1, sel_hasShadow);
  v75 = (char *)v50;
  if (v51)
  {
    if (one-time initialization token for defaultShadowOffset != -1)
      swift_once();
    v71 = static UIConstants.defaultShadowOffset;
    v53 = (uint64_t)v73;
    v52 = (uint64_t)v74;
    if (one-time initialization token for defaultShadowColor != -1)
      swift_once();
    v54 = *(double *)&static UIConstants.defaultShadowColor;
    v55 = (id)static UIConstants.defaultShadowColor;
    v56 = 3.0;
    v57 = v71;
  }
  else
  {
    v56 = 0.0;
    v54 = 0.0;
    v57 = 0uLL;
    v53 = (uint64_t)v73;
    v52 = (uint64_t)v74;
  }
  *(_OWORD *)&v78.a = v57;
  v78.c = v56;
  v78.d = v54;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.setter();
  v59 = a1;
  v60 = (uint64_t)v72;
  specialized TaggedValue_2<>.init<A>(for:)(v59);
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 0, 1, v61);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v60, v53, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v53, v52, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v62 = objc_msgSend(v59, sel_pathIsPrestroked);
  result = objc_msgSend(v59, sel_strokeColor);
  v63 = result;
  if ((v62 & 1) != 0)
  {
    if (result)
    {
      Color.init(cgColor:)((CGColor *)objc_msgSend(result, sel_CGColor), (CGColor **)&v78);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
LABEL_17:
      CRRegister.wrappedValue.setter();

      v66 = v68;
      v65 = v69;
      outlined init with take of PKStrokeStruct((uint64_t)v28, v69, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      return (id)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v65, 0, 1, v23);
    }
    __break(1u);
  }
  else if (result)
  {
    Color.init(cgColor:)((CGColor *)objc_msgSend(result, sel_CGColor), (CGColor **)&v78);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.setter();
    objc_msgSend(v59, sel_strokeWidth);
    v78.a = v64;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t static AnnotationImporter.translateSignatureAnnotation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int *v35;
  char *v36;
  char *v37;
  char *v38;
  id v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  objc_class *v57;
  _BYTE *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  id v80;
  unsigned int v81;
  id v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  __int128 v89;
  char *v90;
  int *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  objc_super v96;
  __int128 v97;
  __int128 v98;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v4, v5);
  v90 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date();
  v93 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v11, v12);
  v92 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID();
  v95 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18, v19);
  v94 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Signature();
  v22 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = objc_msgSend(a1, sel_signature, v24);
  if (!v27)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a2, 1, 1, v21);
  v28 = v27;
  v86 = v22;
  v87 = a1;
  v88 = a2;
  v29 = objc_msgSend(v27, sel_descriptionTag);
  v30 = objc_msgSend(v28, sel_description);
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v91 = (int *)v21;
  v33 = v32;

  v34 = (uint64_t)v29;
  v35 = v91;
  SignatureDescription.init(tag:customDescription:)(v34, v31, v33, (uint64_t *)&v97);
  v89 = v97;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v97 = 0u;
  v98 = 0u;
  CRRegister.init(wrappedValue:)();
  v36 = &v26[v35[5]];
  *(_QWORD *)&v97 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  v85 = v36;
  CRRegister.init(wrappedValue:)();
  v37 = &v26[v35[6]];
  *(_QWORD *)&v97 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignatureItem?);
  lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
  v84 = v37;
  CRRegister.init(wrappedValue:)();
  v38 = &v26[v35[7]];
  *(_QWORD *)&v97 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v97 = 0;
  BYTE8(v97) = 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v26[v35[9]] = MEMORY[0x1E0DEE9E0];
  v39 = objc_msgSend(v28, sel_uniqueID);
  if (!v39)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v94, 1, 1, v14);
    goto LABEL_14;
  }
  v40 = v39;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v42 = v94;
  v41 = v95;
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v17, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v42, 1, v14) == 1)
  {
LABEL_14:
    outlined consume of SignatureDescription(v89, *((unint64_t *)&v89 + 1));
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v28, sel_baselineOffset);
  v44 = v43;
  v45 = objc_msgSend(v28, sel_creationDate);
  if (!v45)
  {
LABEL_15:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v92, 1, 1, v7);
    goto LABEL_16;
  }
  v46 = v45;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v48 = v92;
  v47 = v93;
  (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, v10, v7);
  v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56);
  v49(v48, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v48, 1, v7) == 1)
  {
LABEL_16:
    result = outlined consume of SignatureDescription(v89, *((unint64_t *)&v89 + 1));
    __break(1u);
    return result;
  }
  v83 = v26;
  v81 = objc_msgSend(v28, sel_shouldPersist);
  v80 = objc_msgSend(v28, sel_path);
  v50 = objc_msgSend(v28, sel_drawing);
  v51 = (uint64_t)v90;
  v82 = v28;
  v79 = v38;
  if (v50)
  {
    v52 = v50;
    v53 = v7;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    v54 = type metadata accessor for PKDrawing();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v51, 0, 1, v54);
  }
  else
  {
    v53 = v7;
    v56 = type metadata accessor for PKDrawing();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v51, 1, 1, v56);
  }
  v57 = (objc_class *)type metadata accessor for SignatureItem();
  v58 = objc_allocWithZone(v57);
  v59 = v94;
  v60 = v95;
  (*(void (**)(_BYTE *, char *, uint64_t))(v95 + 16))(&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID], v94, v14);
  *(_QWORD *)&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset] = v44;
  v61 = &v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate];
  v90 = (char *)v14;
  v62 = v92;
  v63 = v93;
  (*(void (**)(_BYTE *, char *, uint64_t))(v93 + 16))(&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate], v92, v53);
  v49(v61, 0, 1, v53);
  v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist] = v81;
  v64 = &v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
  v65 = *((_QWORD *)&v89 + 1);
  *v64 = v89;
  v64[1] = v65;
  *(_QWORD *)&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_path] = v80;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v51, (uint64_t)&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing], &demangling cache variable for type metadata for PKDrawing?);
  v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned] = 1;
  v96.receiver = v58;
  v96.super_class = v57;
  v66 = objc_msgSendSuper2(&v96, sel_init, v79);
  outlined destroy of StocksKitCurrencyCache.Provider?(v51, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v53);
  (*(void (**)(char *, char *))(v60 + 8))(v59, v90);
  *(_QWORD *)&v97 = v66;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  CRRegister.wrappedValue.setter();
  v67 = v87;
  objc_msgSend(v87, sel_drawingBounds);
  *(_QWORD *)&v97 = v68;
  *((_QWORD *)&v97 + 1) = v69;
  *(_QWORD *)&v98 = v70;
  *((_QWORD *)&v98 + 1) = v71;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v72 = (uint64_t)v83;
  CRRegister.wrappedValue.setter();
  objc_msgSend(v67, sel_rotationAngle);
  *(_QWORD *)&v97 = v73;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.setter();
  v74 = objc_msgSend(v67, sel_strokeColor);
  if (v74)
  {
    v75 = v74;
    Color.init(cgColor:)((CGColor *)objc_msgSend(v75, sel_CGColor), (CGColor **)&v97);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.setter();

  }
  v76 = v91;
  v77 = v86;
  v78 = v88;
  outlined init with take of PKStrokeStruct(v72, v88, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v77 + 56))(v78, 0, 1, v76);
}

uint64_t static AnnotationImporter.addAnnotation<A>(_:from:in:id:scale:mediaBox:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, double a7@<D2>, double a8@<D4>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  BOOL v33;
  char v34;
  void (*v35)(char *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, _QWORD);
  _QWORD *v40;
  _QWORD v42[2];
  uint64_t v43;
  char *v44;
  _BYTE v45[32];
  char v46[32];

  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v43 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v44 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v42 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v42 - v29;
  v42[1] = a3;
  static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)(a1, a2, a3, a4, (uint64_t)v42 - v29, a6, a7, a8);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v30, (uint64_t)v26, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  v31 = type metadata accessor for AnnotationImporter.ImportedElement();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v26, 1, v31) != 1)
  {
    v42[0] = a5;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v26, (uint64_t)v22, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of PKStrokeProperties((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
    }
    else
    {
      v32 = v44;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v44, v22, v16);
      objc_opt_self();
      if (swift_dynamicCastObjCClass()
        || (objc_opt_self(), swift_dynamicCastObjCClass())
        || (objc_opt_self(), swift_dynamicCastObjCClass())
        || (objc_opt_self(), swift_dynamicCastObjCClass()))
      {
        v33 = 0;
      }
      else
      {
        objc_opt_self();
        v33 = swift_dynamicCastObjCClass() == 0;
      }
      objc_opt_self();
      if (swift_dynamicCastObjCClass()
        || ((objc_opt_self(), swift_dynamicCastObjCClass()) ? (v34 = 1) : (v34 = v33), (v34 & 1) != 0))
      {
        v35 = (void (*)(char *, _QWORD))SharedTagged_9.subscript.modify();
        v37 = *(_QWORD *)(v36 + 24);
        v38 = *(_QWORD *)(v36 + 32);
        __swift_mutable_project_boxed_opaque_existential_1(v36, v37);
        v39 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v38 + 80))(v45, v37, v38);
        v32 = v44;
        *v40 |= 0x88uLL;
        v39(v45, 0);
        v35(v46, 0);
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v16);
    }
    a5 = v42[0];
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v30, a5, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
}

uint64_t static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, double a7@<D2>, double a8@<D4>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  double b;
  double a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  void (*v87)(CGAffineTransform *, _QWORD);
  double *v88;
  void (*v89)(CGAffineTransform *, _QWORD);
  CGFloat *v90;
  CGFloat *v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat MinX;
  double v97;
  CGFloat Width;
  CGFloat Height;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)();
  uint64_t v104;
  uint64_t v105;
  void *v106;
  id v107;
  id v108;
  void *v109;
  uint64_t v110;
  void (*v111)(CGAffineTransform *, _QWORD);
  double *v112;
  void (*v113)(CGAffineTransform *, _QWORD);
  CGFloat *v114;
  CGFloat *v115;
  CGFloat v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  double v121;
  CGFloat v122;
  CGFloat v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  CGFloat v140;
  CGFloat v141;
  CGFloat v142;
  CGFloat v143;
  void (*v144)(CGAffineTransform *, _QWORD);
  CGRect *v145;
  void (*v146)(CGAffineTransform *, _QWORD);
  CGFloat *v147;
  CGFloat *v148;
  CGFloat v149;
  CGFloat v150;
  CGFloat v151;
  CGFloat v152;
  CGFloat v153;
  double v154;
  CGFloat v155;
  CGFloat v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(CGAffineTransform *, _QWORD);
  CGFloat *v160;
  CGFloat *v161;
  CGFloat v162;
  CGFloat v163;
  CGFloat v164;
  CGFloat v165;
  CGFloat v166;
  double v167;
  CGFloat v168;
  CGFloat v169;
  void (*v170)(CGAffineTransform *, _QWORD);
  double *v171;
  void *v172;
  id v173;
  double v174;
  CGFloat v175;
  double v176;
  CGFloat v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  id v181;
  char *v182;
  CGFloat v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  CGAffineTransform v210;
  CGAffineTransform v211;
  CGAffineTransform v212;
  CGAffineTransform v213;
  CGAffineTransform t1;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;
  CGRect v235;

  v206 = a4;
  v207 = a3;
  v209 = a5;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v195 = (char *)&v186 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v16, v17);
  v194 = (char *)&v186 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x1E0C80A78](v19, v20);
  v198 = (uint64_t)&v186 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for Signature();
  v197 = *(_QWORD *)(v199 - 8);
  MEMORY[0x1E0C80A78](v199, v22);
  v187 = (uint64_t)&v186 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v188 = (uint64_t)&v186 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v191 = *(_QWORD *)(v27 - 8);
  v192 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v193 = (char *)&v186 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PKDrawing();
  v200 = *(_QWORD *)(v30 - 8);
  v201 = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v189 = (char *)&v186 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v190 = (char *)&v186 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v186 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v186 - v42;
  v44 = type metadata accessor for CRKeyPath();
  v203 = *(_QWORD *)(v44 - 8);
  v204 = v44;
  MEMORY[0x1E0C80A78](v44, v45);
  v205 = (char *)&v186 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v47, v48);
  v50 = (char *)&v186 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v52);
  v54 = (char *)&v186 - v53;
  v208 = type metadata accessor for Shape();
  v55 = *(_QWORD *)(v208 - 8);
  MEMORY[0x1E0C80A78](v208, v56);
  v196 = (uint64_t)&v186 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v61 = (char *)&v186 - v60;
  MEMORY[0x1E0C80A78](v62, v63);
  v202 = (uint64_t)&v186 - v64;
  MEMORY[0x1E0C80A78](v65, v66);
  v68 = (char *)&v186 - v67;
  CGAffineTransformMakeScale(&t1, a6, a6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  tx = t1.tx;
  ty = t1.ty;
  v213 = t1;
  if (!a2)
  {
    memset(&t1, 0, 32);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  if (objc_msgSend(a2, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0DF0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(&v212, 0, 32);
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v212, (uint64_t)&t1, &demangling cache variable for type metadata for Any?);
  if (!*(_QWORD *)&t1.d)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    v75 = 0;
    goto LABEL_14;
  }
  if ((LOBYTE(v212.a) & 2) == 0)
  {
    if ((LOBYTE(v212.a) & 0x40) != 0)
    {
      v75 = 2;
      if ((LOBYTE(v212.a) & 0x80) == 0)
        goto LABEL_14;
    }
    else
    {
      v75 = 0;
      if ((LOBYTE(v212.a) & 0x80) == 0)
        goto LABEL_14;
    }
    goto LABEL_36;
  }
  if ((LOBYTE(v212.a) & 0x40) == 0)
  {
    v75 = 1;
    if ((LOBYTE(v212.a) & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
  v75 = 3;
  if ((LOBYTE(v212.a) & 0x80) != 0)
LABEL_36:
    v75 |= 4uLL;
LABEL_14:
  a2 = (void *)(v75 | 0x70);
LABEL_15:
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v76 = type metadata accessor for AnnotationImporter.ImportedElement();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56);
    v78 = v209;
LABEL_48:
    v126 = 1;
    return v77(v78, v126, 1, v76);
  }
  v186 = (unint64_t)a2;
  objc_opt_self();
  v79 = swift_dynamicCastObjCClass();
  if (v79)
  {
    v80 = (void *)v79;
    v81 = a1;
    static AnnotationImporter.translateDoodleAnnotation(_:)(v80, (uint64_t)v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v54, 1, v208) == 1)
    {

      v82 = &demangling cache variable for type metadata for Shape?;
      v83 = (uint64_t)v54;
LABEL_47:
      outlined destroy of StocksKitCurrencyCache.Provider?(v83, v82);
      v133 = v209;
      v76 = type metadata accessor for AnnotationImporter.ImportedElement();
      v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56);
      v78 = v133;
      goto LABEL_48;
    }
    outlined init with take of PKStrokeStruct((uint64_t)v54, (uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v212);
    t1 = v212;
    v211.a = a;
    v211.b = b;
    v211.c = c;
    v211.d = d;
    v211.tx = tx;
    v211.ty = ty;
    CGAffineTransformConcat(&v210, &t1, &v211);
    t1 = v210;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    v87 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    *v88 = sqrt(a * a + b * b) * *v88;
    v87(&v211, 0);
    CRAttributedString<>.apply(_:)(&v213.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v89 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    v91 = v90;
    v92 = *v90;
    v93 = v90[1];
    v94 = v90[2];
    v95 = v90[3];
    v215.origin.x = *v90;
    v215.origin.y = v93;
    v215.size.width = v94;
    v215.size.height = v95;
    MinX = CGRectGetMinX(v215);
    v216.origin.x = v92;
    v216.origin.y = v93;
    v216.size.width = v94;
    v216.size.height = v95;
    v97 = a7 + a7 + a8 - CGRectGetMaxY(v216);
    v217.origin.x = v92;
    v217.origin.y = v93;
    v217.size.width = v94;
    v217.size.height = v95;
    Width = CGRectGetWidth(v217);
    v218.origin.x = v92;
    v218.origin.y = v93;
    v218.size.width = v94;
    v218.size.height = v95;
    Height = CGRectGetHeight(v218);
    *v91 = MinX;
    v91[1] = v97;
    v91[2] = Width;
    v91[3] = Height;
    v89(&v211, 0);
    CRRegister.value.getter();
    v100 = v211.a;
    CRRegister.value.getter();
    if (fabs(v100 + v211.a) > 0.01)
    {
      v211.a = -v100;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(_QWORD *)&v210.a = *(_QWORD *)&v211.a | v186;
    CRRegister.wrappedValue.setter();
    outlined init with copy of PKStrokeProperties((uint64_t)v68, v202, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    v101 = v209;
    SharedTagged_9.init<A>(_:_:id:)();

    v102 = (uint64_t)v68;
    v103 = type metadata accessor for Shape;
LABEL_26:
    outlined destroy of PKStrokeProperties(v102, (uint64_t (*)(_QWORD))v103);
    v104 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
    v78 = v101;
    goto LABEL_40;
  }
  objc_opt_self();
  v84 = swift_dynamicCastObjCClass();
  if (v84)
  {
    v85 = (void *)v84;
    v86 = a1;
    static AnnotationImporter.translateStrokedAnnotation(_:)(v85, (uint64_t)v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v50, 1, v208) == 1)
    {

      v82 = &demangling cache variable for type metadata for Shape?;
      v83 = (uint64_t)v50;
      goto LABEL_47;
    }
    outlined init with take of PKStrokeStruct((uint64_t)v50, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v212);
    t1 = v212;
    v211.a = a;
    v211.b = b;
    v211.c = c;
    v211.d = d;
    v211.tx = tx;
    v211.ty = ty;
    CGAffineTransformConcat(&v210, &t1, &v211);
    t1 = v210;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    v111 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    *v112 = sqrt(a * a + b * b) * *v112;
    v111(&v211, 0);
    CRAttributedString<>.apply(_:)(&v213.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v113 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    v115 = v114;
    v116 = *v114;
    v117 = v114[1];
    v118 = v114[2];
    v119 = v114[3];
    v219.origin.x = *v114;
    v219.origin.y = v117;
    v219.size.width = v118;
    v219.size.height = v119;
    v120 = CGRectGetMinX(v219);
    v220.origin.x = v116;
    v220.origin.y = v117;
    v220.size.width = v118;
    v220.size.height = v119;
    v121 = a7 + a7 + a8 - CGRectGetMaxY(v220);
    v221.origin.x = v116;
    v221.origin.y = v117;
    v221.size.width = v118;
    v221.size.height = v119;
    v122 = CGRectGetWidth(v221);
    v222.origin.x = v116;
    v222.origin.y = v117;
    v222.size.width = v118;
    v222.size.height = v119;
    v123 = CGRectGetHeight(v222);
    *v115 = v120;
    v115[1] = v121;
    v115[2] = v122;
    v115[3] = v123;
    v113(&v211, 0);
    CRRegister.value.getter();
    v124 = v211.a;
    CRRegister.value.getter();
    if (fabs(v124 + v211.a) > 0.01)
    {
      v211.a = -v124;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(_QWORD *)&v210.a = *(_QWORD *)&v211.a | v186;
    CRRegister.wrappedValue.setter();
    outlined init with copy of PKStrokeProperties((uint64_t)v61, v202, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    v125 = v209;
    SharedTagged_9.init<A>(_:_:id:)();

    outlined destroy of PKStrokeProperties((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v104 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
    v78 = v125;
  }
  else
  {
    objc_opt_self();
    v105 = swift_dynamicCastObjCClass();
    if (!v105)
    {
      objc_opt_self();
      v127 = swift_dynamicCastObjCClass();
      if (!v127)
      {
        lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
        lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
        lazy protocol witness table accessor for type Line and conformance Line();
        lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
        lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
        lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
        lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
        lazy protocol witness table accessor for type Star and conformance Star();
        lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
        v136 = v194;
        TaggedValue_9.init(_:)();
        t1.a = 0.0;
        v212.a = 0.0;
        v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
        v138 = (uint64_t)v195;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v195, 1, 1, v137);
        v211.a = 0.0;
        v139 = v202;
        Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v136, (uint64_t *)&t1, (uint64_t *)&v212, v138, (uint64_t *)&v211, v202, 0.0, 0.0, 0.0, 0.0, 5.0);
        objc_msgSend(a1, sel_drawingBounds);
        t1.a = v140;
        t1.b = v141;
        t1.c = v142;
        t1.d = v143;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.setter();
        v144 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
        v223 = *v145;
        t1.a = a;
        t1.b = b;
        t1.c = c;
        t1.d = d;
        t1.tx = tx;
        t1.ty = ty;
        *v145 = CGRectApplyAffineTransform(v223, &t1);
        v144(&v212, 0);
        v146 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
        v148 = v147;
        v149 = *v147;
        v150 = v147[1];
        v151 = v147[2];
        v152 = v147[3];
        v224.origin.x = *v147;
        v224.origin.y = v150;
        v224.size.width = v151;
        v224.size.height = v152;
        v153 = CGRectGetMinX(v224);
        v225.origin.x = v149;
        v225.origin.y = v150;
        v225.size.width = v151;
        v225.size.height = v152;
        v154 = a7 + a7 + a8 - CGRectGetMaxY(v225);
        v226.origin.x = v149;
        v226.origin.y = v150;
        v226.size.width = v151;
        v226.size.height = v152;
        v155 = CGRectGetWidth(v226);
        v227.origin.x = v149;
        v227.origin.y = v150;
        v227.size.width = v151;
        v227.size.height = v152;
        v156 = CGRectGetHeight(v227);
        *v148 = v153;
        v148[1] = v154;
        v148[2] = v155;
        v148[3] = v156;
        v146(&t1, 0);
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
        CRRegister.wrappedValue.getter();
        *(_QWORD *)&v212.a = *(_QWORD *)&t1.a | v186;
        CRRegister.wrappedValue.setter();
        outlined init with copy of PKStrokeProperties(v139, v196, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        swift_retain();
        v157 = v209;
        SharedTagged_9.init<A>(_:_:id:)();
        outlined destroy of PKStrokeProperties(v139, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v104 = type metadata accessor for AnnotationImporter.ImportedElement();
        swift_storeEnumTagMultiPayload();
        v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
        v78 = v157;
        goto LABEL_40;
      }
      v128 = (void *)v127;
      v129 = a1;
      v130 = v198;
      static AnnotationImporter.translateSignatureAnnotation(_:)(v128, v198);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48))(v130, 1, v199) == 1)
      {

        v82 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
        v83 = v130;
        goto LABEL_47;
      }
      v158 = v188;
      outlined init with take of PKStrokeStruct(v130, v188, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
      Signature.apply(_:)(&v213);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      v159 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
      v161 = v160;
      v162 = *v160;
      v163 = v160[1];
      v164 = v160[2];
      v165 = v160[3];
      v228.origin.x = *v160;
      v228.origin.y = v163;
      v228.size.width = v164;
      v228.size.height = v165;
      v166 = CGRectGetMinX(v228);
      v229.origin.x = v162;
      v229.origin.y = v163;
      v229.size.width = v164;
      v229.size.height = v165;
      v167 = a7 + a7 + a8 - CGRectGetMaxY(v229);
      v230.origin.x = v162;
      v230.origin.y = v163;
      v230.size.width = v164;
      v230.size.height = v165;
      v168 = CGRectGetWidth(v230);
      v231.origin.x = v162;
      v231.origin.y = v163;
      v231.size.width = v164;
      v231.size.height = v165;
      v169 = CGRectGetHeight(v231);
      *v161 = v166;
      v161[1] = v167;
      v161[2] = v168;
      v161[3] = v169;
      v159(&t1, 0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      v170 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
      *v171 = -*v171;
      v170(&t1, 0);
      outlined init with copy of PKStrokeProperties(v158, v187, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
      (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      swift_retain();
      v101 = v209;
      SharedTagged_9.init<A>(_:_:id:)();

      v102 = v158;
      v103 = type metadata accessor for Signature;
      goto LABEL_26;
    }
    v106 = (void *)v105;
    v107 = a1;
    v108 = objc_msgSend(v106, sel_drawing);
    if (v108)
    {
      v109 = v108;
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      v110 = 0;
    }
    else
    {
      v110 = 1;
    }
    v132 = v200;
    v131 = v201;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v39, v110, 1, v201);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v39, (uint64_t)v43, &demangling cache variable for type metadata for PKDrawing?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v43, 1, v131) == 1)
    {

      v82 = &demangling cache variable for type metadata for PKDrawing?;
      v83 = (uint64_t)v43;
      goto LABEL_47;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
    swift_dynamicCast();
    v135 = *(id *)&t1.a;
    v172 = (void *)specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v135);

    v173 = v172;
    objc_msgSend(v106, sel_rectangle);
    v174 = CGRectGetWidth(v232);
    objc_msgSend(v173, sel_bounds);
    v175 = v174 / CGRectGetWidth(v233);
    objc_msgSend(v106, sel_rectangle);
    v176 = CGRectGetHeight(v234);
    objc_msgSend(v173, sel_bounds);
    v177 = CGRectGetHeight(v235);
    CGAffineTransformMakeScale(&t1, v175, v176 / v177);
    v178 = *(_OWORD *)&t1.a;
    v179 = *(_OWORD *)&t1.c;
    v180 = *(_OWORD *)&t1.tx;
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&v212.a = v178;
    *(_OWORD *)&v212.c = v179;
    *(_OWORD *)&v212.tx = v180;
    CGAffineTransformConcat(&v211, &t1, &v212);
    t1 = v211;
    v181 = objc_msgSend(v173, sel_drawingByApplyingTransform_, &t1);

    v182 = v189;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v190, v182, v131);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    v183 = t1.a;
    v184 = *(_QWORD *)&t1.a + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v191 + 16))(v193, v184, v192);
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    swift_retain();
    v185 = v209;
    Ref.init<A>(_:_:)();

    v104 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
    v78 = v185;
  }
LABEL_40:
  v126 = 0;
  v76 = v104;
  return v77(v78, v126, 1, v76);
}

void static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  char *v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  PDFAnnotation *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)();
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;

  v92 = a3;
  v94 = a2;
  v12 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x1E0C80A78](v12, v13);
  v83 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v79 - v21;
  v93 = type metadata accessor for AnnotationImporter.ImportedElement();
  v97 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v23);
  v82 = (uint64_t)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v81 = (uint64_t)&v79 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v90 = (uint64_t)&v79 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v89 = (uint64_t)&v79 - v33;
  v34 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v34, v35);
  v84 = (char *)&v79 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v37, v38);
  v88 = (char *)&v79 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v79 - v42;
  v44 = type metadata accessor for CRKeyPath();
  v45 = *(_QWORD *)(v44 - 8);
  v47 = MEMORY[0x1E0C80A78](v44, v46);
  v49 = (char *)&v79 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = MEMORY[0x1E0DEE9D8];
  v91 = (uint64_t)a1;
  v50 = objc_msgSend(a1, sel_annotations, v47);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v51 >> 62)
  {
    swift_bridgeObjectRetain();
    v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v52)
      goto LABEL_3;
LABEL_35:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    return;
  }
  v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v52)
    goto LABEL_35;
LABEL_3:
  if (v52 >= 1)
  {
    v80 = v18;
    v53 = 0;
    v95 = v51 & 0xC000000000000001;
    v87 = v22;
    v86 = v51;
    v96 = v52;
    while (1)
    {
      v54 = v95 ? (id)MEMORY[0x1DF0E4D64](v53, v51) : *(id *)(v51 + 8 * v53 + 32);
      v55 = v54;
      type metadata accessor for CanvasElementPDFAnnotation();
      v56 = swift_dynamicCastClass();
      if (v56)
        break;

LABEL_6:
      if (v96 == ++v53)
        goto LABEL_35;
    }
    v57 = (PDFAnnotation *)v56;
    v58 = v55;
    CanvasElementPDFAnnotation.decodePaperKitID()((uint64_t)v43);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v59 = -[PDFAnnotation pdfAnnotationUUID](v57, sel_pdfAnnotationUUID);
      v85 = v53;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v53 = v85;
      CRKeyPath.init(_:)();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v49, v43, v44);
    }
    v60 = (uint64_t)v88;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v88, v49, v44);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v60, 0, 1, v44);
    v61 = (uint64_t)v57 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
    swift_beginAccess();
    outlined assign with take of CRKeyPath?(v60, v61);
    swift_endAccess();
    CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)(v94, v92, v91, v22);
    v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
    if (v62((uint64_t)v22, 1, v93) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
      if (PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
      {
        v63 = v58;
        v64 = v83;
        PDFAnnotationElement.init(_:)(v57, v83);
        specialized addPDFAnnotationElement #1 <A>(_:) in static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v64, v94, (uint64_t)v49, &v98);

        v65 = v64;
        v66 = type metadata accessor for PDFAnnotationElement;
LABEL_23:
        outlined destroy of PKStrokeProperties(v65, (uint64_t (*)(_QWORD))v66);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v44);
LABEL_24:
        v22 = v87;
        v51 = v86;
        goto LABEL_6;
      }
      v71 = *(Class *)((char *)&v57->super.isa + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
      if (!v71)
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v44);

        goto LABEL_24;
      }
      v72 = v58;
      v73 = v71;
      v74 = (uint64_t)v80;
      static AnnotationImporter.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(v73, v57, v94, (uint64_t)v49, (uint64_t)v80, a4, a6, a8);

      if (v62(v74, 1, v93) == 1)
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v44);

        outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
        goto LABEL_24;
      }
      v75 = v81;
      outlined init with take of PKStrokeStruct(v74, v81, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      outlined init with copy of PKStrokeProperties(v75, v82, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      swift_beginAccess();
      v76 = v98;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v76 + 16) + 1, 1, v76);
      v78 = *(_QWORD *)(v76 + 16);
      v77 = *(_QWORD *)(v76 + 24);
      if (v78 >= v77 >> 1)
        v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v76);
      *(_QWORD *)(v76 + 16) = v78 + 1;
      outlined init with take of PKStrokeStruct(v82, v76+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(_QWORD *)(v97 + 72) * v78, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      v98 = v76;
      swift_endAccess();

      v65 = v81;
    }
    else
    {
      v67 = v89;
      outlined init with take of PKStrokeStruct((uint64_t)v22, v89, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      outlined init with copy of PKStrokeProperties(v67, v90, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      swift_beginAccess();
      v68 = v98;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v68 + 16) + 1, 1, v68);
      v70 = *(_QWORD *)(v68 + 16);
      v69 = *(_QWORD *)(v68 + 24);
      if (v70 >= v69 >> 1)
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1, v68);
      *(_QWORD *)(v68 + 16) = v70 + 1;
      outlined init with take of PKStrokeStruct(v90, v68+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(_QWORD *)(v97 + 72) * v70, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      v98 = v68;
      swift_endAccess();

      v65 = v89;
    }
    v66 = type metadata accessor for AnnotationImporter.ImportedElement;
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t specialized addPDFAnnotationElement #1 <A>(_:) in static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  char v41;

  v39 = a4;
  v34 = a3;
  v36 = a2;
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for AnnotationImporter.ImportedElement();
  v40 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v9);
  v35 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PDFAnnotationElement);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v25 = v34;
  v24(v14, v34, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  v26 = v23;
  v27 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
  v41 = 8;
  v24(v37, v25, v5);
  v28 = v39;
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  v29 = *v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v28 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
    *v28 = v29;
  }
  v32 = *(_QWORD *)(v29 + 16);
  v31 = *(_QWORD *)(v29 + 24);
  if (v32 >= v31 >> 1)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v29);
    *v28 = v29;
  }
  *(_QWORD *)(v29 + 16) = v32 + 1;
  outlined init with take of PKStrokeStruct(v27, v29+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v32, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
  return swift_endAccess();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  char v41;

  v39 = a4;
  v34 = a3;
  v36 = a2;
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for AnnotationImporter.ImportedElement();
  v40 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v9);
  v35 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PDFAnnotationElement);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v25 = v34;
  v24(v14, v34, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  v26 = v23;
  v27 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
  v41 = 8;
  v24(v37, v25, v5);
  v28 = v39;
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  v29 = *v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v28 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1, v29, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
    *v28 = v29;
  }
  v32 = *(_QWORD *)(v29 + 16);
  v31 = *(_QWORD *)(v29 + 24);
  if (v32 >= v31 >> 1)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v29, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
    *v28 = v29;
  }
  *(_QWORD *)(v29 + 16) = v32 + 1;
  outlined init with take of PKStrokeStruct(v27, v29+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v32, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
  return swift_endAccess();
}

uint64_t ContainerCanvasElement.addImportedElement<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v40)(_BYTE *, _QWORD);
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(_BYTE *, _QWORD);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _BYTE v60[32];

  v59 = a3;
  v54 = a2;
  v55 = a4;
  v56 = a1;
  v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v4);
  v52 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v50, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v49 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v57 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v58 = (char *)&v49 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for AnnotationImporter.ImportedElement();
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v49 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v56, (uint64_t)v32, v33);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = v57;
    v35 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
    v35(v58, v32, v17);
    v36 = v55;
    (*(void (**)(uint64_t, uint64_t))(v55 + 48))(v59, v55);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v16, 1, v17) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v38 = v57;
      v37 = v58;
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v12, v58, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v12, 0, 1, v17);
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 56))(v12, v59, v36);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v37, v17);
    }
    else
    {
      v41 = v20;
      v35(v20, v16, v17);
      v42 = (uint64_t)v8;
      v43 = v58;
      Ref.subscript.getter();
      v44 = v51;
      v46 = v52;
      v45 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v52, v42 + *(int *)(v50 + 20), v53);
      outlined destroy of PKStrokeProperties(v42, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      v47 = (void (*)(_BYTE *, _QWORD))Ref.subscript.modify();
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
      CROrderedSet.append<A>(contentsOf:)();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v45);
      v47(v60, 0);
      v48 = *(void (**)(char *, uint64_t))(v57 + 8);
      v48(v41, v17);
      return ((uint64_t (*)(char *, uint64_t))v48)(v43, v17);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v28, v32, v24);
    v40 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t))(v55 + 88))(v60, v59);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    CROrderedSet.append(_:)();
    v40(v60, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  }
}

uint64_t ContainerCanvasElement.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CGFloat a7, double a8, double a9, double a10, double a11)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;

  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AnnotationImporter.ImportedElement();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnnotationImporter.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(a1, a2, a3, a4, (uint64_t)v23, a7, a9, a11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  outlined init with take of PKStrokeStruct((uint64_t)v23, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
  ContainerCanvasElement.addImportedElement<A>(_:in:)((uint64_t)v28, a3, a5, a6);
  return outlined destroy of PKStrokeProperties((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
}

void specialized ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(CGFloat a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  Class isa;
  unsigned int v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  char *v77;
  uint64_t v78;
  BOOL v79;
  BOOL v80;
  void (*v81)(char *, _QWORD);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  void (*v87)(char *, _QWORD);
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int EnumCaseMultiPayload;
  void (*v95)(char *, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD);
  void (*v108)(char *, uint64_t);
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  id v129;
  unint64_t v130;
  char *v131;
  id v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  id v143;
  char *v144;
  uint64_t v145;
  char v146[8];
  char v147[8];

  v142 = a8;
  v120 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120, v11);
  v114 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v115, v13);
  v118 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v117 = (uint64_t)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v116 = (char *)&v110 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v123 = (char *)&v110 - v23;
  v122 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v24 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122, v25);
  v125 = (char *)&v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v124 = (char *)&v110 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v133 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v121 = (char *)&v110 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v131 = (char *)&v110 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x1E0C80A78](v36, v37);
  v134 = (char *)&v110 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v110 - v41;
  MEMORY[0x1E0C80A78](v43, v44);
  v145 = (uint64_t)&v110 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v140 = (uint64_t)&v110 - v48;
  v139 = type metadata accessor for AnnotationImporter.ImportedElement();
  v138 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139, v49);
  v126 = (uint64_t)&v110 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v52);
  v135 = (uint64_t)&v110 - v53;
  v137 = type metadata accessor for CRKeyPath();
  v136 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137, v54);
  v144 = (char *)&v110 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D47450]), sel_init);
  v57 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AKControllerDelegateHelper()), sel_init);
  v58 = objc_msgSend((id)objc_opt_self(), sel_controllerWithDelegate_, v57);

  if (!v58)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  v60 = objc_msgSend(v56, sel_readAnnotationsFromArchivedModelData_toController_, isa, v58);

  if (!v60)
  {
LABEL_43:
    objc_msgSend(v58, sel_teardown);

    return;
  }
  v61 = objc_msgSend(v58, sel_modelController);
  if (v61)
  {
    v62 = v61;
    v63 = objc_msgSend(v61, sel_pageModelControllerForPage_, 0);

    if (v63)
    {
      v64 = objc_msgSend(v63, sel_annotations);
      if (v64)
      {
        v65 = v64;
        v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v67 = specialized _arrayConditionalCast<A, B>(_:)(v66, (unint64_t *)&lazy cache variable for type metadata for AKAnnotation);
        swift_bridgeObjectRelease();
        if (v67)
        {
          v130 = v67;
          if (v67 >> 62)
          {
            swift_bridgeObjectRetain();
            v67 = v130;
            v68 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          v69 = (uint64_t)v134;
          if (!v68)
          {

LABEL_46:
            swift_bridgeObjectRelease_n();
            objc_msgSend(v58, sel_teardown);

            return;
          }
          v111 = v63;
          if (v68 >= 1)
          {
            v70 = 0;
            v127 = v67 & 0xC000000000000001;
            v112 = v24;
            v113 = v30;
            v141 = v42;
            v132 = v56;
            v129 = v58;
            v128 = v68;
            do
            {
              if (v127)
                v71 = (id)MEMORY[0x1DF0E4D64](v70, v67);
              else
                v71 = *(id *)(v67 + 8 * v70 + 32);
              v72 = v71;
              v73 = (uint64_t)v144;
              static CRKeyPath.unique.getter();
              v74 = v145;
              specialized static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)(v72, 0, v142, v73, v145, a1, a3, a5);
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v74, (uint64_t)v42, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
              v75 = (uint64_t)v42;
              v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48);
              v77 = v42;
              v78 = v139;
              if (v76(v77, 1, v139) != 1)
              {
                outlined init with copy of Ref<PKStrokeInheritedProperties>?(v75, v69, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                if (swift_getEnumCaseMultiPayload() == 1)
                {
                  outlined destroy of PKStrokeProperties(v69, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                }
                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v131, v69, v30);
                  objc_opt_self();
                  if (swift_dynamicCastObjCClass()
                    || (objc_opt_self(), swift_dynamicCastObjCClass())
                    || (objc_opt_self(), swift_dynamicCastObjCClass())
                    || (objc_opt_self(), swift_dynamicCastObjCClass()))
                  {
                    v79 = 1;
                  }
                  else
                  {
                    objc_opt_self();
                    v79 = swift_dynamicCastObjCClass() != 0;
                  }
                  objc_opt_self();
                  if (swift_dynamicCastObjCClass()
                    || ((objc_opt_self(), !swift_dynamicCastObjCClass()) ? (v80 = v79) : (v80 = 0), !v80))
                  {
                    v81 = (void (*)(char *, _QWORD))SharedTagged_9.subscript.modify();
                    v83 = *(_QWORD *)(v82 + 24);
                    v84 = *(_QWORD *)(v82 + 32);
                    __swift_mutable_project_boxed_opaque_existential_1(v82, v83);
                    v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 80);
                    v86 = v84;
                    v30 = v113;
                    v87 = (void (*)(char *, _QWORD))v85(v146, v83, v86);
                    *v88 |= 0x88uLL;
                    v87(v146, 0);
                    v81(v147, 0);
                  }
                  (*(void (**)(char *, uint64_t))(v133 + 8))(v131, v30);
                  v24 = v112;
                  v69 = (uint64_t)v134;
                }
                v75 = (uint64_t)v141;
              }
              v143 = v72;
              v89 = v78;
              v90 = v140;
              outlined init with take of (key: Int, value: AnyCRValue)?(v145, v140, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
              outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
              if (v76((char *)v90, 1, v89) == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?(v90, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                v42 = v141;
                v56 = v132;
                v58 = v129;
              }
              else
              {
                v91 = v135;
                outlined init with take of PKStrokeStruct(v90, v135, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                v92 = v91;
                v93 = v126;
                outlined init with copy of PKStrokeProperties(v92, v126, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
                v56 = v132;
                if (EnumCaseMultiPayload == 1)
                {
                  v95 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
                  v96 = v124;
                  v97 = v122;
                  v95(v124, v93, v122);
                  type metadata accessor for Image();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
                  v98 = v24;
                  v99 = (uint64_t)v123;
                  CRRegister.wrappedValue.getter();
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v99, 1, v97) == 1)
                  {
                    outlined destroy of StocksKitCurrencyCache.Provider?(v99, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
                    v100 = (uint64_t)v116;
                    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v116, v96, v97);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v100, 0, 1, v97);
                    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v100, v117, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
                    CRRegister.wrappedValue.setter();
                    outlined destroy of StocksKitCurrencyCache.Provider?(v100, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
                    (*(void (**)(char *, uint64_t))(v24 + 8))(v96, v97);
                  }
                  else
                  {
                    v95(v125, v99, v97);
                    v103 = (uint64_t)v118;
                    Ref.subscript.getter();
                    v104 = v119;
                    v105 = v114;
                    v106 = v120;
                    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v114, v103 + *(int *)(v115 + 20), v120);
                    outlined destroy of PKStrokeProperties(v103, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
                    v107 = (void (*)(char *, _QWORD))Ref.subscript.modify();
                    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
                    CROrderedSet.append<A>(contentsOf:)();
                    v108 = *(void (**)(char *, uint64_t))(v104 + 8);
                    v56 = v132;
                    v108(v105, v106);
                    v107(v147, 0);
                    v109 = *(void (**)(char *, uint64_t))(v98 + 8);
                    v109(v125, v97);
                    v109(v124, v97);
                  }
                  v24 = v98;
                  v30 = v113;
                }
                else
                {
                  v101 = v133;
                  v102 = v121;
                  (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v121, v93, v30);
                  type metadata accessor for Image();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
                  CROrderedSet.append(_:)();
                  (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v30);
                }
                v58 = v129;
                outlined destroy of PKStrokeProperties(v135, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                v69 = (uint64_t)v134;
                v42 = v141;
              }
              v67 = v130;
              ++v70;
              (*(void (**)(char *, uint64_t))(v136 + 8))(v144, v137);

            }
            while (v128 != v70);

            goto LABEL_46;
          }
          __break(1u);
          goto LABEL_49;
        }
      }

    }
    goto LABEL_43;
  }
LABEL_50:
  __break(1u);
}

void ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(CGFloat a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v18;
  id v19;
  id v20;
  Class isa;
  unsigned int v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;

  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D47450]), sel_init);
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AKControllerDelegateHelper()), sel_init);
  v20 = objc_msgSend((id)objc_opt_self(), sel_controllerWithDelegate_, v19);

  if (!v20)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v18, sel_readAnnotationsFromArchivedModelData_toController_, isa, v20);

  if (!v22)
    goto LABEL_16;
  v23 = objc_msgSend(v20, sel_modelController);
  if (v23)
  {
    v24 = v23;
    v25 = objc_msgSend(v23, sel_pageModelControllerForPage_, 0);

    if (v25)
    {
      v26 = objc_msgSend(v25, sel_annotations);
      if (v26)
      {
        v27 = v26;
        v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v29 = specialized _arrayConditionalCast<A, B>(_:)(v28, (unint64_t *)&lazy cache variable for type metadata for AKAnnotation);
        swift_bridgeObjectRelease();
        if (v29)
        {
          v34 = v25;
          if (v29 >> 62)
          {
            swift_bridgeObjectRetain();
            v30 = _CocoaArrayWrapper.endIndex.getter();
            if (v30)
              goto LABEL_9;
          }
          else
          {
            v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v30)
            {
LABEL_9:
              if (v30 >= 1)
              {
                v31 = 0;
                do
                {
                  if ((v29 & 0xC000000000000001) != 0)
                    v32 = (id)MEMORY[0x1DF0E4D64](v31, v29);
                  else
                    v32 = *(id *)(v29 + 8 * v31 + 32);
                  v33 = v32;
                  ++v31;
                  v36 = v32;
                  closure #1 in ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(&v36, a1, a2, a3, a4, a5, v35, a8, a9, a10);

                }
                while (v30 != v31);
                goto LABEL_18;
              }
              __break(1u);
              goto LABEL_20;
            }
          }
LABEL_18:

          swift_bridgeObjectRelease_n();
          goto LABEL_16;
        }
      }

    }
LABEL_16:
    objc_msgSend(v20, sel_teardown);

    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t type metadata accessor for AKControllerDelegateHelper()
{
  return objc_opt_self();
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE v28[32];
  uint64_t v29;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v25 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  v29 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
  v16 = v29;
  if (v15)
  {
    v17 = a1 + 32;
    v26 = v10;
    v27 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      outlined init with copy of Any(v17, (uint64_t)v28);
      v18 = swift_dynamicCast();
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      if (!v18)
        break;
      v19(v5, 0, 1, v6);
      v20 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v20(v14, v5, v6);
      v20(v10, v14, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v29;
      }
      v22 = *(_QWORD *)(v16 + 16);
      v21 = *(_QWORD *)(v16 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v16 = v29;
      }
      *(_QWORD *)(v16 + 16) = v22 + 1;
      v23 = v16
          + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + *(_QWORD *)(v7 + 72) * v22;
      v10 = v26;
      v20((char *)v23, v26, v6);
      v17 += 32;
      if (!--v15)
        return v16;
    }
    v19(v5, 1, 1, v6);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
    return 0;
  }
  return v16;
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  _BYTE v7[32];
  uint64_t v8;

  v8 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v4)
    return v8;
  for (i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v7);
    type metadata accessor for NSObject(0, a2);
    if (!swift_dynamicCast())
      break;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v4)
      return v8;
  }
  swift_release();

  return 0;
}

uint64_t closure #1 in ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(void **a1, CGFloat a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v26;

  v19 = type metadata accessor for CRKeyPath();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a1;
  static CRKeyPath.unique.getter();
  ContainerCanvasElement.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(v24, 0, a8, (uint64_t)v23, a9, a10, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t Capsule<>.importAnnotations(from:scale:)()
{
  unsigned __int8 v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  Capsule.callAsFunction<A>(_:)();
  return v1;
}

uint64_t closure #1 in Capsule<>.importAnnotations(from:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>, CGFloat a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t (*v22)(_BYTE *, _QWORD);
  char v23;
  char v24;
  uint64_t result;
  _BYTE v26[32];

  v10 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule.Ref<>.root.getter();
  Image.pdfContentsBounds.getter();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  outlined destroy of PKStrokeProperties((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  v22 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  specialized ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(a5, v15, v17, v19, v21, a2, a3, a1);
  v24 = v23;
  result = v22(v26, 0);
  *a4 = v24 & 1;
  return result;
}

uint64_t partial apply for closure #1 in Capsule<>.importAnnotations(from:scale:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Capsule<>.importAnnotations(from:scale:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, *(CGFloat *)(v2 + 32));
}

ValueMetadata *type metadata accessor for AnnotationImporter()
{
  return &type metadata for AnnotationImporter;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnotationImporter.ImportedElement(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    else
      v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnnotationImporter.ImportedElement(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() == 1)
    v2 = (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>;
  else
    v2 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
  v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t initializeWithCopy for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>;
  else
    v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of PKStrokeProperties(a1, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>;
    else
      v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for AnnotationImporter.ImportedElement()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AnnotationImporter.ImportedElement;
  if (!type metadata singleton initialization cache for AnnotationImporter.ImportedElement)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t initializeWithTake for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>;
  else
    v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of PKStrokeProperties(a1, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>;
    else
      v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AnnotationImporter.ImportedElement()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata completion function for AnnotationImporter.ImportedElement()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SharedTagged_9<TaggedCanvasElement>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Ref<PKDrawingStruct>();
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for SharedTagged_9<TaggedCanvasElement>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>)
  {
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    v0 = type metadata accessor for SharedTagged_9();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  }
}

void type metadata accessor for Ref<PKDrawingStruct>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Ref<PKDrawingStruct>)
  {
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v0 = type metadata accessor for Ref();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Ref<PKDrawingStruct>);
  }
}

void protocol witness for PaperPage.importAnnotations<A>(from:scale:mediaBox:in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(a4, a5, a6, a7, a8, a1, a2, a3, a11, (uint64_t)&protocol witness table for PaperDocumentPage);
}

void protocol witness for PaperPage.importAnnotations<A>(from:scale:mediaBox:in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(a4, a5, a6, a7, a8, a1, a2, a3, a11, (uint64_t)&protocol witness table for Image);
}

void protocol witness for PaperPage.importAnnotations<A>(from:scale:mediaBox:in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(a4, a5, a6, a7, a8, a1, a2, a3, a11, (uint64_t)&protocol witness table for Paper);
}

uint64_t outlined assign with take of CRKeyPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle, &type metadata for PlainStrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle, &type metadata for PlainStrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle, &type metadata for PlainStrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle, &type metadata for PlainStrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle, &type metadata for PlainStrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle, &type metadata for PlainStrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle, &type metadata for PlainStrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t type metadata completion function for CanvasDropDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasDropDelegate.canvas.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t @objc CanvasDropDelegate.dropInteraction(_:canHandle:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  char v8;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  v8 = specialized CanvasDropDelegate.dropInteraction(_:canHandle:)(a4);

  swift_unknownObjectRelease();
  return v8 & 1;
}

id @objc CanvasDropDelegate.dropInteraction(_:sessionDidUpdate:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  v8 = specialized CanvasDropDelegate.dropInteraction(_:sessionDidUpdate:)(a4);

  swift_unknownObjectRelease();
  return v8;
}

void @objc CanvasDropDelegate.dropInteraction(_:performDrop:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  specialized CanvasDropDelegate.dropInteraction(_:performDrop:)(a4, (void (*)(uint64_t))specialized Canvas.dropInteraction(_:performDrop:));

  swift_unknownObjectRelease();
}

id @objc CanvasDropDelegate.dropInteraction(_:previewForDropping:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a1;
  v12 = (void *)specialized CanvasDropDelegate.dropInteraction(_:previewForDropping:withDefault:)(v9, v10);

  return v12;
}

uint64_t @objc CanvasDropDelegate._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(void *a1, int a2, void *a3, void *a4, void *aBlock)
{
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v8 = _Block_copy(aBlock);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v10 = a3;
  v11 = a4;
  v12 = a1;
  specialized CanvasDropDelegate._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(v11, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UITargetedDragPreview) -> (), v9);

  return swift_release();
}

void @objc CanvasDropDelegate.dropInteraction(_:item:willAnimateDropWith:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized CanvasDropDelegate.dropInteraction(_:item:willAnimateDropWith:)(v9, a5);

  swift_unknownObjectRelease();
}

void @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnter:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized Canvas.dropInteraction(_:sessionDidEnter:));
}

void @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnter:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized Canvas.dropInteraction(_:sessionDidEnd:));
}

void @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v7;
  id v8;

  v7 = a3;
  swift_unknownObjectRetain();
  v8 = a1;
  specialized CanvasDropDelegate.dropInteraction(_:performDrop:)((uint64_t)v7, a5);

  swift_unknownObjectRelease();
}

id @objc CanvasDropDelegate._dropInteraction(_:dataOwnerFor:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;

  v4 = a3;
  swift_unknownObjectRetain();
  v5 = a1;
  v6 = specialized CanvasDropDelegate._dropInteraction(_:dataOwnerFor:)();

  swift_unknownObjectRelease();
  return v6;
}

void @objc CanvasDropDelegate.init()()
{
  specialized CanvasDropDelegate.init()();
}

id CanvasDropDelegate.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for CanvasDropDelegate(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc CanvasDropDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasDropDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasDropDelegate);
}

id specialized CanvasDropDelegate.init(canvas:)()
{
  _QWORD *v0;
  uint64_t *v1;
  objc_class *v2;
  objc_super v4;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2 = (objc_class *)type metadata accessor for CanvasDropDelegate(0, v1[10], v1[11], v1[12]);
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

id specialized CanvasDropDelegate.__allocating_init(canvas:)()
{
  uint64_t *v0;
  id v1;

  v1 = objc_allocWithZone((Class)type metadata accessor for CanvasDropDelegate(0, v0[10], v0[11], v0[12]));
  return specialized CanvasDropDelegate.init(canvas:)();
}

uint64_t specialized CanvasDropDelegate.dropInteraction(_:canHandle:)(void *a1)
{
  uint64_t v1;
  uint64_t result;
  void *v4;
  char v5;

  result = MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasDropDelegate.canvas);
  if (result)
  {
    v4 = (void *)result;
    v5 = specialized Canvas.dropInteraction(_:canHandle:)(a1);

    return v5 & 1;
  }
  return result;
}

id specialized CanvasDropDelegate.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  v3 = MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasDropDelegate.canvas);
  if (!v3)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, 1);
  v4 = (void *)v3;
  v5 = specialized Canvas.dropInteraction(_:sessionDidUpdate:)(a1);

  return v5;
}

uint64_t specialized CanvasDropDelegate.dropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t result;
  void *v6;
  id v7;

  result = MEMORY[0x1DF0E666C](v2 + direct field offset for CanvasDropDelegate.canvas);
  if (result)
  {
    v6 = (void *)result;
    v7 = specialized Canvas.dropInteraction(_:previewForDropping:withDefault:)(a1, a2);

    return (uint64_t)v7;
  }
  return result;
}

void specialized CanvasDropDelegate._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  id v8;

  v7 = MEMORY[0x1DF0E666C](v3 + direct field offset for CanvasDropDelegate.canvas);
  if (v7)
  {
    v8 = (id)v7;
    specialized Canvas._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(a1, a2, a3);

  }
}

void specialized CanvasDropDelegate.dropInteraction(_:item:willAnimateDropWith:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  id v6;

  v5 = MEMORY[0x1DF0E666C](v2 + direct field offset for CanvasDropDelegate.canvas);
  if (v5)
  {
    v6 = (id)v5;
    specialized Canvas.dropInteraction(_:item:willAnimateDropWith:)(a1, a2);

  }
}

void specialized CanvasDropDelegate.dropInteraction(_:performDrop:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  id v6;

  v5 = MEMORY[0x1DF0E666C](v2 + direct field offset for CanvasDropDelegate.canvas);
  if (v5)
  {
    v6 = (id)v5;
    a2(a1);

  }
}

id specialized CanvasDropDelegate._dropInteraction(_:dataOwnerFor:)()
{
  uint64_t v0;
  id result;
  void *v2;
  id v3;

  result = (id)MEMORY[0x1DF0E666C](v0 + direct field offset for CanvasDropDelegate.canvas);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel__dropDataOwner);

    return v3;
  }
  return result;
}

void specialized CanvasDropDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1DDBC2BA8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UITargetedDragPreview) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

id one-time initialization function for symbolConfiguration()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_configurationWithScale_, 3);
  static TextToolListItemView.symbolConfiguration = (uint64_t)result;
  return result;
}

char *TextToolListItemView.init(title:image:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  Class isa;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  double v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  char *result;
  char *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v66;
  objc_super v67;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v10 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v9, sel_init);
  v11 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageView;
  *(_QWORD *)&v10[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  v12 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView;
  *(_QWORD *)&v10[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin] = 0x4030000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewSpacing] = 0x4030000000000000;
  v13 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabelTextColor;
  if (one-time initialization token for defaultTintColor != -1)
    swift_once();
  v14 = (void *)static TextToolListItemView.defaultTintColor;
  *(_QWORD *)&v10[v13] = static TextToolListItemView.defaultTintColor;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageViewTintColor] = v14;
  v15 = v14;

  v67.receiver = v10;
  v67.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v67, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v17 = objc_allocWithZone(MEMORY[0x1E0DC3B18]);
  v18 = (char *)v16;
  v19 = objc_msgSend(v17, sel_initWithDelegate_, v18);
  objc_msgSend(v18, sel_addInteraction_, v19);

  v20 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView;
  v21 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView];
  objc_msgSend(v21, sel_setAxis_, 0);
  objc_msgSend(v21, sel_setDistribution_, 0);
  objc_msgSend(v21, sel_setAlignment_, 3);
  objc_msgSend(v21, sel_setSpacing_, *(double *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewSpacing]);
  objc_msgSend(v21, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v22 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton];
  v64 = a3;
  v66 = a2;
  if (v22)
  {
    v23 = *(char **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton];
  }
  else
  {
    v23 = v18;
    v22 = 0;
  }
  v24 = v22;
  objc_msgSend(v23, sel_addSubview_, v21);

  v25 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1DDF329D0;
  v27 = objc_msgSend(*(id *)&v18[v20], sel_topAnchor);
  v28 = objc_msgSend(v18, sel_topAnchor);
  v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  *(_QWORD *)(v26 + 32) = v29;
  v30 = objc_msgSend(*(id *)&v18[v20], sel_leadingAnchor);
  v31 = objc_msgSend(v18, sel_leadingAnchor);
  v32 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin;
  v33 = objc_msgSend(v30, sel_constraintEqualToAnchor_constant_, v31, *(double *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin]);

  *(_QWORD *)(v26 + 40) = v33;
  v34 = objc_msgSend(*(id *)&v18[v20], sel_bottomAnchor);
  v35 = objc_msgSend(v18, sel_bottomAnchor);
  v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

  *(_QWORD *)(v26 + 48) = v36;
  v37 = objc_msgSend(*(id *)&v18[v20], sel_trailingAnchor);
  v38 = objc_msgSend(v18, sel_trailingAnchor);
  v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, -*(double *)&v18[v32]);

  *(_QWORD *)(v26 + 56) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_activateConstraints_, isa);

  v41 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel;
  v42 = *(id *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel];
  v43 = (void *)MEMORY[0x1DF0E41AC](a1, v66);
  swift_bridgeObjectRelease();
  objc_msgSend(v42, sel_setText_, v43);

  v44 = *(void **)&v18[v41];
  objc_msgSend(v44, sel_setTextColor_, *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabelTextColor]);
  v45 = *MEMORY[0x1E0DC4A88];
  v46 = *MEMORY[0x1E0DC1440];
  v47 = (void *)*MEMORY[0x1E0DC4920];
  v48 = (void *)objc_opt_self();
  v49 = v44;
  v50 = v47;
  v51 = objc_msgSend(v48, sel_traitCollectionWithPreferredContentSizeCategory_, v50);
  result = (char *)objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v45, v46);
  if (result)
  {
    v53 = result;
    v54 = objc_msgSend(result, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v51);

    objc_msgSend(v49, sel_setFont_, v54);
    v55 = *(void **)&v18[v41];
    objc_msgSend(v55, sel_setAdjustsFontForContentSizeCategory_, 0);
    objc_msgSend(v55, sel_setNumberOfLines_, 0);
    objc_msgSend(v55, sel_setLineBreakMode_, 0);
    objc_msgSend(v55, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v56 = *(void **)&v18[v20];
    objc_msgSend(v56, sel_addArrangedSubview_, v55);
    v57 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageView];
    objc_msgSend(v57, sel_setImage_, v64);
    objc_msgSend(v57, sel_setTintColor_, *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageViewTintColor]);
    LODWORD(v58) = 1148846080;
    objc_msgSend(v57, sel_setContentHuggingPriority_forAxis_, 0, v58);
    LODWORD(v59) = 1148846080;
    objc_msgSend(v57, sel_setContentHuggingPriority_forAxis_, 1, v59);
    LODWORD(v60) = 1148846080;
    objc_msgSend(v57, sel_setContentCompressionResistancePriority_forAxis_, 0, v60);
    LODWORD(v61) = 1148846080;
    objc_msgSend(v57, sel_setContentCompressionResistancePriority_forAxis_, 1, v61);
    objc_msgSend(v57, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v62 = v56;
    v63 = v57;
    objc_msgSend(v62, sel_addArrangedSubview_, v63);

    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id one-time initialization function for defaultTintColor()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  static TextToolListItemView.defaultTintColor = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for TextToolListItemView()
{
  return objc_opt_self();
}

char *specialized static TextToolListItemView.newDescriptionListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  Swift::String v22;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v22._countAndFlagsBits = 0xD000000000000035;
  v22._object = (void *)0x80000001DDF4F640;
  v4._object = (void *)0x80000001DDF4F620;
  v4._countAndFlagsBits = 0xD000000000000011;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1)
    swift_once();
  v8 = (id)static TextToolListItemView.symbolConfiguration;
  v9 = (void *)MEMORY[0x1DF0E41AC](0x6269737365636361, 0xED00007974696C69);
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  v11 = v10;
  v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  v13 = v21;
  if (v21)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x1E0C80A78](v14, v14);
    v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddStickerListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  Swift::String v22;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v22._object = (void *)0x80000001DDF4F680;
  v4._countAndFlagsBits = 0x6369745320646441;
  v4._object = (void *)0xEB0000000072656BLL;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0xD000000000000034;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1)
    swift_once();
  v8 = (id)static TextToolListItemView.symbolConfiguration;
  v9 = (void *)MEMORY[0x1DF0E41AC](0x72656B63697473, 0xE700000000000000);
  v10 = objc_msgSend((id)objc_opt_self(), sel__systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  v11 = v10;
  v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  v13 = v21;
  if (v21)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x1E0C80A78](v14, v14);
    v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddTextBoxListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  Swift::String v22;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v22._countAndFlagsBits = 0xD000000000000035;
  v22._object = (void *)0x80000001DDF4F830;
  v4._countAndFlagsBits = 0x7478655420646441;
  v4._object = (void *)0xE800000000000000;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1)
    swift_once();
  v8 = (id)static TextToolListItemView.symbolConfiguration;
  v9 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF4F870);
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  v11 = v10;
  v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  v13 = v21;
  if (v21)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x1E0C80A78](v14, v14);
    v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAutoFillFormListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  Swift::String v22;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v22._countAndFlagsBits = 0xD00000000000002ELL;
  v22._object = (void *)0x80000001DDF4F6C0;
  v4._countAndFlagsBits = 0x6C6C69466F747541;
  v4._object = (void *)0xED00006D726F4620;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1)
    swift_once();
  v8 = (id)static TextToolListItemView.symbolConfiguration;
  v9 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000021, 0x80000001DDF4F6F0);
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  v11 = v10;
  v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  v13 = v21;
  if (v21)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x1E0C80A78](v14, v14);
    v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddSignatureListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  Swift::String v22;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v22._object = (void *)0x80000001DDF4F7F0;
  v4._countAndFlagsBits = 0x6E67695320646441;
  v4._object = (void *)0xED00006572757461;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0xD000000000000036;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1)
    swift_once();
  v8 = (id)static TextToolListItemView.symbolConfiguration;
  v9 = (void *)MEMORY[0x1DF0E41AC](0x727574616E676973, 0xE900000000000065);
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  v11 = v10;
  v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  v13 = v21;
  if (v21)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x1E0C80A78](v14, v14);
    v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddShapeListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  Swift::String v22;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v22._countAndFlagsBits = 0xD000000000000032;
  v22._object = (void *)0x80000001DDF4F720;
  v4._countAndFlagsBits = 0x7061685320646441;
  v4._object = (void *)0xE900000000000065;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1)
    swift_once();
  v8 = (id)static TextToolListItemView.symbolConfiguration;
  v9 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000010, 0x80000001DDF4F760);
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  v11 = v10;
  v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  v13 = v21;
  if (v21)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x1E0C80A78](v14, v14);
    v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newOpacityListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  Swift::String v22;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v22._countAndFlagsBits = 0xD000000000000035;
  v22._object = (void *)0x80000001DDF4F780;
  v4._countAndFlagsBits = 0x7974696361704FLL;
  v4._object = (void *)0xE700000000000000;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1)
    swift_once();
  v8 = (id)static TextToolListItemView.symbolConfiguration;
  v9 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4F7C0);
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  v11 = v10;
  v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  v13 = v21;
  if (v21)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x1E0C80A78](v14, v14);
    v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

void specialized TextToolListItemView.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  v2 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  v3 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin] = 0x4030000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewSpacing] = 0x4030000000000000;
  v4 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabelTextColor;
  if (one-time initialization token for defaultTintColor != -1)
    swift_once();
  v5 = (void *)static TextToolListItemView.defaultTintColor;
  *(_QWORD *)&v0[v4] = static TextToolListItemView.defaultTintColor;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageViewTintColor] = v5;
  v6 = v5;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized TextToolListItemView.pointerInteraction(_:styleFor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UIPointerEffect();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (uint64_t *)((char *)&v25 - v13);
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_, v1);
  v16 = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UITargetedPreview, preferredTintMode: UIPointerEffect.TintMode, prefersShadow: Bool, prefersScaledContent: Bool));
  v17 = (char *)v14 + v16[12];
  v18 = v16[16];
  v19 = v16[20];
  *v14 = v15;
  v20 = *MEMORY[0x1E0DC1E50];
  v21 = type metadata accessor for UIPointerEffect.TintMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v17, v20, v21);
  *((_BYTE *)v14 + v19) = 0;
  *((_BYTE *)v14 + v18) = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v14, *MEMORY[0x1E0DC1E38], v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v10, v14, v6);
  v22 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v5, 1, 1, v22);
  v23 = UIPointerStyle.init(effect:shape:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v14, v6);
  return v23;
}

void UIScrollView.scrollTo(_:keyboardFrame:animationDuration:animationCurve:)(uint64_t a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10)
{
  void *v17;
  void *v18;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  char *v44;
  id v45;
  void *v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double x;
  double y;
  double width;
  double height;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  double v70;
  void *v71;
  void (*v72)(char *, uint64_t);
  double *v73;
  double v74;
  double v75;
  void *v76;
  id v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  double v81;
  double v82;
  void *v83;
  id v84;
  uint64_t v85;
  double v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  double v90;
  double v91;
  double v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t aBlock;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  void *v101;
  id (*v102)();
  double *v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;

  v18 = v17;
  v94 = a1;
  v97 = a2;
  v26 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchQoS();
  v95 = *(_QWORD *)(v31 - 8);
  v96 = v31;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for DispatchTime();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)&v85 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v40, v41);
  v44 = (char *)&v85 - v43;
  if (objc_msgSend(v18, sel_isScrollEnabled, v42))
  {
    v45 = objc_msgSend(v18, sel_superview);
    if (v45)
    {
      v46 = v45;
      v87 = a3;
      v88 = a4;
      v89 = a5;
      v86 = a10;
      v85 = v27;
      objc_msgSend(v18, sel_frame);
      objc_msgSend(v46, sel_convertRect_toView_, 0);
      v48 = v47;
      v50 = v49;
      v52 = v51;
      v54 = v53;

      v104.origin.x = v48;
      v104.origin.y = v50;
      v104.size.width = v52;
      v104.size.height = v54;
      v55 = -(a7 - CGRectGetMaxY(v104));
      objc_msgSend(v18, sel__contentScrollInset);
      v91 = v56;
      v92 = v57;
      v93 = v58;
      objc_msgSend(v18, sel_contentInset);
      v59 = 0.0;
      if (v60 < v55)
      {
        objc_msgSend(v18, sel_contentInset, 0.0);
        v59 = v55 - v61;
      }
      v90 = v59;
      objc_msgSend(v18, sel_bounds);
      objc_msgSend(v18, sel_convertRect_toView_, 0);
      x = v105.origin.x;
      y = v105.origin.y;
      width = v105.size.width;
      height = v105.size.height;
      v110.origin.x = a6;
      v110.origin.y = a7;
      v110.size.width = a8;
      v110.size.height = a9;
      if (!CGRectIntersectsRect(v105, v110))
        goto LABEL_8;
      v106.origin.x = x;
      v106.origin.y = y;
      v106.size.width = width;
      v106.size.height = height;
      v111.origin.x = a6;
      v111.origin.y = a7;
      v111.size.width = a8;
      v111.size.height = a9;
      v107 = CGRectIntersection(v106, v111);
      CGRectGetHeight(v107);
      v108.origin.x = UIEdgeInsetsInsetRect(x, y, width, height, 0.0, 0.0);
      v112.origin.x = v97;
      v112.origin.y = v87;
      v112.size.width = v88;
      v112.size.height = v89;
      if (CGRectContainsRect(v108, v112)
        || (objc_msgSend(v18, sel_convertRect_fromView_, 0, v97, v87, v88, v89),
            v66 = v109.origin.x,
            v67 = v109.origin.y,
            v68 = v109.size.width,
            v69 = v109.size.height,
            CGRectIsNull(v109)))
      {
LABEL_8:
        v70 = v90;
        if (v90 <= 0.0)
        {
          objc_msgSend(v18, sel__setContentScrollInset_, v91, v92, v90, v93);
        }
        else
        {
          type metadata accessor for OS_dispatch_queue();
          v71 = (void *)static OS_dispatch_queue.main.getter();
          static DispatchTime.now()();
          MEMORY[0x1DF0E26A0](v39, v86);
          v72 = *(void (**)(char *, uint64_t))(v36 + 8);
          v72(v39, v35);
          v73 = (double *)swift_allocObject();
          *((_QWORD *)v73 + 2) = v18;
          v74 = v92;
          v73[3] = v91;
          v73[4] = v74;
          v75 = v93;
          v73[5] = v70;
          v73[6] = v75;
          v102 = partial apply for specialized closure #1 in UIScrollView.scrollTo(_:keyboardFrame:animationDuration:animationCurve:);
          v103 = v73;
          aBlock = MEMORY[0x1E0C809B0];
          v99 = 1107296256;
          v100 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          v101 = &block_descriptor_11;
          v76 = _Block_copy(&aBlock);
          v77 = v18;
          swift_release();
          static DispatchQoS.unspecified.getter();
          aBlock = MEMORY[0x1E0DEE9D8];
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
          dispatch thunk of SetAlgebra.init<A>(_:)();
          MEMORY[0x1DF0E4884](v44, v34, v30, v76);
          _Block_release(v76);

          (*(void (**)(char *, uint64_t))(v85 + 8))(v30, v26);
          (*(void (**)(char *, uint64_t))(v95 + 8))(v34, v96);
          v72(v44, v35);
        }
      }
      else
      {
        if ((unint64_t)(v94 - 1) >= 3)
          v78 = 4;
        else
          v78 = ((v94 - 1) << 16) + 65540;
        v79 = (void *)objc_opt_self();
        v80 = swift_allocObject();
        *(_QWORD *)(v80 + 16) = v18;
        v81 = v92;
        *(double *)(v80 + 24) = v91;
        *(double *)(v80 + 32) = v81;
        v82 = v93;
        *(double *)(v80 + 40) = v90;
        *(double *)(v80 + 48) = v82;
        *(CGFloat *)(v80 + 56) = v66;
        *(CGFloat *)(v80 + 64) = v67;
        *(CGFloat *)(v80 + 72) = v68;
        *(CGFloat *)(v80 + 80) = v69;
        v102 = partial apply for closure #1 in UIScrollView.animateScroll(to:insets:animationDuration:animationCurve:);
        v103 = (double *)v80;
        aBlock = MEMORY[0x1E0C809B0];
        v99 = 1107296256;
        v100 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v101 = &block_descriptor_6_1;
        v83 = _Block_copy(&aBlock);
        v84 = v18;
        swift_release();
        objc_msgSend(v79, sel_animateWithDuration_delay_options_animations_completion_, v78, v83, 0, v86, 0.0);
        _Block_release(v83);
      }
    }
  }
}

uint64_t sub_1DDBC5018()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for specialized closure #1 in UIScrollView.scrollTo(_:keyboardFrame:animationDuration:animationCurve:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel__setContentScrollInset_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t sub_1DDBC50B4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in UIScrollView.animateScroll(to:insets:animationDuration:animationCurve:)()
{
  uint64_t v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v1 = *(void **)(v0 + 16);
  v2 = *(double *)(v0 + 56);
  v3 = *(double *)(v0 + 64);
  v4 = *(double *)(v0 + 72);
  v5 = *(double *)(v0 + 80);
  objc_msgSend(v1, sel__setContentScrollInset_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
  return objc_msgSend(v1, sel_scrollRectToVisible_animated_, 0, v2, v3, v4, v5);
}

uint64_t FeedbackInput.donate()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v2 = type metadata accessor for FBKSInteraction.Content();
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  v3 = type metadata accessor for FBKSInteraction.FeatureDomain();
  v1[8] = v3;
  v1[9] = *(_QWORD *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v1[11] = v4;
  v1[12] = *(_QWORD *)(v4 - 8);
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD);

  v1 = v0[7];
  v3 = v0[5];
  v2 = v0[6];
  v5 = v0[3];
  v4 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[9] + 104))(v0[10], *MEMORY[0x1E0D210B0], v0[8]);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v5, v4);
  v7 = type metadata accessor for FeedbackInput();
  v6(v2, v5 + *(int *)(v7 + 20), v4);
  v8 = objc_allocWithZone((Class)type metadata accessor for FBKSDonation());
  v0[14] = FBKSDonation.init(featureDomain:bundleID:prefillQuestions:originalContent:generatedContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:)();
  v11 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0D21030] + MEMORY[0x1E0D21030]);
  v9 = (_QWORD *)swift_task_alloc();
  v0[15] = v9;
  *v9 = v0;
  v9[1] = FeedbackInput.donate();
  return v11(v0[13]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = (void *)v2[14];
    (*(void (**)(_QWORD, _QWORD))(v2[12] + 8))(v2[13], v2[11]);

  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 128);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 128);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_1DDB0F000, v5, v6, "Failed to donate feedback with error: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v10, -1, -1);
    MEMORY[0x1DF0E6558](v9, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[11] = a4;
  v5[12] = a5;
  v6 = type metadata accessor for FBKSInteraction.Content();
  v5[13] = v6;
  v5[14] = *(_QWORD *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v7 = type metadata accessor for FBKSInteraction.FeatureDomain();
  v5[17] = v7;
  v5[18] = *(_QWORD *)(v7 - 8);
  v5[19] = swift_task_alloc();
  v8 = type metadata accessor for FBKSEvaluation.Subject();
  v5[20] = v8;
  v5[21] = *(_QWORD *)(v8 - 8);
  v5[22] = swift_task_alloc();
  v9 = type metadata accessor for FBKSEvaluation.Action();
  v5[23] = v9;
  v5[24] = *(_QWORD *)(v9 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[28] = static MainActor.shared.getter();
  v5[29] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[30] = v10;
  return swift_task_switch();
}

uint64_t closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)()
{
  _QWORD *v0;
  void (*v1)(_QWORD, _QWORD, _QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);

  v1 = *(void (**)(_QWORD, _QWORD, _QWORD))(v0[24] + 104);
  v1(v0[27], *MEMORY[0x1E0D21040], v0[23]);
  lazy protocol witness table accessor for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v28 = v1;
  if (v0[2] == v0[4] && v0[3] == v0[5])
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v4 = v0[26];
  v3 = v0[27];
  v5 = v0[23];
  v6 = v0[24];
  v7 = v0[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v26(v3, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v7, v5);
  if ((v2 & 1) != 0)
  {
    v8 = v26;
  }
  else
  {
    v28(v0[25], *MEMORY[0x1E0D21050], v0[23]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v0[6] != v0[8] || v0[7] != v0[9])
      _stringCompareWithSmolCheck(_:_:expecting:)();
    v9 = v0[25];
    v10 = v0[23];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26(v9, v10);
    v8 = v26;
  }
  v11 = (uint64_t *)v0[22];
  v12 = v0[19];
  v25 = v0[21];
  v27 = v0[20];
  v14 = v0[17];
  v13 = v0[18];
  v16 = v0[15];
  v15 = v0[16];
  v18 = v0[13];
  v17 = v0[14];
  v19 = v0[12];
  v8(v0[26], v0[23]);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, *MEMORY[0x1E0D210B0], v14);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v20(v15, v19, v18);
  v21 = type metadata accessor for FeedbackInput();
  v20(v16, v19 + *(int *)(v21 + 20), v18);
  v22 = objc_allocWithZone((Class)type metadata accessor for FBKSDonation());
  *v11 = FBKSDonation.init(featureDomain:bundleID:prefillQuestions:originalContent:generatedContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v25 + 104))(v11, *MEMORY[0x1E0D21088], v27);
  v23 = (_QWORD *)swift_task_alloc();
  v0[31] = v23;
  *v23 = v0;
  v23[1] = closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:);
  return FBKSEvaluation.Subject._remoteEvaluate(action:showFeedbackForm:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;

  swift_release();
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 256);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 256);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 80) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_1DDB0F000, v5, v6, "_remoteEvaluate failed with error: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v10, -1, -1);
    MEMORY[0x1DF0E6558](v9, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FeedbackManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeedbackManager()
{
  return objc_opt_self();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance FeedbackManager@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t specialized FeedbackManager.feedbackImageName(action:hasResponse:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t, __n128);
  int v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint8_t *v30;
  uint64_t v31[3];

  v4 = type metadata accessor for FBKSEvaluation.Action();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v31[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v31[-1] - v11;
  if ((a2 & 1) != 0)
    v14 = 0x6C6C69662ELL;
  else
    v14 = 0;
  if ((a2 & 1) != 0)
    v15 = (void *)0xE500000000000000;
  else
    v15 = (void *)0xE000000000000000;
  v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v16((char *)&v31[-1] - v11, a1, v4, v12);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v13, v4);
  if (v17 == *MEMORY[0x1E0D21060])
  {
    strcpy((char *)v31, "hand.thumbsup");
    HIWORD(v31[1]) = -4864;
LABEL_14:
    v20._countAndFlagsBits = v14;
    v20._object = v15;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    return v31[0];
  }
  if (v17 == *MEMORY[0x1E0D21040])
  {
    v31[0] = 0;
    v31[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v18 = 0x7568742E646E6168;
    v19 = 0xEF6E776F6473626DLL;
LABEL_13:
    v31[0] = v18;
    v31[1] = v19;
    goto LABEL_14;
  }
  if (v17 == *MEMORY[0x1E0D21050])
  {
    v31[0] = 0;
    v31[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v18 = 0xD000000000000016;
    v19 = 0x80000001DDF4F900;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)generativeLogger);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v8, a1, v4);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    *(_DWORD *)v25 = 136315138;
    v30 = v25 + 4;
    v31[0] = v26;
    v27 = FBKSEvaluation.Action.description.getter();
    v31[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v8, v4);
    _os_log_impl(&dword_1DDB0F000, v23, v24, "feedbackImageName received invalid action %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v26, -1, -1);
    MEMORY[0x1DF0E6558](v25, -1, -1);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v8, v4);
  }

  v29(v13, v4);
  return 0;
}

uint64_t specialized FeedbackManager.sendFeedback(action:feedbackInput:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = *(_QWORD *)(type metadata accessor for FeedbackInput() - 8);
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 + 64);
  v2[6] = swift_task_alloc();
  v4 = type metadata accessor for FBKSEvaluation.Action();
  v2[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[8] = v5;
  v2[9] = *(_QWORD *)(v5 + 64);
  v2[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for MainActor();
  v2[13] = static MainActor.shared.getter();
  v2[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[15] = v6;
  return swift_task_switch();
}

uint64_t specialized FeedbackManager.sendFeedback(action:feedbackInput:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v21 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v1, 1, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v8, v3);
  outlined init with copy of FeedbackInput(v6, v5);
  v10 = static MainActor.shared.getter();
  v11 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v12 = (v21 + *(unsigned __int8 *)(v7 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v13 = swift_allocObject();
  v14 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v14;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v11, v2, v3);
  outlined init with take of FeedbackInput(v5, v13 + v12);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:), v13);
  swift_release();
  if (os_variant_has_internal_ui())
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)generativeLogger);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1DDB0F000, v16, v17, "Donating image data for feedback", v18, 2u);
      MEMORY[0x1DF0E6558](v18, -1, -1);
    }

    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v19;
    *v19 = v0;
    v19[1] = specialized FeedbackManager.sendFeedback(action:feedbackInput:);
    return FeedbackInput.donate()();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for FeedbackInput()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FeedbackInput;
  if (!type metadata singleton initialization cache for FeedbackInput)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of FeedbackInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedbackInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDBC6588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t);

  v1 = type metadata accessor for FBKSEvaluation.Action();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for FeedbackInput();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v8 = type metadata accessor for FBKSInteraction.Content();
  v9 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v0 + v7, v8);
  v9(v0 + v7 + *(int *)(v5 + 20), v8);
  return swift_deallocObject();
}

uint64_t outlined init with take of FeedbackInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedbackInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for FBKSEvaluation.Action() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeedbackInput() - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)(a1, v9, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action;
  if (!lazy protocol witness table cache variable for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action)
  {
    v1 = type metadata accessor for FBKSEvaluation.Action();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D21078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FeedbackInput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for FBKSInteraction.Content();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t destroy for FeedbackInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for FBKSInteraction.Content();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for FeedbackInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for FBKSInteraction.Content();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for FeedbackInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for FBKSInteraction.Content();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for FeedbackInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for FBKSInteraction.Content();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for FeedbackInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for FBKSInteraction.Content();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedbackInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDBC6A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FBKSInteraction.Content();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FeedbackInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDBC6AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FBKSInteraction.Content();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for FeedbackInput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FBKSInteraction.Content();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void CanvasElement.flags.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

{
  CanvasElement.flags.getter(a1);
}

__C::CGRect __swiftcall CanvasElement.renderFrame(in:)(__C::CGRect_optional *in)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __C::CGRect result;

  v3 = specialized CanvasElement.renderFrame(in:)(v1, v2);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __C::CGRect result;

  v3 = specialized CanvasElement.renderFrame(in:)(v1, v2);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGFloat CanvasElement.coordinateSpace.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  double MidX;
  double MidY;
  CGFloat v16;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGAffineTransform v38;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v41;
  CGRect v42;

  v6 = (*(double (**)(void))(*(_QWORD *)(a2 + 8) + 8))();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v36 = v8 - v12 * 0.0;
  v37 = v6 - v10 * 0.0;
  v41.origin.x = v6;
  v41.origin.y = v8;
  v41.size.width = v10;
  v34 = v10;
  v35 = v12;
  v41.size.height = v12;
  MidX = CGRectGetMidX(v41);
  v42.origin.x = v6;
  v42.origin.y = v8;
  v42.size.width = v10;
  v42.size.height = v12;
  MidY = CGRectGetMidY(v42);
  CGAffineTransformMakeRotation(&t1, v13);
  v30 = *(_OWORD *)&t1.c;
  v32 = *(_OWORD *)&t1.a;
  v16 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v16);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v23 = t1.tx;
  v24 = t1.ty;
  *(_OWORD *)&t2.a = v32;
  *(_OWORD *)&t2.c = v30;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v38, &t1, &t2);
  v31 = *(_OWORD *)&v38.c;
  v33 = *(_OWORD *)&v38.a;
  v25 = v38.tx;
  v26 = v38.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v23;
  t1.ty = v24;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v33;
  *(_OWORD *)&t1.c = v31;
  t1.tx = v25;
  t1.ty = v26;
  CGAffineTransformConcat(&v38, &t1, &t2);
  t1.a = v34;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = v35;
  t1.tx = v37;
  t1.ty = v36;
  t2 = v38;
  CGAffineTransformConcat(&v38, &t1, &t2);
  result = v38.a;
  v28 = *(_OWORD *)&v38.c;
  v29 = *(_OWORD *)&v38.tx;
  *a3 = *(_OWORD *)&v38.a;
  a3[1] = v28;
  a3[2] = v29;
  return result;
}

void CanvasElement.coordinateSpace.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double (*v5)(uint64_t, uint64_t);
  double v6;
  double v7;
  double v8;
  __int128 v9;
  __n128 v10;
  double v11;
  double v12;
  double v13;
  int8x16_t v14;
  float64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  double v18;
  double v19;
  unint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float64x2_t v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double v27;
  __int128 v28;
  __n128 v29;
  __n128 rect;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  CGRect v36;
  CGRect v37;

  v5 = *(double (**)(uint64_t, uint64_t))(a3 + 32);
  v6 = v5(a2, a3);
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v31, v6);
  v8 = v31;
  v7 = v32;
  *(_QWORD *)&v9 = v33;
  v10.n128_u64[0] = v34;
  v11 = v35;
  v12 = v31;
  v13 = v32;
  v28 = v9;
  rect = v10;
  if (fabs(CGRectGetWidth(*(CGRect *)(&v9 - 1))) >= 1.0)
  {
    v17 = (int8x16_t)v28;
  }
  else
  {
    v36.origin.x = v8;
    v36.origin.y = v7;
    *(_QWORD *)&v36.size.width = v28;
    *(_QWORD *)&v36.size.height = rect.n128_u64[0];
    *(double *)v14.i64 = CGRectGetWidth(v36);
    v15.f64[0] = NAN;
    v15.f64[1] = NAN;
    v16.i64[0] = 1.0;
    v17 = vbslq_s8((int8x16_t)vnegq_f64(v15), v16, v14);
  }
  v18 = v8;
  v19 = v7;
  v29 = (__n128)v17;
  v20 = rect.n128_u64[0];
  if (fabs(CGRectGetHeight(*(CGRect *)(&v17 - 1))) < 1.0)
  {
    v37.origin.x = v8;
    v37.origin.y = v7;
    *(_QWORD *)&v37.size.width = v29.n128_u64[0];
    *(_QWORD *)&v37.size.height = rect.n128_u64[0];
    *(double *)v21.i64 = CGRectGetHeight(v37);
    v22.i64[0] = 1.0;
    v23.f64[0] = NAN;
    v23.f64[1] = NAN;
    rect = (__n128)vbslq_s8((int8x16_t)vnegq_f64(v23), v22, v21);
  }
  v24 = (*(double (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a2);
  if (!CGRect.almostEqual(_:threshold:)(v8, v7, v29.n128_f64[0], rect.n128_f64[0], 0.1, v24, v25, v26, v27))
    (*(void (**)(uint64_t, uint64_t, double, double, __n128, __n128))(a3 + 16))(a2, a3, v8, v7, v29, rect);
  if (vabdd_f64(v5(a2, a3), v11) > 0.00174532925)
    (*(void (**)(uint64_t, uint64_t, double))(a3 + 40))(a2, a3, v11);
}

uint64_t (*CanvasElement.flags.modify(_QWORD *a1))()
{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Signature()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t CanvasElement.indexableTextContent<A>(in:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t Capsule<>.sharedCanvasElement.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v17[2];

  v17[1] = a3;
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 88))(v9, v10, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
}

void protocol witness for CanvasElement.renderFrame(in:) in conformance PDFAnnotationElement()
{
  double MidX;
  double MidY;
  CGFloat v2;
  CGFloat v3;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGAffineTransform v18;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v21.origin.x = 0.0;
  v21.origin.y = 0.0;
  v21.size.width = 1.0;
  v21.size.height = 1.0;
  MidX = CGRectGetMidX(v21);
  v22.origin.x = 0.0;
  v22.origin.y = 0.0;
  v22.size.width = 1.0;
  v22.size.height = 1.0;
  MidY = CGRectGetMidY(v22);
  CGAffineTransformMakeRotation(&t1, 0.0);
  v14 = *(_OWORD *)&t1.c;
  v16 = *(_OWORD *)&t1.a;
  v2 = -MidX;
  v3 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, v2, v3);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v10 = t1.tx;
  v11 = t1.ty;
  *(_OWORD *)&t2.a = v16;
  *(_OWORD *)&t2.c = v14;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v18, &t1, &t2);
  v15 = *(_OWORD *)&v18.c;
  v17 = *(_OWORD *)&v18.a;
  v12 = v18.tx;
  v13 = v18.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v10;
  t1.ty = v11;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v17;
  *(_OWORD *)&t1.c = v15;
  t1.tx = v12;
  t1.ty = v13;
  CGAffineTransformConcat(&v18, &t1, &t2);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  t2 = v18;
  CGAffineTransformConcat(&v18, &t1, &t2);
  t1 = v18;
  v23.origin.x = 0.0;
  v23.origin.y = 0.0;
  v23.size.width = 1.0;
  v23.size.height = 1.0;
  CGRectApplyAffineTransform(v23, &t1);
}

BOOL protocol witness for CanvasElement.apply(_:) in conformance PDFAnnotationElement(double *a1)
{
  double MidX;
  double MidY;
  CGFloat v3;
  CGFloat v4;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGFloat v20;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  CGAffineTransform v24;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v27;
  CGRect v28;

  v22 = *((_OWORD *)a1 + 1);
  v23 = *(_OWORD *)a1;
  v20 = a1[5];
  v21 = a1[4];
  v27.origin.x = 0.0;
  v27.origin.y = 0.0;
  v27.size.width = 1.0;
  v27.size.height = 1.0;
  MidX = CGRectGetMidX(v27);
  v28.origin.x = 0.0;
  v28.origin.y = 0.0;
  v28.size.width = 1.0;
  v28.size.height = 1.0;
  MidY = CGRectGetMidY(v28);
  CGAffineTransformMakeRotation(&t1, 0.0);
  v16 = *(_OWORD *)&t1.c;
  v18 = *(_OWORD *)&t1.a;
  v3 = -MidX;
  v4 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, v3, v4);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v11 = t1.tx;
  v12 = t1.ty;
  *(_OWORD *)&t2.a = v18;
  *(_OWORD *)&t2.c = v16;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v24, &t1, &t2);
  v17 = *(_OWORD *)&v24.c;
  v19 = *(_OWORD *)&v24.a;
  v13 = v24.tx;
  v14 = v24.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v11;
  t1.ty = v12;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v19;
  *(_OWORD *)&t1.c = v17;
  t1.tx = v13;
  t1.ty = v14;
  CGAffineTransformConcat(&v24, &t1, &t2);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  t2 = v24;
  CGAffineTransformConcat(&v24, &t1, &t2);
  t1 = v24;
  *(_OWORD *)&t2.a = v23;
  *(_OWORD *)&t2.c = v22;
  t2.tx = v21;
  t2.ty = v20;
  CGAffineTransformConcat(&v24, &t1, &t2);
  t1 = v24;
  return specialized CanvasElement.coordinateSpace.setter();
}

Swift::Void __swiftcall CanvasElement.apply(_:)(CGAffineTransform *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CGFloat tx;
  CGFloat ty;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v9;
  CGAffineTransform t2;
  CGAffineTransform v11;
  CGAffineTransform t1;

  v3 = v2;
  v4 = v1;
  v7 = *(_OWORD *)&a1->c;
  v8 = *(_OWORD *)&a1->a;
  tx = a1->tx;
  ty = a1->ty;
  CanvasElement.coordinateSpace.getter(v1, v2, &v11);
  t1 = v11;
  *(_OWORD *)&t2.a = v8;
  *(_OWORD *)&t2.c = v7;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v9, &t1, &t2);
  t1 = v9;
  CanvasElement.coordinateSpace.setter((uint64_t)&t1, v4, v3);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance GraphElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance GraphElement(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

uint64_t SharedTagged_9<>.graph.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged3.getter();
}

void (*CanvasElement.flags.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CanvasElement.flags.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t CanvasElement.isHidden.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 64))(&v3);
  return v3 & 1;
}

uint64_t CanvasElement.isHidden.setter(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_BYTE *);
  unint64_t *v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  unint64_t v6;
  _BYTE v8[32];

  v3 = *(uint64_t (**)(_BYTE *))(a3 + 80);
  if ((a1 & 1) != 0)
  {
    v5 = (uint64_t (*)(_BYTE *, _QWORD))v3(v8);
    if ((*v4 & 1) == 0)
    {
      v6 = *v4 | 1;
LABEL_6:
      *v4 = v6;
    }
  }
  else
  {
    v5 = (uint64_t (*)(_BYTE *, _QWORD))v3(v8);
    if ((*v4 & 1) != 0)
    {
      v6 = *v4 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_6;
    }
  }
  return v5(v8, 0);
}

uint64_t (*CanvasElement.isHidden.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v6, a2, a3);
  *(_BYTE *)(a1 + 24) = v6 & 1;
  return CanvasElement.isHidden.modify;
}

uint64_t CanvasElement.isHidden.modify(uint64_t a1)
{
  return CanvasElement.isHidden.setter(*(_BYTE *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t CanvasElement.renderFrame.getter(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2];
  char v4;

  memset(v3, 0, sizeof(v3));
  v4 = 1;
  return (*(uint64_t (**)(_OWORD *, uint64_t))(a2 + 112))(v3, a1);
}

void (*CanvasElement.coordinateSpace.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0xA8uLL);
  *a1 = v7;
  v7[19] = a3;
  v7[20] = v3;
  v7[18] = a2;
  CanvasElement.coordinateSpace.getter(a2, a3, (_OWORD *)v7 + 6);
  return CanvasElement.coordinateSpace.modify;
}

void CanvasElement.coordinateSpace.modify(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;

  v2 = *(_OWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 152);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  if ((a2 & 1) != 0)
    v5 = *(_OWORD **)a1;
  else
    v5 = (_OWORD *)(*(_QWORD *)a1 + 48);
  v6 = v2[7];
  *v5 = v2[6];
  v5[1] = v6;
  v5[2] = v2[8];
  CanvasElement.coordinateSpace.setter((uint64_t)v5, v4, v3);
  free(v2);
}

uint64_t ContainerCanvasElement.pdfContentsBounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t ContainerCanvasElement.ensureHasDrawing<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v6, v7);
  v34 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v9, v10);
  v33 = (uint64_t)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v30 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v30 - v23;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 48))(a2, a3, v22);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v32 = *(_QWORD *)(v25 - 8);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v24, 1, v25);
  result = outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v24);
  if (v26 == 1)
  {
    v28 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    v35 = *MEMORY[0x1E0C9D628];
    v36 = v28;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    CRRegister.init(wrappedValue:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    v30[1] = v3;
    v31 = a2;
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
    CROrderedSet.init()();
    *(_QWORD *)&v15[*(int *)(v9 + 24)] = MEMORY[0x1E0DEE9E0];
    outlined init with copy of PKDrawingStruct((uint64_t)v15, v33);
    v29 = type metadata accessor for CRKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v34, 1, 1, v29);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    swift_retain();
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v25);
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 56))(v19, v31, a3);
    return outlined destroy of PKDrawingStruct((uint64_t)v15);
  }
  return result;
}

PaperKit::TaggedCanvasElement::Enum_optional __swiftcall TaggedCanvasElement.Enum.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 9;
  if ((unint64_t)rawValue < 9)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::TaggedCanvasElement::Enum_optional)rawValue;
}

uint64_t TaggedCanvasElement.Enum.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

PaperKit::TaggedCanvasElement::Enum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TaggedCanvasElement.Enum(Swift::Int *a1)
{
  return TaggedCanvasElement.Enum.init(rawValue:)(*a1);
}

uint64_t SharedTagged_9<>.paper.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged1.getter();
}

uint64_t SharedTagged_9<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged2.getter();
}

uint64_t SharedTagged_9<>.textBox.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged4.getter();
}

uint64_t SharedTagged_9<>.link.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged5.getter();
}

uint64_t SharedTagged_9<>.shape.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged6.getter();
}

uint64_t SharedTagged_9<>.signature.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged7.getter();
}

uint64_t SharedTagged_9<>.documentPage.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged8.getter();
}

uint64_t SharedTagged_9<>.pdfAnnotation.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged9.getter();
}

uint64_t SharedTagged_9<>.init(_:)(uint64_t a1)
{
  return SharedTagged_9<>.init(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, (void (*)(uint64_t *__return_ptr))MEMORY[0x1E0D11E58], (void (*)(uint64_t))MEMORY[0x1E0D11E50], (void (*)(uint64_t *, char *, ValueMetadata *, unint64_t))MEMORY[0x1E0D12310]);
}

uint64_t WeakTagged_9<>.paper.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged1.getter();
}

uint64_t WeakTagged_9<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged2.getter();
}

uint64_t WeakTagged_9<>.graph.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged3.getter();
}

uint64_t WeakTagged_9<>.textBox.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged4.getter();
}

uint64_t WeakTagged_9<>.link.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged5.getter();
}

uint64_t WeakTagged_9<>.shape.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged6.getter();
}

uint64_t WeakTagged_9<>.signature.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged7.getter();
}

uint64_t WeakTagged_9<>.documentPage.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged8.getter();
}

uint64_t WeakTagged_9<>.pdfAnnotation.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged9.getter();
}

uint64_t WeakTagged_9<>.init(_:)(uint64_t a1)
{
  return SharedTagged_9<>.init(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, (void (*)(uint64_t *__return_ptr))MEMORY[0x1E0D12298], (void (*)(uint64_t))MEMORY[0x1E0D12288], (void (*)(uint64_t *, char *, ValueMetadata *, unint64_t))MEMORY[0x1E0D11EC0]);
}

uint64_t SharedTagged_9<>.init(_:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr), void (*a4)(uint64_t), void (*a5)(uint64_t *, char *, ValueMetadata *, unint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(a2);
  a3(&v19);
  v17 = v19;
  v18 = v20;
  a4(v14);
  v15 = lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  a5(&v17, v13, &type metadata for TaggedCanvasElement, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance PaperDocumentPage(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Image(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Paper(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Link(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(CGAffineTransform *__return_ptr))
{
  double result;
  CGAffineTransform v5;
  CGAffineTransform v6;
  CGRect v7;

  a4(&v6);
  v5 = v6;
  v7.origin.x = 0.0;
  v7.origin.y = 0.0;
  v7.size.width = 1.0;
  v7.size.height = 1.0;
  *(_QWORD *)&result = (unint64_t)CGRectApplyAffineTransform(v7, &v5);
  return result;
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance UnknownCanvasElement(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance GraphElement(double *a1, uint64_t a2, uint64_t a3, void (*a4)(CGAffineTransform *__return_ptr), uint64_t (*a5)(CGAffineTransform *))
{
  CGFloat v6;
  CGFloat v7;
  __int128 v9;
  __int128 v10;
  CGAffineTransform v11;
  CGAffineTransform t2;
  CGAffineTransform v13;
  CGAffineTransform t1;

  v9 = *((_OWORD *)a1 + 1);
  v10 = *(_OWORD *)a1;
  v6 = a1[4];
  v7 = a1[5];
  a4(&v13);
  t1 = v13;
  *(_OWORD *)&t2.a = v10;
  *(_OWORD *)&t2.c = v9;
  t2.tx = v6;
  t2.ty = v7;
  CGAffineTransformConcat(&v11, &t1, &t2);
  t1 = v11;
  return a5(&t1);
}

BOOL specialized ContainerCanvasElement.hasMarkup(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v7 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  v39 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v35, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v42 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v24, a1, a3, v22);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v44 == v43)
  {
    v26 = v19;
    v27 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    v28 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v40) == 1)
    {
      outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v16);
      v29 = 0;
    }
    else
    {
      v30 = v16;
      v31 = v40;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v26, v30, v40);
      Ref.subscript.getter();
      v32 = v36;
      v33 = v38;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v36, &v12[*(int *)(v35 + 20)], v38);
      outlined destroy of PKDrawingStruct((uint64_t)v12);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC8]);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      v29 = v44 != v43;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v33);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v31);
    }
  }
  else
  {
    v29 = 1;
    v28 = a3;
  }
  (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v28);
  return v29;
}

double specialized CanvasElement.renderFrame(in:)(uint64_t a1, uint64_t a2)
{
  double result;
  CGAffineTransform v3;
  CGAffineTransform v4;
  CGRect v5;

  CanvasElement.coordinateSpace.getter(a1, a2, &v4);
  v3 = v4;
  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  v5.size.width = 1.0;
  v5.size.height = 1.0;
  *(_QWORD *)&result = (unint64_t)CGRectApplyAffineTransform(v5, &v3);
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum;
  if (!lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedCanvasElement.Enum, &type metadata for TaggedCanvasElement.Enum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum;
  if (!lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedCanvasElement.Enum, &type metadata for TaggedCanvasElement.Enum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum);
  }
  return result;
}

uint64_t associated type witness table accessor for Tagged_9.Type1 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t associated type witness table accessor for Tagged_9.Type3 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

uint64_t associated type witness table accessor for Tagged_9.Type4 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t associated type witness table accessor for Tagged_9.Type5 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
}

uint64_t associated type witness table accessor for Tagged_9.Type7 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

uint64_t associated type witness table accessor for Tagged_9.Type8 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

uint64_t associated type witness table accessor for Tagged_9.Type9 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
}

uint64_t associated type witness table accessor for Tagged_9.Unknown : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

void sub_1DDBC854C(_QWORD *a1@<X8>)
{
  CanvasElement.flags.getter(a1);
}

uint64_t sub_1DDBC8564()
{
  return 16;
}

__n128 sub_1DDBC8570(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1DDBC857C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CanvasElement.isHidden.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1DDBC85B0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasElement.isHidden.setter(*a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_1DDBC85DC()
{
  return 16;
}

__n128 sub_1DDBC85E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1DDBC85F4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  CanvasElement.coordinateSpace.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), v6);
  v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

void sub_1DDBC863C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v7[3];

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = a1[1];
  v7[0] = *a1;
  v7[1] = v6;
  v7[2] = a1[2];
  CanvasElement.coordinateSpace.setter((uint64_t)v7, v4, v5);
}

uint64_t sub_1DDBC8680()
{
  return 16;
}

__n128 sub_1DDBC868C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of CanvasElement.frame.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CanvasElement.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CanvasElement.rotation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CanvasElement.rotation.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CanvasElement.rotation.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CanvasElement.thumbnail.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CanvasElement.flags.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CanvasElement.flags.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of CanvasElement.flags.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CanvasElement.shared(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CanvasElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, _OWORD *);
  __int128 v12;
  _OWORD v14[2];
  char v15;

  v10 = *(_BYTE *)(a4 + 32);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(a10 + 96);
  v12 = *(_OWORD *)(a4 + 16);
  v14[0] = *(_OWORD *)a4;
  v14[1] = v12;
  v15 = v10;
  return v11(a1, a2, a3, v14);
}

uint64_t dispatch thunk of CanvasElement.applyDifference<A, B>(id:in:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 104))();
}

uint64_t dispatch thunk of CanvasElement.renderFrame(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  _OWORD v7[2];
  char v8;

  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(uint64_t (**)(_OWORD *))(a3 + 112);
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v8 = v3;
  return v4(v7);
}

uint64_t dispatch thunk of CanvasElement.indexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

uint64_t dispatch thunk of CanvasElement.apply(_:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[3];

  v3 = *(uint64_t (**)(_OWORD *))(a3 + 128);
  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[2] = a1[2];
  return v3(v6);
}

uint64_t dispatch thunk of CanvasElement.finishDecode(from:assetManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of ContainerCanvasElement.bounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ContainerCanvasElement.bounds.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContainerCanvasElement.bounds.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ContainerCanvasElement.pdfContentsBounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ContainerCanvasElement.drawing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ContainerCanvasElement.drawing.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ContainerCanvasElement.drawing.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ContainerCanvasElement.subelements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ContainerCanvasElement.subelements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ContainerCanvasElement.subelements.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

ValueMetadata *type metadata accessor for TaggedCanvasElement()
{
  return &type metadata for TaggedCanvasElement;
}

uint64_t storeEnumTagSinglePayload for TaggedCanvasElement.Enum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1DDBC8858 + 4 * byte_1DDF356A5[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1DDBC888C + 4 * asc_1DDF356A0[v4]))();
}

uint64_t sub_1DDBC888C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBC8894(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDBC889CLL);
  return result;
}

uint64_t sub_1DDBC88A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDBC88B0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1DDBC88B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBC88BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaggedCanvasElement.Enum()
{
  return &type metadata for TaggedCanvasElement.Enum;
}

uint64_t outlined destroy of Ref<PKDrawingStruct>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PKDrawingStruct(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?)
                 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  result = outlined init with take of PageId?(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

id PaperKitPDFDocument.init(url:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSURL *v11;
  void *v12;
  void *v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  objc_super v24;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies] = MEMORY[0x1E0DEE9D8];
  v8 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap;
  v9 = v1;
  *(_QWORD *)&v1[v8] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  v10 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap;
  *(_QWORD *)&v9[v10] = specialized Dictionary.init(dictionaryLiteral:)(v7);

  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  v14 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v24.receiver = v9;
  v24.super_class = v14;
  v15 = objc_msgSendSuper2(&v24, sel_initWithURL_, v13);

  if (v15)
  {

    v16 = type metadata accessor for PageId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
    v17 = (char *)v15;
    v18 = specialized Array.init(repeating:count:)((uint64_t)v6, (uint64_t)objc_msgSend(v17, sel_pageCount));

    v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    v20 = (uint64_t *)&v17[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
    swift_beginAccess();
    *v20 = v18;
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  }
  return v15;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v4 + 16) = a2;
      v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?)
                     - 8);
      v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v4 + v6, &demangling cache variable for type metadata for PageId?);
      v7 = a2 - 1;
      if (a2 != 1)
      {
        v8 = *(_QWORD *)(v5 + 72);
        v9 = v4 + v8 + v6;
        do
        {
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v9, &demangling cache variable for type metadata for PageId?);
          v9 += v8;
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      v4 = MEMORY[0x1E0DEE9D8];
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for PageId?);
    return v4;
  }
  return result;
}

id PaperKitPDFDocument.init(data:)(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Class isa;
  objc_class *v14;
  id v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  objc_super v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies] = MEMORY[0x1E0DEE9D8];
  v10 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap;
  v11 = v2;
  *(_QWORD *)&v2[v10] = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v12 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap;
  *(_QWORD *)&v11[v12] = specialized Dictionary.init(dictionaryLiteral:)(v9);

  isa = Data._bridgeToObjectiveC()().super.isa;
  v14 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v22.receiver = v11;
  v22.super_class = v14;
  v15 = objc_msgSendSuper2(&v22, sel_initWithData_, isa);

  if (v15)
  {

    v16 = type metadata accessor for PageId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
    v17 = (char *)v15;
    v18 = specialized Array.init(repeating:count:)((uint64_t)v8, (uint64_t)objc_msgSend(v17, sel_pageCount));
    outlined consume of Data._Representation(a1, a2);

    v19 = (uint64_t *)&v17[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
    swift_beginAccess();
    *v19 = v18;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
  }
  return v15;
}

uint64_t PaperKitPDFDocument.copy(with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  objc_class *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  objc_super v17;

  v5 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v17.receiver = v2;
  v17.super_class = v5;
  objc_msgSendSuper2(&v17, sel_copyWithZone_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  v6 = &v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
  swift_beginAccess();
  v7 = *(_QWORD *)v6;
  v8 = (_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies);
  swift_beginAccess();
  *v8 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = &v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
  swift_beginAccess();
  v10 = *(_QWORD *)v9;
  v11 = (_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap);
  swift_beginAccess();
  *v11 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = &v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
  swift_beginAccess();
  v13 = *(_QWORD *)v12;
  v14 = (_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap);
  swift_beginAccess();
  *v14 = v13;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  a2[3] = v5;
  *a2 = v16;
  return result;
}

id PaperKitPDFDocument.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(_BYTE *, uint64_t, uint64_t);
  id result;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v14 = (char *)v27 - v13;
  if (one-time initialization token for lock != -1)
    v11 = swift_once();
  MEMORY[0x1E0C80A78](v11, v12);
  v27[-2] = v2;
  v27[-1] = a1;
  v16 = v15 + 4;
  os_unfair_lock_lock(v15 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v17, (uint64_t (*)(void))partial apply for closure #1 in PaperKitPDFDocument.subscript.getter);
  os_unfair_lock_unlock(v16);
  v18 = type metadata accessor for PageId(0);
  v19 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
  if (v19(v14, 1, v18) != 1)
  {
    v26 = (uint64_t)v14;
    return (id)outlined init with take of PKStrokeStruct(v26, a2, type metadata accessor for PageId);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PageId?);
  result = objc_msgSend(v2, sel_pageAtIndex_, a1);
  if (result)
  {
    v21 = result;
    type metadata accessor for PaperKitPDFPage(0);
    v22 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v22, (uint64_t)v8, &demangling cache variable for type metadata for PageId?);

    if (v19(v8, 1, v18) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for PageId?);
      v23 = type metadata accessor for PDFPageID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
      v24 = a2 + *(int *)(v18 + 20);
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
    }
    v26 = (uint64_t)v8;
    return (id)outlined init with take of PKStrokeStruct(v26, a2, type metadata accessor for PageId);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in PaperKitPDFDocument.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies;
  result = swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(*(_QWORD *)v11 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * a2, (uint64_t)v10, &demangling cache variable for type metadata for PageId?);
  v13 = type metadata accessor for PageId(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PageId?);
    v15 = 1;
  }
  else
  {
    outlined init with take of PKStrokeStruct((uint64_t)v10, a3, type metadata accessor for PageId);
    v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a3, v15, 1, v13);
}

uint64_t PaperKitPDFDocument.subscript.setter(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt *v54;
  char **v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t result;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::UInt *v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char v76;
  Swift::UInt *v77;
  Swift::UInt *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)();
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(_QWORD, _QWORD, _QWORD);
  uint64_t v97;

  v5 = type metadata accessor for CRKeyPath();
  v84 = *(_QWORD *)(v5 - 8);
  v85 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v83 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v88 = (uint64_t)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v91 = (char *)&v77 - v13;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v95 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90, v14);
  v80 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v77 = (Swift::UInt *)((char *)&v77 - v18);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v81 = (uint64_t)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v82 = (char *)&v77 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v77 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v77 - v32;
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (uint64_t (*)())((char *)&v77 - v36);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v38, v39);
  v89 = (char *)&v77 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v77 - v43;
  v45 = type metadata accessor for PDFPageID();
  v93 = *(_QWORD *)(v45 - 8);
  v94 = v45;
  MEMORY[0x1E0C80A78](v45, v46);
  v78 = (Swift::UInt *)((char *)&v77 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v48, v49);
  v79 = (uint64_t)&v77 - v50;
  MEMORY[0x1E0C80A78](v51, v52);
  v54 = (Swift::UInt *)((char *)&v77 - v53);
  v92 = v2;
  v55 = (char **)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v56 = *v55;
  if (*((_QWORD *)*v55 + 2) <= a2)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v87 = (uint64_t (*)())a1;
  v57 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v58 = *(_QWORD *)(v20 + 72);
  v96 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))a2;
  v20 = v58 * a2;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v56[v57 + v58 * a2], (uint64_t)v37, &demangling cache variable for type metadata for PageId?);
  a1 = type metadata accessor for PageId(0);
  v86 = *(_QWORD *)(a1 - 8);
  a2 = *(_QWORD *)(v86 + 48);
  if (((unsigned int (*)(uint64_t (*)(), uint64_t, uint64_t))a2)(v37, 1, a1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v37, &demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v44, 1, 1, v94);
LABEL_6:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, &demangling cache variable for type metadata for PDFPageID?);
    goto LABEL_7;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v37, (uint64_t)v44, &demangling cache variable for type metadata for PDFPageID?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v37, &demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v44, 1, v94) == 1)
    goto LABEL_6;
  v37 = type metadata accessor for PDFPageID;
  outlined init with take of PKStrokeStruct((uint64_t)v44, (uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v54);
  swift_endAccess();
  outlined destroy of PKStrokeProperties((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_7:
  v44 = v91;
  if (*((_QWORD *)*v55 + 2) <= (unint64_t)v96)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&(*v55)[v57 + v20], (uint64_t)v33, &demangling cache variable for type metadata for PageId?);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))a2)(v33, 1, a1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for PageId?);
    v33 = (char *)v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v44, 1, 1, v90);
LABEL_11:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    goto LABEL_12;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v33[*(int *)(a1 + 20)], (uint64_t)v44, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for PageId?);
  v33 = (char *)v90;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v44, 1, v90) == 1)
    goto LABEL_11;
  v37 = (uint64_t (*)())v95;
  v54 = v77;
  (*(void (**)(Swift::UInt *, char *, char *))(v95 + 32))(v77, v44, v33);
  v44 = v83;
  v91 = (char *)v57;
  MEMORY[0x1DF0E3078](v33);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v44);
  v57 = (unint64_t)v91;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v44, v85);
  swift_endAccess();
  (*((void (**)(Swift::UInt *, char *))v37 + 1))(v54, v33);
LABEL_12:
  if (*((_QWORD *)*v55 + 2) <= (unint64_t)v96)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v54 = (Swift::UInt *)v57;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&(*v55)[v57 + v20], (uint64_t)v29, &demangling cache variable for type metadata for PageId?);
  v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))a2)(v29, 1, a1);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for PageId?);
  if (v59 != 1)
  {
    v37 = v87;
    v29 = v82;
    outlined init with copy of PKStrokeProperties((uint64_t)v87, (uint64_t)v82, type metadata accessor for PageId);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v29, 0, 1, a1);
    swift_beginAccess();
    v44 = *v55;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v55 = v44;
    a2 = (unint64_t)v96;
    if ((result & 1) != 0)
    {
LABEL_17:
      v67 = (uint64_t)v89;
      if (*((_QWORD *)v44 + 2) > a2)
      {
        outlined assign with take of PageId?((uint64_t)v29, (uint64_t)v54 + (_QWORD)v44 + v20);
        swift_endAccess();
        v66 = v95;
        v60 = a2;
        goto LABEL_19;
      }
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
LABEL_31:
    result = specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v44);
    v44 = (char *)result;
    *v55 = (char *)result;
    goto LABEL_17;
  }
  v60 = (uint64_t)v96;
  result = (uint64_t)objc_msgSend(v92, sel_pageAtIndex_, v96);
  v37 = v87;
  if (!result)
    goto LABEL_33;
  v62 = (void *)result;
  type metadata accessor for PaperKitPDFPage(0);
  v63 = swift_dynamicCastClassUnconditional();
  v64 = v81;
  outlined init with copy of PKStrokeProperties((uint64_t)v37, v81, type metadata accessor for PageId);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v86 + 56))(v64, 0, 1, a1);
  v65 = v63 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined assign with take of PageId?(v64, v65);
  swift_endAccess();

  v66 = v95;
  v67 = (uint64_t)v89;
LABEL_19:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v37, v67, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v67, 1, v94) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for PDFPageID?);
  }
  else
  {
    v68 = v79;
    outlined init with take of PKStrokeStruct(v67, v79, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v69 = v78;
    outlined init with copy of PKStrokeProperties(v68, (uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v70 = &v92[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v97 = *(_QWORD *)v70;
    *(_QWORD *)v70 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v60, v69, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v70 = v97;
    swift_bridgeObjectRelease();
    outlined destroy of PKStrokeProperties((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    swift_endAccess();
    outlined destroy of PKStrokeProperties(v68, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  v72 = v88;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v37 + *(int *)(a1 + 20), v88, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v66 + 48))(v72, 1, v33) == 1)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v37, type metadata accessor for PageId);
    return outlined destroy of StocksKitCurrencyCache.Provider?(v72, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    v73 = v80;
    (*(void (**)(char *, uint64_t, char *))(v66 + 32))(v80, v72, v33);
    v74 = (uint64_t)v83;
    MEMORY[0x1DF0E3078](v33);
    v75 = &v92[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    v76 = swift_isUniquelyReferenced_nonNull_native();
    v97 = *(_QWORD *)v75;
    *(_QWORD *)v75 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v60, v74, v76);
    *(_QWORD *)v75 = v97;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v74, v85);
    swift_endAccess();
    outlined destroy of PKStrokeProperties((uint64_t)v37, type metadata accessor for PageId);
    return (*(uint64_t (**)(char *, char *))(v66 + 8))(v73, v33);
  }
}

uint64_t one-time initialization function for lock()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static PaperKitPDFDocument.lock = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static PaperKitPDFPage.lock = result;
  return result;
}

void __swiftcall PaperKitPDFDocument.page(at:)(PDFPage_optional *__return_ptr retstr, Swift::Int at)
{
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  objc_super v10;

  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for PaperKitPDFDocument();
  v4 = -[PDFPage_optional pageAtIndex:](&v10, sel_pageAtIndex_, at);
  if (v4)
  {
    v6 = v4;
    type metadata accessor for PaperKitPDFPage(0);
    v4 = (id)swift_dynamicCastClass();
    if (!v4)

  }
  if (one-time initialization token for lock != -1)
    v4 = (id)swift_once();
  MEMORY[0x1E0C80A78](v4, v5);
  v8 = v7 + 4;
  os_unfair_lock_lock(v7 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v9, (uint64_t (*)(void))partial apply for closure #1 in PaperKitPDFDocument.page(at:));
  os_unfair_lock_unlock(v8);
}

void closure #1 in PaperKitPDFDocument.page(at:)(id a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char **v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v29 - v16;
  v18 = type metadata accessor for PageId(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v23 = (char **)(a2 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies);
    swift_beginAccess();
    if ((a3 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v24 = *v23;
      if (*((_QWORD *)*v23 + 2) > a3)
      {
        v31 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        v25 = *(_QWORD *)(v7 + 72) * a3;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v24[v31 + v25], (uint64_t)v17, &demangling cache variable for type metadata for PageId?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for PageId?);
          return;
        }
        v30 = v25;
        outlined init with take of PKStrokeStruct((uint64_t)v17, (uint64_t)v22, type metadata accessor for PageId);
        outlined init with copy of PKStrokeProperties((uint64_t)v22, (uint64_t)v13, type metadata accessor for PageId);
        v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
        v26(v13, 0, 1, v18);
        v27 = (uint64_t)a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        a1 = a1;
        outlined assign with take of PageId?((uint64_t)v13, v27);
        swift_endAccess();
        v7 = (uint64_t)v32;
        v26(v32, 1, 1, v18);
        swift_beginAccess();
        v13 = *v23;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v23 = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_12:
    v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v13);
    *v23 = v13;
LABEL_7:
    if (*((_QWORD *)v13 + 2) <= a3)
    {
      __break(1u);
    }
    else
    {
      outlined assign with take of PageId?(v7, (uint64_t)&v13[v31 + v30]);
      swift_endAccess();

      outlined destroy of PKStrokeProperties((uint64_t)v22, type metadata accessor for PageId);
    }
  }
}

Swift::Void __swiftcall PaperKitPDFDocument.removePage(at:)(Swift::Int at)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  objc_class *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  objc_super v48;

  v2 = v1;
  v4 = type metadata accessor for CRKeyPath();
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v41 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v44 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v40 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PDFPageID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (Swift::UInt *)((char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for PageId(0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v39 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  PaperKitPDFDocument.subscript.getter(at, (uint64_t)v29);
  v30 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v48.receiver = v1;
  v48.super_class = v30;
  objc_msgSendSuper2(&v48, sel_removePageAtIndex_, at);
  swift_beginAccess();
  v47 = at;
  specialized Array.remove(at:)(at, (uint64_t)v25);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v29, (uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
  }
  else
  {
    outlined init with take of PKStrokeStruct((uint64_t)v16, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(v21);
    swift_endAccess();
    outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  v31 = v44;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v29[*(int *)(v26 + 20)], v44, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v33 = v45;
  v32 = v46;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v46) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v31, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    v34 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v40, v31, v32);
    v35 = (uint64_t)v41;
    MEMORY[0x1DF0E3078](v32);
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(v35);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v35, v43);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
  }
  v36 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
  swift_beginAccess();
  v37 = v47;
  *v36 = specialized _NativeDictionary.mapValues<A>(_:)(*v36, v47);
  swift_bridgeObjectRelease();
  v38 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
  swift_beginAccess();
  *v38 = specialized _NativeDictionary.mapValues<A>(_:)(*v38, v37);
  swift_bridgeObjectRelease();
  outlined destroy of PKStrokeProperties((uint64_t)v29, type metadata accessor for PageId);
}

Swift::Void __swiftcall PaperKitPDFDocument.insert(_:at:)(PDFPage *_, Swift::Int at)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  objc_class *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  Swift::UInt *v51;
  char isUniquelyReferenced_nonNull_native;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  Swift::UInt *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  objc_super v74;

  v3 = v2;
  v67 = type metadata accessor for CRKeyPath();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v6);
  v65 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v70 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v71 = *(_QWORD *)(v11 - 8);
  v72 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v64 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PDFPageID();
  v68 = *(_QWORD *)(v18 - 8);
  v69 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v62 = (Swift::UInt *)((char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v21, v22);
  v63 = (uint64_t)&v62 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<PageId?>);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v62 - v34;
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v62 - v38;
  type metadata accessor for PaperKitPDFPage(0);
  v40 = swift_dynamicCastClass();
  if (v40)
  {
    v41 = v40 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v41, (uint64_t)v39, &demangling cache variable for type metadata for PageId?);
  }
  else
  {
    v42 = type metadata accessor for PageId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v39, 1, 1, v42);
  }
  v43 = &v3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v43 + 16) < at)
  {
    __break(1u);
  }
  else if ((at & 0x8000000000000000) == 0)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v39, (uint64_t)v27, &demangling cache variable for type metadata for PageId?);
    specialized Array.replaceSubrange<A>(_:with:)(at, at, (uint64_t)v27);
    swift_endAccess();
    v44 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
    v74.receiver = v3;
    v74.super_class = v44;
    -[PDFPage insertPage:atIndex:](&v74, sel_insertPage_atIndex_, _, at);
    v45 = (uint64_t *)&v3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
    swift_beginAccess();
    *v45 = specialized _NativeDictionary.mapValues<A>(_:)(*v45, at);
    swift_bridgeObjectRelease();
    v46 = (uint64_t *)&v3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    *v46 = specialized _NativeDictionary.mapValues<A>(_:)(*v46, at);
    swift_bridgeObjectRelease();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v39, (uint64_t)v35, &demangling cache variable for type metadata for PageId?);
    v47 = type metadata accessor for PageId(0);
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48);
    if (v48(v35, 1, v47) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for PageId?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v17, 1, 1, v69);
    }
    else
    {
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v35, (uint64_t)v17, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PKStrokeProperties((uint64_t)v35, type metadata accessor for PageId);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v17, 1, v69) != 1)
      {
        v49 = (uint64_t)v17;
        v50 = v63;
        outlined init with take of PKStrokeStruct(v49, v63, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        v51 = v62;
        outlined init with copy of PKStrokeProperties(v50, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v73 = *v45;
        *v45 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(at, v51, isUniquelyReferenced_nonNull_native);
        *v45 = v73;
        swift_bridgeObjectRelease();
        outlined destroy of PKStrokeProperties((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        swift_endAccess();
        outlined destroy of PKStrokeProperties(v50, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_11:
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v39, (uint64_t)v31, &demangling cache variable for type metadata for PageId?);
        v53 = v48(v31, 1, v47);
        v54 = v72;
        if (v53 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PageId?);
          v55 = v70;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v70, 1, 1, v54);
        }
        else
        {
          v55 = v70;
          outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v31[*(int *)(v47 + 20)], v70, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          outlined destroy of PKStrokeProperties((uint64_t)v31, type metadata accessor for PageId);
          v56 = v71;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v55, 1, v54) != 1)
          {
            v59 = v64;
            (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v64, v55, v54);
            v60 = (uint64_t)v65;
            MEMORY[0x1DF0E3078](v54);
            swift_beginAccess();
            v61 = swift_isUniquelyReferenced_nonNull_native();
            v73 = *v46;
            *v46 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(at, v60, v61);
            *v46 = v73;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v60, v67);
            swift_endAccess();
            (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v54);
            v57 = &demangling cache variable for type metadata for PageId?;
            v58 = (uint64_t)v39;
            goto LABEL_16;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, &demangling cache variable for type metadata for PageId?);
        v57 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
        v58 = v55;
LABEL_16:
        outlined destroy of StocksKitCurrencyCache.Provider?(v58, v57);
        return;
      }
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for PDFPageID?);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall PaperKitPDFDocument.exchangePage(at:withPageAt:)(Swift::Int at, Swift::Int withPageAt)
{
  char *v2;
  Swift::Int v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  objc_class *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v21[24];
  objc_super v22;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v21[-v14];
  v16 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v22.receiver = v2;
  v22.super_class = v16;
  objc_msgSendSuper2(&v22, sel_exchangePageAtIndex_withPageAtIndex_, at, withPageAt);
  v17 = (unint64_t *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
  swift_beginAccess();
  if (at < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = *v17;
  v4 = *(_QWORD *)(*v17 + 16);
  if (v4 <= at)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v2 = (char *)((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v19 = &v2[v18];
  v8 = *(_QWORD *)(v8 + 72);
  v3 = v8 * at;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v2[v18 + v8 * at], (uint64_t)v15, &demangling cache variable for type metadata for PageId?);
  if (v4 > withPageAt)
  {
    v4 = v8 * withPageAt;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v19[v8 * withPageAt], (uint64_t)v11, &demangling cache variable for type metadata for PageId?);
    swift_beginAccess();
    v8 = *v17;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v17 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
  *v17 = v8;
LABEL_5:
  if (*(_QWORD *)(v8 + 16) <= (unint64_t)at)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of PageId?((uint64_t)v11, (uint64_t)&v2[v8 + v3]);
    if (*(_QWORD *)(*v17 + 16) > (unint64_t)withPageAt)
    {
      outlined assign with copy of PageId?((uint64_t)v15, (uint64_t)&v2[*v17 + v4]);
      swift_endAccess();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for PageId?);
      return;
    }
  }
  __break(1u);
}

uint64_t PaperKitPDFDocument.finishLoading(as:)(unint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  void *v22;
  unsigned __int8 v23;
  id v24;
  unint64_t *v25;
  unint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(char *, unint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __int128 v73;

  v70 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  v68 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v67 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v69 = (uint64_t)&v63 - v7;
  v8 = type metadata accessor for PDFPageID();
  v71 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (unint64_t *)((char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (unint64_t *)((char *)&v63 - v15);
  v17 = objc_msgSend(v1, sel_isLocked, v14);
  if (!(_DWORD)v17)
    goto LABEL_5;
  if (one-time initialization token for shared != -1)
    goto LABEL_49;
  while (1)
  {
    MEMORY[0x1E0C80A78](v17, v18);
    *(&v63 - 2) = v19;
    *(&v63 - 1) = v70;
    v21 = v20 + 4;
    os_unfair_lock_lock(v20 + 4);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)((void (*)(__int128 *__return_ptr))partial apply for closure #1 in PasswordManager.password(for:), &v73);
    os_unfair_lock_unlock(v21);
    if (!*((_QWORD *)&v73 + 1))
      break;
    v22 = (void *)MEMORY[0x1DF0E41AC](v73, *((_QWORD *)&v73 + 1));
    swift_bridgeObjectRelease();
    v23 = objc_msgSend(v1, sel_unlockWithPassword_, v22);

    if ((v23 & 1) == 0)
      break;
LABEL_5:
    v24 = objc_msgSend(v1, sel_pageCount, v63, v64);
    v25 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies);
    swift_beginAccess();
    v26 = *v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v25 = v26;
    if (!isUniquelyReferenced_nonNull_native || (uint64_t)v24 > *(_QWORD *)(v26 + 24) >> 1)
    {
      if (*(_QWORD *)(v26 + 16) <= (uint64_t)v24)
        v28 = (int64_t)v24;
      else
        v28 = *(_QWORD *)(v26 + 16);
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v28, 0, v26);
    }
    *v25 = v26;
    swift_endAccess();
    v29 = (unint64_t)objc_msgSend(v1, sel_pageCount);
    if ((v29 & 0x8000000000000000) == 0)
    {
      v30 = v29;
      if (!v29)
        return 1;
      v31 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap);
      v32 = type metadata accessor for CRAsset();
      v33 = 0;
      v65 = *(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
      v66 = v32;
      v63 = v30;
      v64 = v8;
      while (2)
      {
        if (v30 == v33)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          break;
        }
        v65((char *)v16 + *(int *)(v8 + 20), v70, v66);
        *v16 = v33;
        if (*(_QWORD *)(*v25 + 16) >= v33)
        {
          v42 = v67;
          outlined init with copy of PKStrokeProperties((uint64_t)v16, v67, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v71 + 56))(v42, 0, 1, v8);
          v43 = type metadata accessor for PageId(0);
          v44 = v42 + *(int *)(v43 + 20);
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
          swift_beginAccess();
          v1 = (_QWORD *)*v25;
          v46 = swift_isUniquelyReferenced_nonNull_native();
          *v25 = (unint64_t)v1;
          if ((v46 & 1) == 0)
          {
            v1 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v1);
            *v25 = (unint64_t)v1;
          }
          if (v33 >= v1[2])
            goto LABEL_46;
          outlined assign with take of PageId?(v67, (uint64_t)v1+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * v33);
        }
        else
        {
          v34 = v69;
          outlined init with copy of PKStrokeProperties((uint64_t)v16, v69, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v71 + 56))(v34, 0, 1, v8);
          v35 = type metadata accessor for PageId(0);
          v36 = v34 + *(int *)(v35 + 20);
          v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
          swift_beginAccess();
          v38 = *v25;
          v39 = swift_isUniquelyReferenced_nonNull_native();
          *v25 = v38;
          if ((v39 & 1) == 0)
          {
            v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1, v38);
            *v25 = v38;
          }
          v41 = *(_QWORD *)(v38 + 16);
          v40 = *(_QWORD *)(v38 + 24);
          if (v41 >= v40 >> 1)
          {
            v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v38);
            *v25 = v38;
          }
          *(_QWORD *)(v38 + 16) = v41 + 1;
          outlined init with take of PageId?(v69, v38+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * v41);
        }
        swift_endAccess();
        outlined init with copy of PKStrokeProperties((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        swift_beginAccess();
        v47 = swift_isUniquelyReferenced_nonNull_native();
        v72 = (_QWORD *)*v31;
        v1 = v72;
        *v31 = 0x8000000000000000;
        v8 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
        v49 = v1[2];
        v50 = (v48 & 1) == 0;
        v51 = v49 + v50;
        if (__OFADD__(v49, v50))
          goto LABEL_45;
        v52 = v48;
        if (v1[3] >= v51)
        {
          if ((v47 & 1) != 0)
          {
            v1 = v72;
            if ((v48 & 1) == 0)
              goto LABEL_34;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v1 = v72;
            if ((v52 & 1) == 0)
              goto LABEL_34;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, v47);
          v53 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
          if ((v52 & 1) != (v54 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v8 = v53;
          v1 = v72;
          if ((v52 & 1) == 0)
          {
LABEL_34:
            v1[(v8 >> 6) + 8] |= 1 << v8;
            outlined init with copy of PKStrokeProperties((uint64_t)v11, v1[6] + *(_QWORD *)(v71 + 72) * v8, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
            *(_QWORD *)(v1[7] + 8 * v8) = v33;
            v55 = v1[2];
            v56 = __OFADD__(v55, 1);
            v57 = v55 + 1;
            if (v56)
              goto LABEL_47;
            v1[2] = v57;
            goto LABEL_15;
          }
        }
        *(_QWORD *)(v1[7] + 8 * v8) = v33;
LABEL_15:
        ++v33;
        *v31 = v1;
        swift_bridgeObjectRelease();
        outlined destroy of PKStrokeProperties((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        swift_endAccess();
        outlined destroy of PKStrokeProperties((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        v30 = v63;
        v8 = v64;
        if (v63 == v33)
          return 1;
        continue;
      }
    }
    __break(1u);
LABEL_49:
    v17 = (id)swift_once();
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)logger);
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v62 = 0;
    _os_log_impl(&dword_1DDB0F000, v60, v61, "Failed to unlock PDF file", v62, 2u);
    MEMORY[0x1DF0E6558](v62, -1, -1);
  }

  return 0;
}

uint64_t static PaperKitPDFDocument._load(_:assetManager:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSURL *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRAsset();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v12);
  swift_retain();
  CRAsset.init(url:coordinated:assetManager:)();
  v15 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
  URL._bridgeToObjectiveC()(v16);
  v18 = v17;
  v19 = objc_msgSend(v15, sel_initWithURL_, v17);

  if (v19)
  {
    if ((PaperKitPDFDocument.finishLoading(as:)((unint64_t)v14) & 1) != 0)
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
      v21 = (char *)a2 + *(int *)(v20 + 48);
      *a2 = v19;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v14, v9);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 0, 1, v20);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  }
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
}

uint64_t closure #1 in static PaperKitPDFDocument._load(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in static PaperKitPDFDocument._load(_:)()
{
  uint64_t v0;
  id v1;
  NSURL *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  Class isa;
  id v13;

  CRAsset.assetManager.getter();
  CRAssetManager.encryptionDelegate.getter();
  swift_release();
  if (*(_QWORD *)(v0 + 80))
  {
    outlined init with take of FindResult((__int128 *)(v0 + 56), v0 + 16);
    v5 = Data.init(contentsOf:options:)();
    v7 = v6;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v8 = dispatch thunk of EncryptionDelegate.decrypt(_:)();
    v10 = v9;
    v11 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
    isa = Data._bridgeToObjectiveC()().super.isa;
    v13 = objc_msgSend(v11, sel_initWithData_, isa);
    outlined consume of Data._Representation(v8, v10);

    outlined consume of Data._Representation(v5, v7);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    v1 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
    URL._bridgeToObjectiveC()(v2);
    v4 = v3;
    v13 = objc_msgSend(v1, sel_initWithURL_, v3);

  }
  **(_QWORD **)(v0 + 96) = v13;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  unint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  _QWORD v83[9];
  __int16 v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v6 = v5;
  v74 = a1;
  v71 = type metadata accessor for CRKeyPath();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71, v11);
  v69 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v77 = (uint64_t)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x1E0C80A78](v16, v17);
  v58 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v80 = (uint64_t)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v82 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)&v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *a2;
  v67 = *a3;
  v66 = a3[1];
  v65 = a3[2];
  v64 = a3[3];
  v63 = a3[4];
  v62 = a3[5];
  v61 = a3[6];
  v60 = a3[7];
  v59 = a3[8];
  v31 = *((unsigned __int8 *)a3 + 74);
  v32 = *((unsigned __int16 *)a3 + 36);
  v81 = v6;
  result = (unint64_t)objc_msgSend(v6, sel_pageCount, v28);
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_23;
  v73 = a4;
  if (result)
  {
    v34 = 0;
    v57 = v32 | (v31 << 16);
    v56 = HIWORD(v57);
    v75 = a5;
    v76 = v26;
    v79 = result;
    do
    {
      if ((char *)result == v34)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
      v36 = v26;
      v37 = v22;
      result = (unint64_t)objc_msgSend(v81, sel_pageAtIndex_, v34);
      if (!result)
        goto LABEL_24;
      v38 = (void *)result;
      type metadata accessor for PaperKitPDFPage(0);
      v39 = swift_dynamicCastClassUnconditional();
      v40 = v39 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v40, (uint64_t)v22, &demangling cache variable for type metadata for PageId?);
      v41 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v22, 1, v41))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for PageId?);
        v35 = v80;
        v26 = v36;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v80, 1, 1, v36);
      }
      else
      {
        v78 = v39;
        v42 = (uint64_t)&v22[*(int *)(v41 + 20)];
        v35 = v80;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v42, v80, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for PageId?);
        v26 = v36;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v35, 1, v36) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v30, v35, v36);
          v43 = v77;
          WeakTagged_3.tagged3.getter();
          v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
          v45 = *(_QWORD *)(v44 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v77, &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
LABEL_16:
            v50 = v74;
            v26 = v76;
            v51 = v73;
            WeakTagged_3.subscript.getter();
            v52 = v88;
            if (v88)
            {
              v53 = v89;
              v72 = __swift_project_boxed_opaque_existential_1(&v87, v88);
              v54 = v69;
              MEMORY[0x1DF0E3078](v76);
              v86 = v68;
              v83[0] = v67;
              v83[1] = v66;
              v83[2] = v65;
              v83[3] = v64;
              v83[4] = v63;
              v83[5] = v62;
              v83[6] = v61;
              v83[7] = v60;
              v83[8] = v59;
              v85 = v56;
              v84 = v57;
              (*(void (**)(uint64_t, char *, uint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 128))(v78, v54, &v86, v50, v83, v51, v75, v52, v53);

              v55 = v54;
              v26 = v76;
              (*(void (**)(char *, uint64_t))(v70 + 8))(v55, v71);
              (*(void (**)(char *, uint64_t))(v82 + 8))(v30, v26);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v82 + 8))(v30, v26);

              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v87, &demangling cache variable for type metadata for PaperPage?);
            }
          }
          else
          {
            v46 = (uint64_t)v58;
            v47 = v77;
            WeakRef.subscript.getter();
            (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v44);
            v48 = type metadata accessor for PaperDocumentPage();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v46, 1, v48) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for PaperDocumentPage?);
              goto LABEL_16;
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
            CRRegister.wrappedValue.getter();
            v49 = v83[0];
            outlined destroy of PKStrokeProperties(v46, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
            if ((v49 & 0x20) == 0)
              goto LABEL_16;

            v26 = v76;
            (*(void (**)(char *, uint64_t))(v82 + 8))(v30, v76);
          }
          result = v79;
          v22 = v37;
          goto LABEL_6;
        }
      }

      outlined destroy of StocksKitCurrencyCache.Provider?(v35, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      result = v79;
LABEL_6:
      ++v34;
    }
    while ((char *)result != v34);
  }
  return result;
}

id PaperKitPDFDocument.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperKitPDFDocument();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PaperKitPDFDocument()
{
  return objc_opt_self();
}

uint64_t outlined assign with take of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PaperKitPDFDocument.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PaperKitPDFDocument.subscript.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t outlined assign with copy of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in PaperKitPDFDocument.page(at:)()
{
  uint64_t v0;

  closure #1 in PaperKitPDFDocument.page(at:)(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in PasswordManager.password(for:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PasswordManager.password(for:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t specialized static PaperKitPDFDocument._load(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch();
}

uint64_t specialized static PaperKitPDFDocument._load(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc();
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
  *v3 = v0;
  v3[1] = specialized static PaperKitPDFDocument._load(_:);
  return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 16);
  if ((unint64_t)v1 < 2)
    goto LABEL_4;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = v1;
  LOBYTE(v2) = PaperKitPDFDocument.finishLoading(as:)(v2);
  outlined consume of PaperKitPDFDocument??(v1);
  if ((v2 & 1) == 0)
  {
    outlined consume of PaperKitPDFDocument??(v1);
LABEL_4:
    v1 = 0;
  }
  return (*(uint64_t (**)(void *))(v0 + 8))(v1);
}

uint64_t partial apply for closure #1 in static PaperKitPDFDocument._load(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v7[13] = a2;
  v7[14] = v6;
  v7[12] = a1;
  return swift_task_switch();
}

void outlined consume of PaperKitPDFDocument??(id a1)
{
  if (a1 != (id)1)

}

uint64_t one-time initialization function for logger(uint64_t a1)
{
  return one-time initialization function for logger(a1, logger);
}

uint64_t one-time initialization function for multipeerLogger(uint64_t a1)
{
  return one-time initialization function for logger(a1, multipeerLogger);
}

uint64_t one-time initialization function for generativeLogger(uint64_t a1)
{
  return one-time initialization function for logger(a1, generativeLogger);
}

uint64_t one-time initialization function for logger(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundTokenProvider.authenticate()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of MagicGenerativePlaygroundTokenProvider.authenticate();
  return v7(a1, a2);
}

{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

void *specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if ((v7 & 1) != 0)
      {
        v5 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v6);
        v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ResizeHandleType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ResizeHandleType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void ControlHandleView.init(elementView:controlPoint:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  id v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  void *v12;
  Swift::String v13;

  v3 = *a2;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint) = v3;
  if ((v3 - 1) > 8)
    v4 = 0;
  else
    v4 = byte_1DDF35A9E[(char)(v3 - 1)];
  v5 = CanvasElementResizeHandle.init(_:category:enabled:)(0, v4, 1);
  v6 = one-time initialization token for paperKitBundle;
  v7 = v5;
  if (v6 != -1)
    swift_once();
  v13._countAndFlagsBits = 0xD000000000000029;
  v13._object = (void *)0x80000001DDF4FA80;
  v8._countAndFlagsBits = 0x206C6F72746E6F43;
  v8._object = (void *)0xEE00656C646E6148;
  v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v9.value._object = (void *)0xEB00000000656C62;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v13)._countAndFlagsBits;
  v12 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setAccessibilityLabel_, v12);

  __asm { BR              X9 }
}

id CanvasElementResizeHandle.init(_:category:enabled:)(char a1, char a2, char a3)
{
  _BYTE *v3;
  objc_class *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  double v9;
  id v10;
  id v11;
  id v12;
  id v13;
  double v14;
  id v15;
  id v16;
  id v17;
  double v18;
  double v19;
  double v20;
  CGFloat v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  objc_super v34;
  objc_super v35;
  CGRect v36;
  CGRect v37;

  v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = a1;
  v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = a2;
  v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = a3;
  v5 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
  v6 = objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v35.receiver = v6;
  v35.super_class = v5;
  v7 = v3;
  v8 = objc_msgSendSuper2(&v35, sel_initWithTarget_action_, 0, 0);
  v8[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v8;

  if (one-time initialization token for resizeHandleSize != -1)
    swift_once();
  v9 = *(double *)&static UIConstants.resizeHandleSize;
  v34.receiver = v7;
  v34.super_class = (Class)type metadata accessor for CanvasElementResizeHandle();
  v10 = objc_msgSendSuper2(&v34, sel_initWithFrame_, 0.0, 0.0, v9, v9);
  v11 = v10;
  if ((a3 & 1) != 0)
  {
    v12 = v10;
    v13 = objc_msgSend(v12, sel_layer);
    LODWORD(v14) = 1045220557;
    objc_msgSend(v13, sel_setShadowOpacity_, v14);

    v15 = objc_msgSend(v12, sel_layer);
    objc_msgSend(v15, sel_setShadowOffset_, 0.0, 0.0);

    v16 = objc_msgSend(v12, sel_layer);
    v17 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v17, sel_scale);
    v19 = v18;

    objc_msgSend(v16, sel_setShadowRadius_, 8.0 / v19);
    if (one-time initialization token for resizeHandleInset != -1)
      swift_once();
    v20 = *(double *)&static UIConstants.resizeHandleInset;
    if (one-time initialization token for resizeHandleEdgeWidth != -1)
      swift_once();
    v21 = v20 + *(double *)&static UIConstants.resizeHandleEdgeWidth * -0.5;
    v22 = objc_msgSend(v12, sel_layer);
    objc_msgSend(v12, sel_bounds);
    v37 = CGRectInset(v36, v21, v21);
    v23 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithOvalInRect_, v37.origin.x, v37.origin.y, v37.size.width, v37.size.height);
    v24 = objc_msgSend(v23, sel_CGPath);

    objc_msgSend(v22, sel_setShadowPath_, v24);
    objc_msgSend(v12, sel_setIsAccessibilityElement_, 1);
    v25 = v12;
    v26 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000002DLL, 0x80000001DDF4FBF0);
    objc_msgSend(v25, sel_setAccessibilityIdentifier_, v26);

    v27 = (char *)v25;
    v28 = CanvasElementResizeHandle.accessibilityLabel()();
    if (v29)
    {
      v30 = (void *)MEMORY[0x1DF0E41AC](v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = 0;
    }
    objc_msgSend(v27, sel_setAccessibilityLabel_, v30);

    objc_msgSend(v27, sel_addGestureRecognizer_, *(_QWORD *)&v27[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer]);
    v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B18]), sel_initWithDelegate_, v27);
    objc_msgSend(v27, sel_addInteraction_, v31);
    v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C08]), sel_initWithDelegate_, v27);
    objc_msgSend(v27, sel_addInteraction_, v32);

  }
  return v11;
}

BOOL ControlHandleView.needsRotation.getter()
{
  unint64_t v0;
  uint64_t v1;

  v0 = ControlHandleView.pointerAccessories()();
  if (v0 >> 62)
    v1 = _CocoaArrayWrapper.endIndex.getter();
  else
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  return v1 < 4;
}

uint64_t ControlHandleView.pointerAccessories()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  int v7;
  _QWORD *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double MinX;
  double MaxX;
  double MinY;
  double MaxY;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[6];
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v1 = type metadata accessor for UIPointerAccessory.Position();
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
  if (v7 == 8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1DDF329E0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
    static UIPointerAccessory.Position.bottomLeft.getter();
    v25 = static UIPointerAccessory.arrow(_:)();
    v26 = *(void (**)(char *, uint64_t))(v2 + 8);
    v26(v6, v1);
    *(_QWORD *)(v24 + 32) = v25;
    static UIPointerAccessory.Position.topRight.getter();
LABEL_21:
    v28 = static UIPointerAccessory.arrow(_:)();
    v26(v6, v1);
    *(_QWORD *)(v24 + 40) = v28;
LABEL_23:
    v43[0] = v24;
    specialized Array._endMutation()();
    return v43[0];
  }
  if (v7 == 5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1DDF329E0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
    static UIPointerAccessory.Position.left.getter();
    v27 = static UIPointerAccessory.arrow(_:)();
    v26 = *(void (**)(char *, uint64_t))(v2 + 8);
    v26(v6, v1);
    *(_QWORD *)(v24 + 32) = v27;
    static UIPointerAccessory.Position.right.getter();
    goto LABEL_21;
  }
  if (v7 != 4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1DDF329D0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
    static UIPointerAccessory.Position.top.getter();
    v29 = static UIPointerAccessory.arrow(_:)();
    v30 = *(void (**)(char *, uint64_t))(v2 + 8);
    v30(v6, v1);
    *(_QWORD *)(v24 + 32) = v29;
    static UIPointerAccessory.Position.right.getter();
    v31 = static UIPointerAccessory.arrow(_:)();
    v30(v6, v1);
    *(_QWORD *)(v24 + 40) = v31;
    static UIPointerAccessory.Position.bottom.getter();
    v32 = static UIPointerAccessory.arrow(_:)();
    v30(v6, v1);
    *(_QWORD *)(v24 + 48) = v32;
    static UIPointerAccessory.Position.left.getter();
    v33 = static UIPointerAccessory.arrow(_:)();
    v30(v6, v1);
    *(_QWORD *)(v24 + 56) = v33;
    goto LABEL_23;
  }
  v8 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_elementView, v4);
  if (!v8)
    return MEMORY[0x1E0DEE9D8];
  v9 = v8;
  v43[0] = 0x3FF0000000000000;
  v43[1] = 0;
  v43[2] = 0;
  v43[3] = 0x3FF0000000000000;
  v43[4] = 0;
  v43[5] = 0;
  LOBYTE(v42) = 3;
  v10 = (*(double (**)(uint64_t *, _QWORD *, _QWORD, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x158))(&v42, v43, 0, 1);
  v12 = v11;
  v44.origin.x = 0.0;
  v44.origin.y = 0.0;
  v44.size.width = 1.0;
  v44.size.height = 1.0;
  MinX = CGRectGetMinX(v44);
  v45.origin.x = 0.0;
  v45.origin.y = 0.0;
  v45.size.width = 1.0;
  v45.size.height = 1.0;
  MaxX = CGRectGetMaxX(v45);
  if (MaxX >= v10)
    MaxX = v10;
  if (MinX <= MaxX)
    MinX = MaxX;
  v46.origin.x = 0.0;
  v46.origin.y = 0.0;
  v46.size.width = 1.0;
  v46.size.height = 1.0;
  MinY = CGRectGetMinY(v46);
  v47.origin.x = 0.0;
  v47.origin.y = 0.0;
  v47.size.width = 1.0;
  v47.size.height = 1.0;
  MaxY = CGRectGetMaxY(v47);
  if (MaxY >= v12)
    MaxY = v12;
  if (MinY > MaxY)
    MaxY = MinY;
  v17 = round(MinX + -0.5 + MinX + -0.5) * 0.5;
  v18 = round(MaxY + -0.5 + MaxY + -0.5) * 0.5;
  if ((v17 != -0.5 || v18 != 0.0) && (v17 != 0.5 || v18 != 0.0))
  {
    if (v17 == 0.0 && (v18 == -0.5 || v18 == 0.5))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1DDF329E0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.left.getter();
      v36 = static UIPointerAccessory.arrow(_:)();
      v21 = *(void (**)(char *, uint64_t))(v2 + 8);
      v21(v6, v1);
      *(_QWORD *)(v19 + 32) = v36;
      static UIPointerAccessory.Position.right.getter();
      goto LABEL_18;
    }
    if (v17 == -0.5 && v18 == -0.5)
    {
LABEL_38:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1DDF329E0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.bottomLeft.getter();
      v38 = static UIPointerAccessory.arrow(_:)();
      v21 = *(void (**)(char *, uint64_t))(v2 + 8);
      v21(v6, v1);
      *(_QWORD *)(v19 + 32) = v38;
      static UIPointerAccessory.Position.topRight.getter();
      goto LABEL_18;
    }
    if (v17 == 0.5)
    {
      if (v18 == 0.5)
        goto LABEL_38;
      if (v18 == -0.5)
      {
LABEL_46:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_1DDF329E0;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
        static UIPointerAccessory.Position.topLeft.getter();
        v40 = static UIPointerAccessory.arrow(_:)();
        v21 = *(void (**)(char *, uint64_t))(v2 + 8);
        v21(v6, v1);
        *(_QWORD *)(v19 + 32) = v40;
        static UIPointerAccessory.Position.bottomRight.getter();
        goto LABEL_18;
      }
    }
    else if (v17 == -0.5 && v18 == 0.5)
    {
      goto LABEL_46;
    }

    return MEMORY[0x1E0DEE9D8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1DDF329E0;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
  static UIPointerAccessory.Position.top.getter();
  v20 = static UIPointerAccessory.arrow(_:)();
  v21 = *(void (**)(char *, uint64_t))(v2 + 8);
  v21(v6, v1);
  *(_QWORD *)(v19 + 32) = v20;
  static UIPointerAccessory.Position.bottom.getter();
LABEL_18:
  v22 = static UIPointerAccessory.arrow(_:)();
  v21(v6, v1);
  *(_QWORD *)(v19 + 40) = v22;
  v42 = v19;
  specialized Array._endMutation()();
  v23 = v42;

  return v23;
}

uint64_t ControlHandleView.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

id ControlHandleView.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for ControlHandleView);
}

uint64_t type metadata accessor for ControlHandleView()
{
  return objc_opt_self();
}

uint64_t CanvasElementResizeHandle.hitHandle(_:with:)(id a1, CGFloat a2, CGFloat a3)
{
  _BYTE *v3;
  BOOL v7;
  id v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGPoint v21;
  CGPoint v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  if (v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] != 1)
    return 0;
  objc_msgSend(v3, sel_bounds);
  v21.x = a2;
  v21.y = a3;
  v7 = CGRectContainsPoint(v23, v21);
  if (a1)
  {
    a1 = a1;
    if (objc_msgSend(a1, sel_PK_isEventFromPencil))
    {

      LOBYTE(a1) = 1;
    }
    else
    {
      v8 = objc_msgSend(a1, sel_buttonMask);

      LOBYTE(a1) = v8 != 0;
    }
  }
  objc_msgSend(v3, sel_bounds);
  x = v24.origin.x;
  y = v24.origin.y;
  width = v24.size.width;
  height = v24.size.height;
  MidX = CGRectGetMidX(v24);
  v25.origin.x = x;
  v25.origin.y = y;
  v25.size.width = width;
  v25.size.height = height;
  MidY = CGRectGetMidY(v25);
  if (v7)
    return sqrt((MidX - a2) * (MidX - a2) + (MidY - a3) * (MidY - a3));
  if ((a1 & 1) != 0)
    return 0;
  if (one-time initialization token for resizeHandleFingerHitTestSize != -1)
    swift_once();
  v15 = *(double *)&static UIConstants.resizeHandleFingerHitTestSize;
  objc_msgSend(v3, sel_bounds);
  v16 = v15 - CGRectGetWidth(v26);
  v17 = v16 > 0.0 ? v16 * 0.5 : 0.0;
  objc_msgSend(v3, sel_bounds);
  v18 = v15 - CGRectGetHeight(v27);
  v19 = v18 > 0.0 ? v18 * 0.5 : 0.0;
  objc_msgSend(v3, sel_bounds);
  v29 = CGRectInset(v28, -v17, -v19);
  v22.x = a2;
  v22.y = a3;
  if (CGRectContainsPoint(v29, v22))
    return sqrt((MidX - a2) * (MidX - a2) + (MidY - a3) * (MidY - a3));
  else
    return 0;
}

uint64_t CanvasElementResizeHandle.accessibilityLabel()()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled) == 1)
    __asm { BR              X10 }
  return 0;
}

unint64_t one-time initialization function for handleImageCache()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static CanvasElementResizeHandle.handleImageCache = result;
  return result;
}

void closure #1 in static CanvasElementResizeHandle.handleImage(color:)(CGFloat a1, CGFloat a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  CGRect v9;
  CGRect v10;

  if (one-time initialization token for resizeHandleInset != -1)
    swift_once();
  v9.origin.x = 0.0;
  v9.origin.y = 0.0;
  v9.size.width = a1;
  v9.size.height = a2;
  v10 = CGRectInset(v9, *(CGFloat *)&static UIConstants.resizeHandleInset, *(CGFloat *)&static UIConstants.resizeHandleInset);
  v8 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithOvalInRect_, v10.origin.x, v10.origin.y, v10.size.width, v10.size.height);
  objc_msgSend(a4, sel_set);
  objc_msgSend(v8, sel_fill);
  v7 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  objc_msgSend(v7, sel_set);

  if (one-time initialization token for resizeHandleEdgeWidth != -1)
    swift_once();
  objc_msgSend(v8, sel_setLineWidth_, *(double *)&static UIConstants.resizeHandleEdgeWidth);
  objc_msgSend(v8, sel_stroke);

}

uint64_t one-time initialization function for disabledImage()
{
  double v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t result;
  _QWORD v7[6];

  if (one-time initialization token for resizeHandleSize != -1)
    swift_once();
  v0 = *(double *)&static UIConstants.resizeHandleSize;
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v0, v0);
  v2 = swift_allocObject();
  *(double *)(v2 + 16) = v0;
  *(double *)(v2 + 24) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage;
  *(_QWORD *)(v3 + 24) = v2;
  v7[4] = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  v7[5] = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v7[3] = &block_descriptor_14_0;
  v4 = _Block_copy(v7);
  swift_retain();
  swift_release();
  v5 = objc_msgSend(v1, sel_imageWithActions_, v4);

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
  else
    static CanvasElementResizeHandle.disabledImage = (uint64_t)v5;
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage(CGFloat a1, CGFloat a2)
{
  double v4;
  double v5;
  CGFloat v6;
  id v7;
  CGRect v8;
  CGRect v9;

  if (one-time initialization token for resizeHandleInset != -1)
    swift_once();
  v4 = *(double *)&static UIConstants.resizeHandleInset;
  v5 = *(double *)&static UIConstants.resizeHandleInset;
  if (one-time initialization token for resizeHandleEdgeWidth != -1)
  {
    swift_once();
    v5 = *(double *)&static UIConstants.resizeHandleInset;
  }
  v6 = v5 + *(double *)&static UIConstants.resizeHandleEdgeWidth * 0.5;
  v8.origin.x = 0.0;
  v8.origin.y = 0.0;
  v8.size.width = a1;
  v8.size.height = a2;
  v9 = CGRectInset(v8, v4 + *(double *)&static UIConstants.resizeHandleEdgeWidth * 0.5, v6);
  v7 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithOvalInRect_, v9.origin.x, v9.origin.y, v9.size.width, v9.size.height);
  if (one-time initialization token for resizeHandleColorDisabled != -1)
    swift_once();
  objc_msgSend((id)static UIConstants.resizeHandleColorDisabled, sel_set);
  objc_msgSend(v7, sel_fill);

}

Swift::Void __swiftcall CanvasElementResizeHandle.didMoveToWindow()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  _OWORD v7[2];

  v1 = objc_msgSend(v0, sel_layer);
  v2 = objc_msgSend(v1, sel_contents);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    outlined destroy of Any?((uint64_t)v7);
    v3 = objc_msgSend(v0, sel_window);
    if (v3)
    {
      v4 = v3;
      if (*((_BYTE *)v0 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled) == 1)
        __asm { BR              X10 }
      v5 = objc_msgSend(v0, sel_layer);
      if (one-time initialization token for disabledImage != -1)
        swift_once();
      v6 = objc_msgSend((id)static CanvasElementResizeHandle.disabledImage, sel_CGImage);
      objc_msgSend(v5, sel_setContents_, v6);

    }
  }
}

void CanvasElementResizeHandle.pointerAccessories()()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for UIPointerAccessory.Position();
  MEMORY[0x1E0C80A78](v1, v2);
  __asm { BR              X10 }
}

uint64_t sub_1DDBCF4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DDF329E0;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
  static UIPointerAccessory.Position.topLeft.getter();
  v5 = static UIPointerAccessory.arrow(_:)();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v1, v0);
  *(_QWORD *)(v4 + 32) = v5;
  static UIPointerAccessory.Position.bottomRight.getter();
  v7 = static UIPointerAccessory.arrow(_:)();
  v6(v1, v0);
  *(_QWORD *)(v4 + 40) = v7;
  *(_QWORD *)(v3 - 56) = v4;
  specialized Array._endMutation()();
  return *(_QWORD *)(v3 - 56);
}

id CanvasElementResizeHandle.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for CanvasElementResizeHandle);
}

id ControlHandleView.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementResizeHandle()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for ResizeHandleCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDBCF834 + 4 * byte_1DDF3590F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDBCF868 + 4 * byte_1DDF3590A[v4]))();
}

uint64_t sub_1DDBCF868(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBCF870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDBCF878);
  return result;
}

uint64_t sub_1DDBCF884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDBCF88CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDBCF890(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBCF898(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResizeHandleCategory()
{
  return &type metadata for ResizeHandleCategory;
}

uint64_t getEnumTagSinglePayload for ResizeHandleType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ResizeHandleType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1DDBCF990 + 4 * byte_1DDF35919[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1DDBCF9C4 + 4 * byte_1DDF35914[v4]))();
}

uint64_t sub_1DDBCF9C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBCF9CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDBCF9D4);
  return result;
}

uint64_t sub_1DDBCF9E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDBCF9E8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1DDBCF9EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBCF9F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResizeHandleType()
{
  return &type metadata for ResizeHandleType;
}

unint64_t lazy protocol witness table accessor for type ResizeHandleType and conformance ResizeHandleType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType;
  if (!lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ResizeHandleType, &type metadata for ResizeHandleType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType;
  if (!lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ResizeHandleType, &type metadata for ResizeHandleType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResizeHandleCategory and conformance ResizeHandleCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResizeHandleCategory and conformance ResizeHandleCategory;
  if (!lazy protocol witness table cache variable for type ResizeHandleCategory and conformance ResizeHandleCategory)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ResizeHandleCategory, &type metadata for ResizeHandleCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeHandleCategory and conformance ResizeHandleCategory);
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, void *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaSet.count.getter();
  if (!__OFADD__(result, 1))
  {
    *v3 = specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSObject, Swift.AnyObject>);
    v2 = static _DictionaryStorage.convert(_:capacity:)();
    v20 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      do
      {
        swift_dynamicCast();
        v2 = v20;
        v14 = *(_QWORD *)(v20 + 16);
        if (*(_QWORD *)(v20 + 24) <= v14)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14 + 1, 1);
          v2 = v20;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v15 = 0;
          v16 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v16 && (v15 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v17 = v9 == v16;
            if (v9 == v16)
              v9 = 0;
            v15 |= v17;
            v18 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v18 == -1);
          v10 = __clz(__rbit64(~v18)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v19;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v12 = __CocoaDictionary.Iterator.next()();
        v4 = v13;
      }
      while (v12);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>);
    v2 = static _DictionaryStorage.convert(_:capacity:)();
    v18 = v2;
    __CocoaDictionary.makeIterator()();
    v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      do
      {
        swift_dynamicCast();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        swift_dynamicCast();
        v2 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12 + 1, 1);
          v2 = v18;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>);
    v2 = static _DictionaryStorage.convert(_:capacity:)();
    v18 = v2;
    __CocoaDictionary.makeIterator()();
    v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
      do
      {
        swift_dynamicCast();
        type metadata accessor for AnyCanvasElementView();
        swift_dynamicCast();
        v2 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12 + 1, 1);
          v2 = v18;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

unint64_t specialized ResizeHandleType.init(rawValue:)(unint64_t result)
{
  if (result >= 8)
    return 8;
  return result;
}

void *specialized ControlHandleView.pointerInteraction(_:styleFor:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  Class isa;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UIPointerEffect();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = objc_msgSend(a1, sel_view, v9);
  if (!v12)
    return 0;
  v13 = v12;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_, v12);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  *v11 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v11, *MEMORY[0x1E0DC1E30], v6);
  v15 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
  v16 = v14;
  v17 = (void *)UIPointerStyle.init(effect:shape:)();
  ControlHandleView.pointerAccessories()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setAccessories_, isa);

  return v17;
}

uint64_t specialized static CanvasElementResizeHandle.handleImage(color:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t result;
  id v13;
  _QWORD v14[6];

  if (one-time initialization token for handleImageCache != -1)
    swift_once();
  swift_beginAccess();
  v2 = static CanvasElementResizeHandle.handleImageCache;
  v3 = a1;
  v4 = specialized Dictionary.subscript.getter(v3, v2);

  if (v4)
  {
    swift_endAccess();
    return (uint64_t)v4;
  }
  swift_endAccess();
  if (one-time initialization token for resizeHandleSize != -1)
    swift_once();
  v5 = *(double *)&static UIConstants.resizeHandleSize;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v5, v5);
  v7 = (double *)swift_allocObject();
  v7[2] = v5;
  v7[3] = v5;
  *((_QWORD *)v7 + 4) = v3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in static CanvasElementResizeHandle.handleImage(color:);
  *(_QWORD *)(v8 + 24) = v7;
  v14[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v14[5] = v8;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v14[3] = &block_descriptor_12;
  v9 = _Block_copy(v14);
  v10 = v3;
  swift_retain();
  swift_release();
  v11 = objc_msgSend(v6, sel_imageWithActions_, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v9 & 1) == 0)
  {
    swift_beginAccess();
    v13 = v10;
    v4 = v11;
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v4, v13);
    swift_endAccess();
    swift_release();

    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

void *specialized CanvasElementResizeHandle.pointerInteraction(_:styleFor:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  Class isa;
  uint64_t v22;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UIPointerEffect();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = objc_msgSend(a1, sel_view, v11);
  if (!v14)
    return 0;
  v15 = v14;
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_, v14);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  *v13 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v13, *MEMORY[0x1E0DC1E30], v8);
  v17 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  v18 = v16;
  v19 = (void *)UIPointerStyle.init(effect:shape:)();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xB0))();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_setAccessories_, isa);

  return v19;
}

uint64_t sub_1DDBD0804()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in static CanvasElementResizeHandle.handleImage(color:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in static CanvasElementResizeHandle.handleImage(color:)(*(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), a1, *(void **)(v1 + 32));
}

uint64_t sub_1DDBD0834()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t sub_1DDBD085C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage()
{
  uint64_t v0;

  closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage(*(CGFloat *)(v0 + 16), *(CGFloat *)(v0 + 24));
}

uint64_t sub_1DDBD0874()
{
  return swift_deallocObject();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9Coherence14SharedTagged_9Vy8PaperKit0f6CanvasB0VGG_ALs5NeverOTg503_s8g14Kit22Containerib128PAA9Coherence4CRDTRzrlE16_applyDifference2id2in4fromyAD9CRKeyPathV_AD7CapsuleV3RefCyqd___GAMyAA0A8DocumentVGtAD6CRTypeRd__lFAD14eF20_9VyAA0tdE0VGAYXEfU_SDyAF0uV0VALGTf1cn_n(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v38 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRKeyPath();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v39 = (char *)&v32 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = MEMORY[0x1E0DEE9D8];
  if (v19)
  {
    v32 = v2;
    v33 = v17;
    v48 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    v34 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v35 = v11;
    v21 = a1 + v34;
    v22 = *(_QWORD *)(v13 + 72);
    do
    {
      MEMORY[0x1DF0E3408](v12);
      v23 = *v38;
      if (*(_QWORD *)(*v38 + 16)
        && (v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v25 & 1) != 0))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v7, *(_QWORD *)(v23 + 56) + v24 * v22, v12);
        v26 = 0;
      }
      else
      {
        v26 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v7, v26, 1, v12);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        v27 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
        v28 = v33;
        v27((uint64_t)v33, v7, v12);
        SharedTagged_9.tag.getter();
        v44 = v46;
        v45 = v47;
        SharedTagged_9.tag.getter();
        v40 = v42;
        v41 = v43;
        lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum();
        if ((static CRExtensible.== infix(_:_:)() & 1) == 0)
        {
          v27((uint64_t)v39, v28, v12);
          goto LABEL_13;
        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v12);
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v39, v21, v12);
LABEL_13:
      v20 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v48;
      }
      v30 = *(_QWORD *)(v20 + 16);
      v29 = *(_QWORD *)(v20 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v20 = v48;
      }
      *(_QWORD *)(v20 + 16) = v30 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v20 + v34 + v30 * v22, v39, v12);
      v21 += v22;
      --v19;
      v11 = v35;
    }
    while (v19);
  }
  return v20;
}

uint64_t specialized CRRegister<>.setIfDifferent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  result = CRRegister.value.getter();
  if (!v8)
  {
    if (!a2)
      return result;
    goto LABEL_12;
  }
  if (!a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (v7 == a1 && v8 == a2)
    return swift_bridgeObjectRelease();
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    return CRRegister.value.setter();
  }
  return result;
}

uint64_t specialized CRRegister<>.setIfDifferent(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v12, v13);
  v29 = (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v31 = v1;
  CRRegister.value.getter();
  v23 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v11, &demangling cache variable for type metadata for Date?);
  v30 = a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v23, &demangling cache variable for type metadata for Date?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v11, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Date?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Date?);
    }
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v11, (uint64_t)v18, &demangling cache variable for type metadata for Date?);
    if (v24(v23, 1, v3) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v7, v23, v3);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(char *, uint64_t))(v4 + 8);
      v27(v7, v3);
      v27(v18, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Date?);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Date?);
      if ((v26 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Date?);
LABEL_8:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, v29, &demangling cache variable for type metadata for Date?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakRef<PDFAnnotationElement>?, WeakRef<PDFAnnotationElement>?));
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v29 = (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v31 = v1;
  CRRegister.value.getter();
  v23 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v11, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  v30 = a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v23, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v11, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
    }
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v11, (uint64_t)v18, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
    if (v24(v23, 1, v3) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v7, v23, v3);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>, MEMORY[0x1E0D12B80]);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(char *, uint64_t))(v4 + 8);
      v27(v7, v3);
      v27(v18, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
      if ((v26 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for (WeakRef<PDFAnnotationElement>?, WeakRef<PDFAnnotationElement>?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
LABEL_8:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, v29, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v29 = (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v31 = v1;
  CRRegister.value.getter();
  v23 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v30 = a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v23, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v11, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    }
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v11, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    if (v24(v23, 1, v3) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v7, v23, v3);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>();
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(char *, uint64_t))(v4 + 8);
      v27(v7, v3);
      v27(v18, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      if ((v26 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
LABEL_8:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, v29, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v29 = (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v31 = v1;
  CRRegister.value.getter();
  v23 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v11, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v30 = a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v23, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v11, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    }
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v11, (uint64_t)v18, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v24(v23, 1, v3) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v7, v23, v3);
      lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(char *, uint64_t))(v4 + 8);
      v27(v7, v3);
      v27(v18, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      if ((v26 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_8:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, v29, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  v3 = type metadata accessor for CRAssetOrData();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAssetOrData?, CRAssetOrData?));
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v12, v13);
  v28 = (uint64_t)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v27 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v27 - v21;
  v27[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v29 = v1;
  CRRegister.value.getter();
  v23 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v11, &demangling cache variable for type metadata for CRAssetOrData?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v23, &demangling cache variable for type metadata for CRAssetOrData?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v11, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for CRAssetOrData?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for CRAssetOrData?);
    }
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v11, (uint64_t)v18, &demangling cache variable for type metadata for CRAssetOrData?);
    if (v24(v23, 1, v3) != 1)
    {
      outlined init with take of PKStrokeStruct(v23, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v26 = specialized static CRAssetOrData.== infix(_:_:)((uint64_t)v18, (uint64_t)v7);
      outlined destroy of PKStrokeProperties((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      outlined destroy of PKStrokeProperties((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for CRAssetOrData?);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for CRAssetOrData?);
      if ((v26 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    outlined destroy of PKStrokeProperties((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for (CRAssetOrData?, CRAssetOrData?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_8:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, v28, &demangling cache variable for type metadata for CRAssetOrData?);
  return CRRegister.value.setter();
}

void specialized CRRegister<>.setIfDifferent(_:)(void *a1)
{
  id v2;
  id v3;
  char v4;
  id v5;
  id v6;
  void *v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.value.getter();
  if (!v7)
  {
    if (!a1)
      return;
    v5 = 0;
    goto LABEL_8;
  }
  if (!a1)
  {
    v5 = v7;
LABEL_8:

    v3 = a1;
    goto LABEL_9;
  }
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  v2 = v7;
  v3 = a1;
  v4 = static _CFObject.== infix(_:_:)();

  if ((v4 & 1) == 0)
  {
LABEL_9:
    v6 = v3;
    CRRegister.value.setter();
  }
}

uint64_t Capsule<>.applyDifference(from:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  return Capsule.mutate<A>(_:)();
}

uint64_t closure #1 in Capsule<>.applyDifference(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  char *v51;
  void (*v52)(_QWORD *, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  void (*v65)(_QWORD *, _QWORD);
  uint64_t v66;
  void (*v67)(_QWORD *, _QWORD);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  Swift::Int *v72;
  Swift::Int v73;
  char *v74;
  uint64_t v75;
  char *v76;
  void (*v77)(_QWORD *, _QWORD);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  uint64_t v89;
  Swift::Int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  _QWORD v105[8];

  v101 = a2;
  v3 = type metadata accessor for CRKeyPath();
  v92 = *(_QWORD *)(v3 - 8);
  v93 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v103 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v80 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v100 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v98 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  v83 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97, v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>.Change);
  MEMORY[0x1E0C80A78](v91, v15);
  v90 = (Swift::Int *)((char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v17, v18);
  v89 = (uint64_t)&v78 - v19;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_3<TaggedPaperPage>>>);
  MEMORY[0x1E0C80A78](v79, v20);
  v78 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v96 = (void (*)(char *, char *, uint64_t))((char *)&v78 - v24);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>);
  v99 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v25);
  v88 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v84 = (char *)&v78 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v82 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v34 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v104 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  v35 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v94 = v34;
  Capsule<>.subscript.getter();
  swift_release();
  v81 = v33;
  v95 = v30;
  v105[0] = dispatch thunk of Sequence._copyToContiguousArray()();
  v105[7] = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [SharedTagged_3<TaggedPaperPage>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>], MEMORY[0x1E0DEAF20]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12280]);
  v36 = v84;
  v37 = v85;
  BidirectionalCollection<>.difference<A>(from:)();
  v38 = v80;
  swift_release();
  v39 = (uint64_t)v96;
  swift_release();
  v40 = (uint64_t)v78;
  v87 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
  v87(v78, v36, v37);
  v41 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<SharedTagged_3<TaggedPaperPage>> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0DECE10]);
  dispatch thunk of Collection.startIndex.getter();
  v42 = v79;
  *(_QWORD *)(v40 + *(int *)(v79 + 36)) = v105[0];
  outlined init with take of (key: Int, value: AnyCRValue)?(v40, v39, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_3<TaggedPaperPage>>>);
  v43 = (uint64_t *)(v39 + *(int *)(v42 + 36));
  v44 = *v43;
  dispatch thunk of Collection.endIndex.getter();
  v102 = v14;
  if (v44 != v105[0])
  {
    v86 = v41;
    do
    {
      v67 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v68 = v89;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v69, v89, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>.Change);
      v67(v105, 0);
      v70 = v88;
      v87(v88, (char *)v39, v37);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v70, v37);
      v71 = v68;
      v72 = v90;
      outlined init with take of (key: Int, value: AnyCRValue)?(v71, (uint64_t)v90, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>.Change);
      LODWORD(v70) = swift_getEnumCaseMultiPayload();
      v73 = *v72;
      v74 = (char *)v72
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>, associatedWith: Int?))
                   + 48);
      if ((_DWORD)v70 == 1)
      {
        swift_getKeyPath();
        v64 = v38;
        v65 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.subscript.modify();
        CROrderedSet.remove(at:)(v73);
        v65(v105, 0);
      }
      else
      {
        v75 = v6;
        v76 = v100;
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v100, v74, v75);
        SharedTagged_3.any.getter();
        v64 = v38;
        __swift_project_boxed_opaque_existential_1(v105, v105[3]);
        type metadata accessor for PaperDocument(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
        Capsule.Ref.import<A, B>(_:from:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
        swift_getKeyPath();
        v77 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.subscript.modify();
        CROrderedSet.insert(_:at:)();
        v77(v105, 0);
        v74 = v76;
        v6 = v75;
        v37 = v85;
      }
      v39 = (uint64_t)v96;
      swift_release();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v74, v6);
      v66 = *v43;
      dispatch thunk of Collection.endIndex.getter();
      v38 = v64;
    }
    while (v66 != v105[0]);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_3<TaggedPaperPage>>>);
  swift_getKeyPath();
  v45 = v81;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v46 = v95;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v45, v46);
  v48 = v97;
  v47 = v98;
  CROrderedSet.Iterator.next()();
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v50 = v49(v47, 1, v6);
  v51 = v100;
  if (v50 != 1)
  {
    v96 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    do
    {
      v96(v51, v47, v6);
      MEMORY[0x1DF0E3390](v6);
      v52 = (void (*)(_QWORD *, _QWORD))SharedTagged_3.subscript.modify();
      v54 = *(_QWORD *)(v53 + 24);
      v55 = *(_QWORD *)(v53 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v53, v54);
      v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 176);
      v57 = v38;
      v58 = type metadata accessor for PaperDocument(0);
      v59 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v60 = v58;
      v38 = v57;
      v61 = v54;
      v51 = v100;
      v62 = v55;
      v48 = v97;
      v47 = v98;
      v56(v103, v104, v101, v60, v59, v61, v62);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v103, v93);
      v52(v105, 0);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v51, v6);
      CROrderedSet.Iterator.next()();
    }
    while (v49(v47, 1, v6) != 1);
  }
  (*(void (**)(char *, uint64_t))(v83 + 8))(v102, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v84, v85);
}

uint64_t partial apply for closure #1 in Capsule<>.applyDifference(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Capsule<>.applyDifference(from:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t Paper.applyDifference<A>(id:in:from:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v35;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  void (*v43)(char *, uint64_t);
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v53 = a2;
  v54 = a3;
  v57 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v51 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v52 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v56 = (char *)&v49 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v50 = (char *)&v49 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Paper?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRKeyPath();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Paper>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Paper();
  v27 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v49 = (uint64_t)&v49 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v57, v16, v29);
  v31 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v32 = v54;
  WeakRef.init(id:)();
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v55 = v26;
  if (v33(v15, 1, v26) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Paper?);
  v35 = v49;
  outlined init with take of PKStrokeStruct((uint64_t)v15, v49, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  CRRegister.wrappedValue.getter();
  x = v58.origin.x;
  y = v58.origin.y;
  width = v58.size.width;
  height = v58.size.height;
  v40 = v50;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v59.origin.x = x;
  v59.origin.y = y;
  v59.size.width = width;
  v59.size.height = height;
  if (!CGRectEqualToRect(v58, v59))
  {
    v58.origin.x = x;
    v58.origin.y = y;
    v58.size.width = width;
    v58.size.height = height;
    CRRegister.value.setter();
  }
  v41 = v51;
  v42 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v42(v56, v40, v3);
  CRRegister.projectedValue.setter();
  v43 = *(void (**)(char *, uint64_t))(v41 + 8);
  v43(v40, v3);
  CRRegister.wrappedValue.getter();
  v44 = v58.origin.x;
  v45 = v58.origin.y;
  v46 = v58.size.width;
  v47 = v58.size.height;
  v48 = v52;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v60.origin.x = v44;
  v60.origin.y = v45;
  v60.size.width = v46;
  v60.size.height = v47;
  if (!CGRectEqualToRect(v58, v60))
  {
    v58.origin.x = v44;
    v58.origin.y = v45;
    v58.size.width = v46;
    v58.size.height = v47;
    CRRegister.value.setter();
  }
  v42(v56, v48, v3);
  CRRegister.projectedValue.setter();
  v43(v48, v3);
  ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(v57, v53, v32, v55, v31, (uint64_t)&protocol witness table for Paper);
  return outlined destroy of PKStrokeProperties(v35, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
}

uint64_t ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  void (*v72)(unint64_t, _QWORD *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  double (*v84)(uint64_t, uint64_t);
  double v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, _QWORD *);
  _QWORD *v90;
  int v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void (*v101)(_QWORD);
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  int v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(_QWORD *, _QWORD);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD, char *, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void (*v127)(char *, unint64_t, uint64_t);
  char *v128;
  void (*v129)(_QWORD, _QWORD, _QWORD);
  uint64_t v130;
  void (*v131)(_QWORD *, uint64_t);
  uint64_t v132;
  int isUniquelyReferenced_nonNull_native;
  char v134;
  unint64_t v135;
  uint64_t v136;
  _BOOL8 v137;
  uint64_t v138;
  char v139;
  unint64_t v140;
  char v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  void (*v155)(_QWORD *, _QWORD);
  uint64_t v156;
  void (*v157)(_QWORD *, _QWORD);
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  Swift::Int *v162;
  int EnumCaseMultiPayload;
  Swift::Int v164;
  char *v165;
  void (*v166)(_QWORD *, _QWORD);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  void (*v171)(uint64_t *, _QWORD);
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  void (*v190)(unint64_t, _QWORD *, uint64_t);
  _QWORD *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  Swift::Int *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD v216[4];
  unint64_t v217;

  v205 = a6;
  v209 = a3;
  v211 = a1;
  v191 = a2;
  v185 = *a2;
  v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>.Change);
  MEMORY[0x1E0C80A78](v197, v7);
  v196 = (uint64_t *)((char *)&v173 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9, v10);
  v195 = (uint64_t)&v173 - v11;
  v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_9<TaggedCanvasElement>>>);
  MEMORY[0x1E0C80A78](v178, v12);
  v177 = (char *)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v199 = (uint64_t)&v173 - v16;
  v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>);
  v203 = *(_QWORD *)(v198 - 8);
  MEMORY[0x1E0C80A78](v198, v17);
  v194 = (char *)&v173 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v186 = (char *)&v173 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v214 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v193 = (char *)&v173 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v212 = (char *)&v173 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v206 = (char *)&v173 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v202 = (char *)&v173 - v33;
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v34, v35);
  v201 = (char *)&v173 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v189 = *(_QWORD *)(v204 - 8);
  MEMORY[0x1E0C80A78](v204, v37);
  v187 = (char *)&v173 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v184 = *(_QWORD *)(v200 - 8);
  MEMORY[0x1E0C80A78](v200, v39);
  v192 = (char *)&v173 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v41, v42);
  v174 = (char *)&v173 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v45);
  v175 = (char *)&v173 - v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v181 = (char *)&v173 - v49;
  v183 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v182 = *(v183 - 1);
  MEMORY[0x1E0C80A78](v183, v50);
  v176 = (char *)&v173 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for Optional();
  v179 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v52);
  v207 = (char *)&v173 - v53;
  v54 = type metadata accessor for CRKeyPath();
  v55 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v56);
  v213 = (uint64_t *)((char *)&v173 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v58, v59);
  v61 = (char *)&v173 - v60;
  v62 = type metadata accessor for WeakRef();
  v63 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v64);
  v66 = (char *)&v173 - v65;
  v67 = *(_QWORD *)(a4 - 8);
  v70 = MEMORY[0x1E0C80A78](v68, v69);
  v188 = (char *)&v173 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = v55;
  v72 = *(void (**)(unint64_t, _QWORD *, uint64_t))(v55 + 16);
  v73 = v61;
  v74 = v211;
  v211 = v54;
  v190 = v72;
  ((void (*)(char *, uint64_t, uint64_t, double))v72)(v61, v74, v54, v70);
  v75 = a4;
  WeakRef.init(id:)();
  v76 = type metadata accessor for PaperDocument(0);
  v77 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v78 = v207;
  v208 = v76;
  v79 = (char *)v77;
  WeakRef.subscript.getter();
  v80 = v75;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v62);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v78, 1, v75) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v179 + 8))(v78, v180);
  v180 = (uint64_t)v73;
  v179 = v67;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v188, v78, v75);
  v82 = v205;
  v83 = *(_QWORD *)(v205 + 8);
  v84 = *(double (**)(uint64_t, uint64_t))(v83 + 32);
  v85 = v84(v80, v83);
  if (v85 != v84(v80, v83))
  {
    v84(v80, v83);
    (*(void (**)(uint64_t, uint64_t))(v83 + 40))(v80, v83);
  }
  v86 = *(void (**)(uint64_t, uint64_t))(v82 + 48);
  v87 = (uint64_t)v181;
  v86(v80, v82);
  v88 = v182;
  v89 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v182 + 48);
  v90 = v183;
  v91 = v89(v87, 1, v183);
  v207 = v79;
  if (v91 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v87, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    v92 = v205;
  }
  else
  {
    v93 = v176;
    (*(void (**)(void))(v88 + 32))();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
    Capsule.Ref.import<A, B>(_:from:)();
    v94 = (uint64_t)v175;
    v95 = v205;
    v86(v80, v205);
    v96 = v89(v94, 1, v90);
    outlined destroy of StocksKitCurrencyCache.Provider?(v94, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    if (v96 == 1)
    {
      v97 = v174;
      (*(void (**)(char *, char *, _QWORD *))(v88 + 16))(v174, v93, v90);
      (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v88 + 56))(v97, 0, 1, v90);
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 56))(v97, v80, v95);
    }
    (*(void (**)(char *, _QWORD *))(v88 + 8))(v93, v90);
    v92 = v95;
  }
  v98 = v214;
  v99 = v192;
  v100 = v189;
  v101 = *(void (**)(_QWORD))(v92 + 72);
  v102 = v187;
  v189 = v80;
  v183 = v101;
  v101(v80);
  v103 = v204;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v103);
  v104 = v201;
  v105 = v200;
  CROrderedSet.Iterator.next()();
  v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48);
  v107 = v106(v104, 1, v22);
  v108 = v191;
  v109 = v185;
  v110 = v202;
  v111 = v180;
  if (v107 != 1)
  {
    v192 = *(char **)(v214 + 32);
    do
    {
      ((void (*)(char *, char *, uint64_t))v192)(v110, v104, v22);
      MEMORY[0x1DF0E3408](v22);
      v112 = (void (*)(_QWORD *, _QWORD))SharedTagged_9.subscript.modify();
      v114 = *(_QWORD *)(v113 + 24);
      v115 = *(_QWORD *)(v113 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v113, v114);
      v116 = *(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD, char *, uint64_t, uint64_t))(v115 + 104);
      v172 = v115;
      v104 = v201;
      v117 = v114;
      v110 = v202;
      v116(v111, v108, v209, *(_QWORD *)(v109 + *MEMORY[0x1E0D12A70]), v208, *(_QWORD *)(v109 + *MEMORY[0x1E0D12A70] + 8), v207, v117, v172);
      (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v111, v211);
      v112(v216, 0);
      v105 = v200;
      (*(void (**)(char *, uint64_t))(v214 + 8))(v110, v22);
      CROrderedSet.Iterator.next()();
    }
    while (v106(v104, 1, v22) != 1);
  }
  (*(void (**)(char *, uint64_t))(v184 + 8))(v99, v105);
  v118 = v189;
  v119 = v205;
  v120 = (void (*)(uint64_t, uint64_t))v183;
  ((void (*)(uint64_t, uint64_t))v183)(v189, v205);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  v121 = dispatch thunk of Sequence._copyToContiguousArray()();
  v120(v118, v119);
  v122 = dispatch thunk of Sequence._copyToContiguousArray()();
  v217 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v123 = *(_QWORD *)(v121 + 16);
  v124 = v214;
  if (v123)
  {
    v201 = (char *)v122;
    v125 = v121 + ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80));
    v126 = *(_QWORD *)(v214 + 72);
    v127 = *(void (**)(char *, unint64_t, uint64_t))(v214 + 16);
    v202 = (char *)v121;
    swift_retain();
    v128 = v206;
    v129 = (void (*)(_QWORD, _QWORD, _QWORD))v213;
    while (1)
    {
      v127(v128, v125, v22);
      MEMORY[0x1DF0E3408](v22);
      v127(v212, (unint64_t)v128, v22);
      v132 = v217;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v216[0] = v132;
      v217 = 0x8000000000000000;
      v135 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v129);
      v136 = *(_QWORD *)(v132 + 16);
      v137 = (v134 & 1) == 0;
      v138 = v136 + v137;
      if (__OFADD__(v136, v137))
        break;
      v139 = v134;
      if (*(_QWORD *)(v132 + 24) >= v138)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v138, isUniquelyReferenced_nonNull_native);
        v140 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v213);
        if ((v139 & 1) != (v141 & 1))
          goto LABEL_38;
        v135 = v140;
      }
      v142 = v211;
      v143 = (_QWORD *)v216[0];
      if ((v139 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v124 + 40))(*(_QWORD *)(v216[0] + 56) + v135 * v126, v212, v22);
        v130 = v210;
      }
      else
      {
        *(_QWORD *)(v216[0] + 8 * (v135 >> 6) + 64) |= 1 << v135;
        v130 = v210;
        v190(v143[6] + *(_QWORD *)(v210 + 72) * v135, v213, v142);
        (*(void (**)(unint64_t, char *, uint64_t))(v124 + 32))(v143[7] + v135 * v126, v212, v22);
        v144 = v143[2];
        v145 = __OFADD__(v144, 1);
        v146 = v144 + 1;
        if (v145)
          goto LABEL_37;
        v143[2] = v146;
        v143 = (_QWORD *)v216[0];
      }
      v217 = (unint64_t)v143;
      swift_bridgeObjectRelease();
      v131 = *(void (**)(_QWORD *, uint64_t))(v130 + 8);
      v129 = (void (*)(_QWORD, _QWORD, _QWORD))v213;
      v131(v213, v142);
      v128 = v206;
      (*(void (**)(char *, uint64_t))(v124 + 8))(v206, v22);
      v125 += v126;
      if (!--v123)
      {
        v121 = (uint64_t)v202;
        swift_release();
        v118 = v189;
        v122 = (uint64_t)v201;
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_27:
    v147 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9Coherence14SharedTagged_9Vy8PaperKit0f6CanvasB0VGG_ALs5NeverOTg503_s8g14Kit22Containerib128PAA9Coherence4CRDTRzrlE16_applyDifference2id2in4fromyAD9CRKeyPathV_AD7CapsuleV3RefCyqd___GAMyAA0A8DocumentVGtAD6CRTypeRd__lFAD14eF20_9VyAA0tdE0VGAYXEfU_SDyAF0uV0VALGTf1cn_n(v122, (uint64_t *)&v217);
    swift_release();
    v216[0] = v147;
    v215 = v121;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [SharedTagged_9<TaggedCanvasElement>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>], MEMORY[0x1E0DEAF20]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12360]);
    v148 = v186;
    BidirectionalCollection<>.difference<A>(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    v149 = (uint64_t)v177;
    v150 = v198;
    v213 = *(_QWORD **)(v203 + 16);
    ((void (*)(char *, char *, uint64_t))v213)(v177, v148, v198);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<SharedTagged_9<TaggedCanvasElement>> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0DECE10]);
    dispatch thunk of Collection.startIndex.getter();
    v151 = v178;
    *(_QWORD *)(v149 + *(int *)(v178 + 36)) = v216[0];
    v152 = v199;
    outlined init with take of (key: Int, value: AnyCRValue)?(v149, v199, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_9<TaggedCanvasElement>>>);
    v153 = (uint64_t *)(v152 + *(int *)(v151 + 36));
    v154 = *v153;
    dispatch thunk of Collection.endIndex.getter();
    if (v154 != v216[0])
    {
      do
      {
        v157 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
        v158 = v195;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v159, v195, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>.Change);
        v157(v216, 0);
        v160 = v194;
        ((void (*)(char *, uint64_t, uint64_t))v213)(v194, v152, v150);
        dispatch thunk of Collection.formIndex(after:)();
        (*(void (**)(char *, uint64_t))(v203 + 8))(v160, v150);
        v161 = v158;
        v162 = v196;
        outlined init with take of (key: Int, value: AnyCRValue)?(v161, (uint64_t)v196, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>.Change);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v164 = *v162;
        v165 = (char *)v162
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_9<TaggedCanvasElement>, associatedWith: Int?))
                      + 48);
        if (EnumCaseMultiPayload == 1)
        {
          v155 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t))(v205 + 88))(v216, v118);
          CROrderedSet.remove(at:)(v164);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v214 + 32))(v193, v165, v22);
          SharedTagged_9.any.getter();
          __swift_project_boxed_opaque_existential_1(v216, v216[3]);
          Capsule.Ref.import<A, B>(_:from:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
          v166 = (void (*)(_QWORD *, _QWORD))SharedTagged_9.subscript.modify();
          v168 = *(_QWORD *)(v167 + 24);
          v169 = *(_QWORD *)(v167 + 32);
          __swift_mutable_project_boxed_opaque_existential_1(v167, v168);
          v171 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v169 + 80))(&v215, v168, v169);
          if ((*v170 & 0x60) != 0)
            *v170 &= 0xFFFFFFFFFFFFFF9FLL;
          v171(&v215, 0);
          v166(v216, 0);
          v118 = v189;
          v155 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t))(v205 + 88))(v216, v189);
          v165 = v193;
          CROrderedSet.insert(_:at:)();
        }
        v155(v216, 0);
        (*(void (**)(char *, uint64_t))(v214 + 8))(v165, v22);
        v156 = *v153;
        v152 = v199;
        v150 = v198;
        dispatch thunk of Collection.endIndex.getter();
      }
      while (v156 != v216[0]);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v152, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_9<TaggedCanvasElement>>>);
    (*(void (**)(char *, uint64_t))(v203 + 8))(v186, v150);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v188, v118);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Image.applyDifference<A>(id:in:from:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t, double);
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  double v72;
  double v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  uint64_t v78;
  double x;
  char *v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  CGPoint origin;
  CGSize size;
  char *v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  double v94;
  char *v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  CGRect v139;
  CGRect v140;

  v136 = a2;
  v137 = a3;
  v138 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v130 = *(_QWORD *)(v3 - 8);
  v131 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v129 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v128 = (char *)&v110 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v9, v10);
  v127 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v125 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126, v12);
  v124 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v123 = (char *)&v110 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v122 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121, v20);
  v118 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v117 = (char *)&v110 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v116 = (char *)&v110 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v114 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115, v28);
  v113 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v112 = (char *)&v110 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v134 = *(_QWORD *)(v33 - 8);
  v135 = v33;
  MEMORY[0x1E0C80A78](v33, v34);
  v119 = (char *)&v110 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v133 = (char *)&v110 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v111 = (char *)&v110 - v41;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v110 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for CRKeyPath();
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v48);
  v50 = (char *)&v110 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v52 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v53);
  v55 = (char *)&v110 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Image();
  v57 = *(_QWORD *)(v56 - 8);
  v59 = MEMORY[0x1E0C80A78](v56, v58);
  v132 = (uint64_t)&v110 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = *(void (**)(char *, uint64_t, uint64_t, double))(v47 + 16);
  v62 = v137;
  v61(v50, v138, v46, v59);
  v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  WeakRef.init(id:)();
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v51);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v45, 1, v56) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v45, &demangling cache variable for type metadata for Image?);
  v110 = v63;
  v65 = v132;
  outlined init with take of PKStrokeStruct((uint64_t)v45, v132, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  Image.pdfContentsBounds.getter();
  v67 = v66;
  v69 = v68;
  v71 = v70;
  v73 = v72;
  Image.pdfContentsBounds.getter();
  if (CGRect.almostEqual(_:threshold:)(v74, v75, v76, v77, 1.0, v67, v69, v71, v73))
  {
    v78 = v135;
    CRRegister.wrappedValue.getter();
    x = v139.origin.x;
    v80 = v111;
    CRRegister.projectedValue.getter();
    CRRegister.value.getter();
    v81.n128_u64[0] = *(_QWORD *)&v139.origin.x;
    if (v139.origin.x != x)
    {
      v139.origin.x = x;
      CRRegister.value.setter();
    }
    v82 = v134;
    (*(void (**)(char *, char *, uint64_t, __n128))(v134 + 16))(v133, v80, v78, v81);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v78);
  }
  else
  {
    v83 = v115;
    CRRegister.wrappedValue.getter();
    CRRegister.wrappedValue.setter();
    CRRegister.wrappedValue.getter();
    origin = v139.origin;
    size = v139.size;
    v86 = v112;
    CRRegister.projectedValue.getter();
    CRRegister.value.getter();
    v140.origin = origin;
    v140.size = size;
    v87 = CGRectEqualToRect(v139, v140);
    v88 = v135;
    if (!v87)
    {
      v139.origin = origin;
      v139.size = size;
      CRRegister.value.setter();
    }
    v89 = v114;
    (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v113, v86, v83);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v86, v83);
    v90 = (uint64_t)v116;
    v91 = v121;
    CRRegister.wrappedValue.getter();
    v92 = v117;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v90);
    outlined destroy of StocksKitCurrencyCache.Provider?(v90, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v93 = v120;
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v118, v92, v91);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v91);
    CRRegister.wrappedValue.getter();
    v94 = v139.origin.x;
    v95 = v119;
    CRRegister.projectedValue.getter();
    CRRegister.value.getter();
    v96.n128_u64[0] = *(_QWORD *)&v139.origin.x;
    if (v139.origin.x != v94)
    {
      v139.origin.x = v94;
      CRRegister.value.setter();
    }
    v97 = v134;
    (*(void (**)(char *, char *, uint64_t, __n128))(v134 + 16))(v133, v95, v88, v96);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v88);
    v98 = (uint64_t)v122;
    v99 = v126;
    CRRegister.wrappedValue.getter();
    v100 = v123;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v98);
    outlined destroy of StocksKitCurrencyCache.Provider?(v98, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v101 = v125;
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v124, v100, v99);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v99);
    v102 = (uint64_t)v127;
    v103 = v131;
    CRRegister.wrappedValue.getter();
    v104 = v128;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v102);
    outlined destroy of StocksKitCurrencyCache.Provider?(v102, &demangling cache variable for type metadata for CRAssetOrData?);
    v105 = v130;
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v129, v104, v103);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v103);
    if (one-time initialization token for logger != -1)
      swift_once();
    v106 = type metadata accessor for Logger();
    __swift_project_value_buffer(v106, (uint64_t)logger);
    v107 = Logger.logObject.getter();
    v108 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v109 = 0;
      _os_log_impl(&dword_1DDB0F000, v107, v108, "Importing Image page with different bounds, this should not happen.", v109, 2u);
      MEMORY[0x1DF0E6558](v109, -1, -1);
    }

  }
  ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(v138, v136, v62, v56, v110, (uint64_t)&protocol witness table for Image);
  return outlined destroy of PKStrokeProperties(v65, (uint64_t (*)(_QWORD))type metadata accessor for Image);
}

uint64_t PaperDocumentPage.applyDifference<A>(id:in:from:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v44;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;

  v75 = a2;
  v76 = a3;
  v77 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v72 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v71 = (char *)&v64 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v70 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v67 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v69 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v68 = (char *)&v64 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v66 = (char *)&v64 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CRKeyPath();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v64 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for PaperDocumentPage();
  v36 = *(_QWORD *)(v35 - 8);
  v38 = MEMORY[0x1E0C80A78](v35, v37);
  v65 = (uint64_t)&v64 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))(v29, v77, v25, v38);
  v40 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  WeakRef.init(id:)();
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v42 = v35;
  if (v41(v24, 1, v35) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for PaperDocumentPage?);
  v64 = v40;
  v44 = v65;
  outlined init with take of PKStrokeStruct((uint64_t)v24, v65, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
  CRRegister.wrappedValue.getter();
  x = v78.origin.x;
  y = v78.origin.y;
  width = v78.size.width;
  height = v78.size.height;
  v49 = v66;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v79.origin.x = x;
  v79.origin.y = y;
  v79.size.width = width;
  v79.size.height = height;
  if (!CGRectEqualToRect(v78, v79))
  {
    v78.origin.x = x;
    v78.origin.y = y;
    v78.size.width = width;
    v78.size.height = height;
    CRRegister.value.setter();
  }
  v50 = v67;
  v51 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v52 = v68;
  v51(v68, v49, v12);
  CRRegister.projectedValue.setter();
  v53 = *(void (**)(char *, uint64_t))(v50 + 8);
  v53(v49, v12);
  v54 = v44;
  CRRegister.wrappedValue.getter();
  v55 = v78.origin.x;
  v56 = v78.origin.y;
  v57 = v78.size.width;
  v58 = v78.size.height;
  v59 = v69;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v80.origin.x = v55;
  v80.origin.y = v56;
  v80.size.width = v57;
  v80.size.height = v58;
  if (!CGRectEqualToRect(v78, v80))
  {
    v78.origin.x = v55;
    v78.origin.y = v56;
    v78.size.width = v57;
    v78.size.height = v58;
    CRRegister.value.setter();
  }
  v51(v52, v59, v12);
  CRRegister.projectedValue.setter();
  v53(v59, v12);
  v60 = (uint64_t)v70;
  v61 = v74;
  CRRegister.wrappedValue.getter();
  v62 = v71;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v60);
  outlined destroy of StocksKitCurrencyCache.Provider?(v60, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v63 = v73;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v72, v62, v61);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v61);
  ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(v77, v75, v76, v42, v64, (uint64_t)&protocol witness table for PaperDocumentPage);
  return outlined destroy of PKStrokeProperties(v54, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
}

unint64_t lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>;
  if (!lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BasicImageFilter>, MEMORY[0x1E0D11CC8]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D11FE0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>;
  if (!lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v2[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9D0]);
    v2[1] = lazy protocol witness table accessor for type Quad and conformance Quad();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12020], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Quad and conformance Quad()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Quad, &type metadata for Quad);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Quad, &type metadata for Quad);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Quad, &type metadata for Quad);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Quad, &type metadata for Quad);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Quad, &type metadata for Quad);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

id ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  char *v6;
  char *v13;
  objc_super v15;

  swift_unknownObjectWeakInit();
  *(_OWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize] = xmmword_1DDF35AD0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_stepperSizeHeight] = 0x4043000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_minValue] = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_maxValue] = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue] = a3;
  v13 = &v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_unit];
  *(_QWORD *)v13 = a4;
  *((_QWORD *)v13 + 1) = a5;
  *(double *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentViewMargin] = a6;
  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for ValueEditingViewController();
  return objc_msgSendSuper2(&v15, sel_initWithNibName_bundle_, 0, 0);
}

id ValueEditingViewController.stepper.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v1 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_minValue);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_maxValue);
    v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_unit);
    v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_unit + 8);
    objc_allocWithZone((Class)type metadata accessor for ValueStepper());
    swift_bridgeObjectRetain();
    ValueStepper.init(minValue:maxValue:unit:)(v5, v6, v7, v8);
    v9 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v10;
    v3 = v10;

    v2 = 0;
  }
  v11 = v2;
  return v3;
}

char *ValueEditingViewController.slider.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  void *v9;
  id v10;

  v1 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_minValue);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_maxValue);
    v7 = objc_allocWithZone((Class)type metadata accessor for ValueSlider());
    v8 = ValueSlider.init(minValue:maxValue:)(v5, v6);
    v9 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v8;
    v3 = v8;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

void *ValueEditingViewController.didChangeStepperValue()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  double v10;
  void *result;

  v1 = v0;
  v2 = ValueEditingViewController.stepper.getter();
  v3 = ValueStepper.currentValue.getter();

  v4 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue) = v3;
  v5 = ValueEditingViewController.slider.getter();
  v6 = v5;
  v7 = *(_QWORD *)(v1 + v4);
  if (*(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] > v7)
    v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue];
  if (v7 >= *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue])
    v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue];
  v8 = &v5[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(_QWORD *)v8 = v7;
  v8[8] = 0;
  v9 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider];
  *(float *)&v10 = (float)ValueSlider.currentValue.getter();
  objc_msgSend(v9, sel_setValue_, v10);

  result = (void *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_delegate);
  if (result)
  {
    objc_msgSend(result, sel_valueEditingViewController_didChangeValue_, v1, *(_QWORD *)(v1 + v4));
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *ValueEditingViewController.didChangeSliderValue()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  void *result;

  v1 = v0;
  v2 = ValueEditingViewController.slider.getter();
  v3 = ValueSlider.currentValue.getter();

  v4 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue) = v3;
  v5 = (char *)ValueEditingViewController.stepper.getter();
  v6 = v5;
  v7 = *(_QWORD *)(v1 + v4);
  if (*(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > v7)
    v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
  if (v7 >= *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue])
    v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
  v8 = &v5[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(_QWORD *)v8 = v7;
  v8[8] = 0;
  ValueStepper.updateUI()();

  result = (void *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_delegate);
  if (result)
  {
    objc_msgSend(result, sel_valueEditingViewController_didChangeValue_, v1, *(_QWORD *)(v1 + v4));
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ValueEditingViewController.viewDidLoad()()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  double v54;
  char *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  objc_super v59;

  v1 = v0;
  v59.receiver = v0;
  v59.super_class = (Class)type metadata accessor for ValueEditingViewController();
  objc_msgSendSuper2(&v59, sel_viewDidLoad);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  objc_msgSend(v2, sel_setAxis_, 1);
  objc_msgSend(v2, sel_setSpacing_, *(double *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_verticalInterItemSpacing]);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF329D0;
  v6 = objc_msgSend(v2, sel_topAnchor);
  v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  v10 = objc_msgSend(v9, sel_topAnchor);
  v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentViewMargin];
  v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(_QWORD *)(v5 + 32) = v12;
  v13 = objc_msgSend(v2, sel_leadingAnchor);
  v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  v17 = objc_msgSend(v16, sel_leadingAnchor);
  v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, v11);

  *(_QWORD *)(v5 + 40) = v18;
  v19 = objc_msgSend(v2, sel_bottomAnchor);
  v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  v23 = objc_msgSend(v22, sel_bottomAnchor);
  v24 = -v11;
  v25 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v24);

  *(_QWORD *)(v5 + 48) = v25;
  v26 = objc_msgSend(v2, sel_trailingAnchor);
  v27 = objc_msgSend(v1, sel_view);
  if (!v27)
  {
LABEL_19:
    __break(1u);
    return;
  }
  v28 = v27;
  v29 = (void *)objc_opt_self();
  v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

  v31 = objc_msgSend(v30, sel_trailingAnchor);
  v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v31, v24);

  *(_QWORD *)(v5 + 56) = v32;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_activateConstraints_, isa);

  v34 = ValueEditingViewController.stepper.getter();
  objc_msgSend(v2, sel_addArrangedSubview_, v34);

  v35 = ValueEditingViewController.stepper.getter();
  v36 = objc_msgSend(v35, sel_heightAnchor);

  v37 = objc_msgSend(v36, sel_constraintEqualToConstant_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_stepperSizeHeight]);
  objc_msgSend(v37, sel_setActive_, 1);

  v38 = ValueEditingViewController.slider.getter();
  objc_msgSend(v2, sel_addArrangedSubview_, v38);

  v39 = ValueEditingViewController.slider.getter();
  v40 = objc_msgSend(v39, sel_widthAnchor);

  v41 = ValueEditingViewController.stepper.getter();
  v42 = objc_msgSend(v41, sel_widthAnchor);

  v43 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v42);
  objc_msgSend(v43, sel_setActive_, 1);

  v44 = ValueEditingViewController.stepper.getter();
  objc_msgSend(v44, sel_addTarget_action_forControlEvents_, v1, sel_didChangeStepperValue, 4096);

  v45 = ValueEditingViewController.slider.getter();
  objc_msgSend(v45, sel_addTarget_action_forControlEvents_, v1, sel_didStartChangingSliderValue, 1);

  v46 = ValueEditingViewController.slider.getter();
  objc_msgSend(v46, sel_addTarget_action_forControlEvents_, v1, sel_didFinishChangingSliderValue, 448);

  v47 = ValueEditingViewController.slider.getter();
  objc_msgSend(v47, sel_addTarget_action_forControlEvents_, v1, sel_didChangeSliderValue, 4096);

  v48 = ValueEditingViewController.slider.getter();
  v49 = v48;
  v50 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue;
  v51 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue];
  if (*(_QWORD *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] > v51)
    v51 = *(_QWORD *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue];
  if (v51 >= *(_QWORD *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue])
    v51 = *(_QWORD *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue];
  v52 = &v48[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(_QWORD *)v52 = v51;
  v52[8] = 0;
  v53 = *(void **)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider];
  *(float *)&v54 = (float)ValueSlider.currentValue.getter();
  objc_msgSend(v53, sel_setValue_, v54);

  v55 = (char *)ValueEditingViewController.stepper.getter();
  v56 = v55;
  v57 = *(_QWORD *)&v1[v50];
  if (*(_QWORD *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > v57)
    v57 = *(_QWORD *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
  if (v57 >= *(_QWORD *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue])
    v57 = *(_QWORD *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
  v58 = &v55[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(_QWORD *)v58 = v57;
  v58[8] = 0;
  ValueStepper.updateUI()();

  objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize + 8]);
}

void *@objc ValueEditingViewController.didStartChangingSliderValue()(char *a1, uint64_t a2, SEL *a3)
{
  void *result;
  void *v6;
  uint64_t v7;
  char *v8;

  result = (void *)MEMORY[0x1DF0E666C](&a1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_delegate]);
  if (result)
  {
    v6 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, *a3) & 1) != 0)
    {
      v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue];
      v8 = a1;
      objc_msgSend(v6, *a3, v8, v7);

    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

id ValueEditingViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ValueEditingViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ValueEditingViewController()
{
  return objc_opt_self();
}

void specialized ValueEditingViewController.init(coder:)()
{
  char *v0;

  swift_unknownObjectWeakInit();
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize] = xmmword_1DDF35AD0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_stepperSizeHeight] = 0x4043000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void one-time initialization function for linkCornerRadius()
{
  static Link.linkCornerRadius = 0x4024000000000000;
}

void specialized static Link.renderLink(synapseItem:in:frame:rotation:darkMode:isRTL:)(void *a1, CGContext *a2, char a3, char a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double MidX;
  double MidY;
  CGFloat v25;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  double v44;
  double v45;
  double v46;
  double v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  double v55;
  uint64_t v56;
  double v57;
  void *v58;
  char **v59;
  id v60;
  id v61;
  uint64_t inited;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  void *v79;
  Class isa;
  id v81;
  id v82;
  id v83;
  id v84;
  double v85;
  double v86;
  double v87;
  CGFloat v88;
  CGRect v89;
  __int128 v90;
  __int128 v91;
  id v92;
  CGAffineTransform v93;
  CGAffineTransform v94;
  CGAffineTransform v95;
  uint64_t v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  v96 = *MEMORY[0x1E0C80C00];
  v18 = type metadata accessor for CGPathFillRule();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGContextSaveGState(a2);
  v97.origin.x = a5;
  v97.origin.y = a6;
  v97.size.width = a7;
  v97.size.height = a8;
  MidX = CGRectGetMidX(v97);
  v89.origin.x = a5;
  v89.origin.y = a6;
  v98.origin.x = a5;
  v98.origin.y = a6;
  v89.size.width = a7;
  v89.size.height = a8;
  v98.size.width = a7;
  v98.size.height = a8;
  MidY = CGRectGetMidY(v98);
  CGAffineTransformMakeRotation(&v95, a9);
  v90 = *(_OWORD *)&v95.c;
  v91 = *(_OWORD *)&v95.a;
  v25 = -MidX;
  tx = v95.tx;
  ty = v95.ty;
  CGAffineTransformMakeTranslation(&v95, v25, -MidY);
  a = v95.a;
  b = v95.b;
  c = v95.c;
  d = v95.d;
  v32 = v95.tx;
  v33 = v95.ty;
  *(_OWORD *)&v94.a = v91;
  *(_OWORD *)&v94.c = v90;
  v94.tx = tx;
  v94.ty = ty;
  CGAffineTransformConcat(&v93, &v95, &v94);
  v90 = *(_OWORD *)&v93.c;
  v91 = *(_OWORD *)&v93.a;
  v34 = v93.tx;
  v35 = v93.ty;
  v95.a = a;
  v95.b = b;
  v95.c = c;
  v95.d = d;
  v95.tx = v32;
  v95.ty = v33;
  CGAffineTransformInvert(&v94, &v95);
  *(_OWORD *)&v95.a = v91;
  *(_OWORD *)&v95.c = v90;
  v95.tx = v34;
  v95.ty = v35;
  CGAffineTransformConcat(&v93, &v95, &v94);
  v95 = v93;
  CGContextConcatCTM(a2, &v95);
  if ((a3 & 1) != 0)
  {
    v36 = 0.152941176;
    v37 = 0.145098039;
    v38 = 0.164705882;
    v39 = 1.0;
  }
  else
  {
    v36 = 0.894117647;
    v38 = 0.901960784;
    v39 = 1.0;
    v37 = 0.894117647;
  }
  *(_QWORD *)&v91 = CGColorCreateSRGB(v36, v37, v38, v39);
  CGContextSetFillColorWithColor(a2, (CGColorRef)v91);
  if (one-time initialization token for linkCornerRadius != -1)
    swift_once();
  x = v89.origin.x;
  y = v89.origin.y;
  width = v89.size.width;
  height = v89.size.height;
  *(_QWORD *)&v90 = CGPathCreateWithRoundedRect(v89, *(CGFloat *)&static Link.linkCornerRadius, *(CGFloat *)&static Link.linkCornerRadius, 0);
  CGContextAddPath(a2, (CGPathRef)v90);
  CGContextClosePath(a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v22, *MEMORY[0x1E0C9B8A0], v18);
  CGContextRef.fillPath(using:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v99.origin.x = x;
  v99.origin.y = y;
  v99.size.width = width;
  v99.size.height = height;
  v44 = CGRectGetMidX(v99);
  v100.origin.x = x;
  v100.origin.y = y;
  v100.size.width = width;
  v100.size.height = height;
  v45 = CGRectGetMidY(v100);
  v101.origin.x = x;
  v101.origin.y = y;
  v101.size.width = width;
  v101.size.height = height;
  v46 = CGRectGetWidth(v101) * 0.95;
  v102.origin.x = x;
  v102.origin.y = y;
  v102.size.width = width;
  v102.size.height = height;
  v47 = CGRectGetHeight(v102) * 0.8;
  v103.origin.x = v44 - v46 * 0.5;
  v103.origin.y = v45 - v47 * 0.5;
  v103.size.width = v46;
  v103.size.height = v47;
  v48 = CGRectGetWidth(v103);
  memset(&v95, 0, 32);
  v49 = v48 * 0.75;
  memset(&v94, 0, 32);
  v104.origin.x = v44 - v46 * 0.5;
  v104.origin.y = v45 - v47 * 0.5;
  v104.size.width = v46;
  v104.size.height = v47;
  CGRectDivide(v104, (CGRect *)&v95, (CGRect *)&v94, v49, CGRectMinXEdge);
  v92 = a1;
  if ((a4 & 1) != 0)
  {
    v105.origin.x = v44 - v46 * 0.5;
    v105.origin.y = v45 - v47 * 0.5;
    v105.size.width = v46;
    v105.size.height = v47;
    v50 = CGRectGetWidth(v105) * 0.25;
    memset(&v95, 0, 32);
    memset(&v94, 0, 32);
    v106.origin.x = v44 - v46 * 0.5;
    v106.origin.y = v45 - v47 * 0.5;
    v106.size.width = v46;
    v106.size.height = v47;
    CGRectDivide(v106, (CGRect *)&v95, (CGRect *)&v94, v50, CGRectMinXEdge);
    v51 = v95.a;
    v52 = v95.b;
    v53 = v95.c;
    v54 = v95.d;
    v55 = v94.c;
    v89.size.width = v94.b;
    v89.size.height = v94.a;
    v56 = 1;
    v57 = v94.d;
  }
  else
  {
    v56 = 0;
    v55 = v95.c;
    v89.size.width = v95.b;
    v89.size.height = v95.a;
    v57 = v95.d;
    v51 = v94.a;
    v52 = v94.b;
    v53 = v94.c;
    v54 = v94.d;
  }
  v58 = (void *)objc_opt_self();
  v59 = &selRef_whiteColor;
  if ((a3 & 1) == 0)
    v59 = &selRef_blackColor;
  v60 = objc_msgSend(v58, *v59);
  v61 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4AD0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF35B30;
  v63 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v64 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  *(_QWORD *)(inited + 40) = v61;
  v65 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 64) = v64;
  *(_QWORD *)(inited + 72) = v65;
  v66 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(_QWORD *)(inited + 80) = v60;
  v67 = (void *)*MEMORY[0x1E0DC1258];
  *(_QWORD *)(inited + 104) = v66;
  *(_QWORD *)(inited + 112) = v67;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(v68 + 32) = v56;
  *(_QWORD *)(inited + 144) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  *(_QWORD *)(inited + 120) = v68;
  v69 = v63;
  *(_QWORD *)&v89.origin.y = v61;
  v70 = v65;
  v71 = v60;
  v72 = v67;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v73 = v92;
  v74 = objc_msgSend(v92, sel_displayTitle);
  if (v74
    || (v74 = objc_msgSend(v73, sel_sourceLastKnownName)) != 0
    || (v74 = objc_msgSend(v73, sel_webpageDisplayDomain)) != 0)
  {
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v77 = v76;

  }
  else
  {
    v75 = 0;
    v77 = 0xE000000000000000;
  }
  v78 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v79 = (void *)MEMORY[0x1DF0E41AC](v75, v77);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v81 = objc_msgSend(v78, sel_initWithString_attributes_, v79, isa);

  v82 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  v83 = SynapseLinkItem.init(synapseItem:)(v73);
  v84 = SynapseLinkItem.icon.getter();
  v107.origin.x = v51;
  v107.origin.y = v52;
  v107.size.width = v53;
  v107.size.height = v54;
  v85 = CGRectGetWidth(v107);
  v108.origin.x = v51;
  v108.origin.y = v52;
  v108.size.width = v53;
  v108.size.height = v54;
  v86 = CGRectGetHeight(v108);
  if (v86 < v85)
    v85 = v86;
  v109.origin.x = v51;
  v109.origin.y = v52;
  v109.size.width = v53;
  v109.size.height = v54;
  v87 = CGRectGetMidX(v109);
  v110.origin.x = v51;
  v110.origin.y = v52;
  v110.size.width = v53;
  v110.size.height = v54;
  v88 = CGRectGetMidY(v110) - v85 * 0.5;
  UIGraphicsPushContext(a2);
  objc_msgSend(v81, sel_drawInRect_, v89.size.height, v89.size.width, v55, v57);
  objc_msgSend(v84, sel_drawInRect_, v87 - v85 * 0.5, v88, v85, v85);
  UIGraphicsPopContext();
  CGContextRestoreGState(a2);

}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for NSAttributedStringKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

char *SignatureEditViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v7;
  id v8;
  char *v9;
  char *v10;
  void *v11;
  id v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  objc_super v19;

  *(_OWORD *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_panelSize] = xmmword_1DDF35B40;
  v7 = OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_navigationBar;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC3A28]);
  v9 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, sel_init);
  v10 = &v9[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  *(_QWORD *)v10 = UnknownCanvasElementView.flags.modify;
  *((_QWORD *)v10 + 1) = 0;

  if (a2)
  {
    v11 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for SignatureEditViewController();
  v12 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, v11, a3);

  v13 = (char *)v12;
  objc_msgSend(v13, sel_setModalTransitionStyle_, 0);
  objc_msgSend(v13, sel_setModalPresentationStyle_, 2);
  objc_msgSend(v13, sel_setModalInPresentation_, 1);
  objc_msgSend(v13, sel_setPreferredContentSize_, *(double *)&v13[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_panelSize], *(double *)&v13[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_panelSize + 8]);
  v14 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_navigationBar];
  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v15 = (void *)objc_opt_self();
  v16 = v14;
  v17 = objc_msgSend(v15, sel_systemBackgroundColor);
  objc_msgSend(v16, sel_setBackgroundColor_, v17);

  return v13;
}

Swift::Void __swiftcall SignatureEditViewController.viewDidLoad()()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  Class v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  Class v63;
  objc_super v64;

  v1 = v0;
  v64.receiver = v0;
  v64.super_class = (Class)type metadata accessor for SignatureEditViewController();
  objc_msgSendSuper2(&v64, sel_viewDidLoad);
  v2 = objc_msgSend(v0, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_16;
  }
  v3 = v2;
  v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_navigationBar];
  objc_msgSend(v2, sel_addSubview_, v4);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF329E0;
  v6 = objc_msgSend(v4, sel_widthAnchor);
  v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel_widthAnchor);

  v10 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v9);
  *(_QWORD *)(v5 + 32) = v10;
  v11 = objc_msgSend(v4, sel_topAnchor);
  v12 = objc_msgSend(v1, sel_view);
  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = v12;
  v14 = (void *)objc_opt_self();
  v15 = objc_msgSend(v13, sel_safeAreaLayoutGuide);

  v16 = objc_msgSend(v15, sel_topAnchor);
  v17 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v16);

  *(_QWORD *)(v5 + 40) = v17;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  type metadata accessor for SignatureListViewController();
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  v20 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion + 8];
  swift_retain();
  v21 = (void *)SignatureListViewController.__allocating_init(editable:_:)(1, v19, v20);
  v22 = objc_msgSend(v21, sel_view);
  if (!v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = v22;
  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  objc_msgSend(v1, sel_addChildViewController_, v21);
  v24 = objc_msgSend(v1, sel_view);
  if (!v24)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v25 = v24;
  v26 = objc_msgSend(v21, sel_view);
  if (!v26)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v27 = v26;
  objc_msgSend(v25, sel_addSubview_, v26);

  objc_msgSend(v21, sel_didMoveToParentViewController_, v1);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1DDF329D0;
  v29 = objc_msgSend(v21, sel_view);
  if (!v29)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, sel_leadingAnchor);

  v32 = objc_msgSend(v1, sel_view);
  if (!v32)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, sel_leadingAnchor);

  v35 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v34);
  *(_QWORD *)(v28 + 32) = v35;
  v36 = objc_msgSend(v21, sel_view);
  if (!v36)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, sel_trailingAnchor);

  v39 = objc_msgSend(v1, sel_view);
  if (!v39)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v40 = v39;
  v41 = objc_msgSend(v39, sel_trailingAnchor);

  v42 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v41);
  *(_QWORD *)(v28 + 40) = v42;
  v43 = objc_msgSend(v21, sel_view);
  if (!v43)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v44 = v43;
  v45 = objc_msgSend(v43, sel_topAnchor);

  v46 = objc_msgSend(v4, sel_bottomAnchor);
  v47 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v46);

  *(_QWORD *)(v28 + 48) = v47;
  v48 = objc_msgSend(v21, sel_view);
  if (!v48)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v49 = v48;
  v50 = objc_msgSend(v48, sel_bottomAnchor);

  v51 = objc_msgSend(v1, sel_view);
  if (v51)
  {
    v52 = v51;
    v53 = objc_msgSend(v51, sel_safeAreaLayoutGuide);

    v54 = objc_msgSend(v53, sel_bottomAnchor);
    v55 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v54);

    *(_QWORD *)(v28 + 56) = v55;
    specialized Array._endMutation()();
    v56 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_activateConstraints_, v56);

    v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A48]), sel_init);
    v58 = objc_msgSend(v21, sel_title);
    objc_msgSend(v57, sel_setTitle_, v58);

    v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 4, v1, sel_addAction_);
    objc_msgSend(v57, sel_setLeftBarButtonItem_, v59);

    v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 0, v1, sel_doneAction_);
    objc_msgSend(v57, sel_setRightBarButtonItem_, v60);

    v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v61 + 32) = v57;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINavigationItem);
    v62 = v57;
    v63 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setItems_, v63);

    return;
  }
LABEL_27:
  __break(1u);
}

id SignatureEditViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureEditViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SignatureEditViewController()
{
  return objc_opt_self();
}

void specialized SignatureEditViewController.addAction(_:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  char *v16;
  _QWORD v17[6];

  v1 = v0;
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DDB0F000, v3, v4, "showing creation panel", v5, 2u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion + 8];
  v8 = objc_allocWithZone((Class)type metadata accessor for SignatureCreationViewController());
  swift_retain();
  v9 = (char *)objc_msgSend(v8, sel_initWithNibName_bundle_, 0, 0);
  v10 = &v9[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v6;
  swift_release();
  v11 = objc_msgSend(v1, sel_presentingViewController);
  if (v11)
  {
    v12 = v11;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v13 + 24) = v9;
    v17[4] = partial apply for closure #1 in SignatureEditViewController.addAction(_:);
    v17[5] = v13;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1107296256;
    v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v17[3] = &block_descriptor_6_2;
    v14 = _Block_copy(v17);
    v15 = v12;
    v16 = v9;
    swift_release();
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, v14);
    _Block_release(v14);

  }
  else
  {
    __break(1u);
  }
}

void specialized SignatureEditViewController.doneAction(_:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  v1 = v0;
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DDB0F000, v3, v4, "edit panel done", v5, 2u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v1;
  v9[4] = partial apply for closure #1 in SignatureEditViewController.doneAction(_:);
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[3] = &block_descriptor_13;
  v7 = _Block_copy(v9);
  v8 = v1;
  swift_release();
  objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, v7);
  _Block_release(v7);
}

uint64_t sub_1DDBD72AC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SignatureEditViewController.doneAction(_:)()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(*(_QWORD *)(v0 + 16)
                                     + OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion);
  swift_retain();
  v1(0);
  return swift_release();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t sub_1DDBD7328()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in SignatureEditViewController.addAction(_:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_presentViewController_animated_completion_, *(_QWORD *)(v0 + 24), 1, 0);
}

void @objc SignatureView.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v5 = direct field offset for SignatureView.imageView;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3890]);
  v7 = a3;
  *(_QWORD *)&a1[v5] = objc_msgSend(v6, sel_init);
  *(_QWORD *)&a1[direct field offset for SignatureView.defaultSignatureWidth] = 2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SignatureView.modifiableProperties.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void (*v11)(char *, char *, uint64_t);
  unsigned __int8 *v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v20 - v8;
  v10 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  v11 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v11(v9, v10, v1);
  swift_getKeyPath();
  v12 = (unsigned __int8 *)lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  v13 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  result = v13(v9, v1);
  if (v20)
  {
    v15 = v20[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned];

    if (v15 == 1)
    {
      v16 = ((uint64_t (*)(char *, char *, uint64_t))v11)(v5, v10, v1);
      MEMORY[0x1E0C80A78](v16, v17);
      *(&v20 - 4) = (unsigned __int8 *)type metadata accessor for Signature();
      *(&v20 - 3) = v12;
      *(&v20 - 2) = (unsigned __int8 *)&protocol witness table for Signature;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v13(v5, v1);
      result = 0;
      if ((v20 & 4) == 0)
      {
        v18 = 9;
        if ((v20 & 0x80) == 0)
          v18 = 11;
        v19 = 3;
        if ((v20 & 0x80) != 0)
          v19 = 1;
        if ((v20 & 0x10) != 0)
          return v19;
        else
          return v18;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SignatureView.isSelectable.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 *v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v6, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  if (v9)
  {
    v8 = v9[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned];

    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SignatureView.isSelected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected);
}

void SignatureView.isSelected.setter(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset();
  SignatureView.updateUI()();
}

uint64_t closure #1 in SignatureView.width.setter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t SignatureView.color.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void (*v11)(char *, char *, uint64_t);
  void (*v12)(char *, uint64_t);
  uint64_t result;
  id v14;
  id v15;
  id v16;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16 - v8;
  v10 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  v11 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v11(v9, v10, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v9, v1);
  if (!v16)
    return 0;

  v11(v6, v10, v1);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  result = ((uint64_t (*)(char *, uint64_t))v12)(v6, v1);
  v14 = v16;
  if (v16)
  {
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v16);

    return (uint64_t)v15;
  }
  __break(1u);
  return result;
}

void @objc SignatureView.traitCollectionDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  if (a3)
  {
    v8 = a3;
    v4 = a1;
    v5 = objc_msgSend(v8, sel_userInterfaceStyle);
    v6 = objc_msgSend(v4, sel_traitCollection);
    v7 = objc_msgSend(v6, sel_userInterfaceStyle);

    if (v5 != v7)
      SignatureView.updateUI()();

  }
}

Swift::Void __swiftcall SignatureView.layoutSubviews()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  void (*v14)(char *, uint64_t);
  __n128 v15;
  double v16;
  double v17;
  CGFloat tx;
  CGFloat ty;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  id v23;
  id v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  CGFloat a;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  objc_class *v39;
  Swift::Bool v40;
  void *v41;
  uint64_t v42;
  id v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  __int128 v46;
  __int128 v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  objc_super v51;
  UIColor_optional v52;
  Swift::Int_optional v53;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v45 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v42 - v7;
  v9 = (objc_class *)type metadata accessor for SignatureView();
  v51.receiver = v0;
  v51.super_class = v9;
  objc_msgSendSuper2(&v51, sel_layoutSubviews);
  v10 = *(void **)((char *)v0 + direct field offset for SignatureView.imageView);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  objc_msgSend(v10, sel_setTransform_, &t1);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v10, sel_setFrame_);
  v11 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  v43 = v0;
  v12 = (char *)v0 + v11;
  swift_beginAccess();
  v13 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v13(v8, v12, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v8, v1);
  v15.n128_u64[0] = *(_QWORD *)&t1.c;
  if (t1.c >= 0.0)
    v16 = 1.0;
  else
    v16 = -1.0;
  ((void (*)(char *, char *, uint64_t, __n128))v13)(v8, v12, v1, v15);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v14(v8, v1);
  if (t1.d >= 0.0)
    v17 = 1.0;
  else
    v17 = -1.0;
  CGAffineTransformMakeScale(&t1, v16, v17);
  v47 = *(_OWORD *)&t1.a;
  v46 = *(_OWORD *)&t1.c;
  tx = t1.tx;
  ty = t1.ty;
  v44 = v13;
  v13(v8, v12, v1);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v14(v8, v1);
  CGAffineTransformMakeRotation(&t1, t2.a);
  v20 = *(_OWORD *)&t1.a;
  v21 = *(_OWORD *)&t1.c;
  v22 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v47;
  *(_OWORD *)&t1.c = v46;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v20;
  *(_OWORD *)&t2.c = v21;
  *(_OWORD *)&t2.tx = v22;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  objc_msgSend(v10, sel_setTransform_, &t1);
  v23 = objc_msgSend(v10, sel_image);

  if (!v23)
    goto LABEL_11;
  v24 = objc_msgSend(v10, sel_image);
  if (!v24)
  {
    __break(1u);
    return;
  }
  v25 = v24;
  objc_msgSend(v24, sel_size);
  v27 = v26;
  v29 = v28;

  objc_msgSend(v10, sel_bounds);
  if (v27 != v31 || v29 != v30)
  {
LABEL_11:
    v32 = v45;
    v33 = v44;
    v44(v45, v12, v1);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v14(v32, v1);
    a = t2.a;
    if (*(_QWORD *)&t2.a)
    {
      objc_msgSend(v43, sel_bounds);
      v36 = v35;
      v38 = v37;
      v39 = (objc_class *)SignatureView.color.getter();
      v33(v8, v12, v1);
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v14(v8, v1);
      v52.is_nil = LOBYTE(t1.a);
      v53.value = LOBYTE(t1.b);
      v52.value.super.isa = v39;
      v53.is_nil = 0;
      v41 = (void *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v38, v36), v52, v53, v40);

    }
    else
    {
      v41 = 0;
    }
    objc_msgSend(v10, sel_setImage_, v41);

  }
}

void @objc SignatureView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  SignatureView.layoutSubviews()();

}

Swift::Void __swiftcall SignatureView.updateUI()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  char isEscapingClosureAtFileLocation;
  void *v26;
  _QWORD aBlock[6];
  id v28;

  v1 = v0;
  v2 = type metadata accessor for Signature();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized CanvasElementView.updateGestures()();
  specialized CanvasElementView.updateFrame()();
  v11 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v11)
  {
    v13 = v11;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x668))();

  }
  v14 = (char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v14, v6);
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  outlined destroy of Signature((uint64_t)v5);
  v15 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  v28 = v15;
  v16 = SignatureView.color.getter();
  if (v16)
  {
    v17 = (void *)v16;
    v18 = objc_msgSend(v1, sel_traitCollection);
    objc_msgSend(v18, sel_userInterfaceStyle);

    v19 = static PKInkingTool.convertColor(_:from:to:)();
    v28 = (id)v19;

  }
  v20 = objc_msgSend(v1, sel_traitCollection);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v1;
  *(_QWORD *)(v21 + 24) = &v28;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for closure #1 in SignatureView.updateUI();
  *(_QWORD *)(v22 + 24) = v21;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_14;
  v23 = _Block_copy(aBlock);
  v24 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v20, sel_performAsCurrentTraitCollection_, v23);

  _Block_release(v23);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v26 = v28;
    swift_release();

  }
}

void closure #1 in SignatureView.updateUI()(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, uint64_t);
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  Swift::Bool v23;
  void *v24;
  uint64_t v25;
  id v26;
  _BOOL8 v27;
  unsigned __int8 v28;
  void *v29;
  UIColor_optional v30;
  Swift::Int_optional v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v25 - v11;
  v26 = *(id *)((char *)a1 + direct field offset for SignatureView.imageView);
  v13 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v12, v13, v4);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v12, v4);
  v16 = v29;
  if (v29)
  {
    objc_msgSend(a1, sel_bounds);
    v18 = v17;
    v20 = v19;
    v21 = *a2;
    v14(v9, v13, v4);
    swift_getKeyPath();
    v22 = v21;
    Capsule<>.subscript.getter();
    swift_release();
    v15(v9, v4);
    v30.is_nil = v27;
    v31.value = v28;
    v30.value.super.isa = (Class)v21;
    v31.is_nil = 0;
    v24 = (void *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v20, v18), v30, v31, v23);

  }
  else
  {
    v24 = 0;
  }
  objc_msgSend(v26, sel_setImage_, v24);

}

id @objc SignatureView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_, *(_QWORD *)(a1 + direct field offset for SignatureView.imageView));
}

id SignatureView.dragInteractionPreviewForLifting(item:session:)()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_, *(_QWORD *)(v0 + direct field offset for SignatureView.imageView));
}

Swift::OpaquePointer_optional __swiftcall SignatureView.pasteboardRepresentation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _BYTE *v6;
  id v7;
  Swift::Bool v8;
  id v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[80];
  Swift::OpaquePointer_optional result;

  v1 = type metadata accessor for UTType();
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = objc_msgSend(*(id *)(v0 + direct field offset for SignatureView.imageView), sel_image, v4);
  if (v7)
  {
    v9 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
    static UTType.png.getter();
    v11 = UTType.identifier.getter();
    v13 = v12;
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v6, v1);
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v13;
    *(_QWORD *)(inited + 72) = type metadata accessor for UIImage();
    *(_QWORD *)(inited + 48) = v9;
    v7 = (id)specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  result.value._rawValue = v7;
  result.is_nil = v8;
  return result;
}

void SignatureView.__ivar_destroyer()
{
  uint64_t v0;

}

id SignatureView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc SignatureView.__ivar_destroyer(uint64_t a1)
{

}

uint64_t type metadata accessor for SignatureView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SignatureView;
  if (!type metadata singleton initialization cache for SignatureView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SignatureView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SignatureView()
{
  return type metadata accessor for SignatureView();
}

unint64_t lazy protocol witness table accessor for type Signature and conformance Signature()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Signature and conformance Signature;
  if (!lazy protocol witness table cache variable for type Signature and conformance Signature)
  {
    v1 = type metadata accessor for Signature();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Signature, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature);
  }
  return result;
}

unint64_t type metadata accessor for UIImage()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIImage;
  if (!lazy cache variable for type metadata for UIImage)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  }
  return result;
}

uint64_t outlined destroy of Signature(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Signature();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DDBD8754()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in SignatureView.updateUI()()
{
  uint64_t v0;

  closure #1 in SignatureView.updateUI()(*(_QWORD **)(v0 + 16), *(void ***)(v0 + 24));
}

uint64_t sub_1DDBD8780()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_1DDBD87B0()
{
  return 24;
}

__n128 sub_1DDBD87BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

_QWORD *specialized SignatureView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  char *v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  char *v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  Swift::String v32;
  Swift::String_optional v33;
  Swift::String v34;
  Swift::String v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t countAndFlagsBits;
  unint64_t object;
  void *v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  Swift::String v51;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = direct field offset for SignatureView.imageView;
  v21 = objc_allocWithZone(MEMORY[0x1E0DC3890]);
  v22 = v7;
  *(_QWORD *)&v7[v20] = objc_msgSend(v21, sel_init);
  *(_QWORD *)&v22[direct field offset for SignatureView.defaultSignatureWidth] = 2;

  v47 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  v23 = a3;
  v24 = a2;
  v25 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v19, a2, a3, a4, a5, a6, a7);

  v26 = *(_QWORD *)((char *)v25 + direct field offset for SignatureView.imageView);
  v27 = v25;
  objc_msgSend(v27, sel_addSubview_, v26);
  objc_msgSend(v27, sel_setIsAccessibilityElement_, 1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  v28 = v27;
  Capsule<>.subscript.getter();
  swift_release();
  v29 = v48;
  if (v48)
  {
    v30 = *(_QWORD *)&v48[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
    v31 = *(_QWORD *)&v48[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8];
    outlined copy of SignatureDescription(v30, v31);

    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v51._object = (void *)0x80000001DDF501D0;
    v32._countAndFlagsBits = 0x727574616E676953;
    v32._object = (void *)0xE900000000000065;
    v33.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v33.value._object = (void *)0xEB00000000656C62;
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v51._countAndFlagsBits = 0xD00000000000001DLL;
    v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, paperKitBundle, v34, v51);
    outlined consume of SignatureDescription(v30, v31);
    v36 = (void *)MEMORY[0x1DF0E41AC](v35._countAndFlagsBits, v35._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    v36 = 0;
  }
  objc_msgSend(v28, sel_setAccessibilityLabel_, v36);

  swift_getKeyPath();
  v37 = v28;
  Capsule<>.subscript.getter();
  swift_release();
  v38 = v50;
  if (v50)
  {
    v40 = *(_QWORD *)&v50[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
    v39 = *(_QWORD *)&v50[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8];
    outlined copy of SignatureDescription(v40, v39);

    if (v39 - 1 >= 5)
    {
      if (v39)
        countAndFlagsBits = v40;
      else
        countAndFlagsBits = 0;
      if (v39)
        object = v39;
      else
        object = 0xE000000000000000;
    }
    else
    {
      v48 = (char *)v40;
      v49 = v39;
      v41 = SignatureDescription.localizedTitle()();
      countAndFlagsBits = v41._countAndFlagsBits;
      object = (unint64_t)v41._object;
      outlined consume of SignatureDescription(v40, v39);
    }
    v45 = v47;
    v44 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits, object);
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = 0;
    v45 = v47;
  }
  objc_msgSend(v37, sel_setAccessibilityValue_, v44);

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(a1, v15);
  return v37;
}

uint64_t CanvasElementFlags.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

PaperKit::CanvasElementFlags __swiftcall CanvasElementFlags.init(rawValue:)(PaperKit::CanvasElementFlags rawValue)
{
  PaperKit::CanvasElementFlags *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static CanvasElementFlags.hidden.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CanvasElementFlags.readOnly.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static CanvasElementFlags.locked.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static CanvasElementFlags.lockedStyle.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static CanvasElementFlags.lockedRotation.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static CanvasElementFlags.useOriginalPDFAppearance.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static CanvasElementFlags.useOriginalPDFPosition.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static CanvasElementFlags.lockedSize.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static CanvasElementFlags.shouldBurnIn.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

BOOL CanvasElementFlags.isDefaultState.getter()
{
  _QWORD *v0;

  return *v0 == 0;
}

void CanvasElementFlags.init(defaultState:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CanvasElementFlags()
{
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CanvasElementFlags()
{
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CanvasElementFlags()
{
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CanvasElementFlags()
{
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  return CRValue<>.minEncodingVersion.getter();
}

ValueMetadata *type metadata accessor for CanvasElementFlags()
{
  return &type metadata for CanvasElementFlags;
}

uint64_t SharedTagged_9<>.layout()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _UNKNOWN **v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  SharedTagged_9.tag.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRExtensible<TaggedCanvasElement.Enum>);
  CRExtensible.rawValue.getter();
  switch(v9)
  {
    case 0:
      v3 = type metadata accessor for PaperLayout();
      v4 = &protocol witness table for PaperLayout;
      goto LABEL_12;
    case 1:
      v3 = type metadata accessor for ImageLayout();
      v4 = &protocol witness table for ImageLayout;
      goto LABEL_12;
    case 2:
      v3 = type metadata accessor for GraphLayout();
      v4 = &protocol witness table for GraphLayout;
      goto LABEL_12;
    case 3:
      v3 = type metadata accessor for TextBoxLayout();
      v4 = &protocol witness table for TextBoxLayout;
      goto LABEL_12;
    case 4:
      v3 = type metadata accessor for LinkLayout();
      v4 = &protocol witness table for LinkLayout;
      goto LABEL_12;
    case 5:
      v3 = type metadata accessor for ShapeLayout();
      v4 = &protocol witness table for ShapeLayout;
      goto LABEL_12;
    case 6:
      v3 = type metadata accessor for SignatureLayout();
      v4 = &protocol witness table for SignatureLayout;
      goto LABEL_12;
    case 7:
      v3 = type metadata accessor for PaperDocumentPageLayout();
      v4 = &protocol witness table for PaperDocumentPageLayout;
      goto LABEL_12;
    case 8:
      v3 = type metadata accessor for PDFAnnotationElementLayout();
      v4 = &protocol witness table for PDFAnnotationElementLayout;
LABEL_12:
      a1[3] = v3;
      a1[4] = (uint64_t)v4;
      __swift_allocate_boxed_opaque_existential_1(a1);
      result = MEMORY[0x1DF0E34A4](v2);
      break;
    default:
      v5 = type metadata accessor for UnknownLayout();
      a1[3] = v5;
      a1[4] = (uint64_t)&protocol witness table for UnknownLayout;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      MEMORY[0x1DF0E34A4](v2);
      SharedTagged_9.tag.getter();
      result = CRExtensible.rawValue.getter();
      *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v5 + 20)) = v8;
      break;
  }
  return result;
}

uint64_t specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];

  v44 = a2;
  v45 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  v21 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - v24;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Capsule<Shape>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Capsule<Shape>?);
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v27(v25, v16, v17);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v41 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v28 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v29 = swift_allocObject();
  v42 = v25;
  v30 = v44;
  v40 = v12;
  v31 = v45;
  *(_QWORD *)(v29 + 16) = v44;
  *(_QWORD *)(v29 + 24) = v31;
  v27((char *)(v29 + v28), v21, v17);
  *(_QWORD *)(v29 + ((v19 + v28 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_124;
  v32 = _Block_copy(aBlock);
  v33 = a4;
  v34 = v30;
  v35 = v31;
  swift_release();
  v36 = v40;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v37 = v43;
  v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v39 = (void *)v41;
  MEMORY[0x1DF0E48C0](0, v36, v37, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v42, v17);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];

  v44 = a2;
  v45 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  v21 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - v24;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v27(v25, v16, v17);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v41 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v28 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v29 = swift_allocObject();
  v42 = v25;
  v30 = v44;
  v40 = v12;
  v31 = v45;
  *(_QWORD *)(v29 + 16) = v44;
  *(_QWORD *)(v29 + 24) = v31;
  v27((char *)(v29 + v28), v21, v17);
  *(_QWORD *)(v29 + ((v19 + v28 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_218;
  v32 = _Block_copy(aBlock);
  v33 = a4;
  v34 = v30;
  v35 = v31;
  swift_release();
  v36 = v40;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v37 = v43;
  v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v39 = (void *)v41;
  MEMORY[0x1DF0E48C0](0, v36, v37, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v42, v17);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];

  v44 = a2;
  v45 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  v21 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - v24;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Capsule<Link>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Capsule<Link>?);
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v27(v25, v16, v17);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v41 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v28 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v29 = swift_allocObject();
  v42 = v25;
  v30 = v44;
  v40 = v12;
  v31 = v45;
  *(_QWORD *)(v29 + 16) = v44;
  *(_QWORD *)(v29 + 24) = v31;
  v27((char *)(v29 + v28), v21, v17);
  *(_QWORD *)(v29 + ((v19 + v28 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_98;
  v32 = _Block_copy(aBlock);
  v33 = a4;
  v34 = v30;
  v35 = v31;
  swift_release();
  v36 = v40;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v37 = v43;
  v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v39 = (void *)v41;
  MEMORY[0x1DF0E48C0](0, v36, v37, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v42, v17);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];

  v44 = a2;
  v45 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphElement>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  v21 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - v24;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v27(v25, v16, v17);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v41 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v28 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v29 = swift_allocObject();
  v42 = v25;
  v30 = v44;
  v40 = v12;
  v31 = v45;
  *(_QWORD *)(v29 + 16) = v44;
  *(_QWORD *)(v29 + 24) = v31;
  v27((char *)(v29 + v28), v21, v17);
  *(_QWORD *)(v29 + ((v19 + v28 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_153;
  v32 = _Block_copy(aBlock);
  v33 = a4;
  v34 = v30;
  v35 = v31;
  swift_release();
  v36 = v40;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v37 = v43;
  v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v39 = (void *)v41;
  MEMORY[0x1DF0E48C0](0, v36, v37, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v42, v17);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];

  v44 = a2;
  v45 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  v21 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - v24;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Capsule<Image>?);
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v27(v25, v16, v17);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v41 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v28 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v29 = swift_allocObject();
  v42 = v25;
  v30 = v44;
  v40 = v12;
  v31 = v45;
  *(_QWORD *)(v29 + 16) = v44;
  *(_QWORD *)(v29 + 24) = v31;
  v27((char *)(v29 + v28), v21, v17);
  *(_QWORD *)(v29 + ((v19 + v28 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_182;
  v32 = _Block_copy(aBlock);
  v33 = a4;
  v34 = v30;
  v35 = v31;
  swift_release();
  v36 = v40;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v37 = v43;
  v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v39 = (void *)v41;
  MEMORY[0x1DF0E48C0](0, v36, v37, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v42, v17);
}

uint64_t specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7, uint64_t a8)
{
  void *v16;
  id v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v16 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF50250);
  v17 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v16);

  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2)
                                                                                           + 0x480);
  v19 = a5(0);
  v20 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a6, a5, a7);
  return v18(a3, 1, a4, v17, v19, v20, a8);
}

uint64_t protocol witness for static Layout.canHandle(session:) in conformance SignatureLayout(void *a1)
{
  char v1;

  specialized static Layout.canHandle(session:)(a1);
  return v1 & 1;
}

uint64_t specialized static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, void *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  void *v28;
  NSDictionary v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  double aBlock;
  uint64_t v60;
  uint64_t (*v61)();
  double v62;
  uint64_t (*v63)();
  uint64_t v64;

  v16 = type metadata accessor for UTType();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65, v19);
  v23 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v22);

  if ((v23 & 1) != 0
    || (v24 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v25 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v24),
        v24,
        v25))
  {
    v26 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v27 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v26, 0);

    if (v27)
    {
      v28 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v30 = swift_allocObject();
      *(_QWORD *)(v30 + 16) = a2;
      *(double *)(v30 + 24) = a4;
      *(double *)(v30 + 32) = a5;
      *(double *)(v30 + 40) = a6;
      *(double *)(v30 + 48) = a7;
      *(_QWORD *)(v30 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v30 + 64) = 0;
      v63 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v64 = v30;
      aBlock = MEMORY[0x1E0C809B0];
      v60 = 1107296256;
      v31 = &block_descriptor_118;
    }
    else
    {
      v32 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      v33 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v32, 0);

      if (!v33)
        return 0;
      v28 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v34 = swift_allocObject();
      *(_QWORD *)(v34 + 16) = a2;
      *(double *)(v34 + 24) = a4;
      *(double *)(v34 + 32) = a5;
      *(double *)(v34 + 40) = a6;
      *(double *)(v34 + 48) = a7;
      *(_QWORD *)(v34 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v34 + 64) = 0;
      v63 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v64 = v34;
      aBlock = MEMORY[0x1E0C809B0];
      v60 = 1107296256;
      v31 = &block_descriptor_111;
    }
    v61 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    v62 = *(double *)&v31;
    v35 = _Block_copy(&aBlock);
    v36 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v28, v29.super.isa, v35);
    _Block_release(v35);

    return 1;
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v58 = v44;
    aBlock = a4;
    v60 = *(_QWORD *)&a5;
    v61 = *(uint64_t (**)())&a6;
    v62 = a7;
    LOBYTE(v63) = 0;
    CRContext.assetManager.getter();
    v45 = (_QWORD *)swift_allocObject();
    v45[2] = a1;
    v45[3] = a2;
    v45[4] = a3;
    v46 = a3;
    v47 = a2;
    v48 = a1;
    static UTType.utf8PlainText.getter();
    v49 = UTType.identifier.getter();
    v51 = v50;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    v52 = (void *)MEMORY[0x1DF0E41AC](v49, v51);
    swift_bridgeObjectRelease();
    v37 = (uint64_t)objc_msgSend(v48, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v52, 0);

    if ((_DWORD)v37)
    {
      v53 = swift_allocObject();
      *(_QWORD *)(v53 + 16) = v39;
      *(_QWORD *)(v53 + 24) = v41;
      v54 = v58;
      *(_QWORD *)(v53 + 32) = v43;
      *(_QWORD *)(v53 + 40) = v54;
      outlined init with take of CGRect?((uint64_t)&aBlock, v53 + 48);
      *(double *)(v53 + 88) = a8;
      *(_BYTE *)(v53 + 96) = 9;
      *(_QWORD *)(v53 + 104) = 0;
      *(_QWORD *)(v53 + 112) = 0;
      v37 = 1;
      *(_BYTE *)(v53 + 120) = 1;
      *(_QWORD *)(v53 + 128) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(_QWORD *)(v53 + 136) = v45;
      lazy protocol witness table accessor for type String and conformance String();
      swift_retain();
      v55 = (void *)NSItemProvider.loadObject<A>(ofClass:completionHandler:)();
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
    }
    swift_release();
  }
  return v37;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  void *v28;
  NSDictionary v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t ObjCClassFromMetadata;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t aBlock;
  uint64_t v68;
  uint64_t (*v69)();
  void *v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  _QWORD v73[4];
  char v74;

  v16 = type metadata accessor for UTType();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65, v19);
  v23 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v22);

  if ((v23 & 1) != 0
    || (v24 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v25 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v24),
        v24,
        v25))
  {
    v26 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v27 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v26, 0);

    if (v27)
    {
      v28 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v30 = swift_allocObject();
      *(_QWORD *)(v30 + 16) = a2;
      *(double *)(v30 + 24) = a4;
      *(double *)(v30 + 32) = a5;
      *(double *)(v30 + 40) = a6;
      *(double *)(v30 + 48) = a7;
      *(_QWORD *)(v30 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v30 + 64) = 0;
      v71 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v72 = v30;
      aBlock = MEMORY[0x1E0C809B0];
      v68 = 1107296256;
      v31 = &block_descriptor_92;
    }
    else
    {
      v32 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      v33 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v32, 0);

      if (!v33)
        return 0;
      v28 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v34 = swift_allocObject();
      *(_QWORD *)(v34 + 16) = a2;
      *(double *)(v34 + 24) = a4;
      *(double *)(v34 + 32) = a5;
      *(double *)(v34 + 40) = a6;
      *(double *)(v34 + 48) = a7;
      *(_QWORD *)(v34 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v34 + 64) = 0;
      v71 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v72 = v34;
      aBlock = MEMORY[0x1E0C809B0];
      v68 = 1107296256;
      v31 = &block_descriptor_85_0;
    }
    v69 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    v70 = v31;
    v35 = _Block_copy(&aBlock);
    v36 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v28, v29.super.isa, v35);
    _Block_release(v35);

    return 1;
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v66 = v44;
    *(double *)v73 = a4;
    *(double *)&v73[1] = a5;
    *(double *)&v73[2] = a6;
    *(double *)&v73[3] = a7;
    v74 = 0;
    CRContext.assetManager.getter();
    v45 = (_QWORD *)swift_allocObject();
    v45[2] = a1;
    v45[3] = a2;
    v45[4] = a3;
    v46 = *MEMORY[0x1E0DB0770];
    v47 = a3;
    v48 = a2;
    v49 = a1;
    if ((objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v46, 0) & 1) != 0)
    {
      v50 = 1;
    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
      v50 = objc_msgSend(v49, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata());
    }
    static UTType.url.getter();
    v51 = UTType.identifier.getter();
    v53 = v52;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    v54 = (void *)MEMORY[0x1DF0E41AC](v51, v53);
    swift_bridgeObjectRelease();
    v37 = (uint64_t)objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v54, 0);

    if (v50)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v56 = swift_allocObject();
      *(_QWORD *)(v56 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(_QWORD *)(v56 + 24) = v45;
      *(_QWORD *)(v56 + 32) = v39;
      *(_QWORD *)(v56 + 40) = v41;
      v57 = v66;
      *(_QWORD *)(v56 + 48) = v43;
      *(_QWORD *)(v56 + 56) = v57;
      outlined init with take of CGRect?((uint64_t)v73, v56 + 64);
      *(double *)(v56 + 104) = a8;
      *(_BYTE *)(v56 + 112) = 9;
      *(_QWORD *)(v56 + 120) = 0;
      *(_QWORD *)(v56 + 128) = 0;
      v37 = 1;
      *(_BYTE *)(v56 + 136) = 1;
      v71 = partial apply for closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      v72 = v56;
      aBlock = MEMORY[0x1E0C809B0];
      v68 = 1107296256;
      v69 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      v70 = &block_descriptor_78;
      v58 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      v59 = objc_msgSend(v49, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v58);
    }
    else
    {
      if (!(_DWORD)v37)
      {
        swift_release();
        swift_release();
        return v37;
      }
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL);
      v60 = swift_getObjCClassFromMetadata();
      v61 = swift_allocObject();
      *(_QWORD *)(v61 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(_QWORD *)(v61 + 24) = v45;
      *(_QWORD *)(v61 + 32) = v39;
      *(_QWORD *)(v61 + 40) = v41;
      v62 = v66;
      *(_QWORD *)(v61 + 48) = v43;
      *(_QWORD *)(v61 + 56) = v62;
      outlined init with take of CGRect?((uint64_t)v73, v61 + 64);
      *(double *)(v61 + 104) = a8;
      *(_BYTE *)(v61 + 112) = 9;
      *(_QWORD *)(v61 + 120) = 0;
      *(_QWORD *)(v61 + 128) = 0;
      v37 = 1;
      *(_BYTE *)(v61 + 136) = 1;
      v71 = partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      v72 = v61;
      aBlock = MEMORY[0x1E0C809B0];
      v68 = 1107296256;
      v69 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      v70 = &block_descriptor_72;
      v58 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      v59 = objc_msgSend(v49, sel_loadObjectOfClass_completionHandler_, v60, v58);
    }
    v63 = v59;
    _Block_release(v58);
    swift_release();
    swift_release();

  }
  return v37;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  void *v28;
  NSDictionary v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v64;
  uint64_t aBlock;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, void *, void *);
  void *v68;
  void (*v69)(uint64_t, unint64_t, void *);
  uint64_t v70;
  _QWORD v71[4];
  char v72;

  v16 = type metadata accessor for UTType();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65, v19);
  v23 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v22);

  if ((v23 & 1) != 0
    || (v24 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v25 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v24),
        v24,
        v25))
  {
    v26 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v27 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v26, 0);

    if (v27)
    {
      v28 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v30 = swift_allocObject();
      *(_QWORD *)(v30 + 16) = a2;
      *(double *)(v30 + 24) = a4;
      *(double *)(v30 + 32) = a5;
      *(double *)(v30 + 40) = a6;
      *(double *)(v30 + 48) = a7;
      *(_QWORD *)(v30 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v30 + 64) = 0;
      v69 = (void (*)(uint64_t, unint64_t, void *))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v70 = v30;
      aBlock = MEMORY[0x1E0C809B0];
      v66 = 1107296256;
      v31 = &block_descriptor_176_0;
    }
    else
    {
      v32 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      v33 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v32, 0);

      if (!v33)
        return 0;
      v28 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v34 = swift_allocObject();
      *(_QWORD *)(v34 + 16) = a2;
      *(double *)(v34 + 24) = a4;
      *(double *)(v34 + 32) = a5;
      *(double *)(v34 + 40) = a6;
      *(double *)(v34 + 48) = a7;
      *(_QWORD *)(v34 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v34 + 64) = 0;
      v69 = (void (*)(uint64_t, unint64_t, void *))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v70 = v34;
      aBlock = MEMORY[0x1E0C809B0];
      v66 = 1107296256;
      v31 = &block_descriptor_169;
    }
    v67 = (uint64_t (*)(uint64_t, void *, void *))thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    v68 = v31;
    v35 = _Block_copy(&aBlock);
    v36 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v28, v29.super.isa, v35);
    _Block_release(v35);

    return 1;
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    v39 = v38;
    v41 = v40;
    v64 = v42;
    v44 = v43;
    *(double *)v71 = a4;
    *(double *)&v71[1] = a5;
    *(double *)&v71[2] = a6;
    *(double *)&v71[3] = a7;
    v72 = 0;
    v45 = CRContext.assetManager.getter();
    v46 = (_QWORD *)swift_allocObject();
    v46[2] = a1;
    v46[3] = a2;
    v46[4] = a3;
    v47 = a3;
    v48 = a2;
    v49 = a1;
    static UTType.image.getter();
    v50 = UTType.identifier.getter();
    v52 = v51;
    v53 = *(void (**)(char *, uint64_t))(v17 + 8);
    v53(v21, v16);
    v54 = (void *)MEMORY[0x1DF0E41AC](v50, v52);
    swift_bridgeObjectRelease();
    v37 = (uint64_t)objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v54, 0);

    if ((_DWORD)v37)
    {
      static UTType.image.getter();
      v55 = UTType.identifier.getter();
      v57 = v56;
      v53(v21, v16);
      v58 = (void *)MEMORY[0x1DF0E41AC](v55, v57);
      swift_bridgeObjectRelease();
      v59 = swift_allocObject();
      *(_QWORD *)(v59 + 16) = v45;
      *(_QWORD *)(v59 + 24) = v39;
      *(_QWORD *)(v59 + 32) = v41;
      *(_QWORD *)(v59 + 40) = v64;
      *(_QWORD *)(v59 + 48) = v44;
      outlined init with take of CGRect?((uint64_t)v71, v59 + 56);
      *(double *)(v59 + 96) = a8;
      *(_BYTE *)(v59 + 104) = 9;
      *(_QWORD *)(v59 + 112) = 0;
      *(_QWORD *)(v59 + 120) = 0;
      v37 = 1;
      *(_BYTE *)(v59 + 128) = 1;
      *(_QWORD *)(v59 + 136) = v49;
      *(_QWORD *)(v59 + 144) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(_QWORD *)(v59 + 152) = v46;
      v69 = partial apply for closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      v70 = v59;
      aBlock = MEMORY[0x1E0C809B0];
      v66 = 1107296256;
      v67 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
      v68 = &block_descriptor_162;
      v60 = _Block_copy(&aBlock);
      v61 = v49;
      swift_retain();
      swift_retain();
      swift_release();
      v62 = objc_msgSend(v61, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v58, v60);
      _Block_release(v60);
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  return v37;
}

uint64_t specialized static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v12 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    v16 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(_QWORD *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v20 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v20;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_35;
LABEL_7:
      v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      v31 = v21;
      v25 = _Block_copy(&v28);
      v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    v22 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(_QWORD *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v24 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v24;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_28;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v12 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    v16 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(_QWORD *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v20 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v20;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_63;
LABEL_7:
      v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      v31 = v21;
      v25 = _Block_copy(&v28);
      v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    v22 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(_QWORD *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v24 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v24;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_56;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v12 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    v16 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(_QWORD *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v20 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v20;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_7;
LABEL_7:
      v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      v31 = v21;
      v25 = _Block_copy(&v28);
      v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    v22 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(_QWORD *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v24 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v24;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_15;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v12 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    v16 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(_QWORD *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v20 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v20;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_49;
LABEL_7:
      v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      v31 = v21;
      v25 = _Block_copy(&v28);
      v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    v22 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(_QWORD *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v24 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v24;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_42_0;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v12 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    v16 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(_QWORD *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v20 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v20;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_21;
LABEL_7:
      v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      v31 = v21;
      v25 = _Block_copy(&v28);
      v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    v22 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      v18 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(_QWORD *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v24 + 64) = 0;
      v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v33 = v24;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v21 = &block_descriptor_14_1;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

uint64_t specialized static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  void *v14;
  unsigned __int8 v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  void *v20;
  NSDictionary v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  id v28;
  _QWORD *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  unsigned int v34;
  void *v35;
  NSDictionary v36;
  uint64_t v37;
  void *v38;
  void *v40;
  unsigned __int8 v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)();
  void *v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;

  v14 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14);

  if ((v15 & 1) != 0
    || (v16 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920),
        v17 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v16),
        v16,
        v17))
  {
    v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    v19 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v18, 0);

    if (v19)
    {
      v20 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v21.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = a2;
      *(double *)(v22 + 24) = a4;
      *(double *)(v22 + 32) = a5;
      *(double *)(v22 + 40) = a6;
      *(double *)(v22 + 48) = a7;
      *(_QWORD *)(v22 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v22 + 64) = 0;
      v48 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v49 = v22;
      v44 = MEMORY[0x1E0C809B0];
      v45 = 1107296256;
      v23 = &block_descriptor_212;
    }
    else
    {
      v24 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      v25 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v24, 0);

      if (!v25)
        return 0;
      v20 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v21.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = a2;
      *(double *)(v26 + 24) = a4;
      *(double *)(v26 + 32) = a5;
      *(double *)(v26 + 40) = a6;
      *(double *)(v26 + 48) = a7;
      *(_QWORD *)(v26 + 56) = UnknownCanvasElementView.flags.modify;
      *(_QWORD *)(v26 + 64) = 0;
      v48 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      v49 = v26;
      v44 = MEMORY[0x1E0C809B0];
      v45 = 1107296256;
      v23 = &block_descriptor_205;
    }
    v46 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    v47 = v23;
    v27 = _Block_copy(&v44);
    v28 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v20, v21.super.isa, v27, v44, v45);
    _Block_release(v27);

    return 1;
  }
  objc_msgSend(a2, sel_frame);
  CRContext.assetManager.getter();
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = a1;
  v29[3] = a2;
  v29[4] = a3;
  v30 = a3;
  v31 = a2;
  v32 = a1;
  v33 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v34 = objc_msgSend(v32, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v33, 0);

  if (v34)
  {
    v35 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v36.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
    *(_QWORD *)(v37 + 24) = v29;
    v48 = (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)partial apply;
    v49 = v37;
    v44 = MEMORY[0x1E0C809B0];
    v45 = 1107296256;
    v38 = &block_descriptor_198;
LABEL_13:
    v46 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    v47 = v38;
    v43 = _Block_copy(&v44);
    swift_retain();
    swift_release();
    objc_msgSend(v32, sel_loadItemForTypeIdentifier_options_completionHandler_, v35, v36.super.isa, v43, v44, v45);
    _Block_release(v43);
    swift_release();
    swift_release();

    return 1;
  }
  v40 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
  v41 = objc_msgSend(v32, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v40, 0);

  if ((v41 & 1) != 0)
  {
    v35 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v36.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
    *(_QWORD *)(v42 + 24) = v29;
    v48 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:);
    v49 = v42;
    v44 = MEMORY[0x1E0C809B0];
    v45 = 1107296256;
    v38 = &block_descriptor_191;
    goto LABEL_13;
  }
  swift_release();
  swift_release();
  return 0;
}

{
  void *v14;
  unsigned __int8 v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  id v20;
  NSDictionary v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  id v39;
  id v40;
  _QWORD *v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void *, void *);
  void *v47;
  uint64_t (*v48)(uint64_t, unint64_t, uint64_t);
  _QWORD *v49;

  v14 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14);

  if ((v15 & 1) == 0)
  {
    v16 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    v17 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v16);

    if (!v17)
    {
      objc_msgSend(a2, sel_frame);
      v30 = v29;
      v32 = v31;
      v34 = v33;
      v36 = v35;
      CRContext.assetManager.getter();
      v37 = (_QWORD *)swift_allocObject();
      v37[2] = a1;
      v37[3] = a2;
      v37[4] = a3;
      v38 = a3;
      v39 = a2;
      v40 = a1;
      v21.super.isa = (Class)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF4E930);
      v41 = (_QWORD *)swift_allocObject();
      v41[2] = v30;
      v41[3] = v32;
      v41[4] = v34;
      v41[5] = v36;
      v41[6] = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      v41[7] = v37;
      v48 = partial apply for closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      v49 = v41;
      v44 = MEMORY[0x1E0C809B0];
      v45 = 1107296256;
      v46 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
      v47 = &block_descriptor_133;
      v42 = _Block_copy(&v44);
      swift_retain();
      swift_release();
      v20 = objc_msgSend(v40, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v21.super.isa, v42);
      _Block_release(v42);
      swift_release();
      swift_release();
      goto LABEL_9;
    }
  }
  v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v19 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v18, 0);

  if (v19)
  {
    v20 = (id)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v21.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(double *)(v22 + 24) = a4;
    *(double *)(v22 + 32) = a5;
    *(double *)(v22 + 40) = a6;
    *(double *)(v22 + 48) = a7;
    *(_QWORD *)(v22 + 56) = UnknownCanvasElementView.flags.modify;
    *(_QWORD *)(v22 + 64) = 0;
    v48 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
    v49 = (_QWORD *)v22;
    v44 = MEMORY[0x1E0C809B0];
    v45 = 1107296256;
    v23 = &block_descriptor_147;
LABEL_7:
    v46 = (uint64_t (*)(uint64_t, void *, void *))thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    v47 = v23;
    v27 = _Block_copy(&v44);
    v28 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v20, v21.super.isa, v27, v44, v45);
    _Block_release(v27);
LABEL_9:

    return 1;
  }
  v24 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
  v25 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v24, 0);

  if (v25)
  {
    v20 = (id)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v21.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = a2;
    *(double *)(v26 + 24) = a4;
    *(double *)(v26 + 32) = a5;
    *(double *)(v26 + 40) = a6;
    *(double *)(v26 + 48) = a7;
    *(_QWORD *)(v26 + 56) = UnknownCanvasElementView.flags.modify;
    *(_QWORD *)(v26 + 64) = 0;
    v48 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
    v49 = (_QWORD *)v26;
    v44 = MEMORY[0x1E0C809B0];
    v45 = 1107296256;
    v23 = &block_descriptor_140;
    goto LABEL_7;
  }
  return 0;
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t specialized static Layout.canHandle(session:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for UTType();
  v20 = *(_QWORD *)(v2 - 8);
  v21 = v2;
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, sel_items, v4);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
    goto LABEL_13;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    v10 = 4;
    while (1)
    {
      v11 = (v8 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v10 - 4, v8) : *(id *)(v8 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      v14 = objc_msgSend(v11, sel_itemProvider);
      static UTType.utf8PlainText.getter();
      v15 = UTType.identifier.getter();
      v17 = v16;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v21);
      v18 = (void *)MEMORY[0x1DF0E41AC](v15, v17);
      swift_bridgeObjectRelease();
      LODWORD(v17) = objc_msgSend(v14, sel_hasItemConformingToTypeIdentifier_, v18);

      if ((_DWORD)v17)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v10;
      if (v13 == v9)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

{
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __objc2_prot_list **p_base_prots;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  __objc2_prot_list **v11;
  unsigned __int8 v12;
  void *v13;
  unsigned int v14;

  v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    v4 = 4;
    p_base_prots = &MiniMenuController.base_prots;
    while (1)
    {
      v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v7 = v6;
      v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v9 = objc_msgSend(v6, sel_itemProvider);
      v10 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      v11 = p_base_prots;
      v12 = objc_msgSend(v9, (SEL)p_base_prots[286], v10);

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease();

        return 1;
      }
      v13 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
      p_base_prots = v11;
      v14 = objc_msgSend(v9, (SEL)v11 + 1964, v13);

      if (v14)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v4;
      if (v8 == v3)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for UTType();
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, sel_items, v4);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
    goto LABEL_16;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    v22 = v8 & 0xC000000000000001;
    v10 = *MEMORY[0x1E0DB0770];
    v11 = 4;
    while (1)
    {
      v12 = v22 ? (id)MEMORY[0x1DF0E4D64](v11 - 4, v8) : *(id *)(v8 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v15 = objc_msgSend(v12, sel_itemProvider);
      if ((objc_msgSend(v15, sel_hasItemConformingToTypeIdentifier_, v10) & 1) != 0
        || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem), objc_msgSend(v15, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata())))
      {

LABEL_14:
        swift_bridgeObjectRelease();
        return 1;
      }
      static UTType.url.getter();
      v16 = UTType.identifier.getter();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v24);
      v19 = (void *)MEMORY[0x1DF0E41AC](v16, v18);
      swift_bridgeObjectRelease();
      LODWORD(v18) = objc_msgSend(v15, sel_hasItemConformingToTypeIdentifier_, v19);

      if ((_DWORD)v18)
        goto LABEL_14;
      ++v11;
      if (v14 == v9)
        goto LABEL_12;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for UTType();
  v25 = *(_QWORD *)(v2 - 8);
  v26 = v2;
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, sel_items, v4);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
    goto LABEL_14;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    v24 = v8 & 0xC000000000000001;
    v23 = *MEMORY[0x1E0CD12D8];
    v10 = 4;
    v11 = 0x1F35BE000uLL;
    while (1)
    {
      v12 = v24 ? (id)MEMORY[0x1DF0E4D64](v10 - 4, v8) : *(id *)(v8 + 8 * v10);
      v13 = v12;
      v14 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      v15 = objc_msgSend(v12, sel_itemProvider);
      static UTType.image.getter();
      v16 = UTType.identifier.getter();
      v17 = v11;
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v26);
      v20 = (void *)MEMORY[0x1DF0E41AC](v16, v19);
      swift_bridgeObjectRelease();
      LODWORD(v19) = objc_msgSend(v15, (SEL)(v17 + 1964), v20);

      if ((_DWORD)v19)
      {
        v21 = objc_msgSend(v15, (SEL)(v17 + 1964), v23);

        v11 = v17;
        if ((v21 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {

        v11 = v17;
      }
      ++v10;
      if (v14 == v9)
        goto LABEL_15;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

void specialized static Layout.canHandle(session:)(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;

  v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x1DF0E4D64](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;

    }
    goto LABEL_10;
  }
  __break(1u);
}

id specialized static Layout.canHandle(session:)(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
    goto LABEL_12;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    v4 = 4;
    while (1)
    {
      v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_itemProvider);
      v9 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF4E930);
      v10 = objc_msgSend(v8, sel_hasItemConformingToTypeIdentifier_, v9);

      if ((v10 & 1) == 0)
      {
        ++v4;
        if (v7 != v3)
          continue;
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v10 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(uint64_t a1)
{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1DDBDDC28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, double, double, double, double, double, char))closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:));
}

uint64_t partial apply for closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, double, double, double, double, double, char))closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:));
}

uint64_t partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, double, double, double, double, double, char))
{
  uint64_t v3;
  char v5;

  v5 = *(_BYTE *)(v3 + 136);
  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v3 + 64, *(unsigned __int8 *)(v3 + 112), *(_QWORD *)(v3 + 120), *(_QWORD *)(v3 + 128), *(double *)(v3 + 32), *(double *)(v3 + 40), *(double *)(v3 + 48), *(double *)(v3 + 56), *(double *)(v3 + 104), v5);
}

uint64_t sub_1DDBDDCB0()
{
  return objectdestroy_94Tm(&demangling cache variable for type metadata for Capsule<Link>);
}

uint64_t partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)), (uint64_t (*)(uint64_t))type metadata accessor for Link, &lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t)&protocol conformance descriptor for Link, (uint64_t)&protocol witness table for Link);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)), (uint64_t (*)(uint64_t))type metadata accessor for Shape, (unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t)&protocol conformance descriptor for Shape, (uint64_t)&protocol witness table for Shape);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)), (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, &lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement, (uint64_t)&protocol witness table for GraphElement);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)), (uint64_t (*)(uint64_t))type metadata accessor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t)&protocol conformance descriptor for Image, (uint64_t)&protocol witness table for Image);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)), (uint64_t (*)(uint64_t))type metadata accessor for Paper, (unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t)&protocol conformance descriptor for Paper, (uint64_t)&protocol witness table for Paper);
}

uint64_t sub_1DDBDDD38()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextBoxLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t *a1, void *a2)
{
  uint64_t v2;

  return closure #1 in static TextBoxLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, v2 + 48, *(_BYTE *)(v2 + 96), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_BYTE *)(v2 + 120), *(void (**)(char *))(v2 + 128), *(CGFloat *)(v2 + 16), *(CGFloat *)(v2 + 24), *(CGFloat *)(v2 + 32), *(CGFloat *)(v2 + 40), *(double *)(v2 + 88), *(void **)(v2 + 136));
}

uint64_t sub_1DDBDDDE8()
{
  return objectdestroy_94Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t sub_1DDBDDE70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, *(CGFloat *)(v3 + 16), *(CGFloat *)(v3 + 24), *(CGFloat *)(v3 + 32), *(CGFloat *)(v3 + 40), a3, *(void (**)(_QWORD))(v3 + 48), *(_QWORD *)(v3 + 56));
}

uint64_t sub_1DDBDDEAC()
{
  return objectdestroy_94Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t sub_1DDBDDF34()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, a3, *(double *)(v3 + 24), *(double *)(v3 + 32), *(double *)(v3 + 40), *(double *)(v3 + 48), *(double *)(v3 + 96), *(_QWORD *)(v3 + 16), v3 + 56, *(_BYTE *)(v3 + 104), *(_QWORD *)(v3 + 112), *(NSObject **)(v3 + 120), *(_BYTE *)(v3 + 128), *(void **)(v3 + 136), *(_QWORD *)(v3 + 144), *(_QWORD *)(v3 + 152));
}

uint64_t sub_1DDBDDFC0()
{
  return objectdestroy_94Tm(&demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t objectdestroy_65Tm()
{
  id *v0;

  return swift_deallocObject();
}

uint64_t sub_1DDBDE07C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(a1, a2, *(void (**)(char *))(v2 + 16), *(void (**)(char *))(v2 + 24));
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(a1, *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40), *(double *)(v2 + 48), a2, *(void **)(v2 + 16), *(void (**)(uint64_t))(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_1DDBDE0F0()
{
  return objectdestroy_94Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t objectdestroy_94Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  id result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return (id)v2;
  v30 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v30;
  result = (id)specialized Dictionary.startIndex.getter(a1);
  v6 = (uint64_t)result;
  v7 = 0;
  v8 = a1 + 64;
  v24 = v1;
  v25 = v5;
  v26 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v27 = v7;
    v12 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v6);
    v13 = AnalyticsKeys.rawValue.getter(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v6));
    v28 = v14;
    v29 = v13;
    v16 = *(_QWORD *)(v30 + 16);
    v15 = *(_QWORD *)(v30 + 24);
    result = v12;
    v17 = result;
    if (v16 >= v15 >> 1)
      result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v30 + 16) = v16 + 1;
    v18 = (_QWORD *)(v30 + 24 * v16);
    v18[4] = v29;
    v18[5] = v28;
    v18[6] = v17;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v19 = *(_QWORD *)(v26 + 8 * v11);
    if ((v19 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v25;
    if (*(_DWORD *)(a1 + 36) != v25)
      goto LABEL_27;
    v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      v9 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v24;
    }
    else
    {
      v21 = v11 + 1;
      v22 = (unint64_t)(v9 + 63) >> 6;
      v10 = v24;
      if (v11 + 1 < v22)
      {
        v23 = *(_QWORD *)(v26 + 8 * v21);
        if (v23)
        {
LABEL_20:
          v9 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v11)
          {
            v23 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v23)
            {
              v21 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v27 + 1;
    v6 = v9;
    if (v27 + 1 == v10)
      return (id)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t AnalyticsKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DDBDE550 + 4 * byte_1DDF35FA0[a1]))(0xD000000000000020, 0x80000001DDF4AD90);
}

uint64_t sub_1DDBDE550(uint64_t a1)
{
  return a1 - 15;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance DragAndDropType@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnalyticsKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = AnalyticsKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == AnalyticsKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnalyticsKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  AnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnalyticsKeys()
{
  unsigned __int8 *v0;

  AnalyticsKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnalyticsKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  AnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnalyticsKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized AnalyticsKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnalyticsKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AnalyticsKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized closure #1 in Analytics.sendEventLazy(key:payload:)()
{
  return specialized closure #1 in Analytics.sendEventLazy(key:payload:)(22);
}

{
  return specialized closure #1 in Analytics.sendEventLazy(key:payload:)(20);
}

{
  uint64_t inited;
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_BYTE *)(inited + 32) = 24;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 40) = NSNumber.init(BOOLeanLiteral:)(1);
  v1 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(v1);
  swift_bridgeObjectRelease();
  if (v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  v6 = v3;
  v4 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized closure #1 in Analytics.sendEventLazy(key:payload:)(char a1)
{
  uint64_t inited;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_BYTE *)(inited + 32) = a1;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 40) = NSNumber.init(integerLiteral:)(1);
  v3 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(v3);
  swift_bridgeObjectRelease();
  if (v4[2])
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    v5 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9E0];
  }
  v8 = v5;
  v6 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, 1, &v8);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t closure #1 in Analytics.sendEventLazy(key:payload:)(uint64_t (*a1)(void))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = a1();
  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(v1);
  swift_bridgeObjectRelease();
  if (v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  v6 = v3;
  v4 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(uint64_t a1, char a2, char a3)
{
  return implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(a1, a2, a3, 6579297, 0xE300000000000000);
}

unint64_t implicit closure #1 in Analytics.recordRemoveCanvasElementEvent(type:)(uint64_t a1, char a2, char a3)
{
  return implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(a1, a2, a3, 0x65766F6D6572, 0xE600000000000000);
}

unint64_t implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF33AB0;
  *(_BYTE *)(inited + 32) = 1;
  if ((a3 & 1) == 0)
    __asm { BR              X10 }
  v10 = MEMORY[0x1DF0E41AC](0x6E776F6E6B6E75, 0xE700000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 40) = v10;
  *(_BYTE *)(inited + 48) = 2;
  *(_QWORD *)(inited + 56) = MEMORY[0x1DF0E41AC](a4, a5);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

void sub_1DDBDED88()
{
  JUMPOUT(0x1DDBDED38);
}

void sub_1DDBDED98()
{
  JUMPOUT(0x1DDBDED38);
}

void sub_1DDBDEDB0()
{
  JUMPOUT(0x1DDBDED38);
}

void sub_1DDBDEDC0()
{
  JUMPOUT(0x1DDBDED38);
}

void sub_1DDBDEDD0()
{
  JUMPOUT(0x1DDBDED38);
}

void sub_1DDBDEDEC()
{
  JUMPOUT(0x1DDBDED38);
}

void sub_1DDBDEDFC()
{
  JUMPOUT(0x1DDBDED38);
}

void Analytics.recordDidMakeSelection(type:contentType:)(char a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  Class (*v16)(uint64_t);
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;

  v4 = a1 & 1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_BYTE *)(v5 + 24) = v4;
  swift_retain();
  v6 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000002ALL, 0x80000001DDF4AE10);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:);
  *(_QWORD *)(v7 + 24) = v5;
  v18 = partial apply for closure #1 in Analytics.sendEventLazy(key:payload:);
  v19 = v7;
  v8 = MEMORY[0x1E0C809B0];
  v14 = MEMORY[0x1E0C809B0];
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v17 = &block_descriptor_16;
  v9 = _Block_copy(&v14);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v9);
  swift_release();

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v2;
  *(_BYTE *)(v10 + 24) = a2;
  swift_retain();
  v11 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4AE60);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:);
  *(_QWORD *)(v12 + 24) = v10;
  v18 = closure #1 in Analytics.sendEventLazy(key:payload:)partial apply;
  v19 = v12;
  v14 = v8;
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v17 = &block_descriptor_15;
  v13 = _Block_copy(&v14);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v13);
  swift_release();

}

unint64_t implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:)(uint64_t a1, char a2)
{
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_BYTE *)(inited + 32) = 6;
  if ((a2 & 1) != 0)
    v4 = 0x6F7373616CLL;
  else
    v4 = 7364980;
  if ((a2 & 1) != 0)
    v5 = 0xE500000000000000;
  else
    v5 = 0xE300000000000000;
  v6 = MEMORY[0x1DF0E41AC](v4, v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 40) = v6;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:)(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  uint64_t v6;

  v3 = 0x6C457361766E6163;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_BYTE *)(inited + 32) = 10;
  if (a2)
  {
    if (a2 == 1)
    {
      v5 = 0xEE0073746E656D65;
    }
    else
    {
      v3 = 0x646578696DLL;
      v5 = 0xE500000000000000;
    }
  }
  else
  {
    v5 = 0xED0000746E656D65;
  }
  v6 = MEMORY[0x1DF0E41AC](v3, v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 40) = v6;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t implicit closure #1 in Analytics.recordDragAndDropEvent(type:)(uint64_t a1, char a2)
{
  uint64_t inited;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_BYTE *)(inited + 32) = 15;
  if (a2)
  {
    if (a2 == 1)
      v4 = 0xD00000000000001DLL;
    else
      v4 = 0xD000000000000018;
    if (a2 == 1)
      v5 = 0x80000001DDF4AF00;
    else
      v5 = 0x80000001DDF4AF20;
  }
  else
  {
    v5 = 0xEB0000000065746FLL;
    v4 = 0x4E6564697374756FLL;
  }
  v6 = MEMORY[0x1DF0E41AC](v4, v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 40) = v6;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:)()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_BYTE *)(inited + 32) = 26;
  *(NSNumber *)(inited + 40) = Int._bridgeToObjectiveC()();
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

BOOL Capsule<>.hasDrawing()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.subscript.getter();
  swift_release();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v3);
  return v5;
}

BOOL Capsule<>.hasSpatialImage()()
{
  return Capsule<>.hasSpatialImage()(1);
}

BOOL Capsule<>.hasSpatialLink()()
{
  return Capsule<>.hasSpatialImage()(4);
}

BOOL Capsule<>.hasSpatialImage()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;

  v26 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v11 = *(_QWORD *)(v10 - 8);
  v23 = v10;
  v24 = v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v25 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.subscript.getter();
  swift_release();
  v19 = v23;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v19);
  do
  {
    CROrderedSet.Iterator.next()();
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, 1, v1);
    if (v20 == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v9, v1);
    SharedTagged_9.tag.getter();
    v29 = v31;
    v30 = v32;
    v27 = v26;
    v28 = 0;
    lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum();
    v21 = static CRExtensible.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  while ((v21 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v15);
  return v20 != 1;
}

uint64_t Capsule<>.hasSpatialWebHighlight()()
{
  unint64_t v0;
  uint64_t i;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  v0 = Capsule<>.links.getter();
  if (v0 >> 62)
    goto LABEL_14;
  for (i = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v2 = 4;
    while (1)
    {
      v3 = (v0 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v2 - 4, v0) : *(id *)(v0 + 8 * v2);
      v4 = v3;
      v5 = v2 - 3;
      if (__OFADD__(v2 - 4, 1))
        break;
      v6 = objc_msgSend(v3, sel_userActivity);
      if (v6)
      {
        v7 = v6;
        v8 = objc_msgSend(v6, sel__linkContextInfo);

        if (v8)
        {
          swift_bridgeObjectRelease();

          return 1;
        }
      }
      else
      {

      }
      ++v2;
      if (v5 == i)
        goto LABEL_15;
    }
    __break(1u);
LABEL_14:
    ;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for Analytics()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for DragAndDropType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDBDF7BC + 4 * byte_1DDF35FC9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDBDF7F0 + 4 * byte_1DDF35FC4[v4]))();
}

uint64_t sub_1DDBDF7F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBDF7F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDBDF800);
  return result;
}

uint64_t sub_1DDBDF80C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDBDF814);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDBDF818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBDF820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DragAndDropType()
{
  return &type metadata for DragAndDropType;
}

unint64_t lazy protocol witness table accessor for type DragAndDropType and conformance DragAndDropType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragAndDropType and conformance DragAndDropType;
  if (!lazy protocol witness table cache variable for type DragAndDropType and conformance DragAndDropType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for DragAndDropType, &type metadata for DragAndDropType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragAndDropType and conformance DragAndDropType);
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v45 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v10 = v8;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v12) = v10;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v45 - 1;
    if (v45 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (void **)(a1 + 9);
    while (1)
    {
      v29 = (uint64_t)*(v27 - 2);
      v28 = (uint64_t)*(v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v10 = v30;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v10;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x80000001DDF502F0;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1DDBDFC10()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:)()
{
  uint64_t v0;

  return implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t partial apply for closure #1 in Analytics.sendEventLazy(key:payload:)()
{
  uint64_t v0;

  return closure #1 in Analytics.sendEventLazy(key:payload:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

unint64_t partial apply for implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:)()
{
  uint64_t v0;

  return implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1DDBDFC6C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for AnalyticsKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_1DDBDFD6C + 4 * byte_1DDF35FD3[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_1DDBDFDA0 + 4 * byte_1DDF35FCE[v4]))();
}

uint64_t sub_1DDBDFDA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBDFDA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDBDFDB0);
  return result;
}

uint64_t sub_1DDBDFDBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDBDFDC4);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_1DDBDFDC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBDFDD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsKeys()
{
  return &type metadata for AnalyticsKeys;
}

unint64_t lazy protocol witness table accessor for type AnalyticsKeys and conformance AnalyticsKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnalyticsKeys and conformance AnalyticsKeys;
  if (!lazy protocol witness table cache variable for type AnalyticsKeys and conformance AnalyticsKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for AnalyticsKeys, &type metadata for AnalyticsKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsKeys and conformance AnalyticsKeys);
  }
  return result;
}

uint64_t specialized AnalyticsKeys.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1B)
    return 27;
  else
    return v0;
}

char *ShapeListItemView.init(image:symbolWeight:)(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  double v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  Class isa;
  objc_super v33;

  v5 = OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3890]);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_cornerRadius] = 0x4018000000000000;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_symbolPointSize] = 0x403E000000000000;

  v33.receiver = v7;
  v33.super_class = (Class)type metadata accessor for ShapeListItemView();
  v8 = (char *)objc_msgSendSuper2(&v33, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v9 = objc_msgSend(v8, sel_layer);
  objc_msgSend(v9, sel_setCornerCurve_, *MEMORY[0x1E0CD2A68]);

  v10 = objc_msgSend(v8, sel_layer);
  objc_msgSend(v10, sel_setCornerRadius_, *(double *)&v8[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_cornerRadius]);

  v11 = objc_allocWithZone(MEMORY[0x1E0DC3B18]);
  v12 = v8;
  v13 = objc_msgSend(v11, sel_initWithDelegate_, v12);
  objc_msgSend(v12, sel_addInteraction_, v13);

  v14 = OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView;
  v15 = *(id *)&v12[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView];
  v16 = objc_msgSend(a1, sel_imageWithRenderingMode_, 2);
  objc_msgSend(v15, sel_setImage_, v16);

  v17 = *(void **)&v12[v14];
  v18 = *(double *)&v12[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_symbolPointSize];
  v19 = (void *)objc_opt_self();
  v20 = v17;
  v21 = objc_msgSend(v19, sel_configurationWithPointSize_weight_, a2, v18);
  objc_msgSend(v20, sel_setPreferredSymbolConfiguration_, v21);

  v22 = *(void **)&v12[v14];
  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v12, sel_addSubview_, v22);
  v23 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1DDF329E0;
  v25 = objc_msgSend(v22, sel_centerXAnchor);
  v26 = objc_msgSend(v12, sel_centerXAnchor);
  v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

  *(_QWORD *)(v24 + 32) = v27;
  v28 = objc_msgSend(*(id *)&v12[v14], sel_centerYAnchor);
  v29 = objc_msgSend(v12, sel_centerYAnchor);
  v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v29);

  *(_QWORD *)(v24 + 40) = v30;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_activateConstraints_, isa);

  objc_msgSend(v12, sel_setIsAccessibilityElement_, 1);
  ShapeListItemView.updateUI()();

  return v12;
}

id ShapeListItemView.updateUI()()
{
  char *v0;
  unsigned int v1;
  void *v2;
  char **v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char **v10;
  id v11;

  v1 = objc_msgSend(v0, sel_isHighlighted);
  v2 = (void *)objc_opt_self();
  v3 = &selRef_secondarySystemFillColor;
  if (!v1)
    v3 = &selRef_quaternarySystemFillColor;
  v4 = objc_msgSend(v2, *v3);
  objc_msgSend(v0, sel_setBackgroundColor_, v4);

  v5 = objc_msgSend(v0, sel_traitCollection);
  v6 = objc_msgSend(v5, sel_userInterfaceStyle);

  v7 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView];
  v8 = (void *)objc_opt_self();
  if (v6 == (id)2)
    v9 = 1;
  else
    v9 = 2;
  v10 = &selRef_systemGrayColor;
  if (v6 != (id)2)
    v10 = &selRef_systemGray3Color;
  v11 = objc_msgSend(v8, *v10);
  objc_msgSend(v7, sel_setTintColor_, v11);

  return objc_msgSend(v7, sel_setOverrideUserInterfaceStyle_, v9);
}

id ShapeListItemView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShapeListItemView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ShapeListItemView()
{
  return objc_opt_self();
}

void specialized static ShapeListItemView.newAddRectangleListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000010, 0x80000001DDF50580);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._countAndFlagsBits = 0xD00000000000002FLL;
    v24._object = (void *)0x80000001DDF505A0;
    v10._countAndFlagsBits = 0x6C676E6174636552;
    v10._object = (void *)0xE900000000000065;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddOvalListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  Swift::String_optional v18;
  Swift::String v19;
  uint64_t countAndFlagsBits;
  void *v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0x662E656C63726963, 0xEB000000006C6C69);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    outlined init with copy of Any?(a1, (uint64_t)v22);
    v8 = v23;
    if (v23)
    {
      v9 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v10 = *(_QWORD *)(v8 - 8);
      v11 = MEMORY[0x1E0C80A78](v9, v9);
      v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v10 + 16))(v13, v11);
      v14 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v14 = 0;
    }
    objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v14, a2, 64);
    swift_unknownObjectRelease();
    v15 = one-time initialization token for paperKitBundle;
    v16 = v7;
    if (v15 != -1)
      swift_once();
    v24._object = (void *)0x80000001DDF504F0;
    v17._countAndFlagsBits = 0x656C63726943;
    v17._object = (void *)0xE600000000000000;
    v18.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v18.value._object = (void *)0xEB00000000656C62;
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = 0xD00000000000002CLL;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, paperKitBundle, v19, v24)._countAndFlagsBits;
    v21 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_setAccessibilityLabel_, v21);

  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddTriangleListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0x656C676E61697274, 0xED00006C6C69662ELL);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._object = (void *)0x80000001DDF504C0;
    v10._countAndFlagsBits = 0x656C676E61697254;
    v10._object = (void *)0xE800000000000000;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = 0xD00000000000002ELL;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddArrowListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000013, 0x80000001DDF50350);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 7);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._countAndFlagsBits = 0xD000000000000033;
    v24._object = (void *)0x80000001DDF50370;
    v10._countAndFlagsBits = 0x206465776F727241;
    v10._object = (void *)0xEC000000656E694CLL;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddChatListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000010, 0x80000001DDF503B0);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._countAndFlagsBits = 0xD000000000000033;
    v24._object = (void *)0x80000001DDF503D0;
    v10._countAndFlagsBits = 0x4220686365657053;
    v10._object = (void *)0xED0000656C626275;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddRoundedRectListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0x662E657261757173, 0xEB000000006C6C69);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._countAndFlagsBits = 0xD000000000000037;
    v24._object = (void *)0x80000001DDF50540;
    v10._object = (void *)0x80000001DDF50520;
    v10._countAndFlagsBits = 0xD000000000000011;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddPolygonListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0x2E6E6F6761786568, 0xEC0000006C6C6966);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._object = (void *)0x80000001DDF50490;
    v10._countAndFlagsBits = 0x6E6F67796C6F50;
    v10._object = (void *)0xE700000000000000;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = 0xD00000000000002DLL;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddStarListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0x6C69662E72617473, 0xE90000000000006CLL);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._object = (void *)0x80000001DDF50410;
    v10._countAndFlagsBits = 1918989395;
    v10._object = (void *)0xE400000000000000;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = 0xD00000000000002ALL;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddArrowShapeListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  Swift::String v24;

  v4 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF50440);
  v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

  if (v5)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    v8 = one-time initialization token for paperKitBundle;
    v9 = v7;
    if (v8 != -1)
      swift_once();
    v24._countAndFlagsBits = 0xD00000000000002CLL;
    v24._object = (void *)0x80000001DDF50460;
    v10._countAndFlagsBits = 0x776F727241;
    v10._object = (void *)0xE500000000000000;
    v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    v15 = v23;
    if (v23)
    {
      v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = *(_QWORD *)(v15 - 8);
      v18 = MEMORY[0x1E0C80A78](v16, v16);
      v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

id PaperDocumentViewController.__allocating_init(context:paperDocument:editingMode:)(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  objc_class *v3;
  id v7;
  id v8;

  v7 = objc_allocWithZone(v3);
  v8 = specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(a1, a2, a3);

  return v8;
}

id PaperDocumentPasswordViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock] = 0;
  v7 = &v3[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock];
  v8 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument] = 0;
  if (a2)
  {
    v9 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for PaperDocumentPasswordViewController(0);
  v10 = objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, v9, a3);

  return v10;
}

void PaperDocumentPasswordViewController.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
}

id PaperDocumentPasswordViewController.__deallocating_deinit()
{
  return PaperDocumentPasswordViewController.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for PaperDocumentPasswordViewController);
}

uint64_t PaperDocumentViewController.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate);
}

uint64_t PaperDocumentViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.delegate.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.delegate.modify;
}

void PaperDocumentViewController.delegate.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + *(_QWORD *)(*(_QWORD *)a1 + 56) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    v4 = v3[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v6 = *v5;
    if (*v5)
    {
      if (MEMORY[0x1DF0E666C](v3[6] + v3[7]))
        v7 = *(_QWORD *)(*(_QWORD *)(v3[6] + v3[7] + 8) + 8);
      else
        v7 = 0;
      v8 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
      swift_beginAccess();
      *(_QWORD *)(v8 + 8) = v7;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
  }
  free(v3);
}

void *PaperDocumentViewController.paperDocumentView.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void *PaperDocumentViewController.paperDocumentThumbnailView.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

Swift::Void __swiftcall PaperDocumentViewController.updateGestureRecognizers()()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;

  v1 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer;
  v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer];
  if (v2)
    goto LABEL_4;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C00]), sel_initWithTarget_action_, v0, sel_didScreenEdgePan);
  objc_msgSend(v3, sel_setEdges_, 2);
  v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
    __break(1u);
    return;
  }
  v5 = v4;
  objc_msgSend(v4, sel_addGestureRecognizer_, v3);

  v6 = *(void **)&v0[v1];
  *(_QWORD *)&v0[v1] = v3;

  v2 = *(void **)&v0[v1];
  if (v2)
  {
LABEL_4:
    v7 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility];
    swift_beginAccess();
    v8 = *v7;
    v9 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
    swift_beginAccess();
    if (*v9 != 1
      || (v10 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView],
          swift_beginAccess(),
          !*(_QWORD *)v10)
      || (v11 = (_BYTE *)(*(_QWORD *)v10 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout),
          swift_beginAccess(),
          (*v11 & 1) == 0))
    {
      v8 = 0;
    }
    objc_msgSend(v2, sel_setEnabled_, v8);
  }
}

void key path setter for PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility : PaperDocumentViewController(unsigned __int8 *a1, _QWORD *a2)
{
  int v2;
  _BYTE *v3;
  int v4;

  v2 = *a1;
  v3 = (_BYTE *)(*a2
               + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  if (v2 != v4)
  {
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
  }
}

uint64_t PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.setter(char a1)
{
  uint64_t v1;
  int v3;
  _BYTE *v4;
  int v5;

  v3 = a1 & 1;
  v4 = (_BYTE *)(v1
               + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;
  if (v5 != v3)
  {
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
  }
}

void (*PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *v5;
  return PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify;
}

void PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  v5 = *(unsigned __int8 *)(v3 + v2);
  *(_BYTE *)(v3 + v2) = v4;
  if (v4 != v5)
  {
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
  }
  free(v1);
}

void PaperDocumentViewController.isThumbnailViewCollapsed.didset(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BYTE *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  id v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t aBlock;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;

  v2 = v1;
  v3 = a1 & 1;
  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  if (*v4 != v3)
  {
    v5 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v6 = *v5;
    if (*v5)
    {
      v7 = v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
      swift_beginAccess();
      if (MEMORY[0x1DF0E666C](v7))
      {
        v8 = *(_QWORD *)(v7 + 8);
        swift_getObjectType();
        v9 = *(void (**)(void))(*(_QWORD *)(v8 + 8) + 56);
        v10 = v6;
        v9();
        swift_unknownObjectRelease();

      }
    }
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
    PaperDocumentViewController.notifyContentFrameDidChange()();
    if ((*v4 & 1) != 0)
      goto LABEL_18;
    v11 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    if (*v11)
    {
      v12 = (uint64_t)*v11 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
      swift_beginAccess();
      v13 = (void *)MEMORY[0x1DF0E666C](v12);
      v14 = *v5;
      if (v13)
      {
        v15 = v13;
        if (!v14)
        {

          v19 = *v11;
          if (!v19)
          {
LABEL_15:
            if ((*v4 & 1) == 0)
            {
              v23 = (id *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
              swift_beginAccess();
              if (*v23)
                objc_msgSend(*v23, sel_setHidden_, 0);
            }
LABEL_18:
            v24 = (void *)objc_opt_self();
            v25 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v34 = partial apply for closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset;
            v35 = v25;
            v26 = MEMORY[0x1E0C809B0];
            aBlock = MEMORY[0x1E0C809B0];
            v31 = 1107296256;
            v32 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            v33 = &block_descriptor_87;
            v27 = _Block_copy(&aBlock);
            swift_release();
            v28 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v34 = partial apply for closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset;
            v35 = v28;
            aBlock = v26;
            v31 = 1107296256;
            v32 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
            v33 = &block_descriptor_91_0;
            v29 = _Block_copy(&aBlock);
            swift_release();
            objc_msgSend(v24, sel_animateWithDuration_delay_options_animations_completion_, 0, v27, v29, 0.15, 0.0);
            _Block_release(v29);
            _Block_release(v27);
            return;
          }
LABEL_14:
          v20 = *v5;
          swift_beginAccess();
          swift_unknownObjectWeakAssign();
          v21 = v19;
          v22 = v20;
          PaperDocumentThumbnailView.documentView.didset();

          goto LABEL_15;
        }
        type metadata accessor for PaperDocumentView();
        v16 = v14;
        v17 = v15;
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_15;
LABEL_13:
        v19 = *v11;
        if (!v19)
          goto LABEL_15;
        goto LABEL_14;
      }
    }
    else
    {
      v14 = *v5;
    }
    if (!v14)
      goto LABEL_15;
    goto LABEL_13;
  }
}

void PaperDocumentViewController.notifyContentFrameDidChange()()
{
  uint64_t v0;
  void **v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  char *v5;
  char *v6;
  char *v7;
  id *v8;
  id v9;
  double *v10;
  void *v11;
  id v12;
  unint64_t v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char *v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  uint64_t v33;
  _BYTE *v34;
  double v35;
  double v36;
  CGFloat v37;
  CGFloat v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    if (*v3)
    {
      v4 = *(void **)(*v3 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);
      v5 = v2;
      v6 = (char *)objc_msgSend(v4, sel_collectionView);
      if (!v6)
      {
        v7 = v5;
LABEL_22:

        return;
      }
      v7 = v6;
      v8 = (id *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
      swift_beginAccess();
      if (!*v8)
        goto LABEL_26;
      v9 = objc_msgSend(*v8, sel_documentScrollView);
      v10 = (double *)MEMORY[0x1E0C9D628];
      if (v9)
      {
        v11 = v9;
        v12 = objc_msgSend(v9, sel_subviews);

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          v33 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v33)
            goto LABEL_8;
        }
        else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_8:
          if ((v13 & 0xC000000000000001) != 0)
          {
            v14 = (id)MEMORY[0x1DF0E4D64](0, v13);
            goto LABEL_11;
          }
          if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v14 = *(id *)(v13 + 32);
LABEL_11:
            v15 = v14;
            swift_bridgeObjectRelease();
            objc_msgSend(v15, sel_bounds);
            v17 = v16;
            v19 = v18;
            v21 = v20;
            v23 = v22;
            v24 = v5;
            objc_msgSend(v15, sel_convertRect_toCoordinateSpace_, v24, v17, v19, v21, v23);
            v26 = v25;
            v28 = v27;
            v30 = v29;
            v32 = v31;

LABEL_16:
            v34 = (_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
            swift_beginAccess();
            if (*v34 == 1)
            {
              v35 = *v10;
              v36 = v10[1];
              v37 = v10[2];
              v38 = v10[3];
            }
            else
            {
              objc_msgSend(v7, sel_contentOffset);
              v35 = -v39;
              objc_msgSend(v7, sel_contentOffset);
              v36 = -v40;
              objc_msgSend(v7, sel_contentSize);
              v37 = v41;
              v38 = v42;
            }
            v43 = v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
            swift_beginAccess();
            if (MEMORY[0x1DF0E666C](v43))
            {
              v44 = *(_QWORD *)(v43 + 8);
              ObjectType = swift_getObjectType();
              v46.origin.x = v26;
              v46.origin.y = v28;
              v46.size.width = v30;
              v46.size.height = v32;
              v48.origin.x = v35;
              v48.origin.y = v36;
              v48.size.width = v37;
              v48.size.height = v38;
              v47 = CGRectUnion(v46, v48);
              (*(void (**)(char *, uint64_t, CGPoint, __n128, CGSize, __n128))(*(_QWORD *)(v44 + 8) + 88))(v5, ObjectType, v47.origin, *(__n128 *)&v47.origin.y, v47.size, *(__n128 *)&v47.size.height);

              swift_unknownObjectRelease();
            }
            else
            {

            }
            goto LABEL_22;
          }
          __break(1u);
LABEL_26:
          __break(1u);
          return;
        }
        swift_bridgeObjectRelease();
      }
      v26 = *v10;
      v28 = v10[1];
      v30 = v10[2];
      v32 = v10[3];
      goto LABEL_16;
    }
  }
}

void closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_view);

    if (v4)
    {
      objc_msgSend(v4, sel_layoutIfNeeded);

    }
    else
    {
      __break(1u);
    }
  }
}

void closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  id *v6;
  id v7;

  if ((a1 & 1) != 0)
  {
    v2 = a2 + 16;
    swift_beginAccess();
    v3 = MEMORY[0x1DF0E666C](v2);
    if (v3)
    {
      v4 = (char *)v3;
      v5 = (_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
      swift_beginAccess();
      if (*v5 == 1)
      {
        v6 = (id *)&v4[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
        swift_beginAccess();
        if (*v6)
        {
          v7 = *v6;
          objc_msgSend(v7, sel_setHidden_, 1);

        }
      }

    }
  }
}

uint64_t PaperDocumentViewController.isThumbnailViewCollapsed.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentViewController.isThumbnailViewCollapsed.setter(char a1)
{
  uint64_t v1;
  char *v3;
  char v4;

  v3 = (char *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v4);
}

void (*PaperDocumentViewController.isThumbnailViewCollapsed.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *v5;
  return PaperDocumentViewController.isThumbnailViewCollapsed.modify;
}

void PaperDocumentViewController.isThumbnailViewCollapsed.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v5 = *(_BYTE *)(v3 + v2);
  *(_BYTE *)(v3 + v2) = v4;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v5);
  free(v1);
}

uint64_t PaperDocumentViewController.editingMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperDocumentViewController.editingMode.setter(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 *v4;
  void **v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  char *v9;
  unsigned __int8 v10;

  v2 = v1;
  v3 = *a1;
  v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  swift_beginAccess();
  *v4 = v3;
  v5 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v6 = (char *)*v5;
  if (*v5)
  {
    v7 = (unsigned __int8 *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
    swift_beginAccess();
    v8 = *v7;
    *v7 = v3;
    v10 = v8;
    v9 = v6;
    PaperDocumentView.editingMode.didset(&v10);

  }
  PaperDocumentViewController.updatePlusButton()();
}

void (*PaperDocumentViewController.editingMode.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentViewController.editingMode.modify;
}

void PaperDocumentViewController.editingMode.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  void **v4;
  char *v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  char *v9;
  unsigned __int8 v10;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = (void **)(v3[6] + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v5 = (char *)*v4;
    if (*v4)
    {
      v6 = *(_BYTE *)(v3[6] + v3[7]);
      v7 = (unsigned __int8 *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      v8 = *v7;
      *v7 = v6;
      v10 = v8;
      v9 = v5;
      PaperDocumentView.editingMode.didset(&v10);

    }
    PaperDocumentViewController.updatePlusButton()();
  }
  free(v3);
}

uint64_t key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, void (*a7)(void))
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = swift_unknownObjectRetain();
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(v11, v10, a5, a6, a7);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentViewController.pageOverlayViewProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider);
}

uint64_t PaperDocumentViewController.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(void))PaperDocumentView.pageOverlayViewProvider.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.pageOverlayViewProvider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.pageOverlayViewProvider.modify;
}

void PaperDocumentViewController.pageOverlayViewProvider.modify(uint64_t a1, char a2)
{
  PaperDocumentViewController.pageOverlayViewProvider.modify(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(void))PaperDocumentView.pageOverlayViewProvider.didset);
}

id key path getter for PaperDocumentViewController.toolPicker : PaperDocumentViewController@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;

  v3 = *(void **)(*a1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  if (v3)
  {
    v4 = *(id *)(*a1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1278]), sel_init);
    v3 = 0;
  }
  *a2 = v4;
  return v3;
}

id PaperDocumentViewController.toolPicker.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  if (v1)
  {
    v2 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  }
  else
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1278]), sel_init);
    v1 = 0;
  }
  v3 = v1;
  return v2;
}

void PaperDocumentViewController.toolPicker.setter(void *a1)
{
  specialized PaperDocumentViewController.toolPicker.setter(a1);

}

void (*PaperDocumentViewController.toolPicker.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;

  a1[1] = v1;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  if (v3)
  {
    v4 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1278]), sel_init);
    v3 = 0;
  }
  *a1 = v4;
  v5 = v3;
  return PaperDocumentViewController.toolPicker.modify;
}

void PaperDocumentViewController.toolPicker.modify(void **a1, char a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    specialized PaperDocumentViewController.toolPicker.setter(v3);

  }
  else
  {
    specialized PaperDocumentViewController.toolPicker.setter(v2);
  }

}

Swift::Void __swiftcall PaperDocumentViewController.removeToolPicker()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void **v3;
  char *v4;
  void *v5;
  id *v6;
  id v7;
  id v8;
  char *v9;
  id v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;

  v1 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker) = 0;

  v3 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v4 = (char *)*v3;
  if (*v3)
  {
    v5 = *(void **)(v0 + v1);
    v6 = (id *)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
    swift_beginAccess();
    v7 = *v6;
    *v6 = v5;
    v8 = v5;
    v9 = v4;
    if (v7)
    {
      objc_msgSend(v7, sel_removeObserver_, v9);
      v10 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v7, sel_removeObserver_, v10);

    }
    swift_beginAccess();
    v11 = v9;
    v12 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v12, (uint64_t)v11);
    swift_bridgeObjectRelease();

    if (*v6)
    {
      v13 = *v6;
      objc_msgSend(v13, sel_addObserver_, v11);
      v14 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v13, sel_addObserver_, v14);

      PaperDocumentView.updateTiledViewInk(for:)(v13);
      PaperDocumentView.updateToolPicker()();

      v11 = (char *)v7;
      v7 = v8;
      v8 = v13;
    }

  }
}

uint64_t (*PaperDocumentViewController.paperDocumentTemp.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t key path setter for PaperDocumentViewController.paperDocument : PaperDocumentViewController(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  void (*v8)(void ***);
  uint64_t v9;
  _QWORD v11[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v7, a1, v2, v5);
  v8 = PaperDocumentViewController.paperDocument.modify(v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 24))(v9, v7, v2);
  ((void (*)(_QWORD *, _QWORD))v8)(v11, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
}

uint64_t PaperDocumentViewController.paperDocument.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v7)
  {
    v8 = *v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, v8, v9);
  }
  else
  {
    v11 = v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v11, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    v13 = *(_QWORD *)(v12 - 8);
    result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12);
    if ((_DWORD)result == 1)
      __break(1u);
    else
      return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(a1, v6, v12);
  }
  return result;
}

void (*PaperDocumentViewController.paperDocument.modify(_QWORD *a1))(void ***a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  void (*result)(void ***);
  uint64_t (*v10)();
  uint64_t v11;

  v3 = malloc(0xA0uLL);
  *a1 = v3;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[14] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[15] = v5;
  v3[16] = malloc(*(_QWORD *)(v5 + 64));
  v6 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v7 = *v6;
  v3[17] = *v6;
  if (v7)
  {
    v8 = v7;
    v3[18] = PaperDocumentView.dataModel.modify();
    return (void (*)(void ***))PaperDocumentViewController.paperDocument.modify;
  }
  else
  {
    v10 = PaperDocumentViewController.paperDocumentTemp.modify();
    result = (void (*)(void ***))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v3[19] = v10;
      return PaperDocumentViewController.paperDocument.modify;
    }
  }
  return result;
}

void PaperDocumentViewController.paperDocument.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v3 = *a1;
  (*(void (**)(uint64_t, _QWORD))(*a1 + 144))(*a1 + 32, 0);
  if ((a2 & 1) != 0)
  {

  }
  else
  {
    v5 = *(_QWORD *)(v3 + 128);
    v4 = *(char **)(v3 + 136);
    v6 = *(_QWORD *)(v3 + 112);
    v7 = *(_QWORD *)(v3 + 120);
    v8 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v5, v8, v6);
    specialized PaperDocumentView.merge<A>(_:from:)(v5, 3u);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  free(*(void **)(v3 + 128));
  free((void *)v3);
}

void PaperDocumentViewController.paperDocument.modify(void ***a1)
{
  void **v1;

  v1 = *a1;
  ((void (*)(void **, _QWORD))(*a1)[19])(*a1, 0);
  free(v1[16]);
  free(v1);
}

uint64_t PaperDocumentViewController.paperDocument.setter(uint64_t a1)
{
  void (*v2)(void ***);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v2 = PaperDocumentViewController.paperDocument.modify(v8);
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v4, a1, v5);
  ((void (*)(_QWORD *, _QWORD))v2)(v8, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t PaperDocumentViewController.shouldShowFormFillingUIAutomatically.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentViewController.shouldShowFormFillingUIAutomatically.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PaperDocumentViewController.shouldShowFormFillingUIAutomatically.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

void PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v6;
  char v7;
  char v8;
  char *v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD *v16;
  char *v17;
  void *v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  uint64_t countAndFlagsBits;
  void *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  _BYTE v36[24];
  ValueMetadata *v37;
  unint64_t v38;
  Swift::String v39;
  Swift::String v40;

  v3 = v2;
  v37 = &type metadata for AutofillFeatureFlags;
  v6 = lazy protocol witness table accessor for type AutofillFeatureFlags and conformance AutofillFeatureFlags();
  v38 = v6;
  v36[0] = 0;
  v7 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  if ((v7 & 1) != 0
    || (v37 = &type metadata for AutofillFeatureFlags,
        v38 = v6,
        v36[0] = 1,
        v8 = isFeatureEnabled(_:)(),
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36),
        (v8 & 1) != 0))
  {
    v9 = &v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically];
    swift_beginAccess();
    if (*v9 == 1)
    {
      v10 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed;
      if ((v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] & 1) == 0)
      {
        v11 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000021, 0x80000001DDF4F6F0);
        v35 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v11);

        if (one-time initialization token for paperKitBundle != -1)
          swift_once();
        v12._countAndFlagsBits = 0xD00000000000002FLL;
        v39._object = (void *)0x80000001DDF50DE0;
        v12._object = (void *)0x80000001DDF50DB0;
        v13.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v13.value._object = (void *)0xEB00000000656C62;
        v14._countAndFlagsBits = 0;
        v14._object = (void *)0xE000000000000000;
        v39._countAndFlagsBits = 0xD000000000000015;
        v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v39);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
        v16 = (_QWORD *)swift_allocObject();
        v16[2] = v3;
        v16[3] = a1;
        v16[4] = a2;
        v17 = v3;
        outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(a1);
        v18 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        v40._countAndFlagsBits = 0xD00000000000001CLL;
        v40._object = (void *)0x80000001DDF50E00;
        v19._countAndFlagsBits = 0x6C6C69466F747541;
        v19._object = (void *)0xED00006D726F4620;
        v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v20.value._object = (void *)0xEB00000000656C62;
        v21._countAndFlagsBits = 0;
        v21._object = (void *)0xE000000000000000;
        countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v40)._countAndFlagsBits;
        v23 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v18, sel_setTitle_, v23);

        v24 = swift_allocObject();
        *(_QWORD *)(v24 + 16) = v17;
        v25 = v17;
        v26 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        v27 = v35;
        v28 = v18;
        v29 = v26;
        v30 = (void *)MEMORY[0x1DF0E41AC](v15._countAndFlagsBits, v15._object);
        swift_bridgeObjectRelease();
        v31 = (void *)MEMORY[0x1DF0E41AC](0, 0xE000000000000000);
        v32 = objc_msgSend((id)objc_opt_self(), sel_configurationWithImage_title_subtitle_primaryAction_dismissAction_, v27, v30, v31, v28, v29, 0, 0, 0, partial apply for closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:), v24);

        v3[v10] = 1;
        v33 = *(void **)&v25[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration];
        *(_QWORD *)&v25[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = v32;
        v34 = v32;

        PaperDocumentViewController.bannerViewConfiguration.didset();
      }
    }
  }
}

void closure #1 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  _BYTE *v5;
  void **v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  char *v10;
  void *v11;
  unsigned __int8 v12;

  v5 = (_BYTE *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  swift_beginAccess();
  *v5 = 1;
  v6 = (void **)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v7 = (char *)*v6;
  if (*v6)
  {
    v8 = (unsigned __int8 *)&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
    swift_beginAccess();
    v9 = *v8;
    *v8 = 1;
    v12 = v9;
    v10 = v7;
    PaperDocumentView.editingMode.didset(&v12);

  }
  PaperDocumentViewController.updatePlusButton()();
  if (a3)
    a3();
  v11 = *(void **)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
  if (v11)
    objc_msgSend(v11, sel_removeFromSuperview);
  PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
  if (*v6)
    *(_BYTE *)(*(_QWORD *)((char *)*v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics) + 19) = 48;
}

void closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v3 = *(void **)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
  if (v3)
    objc_msgSend(v3, sel_removeFromSuperview);
  PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
  v4 = (_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v4)
  {
    v5 = *(_QWORD *)(*v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
    if (v5)
    {
      v6 = *(char **)(v5 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
      v7 = &v6[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
      if (MEMORY[0x1DF0E666C](&v6[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
      {
        v8 = *((_QWORD *)v7 + 1);
        ObjectType = swift_getObjectType();
        v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
        v11 = v6;
        v12 = (_QWORD *)v10(ObjectType, v8);

        v13 = swift_unknownObjectRelease();
        if (v12)
        {
          v14 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x2F8);
          v15 = (void *)((uint64_t (*)(uint64_t))v14)(v13);
          v17 = v16;
          v18 = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v17 + 200))(v18, v17);

          v19 = (void *)v14();
          v21 = v20;
          v22 = swift_getObjectType();
          v23 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 144))(v22, v21);

          if (v23)
          {
            v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
            swift_retain();

            *(_BYTE *)(v24 + 17) = 1;
            swift_release();
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void PaperDocumentViewController.bannerViewConfiguration.didset()
{
  char *v0;
  char *v1;
  void **v2;
  void *v3;
  void **v4;
  char *v5;
  id *v6;
  id v7;
  void *v8;
  id v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  Class isa;
  id v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  id v37;
  void *v38;
  id v39;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = (void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  v3 = *v2;
  if (*v2)
  {
    v4 = (void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v5 = (char *)*v4;
    if (v5)
    {
      v6 = (id *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
      swift_beginAccess();
      v7 = *v6;
      if (*v6)
      {
        v8 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView];
        if (v8)
        {
          v9 = v3;
          v10 = v5;
          v11 = v7;
          v12 = v8;
          v13 = objc_msgSend(v12, sel_superview);

          if (v13)
            goto LABEL_10;
          v14 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration];
          if (!v14)
            goto LABEL_10;
          v15 = v14;
          PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
          if (*v6)
          {
            objc_msgSend(*v6, sel_addSubview_, v12);
            v38 = v15;
            objc_msgSend(v12, sel_populateWithConfiguration_, v15);
            objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
            v16 = objc_msgSend(v12, sel_bottomAnchor);
            v17 = objc_msgSend(v11, sel_safeAreaLayoutGuide);
            v18 = objc_msgSend(v17, sel_topAnchor);

            v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v18);
            v39 = (id)objc_opt_self();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            v20 = swift_allocObject();
            *(_OWORD *)(v20 + 16) = xmmword_1DDF354A0;
            *(_QWORD *)(v20 + 32) = v19;
            v37 = v19;
            v21 = objc_msgSend(v12, sel_leadingAnchor);
            v22 = objc_msgSend(v9, sel_trailingAnchor);
            v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

            *(_QWORD *)(v20 + 40) = v23;
            v24 = objc_msgSend(v12, sel_trailingAnchor);
            v25 = objc_msgSend(v11, sel_safeAreaLayoutGuide);
            v26 = objc_msgSend(v25, sel_trailingAnchor);

            v27 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v26);
            *(_QWORD *)(v20 + 48) = v27;
            aBlock[0] = v20;
            specialized Array._endMutation()();
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v39, sel_activateConstraints_, isa);

            v29 = objc_msgSend(v1, sel_view);
            if (v29)
            {
              v30 = v29;
              objc_msgSend(v29, sel_layoutIfNeeded);

              v31 = (_QWORD *)swift_allocObject();
              v31[2] = v37;
              v31[3] = v12;
              v31[4] = v11;
              v31[5] = v1;
              aBlock[4] = partial apply for closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset;
              aBlock[5] = v31;
              aBlock[0] = MEMORY[0x1E0C809B0];
              aBlock[1] = 1107296256;
              aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
              aBlock[3] = &block_descriptor_42_1;
              v32 = _Block_copy(aBlock);
              v33 = v11;
              v34 = v12;
              v35 = v37;
              v36 = v1;
              swift_release();
              objc_msgSend(v34, sel_showWithAnimations_, v32);
              _Block_release(v32);

LABEL_10:
              return;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
        }
      }
    }
  }
}

void closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  objc_msgSend(a1, sel_setActive_, 0);
  v7 = objc_msgSend(a2, sel_topAnchor);
  v8 = objc_msgSend(a3, sel_safeAreaLayoutGuide);
  v9 = objc_msgSend(v8, sel_topAnchor);

  v10 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v9);
  objc_msgSend(v10, sel_setActive_, 1);

  v11 = objc_msgSend(a4, sel_view);
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, sel_layoutIfNeeded);

  }
  else
  {
    __break(1u);
  }
}

id PaperDocumentViewController.__allocating_init(context:pdfURL:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v13;
  unsigned __int8 v14;

  v4 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  swift_storeEnumTagMultiPayload();
  v14 = 3;
  v10 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  v11 = specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)((uint64_t)v7, a1, &v14);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  return v11;
}

id PaperDocumentViewController.__allocating_init(context:data:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v12;
  unsigned __int8 v13;

  v6 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v6, v6);
  v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v8 = a2;
  v8[1] = a3;
  swift_storeEnumTagMultiPayload();
  v13 = 3;
  v9 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  v10 = specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)((uint64_t)v8, a1, &v13);

  return v10;
}

id PaperDocumentViewController.init(context:paperDocument:editingMode:)(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  id v4;

  v4 = specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(a1, a2, a3);

  return v4;
}

uint64_t closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;

  v5[2] = type metadata accessor for MainActor();
  v5[3] = static MainActor.shared.getter();
  v7 = (_QWORD *)swift_task_alloc();
  v5[4] = v7;
  *v7 = v5;
  v7[1] = closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:);
  return PaperDocumentViewController.setupDocumentView(context:)(a5);
}

uint64_t closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)()
{
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v13 - v8;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v10 = type metadata accessor for PaperDocument(0);
  v11 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  result = swift_release();
  *(_QWORD *)(a1 + *(int *)(v10 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  v7 = type metadata accessor for URL();
  v6[12] = v7;
  v6[13] = *(_QWORD *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  v6[16] = type metadata accessor for DataOrURL();
  v6[17] = swift_task_alloc();
  v8 = type metadata accessor for CRAsset();
  v6[18] = v8;
  v6[19] = *(_QWORD *)(v8 - 8);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int EnumCaseMultiPayload;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSURL *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  Class isa;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 72) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  *(_QWORD *)(v0 + 176) = v2;
  if (!v2)
    goto LABEL_8;
  v3 = (void *)v2;
  outlined init with copy of PKStrokeProperties(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 136), (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *(uint64_t **)(v0 + 136);
  if (EnumCaseMultiPayload != 1)
  {
    v15 = *v5;
    v16 = v5[1];
    v17 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
    outlined copy of Data._Representation(v15, v16);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(v17, sel_initWithData_, isa);
    outlined consume of Data._Representation(v15, v16);

    CRContext.assetManager.getter();
    CRAsset.init(data:assetManager:)();
    *(_QWORD *)(v0 + 184) = v14;
    if (v14)
      goto LABEL_4;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 32))(v6, v5, v8);
  v10 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  v14 = objc_msgSend(v10, sel_initWithURL_, v12);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
  CRContext.assetManager.getter();
  CRAsset.init(url:coordinated:assetManager:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  *(_QWORD *)(v0 + 184) = v14;
  if (!v14)
  {
LABEL_7:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));

LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_4:
  if ((objc_msgSend(v14, sel_isLocked) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 16))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 192) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  else
  {
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 208) = static MainActor.shared.getter();
    *(_QWORD *)(v0 + 216) = dispatch thunk of Actor.unownedExecutor.getter();
    *(_QWORD *)(v0 + 224) = v20;
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = (void *)v0[23];
  v3 = v0[19];
  v2 = v0[20];
  v4 = v0[18];
  v5 = (void *)v0[11];
  swift_release();
  PaperDocumentViewController.unlock(pdfDocument:asset:context:)(v1, v2, v5);
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[25] = v6;
  v6(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);

  (*(void (**)(_QWORD, _QWORD))(v0 + 200))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void ***);
  _QWORD *v5;

  v1 = v0[23];
  v2 = v0[21];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = PaperDocumentViewController.paperDocument.modify(v0 + 2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule.callAsFunction<A>(_:)();
  swift_task_dealloc();
  ((void (*)(_QWORD *, _QWORD))v4)(v0 + 2, 0);
  v5 = (_QWORD *)swift_task_alloc();
  v0[29] = v5;
  *v5 = v0;
  v5[1] = closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:);
  return PaperDocumentViewController.setupDocumentView(context:)(v0[11]);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 152);

  (*(void (**)(_QWORD, _QWORD))(v2 + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id PaperDocumentViewController.__deallocating_deinit()
{
  char *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  objc_super v9;
  uint64_t v10;

  v1 = (uint64_t *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove + 8];
  if (v2 >> 60 != 15)
  {
    v3 = *v1;
    v4 = outlined copy of Data._Representation(*v1, *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove + 8]);
    if (one-time initialization token for shared != -1)
      v4 = swift_once();
    MEMORY[0x1E0C80A78](v4, v5);
    v7 = v6 + 4;
    os_unfair_lock_lock(v6 + 4);
    partial apply for closure #1 in PasswordManager.clear(for:)(&v10);
    os_unfair_lock_unlock(v7);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v3, v2);
  }
  LOBYTE(v10) = 1;
  PassthroughSubject.send(completion:)();
  LOBYTE(v10) = 1;
  PassthroughSubject.send(completion:)();
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for PaperDocumentViewController(0);
  return objc_msgSendSuper2(&v9, sel_dealloc);
}

void PaperDocumentViewController.unlock(pdfDocument:asset:context:)(void *a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  char *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(v3, sel_view, v9);
  if (v12)
  {
    v24 = v12;
    type metadata accessor for PaperDocumentPasswordViewController(0);
    v13 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate + 8] = &protocol witness table for PaperDocumentViewController;
    swift_unknownObjectWeakAssign();
    v14 = objc_msgSend(v13, sel_view);
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v3, sel_addChildViewController_, v13);
      objc_msgSend(v24, sel_addSubview_, v15);
      specialized static NSLayoutConstraint.constrain(_:to:)(v15, v24);
      objc_msgSend(v13, sel_didMoveToParentViewController_, v3);
      v16 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock];
      *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock] = a1;
      v17 = a1;

      v18 = type metadata accessor for CRAsset();
      v19 = *(_QWORD *)(v18 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, a2, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v11, 0, 1, v18);
      v20 = (uint64_t)&v13[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock];
      swift_beginAccess();
      outlined assign with take of Date?((uint64_t)v11, v20, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      swift_endAccess();
      v21 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument];
      *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument] = a3;
      v22 = a3;

      v23 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController];
      *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = v13;

    }
    else
    {

    }
  }
}

void PaperDocumentViewController.updateThumbnailViewConstraints()()
{
  char *v0;
  void *v1;
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;

  v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint];
  if (v1)
  {
    v2 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
    swift_beginAccess();
    objc_msgSend(v1, sel_setActive_, (*v2 & 1) == 0);
  }
  v3 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility];
  swift_beginAccess();
  if ((*v3 & 1) != 0
    || (v4 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed],
        swift_beginAccess(),
        (*v4 & 1) != 0))
  {
    v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint];
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v0, sel_traitCollection);
      v8 = objc_msgSend(v7, sel_horizontalSizeClass);

      objc_msgSend(v6, sel_setActive_, v8 != (id)1);
    }
  }
  else
  {
    v9 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint];
    if (v9)
      objc_msgSend(v9, sel_setActive_, 1);
  }
}

Swift::Void __swiftcall PaperDocumentViewController.updateBackgroundColor()()
{
  char *v0;
  void *v1;
  char *v2;
  void **v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id *v18;
  id v19;
  id v20;

  v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor];
  if (v1)
  {
    v2 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    if (*(_QWORD *)v2)
    {
      v3 = (void **)(*(_QWORD *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      v4 = *v3;
      if (!*v3)
      {
        __break(1u);
        return;
      }
      v5 = v1;
      v6 = v4;
      v7 = objc_msgSend(v0, sel_traitCollection);
      v8 = objc_msgSend(v5, sel_resolvedColorWithTraitCollection_, v7);

      objc_msgSend(v6, sel_setBackgroundColor_, v8);
    }
  }
  v9 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v10 = objc_msgSend(v9, sel_userInterfaceIdiom);

  if (v10 != (id)6)
  {
    v11 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor];
    v12 = (id *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
    if (v11)
    {
      swift_beginAccess();
      if (*v12)
        objc_msgSend(*v12, sel_setBackgroundColor_, v11);
    }
    else
    {
      swift_beginAccess();
      v13 = *v12;
      if (v13)
      {
        v14 = (void *)objc_opt_self();
        v15 = v13;
        v16 = objc_msgSend(v14, sel_tertiarySystemGroupedBackgroundColor);
        objc_msgSend(v15, sel_setBackgroundColor_, v16);

      }
    }
  }
  v17 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView];
  if (v17)
  {
    v18 = (id *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
    swift_beginAccess();
    v19 = *v18;
    v20 = v17;
    if (v19)
      v19 = objc_msgSend(v19, sel_backgroundColor);
    objc_msgSend(v17, sel_setBackgroundColor_, v19);

  }
}

uint64_t PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[87] = v1;
  v2[86] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2[91] = v3;
  v2[92] = *(_QWORD *)(v3 - 8);
  v2[93] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[94] = static MainActor.shared.getter();
  v2[95] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[96] = v4;
  return swift_task_switch();
}

{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(*(_QWORD *)v1 + 800);
  v3 = *(void **)(*(_QWORD *)v1 + 688);
  *(_QWORD *)(*(_QWORD *)v1 + 816) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t PaperDocumentViewController.setupDocumentView(context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t, uint64_t, _BYTE *, uint64_t);

  v1 = *(_QWORD *)(v0 + 696);
  v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView;
  *(_QWORD *)(v0 + 776) = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView;
  v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    v5 = *(_QWORD *)(v0 + 744);
    v6 = *(_QWORD *)(v0 + 736);
    v7 = *(_QWORD *)(v0 + 728);
    v8 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
LABEL_5:
    v14 = *(_QWORD *)(v0 + 696);
    v15 = *(void **)(v0 + 688);
    v16 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode;
    *(_QWORD *)(v0 + 784) = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode;
    v17 = (_BYTE *)(v14 + v16);
    swift_beginAccess();
    *(_BYTE *)(v0 + 848) = *v17;
    v18 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
    *(_QWORD *)(v0 + 792) = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
    v19 = *(void **)(v14 + v18);
    *(_QWORD *)(v0 + 800) = v19;
    objc_allocWithZone((Class)type metadata accessor for PaperDocumentView());
    v23 = (uint64_t (*)(uint64_t, uint64_t, _BYTE *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                     + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
    v20 = v15;
    v21 = v19;
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 808) = v22;
    *v22 = v0;
    v22[1] = PaperDocumentViewController.setupDocumentView(context:);
    return v23(*(_QWORD *)(v0 + 688), *(_QWORD *)(v0 + 744), (_BYTE *)(v0 + 848), (uint64_t)v19);
  }
  v9 = *(_QWORD *)(v0 + 736);
  v10 = *(_QWORD *)(v0 + 728);
  v11 = *(_QWORD *)(v0 + 720);
  v12 = *(_QWORD *)(v0 + 696) + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v12, v11, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 736) + 32))(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728));
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void PaperDocumentViewController.setupDocumentView(context:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  id v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  char *v30;
  id v31;
  id v32;
  unsigned __int8 *v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  char *v38;
  void **v39;
  void *v40;
  char *v41;
  id v42;
  id v43;
  void *v44;
  char *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  char *v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  int v75;
  double v76;
  id v77;
  id v78;
  void *v79;
  char *v80;
  id v81;
  id v82;
  int v83;
  double v84;
  id v85;
  double v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  id v91;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  void *v102;
  void *v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  void *v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  void *v122;
  uint64_t v123;
  void *v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  Class isa;
  void *v131;
  id *v132;
  id v133;
  id v134;
  id v135;
  void *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  id v141;
  void *v142;
  uint64_t v143;
  char *v144;
  void *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  char *v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t ObjectType;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  id v185;
  id v186;
  void *v187;
  void *v188;
  void *v189;
  unsigned __int8 *v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  id v194;
  id v195;
  char *v196;
  void *v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  void *v203;
  char *v204;
  id v205;
  id v206;
  uint64_t v207[3];

  v1 = *(_QWORD *)(v0 + 816);
  v2 = *(char **)(v0 + 696);
  swift_release();
  v3 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider];
  swift_beginAccess();
  MEMORY[0x1DF0E666C](v3);
  v4 = *((_QWORD *)v3 + 1);
  v5 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  swift_beginAccess();
  *(_QWORD *)(v5 + 8) = v4;
  swift_unknownObjectWeakAssign();
  PaperDocumentView.pageOverlayViewProvider.didset();
  swift_unknownObjectRelease();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v6 = v2;
  PaperDocumentView.viewControllerForPresentingUI.didset();

  v7 = objc_msgSend(v6, sel_view);
  if (!v7)
  {
    __break(1u);
    goto LABEL_40;
  }
  v8 = v7;
  v9 = *(_QWORD *)(v0 + 816);
  objc_msgSend(v7, sel_addSubview_, v9);

  v10 = *(void **)(v9 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (!v10)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v11 = v10;
  v12 = specialized TiledPaperKitView.mostVisibleAttachment()();

  if (v12)
  {
    objc_msgSend(v12, sel_becomeFirstResponder);

  }
  v13 = *(char **)(v0 + 696);
  v14 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker;
  v15 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker];
  if (v15)
  {
    v16 = v15;
    PaperDocumentView.updateTiledViewInk(for:)(v16);
    v17 = *(void **)&v13[v14];
    *(_QWORD *)&v13[v14] = 0;

    v13 = *(char **)(v0 + 696);
  }
  *(_QWORD *)(v0 + 40) = &type metadata for MobileQuickLookFeatureFlags;
  *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  *(_BYTE *)(v0 + 16) = 0;
  v18 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v19 = objc_msgSend(v13, sel_view);
  if (!v19)
    goto LABEL_41;
  v20 = v19;
  objc_msgSend(v19, sel_frame);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;

  v29 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentThumbnailView());
  v30 = PaperDocumentThumbnailView.init(frame:supportsLargeThumbnails:)(v18 & 1, v22, v24, v26, v28);
  v31 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v32 = objc_msgSend(v31, sel_userInterfaceIdiom);

  if (v32 == (id)6)
    objc_msgSend(*(id *)(v0 + 816), sel_setOverrideUserInterfaceStyle_, 1);
  v33 = (unsigned __int8 *)(*(_QWORD *)(v0 + 696)
                          + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  v190 = v33;
  if ((*v33 & 1) == 0)
  {
    v34 = *(void **)(v0 + 816);
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    v35 = v34;
    PaperDocumentThumbnailView.documentView.didset();

  }
  v36 = objc_msgSend(*(id *)(v0 + 696), sel_view);
  if (!v36)
    goto LABEL_42;
  v37 = v36;
  v38 = *(char **)(v0 + 696);
  objc_msgSend(v36, sel_addSubview_, v30);

  v39 = (void **)&v38[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  v40 = *v39;
  *v39 = v30;
  v41 = v30;

  v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v43 = objc_msgSend(v38, sel_view);
  if (!v43)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v44 = v43;
  v45 = *(char **)(v0 + 696);
  objc_msgSend(v43, sel_insertSubview_belowSubview_, v42, v41);

  v46 = *(void **)&v45[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView];
  *(_QWORD *)&v45[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = v42;
  v47 = v42;

  v48 = objc_msgSend(v45, sel_view);
  if (!v48)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v49 = v48;
  v50 = *(void **)(v0 + 816);
  v51 = *(void **)(v0 + 696);
  v52 = objc_msgSend(v48, sel_topAnchor);

  objc_msgSend(v50, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v41, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v47, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v53 = objc_msgSend(v41, sel_leadingAnchor);
  v54 = objc_msgSend(v51, sel_view);
  if (!v54)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v55 = v54;
  v202 = v47;
  v203 = v52;
  v56 = *(void **)(v0 + 816);
  v57 = *(char **)(v0 + 696);
  v58 = objc_msgSend(v54, sel_safeAreaLayoutGuide);

  v59 = objc_msgSend(v58, sel_leadingAnchor);
  v60 = objc_msgSend(v53, sel_constraintEqualToAnchor_, v59);

  v61 = *(void **)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint];
  *(_QWORD *)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = v60;
  v205 = v60;

  v62 = objc_msgSend(v56, sel_leadingAnchor);
  v63 = objc_msgSend(v41, sel_trailingAnchor);
  v64 = objc_msgSend(v62, sel_constraintEqualToAnchor_, v63);

  v65 = objc_msgSend(v57, sel_traitCollection);
  v66 = objc_msgSend(v65, sel_horizontalSizeClass);

  objc_msgSend(v64, sel_setActive_, v66 != (id)1);
  v67 = *(void **)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint];
  *(_QWORD *)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = v64;
  v200 = v64;

  v204 = v41;
  v68 = objc_msgSend(v41, sel_trailingAnchor);
  v69 = objc_msgSend(v57, sel_view);
  if (!v69)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v70 = v69;
  v71 = *(void **)(v0 + 816);
  v72 = *(void **)(v0 + 696);
  v73 = objc_msgSend(v69, sel_leadingAnchor);

  v74 = objc_msgSend(v68, sel_constraintEqualToAnchor_, v73);
  type metadata accessor for UILayoutPriority(0);
  objc_msgSend(v205, sel_priority);
  *(_DWORD *)(v0 + 832) = v75;
  *(_DWORD *)(v0 + 824) = 1065353216;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, MEMORY[0x1E0DC2B88]);
  static _UIKitNumericRawRepresentable.- infix(_:_:)();
  LODWORD(v76) = *(_DWORD *)(v0 + 844);
  v197 = v74;
  objc_msgSend(v74, sel_setPriority_, v76);
  v77 = objc_msgSend(v71, sel_leadingAnchor);
  v78 = objc_msgSend(v72, sel_view);
  if (!v78)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v79 = v78;
  v198 = *(id *)(v0 + 816);
  v80 = *(char **)(v0 + 696);
  v81 = objc_msgSend(v78, sel_leadingAnchor);

  v82 = objc_msgSend(v77, sel_constraintEqualToAnchor_, v81);
  objc_msgSend(v200, sel_priority);
  *(_DWORD *)(v0 + 840) = v83;
  *(_DWORD *)(v0 + 828) = 1065353216;
  static _UIKitNumericRawRepresentable.- infix(_:_:)();
  LODWORD(v84) = *(_DWORD *)(v0 + 836);
  objc_msgSend(v82, sel_setPriority_, v84);
  v85 = objc_msgSend(v80, sel_traitCollection);
  v86 = PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(v85);

  v87 = objc_msgSend(v204, sel_widthAnchor);
  v88 = objc_msgSend(v87, sel_constraintEqualToConstant_, v86);

  v89 = *(void **)&v80[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint];
  *(_QWORD *)&v80[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = v88;
  v195 = v88;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_1DDF361F0;
  *(_QWORD *)(v90 + 32) = v82;
  *(_QWORD *)(v90 + 40) = v200;
  v201 = v200;
  v194 = v82;
  v91 = objc_msgSend(v198, sel_trailingAnchor);
  v92 = objc_msgSend(v80, sel_view);
  if (!v92)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v93 = v92;
  v94 = *(void **)(v0 + 816);
  v95 = *(void **)(v0 + 696);
  v96 = objc_msgSend(v92, sel_trailingAnchor);

  v97 = objc_msgSend(v91, sel_constraintEqualToAnchor_, v96);
  *(_QWORD *)(v90 + 48) = v97;
  v98 = objc_msgSend(v94, sel_topAnchor);
  v99 = objc_msgSend(v98, sel_constraintEqualToAnchor_, v203);

  *(_QWORD *)(v90 + 56) = v99;
  v100 = objc_msgSend(v94, sel_bottomAnchor);
  v101 = objc_msgSend(v95, sel_view);
  if (!v101)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v102 = v101;
  v103 = *(void **)(v0 + 696);
  v104 = objc_msgSend(v101, sel_bottomAnchor);

  v105 = objc_msgSend(v100, sel_constraintEqualToAnchor_, v104);
  *(_QWORD *)(v90 + 64) = v105;
  *(_QWORD *)(v90 + 72) = v205;
  *(_QWORD *)(v90 + 80) = v197;
  v206 = v205;
  v199 = v197;
  v106 = objc_msgSend(v204, sel_topAnchor);
  v107 = objc_msgSend(v106, sel_constraintEqualToAnchor_, v203);

  *(_QWORD *)(v90 + 88) = v107;
  v108 = objc_msgSend(v204, sel_bottomAnchor);
  v109 = objc_msgSend(v103, sel_view);
  if (!v109)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v110 = v109;
  v111 = *(void **)(v0 + 696);
  v112 = objc_msgSend(v109, sel_bottomAnchor);

  v113 = objc_msgSend(v108, sel_constraintEqualToAnchor_, v112);
  *(_QWORD *)(v90 + 96) = v113;
  *(_QWORD *)(v90 + 104) = v195;
  v191 = v195;
  v114 = objc_msgSend(v202, sel_topAnchor);
  v115 = objc_msgSend(v204, sel_topAnchor);
  v116 = objc_msgSend(v114, sel_constraintEqualToAnchor_, v115);

  *(_QWORD *)(v90 + 112) = v116;
  v117 = objc_msgSend(v202, sel_bottomAnchor);
  v118 = objc_msgSend(v204, sel_bottomAnchor);
  v119 = objc_msgSend(v117, sel_constraintEqualToAnchor_, v118);

  *(_QWORD *)(v90 + 120) = v119;
  v120 = objc_msgSend(v202, sel_leadingAnchor);
  v121 = objc_msgSend(v111, sel_view);
  if (!v121)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v122 = v121;
  v192 = *(_QWORD *)(v0 + 792);
  v193 = *(_QWORD *)(v0 + 816);
  v123 = *(_QWORD *)(v0 + 696);
  v124 = (void *)objc_opt_self();
  v125 = objc_msgSend(v122, sel_leadingAnchor);

  v126 = objc_msgSend(v120, sel_constraintEqualToAnchor_, v125);
  *(_QWORD *)(v90 + 128) = v126;
  v127 = objc_msgSend(v202, sel_trailingAnchor);
  v128 = objc_msgSend(v204, sel_trailingAnchor);
  v129 = objc_msgSend(v127, sel_constraintEqualToAnchor_, v128);

  *(_QWORD *)(v90 + 136) = v129;
  v207[0] = v90;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v124, sel_activateConstraints_, isa);

  v131 = *(void **)(v123 + v192);
  v132 = (id *)(v193 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  v133 = *v132;
  *v132 = v131;
  v134 = v131;
  if (v133)
  {
    objc_msgSend(v133, sel_removeObserver_, *(_QWORD *)(v0 + 816));
    v135 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v133, sel_removeObserver_, v135);

  }
  v136 = *(void **)(v0 + 816);
  swift_beginAccess();
  v137 = v136;
  v138 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v138, (uint64_t)v137);
  swift_bridgeObjectRelease();

  if (*v132)
  {
    v139 = *(_QWORD *)(v0 + 816);
    v140 = *v132;
    objc_msgSend(v140, sel_addObserver_, v139);
    v141 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v140, sel_addObserver_, v141);

    PaperDocumentView.updateTiledViewInk(for:)(v140);
    PaperDocumentView.updateToolPicker()();

  }
  v142 = *(void **)(v0 + 816);
  v143 = *(_QWORD *)(v0 + 776);
  v144 = *(char **)(v0 + 696);
  v145 = *(void **)&v144[v143];
  *(_QWORD *)&v144[v143] = v142;
  v146 = v142;

  swift_unknownObjectWeakAssign();
  v147 = v144;
  PaperDocumentView.viewControllerForPresentingUI.didset();

  v148 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger];
  swift_beginAccess();
  MEMORY[0x1DF0E666C](v148);
  v149 = *((_QWORD *)v148 + 1);
  v150 = &v146[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
  swift_beginAccess();
  *((_QWORD *)v150 + 1) = v149;
  swift_unknownObjectWeakAssign();
  PaperDocumentView.liveStreamMessenger.didset();
  swift_unknownObjectRelease();
  v151 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource];
  swift_beginAccess();
  MEMORY[0x1DF0E666C](v151);
  v152 = *((_QWORD *)v151 + 1);
  v153 = &v146[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
  swift_beginAccess();
  *((_QWORD *)v153 + 1) = v152;
  swift_unknownObjectWeakAssign();
  PaperDocumentView.participantDetailsDataSource.didset();
  swift_unknownObjectRelease();
  v154 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors];
  swift_beginAccess();
  v155 = *v154;
  v156 = &v146[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
  swift_beginAccess();
  *v156 = v155;
  PaperDocumentView.showParticipantCursors.didset();
  v157 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate];
  swift_beginAccess();
  v196 = v157;
  if (MEMORY[0x1DF0E666C](v157))
    v158 = *(_QWORD *)(*((_QWORD *)v157 + 1) + 8);
  else
    v158 = 0;
  v159 = *(_QWORD *)(v0 + 736);
  v160 = *(_QWORD *)(v0 + 728);
  v161 = *(_QWORD *)(v0 + 712);
  v162 = *(_QWORD *)(v0 + 696);
  v163 = *(_QWORD *)(v0 + 816) + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  *(_QWORD *)(v163 + 8) = v158;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  v164 = v162 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v164, v161, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v161, 1, v160) == 1)
    goto LABEL_52;
  v165 = *(_QWORD *)(v0 + 816);
  v166 = *(_QWORD *)(v0 + 784);
  v167 = *(_QWORD *)(v0 + 736);
  v168 = *(_QWORD *)(v0 + 728);
  v169 = *(_QWORD *)(v0 + 712);
  v170 = *(_QWORD *)(v0 + 704);
  v171 = *(_BYTE **)(v0 + 696);
  specialized PaperDocumentView.merge<A>(_:from:)(v169, 0);
  (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v169, v168);
  LOBYTE(v166) = v171[v166];
  v172 = (char *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  v173 = *v172;
  *v172 = v166;
  LOBYTE(v207[0]) = v173;
  PaperDocumentView.editingMode.didset((unsigned __int8 *)v207);
  *(_BYTE *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode) = v171[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56))(v170, 1, 1, v168);
  swift_beginAccess();
  outlined assign with take of Date?(v170, v164, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();
  *(_QWORD *)(v0 + 680) = *(_QWORD *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<PaperDocument>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>, MEMORY[0x1E0C95F48]);
  *(_QWORD *)(v0 + 656) = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>, MEMORY[0x1E0C95D90]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  *(_QWORD *)(v0 + 672) = *(_QWORD *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_livePassThroughSubject);
  *(_QWORD *)(v0 + 664) = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  PaperDocumentViewController.setUpObservers()();
  PaperDocumentViewController.updateGestureRecognizers()();
  PaperDocumentViewController.updateBackgroundColor()();
  objc_msgSend(v171, sel_becomeFirstResponder);
  PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(0);
  if (MEMORY[0x1DF0E666C](v196))
  {
    v174 = *(_QWORD *)(v0 + 816);
    v175 = *(_QWORD *)(v0 + 696);
    v176 = *((_QWORD *)v196 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 16))(v175, v174, ObjectType, v176);
    swift_unknownObjectRelease();
  }
  v178 = v202;
  if (MEMORY[0x1DF0E666C](v196))
  {
    v179 = *(_QWORD *)(v0 + 816);
    v180 = *((_QWORD *)v196 + 1);
    v181 = swift_getObjectType();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v180 + 8) + 56))(v179, *v190, v181);
    swift_unknownObjectRelease();
  }
  v182 = *(_QWORD *)(v0 + 696);
  v183 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController;
  v184 = *(void **)(v182 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController);
  if (!v184)
  {

    goto LABEL_38;
  }
  v185 = v184;
  objc_msgSend(v185, sel_willMoveToParentViewController_, 0);
  v186 = objc_msgSend(v185, sel_view);
  if (v186)
  {
    v187 = v186;
    v188 = *(void **)(v0 + 816);
    objc_msgSend(v186, sel_removeFromSuperview);

    objc_msgSend(v185, sel_removeFromParentViewController);
    v189 = *(void **)(v182 + v183);
    *(_QWORD *)(v182 + v183) = 0;

    v178 = v189;
LABEL_38:

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
LABEL_53:
  __break(1u);
}

uint64_t closure #1 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](a2 + 16);
  if (result)
  {
    v9 = (void *)result;
    v10 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v11 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v10;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    swift_retain();
    PaperDocumentViewController.requirePasswordIfNeeded(completion:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:), v12);

    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:)(char a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = v4;
    if ((a1 & 1) != 0)
    {
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_release();
    }
    else
    {
      v6 = objc_msgSend(v4, sel_undoManager);
      if (v6)
      {
        v7 = v6;
        if (objc_msgSend(v6, sel_canUndo))
          objc_msgSend(v7, sel_undo);

      }
    }

  }
}

uint64_t closure #2 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v2);
  if (result)
  {
    v4 = (void *)result;
    swift_retain();

    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t PaperDocumentViewController.setUpObservers()()
{
  uint64_t v0;
  _QWORD *v1;
  id *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  swift_getObjectType();
  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v1)
    goto LABEL_8;
  v2 = (id *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v2)
    goto LABEL_8;
  v3 = *v2;
  v4 = objc_msgSend(v3, sel_documentScrollView);
  if (!v4)
  {

LABEL_8:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v5 = v4;
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v7, sel_addObserver_selector_name_object_, v0, sel_pageDidChange_, *MEMORY[0x1E0CD0ED0], v3);

  v8 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v0, sel_pageWillScroll_, *MEMORY[0x1E0CD0EC0], v5);

  v9 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v9, sel_addObserver_selector_name_object_, v0, sel_pageDidScroll_, *MEMORY[0x1E0CD0EB8], v5);

  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver);
  swift_unknownObjectWeakAssign();
  v11 = (_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
  swift_beginAccess();
  if (*v11)
  {
    v12 = objc_msgSend(*(id *)(*v11 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_collectionView);
    objc_msgSend(v12, sel__addScrollViewScrollObserver_, v10);

  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1DDF32CF0;
  v14 = type metadata accessor for UITraitUserInterfaceStyle();
  v15 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v15;
  UIViewController.registerForTraitChanges<A>(_:handler:)();

  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void PaperDocumentViewController.pageDidChange(_:)(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  id *v4;
  id v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v3)
    return;
  v4 = (id *)(*v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v4)
    return;
  v5 = *v4;
  if (objc_msgSend(a1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PDFView);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:

    return;
  }
  v6 = v5;
  v7 = v9;
  v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
    PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(0);

}

void PaperDocumentViewController.pageWillScroll(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  id *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  char *v11;
  id v12;
  id v13;
  char *v14;
  void *v15;
  _OWORD v16[2];
  _BYTE v17[24];
  uint64_t v18;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  if (*(_QWORD *)v4)
  {
    v5 = (id *)(*(_QWORD *)v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v5)
    {
      __break(1u);
      return;
    }
    v6 = objc_msgSend(*v5, sel_documentScrollView);
    if (v6)
    {
      v7 = v6;
      if (objc_msgSend(a1, sel_object))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v16, 0, sizeof(v16));
      }
      outlined init with take of Any?((uint64_t)v16, (uint64_t)v17);
      if (v18)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v8 = v7;
          v9 = v15;
          v10 = static NSObject.== infix(_:_:)();

          if ((v10 & 1) == 0)
            goto LABEL_13;
          PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(0);
          v11 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility];
          swift_beginAccess();
          if (*v11 != 1)
            goto LABEL_13;
          v12 = objc_msgSend(v2, sel_traitCollection);
          v13 = objc_msgSend(v12, sel_horizontalSizeClass);

          if (v13 == (id)1
            && (v14 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed],
                swift_beginAccess(),
                *v14 != 1))
          {
            *v14 = 1;
            PaperDocumentViewController.isThumbnailViewCollapsed.didset(0);

          }
          else
          {
LABEL_13:

          }
          return;
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
      }

    }
  }
}

Swift::Void __swiftcall PaperDocumentViewController.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  char *v1;
  char *v2;
  Class isa;
  id *v4;
  char *v5;
  id v6;
  double v7;
  id v8;
  CGSize v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  id v15;
  void *v16;
  objc_super v17;

  v2 = v1;
  isa = a1.value.super.isa;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for PaperDocumentViewController(0);
  objc_msgSendSuper2(&v17, sel_traitCollectionDidChange_, isa);
  v4 = (id *)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  if (*v4)
  {
    v5 = (char *)*v4;
    v6 = objc_msgSend(v2, sel_traitCollection);
    v7 = PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(v6);

    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint], sel_setConstant_, v7);
    v8 = objc_msgSend(v2, sel_traitCollection);
    v9 = PaperDocumentThumbnailView.defaultThumbnailViewCellSize(for:)((UITraitCollection)v8);

    v10 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
    objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView], sel_thumbnailSize);
    v14 = vabdd_f64(v9.width, v11) < 1.0;
    v13 = vabdd_f64(v9.height, v12);
    v14 = v14 && v13 < 1.0;
    if (!v14)
      objc_msgSend(*(id *)&v5[v10], sel_setThumbnailSize_, v9.width, v9.height);

  }
  v15 = objc_msgSend(v2, sel_view);
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, sel_setNeedsUpdateConstraints);

  }
  else
  {
    __break(1u);
  }
}

void PaperDocumentViewController.requirePasswordIfNeeded(completion:)(void (*a1)(_QWORD), uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void **v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v3 = v2;
  v35 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v34 - v16;
  v18 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest;
  if ((v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] & 1) == 0)
  {
    v19 = (void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v20 = (char *)*v19;
    if (*v19)
    {
      v3[v18] = 1;
      v21 = (uint64_t)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v21, (uint64_t)v8, &demangling cache variable for type metadata for Date?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        v22 = v20;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Date?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v8, v9);
        v23 = v20;
        static Date.now.getter();
        Date.timeIntervalSince(_:)();
        v25 = v24;
        v26 = *(void (**)(char *, uint64_t))(v10 + 8);
        v26(v13, v9);
        if (v25 < 0.1)
        {
          if (a1)
          {
            a1(v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded]);

            v26(v17, v9);
          }
          else
          {
            v26(v17, v9);

          }
          goto LABEL_10;
        }
        v26(v17, v9);
      }
      v27 = *(id *)&v20[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
      v28 = objc_msgSend(v27, sel_permissionsStatus);
      v29 = objc_msgSend(v3, sel_firstResponder);
      v30 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = v30;
      v31[3] = v28;
      v31[4] = v29;
      v31[5] = a1;
      v31[6] = v35;
      aBlock[4] = partial apply for closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:);
      aBlock[5] = v31;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
      aBlock[3] = &block_descriptor_51;
      v32 = _Block_copy(aBlock);
      v33 = v29;
      outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?((uint64_t)a1);
      swift_release();
      objc_msgSend(v27, sel_requirePasswordsIfNeededUsingPresentingViewController_completion_, v3, v32);

      _Block_release(v32);
LABEL_10:
      v3[v18] = 0;
    }
  }
}

void closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(BOOL))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  _BYTE v21[24];

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v14 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v14)
  {
    v15 = (_BYTE *)v14;
    v16 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest;
    *(_BYTE *)(v14 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest) = 1;
    static Date.now.getter();
    v17 = type metadata accessor for Date();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v13, 0, 1, v17);
    v18 = (uint64_t)&v15[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
    swift_beginAccess();
    outlined assign with take of Date?((uint64_t)v13, v18, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    v15[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = a1 != 1;
    if (a1 != 2)
    {
      if (!a1)
      {
        v19 = objc_msgSend(v15, sel_undoManager);
        if (v19)
        {
          v20 = v19;
          if (objc_msgSend(v19, sel_canUndo) && a3 == 1)
          {
            objc_msgSend(v20, sel_undo);
            objc_msgSend(v20, sel_redo);
          }

        }
      }
      objc_msgSend(a4, sel_becomeFirstResponder);
    }
    if (a5)
      a5(a1 != 1);
    v15[v16] = 0;

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

Swift::Void __swiftcall PaperDocumentViewController.updatePlusButton()()
{
  char *v0;
  char *v1;
  char *v2;
  int v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  UIView *v8;
  UIView *v9;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode];
  swift_beginAccess();
  v3 = *v2;
  v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton];
  if (v3 == 1)
  {
    v5 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton], sel_superview);

    if (v5)
      objc_msgSend(v4, sel_removeFromSuperview);
    v6 = objc_msgSend(v1, sel_view);
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, sel_addSubview_, v4);

      v8 = (UIView *)objc_msgSend(v1, sel_view);
      if (v8)
      {
        v9 = v8;
        FormPlusButtonView.setConstraintsBasedOn(_:)(v8);

        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        swift_retain();
        FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)();
        swift_release_n();
        swift_release_n();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton], sel_removeFromSuperview);
  }
}

void closure #1 in PaperDocumentViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  char *v12;
  _QWORD *v13;
  id *v14;
  id v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  __int128 v22;
  double v23;
  double v24;
  uint64_t (*v25)(void);
  void *v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  id v44;
  _QWORD *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  double v64;
  id v65;
  uint64_t v66;
  CGRect v67;
  CGRect v68;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (!*v5)
    {
LABEL_18:

      return;
    }
    v6 = *(_QWORD *)(*v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
    if (v6)
    {
      v7 = *(char **)(v6 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
      v8 = &v7[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
      if (!MEMORY[0x1DF0E666C](&v7[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
        goto LABEL_18;
      v9 = *((_QWORD *)v8 + 1);
      ObjectType = swift_getObjectType();
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
      v12 = v7;
      v13 = (_QWORD *)v11(ObjectType, v9);

      swift_unknownObjectRelease();
      if (!v13)
        goto LABEL_18;
      if (!*v5
        || (v14 = (id *)(*v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView), swift_beginAccess(), !*v14))
      {
        v45 = v13;
LABEL_17:

        goto LABEL_18;
      }
      v15 = *v14;
      objc_msgSend(v15, sel_frame);
      x = v67.origin.x;
      y = v67.origin.y;
      width = v67.size.width;
      height = v67.size.height;
      MidX = CGRectGetMidX(v67);
      v68.origin.x = x;
      v68.origin.y = y;
      v68.size.width = width;
      v68.size.height = height;
      MidY = CGRectGetMidY(v68);
      if (one-time initialization token for defaultFormFieldSize != -1)
      {
        v64 = MidY;
        swift_once();
        MidY = v64;
      }
      v22 = static FormFillingView.defaultFormFieldSize;
      v23 = MidX - *(double *)&static FormFillingView.defaultFormFieldSize * 0.5;
      v24 = MidY - *((double *)&static FormFillingView.defaultFormFieldSize + 1) * 0.5;
      v25 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x2F8);
      v26 = (void *)v25();
      v65 = v15;
      objc_msgSend(v26, sel_convertRect_fromCoordinateSpace_, v15, v23, v24, v22);
      v28 = v27;
      v30 = v29;
      v32 = v31;
      v34 = v33;

      LOBYTE(v66) = 1;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v13, 0, 0, 0, 0, 1, (unsigned __int8 *)&v66, 0x7FFFFFFFFFFFFFFFLL, v28, v30, v32, v34, 0, 0, 0xBu, 2u);
      v36 = v35;
      v37 = (void *)v25();
      v39 = v38;
      v40 = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
      *(_QWORD *)(inited + 32) = v36;
      v66 = inited;
      specialized Array._endMutation()();
      v42 = v66;
      v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 168);
      v44 = v36;
      v43(v42, v40, v39);
      swift_bridgeObjectRelease();

      v45 = v44;
      v46 = specialized CanvasMembers.init(_:)(v45);
      v48 = v47;
      v50 = v49;
      LOBYTE(v40) = v51;

      AnyCanvas.selection.setter(v46, v48, v50, v40 & 1);
      v52 = (void *)v25();
      v54 = v53;
      v55 = swift_getObjectType();
      v56 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 144))(v55, v54);

      if (!v56)
      {
LABEL_13:
        v62 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v45) + 0x2D0))(v57);
        if (v62)
        {
          v63 = (void *)v62;
          swift_retain();

          FormTextFieldAnalytics.recordEvent()();
          swift_release();
        }

        v4 = v65;
        goto LABEL_17;
      }
      v58 = *(_QWORD *)&v56[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
      swift_retain();

      v59 = *(_QWORD *)(v58 + 48);
      v60 = __OFADD__(v59, 1);
      v61 = v59 + 1;
      if (!v60)
      {
        *(_QWORD *)(v58 + 48) = v61;
        v57 = swift_release();
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void closure #2 in PaperDocumentViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  uint64_t v15;
  char *v16;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (char *)v3;
    if (one-time initialization token for shared != -1)
      swift_once();
    v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton];
    v6 = v5;
    objc_msgSend(v6, sel_bounds);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v4;
    v16 = v4;
    specialized SignatureManager.showSignatures(_:_:_:_:)(v16, v5, (uint64_t)partial apply for closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton(), v15, v8, v10, v12, v14);
    swift_release();

  }
}

void closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton()(void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  if (a1)
  {
    v3 = (_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v3)
    {
      v4 = *(_QWORD *)(*v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
      if (v4)
      {
        v5 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
        v6 = a1;
        v7 = v5;
        specialized ToolPickerControllerDelegate.addNewSignatureItem(_:)(a1);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

id @objc PaperDocumentViewController.canBecomeFirstResponder.getter(char *a1, uint64_t a2, SEL *a3)
{
  id *v5;
  objc_super v7;

  v5 = (id *)&a1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  if (*v5)
    return objc_msgSend(*v5, *a3);
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for PaperDocumentViewController(0);
  return objc_msgSendSuper2(&v7, *a3);
}

void PaperDocumentViewController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  char *v3;
  char *v7;
  id *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  _QWORD v12[6];
  objc_super v13;

  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for PaperDocumentViewController(0);
  objc_msgSendSuper2(&v13, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  v7 = &v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  if (!*(_QWORD *)v7)
    goto LABEL_4;
  v8 = (id *)(*(_QWORD *)v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (*v8)
  {
    objc_msgSend(*v8, sel_beginPDFViewRotation);
LABEL_4:
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v3;
    v12[4] = partial apply for closure #1 in PaperDocumentViewController.viewWillTransition(to:with:);
    v12[5] = v9;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1107296256;
    v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v12[3] = &block_descriptor_17;
    v10 = _Block_copy(v12);
    v11 = v3;
    swift_release();
    objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v10, 0);
    _Block_release(v10);
    return;
  }
  __break(1u);
}

id closure #1 in PaperDocumentViewController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  id result;
  id *v4;

  v2 = (_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  result = (id)swift_beginAccess();
  if (*v2)
  {
    v4 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    result = *v4;
    if (*v4)
      return objc_msgSend(result, sel_endPDFViewRotation);
    else
      __break(1u);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall PaperDocumentViewController.revertAllChanges()()
{
  PaperDocumentViewController.revertAllChanges()(PaperDocumentView.revertAllChanges());
}

void PaperDocumentViewController.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void **v7;
  void *v8;
  id v9;
  unsigned __int8 v10;

  v7 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v8 = *v7;
  if (*v7)
  {
    v10 = 3;
    v9 = v8;
    PaperDocumentView.merge<A>(_:from:)(a1, &v10, a2, a3);

  }
}

void PaperDocumentViewController.merge<A>(_:forward:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id *v9;
  id v10;

  v9 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v9)
  {
    v10 = *v9;
    PaperDocumentView.merge<A>(_:forward:)(a1, a2 & 1, a3, a4);

  }
}

uint64_t PaperDocumentViewController.publisher.getter()
{
  return PaperDocumentViewController.publisher.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject);
}

uint64_t PaperDocumentViewController.livePublisher.getter()
{
  return PaperDocumentViewController.publisher.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject);
}

uint64_t PaperDocumentViewController.publisher.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + *a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<PaperDocument>, Never>>);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  swift_retain();
  return v3;
}

uint64_t PaperDocumentViewController.liveStreamMessenger.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger);
}

uint64_t PaperDocumentViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.liveStreamMessenger.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.liveStreamMessenger.modify;
}

void PaperDocumentViewController.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  PaperDocumentViewController.pageOverlayViewProvider.modify(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t PaperDocumentViewController.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource);
}

uint64_t PaperDocumentViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.participantDetailsDataSource.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.participantDetailsDataSource.modify;
}

void PaperDocumentViewController.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  PaperDocumentViewController.pageOverlayViewProvider.modify(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, PaperDocumentView.participantDetailsDataSource.didset);
}

void PaperDocumentViewController.pageOverlayViewProvider.modify(uint64_t a1, char a2, _QWORD *a3, void (*a4)(void))
{
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v7 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + *(_QWORD *)(*(_QWORD *)a1 + 56) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    v8 = v7[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    v9 = (void **)(v8 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v10 = (char *)*v9;
    if (*v9)
    {
      v11 = v7[6] + v7[7];
      MEMORY[0x1DF0E666C](v11);
      v12 = *(_QWORD *)(v11 + 8);
      v13 = &v10[*a3];
      swift_beginAccess();
      *((_QWORD *)v13 + 1) = v12;
      swift_unknownObjectWeakAssign();
      v14 = v10;
      a4();
      swift_unknownObjectRelease();

    }
  }
  free(v7);
}

Swift::Void __swiftcall PaperDocumentViewController.participantDetailsDidChange()()
{
  PaperDocumentViewController.revertAllChanges()(PaperDocumentView.participantDetailsDidChange());
}

void PaperDocumentViewController.revertAllChanges()(void (*a1)(void))
{
  uint64_t v1;
  id *v3;
  id v4;

  v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v3)
  {
    v4 = *v3;
    a1();

  }
}

void key path setter for PaperDocumentViewController.showParticipantCursors : PaperDocumentViewController(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  char *v7;
  char *v8;

  v2 = *a1;
  v3 = *a2;
  v4 = (char *)(*a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *v4 = v2;
  v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v6 = (char *)*v5;
  if (*v5)
  {
    v7 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *v7 = v2;
    v8 = v6;
    PaperDocumentView.showParticipantCursors.didset();

  }
}

uint64_t PaperDocumentViewController.showParticipantCursors.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentViewController.showParticipantCursors.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  void **v4;
  char *v5;
  char v6;
  char *v7;
  char *v8;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *v3 = a1;
  v4 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v5 = (char *)*v4;
  if (v5)
  {
    v6 = a1 & 1;
    v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *v7 = v6;
    v8 = v5;
    PaperDocumentView.showParticipantCursors.didset();

  }
}

void (*PaperDocumentViewController.showParticipantCursors.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentViewController.showParticipantCursors.modify;
}

void PaperDocumentViewController.showParticipantCursors.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  void **v4;
  char *v5;
  char v6;
  char *v7;
  char *v8;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = (void **)(v3[6] + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v5 = (char *)*v4;
    if (*v4)
    {
      v6 = *(_BYTE *)(v3[6] + v3[7]);
      v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *v7 = v6;
      v8 = v5;
      PaperDocumentView.showParticipantCursors.didset();

    }
  }
  free(v3);
}

uint64_t key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = swift_unknownObjectRetain();
  a5(v7, v6);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentViewController.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider);
}

uint64_t PaperDocumentViewController.delegate.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v2);
}

uint64_t PaperDocumentViewController.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.textualContextProvider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.textualContextProvider.modify;
}

void PaperDocumentViewController.textualContextProvider.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + *(_QWORD *)(*(_QWORD *)a1 + 56) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    v4 = v3[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v6 = *v5;
    if (*v5)
    {
      v7 = v3[6] + v3[7];
      MEMORY[0x1DF0E666C](v7);
      v8 = *(_QWORD *)(v7 + 8);
      v9 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(_QWORD *)(v9 + 8) = v8;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
  }
  free(v3);
}

void *PaperDocumentViewController.viewControllerForPresentingUI.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PaperDocumentViewController.viewControllerForPresentingUI.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*PaperDocumentViewController.viewControllerForPresentingUI.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void specialized ToolPickerControllerDelegate.addNewSignatureItem(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  double v53;
  _QWORD *v54;
  double v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  id v79;
  char *v80;
  void *v81;
  char v82;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = v10[8];
  MEMORY[0x1E0C80A78](v9, v12);
  v13 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v80 = (char *)&v74 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v74 - v19;
  if (!a1)
    return;
  v77 = v8;
  v75 = ObjectType;
  v21 = a1;
  v22 = SignatureItem.size.getter();
  v24 = 400.0 / v22;
  if (400.0 / v22 > 1.0)
    v24 = 1.0;
  v25 = v22 * v24;
  v26 = v23 * v24;
  v27 = 72.0 / v26;
  if (72.0 / v26 > 1.0)
    v27 = 1.0;
  v28 = v25 * v27;
  v29 = v26 * v27;
  v76 = v2;
  v30 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v31 = *(_QWORD *)(v30 + 8);
    v32 = swift_getObjectType();
    v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(v32, v31);
    swift_unknownObjectRelease();
    if (v33)
    {
      v34 = objc_msgSend(v33, sel_window);
      if (v34)
      {
        v35 = v34;
        v36 = objc_msgSend(v34, sel_screen);

        objc_msgSend(v36, sel_scale);
        v38 = v37;

      }
      else
      {
        v38 = 1.0;
      }
      v39 = AnyCanvas.scaleFactorForNewElements.getter();

      v40 = v38 * (v28 * v39);
      v41 = v38 * (v29 * v39);
      v42 = floor(v40);
      v43 = v40 - v42;
      v44 = ceil(v40);
      if (v43 < 0.49)
        v44 = v42;
      v45 = floor(v41);
      v46 = v41 - v45;
      v47 = ceil(v41);
      if (v46 < 0.49)
        v47 = v45;
      v28 = v44 / v38;
      v29 = v47 / v38;
    }
  }
  v48 = 0.0;
  if (MEMORY[0x1DF0E666C](v30))
  {
    v49 = *(_QWORD *)(v30 + 8);
    v50 = swift_getObjectType();
    v51 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(v50, v49);
    v52 = swift_unknownObjectRelease();
    v53 = 0.0;
    v54 = 0;
    if (v51)
    {
      v48 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x1E0DEEDD8] & *v51) + 0x6B8))(v52, v28, v29);
      v53 = v55;
      v54 = v56;

    }
  }
  else
  {
    v53 = 0.0;
    v54 = 0;
  }
  type metadata accessor for SignatureManager();
  swift_initStaticObject();
  v79 = v21;
  v57 = SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v21, 0, 1, 0, 1, v48, v53);
  MEMORY[0x1E0C80A78](v57, v58);
  *((double *)&v74 - 6) = v48 - v28 * 0.5;
  *((double *)&v74 - 5) = v53 - v29 * 0.5;
  *((double *)&v74 - 4) = v28;
  *((double *)&v74 - 3) = v29;
  *(&v74 - 2) = v54;
  Capsule.callAsFunction<A>(_:)();
  v59 = v80;
  v78 = (void (*)(char *, char *, uint64_t))v10[2];
  v78(v80, v20, v9);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  Capsule<>.subscript.getter();
  swift_release();
  v74 = v10;
  v60 = (char *)v10[1];
  ((void (*)(char *, uint64_t))v60)(v59, v9);
  if (v82 == 1)
  {
    v78(v13, v20, v9);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v60)(v13, v9);
    v61 = v81;
    if (v81)
    {
      v62 = (uint64_t)v77;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v81 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v77, &demangling cache variable for type metadata for PKDrawing?);

      v63 = type metadata accessor for PKDrawing();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63) != 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for PKDrawing?);
        Capsule.callAsFunction<A>(_:)();
        goto LABEL_26;
      }
    }
    else
    {
      v64 = type metadata accessor for PKDrawing();
      v62 = (uint64_t)v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v77, 1, 1, v64);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for PKDrawing?);
  }
LABEL_26:
  if (MEMORY[0x1DF0E666C](v30))
  {
    v65 = *(_QWORD *)(v30 + 8);
    v66 = swift_getObjectType();
    v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 16))(v66, v65);
    swift_unknownObjectRelease();
    v68 = v79;
    if (v67)
    {
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
      v77 = v60;
      v69 = v80;
      v78(v80, v20, v9);
      v70 = v74;
      v71 = (*((unsigned __int8 *)v74 + 80) + 16) & ~(unint64_t)*((unsigned __int8 *)v74 + 80);
      v72 = swift_allocObject();
      v73 = v69;
      v60 = v77;
      ((void (*)(unint64_t, char *, uint64_t))v70[4])(v72 + v71, v73, v9);
      *(_QWORD *)(v72 + ((v11 + v71 + 7) & 0xFFFFFFFFFFFFFFF8)) = v75;
      CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v72);

      swift_release();
      v68 = (void *)v67;
    }
  }
  else
  {
    v68 = v79;
  }

  ((void (*)(char *, uint64_t))v60)(v20, v9);
}

Swift::Void __swiftcall PaperDocumentViewController.rotateCurrentPage(left:)(Swift::Bool left)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  id *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[4];
  _BOOL4 v29;

  v29 = left;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v28[-v13];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = &v28[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v28[-v22];
  v24 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v24)
  {
    v25 = (char *)*v24;
    PaperDocumentView.currentPage.getter((uint64_t)v14);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v23, v14, v15);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 16))(v19, v23, v15);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      SharedTagged_3.init(_:)();
      if (v25[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
      {
        if (objc_msgSend(*(id *)&v25[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly))
        {
          v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v10, 1, 1, v15);
          MEMORY[0x1E0C80A78](v26, v27);
          *(_QWORD *)&v28[-32] = v25;
          *(_QWORD *)&v28[-24] = v6;
          v28[-16] = v29;
          specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v10, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.rotatePage(_:left:));
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        }
      }

      (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
      (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v23, v15);
    }
  }
}

Swift::Void __swiftcall PaperDocumentViewController.toolPickerSelectedToolDidChange(_:)(PKToolPicker a1)
{
  uint64_t v1;
  id *v3;
  id v4;
  objc_class *v5;

  v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v3)
  {
    v4 = *v3;
    PaperDocumentView.updateTiledViewInk(for:)(a1.super.isa);
  }
  else
  {
    v4 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker);
    *(PKToolPicker *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker) = a1;
    v5 = a1.super.isa;
  }

}

Swift::Void __swiftcall PaperDocumentViewController.toolPickerIsRulerActiveDidChange(_:)(PKToolPicker a1)
{
  uint64_t v1;
  void **v3;
  char *v4;
  void *v5;
  char *v6;
  id v7;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v4 = (char *)*v3;
  if (*v3)
  {
    v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
    if (v5)
    {
      v6 = v4;
      v7 = v5;
      objc_msgSend(v7, sel_setRulerEnabled_, -[objc_class isRulerActive](a1.super.isa, sel_isRulerActive));

    }
    else
    {
      __break(1u);
    }
  }
}

id PaperDocumentViewController.pageLabelView.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PageLabelView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v0, sel_pageLabelViewTapped_);
    objc_msgSend(v4, sel_addGestureRecognizer_, v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

void PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(char a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  void **v5;
  void *v6;
  void **v7;
  char *v8;
  void **v9;
  void *v10;
  id v11;
  char *v12;
  UIView *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  _QWORD *v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  Swift::String v22;
  _QWORD *countAndFlagsBits;
  NSLayoutYAxisAnchor *object;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  UIView *v32;
  void *v33;
  id v34;
  char v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  UIView *v49;
  id v50;
  Swift::String v51;
  id v52;
  UILayoutGuide *v53;
  id v54;
  void *v55;
  id v56;
  double v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  UIView *v74;
  UIView *v75;
  char v76;
  uint64_t with;
  void *with_8;
  char *v79;
  id v80;
  _QWORD aBlock[6];
  int v82;
  int v83;
  Swift::String v84;

  v3 = v1;
  v5 = (void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  v6 = *v5;
  if (*v5)
  {
    v7 = (void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v8 = (char *)*v7;
    if (*v7)
    {
      v9 = (void **)&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
      swift_beginAccess();
      v10 = *v9;
      if (v10)
      {
        v11 = v6;
        v12 = v8;
        v13 = v10;
        v14 = -[UIView currentPage](v13, sel_currentPage);
        if (!v14)
        {
LABEL_42:

          return;
        }
        v15 = v14;
        v80 = v11;
        v79 = v12;
        v16 = *(id *)&v12[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
        v17 = objc_msgSend(v16, sel_pageCount);
        with_8 = v16;
        v18 = objc_msgSend(v16, sel_indexForPage_, v15);
        if (one-time initialization token for paperKitBundle != -1)
          swift_once();
        v84._object = (void *)0x80000001DDF50E20;
        v19._countAndFlagsBits = 0x2520666F20756C25;
        v19._object = (void *)0xEA0000000000756CLL;
        v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v20.value._object = (void *)0xEB00000000656C62;
        v21._countAndFlagsBits = 0;
        v21._object = (void *)0xE000000000000000;
        v84._countAndFlagsBits = 0xD000000000000024;
        v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v84);
        countAndFlagsBits = (_QWORD *)v22._countAndFlagsBits;
        object = (NSLayoutYAxisAnchor *)v22._object;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1DDF33AB0;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
        }
        else
        {
          v26 = MEMORY[0x1E0DEB418];
          v27 = MEMORY[0x1E0DEB490];
          *(_QWORD *)(v25 + 56) = MEMORY[0x1E0DEB418];
          *(_QWORD *)(v25 + 64) = v27;
          *(_QWORD *)(v25 + 32) = (char *)v18 + 1;
          *(_QWORD *)(v25 + 96) = v26;
          *(_QWORD *)(v25 + 104) = v27;
          *(_QWORD *)(v25 + 72) = v17;
          with = static String.localizedStringWithFormat(_:_:)();
          v29 = v28;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v30 = PaperDocumentViewController.pageLabelView.getter();
          v31 = objc_msgSend(v30, sel_superview);

          v18 = (_QWORD *)&unk_1F040D000;
          countAndFlagsBits = (_QWORD *)&unk_1F040D000;
          if (!v31)
            goto LABEL_10;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          v32 = v13;
          v76 = a1;
          v33 = v29;
          v34 = v31;
          v35 = static NSObject.== infix(_:_:)();

          countAndFlagsBits = &unk_1F040D000;
          v18 = &unk_1F040D000;

          v29 = v33;
          a1 = v76;
          if ((v35 & 1) == 0)
          {
LABEL_10:
            v36 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint;
            v37 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint];
            if (v37)
            {
              objc_msgSend(v37, sel_setActive_, 0);
              v38 = *(void **)&v3[v36];
            }
            else
            {
              v38 = 0;
            }
            *(_QWORD *)&v3[v36] = 0;

            v39 = v18[186];
            v40 = *(void **)&v3[v39];
            if (v40)
            {
              objc_msgSend(v40, sel_setActive_, 0);
              v41 = *(void **)&v3[v39];
            }
            else
            {
              v41 = 0;
            }
            *(_QWORD *)&v3[v39] = 0;

            v42 = countAndFlagsBits[187];
            v43 = *(void **)&v3[v42];
            if (v43)
            {
              objc_msgSend(v43, sel_setActive_, 0);
              v44 = *(void **)&v3[v42];
            }
            else
            {
              v44 = 0;
            }
            *(_QWORD *)&v3[v42] = 0;

          }
          if ((a1 & 1) != 0)
          {
            v45 = (void *)objc_opt_self();
            v46 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v47 = (_QWORD *)swift_allocObject();
            v47[2] = v46;
            v47[3] = v13;
            v47[4] = with;
            v47[5] = v29;
            aBlock[4] = partial apply for closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:);
            aBlock[5] = v47;
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            aBlock[3] = &block_descriptor_76_0;
            v48 = _Block_copy(aBlock);
            v49 = v13;
            swift_release();
            objc_msgSend(v45, sel_animateWithDuration_animations_, v48, 0.3);
            _Block_release(v48);
          }
          else
          {
            v50 = PaperDocumentViewController.pageLabelView.getter();
            v51._countAndFlagsBits = with;
            v51._object = v29;
            PageLabelView.showNow(in:with:)(v13, v51);
            swift_bridgeObjectRelease();

          }
          v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint;
          if (*(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint])
            goto LABEL_26;
          v52 = PaperDocumentViewController.pageLabelView.getter();
          v17 = objc_msgSend(v52, sel_topAnchor);

          v53 = -[UIView safeAreaLayoutGuide](v13, sel_safeAreaLayoutGuide);
          object = -[UILayoutGuide topAnchor](v53, sel_topAnchor);

          if (one-time initialization token for pageLabelViewTopOffset == -1)
          {
LABEL_25:
            v54 = objc_msgSend(v17, sel_constraintGreaterThanOrEqualToAnchor_constant_, object, *(double *)&static UIConstants.pageLabelViewTopOffset);

            v55 = *(void **)&v3[v2];
            *(_QWORD *)&v3[v2] = v54;
            v56 = v54;

            type metadata accessor for UILayoutPriority(0);
            v82 = 1120403456;
            v83 = 1148846080;
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, MEMORY[0x1E0DC2B88]);
            static _UIKitNumericRawRepresentable.- infix(_:_:)();
            LODWORD(v57) = aBlock[0];
            objc_msgSend(v56, sel_setPriority_, v57);

LABEL_26:
            v58 = v18[186];
            if (!*(_QWORD *)&v3[v58])
            {
              v59 = PaperDocumentViewController.pageLabelView.getter();
              v60 = objc_msgSend(v59, sel_leadingAnchor);

              v61 = objc_msgSend(v80, sel_trailingAnchor);
              if (one-time initialization token for pageLabelViewLeftOffset != -1)
                swift_once();
              v62 = objc_msgSend(v60, sel_constraintGreaterThanOrEqualToAnchor_constant_, v61, *(double *)&static UIConstants.pageLabelViewLeftOffset);

              v63 = *(void **)&v3[v58];
              *(_QWORD *)&v3[v58] = v62;

            }
            v64 = countAndFlagsBits[187];
            if (!*(_QWORD *)&v3[v64])
            {
              v65 = PaperDocumentViewController.pageLabelView.getter();
              v66 = objc_msgSend(v65, sel_leadingAnchor);

              v67 = objc_msgSend(v79, sel_safeAreaLayoutGuide);
              v68 = objc_msgSend(v67, sel_leadingAnchor);

              if (one-time initialization token for pageLabelViewLeftOffset != -1)
                swift_once();
              v69 = objc_msgSend(v66, sel_constraintGreaterThanOrEqualToAnchor_constant_, v68, *(double *)&static UIConstants.pageLabelViewLeftOffset);

              v70 = *(void **)&v3[v64];
              *(_QWORD *)&v3[v64] = v69;

            }
            v71 = *(void **)&v3[v2];
            if (v71)
              objc_msgSend(v71, sel_setActive_, 1);
            v72 = *(void **)&v3[v58];
            v12 = v79;
            v11 = v80;
            if (v72)
              objc_msgSend(v72, sel_setActive_, 1);
            v73 = *(void **)&v3[v64];
            if (v73)
              objc_msgSend(v73, sel_setActive_, 1);
            PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
            v74 = (UIView *)objc_msgSend(v3, sel_view);
            if (!v74)
            {
              __break(1u);
              return;
            }
            v75 = v74;
            -[UIView setNeedsLayout](v74, sel_setNeedsLayout);

            v13 = v75;
            goto LABEL_42;
          }
        }
        swift_once();
        goto LABEL_25;
      }
    }
  }
}

void closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(uint64_t a1, UIView *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  Swift::String v11;

  v7 = a1 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x1DF0E666C](v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = PaperDocumentViewController.pageLabelView.getter();

    v11._countAndFlagsBits = a3;
    v11._object = a4;
    PageLabelView.showNow(in:with:)(a2, v11);

  }
}

void PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  double v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint;
  v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint];
  if (v3)
  {
    objc_msgSend(v3, sel_setActive_, 0);
    v4 = *(void **)&v0[v2];
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)&v0[v2] = 0;

  v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView];
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v6, sel_superview);

    if (!v7)
    {
LABEL_9:
      v12 = v6;
LABEL_20:

      return;
    }
    v8 = objc_msgSend(v6, sel_superview);
    v9 = PaperDocumentViewController.pageLabelView.getter();
    v22 = objc_msgSend(v9, sel_superview);

    if (v8)
    {
      if (!v22)
      {

        v12 = v8;
        goto LABEL_20;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v10 = v8;
      v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) == 0)
        goto LABEL_9;
    }
    else if (v22)
    {
LABEL_18:

      v12 = v22;
      goto LABEL_20;
    }
    v13 = objc_msgSend(v1, sel_traitCollection);
    v14 = objc_msgSend(v13, sel_horizontalSizeClass);

    if (v14 == (id)1
      || (v15 = objc_msgSend((id)objc_opt_self(), sel_currentDevice),
          v16 = objc_msgSend(v15, sel_userInterfaceIdiom),
          v15,
          v17 = 0.0,
          !v16))
    {
      if (one-time initialization token for pageLabelViewTopOffset != -1)
        swift_once();
      v17 = *(double *)&static UIConstants.pageLabelViewTopOffset;
    }
    v18 = PaperDocumentViewController.pageLabelView.getter();
    v19 = objc_msgSend(v18, sel_topAnchor);

    v20 = objc_msgSend(v6, sel_bottomAnchor);
    v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v20, v17);

    objc_msgSend(v21, sel_setActive_, 1);
    v22 = *(id *)&v1[v2];
    *(_QWORD *)&v1[v2] = v21;
    goto LABEL_18;
  }
}

void PaperDocumentViewController.pageLabelViewTapped(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  char v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSDate v13;
  id v14;
  _BYTE v15[24];

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (_BYTE *)(v0
               + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  if (*v6 == 1)
  {
    v7 = (char *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    swift_beginAccess();
    v8 = *v7;
    *v7 ^= 1u;
    PaperDocumentViewController.isThumbnailViewCollapsed.didset(v8);
    v9 = (char *)PaperDocumentViewController.pageLabelView.getter();
    v10 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
    v11 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer];
    if (v11)
    {
      v12 = v11;
      Date.init(timeIntervalSinceNow:)();
      v13.super.isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
      objc_msgSend(v12, sel_setFireDate_, v13.super.isa);

    }
    else
    {
      v14 = objc_msgSend((id)objc_opt_self(), sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_, v9, sel_fadeOut, 0, 1, 2.0);
      v13.super.isa = *(Class *)&v9[v10];
      *(_QWORD *)&v9[v10] = v14;
    }

  }
}

uint64_t key path setter for PaperDocumentViewController.magicGenerativePlaygroundTokenProvider : PaperDocumentViewController(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v5, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v5, v3, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  return swift_endAccess();
}

uint64_t PaperDocumentViewController.magicGenerativePlaygroundTokenProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a1, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t PaperDocumentViewController.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  return swift_endAccess();
}

uint64_t (*PaperDocumentViewController.magicGenerativePlaygroundTokenProvider.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)a1;
  v16 = *(void **)(a1 + 8);
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  type metadata accessor for MainActor();
  v18 = v5;
  outlined copy of MagicGenerativePlaygroundContext(v15, v16, a1);
  v19 = static MainActor.shared.getter();
  v20 = swift_allocObject();
  v21 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v21;
  *(_QWORD *)(v20 + 32) = v18;
  *(_QWORD *)(v20 + 40) = v15;
  *(_QWORD *)(v20 + 48) = v16;
  *(_BYTE *)(v20 + 56) = a1;
  *(double *)(v20 + 64) = a2;
  *(double *)(v20 + 72) = a3;
  *(double *)(v20 + 80) = a4;
  *(double *)(v20 + 88) = a5;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:), v20);
  return swift_release();
}

uint64_t closure #1 in PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  *(double *)(v11 + 112) = a4;
  *(double *)(v11 + 120) = a5;
  *(double *)(v11 + 96) = a2;
  *(double *)(v11 + 104) = a3;
  *(_BYTE *)(v11 + 57) = a11;
  *(_QWORD *)(v11 + 80) = a9;
  *(_QWORD *)(v11 + 88) = a10;
  *(_QWORD *)(v11 + 64) = a1;
  *(_QWORD *)(v11 + 72) = a8;
  *(_QWORD *)(v11 + 128) = type metadata accessor for MainActor();
  *(_QWORD *)(v11 + 136) = static MainActor.shared.getter();
  *(_QWORD *)(v11 + 144) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v11 + 152) = v12;
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:)()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = (void **)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v2 = *v1;
  *(_QWORD *)(v0 + 160) = *v1;
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)(v0 + 168) = static MainActor.shared.getter();
    *(_QWORD *)(v0 + 176) = dispatch thunk of Actor.unownedExecutor.getter();
    *(_QWORD *)(v0 + 184) = v4;
    return swift_task_switch();
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 64) = *(_QWORD *)(v0 + 160) == 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  char *v1;
  void *v2;
  void *v3;
  char v4;
  _QWORD *v5;
  void *v7;

  v1 = (char *)PaperDocumentView.currentPageCanvas.getter();
  if (v1
    && (v2 = v1,
        v3 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool],
        *(_QWORD *)(v0 + 192) = v3,
        v3,
        v2,
        v3))
  {
    v4 = *(_BYTE *)(v0 + 57);
    *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 80);
    *(_BYTE *)(v0 + 56) = v4;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v5;
    *v5 = v0;
    v5[1] = closure #1 in PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:)(v0 + 40, *(double *)(v0 + 96), *(double *)(v0 + 104), *(double *)(v0 + 112), *(double *)(v0 + 120));
  }
  else
  {
    v7 = *(void **)(v0 + 160);
    swift_release();

    return swift_task_switch();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 192);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);
  swift_release();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  **(_BYTE **)(v0 + 64) = *(_QWORD *)(v0 + 160) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id PaperDocumentViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void PaperDocumentViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperDocumentViewController(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.textualContextProvider.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void *protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperDocumentViewController()
{
  _QWORD *v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(*v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperDocumentViewController(void *a1)
{
  _QWORD *v1;
  void **v3;
  void *v4;

  v3 = (void **)(*v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperDocumentViewController())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentViewController(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.liveStreamMessenger.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = *v3 + *a3;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v4);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentViewController(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.participantDetailsDataSource.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperDocumentViewController()
{
  _QWORD *v0;
  id *v1;
  id v2;

  v1 = (id *)(*v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v1)
  {
    v2 = *v1;
    PaperDocumentView.participantDetailsDidChange()();

  }
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperDocumentViewController()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperDocumentViewController(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  _BYTE *v4;
  void **v5;
  char *v6;
  char v7;
  char *v8;
  char *v9;

  v3 = *v1;
  v4 = (_BYTE *)(*v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *v4 = a1;
  v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v6 = (char *)*v5;
  if (v6)
  {
    v7 = a1 & 1;
    v8 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *v8 = v7;
    v9 = v6;
    PaperDocumentView.showParticipantCursors.didset();

  }
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentViewController(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.showParticipantCursors.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

Swift::Void __swiftcall PaperDocumentViewController_ScrollViewObserver._observeScrollViewDidScroll(_:)(UIScrollView_optional *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void **v6;
  void *v7;
  char *v8;
  id v9;
  UIScrollView_optional *v10;
  char v11;
  uint64_t v12;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit46PaperDocumentViewController_ScrollViewObserver_viewController;
  v4 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit46PaperDocumentViewController_ScrollViewObserver_viewController);
  v5 = (id)v4;
  if (v4)
  {
    v6 = (void **)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    v7 = *v6;
    v8 = v7;

    if (!v7)
    {
      v5 = 0;
      if (a1)
        goto LABEL_5;
LABEL_9:
      if (v5)
      {
LABEL_12:

        return;
      }
LABEL_10:
      v12 = MEMORY[0x1DF0E666C](v3);
      if (!v12)
        return;
      v5 = (id)v12;
      PaperDocumentViewController.notifyContentFrameDidChange()();
      goto LABEL_12;
    }
    v9 = *(id *)&v8[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView];

    v5 = objc_msgSend(v9, sel_collectionView);
  }
  if (!a1)
    goto LABEL_9;
LABEL_5:
  if (v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
    v10 = a1;
    v11 = static NSObject.== infix(_:_:)();

    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
}

id PaperDocumentViewController_ScrollViewObserver.__deallocating_deinit(uint64_t a1)
{
  return PaperDocumentPasswordViewController.__deallocating_deinit(a1, type metadata accessor for PaperDocumentViewController_ScrollViewObserver);
}

id PaperDocumentPasswordViewController.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall PaperDocumentViewController.pageDidScroll(_:)(NSNotification_optional a1)
{
  uint64_t v1;
  Class isa;
  _QWORD *v3;
  id *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  void *v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  isa = a1.value.super.isa;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v3)
    return;
  v4 = (id *)(*v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = objc_msgSend(*v4, sel_documentScrollView);
  if (!v5)
    return;
  if (!isa)
  {
LABEL_18:
    __break(1u);
    return;
  }
  v6 = v5;
  if (-[objc_class object](isa, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  outlined init with take of Any?((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:

    return;
  }
  v7 = v6;
  v8 = v10;
  v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) != 0)
    PaperDocumentViewController.notifyContentFrameDidChange()();

}

uint64_t PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(void *a1, void *a2, void *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  unsigned __int8 v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  os_unfair_lock_s *v37;
  os_unfair_lock_s *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void (*v50)(void ***);
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  _QWORD v67[5];

  v66 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v59 - v16;
  v18 = type metadata accessor for CRAsset();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocumentPasswordViewController(0);
  v23 = swift_dynamicCastClass();
  if (!v23)
    return 0;
  v24 = v23;
  v64 = v3;
  v65 = a3;
  v25 = OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock;
  v26 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock);
  if (v26)
  {
    v63 = v9;
    v27 = v23 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v27, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      return 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
    v28 = *(void **)(v24 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument);
    if (v28)
    {
      v60 = OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument;
      v62 = a1;
      v29 = (id)v26;
      v61 = v28;
      v30 = (void *)MEMORY[0x1DF0E41AC](v66, v65);
      v31 = objc_msgSend(v29, sel_unlockWithPassword_, v30);

      if ((v31 & 1) != 0)
      {
        v59 = v29;
        v32 = *(void **)(v24 + v25);
        *(_QWORD *)(v24 + v25) = 0;

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, 1, 1, v18);
        swift_beginAccess();
        outlined assign with take of Date?((uint64_t)v13, v27, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
        swift_endAccess();
        v33 = *(void **)(v24 + v60);
        *(_QWORD *)(v24 + v60) = 0;

        if (one-time initialization token for shared != -1)
          v34 = swift_once();
        MEMORY[0x1E0C80A78](v34, v35);
        *(&v59 - 4) = v36;
        *(&v59 - 3) = v22;
        v38 = v37 + 4;
        v39 = v65;
        *(&v59 - 2) = v66;
        *(&v59 - 1) = v39;
        os_unfair_lock_lock(v37 + 4);
        specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v40, partial apply for closure #1 in PasswordManager.add(password:for:));
        os_unfair_lock_unlock(v38);
        v41 = CRAsset.digest.getter();
        v42 = v64;
        v43 = (uint64_t *)&v64[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove];
        v44 = *(_QWORD *)&v64[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove];
        v45 = *(_QWORD *)&v64[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove + 8];
        *v43 = v41;
        v43[1] = v46;
        v47 = outlined consume of Data?(v44, v45);
        MEMORY[0x1E0C80A78](v47, v48);
        v49 = v59;
        *(&v59 - 2) = v59;
        *(&v59 - 1) = v22;
        v50 = PaperDocumentViewController.paperDocument.modify(v67);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
        Capsule.callAsFunction<A>(_:)();
        ((void (*)(_QWORD *, _QWORD))v50)(v67, 0);
        v51 = type metadata accessor for TaskPriority();
        v26 = 1;
        v52 = (uint64_t)v63;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v63, 1, 1, v51);
        type metadata accessor for MainActor();
        v53 = v61;
        v54 = v42;
        v55 = static MainActor.shared.getter();
        v56 = (_QWORD *)swift_allocObject();
        v57 = MEMORY[0x1E0DF06E8];
        v56[2] = v55;
        v56[3] = v57;
        v56[4] = v54;
        v56[5] = v53;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v52, (uint64_t)&async function pointer to partial apply for closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:), (uint64_t)v56);

        swift_release();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
        return v26;
      }

    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    return 0;
  }
  return v26;
}

uint64_t closure #1 in PaperDocumentViewController.open(pdfDocument:asset:context:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v25;
  id v26;

  v25 = a3;
  v26 = a2;
  v4 = type metadata accessor for CRAsset();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PaperDocument(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v25, v4, v20);
  v23 = v26;
  swift_retain();
  specialized PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v23, (uint64_t)v8, a1, 0, 1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for PaperDocument?);
  outlined init with take of PKStrokeStruct((uint64_t)v12, (uint64_t)v22, type metadata accessor for PaperDocument);
  outlined init with copy of PKStrokeProperties((uint64_t)v22, (uint64_t)v17, type metadata accessor for PaperDocument);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule.Ref<>.root.setter();
  return outlined destroy of PKStrokeProperties((uint64_t)v22, type metadata accessor for PaperDocument);
}

uint64_t closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;

  v5[2] = type metadata accessor for MainActor();
  v5[3] = static MainActor.shared.getter();
  v7 = (_QWORD *)swift_task_alloc();
  v5[4] = v7;
  *v7 = v5;
  v7[1] = closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:);
  return PaperDocumentViewController.setupDocumentView(context:)(a5);
}

uint64_t closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)()
{
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized PaperDocumentView.merge<A>(_:from:)(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t ObjectType;
  void (*v27)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  id v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  int v46;
  char v47;

  v3 = v2;
  v5 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v43 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v5;
  if (!v5 && *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
  {
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    swift_retain();
    CRMulticastSyncManager.merge<A>(_:sendDelta:)();
    swift_release();
  }
  v10 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v11 = type metadata accessor for PaperDocument(0);
  v12 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v42 = v10;
  Capsule.merge<A>(_:)();
  swift_endAccess();
  if (v46 != 4)
  {
    v40 = v7;
    v41 = v6;
    v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v13);
    swift_bridgeObjectRelease();
    v39 = v3;
    v14 = (uint64_t *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    swift_beginAccess();
    v15 = *v14;
    v16 = *(_QWORD *)(*v14 + 64);
    v44 = *v14 + 64;
    v17 = 1 << *(_BYTE *)(v15 + 32);
    v18 = -1;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    v19 = v18 & v16;
    v45 = (unint64_t)(v17 + 63) >> 6;
    swift_bridgeObjectRetain();
    v20 = 0;
    while (1)
    {
      if (v19)
      {
        v21 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v22 = v21 | (v20 << 6);
      }
      else
      {
        v29 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          return;
        }
        if (v29 >= v45)
          goto LABEL_27;
        v30 = *(_QWORD *)(v44 + 8 * v29);
        ++v20;
        if (!v30)
        {
          v20 = v29 + 1;
          if (v29 + 1 >= v45)
            goto LABEL_27;
          v30 = *(_QWORD *)(v44 + 8 * v20);
          if (!v30)
          {
            v20 = v29 + 2;
            if (v29 + 2 >= v45)
              goto LABEL_27;
            v30 = *(_QWORD *)(v44 + 8 * v20);
            if (!v30)
            {
              v20 = v29 + 3;
              if (v29 + 3 >= v45)
                goto LABEL_27;
              v30 = *(_QWORD *)(v44 + 8 * v20);
              if (!v30)
              {
                v31 = v29 + 4;
                if (v31 >= v45)
                {
LABEL_27:
                  swift_release();
                  v7 = v40;
                  v6 = v41;
                  v3 = v39;
                  if ((v46 - 3) > 1)
                    return;
                  break;
                }
                v30 = *(_QWORD *)(v44 + 8 * v31);
                if (!v30)
                {
                  while (1)
                  {
                    v20 = v31 + 1;
                    if (__OFADD__(v31, 1))
                      goto LABEL_39;
                    if (v20 >= v45)
                      goto LABEL_27;
                    v30 = *(_QWORD *)(v44 + 8 * v20);
                    ++v31;
                    if (v30)
                      goto LABEL_26;
                  }
                }
                v20 = v31;
              }
            }
          }
        }
LABEL_26:
        v19 = (v30 - 1) & v30;
        v22 = __clz(__rbit64(v30)) + (v20 << 6);
      }
      v23 = *(_QWORD *)(v15 + 56) + 16 * v22;
      v24 = *(void **)v23;
      v25 = *(_QWORD *)(v23 + 8);
      ObjectType = swift_getObjectType();
      v47 = v46;
      v27 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 88);
      v28 = v24;
      v27(a1, &v47, v11, v12, ObjectType, v25);

    }
  }
  v32 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
  {
    v33 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v43, v42, v6);
    swift_retain();
    CRMulticastSyncManager.sync(_:sendDelta:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
  }
  if (v46 == 4)
  {
    if (PaperDocumentView.isLiveEditing()())
    {
      v34 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v43, v42, v6);
    }
    else
    {
      v35 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v36 = v42;
      v34 = v43;
      v35(v43, v42, v6);
      PassthroughSubject.send(_:)();
      v37 = *(void (**)(char *, uint64_t))(v7 + 8);
      v37(v34, v6);
      if (*(_QWORD *)(v3 + v32))
      {
        v35(v34, v36, v6);
        swift_retain();
        CRMulticastSyncManager.sync(_:sendDelta:)();
        swift_release();
        v37(v34, v6);
      }
      v35(v34, v36, v6);
    }
    PassthroughSubject.send(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
  }
}

double specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<D0>(void (*a1)(__int128 *__return_ptr)@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;

  a1(&v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *a2 = v5;
  }
  return result;
}

void specialized closure #1 in PaperDocumentViewController.setUpObservers()()
{
  PaperDocumentViewController.updateBackgroundColor()();
}

id specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  id v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  objc_class *v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE v42[4];
  int v43;
  id v44;
  uint64_t v45;
  objc_super v46;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v42[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *a3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView] = 0;
  v16 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver;
  v17 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController_ScrollViewObserver());
  v18 = v3;
  *(_QWORD *)&v3[v16] = objc_msgSend(v17, sel_init);
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer] = 0;
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility] = 1;
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v44 = a1;
  v45 = a2;
  v43 = v15;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v19 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v19 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_cancellables] = v19;
  v20 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  *(_QWORD *)&v18[v20] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1278]), sel_init);
  v21 = (uint64_t)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp];
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v24(v21, 1, 1, v22);
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = 0;
  *(_OWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove] = xmmword_1DDF33630;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = 0;
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically] = 0;
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = 0;
  v25 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  *(_QWORD *)&v18[v25] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  v26 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton;
  type metadata accessor for FormPlusButtonView();
  *(_QWORD *)&v18[v26] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] = 0;
  v27 = &v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
  v28 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = 0;
  v29 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(_QWORD *)&v18[v29] = PassthroughSubject.init()();
  v30 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject;
  swift_allocObject();
  *(_QWORD *)&v18[v30] = PassthroughSubject.init()();
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI] = 0;
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToPaperDocumentLeadingConstraint] = 0;
  v31 = &v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v31 = 0u;
  *((_OWORD *)v31 + 1) = 0u;
  *((_QWORD *)v31 + 4) = 0;
  v18[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode] = v43;
  v32 = v45;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v23 + 16))(v14, v45, v22);
  v24((uint64_t)v14, 0, 1, v22);
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v14, v21, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();

  v33 = (objc_class *)type metadata accessor for PaperDocumentViewController(0);
  v46.receiver = v18;
  v46.super_class = v33;
  v34 = objc_msgSendSuper2(&v46, sel_initWithNibName_bundle_, 0, 0);
  v35 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v10, 1, 1, v35);
  type metadata accessor for MainActor();
  v36 = v34;
  v37 = v44;
  v38 = static MainActor.shared.getter();
  v39 = (_QWORD *)swift_allocObject();
  v40 = MEMORY[0x1E0DF06E8];
  v39[2] = v38;
  v39[3] = v40;
  v39[4] = v36;
  v39[5] = v37;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:), (uint64_t)v39);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v32, v22);
  return v36;
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  id v14;
  void (*v15)(id, uint64_t, uint64_t);
  id v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (id *)(a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v7 = 0;
  v22 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v18 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v22)
      goto LABEL_23;
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v7;
    if (!v19)
    {
      v7 = v18 + 1;
      if (v18 + 1 >= v22)
        goto LABEL_23;
      v19 = *(_QWORD *)(v21 + 8 * v7);
      if (!v19)
      {
        v7 = v18 + 2;
        if (v18 + 2 >= v22)
          goto LABEL_23;
        v19 = *(_QWORD *)(v21 + 8 * v7);
        if (!v19)
        {
          v7 = v18 + 3;
          if (v18 + 3 >= v22)
            goto LABEL_23;
          v19 = *(_QWORD *)(v21 + 8 * v7);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v19 - 1) & v19;
    v9 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_5:
    v10 = *(_QWORD *)(a1 + 56) + 16 * v9;
    v11 = *(void **)v10;
    v12 = *(_QWORD *)(v10 + 8);
    ObjectType = swift_getObjectType();
    v14 = *v6;
    v15 = *(void (**)(id, uint64_t, uint64_t))(v12 + 248);
    v16 = *v6;
    v17 = v11;
    v15(v14, ObjectType, v12);

  }
  v20 = v18 + 4;
  if (v20 >= v22)
  {
LABEL_23:
    swift_release();
    return;
  }
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v7 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v7 >= v22)
      goto LABEL_23;
    v19 = *(_QWORD *)(v21 + 8 * v7);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void (*v15)(char *, uint64_t, uint64_t);
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (char *)(a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v7 = 0;
  v8 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      goto LABEL_23;
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v8)
        goto LABEL_23;
      v18 = *(_QWORD *)(v20 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v8)
          goto LABEL_23;
        v18 = *(_QWORD *)(v20 + 8 * v7);
        if (!v18)
        {
          v7 = v17 + 3;
          if (v17 + 3 >= v8)
            goto LABEL_23;
          v18 = *(_QWORD *)(v20 + 8 * v7);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v18 - 1) & v18;
    v10 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
    v11 = *(_QWORD *)(a1 + 56) + 16 * v10;
    v12 = *(void **)v11;
    v13 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    v21 = *v6;
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 40);
    v16 = v12;
    v15(&v21, ObjectType, v13);

  }
  v19 = v17 + 4;
  if (v19 >= v8)
  {
LABEL_23:
    swift_release();
    return;
  }
  v18 = *(_QWORD *)(v20 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v8)
      goto LABEL_23;
    v18 = *(_QWORD *)(v20 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized PaperDocumentViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  result = swift_beginAccess();
  v7 = *v5;
  if (*v5)
  {
    if (MEMORY[0x1DF0E666C](v4))
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    else
      v8 = 0;
    v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    *(_QWORD *)(v9 + 8) = v8;
    swift_unknownObjectWeakAssign();
    return swift_unknownObjectRelease();
  }
  return result;
}

void specialized PaperDocumentViewController.toolPicker.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  void **v5;
  char *v6;
  void *v7;
  id *v8;
  id v9;
  id v10;
  char *v11;
  id v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;

  v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker) = a1;
  v4 = a1;

  v5 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v6 = (char *)*v5;
  if (v6)
  {
    v7 = *(void **)(v1 + v2);
    v8 = (id *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
    swift_beginAccess();
    v9 = *v8;
    *v8 = v7;
    v10 = v7;
    v11 = v6;
    if (v9)
    {
      objc_msgSend(v9, sel_removeObserver_, v11);
      v12 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v9, sel_removeObserver_, v12);

    }
    swift_beginAccess();
    v13 = v11;
    v14 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v14, (uint64_t)v13);
    swift_bridgeObjectRelease();

    if (*v8)
    {
      v15 = *v8;
      objc_msgSend(v15, sel_addObserver_, v13);
      v16 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v15, sel_addObserver_, v16);

      PaperDocumentView.updateTiledViewInk(for:)(v15);
      PaperDocumentView.updateToolPicker()();

      v4 = v13;
      v13 = (char *)v9;
      v9 = v10;
      v10 = v15;
    }

    v4 = (char *)v10;
  }

}

uint64_t type metadata accessor for PaperDocumentViewController(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperDocumentViewController);
}

id specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  id v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  objc_class *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  void *v44;
  id v45;
  _BYTE v47[12];
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  void *v52;
  uint64_t v53;
  objc_super v54;

  v7 = type metadata accessor for DataOrURL();
  v49 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v50 = v9;
  v51 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v47[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v47[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = *a3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView] = 0;
  v20 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver;
  v21 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController_ScrollViewObserver());
  v22 = v3;
  *(_QWORD *)&v3[v20] = objc_msgSend(v21, sel_init);
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer] = 0;
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility] = 1;
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v52 = a2;
  v53 = a1;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v23 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v23 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_cancellables] = v23;
  v24 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  *(_QWORD *)&v22[v24] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1278]), sel_init);
  v25 = (uint64_t)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp];
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v25, 1, 1, v26);
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = 0;
  *(_OWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove] = xmmword_1DDF33630;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = 0;
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically] = 0;
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = 0;
  v28 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  *(_QWORD *)&v22[v28] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  v29 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton;
  type metadata accessor for FormPlusButtonView();
  *(_QWORD *)&v22[v29] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] = 0;
  v30 = &v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
  v31 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = 0;
  v32 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(_QWORD *)&v22[v32] = PassthroughSubject.init()();
  v33 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject;
  swift_allocObject();
  *(_QWORD *)&v22[v33] = PassthroughSubject.init()();
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI] = 0;
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToPaperDocumentLeadingConstraint] = 0;
  v34 = &v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v34 = 0u;
  *((_OWORD *)v34 + 1) = 0u;
  *((_QWORD *)v34 + 4) = 0;
  v22[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode] = v48;
  static CRKeyPath.unique.getter();
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.init(id:initClosure:)();
  v27((uint64_t)v19, 0, 1, v26);
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v19, v25, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();

  v35 = (objc_class *)type metadata accessor for PaperDocumentViewController(0);
  v54.receiver = v22;
  v54.super_class = v35;
  v36 = objc_msgSendSuper2(&v54, sel_initWithNibName_bundle_, 0, 0);
  static TaskPriority.userInitiated.getter();
  v37 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v13, 0, 1, v37);
  v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v39 = v53;
  v40 = v51;
  outlined init with copy of PKStrokeProperties(v53, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v41 = (*(unsigned __int8 *)(v49 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  v42 = (v50 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (_QWORD *)swift_allocObject();
  v43[2] = 0;
  v43[3] = 0;
  v43[4] = v38;
  outlined init with take of PKStrokeStruct((uint64_t)v40, (uint64_t)v43 + v41, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v44 = v52;
  *(_QWORD *)((char *)v43 + v42) = v52;
  v45 = v44;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:), (uint64_t)v43);
  swift_release();

  outlined destroy of PKStrokeProperties(v39, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for TaskPriority?);
  return v36;
}

uint64_t partial apply for closure #1 in PasswordManager.clear(for:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in PasswordManager.clear(for:)(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1DDBEE0A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in PaperDocumentViewController.viewWillTransition(to:with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperDocumentViewController.viewWillTransition(to:with:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

void specialized PaperDocumentViewController.init(coder:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v1 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView] = 0;
  v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver;
  *(_QWORD *)&v1[v2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController_ScrollViewObserver()), sel_init);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility] = 1;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v3 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v3 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_cancellables] = v3;
  v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  *(_QWORD *)&v1[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1278]), sel_init);
  v5 = &v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = 0;
  *(_OWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove] = xmmword_1DDF33630;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = 0;
  v7 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  *(_QWORD *)&v1[v7] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  v8 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton;
  type metadata accessor for FormPlusButtonView();
  *(_QWORD *)&v1[v8] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] = 0;
  v9 = &v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = 0;
  v11 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(_QWORD *)&v1[v11] = PassthroughSubject.init()();
  v12 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject;
  swift_allocObject();
  *(_QWORD *)&v1[v12] = PassthroughSubject.init()();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToPaperDocumentLeadingConstraint] = 0;
  v13 = &v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_QWORD *)v13 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PaperDocumentViewController.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, void (*a5)(void))
{
  uint64_t v5;
  uint64_t v9;
  void **v10;
  uint64_t result;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v9 = v5 + *a3;
  swift_beginAccess();
  *(_QWORD *)(v9 + 8) = a2;
  swift_unknownObjectWeakAssign();
  v10 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  result = swift_beginAccess();
  v12 = (char *)*v10;
  if (*v10)
  {
    MEMORY[0x1DF0E666C](v9);
    v13 = *(_QWORD *)(v9 + 8);
    v14 = &v12[*a4];
    swift_beginAccess();
    *((_QWORD *)v14 + 1) = v13;
    swift_unknownObjectWeakAssign();
    v15 = v12;
    a5();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized PaperDocumentViewController.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  result = swift_beginAccess();
  v7 = *v5;
  if (*v5)
  {
    MEMORY[0x1DF0E666C](v4);
    v8 = *(_QWORD *)(v4 + 8);
    v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
    swift_beginAccess();
    *(_QWORD *)(v9 + 8) = v8;
    swift_unknownObjectWeakAssign();
    return swift_unknownObjectRelease();
  }
  return result;
}

id outlined copy of MagicGenerativePlaygroundContext(id result, id a2, char a3)
{
  if (a3 == 1)
    return result;
  if (!a3)
    return (id)swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1DDBEE68C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 40), *(id *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

void outlined consume of MagicGenerativePlaygroundContext(void *a1, id a2, char a3)
{
  if (a3 == 1)
  {

  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(double *)(v1 + 64);
  v10 = *(double *)(v1 + 72);
  v11 = *(double *)(v1 + 80);
  v12 = *(double *)(v1 + 88);
  v13 = *(_BYTE *)(v1 + 56);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:)(a1, v9, v10, v11, v12, v4, v5, v6, v7, v8, v13);
}

uint64_t sub_1DDBEE79C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate, a2);
}

uint64_t sub_1DDBEE7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized PaperDocumentViewController.delegate.setter);
}

id sub_1DDBEE7C4@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView, a2);
}

void sub_1DDBEE7D0(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  key path setter for PaperViewController.imageViewController : PaperViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
}

id sub_1DDBEE7EC@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView, a2);
}

void sub_1DDBEE7F8(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  key path setter for PaperViewController.imageViewController : PaperViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
}

uint64_t sub_1DDBEE814@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility, a2);
}

uint64_t sub_1DDBEE824@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed, a2);
}

void sub_1DDBEE830(char *a1, _QWORD *a2)
{
  char v2;
  char *v3;
  char v4;

  v2 = *a1;
  v3 = (char *)(*a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v4);
}

uint64_t sub_1DDBEE88C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void sub_1DDBEE8DC(unsigned __int8 *a1)
{
  unsigned __int8 v1;

  v1 = *a1;
  PaperDocumentViewController.editingMode.setter(&v1);
}

uint64_t sub_1DDBEE910@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider, a2);
}

uint64_t sub_1DDBEE91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(void))PaperDocumentView.pageOverlayViewProvider.didset);
}

void sub_1DDBEE94C(id *a1)
{
  id v1;

  v1 = *a1;
  specialized PaperDocumentViewController.toolPicker.setter(v1);

}

uint64_t sub_1DDBEE984@<X0>(uint64_t a1@<X8>)
{
  return PaperDocumentViewController.paperDocument.getter(a1);
}

uint64_t sub_1DDBEE9A8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically, a2);
}

uint64_t sub_1DDBEE9B4(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_1DDBEEA00@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, a2);
}

uint64_t sub_1DDBEEA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t sub_1DDBEEA38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, a2);
}

uint64_t sub_1DDBEEA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t sub_1DDBEEA70@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors, a2);
}

uint64_t keypath_get_9Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1DDBEEACC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider, a2);
}

uint64_t keypath_getTm_0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a1 + *a2;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v4);
  v6 = *(_QWORD *)(v4 + 8);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_1DDBEEB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized PaperDocumentViewController.textualContextProvider.setter);
}

id sub_1DDBEEB48@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI, a2);
}

void sub_1DDBEEB54(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  key path setter for PaperViewController.imageViewController : PaperViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
}

uint64_t sub_1DDBEEB70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a2, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t ObjC metadata update function for PaperDocumentPasswordViewController()
{
  return type metadata accessor for PaperDocumentPasswordViewController(0);
}

uint64_t type metadata accessor for PaperDocumentPasswordViewController(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for PaperDocumentPasswordViewController);
}

void type metadata completion function for PaperDocumentPasswordViewController()
{
  unint64_t v0;

  type metadata accessor for CRAsset?(319, (unint64_t *)&lazy cache variable for type metadata for CRAsset?, (void (*)(uint64_t))MEMORY[0x1E0D12958]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ObjC metadata update function for PaperDocumentViewController()
{
  return type metadata accessor for PaperDocumentViewController(0);
}

void type metadata completion function for PaperDocumentViewController()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Capsule<PaperDocument>?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRAsset?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PaperDocumentViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PaperDocumentViewController.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocumentView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocumentThumbnailView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of PaperDocumentViewController.isThumbnailViewCollapsed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of PaperDocumentViewController.isThumbnailViewCollapsed.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of PaperDocumentViewController.isThumbnailViewCollapsed.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of PaperDocumentViewController.editingMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.editingMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.editingMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.pageOverlayViewProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.pageOverlayViewProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.pageOverlayViewProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPicker.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPicker.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPicker.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.removeToolPicker()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocument.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocument.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocument.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.shouldShowFormFillingUIAutomatically.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.shouldShowFormFillingUIAutomatically.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.shouldShowFormFillingUIAutomatically.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.__allocating_init(context:paperDocument:editingMode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1056))();
}

uint64_t dispatch thunk of PaperDocumentViewController.revertAllChanges()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.merge<A>(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.merge<A>(_:forward:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.publisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.livePublisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x500))();
}

uint64_t dispatch thunk of PaperDocumentViewController.liveStreamMessenger.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x508))();
}

uint64_t dispatch thunk of PaperDocumentViewController.liveStreamMessenger.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x510))();
}

uint64_t dispatch thunk of PaperDocumentViewController.liveStreamMessenger.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x518))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x520))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x528))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x530))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDidChange()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x538))();
}

uint64_t dispatch thunk of PaperDocumentViewController.showParticipantCursors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x540))();
}

uint64_t dispatch thunk of PaperDocumentViewController.showParticipantCursors.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x548))();
}

uint64_t dispatch thunk of PaperDocumentViewController.showParticipantCursors.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x550))();
}

uint64_t dispatch thunk of PaperDocumentViewController.textualContextProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x558))();
}

uint64_t dispatch thunk of PaperDocumentViewController.textualContextProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x560))();
}

uint64_t dispatch thunk of PaperDocumentViewController.textualContextProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x568))();
}

uint64_t dispatch thunk of PaperDocumentViewController.viewControllerForPresentingUI.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x570))();
}

uint64_t dispatch thunk of PaperDocumentViewController.viewControllerForPresentingUI.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x578))();
}

uint64_t dispatch thunk of PaperDocumentViewController.viewControllerForPresentingUI.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x580))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPickerSelectedToolDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPickerSelectedToolItemDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPickerIsRulerActiveDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.magicGenerativePlaygroundTokenProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x688))();
}

uint64_t dispatch thunk of PaperDocumentViewController.magicGenerativePlaygroundTokenProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x690))();
}

uint64_t dispatch thunk of PaperDocumentViewController.magicGenerativePlaygroundTokenProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x698))();
}

uint64_t dispatch thunk of PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6A0))();
}

void type metadata accessor for Capsule<PaperDocument>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Capsule<PaperDocument>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<PaperDocument>?);
  }
}

void type metadata accessor for CRAsset?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for PaperDocumentViewController_ScrollViewObserver()
{
  return objc_opt_self();
}

uint64_t sub_1DDBEF4AC()
{
  id *v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset()
{
  void **v0;

  closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedPaperPage and conformance TaggedPaperPage;
  if (!lazy protocol witness table cache variable for type TaggedPaperPage and conformance TaggedPaperPage)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedPaperPage, &type metadata for TaggedPaperPage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedPaperPage and conformance TaggedPaperPage);
  }
  return result;
}

uint64_t partial apply for closure #1 in PaperDocumentView.rotatePage(_:left:)()
{
  return closure #1 in PaperDocumentView.rotatePage(_:left:)();
}

uint64_t sub_1DDBEF58C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDBEF5B0()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(BOOL))(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags;
  if (!lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MobileQuickLookFeatureFlags, &type metadata for MobileQuickLookFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags;
  if (!lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MobileQuickLookFeatureFlags, &type metadata for MobileQuickLookFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags);
  }
  return result;
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperDocumentViewController.setupDocumentView(context:)(a1, v1);
}

uint64_t partial apply for closure #2 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PaperDocumentViewController.setupDocumentView(context:)(a1, v1);
}

uint64_t sub_1DDBEF650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:)(char a1)
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:)(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type AutofillFeatureFlags and conformance AutofillFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags;
  if (!lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for AutofillFeatureFlags, &type metadata for AutofillFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags;
  if (!lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for AutofillFeatureFlags, &type metadata for AutofillFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags);
  }
  return result;
}

uint64_t sub_1DDBEF750()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

void partial apply for closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PasswordManager.add(password:for:)()
{
  uint64_t *v0;

  return closure #1 in PasswordManager.add(password:for:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperDocumentViewController.open(pdfDocument:asset:context:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1DDBEF848()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)()
{
  uint64_t v0;

  closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(*(_QWORD *)(v0 + 16), *(UIView **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1DDBEF888()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for DataOrURL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + v2, v4);
  }
  else
  {
    outlined consume of Data._Representation(*(_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v2 + 8));
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for DataOrURL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(a1, v6, v7, v8, v9, v10);
}

void partial apply for closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset()
{
  uint64_t v0;

  closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(v0);
}

void partial apply for closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(char a1)
{
  uint64_t v1;

  closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(a1, v1);
}

void partial apply for closure #1 in PaperDocumentViewController.updatePlusButton()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentViewController.updatePlusButton()(a1, v1);
}

void partial apply for closure #2 in PaperDocumentViewController.updatePlusButton()(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PaperDocumentViewController.updatePlusButton()(a1, v1);
}

void partial apply for closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton()(void *a1)
{
  uint64_t v1;

  closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ToolPickerControllerDelegate.addNewSignatureItem(_:)()
{
  return closure #1 in ToolPickerControllerDelegate.addNewSignatureItem(_:)();
}

uint64_t sub_1DDBEFA44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, &lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement, (uint64_t)&protocol witness table for GraphElement);
}

uint64_t objectdestroy_66Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.open(pdfDocument:asset:context:)(uint64_t a1)
{
  return partial apply for closure #1 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(a1);
}

ValueMetadata *type metadata accessor for MiniDivider()
{
  return &type metadata for MiniDivider;
}

uint64_t associated type witness table accessor for View.Body : View in MiniDivider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniDivider.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD v42[3];

  v2 = type metadata accessor for Divider();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Divider.init()();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v10, v6, v2);
  v19 = &v10[*(int *)(v7 + 36)];
  v20 = v42[1];
  *(_OWORD *)v19 = v42[0];
  *((_OWORD *)v19 + 1) = v20;
  *((_OWORD *)v19 + 2) = v42[2];
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  LOBYTE(v7) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>);
  v29 = &v14[*(int *)(v11 + 36)];
  *v29 = v7;
  *((_QWORD *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>);
  LOBYTE(v11) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>);
  v38 = &v18[*(int *)(v15 + 36)];
  *v38 = v11;
  *((_QWORD *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>);
  v39 = static VerticalAlignment.firstTextBaseline.getter();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, a1, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
  v40 = (uint64_t *)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier>)
                           + 36));
  *v40 = v39;
  v40[1] = (uint64_t)closure #1 in MiniDivider.body.getter;
  v40[2] = 0;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
}

double closure #1 in MiniDivider.body.getter()
{
  uint64_t v0;

  v0 = static VerticalAlignment.center.getter();
  return MEMORY[0x1DF0E1CA4](v0) + 4.0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CD9758]);
    v2[1] = lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<Divider, _FrameLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CD9758]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Divider, _FrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Divider and conformance Divider, MEMORY[0x1E0CD8D70]);
}

unint64_t lazy protocol witness table accessor for type Divider and conformance Divider()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Divider and conformance Divider;
  if (!lazy protocol witness table cache variable for type Divider and conformance Divider)
  {
    v1 = type metadata accessor for Divider();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDFE30], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Divider and conformance Divider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier;
  if (!lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDC878], MEMORY[0x1E0CDC890]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier);
  }
  return result;
}

uint64_t type metadata completion function for CanvasViewToolPickerObserver()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall CanvasViewToolPickerObserver.updateUI(toolPicker:)(PKToolPicker toolPicker)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v17[5];

  v3 = type metadata accessor for PKInk();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasViewToolPickerObserver.canvasView, v6);
  if (v9)
  {
    v10 = (char *)v9;
    if ((-[objc_class _isHandwritingToolSelected](toolPicker.super.isa, sel__isHandwritingToolSelected) & 1) == 0)
    {
      v11 = v10;
      v12 = -[objc_class selectedToolItem](toolPicker.super.isa, sel_selectedToolItem);
      PKToolPickerItem.ink.getter((uint64_t)v8);

      PKInk.tool.getter(v17);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
      Canvas.tool.setter(v17);

    }
    v13 = *(void **)&v10[direct field offset for CanvasView.canvasTiledView];
    if (v13)
    {
      v14 = v13;
      if (-[objc_class isVisible](toolPicker.super.isa, sel_isVisible))
        v15 = -[objc_class isRulerActive](toolPicker.super.isa, sel_isRulerActive);
      else
        v15 = 0;
      objc_msgSend(v14, sel_setRulerEnabled_, v15);

    }
    else
    {
      __break(1u);
    }
  }
}

void @objc CanvasViewToolPickerObserver.toolPickerVisibilityDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasViewToolPickerObserver.toolPickerVisibilityDidChange(_:)((PKToolPicker)v4);

}

uint64_t @objc CanvasViewToolPickerObserver._supportsCanvasElements(_:)()
{
  return 1;
}

void @objc CanvasViewToolPickerObserver._toolPickerDidInvokeDoneAction(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized CanvasViewToolPickerObserver._toolPickerDidInvokeDoneAction(_:)();

}

void @objc CanvasViewToolPickerObserver.init()()
{
  specialized CanvasViewToolPickerObserver.init()();
}

uint64_t @objc CanvasViewToolPickerObserver.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasViewToolPickerObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasViewToolPickerObserver);
}

id specialized CanvasViewToolPickerObserver.init(canvasView:)()
{
  void *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

id specialized CanvasViewToolPickerObserver.__allocating_init(canvasView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return specialized CanvasViewToolPickerObserver.init(canvasView:)();
}

void specialized CanvasViewToolPickerObserver._toolPickerDidInvokeDoneAction(_:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for CanvasViewToolPickerObserver.canvasView);
  if (v1)
  {
    v2 = (id)v1;
    AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);

  }
}

void specialized CanvasViewToolPickerObserver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PaperDocumentPage.flags.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.getter();
}

uint64_t type metadata accessor for PaperDocumentPage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PaperDocumentPage;
  if (!type metadata singleton initialization cache for PaperDocumentPage)
    return swift_getSingletonMetadata();
  return result;
}

double PaperDocumentPage.bounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t PaperDocumentPage.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t PaperDocumentPage.$bounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double PaperDocumentPage.frame.getter()
{
  double v1;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t PaperDocumentPage.$frame.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t PaperDocumentPage.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t PaperDocumentPage.contentsBounds.getter()
{
  return PaperDocumentPage.contentsBounds.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t PaperDocumentPage.$contentsBounds.getter()
{
  return PaperDocumentPage.contentsBounds.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t PaperDocumentPage.contentsBounds.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for PaperDocumentPage();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a1(v2);
}

uint64_t PaperDocumentPage.$contentsBounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t PaperDocumentPage.bounds.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.bounds.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

void (*PaperDocumentPage.$bounds.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double key path getter for PaperDocumentPage.frame : PaperDocumentPage@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for PaperDocumentPage.frame : PaperDocumentPage()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.frame.setter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for PaperDocumentPage.$frame : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*PaperDocumentPage.$frame.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path setter for PaperDocumentPage.contentsBounds : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t PaperDocumentPage.contentsBounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t (*PaperDocumentPage.contentsBounds.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for PaperDocumentPage.$contentsBounds : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*PaperDocumentPage.$contentsBounds.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double PaperDocumentPage.rotation.getter()
{
  double v1;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for PaperDocumentPage.rotation : PaperDocumentPage@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for PaperDocumentPage.rotation : PaperDocumentPage()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.rotation.setter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$rotation.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PaperDocumentPage.$rotation : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PaperDocumentPage.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.pdfPageID.getter()
{
  return PaperDocumentPage.pdfPageID.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path setter for PaperDocumentPage.pdfPageID : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for PDFPageID?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for PDFPageID?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PDFPageID?);
}

uint64_t PaperDocumentPage.pdfPageID.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PDFPageID?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for PDFPageID?);
}

uint64_t (*PaperDocumentPage.pdfPageID.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$pdfPageID.getter()
{
  return PaperDocumentPage.pdfPageID.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t PaperDocumentPage.pdfPageID.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for PaperDocumentPage();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  return a1(v2);
}

uint64_t key path setter for PaperDocumentPage.$pdfPageID : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PaperDocumentPage.$pdfPageID.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$pdfPageID.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.drawing.getter()
{
  return PaperDocumentPage.drawing.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path setter for PaperDocumentPage.drawing : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t PaperDocumentPage.drawing.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*PaperDocumentPage.drawing.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$drawing.getter()
{
  return PaperDocumentPage.drawing.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t PaperDocumentPage.drawing.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for PaperDocumentPage();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a1(v2);
}

uint64_t key path setter for PaperDocumentPage.$drawing : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PaperDocumentPage.$drawing.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$drawing.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for PaperDocumentPage.flags : PaperDocumentPage@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PaperDocumentPage.flags : PaperDocumentPage()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.flags.setter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.flags.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$flags.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PaperDocumentPage.$flags : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PaperDocumentPage.$flags.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$flags.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.subelements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PaperDocumentPage.subelements.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

double (*PaperDocumentPage.subelements.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PaperDocumentPage();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperDocumentPage.initialAnnotationIDs.getter()
{
  uint64_t v1;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for PaperDocumentPage.initialAnnotationIDs : PaperDocumentPage@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PaperDocumentPage.initialAnnotationIDs : PaperDocumentPage()
{
  type metadata accessor for PaperDocumentPage();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.initialAnnotationIDs.setter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.initialAnnotationIDs.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$initialAnnotationIDs.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PaperDocumentPage.$initialAnnotationIDs : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PaperDocumentPage.$initialAnnotationIDs.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$initialAnnotationIDs.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 48);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.additionalFields.getter()
{
  type metadata accessor for PaperDocumentPage();
  return swift_bridgeObjectRetain();
}

uint64_t PaperDocumentPage.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PaperDocumentPage() + 52);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*PaperDocumentPage.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PaperDocumentPage();
  return UnknownCanvasElementView.flags.modify;
}

__n128 static PaperDocumentPage.fields.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  _BYTE v29[24];

  if (one-time initialization token for fields != -1)
    swift_once();
  *(_OWORD *)&v27[16] = xmmword_1F040D7C8;
  v28 = *(_OWORD *)&qword_1F040D7D8;
  *(_OWORD *)v29 = *(_OWORD *)&qword_1F040D7E8;
  *(_QWORD *)&v29[16] = qword_1F040D7F8;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1F040D788;
  *(_OWORD *)&v25[16] = *(_OWORD *)&qword_1F040D798;
  v26 = xmmword_1F040D7A8;
  *(_OWORD *)v27 = *(_OWORD *)&qword_1F040D7B8;
  v22 = xmmword_1F040D748;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1F040D758;
  *(_OWORD *)&v23[16] = xmmword_1F040D768;
  v24 = *(_OWORD *)&qword_1F040D778;
  *(_OWORD *)v21 = static PaperDocumentPage.fields;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_1F040D738;
  v2 = static PaperDocumentPage.fields;
  v3 = unk_1F040D740;
  v4 = qword_1F040D758;
  v5 = *((_QWORD *)&xmmword_1F040D768 + 1);
  v6 = qword_1F040D788;
  v7 = unk_1F040D7A0;
  v8 = qword_1F040D7B8;
  v9 = *((_QWORD *)&xmmword_1F040D7C8 + 1);
  v10 = qword_1F040D7E8;
  v12 = *(_OWORD *)&v21[8];
  v13 = xmmword_1F040D748;
  v14 = *(_OWORD *)&v23[8];
  v15 = *(_OWORD *)&qword_1F040D778;
  v16 = *(_OWORD *)&v25[8];
  v17 = xmmword_1F040D7A8;
  v18 = *(_OWORD *)&v27[8];
  v19 = *(_OWORD *)&qword_1F040D7D8;
  v20 = *(__n128 *)&v29[8];
  outlined retain of ((String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGFloat>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<PDFPageID?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<PaperDocumentPage, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<[CRKeyPath]>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CanvasElementFlags>>))((uint64_t)v21);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 192) = v10;
  result = v20;
  *(__n128 *)(a1 + 200) = v20;
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGFloat>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<PDFPageID?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<PaperDocumentPage, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<[CRKeyPath]>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CanvasElementFlags>>))(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t PaperDocumentPage.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(uint64_t, char *, uint64_t);
  int *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(char *, unint64_t, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;

  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  v115 = v5;
  v116 = v6;
  MEMORY[0x1E0C80A78](v5, v7);
  v114 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v111 = (char *)&v87 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v110 = (char *)&v87 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v112 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v113 = (char *)&v87 - v21;
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v105 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v22);
  v104 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v109 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103, v24);
  v102 = (char *)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v106 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101, v26);
  v100 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v29 = *(_QWORD *)(v28 - 8);
  v98 = v28;
  v99 = v29;
  MEMORY[0x1E0C80A78](v28, v30);
  v97 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v96 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95, v32);
  v94 = (char *)&v87 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v93 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v34);
  v91 = (char *)&v87 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v90 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v36);
  v88 = (char *)&v87 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v40);
  v42 = (char *)&v87 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
  v107 = a1;
  CRRegister.copy(renamingReferences:)();
  v43 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 40);
  v43(a2, v42, v38);
  v44 = (int *)type metadata accessor for PaperDocumentPage();
  CRRegister.copy(renamingReferences:)();
  v43(a2 + v44[5], v42, v38);
  v45 = v88;
  v46 = v89;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 40))(a2 + v44[6], v45, v46);
  v47 = v91;
  v48 = v92;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 40))(a2 + v44[7], v47, v48);
  v49 = v94;
  v50 = v95;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 40))(a2 + v44[8], v49, v50);
  v52 = v97;
  v51 = v98;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v99 + 40))(a2 + v44[9], v52, v51);
  v54 = v100;
  v53 = v101;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v106 + 40))(a2 + v44[10], v54, v53);
  v55 = v102;
  v56 = v103;
  CROrderedSet.copy(renamingReferences:)();
  v57 = v44[11];
  v106 = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v109 + 40))(a2 + v57, v55, v56);
  v103 = (uint64_t)v44;
  v58 = v116;
  CRRegister.wrappedValue.getter();
  v59 = v117;
  v60 = *((_QWORD *)v117 + 2);
  v61 = (char *)MEMORY[0x1E0DEE9D8];
  if (v60)
  {
    v117 = (char *)MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60, 0);
    v62 = *(unsigned __int8 *)(v58 + 80);
    v102 = v59;
    v63 = &v59[(v62 + 32) & ~v62];
    v109 = *(_QWORD *)(v58 + 72);
    v64 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
    do
    {
      v65 = v16;
      v66 = v15;
      v67 = v110;
      v68 = v115;
      v64(v110, v63, v115);
      v64(v111, v67, v68);
      type metadata accessor for PDFAnnotationElement();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v116 + 8))(v67, v68);
      v69 = v117;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v69 + 2) + 1, 1);
        v69 = v117;
      }
      v71 = *((_QWORD *)v69 + 2);
      v70 = *((_QWORD *)v69 + 3);
      v72 = v113;
      v15 = v66;
      if (v71 >= v70 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
        v72 = v113;
        v69 = v117;
      }
      *((_QWORD *)v69 + 2) = v71 + 1;
      v16 = v65;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v69[((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(_QWORD *)(v65 + 72) * v71], v72, v15);
      v63 += v109;
      --v60;
    }
    while (v60);
    swift_bridgeObjectRelease();
    v61 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>, MEMORY[0x1E0D12B68]);
  v73 = Array<A>.copy(renamingReferences:)();
  swift_bridgeObjectRelease();
  v74 = *(_QWORD *)(v73 + 16);
  if (v74)
  {
    v117 = v61;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74, 0);
    v75 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v113 = (char *)v73;
    v76 = v73 + v75;
    v77 = *(_QWORD *)(v16 + 72);
    v78 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v79 = v117;
    do
    {
      v80 = v112;
      v78(v112, v76, v15);
      WeakRef.id.getter();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v80, v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v79 + 2) + 1, 1);
        v79 = v117;
      }
      v81 = v116;
      v83 = *((_QWORD *)v79 + 2);
      v82 = *((_QWORD *)v79 + 3);
      v84 = v114;
      if (v83 >= v82 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, v83 + 1, 1);
        v84 = v114;
        v81 = v116;
        v79 = v117;
      }
      *((_QWORD *)v79 + 2) = v83 + 1;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(&v79[((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80))+ *(_QWORD *)(v81 + 72) * v83], v84, v115);
      v117 = v79;
      v76 += v77;
      --v74;
    }
    while (v74);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v79 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v117 = v79;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  v85 = v104;
  CRRegister.init(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v105 + 40))(v106 + *(int *)(v103 + 48), v85, v108);
}

uint64_t PaperDocumentPage.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v31, v2);
  v30 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v28 - v6;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v29, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v32 = 0u;
  v33 = 0u;
  CRRegister.init(wrappedValue:)();
  v23 = type metadata accessor for PaperDocumentPage();
  v32 = 0u;
  v33 = 0u;
  CRRegister.init(wrappedValue:)();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v22, 1, 1, v24);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(_QWORD *)&v32 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v25 = type metadata accessor for PDFPageID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 1, 1, v25);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PDFPageID?);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v7, 1, 1, v26);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v7, v30, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v32 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  *(_QWORD *)&v32 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v23 + 52)) = MEMORY[0x1E0DEE9E0];
  return result;
}

void PaperDocumentPage.init(contentsBounds:fullBounds:)(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D5>, CGFloat a7@<D7>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __C::CGRect v45;
  __C::CGRect v46;

  v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v42, v14);
  v41 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v39 - v18;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v40, v20);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v39 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v39 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v39 - v33;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v43 = 0u;
  v44 = 0u;
  CRRegister.init(wrappedValue:)();
  v35 = type metadata accessor for PaperDocumentPage();
  v43 = 0u;
  v44 = 0u;
  CRRegister.init(wrappedValue:)();
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v34, 1, 1, v36);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v34, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(_QWORD *)&v43 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v37 = type metadata accessor for PDFPageID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v26, 1, 1, v37);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v26, (uint64_t)v22, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for PDFPageID?);
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v19, 1, 1, v38);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v19, v41, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v43 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  *(_QWORD *)&v43 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v35 + 52)) = MEMORY[0x1E0DEE9E0];
  v45.origin.x = a2;
  v45.origin.y = a3;
  v45.size.width = a4;
  v45.size.height = a5;
  v46.origin.y = a6;
  v46.size.height = a7;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v45, v46);
}

Swift::Void __swiftcall PaperDocumentPage.setContentsBounds(_:fullBounds:)(__C::CGRect _, __C::CGRect fullBounds)
{
  double height;
  double y;
  CGFloat v4;
  CGFloat width;
  CGFloat v6;
  CGFloat x;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  CGFloat MinX;
  double v29;
  CGFloat v30;
  CGFloat v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  height = fullBounds.size.height;
  y = fullBounds.origin.y;
  v4 = _.size.height;
  width = _.size.width;
  v6 = _.origin.y;
  x = _.origin.x;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v35 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v34 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v34 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v34 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37.origin.x = x;
  v37.origin.y = v6;
  v37.size.width = width;
  v37.size.height = v4;
  MinX = CGRectGetMinX(v37);
  v38.origin.x = x;
  v38.origin.y = v6;
  v38.size.width = width;
  v38.size.height = v4;
  v29 = y + y + height - CGRectGetMaxY(v38);
  v39.origin.x = x;
  v39.origin.y = v6;
  v39.size.width = width;
  v39.size.height = v4;
  v30 = CGRectGetWidth(v39);
  v40.origin.x = x;
  v40.origin.y = v6;
  v40.size.width = width;
  v40.size.height = v4;
  v31 = CGRectGetHeight(v40);
  v36.origin.x = MinX;
  v36.origin.y = v29;
  v36.size.width = v30;
  v36.size.height = v31;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  lazy protocol witness table accessor for type Quad and conformance Quad();
  TaggedValue_2.init(_:)();
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v27, 0, 1, v32);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)((uint64_t)v27);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v23, v15);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v41.origin.x = MinX;
  v41.origin.y = v29;
  v41.size.width = v30;
  v41.size.height = v31;
  if (!CGRectEqualToRect(v36, v41))
  {
    v36.origin.x = MinX;
    v36.origin.y = v29;
    v36.size.width = v30;
    v36.size.height = v31;
    CRRegister.value.setter();
  }
  v33 = v35;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v34, v14, v8);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v8);
}

uint64_t static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __C::CGRect v93;
  __C::CGRect v94;

  v81 = a3;
  v82 = a4;
  v89 = a1;
  v90 = a2;
  v88 = a5;
  v83 = type metadata accessor for CRKeyPath();
  v85 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v5);
  v78 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v7, v8);
  v86 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v10, v11);
  v79 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  v87 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v13);
  v80 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v76, v15);
  v75 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v70 - v19;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v72, v21);
  v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v70 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v70 - v34;
  v36 = (int *)type metadata accessor for PaperDocumentPage();
  MEMORY[0x1E0C80A78](v36, v37);
  v77 = (uint64_t)&v70 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v70 - v41;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v91 = 0u;
  v92 = 0u;
  CRRegister.init(wrappedValue:)();
  v91 = 0u;
  v92 = 0u;
  CRRegister.init(wrappedValue:)();
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v35, 1, 1, v43);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v35, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(_QWORD *)&v91 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v74 = &v42[v36[8]];
  v44 = type metadata accessor for PDFPageID();
  v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56);
  v71 = v44;
  v73(v27, 1, 1, v44);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, (uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v20, 1, 1, v45);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v20, v75, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v91 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  v46 = &v42[v36[12]];
  *(_QWORD *)&v91 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  v76 = (uint64_t)v46;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v42[v36[13]] = MEMORY[0x1E0DEE9E0];
  v47 = v89;
  objc_msgSend(v89, sel_boundsForBox_, 1);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  v55 = v54;
  objc_msgSend(v47, sel_boundsForBox_, 0);
  v94.origin.y = v56;
  v94.size.height = v57;
  v93.origin.x = v49;
  v93.origin.y = v51;
  v93.size.width = v53;
  v93.size.height = v55;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v93, v94);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(v47, sel_rotation));
  outlined init with copy of PKStrokeProperties(v90, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  v58 = v44;
  v59 = v73;
  v73(v27, 0, 1, v58);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, (uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
  ContainerCanvasElement.importElements<A>(_:in:)(v82, v81, (uint64_t)v36, (uint64_t)&protocol witness table for PaperDocumentPage);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v60 = v83;
  *(_QWORD *)&v91 = CROrderedSet.map<A>(_:)();
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.setter();
  outlined init with copy of PKStrokeProperties((uint64_t)v42, v77, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v79, 1, 1, v60);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  swift_retain();
  v61 = v80;
  v62 = v84;
  Ref.init<A>(_:_:identity:)();
  v63 = v86;
  outlined init with copy of PKStrokeProperties(v90, v86, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  v59((char *)v63, 0, 1, v71);
  v64 = type metadata accessor for PageId(0);
  v65 = v63 + *(int *)(v64 + 20);
  LOBYTE(v91) = 2;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:id:)();
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 0, 1, v64);
  v67 = v89;
  v68 = &v89[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?(v63, (uint64_t)v68, &demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  CRRegister.wrappedValue.getter();
  if (*(_QWORD *)&v67[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)&v67[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v91;
    outlined consume of PaperKitPDFPage.AnnotationIDState(0);
  }
  LOBYTE(v91) = 2;
  Ref.id.getter();
  SharedTagged_3.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v61, v62);
  return outlined destroy of PKStrokeProperties((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
}

uint64_t ContainerCanvasElement.importElements<A>(_:in:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v8 = result;
    v9 = *(_QWORD *)(type metadata accessor for AnnotationImporter.ImportedElement() - 8);
    v10 = v8 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      ContainerCanvasElement.addImportedElement<A>(_:in:)(v10, a2, a3, a4);
      v10 += v11;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PaperDocumentPage.minAppFormatVersion.getter()
{
  return 4;
}

void PaperDocumentPage.update<A>(pdfPage:id:use:in:options:)(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, char *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  id v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[9];
  __int16 v68;
  char v69;
  unint64_t v70;

  v8 = v7;
  v63 = a7;
  v64 = a4;
  v66 = a6;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v55 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v13);
  v54 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v52, v15);
  v50 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v17);
  v48 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x1E0C80A78](v19, v20);
  v53 = (uint64_t)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a3;
  v24 = *a5;
  v23 = a5[1];
  v61 = a5[2];
  v62 = v23;
  v25 = a5[3];
  v26 = a5[4];
  v59 = a5[5];
  v60 = v25;
  v27 = a5[6];
  v57 = a5[7];
  v58 = v27;
  v56 = a5[8];
  v28 = *((unsigned __int8 *)a5 + 74);
  v29 = *((unsigned __int16 *)a5 + 36);
  type metadata accessor for PaperKitPDFPage(0);
  v30 = swift_dynamicCastClass();
  if (v30)
  {
    v31 = (char *)v30;
    v47 = a2;
    v32 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((v67[0] & 0x20) != 0)
    {

    }
    else
    {
      v46 = v32;
      v33 = v29 | (v28 << 16);
      specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v31, 0);
      v34 = v8;
      CRRegister.wrappedValue.getter();
      if (*(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v67[0];
        outlined consume of PaperKitPDFPage.AnnotationIDState(0);
      }
      v35 = v66;
      v36 = v22;
      v70 = v22;
      v67[0] = v24;
      v67[1] = v62;
      v67[2] = v61;
      v67[3] = v60;
      v67[4] = v26;
      v67[5] = v59;
      v67[6] = v58;
      v67[7] = v57;
      v67[8] = v56;
      v69 = BYTE2(v33);
      v68 = v33;
      v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
      v38 = v63;
      v39 = v64;
      PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(v31, &v70, v64, (uint64_t)v67, v19, v35, v37, (uint64_t)&protocol witness table for PaperDocumentPage, (uint64_t)&protocol witness table for PaperDocumentPage, v63);
      if (v36 >> 62)
      {

      }
      else
      {
        v40 = v53;
        outlined init with copy of PKStrokeProperties(v34, v53, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
        v41 = type metadata accessor for PDFPageID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v50, 1, 1, v41);
        lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
        v62 = v37;
        v42 = (id)v36;
        v43 = v48;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 40))(v40 + *(int *)(v19 + 32), v43, v51);
        v67[0] = MEMORY[0x1E0DEE9D8];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
        lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
        v44 = v54;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v55 + 40))(v40 + *(int *)(v19 + 48), v44, v65);
        PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)((uint64_t)v42, v40, v47, v39, v19, v66, v62, (uint64_t)&protocol witness table for PaperDocumentPage, (uint64_t)&protocol witness table for PaperDocumentPage, (uint64_t)v38);
        outlined consume of PaperDocument.PDFDocumentUse(v36);

        outlined destroy of PKStrokeProperties(v40, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
      }
    }
  }
}

id specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(_QWORD);
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  char v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  char v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double MinX;
  double v68;
  double Width;
  double Height;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  double v74;
  uint64_t v75;
  id result;
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  double v80;
  double v81;
  double v82;
  double v83;
  char v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v77 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v77 - v16;
  v18 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v3, (uint64_t)v21, v22);
  if ((a2 & 1) != 0)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v30 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v32 = *(_QWORD *)(v31 - 8);
    v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
    v33 = v79(v17, 1, v31);
    v78 = v32;
    if (v33 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      v34 = 0.0;
      v35 = 256.0;
      v36 = 0.0;
      v37 = 256.0;
    }
    else
    {
      v77 = v13;
      v38 = v32;
      TaggedValue_2.tagged1.getter();
      v39 = v80;
      v40 = v81;
      v41 = v82;
      v42 = v83;
      v43 = v84;
      v13 = v77;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v31);
      v36 = 0.0;
      v37 = 256.0;
      if ((v43 & 1) != 0)
        v34 = 0.0;
      else
        v34 = v39;
      if ((v43 & 1) != 0)
      {
        v35 = 256.0;
      }
      else
      {
        v36 = v40;
        v35 = v41;
      }
      if ((v43 & 1) == 0)
        v37 = v42;
    }
    v44 = CGRect.almostEqual(_:threshold:)(v34, v36, v35, v37, 1.0, v24, v26, v28, v30);
    outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
    if (!v44)
    {
      CRRegister.wrappedValue.getter();
      if (v79(v13, 1, v31) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        v45 = 0.0;
        v46 = 256.0;
        v47 = 0.0;
        v48 = 256.0;
      }
      else
      {
        TaggedValue_2.tagged1.getter();
        v49 = v80;
        v50 = v81;
        v51 = v82;
        v52 = v83;
        v53 = v84;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v31);
        v47 = 0.0;
        v48 = 256.0;
        if ((v53 & 1) != 0)
          v45 = 0.0;
        else
          v45 = v49;
        if ((v53 & 1) != 0)
        {
          v46 = 256.0;
        }
        else
        {
          v47 = v50;
          v46 = v51;
        }
        if ((v53 & 1) == 0)
          v48 = v52;
      }
      objc_msgSend(a1, sel_setBounds_forBox_, 0, v45, v47, v46, v48);
    }
  }
  else
  {
    outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v9, 1, v54) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v56 = 0.0;
    v57 = 256.0;
    v58 = 0.0;
    v59 = 256.0;
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    v60 = v80;
    v61 = v81;
    v57 = v82;
    v59 = v83;
    v62 = v84;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v9, v54);
    if ((v62 & 1) != 0)
      v56 = 0.0;
    else
      v56 = v60;
    if ((v62 & 1) != 0)
      v58 = 0.0;
    else
      v58 = v61;
    if ((v62 & 1) != 0)
    {
      v57 = 256.0;
      v59 = 256.0;
    }
  }
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v64 = v63;
  v66 = v65;
  v85.origin.x = v56;
  v85.origin.y = v58;
  v85.size.width = v57;
  v85.size.height = v59;
  MinX = CGRectGetMinX(v85);
  v86.origin.x = v56;
  v86.origin.y = v58;
  v86.size.width = v57;
  v86.size.height = v59;
  v68 = v66 + v64 + v64 - CGRectGetMaxY(v86);
  v87.origin.x = v56;
  v87.origin.y = v58;
  v87.size.width = v57;
  v87.size.height = v59;
  Width = CGRectGetWidth(v87);
  v88.origin.x = v56;
  v88.origin.y = v58;
  v88.size.width = v57;
  v88.size.height = v59;
  Height = CGRectGetHeight(v88);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v68, Width, Height, 1.0, v71, v72, v73, v74))
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v68, Width, Height);
  v75 = specialized PaperPage.axisAlignedRotationInDegrees.getter();
  result = objc_msgSend(a1, sel_rotation);
  if (result != (id)v75)
    return objc_msgSend(a1, sel_setRotation_, v75);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  double v18;
  BOOL v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double MinX;
  double v29;
  double Width;
  double Height;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double v35;
  uint64_t v36;
  id result;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;

  v3 = v2;
  v6 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v3, (uint64_t)v9, v10);
  if ((a2 & 1) != 0)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v19 = CGRect.almostEqual(_:threshold:)(v38, v39, v40, v41, 1.0, v12, v14, v16, v18);
    outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
    if (!v19)
    {
      CRRegister.wrappedValue.getter();
      objc_msgSend(a1, sel_setBounds_forBox_, 0, v38, v39, v40, v41);
    }
  }
  else
  {
    outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v20 = v38;
  v21 = v39;
  v22 = v40;
  v23 = v41;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v25 = v24;
  v27 = v26;
  v42.origin.x = v20;
  v42.origin.y = v21;
  v42.size.width = v22;
  v42.size.height = v23;
  MinX = CGRectGetMinX(v42);
  v43.origin.x = v20;
  v43.origin.y = v21;
  v43.size.width = v22;
  v43.size.height = v23;
  v29 = v27 + v25 + v25 - CGRectGetMaxY(v43);
  v44.origin.x = v20;
  v44.origin.y = v21;
  v44.size.width = v22;
  v44.size.height = v23;
  Width = CGRectGetWidth(v44);
  v45.origin.x = v20;
  v45.origin.y = v21;
  v45.size.width = v22;
  v45.size.height = v23;
  Height = CGRectGetHeight(v45);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v29, Width, Height, 1.0, v32, v33, v34, v35))
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v29, Width, Height);
  v36 = specialized PaperPage.axisAlignedRotationInDegrees.getter((void (*)(_QWORD))type metadata accessor for Paper);
  result = objc_msgSend(a1, sel_rotation);
  if (result != (id)v36)
    return objc_msgSend(a1, sel_setRotation_, v36);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  double v18;
  BOOL v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double MinX;
  double v29;
  double Width;
  double Height;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double v35;
  id result;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v3 = v2;
  v6 = type metadata accessor for UnknownPage();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v3, (uint64_t)v9, v10);
  if ((a2 & 1) != 0)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v19 = CGRect.almostEqual(_:threshold:)(v37, v38, v39, v40, 1.0, v12, v14, v16, v18);
    outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for UnknownPage);
    if (!v19)
    {
      CRRegister.wrappedValue.getter();
      objc_msgSend(a1, sel_setBounds_forBox_, 0, v37, v38, v39, v40);
    }
  }
  else
  {
    outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for UnknownPage);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v20 = v37;
  v21 = v38;
  v22 = v39;
  v23 = v40;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v25 = v24;
  v27 = v26;
  v41.origin.x = v20;
  v41.origin.y = v21;
  v41.size.width = v22;
  v41.size.height = v23;
  MinX = CGRectGetMinX(v41);
  v42.origin.x = v20;
  v42.origin.y = v21;
  v42.size.width = v22;
  v42.size.height = v23;
  v29 = v27 + v25 + v25 - CGRectGetMaxY(v42);
  v43.origin.x = v20;
  v43.origin.y = v21;
  v43.size.width = v22;
  v43.size.height = v23;
  Width = CGRectGetWidth(v43);
  v44.origin.x = v20;
  v44.origin.y = v21;
  v44.size.width = v22;
  v44.size.height = v23;
  Height = CGRectGetHeight(v44);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v29, Width, Height, 1.0, v32, v33, v34, v35))
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v29, Width, Height);
  result = objc_msgSend(a1, sel_rotation);
  if (result)
    return objc_msgSend(a1, sel_setRotation_, 0);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  BOOL v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double MinX;
  double v37;
  double Width;
  double Height;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  double v43;
  uint64_t v44;
  id result;
  uint64_t v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v3 = v2;
  v6 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v3, (uint64_t)v9, v10);
  if ((a2 & 1) != 0)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    Image.pdfContentsBounds.getter();
    v23 = CGRect.almostEqual(_:threshold:)(v19, v20, v21, v22, 1.0, v12, v14, v16, v18);
    outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    if (!v23)
    {
      Image.pdfContentsBounds.getter();
      objc_msgSend(a1, sel_setBounds_forBox_, 0);
    }
  }
  else
  {
    outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  }
  Image.pdfContentsBounds.getter();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v33 = v32;
  v35 = v34;
  v47.origin.x = v25;
  v47.origin.y = v27;
  v47.size.width = v29;
  v47.size.height = v31;
  MinX = CGRectGetMinX(v47);
  v48.origin.x = v25;
  v48.origin.y = v27;
  v48.size.width = v29;
  v48.size.height = v31;
  v37 = v35 + v33 + v33 - CGRectGetMaxY(v48);
  v49.origin.x = v25;
  v49.origin.y = v27;
  v49.size.width = v29;
  v49.size.height = v31;
  Width = CGRectGetWidth(v49);
  v50.origin.x = v25;
  v50.origin.y = v27;
  v50.size.width = v29;
  v50.size.height = v31;
  Height = CGRectGetHeight(v50);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v37, Width, Height, 1.0, v40, v41, v42, v43))
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v37, Width, Height);
  v44 = specialized PaperPage.axisAlignedRotationInDegrees.getter((void (*)(_QWORD))type metadata accessor for Image);
  result = objc_msgSend(a1, sel_rotation);
  if (result != (id)v44)
    return objc_msgSend(a1, sel_setRotation_, v44);
  return result;
}

uint64_t PaperDocumentPage.updateFrom<A>(pdfPage:in:)(void *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  id v6;
  char v7;

  type metadata accessor for PaperKitPDFPage(0);
  result = swift_dynamicCastClass();
  if (result)
  {
    v5 = (void *)result;
    v6 = a1;
    v7 = PaperDocumentPage.updateAnnotationsFrom<A>(_:in:)(v5, a2);

    return v7 & 1;
  }
  return result;
}

uint64_t PaperDocumentPage.updateAnnotationsFrom<A>(_:in:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, unint64_t);
  unint64_t v71;
  char *v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(char *, uint64_t, unint64_t);
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL8 v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  __int128 v126;
  char *v127;
  _BOOL8 v128;
  uint64_t result;
  _QWORD *v130;
  void (*v131)(_QWORD **, _QWORD);
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  int **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  id v141;
  PDFAnnotation *v142;
  void (*v143)(char *, char *, unint64_t);
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  id v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  int **v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  NSObject *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  __int128 v190;
  char *v191;
  NSObject *p_super;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;

  v169 = a2;
  v168 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v167 = *(_QWORD *)(v168 - 8);
  MEMORY[0x1E0C80A78](v168, v4);
  v166 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x1E0C80A78](v165, v6);
  v164 = (uint64_t)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  v162 = *(_QWORD *)(v163 - 8);
  MEMORY[0x1E0C80A78](v163, v8);
  v161 = (char *)&v156 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
  MEMORY[0x1E0C80A78](v179, v10);
  v178 = (int **)((char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12, v13);
  v177 = (uint64_t)&v156 - v14;
  v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (uint64_t)&v156 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (uint64_t)&v156 - v21;
  v23 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
  v181 = *(v23 - 1);
  MEMORY[0x1E0C80A78](v23, v24);
  v176 = (char *)&v156 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v170 = (char *)&v156 - v28;
  v29 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v29, v30);
  v175 = (char *)&v156 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v32, v33);
  v173 = (char *)&v156 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (unint64_t)&v156 - v37;
  v39 = type metadata accessor for CRKeyPath();
  v194 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v40);
  v160 = (char *)&v156 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v180 = (char *)&v156 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v193 = (uint64_t *)((char *)&v156 - v47);
  MEMORY[0x1E0C80A78](v48, v49);
  v191 = (char *)&v156 - v50;
  MEMORY[0x1E0C80A78](v51, v52);
  *(_QWORD *)&v190 = (char *)&v156 - v53;
  MEMORY[0x1E0C80A78](v54, v55);
  v182 = (uint64_t)&v156 - v56;
  MEMORY[0x1E0C80A78](v57, v58);
  v174 = (char *)&v156 - v59;
  MEMORY[0x1E0C80A78](v60, v61);
  v183 = (char *)&v156 - v62;
  v63 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v64 = v2 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v172 = v64;
  v159 = CROrderedSet.map<A>(_:)();
  v65 = objc_msgSend(a1, sel_annotations);
  type metadata accessor for PDFAnnotation();
  isUniquelyReferenced_nonNull_native = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (isUniquelyReferenced_nonNull_native >> 62)
    goto LABEL_73;
  v67 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v195 = v39;
  v188 = v23;
  v189 = v22;
  v68 = v194;
  if (!v67)
  {
    swift_bridgeObjectRelease();
    v39 = MEMORY[0x1E0DEE9D8];
    goto LABEL_47;
  }
  v186 = v38;
  v157 = v18;
  v158 = v15;
  v187 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  v39 = MEMORY[0x1E0DEE9D8];
  v18 = 4;
  v185 = isUniquelyReferenced_nonNull_native;
  v184 = v67;
  while (1)
  {
    if (v187)
      v73 = (id)MEMORY[0x1DF0E4D64](v18 - 4, isUniquelyReferenced_nonNull_native);
    else
      v73 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v18);
    v74 = v73;
    v38 = v18 - 3;
    isUniquelyReferenced_nonNull_native = (unint64_t)&demangling cache variable for type metadata for CRKeyPath?;
    if (__OFADD__(v18 - 4, 1))
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      swift_bridgeObjectRetain();
      v67 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    type metadata accessor for CanvasElementPDFAnnotation();
    v75 = swift_dynamicCastClass();
    p_super = (v18 - 3);
    if (v75)
    {
      v76 = v75 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      v77 = v76;
      v78 = v186;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v77, v186, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v79 = v39;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v68 + 48))(v78, 1, v195) != 1)
      {
        v80 = *(void (**)(char *, uint64_t, unint64_t))(v68 + 32);
        v81 = v183;
        v82 = v195;
        v80(v183, v78, v195);
        v23 = *(_QWORD **)(v68 + 16);
        ((void (*)(char *, char *, unint64_t))v23)(v174, v81, v82);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v79 + 16) + 1, 1, v79);
        v83 = v79;
        v84 = *(_QWORD *)(v79 + 16);
        v39 = v83;
        v85 = *(_QWORD *)(v83 + 24);
        if (v84 >= v85 >> 1)
          v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v84 + 1, 1, v39);
        *(_QWORD *)(v39 + 16) = v84 + 1;
        v86 = *(unsigned __int8 *)(v68 + 80);
        v87 = *(_QWORD *)(v68 + 72);
        v88 = v195;
        v80((char *)(v39 + ((v86 + 32) & ~v86) + v87 * v84), (uint64_t)v174, v195);
        v22 = v182;
        ((void (*)(uint64_t, char *, unint64_t))v23)(v182, v183, v88);
        v15 = v74;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v196 = v63;
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
        v90 = v63[2];
        v91 = (v89 & 1) == 0;
        v92 = v90 + v91;
        if (__OFADD__(v90, v91))
          goto LABEL_71;
        v22 = v89;
        if (v63[3] >= v92)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v92, isUniquelyReferenced_nonNull_native);
          v93 = specialized __RawDictionaryStorage.find<A>(_:)(v182);
          if ((v22 & 1) != (v94 & 1))
            break;
          v38 = v93;
        }
        isUniquelyReferenced_nonNull_native = v185;
        v63 = v196;
        if ((v22 & 1) != 0)
        {
          v121 = v196[7];

          *(_QWORD *)(v121 + 8 * v38) = v15;
        }
        else
        {
          v196[(v38 >> 6) + 8] |= 1 << v38;
          ((void (*)(unint64_t, uint64_t, unint64_t))v23)(v63[6] + v38 * v87, v182, v195);
          *(_QWORD *)(v63[7] + 8 * v38) = v15;
          v122 = v63[2];
          v119 = __OFADD__(v122, 1);
          v123 = v122 + 1;
          if (v119)
            goto LABEL_72;
          v63[2] = v123;
        }
        swift_bridgeObjectRelease();
        v68 = v194;
        v71 = v195;
        v70 = *(void (**)(uint64_t, unint64_t))(v194 + 8);
        v70(v182, v195);

        v72 = v183;
        goto LABEL_7;
      }
    }
    else
    {
      v78 = v186;
      (*(void (**)(unint64_t, uint64_t, uint64_t, unint64_t))(v68 + 56))(v186, 1, 1, v195);
      v79 = v39;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v78, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v95 = objc_msgSend(v74, sel_pdfAnnotationUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v96 = v190;
    CRKeyPath.init(_:)();
    v97 = v96;
    v98 = swift_dynamicCastClass();
    v23 = *(_QWORD **)(v68 + 16);
    v99 = v195;
    if (v98)
    {
      v100 = v98;
      v101 = v68;
      v102 = (uint64_t)v173;
      ((void (*)(char *, uint64_t, unint64_t))v23)(v173, v97, v195);
      (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v101 + 56))(v102, 0, 1, v99);
      v103 = v100 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      v104 = v74;
      outlined assign with take of Date?(v102, v103, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      swift_endAccess();

    }
    ((void (*)(char *, uint64_t, unint64_t))v23)(v191, v97, v99);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v79 + 16) + 1, 1, v79);
    v105 = v194;
    v107 = *(_QWORD *)(v79 + 16);
    v106 = *(_QWORD *)(v79 + 24);
    if (v107 >= v106 >> 1)
      v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v106 > 1, v107 + 1, 1, v79);
    *(_QWORD *)(v79 + 16) = v107 + 1;
    v39 = v79;
    v108 = v79 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
    v109 = v105;
    v110 = *(_QWORD *)(v105 + 72);
    v111 = v195;
    (*(void (**)(unint64_t, char *, unint64_t))(v109 + 32))(v108 + v110 * v107, v191, v195);
    v22 = (uint64_t)v193;
    ((void (*)(_QWORD *, uint64_t, unint64_t))v23)(v193, v97, v111);
    v15 = v74;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v196 = v63;
    v38 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    v113 = v63[2];
    v114 = (v112 & 1) == 0;
    v115 = v113 + v114;
    if (__OFADD__(v113, v114))
      goto LABEL_67;
    v22 = v112;
    if (v63[3] >= v115)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
      goto LABEL_35;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v115, isUniquelyReferenced_nonNull_native);
    v116 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v193);
    if ((v22 & 1) != (v117 & 1))
      break;
    v38 = v116;
LABEL_35:
    isUniquelyReferenced_nonNull_native = v185;
    v63 = v196;
    if ((v22 & 1) != 0)
    {
      v69 = v196[7];

      *(_QWORD *)(v69 + 8 * v38) = v15;
    }
    else
    {
      v196[(v38 >> 6) + 8] |= 1 << v38;
      ((void (*)(unint64_t, _QWORD *, unint64_t))v23)(v63[6] + v38 * v110, v193, v195);
      *(_QWORD *)(v63[7] + 8 * v38) = v15;
      v118 = v63[2];
      v119 = __OFADD__(v118, 1);
      v120 = v118 + 1;
      if (v119)
        goto LABEL_70;
      v63[2] = v120;
    }
    swift_bridgeObjectRelease();
    v68 = v194;
    v70 = *(void (**)(uint64_t, unint64_t))(v194 + 8);
    v71 = v195;
    v70((uint64_t)v193, v195);

    v72 = (char *)v190;
LABEL_7:
    v70((uint64_t)v72, v71);
    v23 = v188;
    v22 = v189;
    ++v18;
    if (p_super == v184)
    {
      swift_bridgeObjectRelease();
      v15 = v158;
      v18 = v157;
LABEL_47:
      v191 = (char *)v39;
      v196 = (_QWORD *)v39;
      v197 = v159;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath], MEMORY[0x1E0DEAF20]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v124 = v170;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      v193 = *(_QWORD **)(v181 + 16);
      ((void (*)(uint64_t, char *, _QWORD *))v193)(v18, v124, v23);
      isUniquelyReferenced_nonNull_native = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<CRKeyPath> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>, MEMORY[0x1E0DECE10]);
      dispatch thunk of Collection.startIndex.getter();
      *(_QWORD *)(v18 + v15[9]) = v196;
      outlined init with take of (key: Int, value: AnyCRValue)?(v18, v22, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
      v18 = v22 + v15[9];
      v125 = *(_QWORD **)v18;
      dispatch thunk of Collection.endIndex.getter();
      v39 = v195;
      if (v125 == v196)
      {
LABEL_48:
        outlined destroy of StocksKitCurrencyCache.Provider?(v22, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
        swift_bridgeObjectRelease();
        v127 = v170;
        dispatch thunk of Collection.startIndex.getter();
        dispatch thunk of Collection.endIndex.getter();
        v128 = v196 != (_QWORD *)v197;
        (*(void (**)(char *, _QWORD *))(v181 + 8))(v127, v23);
        swift_bridgeObjectRelease();
        return v128;
      }
      *(_QWORD *)&v126 = 138412290;
      v190 = v126;
      while (1)
      {
        v131 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
        v132 = v177;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v133, v177, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
        v131(&v196, 0);
        v134 = v176;
        ((void (*)(char *, uint64_t, _QWORD *))v193)(v176, v22, v23);
        dispatch thunk of Collection.formIndex(after:)();
        (*(void (**)(char *, _QWORD *))(v181 + 8))(v134, v23);
        v135 = v132;
        v136 = v178;
        outlined init with take of (key: Int, value: AnyCRValue)?(v135, (uint64_t)v178, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
        LODWORD(v134) = swift_getEnumCaseMultiPayload();
        v15 = *v136;
        v38 = (unint64_t)v136
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?))
                     + 48);
        if ((_DWORD)v134 == 1)
          break;
        v137 = v194;
        v138 = (uint64_t)v180;
        (*(void (**)(char *, unint64_t, unint64_t))(v194 + 32))(v180, v38, v39);
        if (!v63[2])
          goto LABEL_68;
        v139 = specialized __RawDictionaryStorage.find<A>(_:)(v138);
        if ((v140 & 1) == 0)
          goto LABEL_69;
        v141 = *(id *)(v63[7] + 8 * v139);
        if ((objc_msgSend(v141, sel_isSynthesizedFormField) & 1) == 0)
        {
          if (!PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
          {
            if (one-time initialization token for logger != -1)
              swift_once();
            v148 = type metadata accessor for Logger();
            __swift_project_value_buffer(v148, (uint64_t)logger);
            v149 = v141;
            v150 = Logger.logObject.getter();
            v151 = static os_log_type_t.fault.getter();
            p_super = v150;
            if (os_log_type_enabled(v150, v151))
            {
              v152 = swift_slowAlloc();
              v153 = (_QWORD *)swift_slowAlloc();
              *(_DWORD *)v152 = v190;
              *(_QWORD *)(v152 + 4) = v149;
              *v153 = v149;

              _os_log_impl(&dword_1DDB0F000, p_super, v151, "PaperKit trying to update unknown annotation type: %@", (uint8_t *)v152, 0xCu);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              MEMORY[0x1DF0E6558](v153, -1, -1);
              v154 = v152;
              v22 = v189;
              MEMORY[0x1DF0E6558](v154, -1, -1);
            }
            else
            {

            }
            v155 = v180;

            (*(void (**)(char *, unint64_t))(v137 + 8))(v155, v39);
            goto LABEL_51;
          }
          v142 = (PDFAnnotation *)v141;
          p_super = &v142->super;
          swift_retain();
          PDFAnnotationElement.init(_:)(v142, v164);
          v143 = *(void (**)(char *, char *, unint64_t))(v137 + 16);
          v144 = v173;
          v143(v173, v180, v39);
          (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v137 + 56))(v144, 0, 1, v39);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
          v145 = v161;
          v23 = v188;
          Ref.init<A>(_:_:identity:)();
          (*(void (**)(char *, uint64_t))(v162 + 8))(v145, v163);
          LOBYTE(v196) = 8;
          v38 = (unint64_t)v180;
          v143(v160, v180, v39);
          lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
          v146 = v166;
          SharedTagged_9.init(_:id:)();
          CROrderedSet.insert(_:at:)();

          v147 = v146;
          v22 = v189;
          (*(void (**)(char *, uint64_t))(v167 + 8))(v147, v168);
          goto LABEL_54;
        }
        (*(void (**)(char *, unint64_t))(v137 + 8))(v180, v39);

LABEL_51:
        v130 = *(_QWORD **)v18;
        dispatch thunk of Collection.endIndex.getter();
        if (v130 == v196)
          goto LABEL_48;
      }
      CROrderedSet.remove(at:)((Swift::Int)v15);
LABEL_54:
      (*(void (**)(unint64_t, unint64_t))(v194 + 8))(v38, v39);
      goto LABEL_51;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.minEncodingVersion.getter();
}

__n128 protocol witness for static CRStruct_Base_9.fields.getter in conformance PaperDocumentPage@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  _BYTE v29[24];

  if (one-time initialization token for fields != -1)
    swift_once();
  *(_OWORD *)&v27[16] = xmmword_1F040D7C8;
  v28 = *(_OWORD *)&qword_1F040D7D8;
  *(_OWORD *)v29 = *(_OWORD *)&qword_1F040D7E8;
  *(_QWORD *)&v29[16] = qword_1F040D7F8;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1F040D788;
  *(_OWORD *)&v25[16] = *(_OWORD *)&qword_1F040D798;
  v26 = xmmword_1F040D7A8;
  *(_OWORD *)v27 = *(_OWORD *)&qword_1F040D7B8;
  v22 = xmmword_1F040D748;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1F040D758;
  *(_OWORD *)&v23[16] = xmmword_1F040D768;
  v24 = *(_OWORD *)&qword_1F040D778;
  *(_OWORD *)v21 = static PaperDocumentPage.fields;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_1F040D738;
  v2 = static PaperDocumentPage.fields;
  v3 = unk_1F040D740;
  v4 = qword_1F040D758;
  v5 = *((_QWORD *)&xmmword_1F040D768 + 1);
  v6 = qword_1F040D788;
  v7 = unk_1F040D7A0;
  v8 = qword_1F040D7B8;
  v9 = *((_QWORD *)&xmmword_1F040D7C8 + 1);
  v10 = qword_1F040D7E8;
  v12 = *(_OWORD *)&v21[8];
  v13 = xmmword_1F040D748;
  v14 = *(_OWORD *)&v23[8];
  v15 = *(_OWORD *)&qword_1F040D778;
  v16 = *(_OWORD *)&v25[8];
  v17 = xmmword_1F040D7A8;
  v18 = *(_OWORD *)&v27[8];
  v19 = *(_OWORD *)&qword_1F040D7D8;
  v20 = *(__n128 *)&v29[8];
  outlined retain of ((String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGFloat>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<PDFPageID?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<PaperDocumentPage, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<[CRKeyPath]>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CanvasElementFlags>>))((uint64_t)v21);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 192) = v10;
  result = v20;
  *(__n128 *)(a1 + 200) = v20;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return static CRStruct_9.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PaperDocumentPage()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 52);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance PaperDocumentPage())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.merge(delta:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRStruct_9.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  return CRDT.init(serializedData:)();
}

uint64_t PaperDocumentPage.shared(_:)(uint64_t a1)
{
  return PaperDocumentPage.shared(_:)(a1, 7, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12308]);
}

{
  return PaperDocumentPage.shared(_:)(a1, 2, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12240]);
}

uint64_t PaperDocumentPage.pageIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.getter();
  v4 = type metadata accessor for PDFPageID();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for PDFPageID?);
    return 0;
  }
  else
  {
    v5 = *v3;
    outlined destroy of PKStrokeProperties((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  return v5;
}

uint64_t PaperDocumentPage.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t PaperDocumentPage.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)(v7 + 624) = v6;
  *(_QWORD *)(v7 + 616) = a6;
  *(_QWORD *)(v7 + 608) = a5;
  *(_QWORD *)(v7 + 600) = a3;
  *(_QWORD *)(v7 + 592) = a2;
  *(_QWORD *)(v7 + 584) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  *(_QWORD *)(v7 + 632) = swift_task_alloc();
  v9 = type metadata accessor for PDFPageID();
  *(_QWORD *)(v7 + 640) = v9;
  *(_QWORD *)(v7 + 648) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 656) = swift_task_alloc();
  *(_BYTE *)(v7 + 91) = *(_BYTE *)a4;
  *(_BYTE *)(v7 + 92) = *(_BYTE *)(a4 + 1);
  *(_BYTE *)(v7 + 93) = *(_BYTE *)(a4 + 2);
  *(_QWORD *)(v7 + 664) = *(_QWORD *)(a4 + 8);
  *(_BYTE *)(v7 + 94) = *(_BYTE *)(a4 + 16);
  v10 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(v7 + 672) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v7 + 688) = v10;
  *(_BYTE *)(v7 + 95) = *(_BYTE *)(a4 + 56);
  *(_BYTE *)(v7 + 744) = *(_BYTE *)(a4 + 72);
  *(_BYTE *)(v7 + 745) = *(_BYTE *)(a4 + 73);
  *(_BYTE *)(v7 + 746) = *(_BYTE *)(a4 + 74);
  return swift_task_switch();
}

uint64_t PaperDocumentPage.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  CGContext *v5;
  CGFloat v6;
  double v7;
  double v8;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  id v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  CGFloat v38;
  CGFloat v39;
  uint64_t (*transform)(uint64_t);
  CGAffineTransform v41;
  CGRect v42;
  CGRect v43;

  v1 = *(_QWORD *)(v0 + 648);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 632);
  *(_QWORD *)(v0 + 704) = type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 632), &demangling cache variable for type metadata for PDFPageID?);
    *(_QWORD *)(v0 + 728) = 0;
    v4 = *(_BYTE *)(v0 + 94);
    CGContextSaveGState(*(CGContextRef *)(v0 + 584));
    if ((v4 & 1) != 0)
    {
      v5 = *(CGContext **)(v0 + 584);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      v6 = *(double *)(v0 + 560);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      v7 = *(double *)(v0 + 528);
      v8 = *(double *)(v0 + 536);
      v38 = *(double *)(v0 + 552);
      v39 = *(double *)(v0 + 544);
      CGAffineTransformMakeRotation(&v41, v6);
      a = v41.a;
      b = v41.b;
      c = v41.c;
      d = v41.d;
      tx = v41.tx;
      ty = v41.ty;
      *(CGFloat *)(v0 + 480) = v41.a;
      *(CGFloat *)(v0 + 488) = b;
      *(CGFloat *)(v0 + 496) = c;
      *(CGFloat *)(v0 + 504) = d;
      *(CGFloat *)(v0 + 512) = tx;
      *(CGFloat *)(v0 + 520) = ty;
      v42.origin.x = v7;
      v42.origin.y = v8;
      v42.size.height = v38;
      v42.size.width = v39;
      v43 = CGRectApplyAffineTransform(v42, (CGAffineTransform *)(v0 + 480));
      CGAffineTransformMakeTranslation(&v41, v7 - v43.origin.x, v8 - v43.origin.y);
      v15 = *(_OWORD *)&v41.a;
      v16 = *(_OWORD *)&v41.c;
      v17 = *(_OWORD *)&v41.tx;
      *(CGFloat *)(v0 + 432) = a;
      *(CGFloat *)(v0 + 440) = b;
      *(CGFloat *)(v0 + 448) = c;
      *(CGFloat *)(v0 + 456) = d;
      *(CGFloat *)(v0 + 464) = tx;
      *(CGFloat *)(v0 + 472) = ty;
      *(_OWORD *)(v0 + 144) = v15;
      *(_OWORD *)(v0 + 160) = v16;
      *(_OWORD *)(v0 + 176) = v17;
      CGAffineTransformConcat(&v41, (CGAffineTransform *)(v0 + 432), (CGAffineTransform *)(v0 + 144));
      v18 = *(_OWORD *)&v41.c;
      v19 = *(_OWORD *)&v41.tx;
      *(_OWORD *)(v0 + 384) = *(_OWORD *)&v41.a;
      *(_OWORD *)(v0 + 400) = v18;
      *(_OWORD *)(v0 + 416) = v19;
      CGContextConcatCTM(v5, (CGAffineTransform *)(v0 + 384));
    }
    v20 = *(void **)(v0 + 664);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 584));
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((*(_BYTE *)(v0 + 576) & 0x20) != 0)
    {

      v37 = *(void **)(v0 + 728);
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v22 = *(_OWORD *)(v0 + 688);
      *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 672);
      v23 = *(_BYTE *)(v0 + 746);
      v24 = *(_BYTE *)(v0 + 745);
      v25 = *(_BYTE *)(v0 + 744);
      v26 = *(_BYTE *)(v0 + 95);
      v27 = *(_BYTE *)(v0 + 94);
      v28 = *(_QWORD *)(v0 + 664);
      v29 = *(_BYTE *)(v0 + 93);
      v30 = *(_BYTE *)(v0 + 92);
      *(_BYTE *)(v0 + 16) = *(_BYTE *)(v0 + 91);
      *(_BYTE *)(v0 + 17) = v30;
      *(_BYTE *)(v0 + 18) = v29;
      *(_QWORD *)(v0 + 24) = v28;
      *(_BYTE *)(v0 + 32) = v27;
      *(_OWORD *)(v0 + 56) = v22;
      *(_BYTE *)(v0 + 72) = v26;
      *(_QWORD *)(v0 + 80) = 0;
      *(_BYTE *)(v0 + 88) = v25;
      *(_BYTE *)(v0 + 89) = v24;
      *(_BYTE *)(v0 + 90) = v23;
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 736) = v31;
      *v31 = v0;
      v31[1] = PaperDocumentPage.render<A>(in:id:capsule:options:);
      return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 600), (_OWORD *)(v0 + 16), *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 608), (uint64_t)&protocol witness table for PaperDocumentPage, *(_QWORD *)(v0 + 616));
    }
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 656);
    v34 = *(_QWORD *)(v0 + 640);
    outlined init with take of PDFPageID(*(_QWORD *)(v0 + 632), v33);
    v35 = v33 + *(int *)(v34 + 20);
    transform = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static PaperKitPDFDocument._load(_:)
                                                + async function pointer to specialized static PaperKitPDFDocument._load(_:));
    v36 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 712) = v36;
    *v36 = v0;
    v36[1] = PaperDocumentPage.render<A>(in:id:capsule:options:);
    return transform(v35);
  }
}

{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  id v3;
  int v4;
  CGContext *v5;
  CGFloat v6;
  double v7;
  double v8;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CGContext *v25;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  CGFloat MaxY;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  char v42;
  char v43;
  uint64_t v44;
  void *v45;
  char v46;
  char v47;
  char v48;
  id v49;
  __int128 v50;
  _QWORD *v51;
  void *v53;
  CGFloat v54;
  CGFloat v55;
  char v56;
  char transform;
  char v58;
  unint64_t v59;
  CGAffineTransform v60;
  _BYTE v61[27];
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v1 = *(void **)(v0 + 720);
  v2 = *(_QWORD **)(v0 + 656);
  if (v1)
  {
    v3 = objc_msgSend(*(id *)(v0 + 720), sel_pageAtIndex_, *v2);

    outlined destroy of PKStrokeProperties((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    if (v3)
    {
      type metadata accessor for PaperKitPDFPage(0);
      v1 = (void *)swift_dynamicCastClass();
      if (!v1)

    }
    else
    {
      v1 = 0;
    }
  }
  else
  {
    outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 656), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  *(_QWORD *)(v0 + 728) = v1;
  v4 = *(unsigned __int8 *)(v0 + 94);
  CGContextSaveGState(*(CGContextRef *)(v0 + 584));
  if (v4 == 1)
  {
    v5 = *(CGContext **)(v0 + 584);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v6 = *(double *)(v0 + 560);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v7 = *(double *)(v0 + 528);
    v8 = *(double *)(v0 + 536);
    v54 = *(double *)(v0 + 552);
    v55 = *(double *)(v0 + 544);
    CGAffineTransformMakeRotation(&v60, v6);
    a = v60.a;
    b = v60.b;
    c = v60.c;
    d = v60.d;
    tx = v60.tx;
    ty = v60.ty;
    *(CGFloat *)(v0 + 480) = v60.a;
    *(CGFloat *)(v0 + 488) = b;
    *(CGFloat *)(v0 + 496) = c;
    *(CGFloat *)(v0 + 504) = d;
    *(CGFloat *)(v0 + 512) = tx;
    *(CGFloat *)(v0 + 520) = ty;
    v62.origin.x = v7;
    v62.origin.y = v8;
    v62.size.height = v54;
    v62.size.width = v55;
    v63 = CGRectApplyAffineTransform(v62, (CGAffineTransform *)(v0 + 480));
    CGAffineTransformMakeTranslation(&v60, v7 - v63.origin.x, v8 - v63.origin.y);
    v15 = *(_OWORD *)&v60.a;
    v16 = *(_OWORD *)&v60.c;
    v17 = *(_OWORD *)&v60.tx;
    *(CGFloat *)(v0 + 432) = a;
    *(CGFloat *)(v0 + 440) = b;
    *(CGFloat *)(v0 + 448) = c;
    *(CGFloat *)(v0 + 456) = d;
    *(CGFloat *)(v0 + 464) = tx;
    *(CGFloat *)(v0 + 472) = ty;
    *(_OWORD *)(v0 + 144) = v15;
    *(_OWORD *)(v0 + 160) = v16;
    *(_OWORD *)(v0 + 176) = v17;
    CGAffineTransformConcat(&v60, (CGAffineTransform *)(v0 + 432), (CGAffineTransform *)(v0 + 144));
    v18 = *(_OWORD *)&v60.c;
    v19 = *(_OWORD *)&v60.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v60.a;
    *(_OWORD *)(v0 + 400) = v18;
    *(_OWORD *)(v0 + 416) = v19;
    CGContextConcatCTM(v5, (CGAffineTransform *)(v0 + 384));
  }
  if (v1)
  {
    v20 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((*(_BYTE *)(v0 + 568) & 0x20) == 0)
    {
      v21 = *(char **)(v0 + 616);
      v22 = *(_QWORD *)(v0 + 608);
      v23 = *(_QWORD *)(v0 + 600);
      v24 = *(_QWORD *)(v0 + 592);
      v59 = 0x8000000000000000;
      *(_OWORD *)&v60.a = xmmword_1DDF32D00;
      memset(&v60.c, 0, 32);
      memset(v61, 0, sizeof(v61));
      PaperDocumentPage.update<A>(pdfPage:id:use:in:options:)(v20, v24, &v59, v23, (uint64_t *)&v60, v22, v21);
    }
    v25 = *(CGContext **)(v0 + 584);
    CGContextSaveGState(v25);
    objc_msgSend(v20, sel_boundsForBox_, 0);
    x = v64.origin.x;
    y = v64.origin.y;
    width = v64.size.width;
    height = v64.size.height;
    MinY = CGRectGetMinY(v64);
    v65.origin.x = x;
    v65.origin.y = y;
    v65.size.width = width;
    v65.size.height = height;
    MaxY = CGRectGetMaxY(v65);
    *(_QWORD *)(v0 + 192) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 200) = 0;
    *(_QWORD *)(v0 + 208) = 0;
    *(_QWORD *)(v0 + 216) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 224) = 0;
    *(_QWORD *)(v0 + 232) = 0;
    *(_QWORD *)(v0 + 240) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 248) = 0;
    *(_QWORD *)(v0 + 256) = 0;
    *(_QWORD *)(v0 + 264) = 0xBFF0000000000000;
    *(_QWORD *)(v0 + 272) = 0;
    *(double *)(v0 + 280) = MinY + MaxY;
    CGAffineTransformConcat(&v60, (CGAffineTransform *)(v0 + 192), (CGAffineTransform *)(v0 + 240));
    v32 = *(_OWORD *)&v60.c;
    v33 = *(_OWORD *)&v60.tx;
    *(_OWORD *)(v0 + 288) = *(_OWORD *)&v60.a;
    *(_OWORD *)(v0 + 304) = v32;
    *(_OWORD *)(v0 + 320) = v33;
    CGContextConcatCTM(v25, (CGAffineTransform *)(v0 + 288));
    objc_msgSend(v20, sel_transformForBox_, 1);
    v34 = *(_OWORD *)&v60.c;
    v35 = *(_OWORD *)&v60.tx;
    *(_OWORD *)(v0 + 336) = *(_OWORD *)&v60.a;
    *(_OWORD *)(v0 + 352) = v34;
    *(_OWORD *)(v0 + 368) = v35;
    CGAffineTransformInvert(&v60, (CGAffineTransform *)(v0 + 336));
    v36 = *(_OWORD *)&v60.c;
    v37 = *(_OWORD *)&v60.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v60.a;
    *(_OWORD *)(v0 + 112) = v36;
    *(_OWORD *)(v0 + 128) = v37;
    CGContextConcatCTM(v25, (CGAffineTransform *)(v0 + 96));
    objc_msgSend(v20, sel_drawWithBox_inContext_, 1, v25);
    CGContextRestoreGState(v25);

  }
  v38 = *(void **)(v0 + 664);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 584));
  v39 = v38;
  v40 = v1;
  v41 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  if ((*(_BYTE *)(v0 + 576) & 0x20) != 0)
  {

    v53 = *(void **)(v0 + 728);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v58 = *(_BYTE *)(v0 + 746);
    transform = *(_BYTE *)(v0 + 745);
    v56 = *(_BYTE *)(v0 + 744);
    v42 = *(_BYTE *)(v0 + 95);
    v43 = *(_BYTE *)(v0 + 94);
    v44 = *(_QWORD *)(v0 + 664);
    v45 = v1;
    v46 = *(_BYTE *)(v0 + 93);
    v47 = *(_BYTE *)(v0 + 92);
    v48 = *(_BYTE *)(v0 + 91);
    v49 = v40;
    v50 = *(_OWORD *)(v0 + 688);
    *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 672);
    *(_BYTE *)(v0 + 16) = v48;
    *(_BYTE *)(v0 + 17) = v47;
    *(_BYTE *)(v0 + 18) = v46;
    *(_QWORD *)(v0 + 24) = v44;
    *(_BYTE *)(v0 + 32) = v43;
    *(_OWORD *)(v0 + 56) = v50;
    *(_BYTE *)(v0 + 72) = v42;
    *(_QWORD *)(v0 + 80) = v45;
    *(_BYTE *)(v0 + 88) = v56;
    *(_BYTE *)(v0 + 89) = transform;
    *(_BYTE *)(v0 + 90) = v58;
    v51 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 736) = v51;
    *v51 = v0;
    v51[1] = PaperDocumentPage.render<A>(in:id:capsule:options:);
    return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 600), (_OWORD *)(v0 + 16), *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 608), (uint64_t)&protocol witness table for PaperDocumentPage, *(_QWORD *)(v0 + 616));
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(*(_QWORD *)v0 + 728);
  v2 = *(void **)(*(_QWORD *)v0 + 664);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 728);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PaperDocumentPage.render<A>(in:id:capsule:options:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 720) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t PaperDocumentPage.pdfContentsBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  TaggedValue_2.tagged1.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v3, v4);
}

uint64_t protocol witness for ContainerCanvasElement.drawing.getter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ContainerCanvasElement.drawing.setter in conformance PaperDocumentPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*protocol witness for ContainerCanvasElement.drawing.modify in conformance PaperDocumentPage(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for ContainerCanvasElement.subelements.getter in conformance PaperDocumentPage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for ContainerCanvasElement.subelements.setter in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for ContainerCanvasElement.subelements.modify in conformance PaperDocumentPage())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*protocol witness for CanvasElement.frame.modify in conformance PaperDocumentPage(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance PaperDocumentPage(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.flags.getter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for CanvasElement.flags.setter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*protocol witness for CanvasElement.flags.modify in conformance PaperDocumentPage(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(a1, a2, a3, 7, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12308]);
}

double protocol witness for PaperRenderable.frame.getter in conformance PaperDocumentPage()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return PaperDocumentPage.render<A>(in:id:capsule:options:)(a1, a2, a3, a4, a5, a6);
}

uint64_t PaperDocumentPage.shared(_:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;

  v10 = type metadata accessor for CRKeyPath();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v16 = (*(uint64_t (**)(char *, uint64_t, double))(v15 + 16))(v14, a1, v12);
  v17 = a3(v16);
  return a5(&v20, v14, a4, v17);
}

uint64_t closure #1 in PaperDocumentPage.finishDecode(from:pageID:assetManager:)()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return MEMORY[0x1DF0E3408](v0);
}

uint64_t protocol witness for CanvasElement.frame.setter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for ContainerCanvasElement.pdfContentsBounds.getter in conformance PaperDocumentPage()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  TaggedValue_2.tagged1.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v3, v4);
}

double protocol witness for CanvasElement.rotation.getter in conformance PaperDocumentPage()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for PaperPage.pdfPageID.getter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for PaperPage.importElements<A>(_:in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ContainerCanvasElement.importElements<A>(_:in:)(a1, a2, a5, (uint64_t)&protocol witness table for PaperDocumentPage);
}

uint64_t protocol witness for PaperPage.shared(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(a1, a2, a3, 2, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12240]);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v12 = type metadata accessor for CRKeyPath();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a4;
  v18 = (*(uint64_t (**)(char *, uint64_t, double))(v17 + 16))(v16, a1, v14);
  v19 = a5(v18);
  return a7(&v22, v16, a6, v19);
}

void ContainerCanvasElement.importAnnotations<A>(from:in:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  id v10;

  type metadata accessor for PaperKitPDFPage(0);
  v8 = swift_dynamicCastClass();
  if (v8)
  {
    v9 = (void *)v8;
    v10 = a1;
    ContainerCanvasElement.importAnnotations<A>(from:in:assetManager:)(v9, a2, 0, a3, a4);

  }
}

void ContainerCanvasElement.importAnnotations<A>(from:in:assetManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  id v12;

  type metadata accessor for PaperKitPDFPage(0);
  v10 = swift_dynamicCastClass();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = a1;
    ContainerCanvasElement._importAnnotations<A>(from:in:assetManager:)(v11, a2, a3, a4, a5);

  }
}

uint64_t ContainerCanvasElement._importAnnotations<A>(from:in:assetManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;

  objc_msgSend(a1, sel_boundsForBox_, 0);
  static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(a1, a2, a3, 1.0, v10, v11, v12, v13);
  ContainerCanvasElement.importElements<A>(_:in:)(v14, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t specialized PaperPage.axisAlignedRotationInDegrees.getter()
{
  uint64_t result;
  double v1;
  uint64_t v2;
  double v3;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  result = CRRegister.wrappedValue.getter();
  v1 = round((v3 + v3) / 3.14159265);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v2 = (uint64_t)v1 & 3;
  if ((uint64_t)v1 <= 0)
    v2 = -(-(uint64_t)v1 & 3);
  if (v2 >= 0)
    return 90 * v2;
  else
    return 90 * v2 + 360;
}

uint64_t specialized PaperPage.axisAlignedRotationInDegrees.getter(void (*a1)(_QWORD))
{
  uint64_t result;
  double v2;
  uint64_t v3;
  double v4;

  a1(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  result = CRRegister.wrappedValue.getter();
  v2 = round((v4 + v4) / 3.14159265);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v3 = (uint64_t)v2 & 3;
  if ((uint64_t)v2 <= 0)
    v3 = -(-(uint64_t)v2 & 3);
  if (v3 >= 0)
    return 90 * v3;
  else
    return 90 * v3 + 360;
}

uint64_t protocol witness for PaperPage.importElements<A>(_:in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ContainerCanvasElement.importElements<A>(_:in:)(a1, a2, a5, (uint64_t)&protocol witness table for Image);
}

uint64_t protocol witness for PaperPage.importElements<A>(_:in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ContainerCanvasElement.importElements<A>(_:in:)(a1, a2, a5, (uint64_t)&protocol witness table for Paper);
}

unint64_t lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CRKeyPath]);
    v2 = MEMORY[0x1E0D12C68];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D28], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance TaggedValue_2<A, B>, &demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>, MEMORY[0x1E0D12018]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type PDFPageID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PDFPageID? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PDFPageID?);
    v2 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID? and conformance <A> A?);
  }
  return result;
}

void outlined consume of PaperDocument.PDFDocumentUse(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
      return;
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }

}

unint64_t outlined consume of PaperKitPDFPage.AnnotationIDState(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized PaperDocumentPage.finishDecode(from:pageID:assetManager:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  __C::CGRect v28;
  __C::CGRect v29;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)v27 - v11;
  objc_msgSend(a1, sel_boundsForBox_, 1, v10);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v29.origin.y = v21;
  v29.size.height = v22;
  v28.origin.x = v14;
  v28.origin.y = v16;
  v28.size.width = v18;
  v28.size.height = v20;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v28, v29);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(a1, sel_rotation));
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  v23 = type metadata accessor for PDFPageID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 0, 1, v23);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v7, &demangling cache variable for type metadata for PDFPageID?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for PDFPageID?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  type metadata accessor for CRKeyPath();
  v27[0] = CROrderedSet.map<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.setter();
  type metadata accessor for PaperKitPDFPage(0);
  v24 = swift_dynamicCastClass();
  if (v24)
  {
    v25 = v24;
    CRRegister.wrappedValue.getter();
    if (*(_QWORD *)(v25 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)(v25 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState) = v27[0];
      outlined consume of PaperKitPDFPage.AnnotationIDState(0);
    }
  }
  return 1;
}

uint64_t base witness table accessor for CRStruct_Base_9 in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

uint64_t base witness table accessor for CRStruct_Base in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_4 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<PDFPageID?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<PDFPageID?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_5 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_6 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DB0]);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_7 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<[CRKeyPath]> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<[CRKeyPath]>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_8 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_2<CGRect, Quad>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_9 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CanvasElementFlags> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementFlags>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

uint64_t base witness table accessor for CRMergeable in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

uint64_t base witness table accessor for CRType in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_9<PaperDocumentPage> and conformance CRStructMergeableDelta_9<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_9<PaperDocumentPage>, MEMORY[0x1E0D12798]);
}

uint64_t base witness table accessor for CRCodable in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

uint64_t sub_1DDBF945C()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDBF949C()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDBF94EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_9Tm_0(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDBF94FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_9Tm_0(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_9Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for PaperDocumentPage();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a4(v5);
}

uint64_t sub_1DDBF9564()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDBF95B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_17Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDBF95C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_17Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_17Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for PaperDocumentPage();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  return a4(v5);
}

uint64_t sub_1DDBF9624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_21Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDBF9634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_21Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_21Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for PaperDocumentPage();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a4(v5);
}

uint64_t sub_1DDBF969C()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDBF96F4()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperDocumentPage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[8];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[9];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[10];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[11];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = a3[12];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PaperDocumentPage(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[9];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = a1 + a2[10];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = a1 + a2[11];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = a1 + a2[12];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocumentPage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDBFA228(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_17:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_17;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_17;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[9];
    goto LABEL_17;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[10];
    goto LABEL_17;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v12 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v18;
    v13 = a3[11];
    goto LABEL_17;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v12 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v19;
    v13 = a3[12];
    goto LABEL_17;
  }
  v21 = *(_QWORD *)(a1 + a3[13]);
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  return (v21 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperDocumentPage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDBFA3D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_17:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_17;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[8];
    goto LABEL_17;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[9];
    goto LABEL_17;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v14 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v19;
    v15 = a4[10];
    goto LABEL_17;
  }
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v14 = *(_QWORD *)(v20 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v20;
    v15 = a4[11];
    goto LABEL_17;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[12];
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + a4[13]) = (a2 - 1);
  return result;
}

void type metadata completion function for PaperDocumentPage()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<CGFloat>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<PDFPageID?>, &demangling cache variable for type metadata for PDFPageID?, (void (*)(void))lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<CGFloat>(319, &lazy cache variable for type metadata for CRRegister<CanvasElementFlags>, (void (*)(void))lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>();
              if (v6 <= 0x3F)
              {
                type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<[CRKeyPath]>, &demangling cache variable for type metadata for [CRKeyPath], (void (*)(void))lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]);
                if (v7 <= 0x3F)
                  swift_initStructMetadata();
              }
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<CGFloat>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for CRRegister();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
    v0 = type metadata accessor for CROrderedSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  }
}

unint64_t type metadata accessor for PDFAnnotation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PDFAnnotation;
  if (!lazy cache variable for type metadata for PDFAnnotation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  }
  return result;
}

uint64_t closure #1 in static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)()
{
  return closure #1 in PaperDocumentPage.finishDecode(from:pageID:assetManager:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueTypes_BezierPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for ValueTypes_BezierPath(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for ValueTypes_BezierPath(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for ValueTypes_BezierPath(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for ValueTypes_BezierPath(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueTypes_BezierPath()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDBFABB8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ValueTypes_BezierPath()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1DDBFAC40(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ValueTypes_BezierPath()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ValueTypes_BezierPath;
  if (!type metadata singleton initialization cache for ValueTypes_BezierPath)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ValueTypes_BezierPath()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void protocol witness for Enum.init() in conformance ValueTypes_BezierPath.ElementType(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void protocol witness for Enum.init(rawValue:) in conformance ValueTypes_BezierPath.ElementType(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized ValueTypes_BezierPath.ElementType.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance ValueTypes_BezierPath.ElementType()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance ValueTypes_BezierPath.ElementType(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized ValueTypes_BezierPath.ElementType.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ValueTypes_BezierPath.ElementType()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ValueTypes_BezierPath.ElementType()
{
  lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValueTypes_BezierPath.ElementType()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ValueTypes_BezierPath._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ValueTypes_BezierPath._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF33AB0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "elements";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 4;
  *(_QWORD *)v11 = "coordinates";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ValueTypes_BezierPath.ElementType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ValueTypes_BezierPath.ElementType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF368C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "moveTo";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "lineTo";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "quadCurveTo";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "curveTo";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "closeSubpath";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ValueTypes_BezierPath.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 4)
      {
        dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ValueTypes_BezierPath.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType(),
        result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (result = dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for ValueTypes_BezierPath();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t ValueTypes_BezierPath._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - v10;
  if ((specialized static Array<A>.== infix(_:_:)(*v1, *a1) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(v1[1], a1[1]))
  {
    v12 = type metadata accessor for ValueTypes_BezierPath();
    v13 = (char *)v1 + *(int *)(v12 + 24);
    v14 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v14(v11, v13, v3);
    v14(v7, (char *)a1 + *(int *)(v12 + 24), v3);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v7, v3);
    v16(v11, v3);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t protocol witness for Message.init() in conformance ValueTypes_BezierPath@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ValueTypes_BezierPath()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance ValueTypes_BezierPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance ValueTypes_BezierPath())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ValueTypes_BezierPath()
{
  return ValueTypes_BezierPath.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ValueTypes_BezierPath()
{
  return ValueTypes_BezierPath.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ValueTypes_BezierPath()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ValueTypes_BezierPath._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ValueTypes_BezierPath()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ValueTypes_BezierPath()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ValueTypes_BezierPath()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValueTypes_BezierPath()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValueTypes_BezierPath()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
  return static _MessageImplementationBase.== infix(_:_:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath.ElementType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath(one-time initialization token for _protobuf_nameMap, (uint64_t)static ValueTypes_BezierPath.ElementType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t base witness table accessor for Equatable in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
}

uint64_t base witness table accessor for Message in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
}

uint64_t base witness table accessor for Hashable in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
}

unint64_t lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ValueTypes_BezierPath.ElementType, &type metadata for ValueTypes_BezierPath.ElementType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ValueTypes_BezierPath.ElementType, &type metadata for ValueTypes_BezierPath.ElementType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ValueTypes_BezierPath.ElementType, &type metadata for ValueTypes_BezierPath.ElementType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ValueTypes_BezierPath.ElementType, &type metadata for ValueTypes_BezierPath.ElementType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ValueTypes_BezierPath.ElementType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ValueTypes_BezierPath.ElementType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for ValueTypes_BezierPath.ElementType(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for ValueTypes_BezierPath.ElementType(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueTypes_BezierPath.ElementType()
{
  return &type metadata for ValueTypes_BezierPath.ElementType;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v21 = a1;
  v22 = a2;
  v20 = type metadata accessor for PKStroke();
  v6 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = v23;
    v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = a3 + v19;
    v18 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      v21(v12);
      if (v4)
        break;
      v4 = 0;
      v23 = v11;
      v14 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v11 = v23;
      }
      *(_QWORD *)(v11 + 16) = v14 + 1;
      v15 = v18;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v19 + v14 * v18, v9, v20);
      v12 += v15;
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12CoreGraphics7CGFloatVG_AHs5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v16;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v14 = *i;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return 0;
  v6 = 0;
  v7 = (unint64_t *)(a3 + 40);
  while (2)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    switch(*v7)
    {
      case 0uLL:
        if (a2)
          goto LABEL_22;
        v12 = *(v7 - 1);
        v13 = 0;
        goto LABEL_27;
      case 1uLL:
        if (a2 != 1)
          goto LABEL_22;
        v12 = *(v7 - 1);
        v13 = 1;
        goto LABEL_27;
      case 2uLL:
        if (a2 != 2)
          goto LABEL_22;
        v12 = *(v7 - 1);
        v13 = 2;
        goto LABEL_27;
      case 3uLL:
        if (a2 != 3)
          goto LABEL_22;
        v12 = *(v7 - 1);
        v13 = 3;
        goto LABEL_27;
      case 4uLL:
        if (a2 != 4)
          goto LABEL_22;
        v12 = *(v7 - 1);
        v13 = 4;
        goto LABEL_27;
      case 5uLL:
        if (a2 != 5)
          goto LABEL_22;
        v12 = *(v7 - 1);
        v13 = 5;
        goto LABEL_27;
      default:
        if (a2 < 6)
        {
LABEL_22:
          outlined copy of SignatureDescription(*(v7 - 1), *v7);
          outlined copy of SignatureDescription(a1, a2);
          outlined consume of SignatureDescription(v8, v9);
          outlined consume of SignatureDescription(a1, a2);
LABEL_23:
          v7 += 2;
          if (v3 == ++v6)
            return 0;
          continue;
        }
        if (v8 != a1 || v9 != a2)
        {
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of SignatureDescription(v8, v9);
          outlined copy of SignatureDescription(a1, a2);
          outlined consume of SignatureDescription(v8, v9);
          outlined consume of SignatureDescription(a1, a2);
          if ((v11 & 1) != 0)
            return v6;
          goto LABEL_23;
        }
        outlined copy of SignatureDescription(a1, a2);
        outlined copy of SignatureDescription(a1, a2);
        v12 = a1;
        v13 = a2;
LABEL_27:
        outlined consume of SignatureDescription(v12, v13);
        outlined consume of SignatureDescription(a1, a2);
        return v6;
    }
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a1;
  v3 = type metadata accessor for PDFPageID();
  v39 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v34 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x1E0C80A78](v38, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v33 - v15;
  v35 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  MEMORY[0x1E0C80A78](v35, v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(a2 + 16);
  if (!v37)
    return 0;
  v21 = 0;
  v22 = a2 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  v36 = *(_QWORD *)(v18 + 72);
  while (1)
  {
    outlined init with copy of PaperDocument.PDFPageAndPaperPage(v22, (uint64_t)v20);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v40, (uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
    v24 = (uint64_t)&v8[*(int *)(v38 + 48)];
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v20, (uint64_t)v8, &demangling cache variable for type metadata for PDFPageID?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v16, v24, &demangling cache variable for type metadata for PDFPageID?);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v25(v8, 1, v3) == 1)
      break;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for PDFPageID?);
    v27 = v25((char *)v24, 1, v3);
    v23 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
    if (v27 == 1)
      goto LABEL_4;
    v28 = v34;
    outlined init with take of PDFPageID(v24, (uint64_t)v34);
    if (*v12 != *v28)
    {
      outlined destroy of PKStrokeProperties((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v23 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_4:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PKStrokeProperties((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, v23);
      goto LABEL_6;
    }
    v29 = static CRAsset.== infix(_:_:)();
    v30 = (uint64_t)v28;
    v31 = v29;
    outlined destroy of PKStrokeProperties(v30, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for PDFPageID?);
    if ((v31 & 1) != 0)
      goto LABEL_13;
LABEL_6:
    outlined destroy of PKStrokeProperties((uint64_t)v20, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
    ++v21;
    v22 += v36;
    if (v37 == v21)
      return 0;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
  v26 = v25((char *)v24, 1, v3);
  v23 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
  if (v26 != 1)
    goto LABEL_5;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for PDFPageID?);
LABEL_13:
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  if ((static WeakTagged_3.== infix(_:_:)() & 1) == 0)
    goto LABEL_6;
  outlined destroy of PKStrokeProperties((uint64_t)v20, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
  return v21;
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x1DF0E4D64](0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(a2 + 32);
      }
      v5 = v4;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v11 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v11 == v3)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v8 = (id)MEMORY[0x1DF0E4D64](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          v9 = v8;
          v10 = static NSObject.== infix(_:_:)();

          if ((v10 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3)
          continue;
      }
      return;
    }
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = result;
  if (a2 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return 0;
  while ((a2 & 0xC000000000000001) != 0)
  {
    v9 = MEMORY[0x1DF0E4D64](0, a2);
    swift_unknownObjectRelease();
    if (v9 == v3)
      return 0;
    v5 = a2 & 0xFFFFFFFFFFFFFF8;
LABEL_6:
    v6 = 0;
    result = 1;
    do
    {
      if (v4 - 1 == v6)
        return 0;
      v8 = v6 + 1;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x1DF0E4D64](v6 + 1, a2);
        swift_unknownObjectRelease();
        if (v7 == v3)
          return v6 + 1;
      }
      else
      {
        if (v8 >= *(_QWORD *)(v5 + 16))
          goto LABEL_17;
        if (*(_QWORD *)(a2 + 8 * v6 + 40) == v3)
          return result;
      }
      ++v6;
      result = v8 + 1;
    }
    while (!__OFADD__(v8, 1));
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return 0;
  }
  v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    if (*(_QWORD *)(a2 + 32) == v3)
      return 0;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC8]);
  dispatch thunk of Collection._customIndexOfEquatableElement(_:)();
  if ((v10 & 1) == 0)
    return v9;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v11 == v9)
    return 0;
  v5 = MEMORY[0x1E0D12280];
  while (1)
  {
    v6 = dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v1 + 16))(v4);
    ((void (*)(uint64_t *, _QWORD))v6)(&v9, 0);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, v5);
    LOBYTE(v6) = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    if ((v6 & 1) != 0)
      break;
    dispatch thunk of Collection.formIndex(after:)();
    dispatch thunk of Collection.endIndex.getter();
    if (v11 == v9)
      return 0;
  }
  return v11;
}

uint64_t SignatureItem.isOwned.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned);
}

id SignatureItem.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SignatureItem.init(coder:)(a1);
}

id SignatureItem.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t ObjCClassMetadata;
  _BOOL4 v32;
  uint64_t v33;
  void *v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  float v55;
  float v56;
  void *v57;
  unsigned __int8 v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  id v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  objc_class *v90;
  uint64_t v92;
  char *v93;
  char *v94;
  objc_super v95;
  __int128 v96;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v3, v4);
  v92 = (uint64_t)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v94 = (char *)&v92 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v92 - v15;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v22 = (void *)swift_dynamicCastObjCClass();
  v23 = v1;
  v24 = v23;
  if (v22)
  {
    v93 = v16;
    v25 = v23;
    v26 = v18;
    v27 = v17;
    v28 = a1;
    v29 = (void *)MEMORY[0x1DF0E41AC](0x74616E6769534B41, 0xEB00000000657275);
    v30 = objc_msgSend(v22, sel_classForClassName_, v29);

    if (v30)
    {
      ObjCClassMetadata = swift_getObjCClassMetadata();
      v32 = ObjCClassMetadata == type metadata accessor for SignatureItem();
    }
    else
    {
      v32 = 0;
    }
    v17 = v27;
    v18 = v26;
    v24 = v25;
    v16 = v93;
  }
  else
  {
    v32 = 0;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUUID);
  v33 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v33)
  {
    if (one-time initialization token for SignatureLogger != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)SignatureLogger);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1DDB0F000, v38, v39, "decode did not find UUID", v40, 2u);
      MEMORY[0x1DF0E6558](v40, -1, -1);
    }

    goto LABEL_39;
  }
  v34 = (void *)v33;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v35 = &v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID];
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID], v21, v17);
  v36 = v32 || specialized static SignatureManager.ownsSignature(_:)();
  v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned] = v36;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDate);
  v41 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v41)
  {
    v42 = (void *)v41;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v43 = type metadata accessor for Date();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v16, 0, 1, v43);
  }
  else
  {
    v44 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v16, 1, 1, v44);
  }
  v45 = (uint64_t)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v16, (uint64_t)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate], &demangling cache variable for type metadata for Date?);
  if (v32)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v45, (uint64_t)v12, &demangling cache variable for type metadata for Date?);
    v46 = type metadata accessor for Date();
    v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v12, 1, v46);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Date?);
    if (v47 == 1)
    {
      if (one-time initialization token for SignatureLogger != -1)
        swift_once();
      v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)SignatureLogger);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_1DDB0F000, v49, v50, "decode did not find creationDate", v51, 2u);
        MEMORY[0x1DF0E6558](v51, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v18 + 8))(v35, v17);
      v52 = &demangling cache variable for type metadata for Date?;
      v53 = v45;
LABEL_38:
      outlined destroy of StocksKitCurrencyCache.Provider?(v53, v52);

LABEL_39:
      type metadata accessor for SignatureItem();
      swift_deallocPartialClassInstance();
      return 0;
    }
  }
  v93 = (char *)v17;
  v54 = (void *)MEMORY[0x1DF0E41AC](0x656E696C65736162, 0xEE0074657366664FLL);
  objc_msgSend(a1, sel_decodeFloatForKey_, v54);
  v56 = v55;

  *(double *)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset] = v56;
  v57 = (void *)MEMORY[0x1DF0E41AC](0x6550646C756F6873, 0xED00007473697372);
  v58 = objc_msgSend(a1, sel_decodeBoolForKey_, v57);

  v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist] = v58;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSData);
  v59 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (v59)
  {
    v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v61;

    specialized static SignatureItem.signaturePath(from:)(v60, v62);
    v59 = v63;
    outlined consume of Data._Representation(v60, v62);
  }
  *(_QWORD *)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_path] = v59;
  v64 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v64)
  {
    v65 = (void *)v64;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    v66 = (uint64_t)v94;
    PKDrawing.init(data:)();
    v69 = type metadata accessor for PKDrawing();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v66, 0, 1, v69);
    outlined init with take of (key: Int, value: AnyCRValue)?(v66, (uint64_t)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing], &demangling cache variable for type metadata for PKDrawing?);
  }
  else
  {
    v67 = &v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing];
    v68 = type metadata accessor for PKDrawing();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
  }
  if (!*(_QWORD *)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_path])
  {
    v70 = v92;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing], v92, &demangling cache variable for type metadata for PKDrawing?);
    v71 = type metadata accessor for PKDrawing();
    v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v70, 1, v71);
    outlined destroy of StocksKitCurrencyCache.Provider?(v70, &demangling cache variable for type metadata for PKDrawing?);
    if (v72 == 1)
    {
      if (one-time initialization token for SignatureLogger != -1)
        swift_once();
      v73 = type metadata accessor for Logger();
      __swift_project_value_buffer(v73, (uint64_t)SignatureLogger);
      v74 = Logger.logObject.getter();
      v75 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v76 = 0;
        _os_log_impl(&dword_1DDB0F000, v74, v75, "decode did not find at least one of CGPath or PKDrawing", v76, 2u);
        MEMORY[0x1DF0E6558](v76, -1, -1);
      }

      (*(void (**)(char *, char *))(v18 + 8))(v35, v93);
      outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for Date?);

      v53 = (uint64_t)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing];
      v52 = &demangling cache variable for type metadata for PKDrawing?;
      goto LABEL_38;
    }
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSString);
  v78 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v78)
  {
    v79 = (void *)v78;
    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v82 = v81;

    SignatureDescription.init(caption:)(v80, v82, (uint64_t *)&v96);
  }
  else
  {
    v83 = (void *)MEMORY[0x1DF0E41AC](0x7470697263736564, 0xEE006761546E6F69);
    v84 = objc_msgSend(a1, sel_decodeIntegerForKey_, v83);

    v85 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v85)
    {
      v86 = (void *)v85;
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v89 = v88;

    }
    else
    {
      v87 = 0;
      v89 = 0;
    }
    SignatureDescription.init(tag:customDescription:)((uint64_t)v84, v87, v89, (uint64_t *)&v96);
  }
  *(_OWORD *)&v24[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription] = v96;

  v90 = (objc_class *)type metadata accessor for SignatureItem();
  v95.receiver = v24;
  v95.super_class = v90;
  v77 = objc_msgSendSuper2(&v95, sel_init);

  return v77;
}

uint64_t type metadata accessor for SignatureItem()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SignatureItem;
  if (!type metadata singleton initialization cache for SignatureItem)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall SignatureItem.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  Class isa;
  void *v26;
  double v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  void *v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  Class v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  PKDrawing *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  Class v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v64 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v16 = swift_dynamicCastObjCClass();
  if (v16
    && (v17 = (void *)v16,
        type metadata accessor for SignatureItem(),
        (v18 = objc_msgSend(v17, sel_classNameForClass_, swift_getObjCClassFromMetadata())) != 0))
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    if (v20 == 0x74616E6769534B41 && v22 == 0xEB00000000657275)
    {
      swift_bridgeObjectRelease();
      v24 = 1;
    }
    else
    {
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v24 = 0;
  }
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v26 = (void *)MEMORY[0x1DF0E41AC](0x4449657571696E75, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v26);

  v27 = *(double *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset);
  v28 = (void *)MEMORY[0x1DF0E41AC](0x656E696C65736162, 0xEE0074657366664FLL);
  -[objc_class encodeDouble:forKey:](with.super.isa, sel_encodeDouble_forKey_, v28, v27);

  if ((v24 & 1) == 0)
  {
    v36 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
    if (!v36)
      goto LABEL_19;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v11, &demangling cache variable for type metadata for PKDrawing?);
    v37 = type metadata accessor for PKDrawing();
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v11, 1, v37);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for PKDrawing?);
    if (v38 != 1)
      goto LABEL_19;
    goto LABEL_17;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v15, &demangling cache variable for type metadata for Date?);
  v29 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v15, 1, v29) == 1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v31 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v29);
  v32 = (void *)MEMORY[0x1DF0E41AC](0x6E6F697461657263, 0xEC00000065746144);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v31, v32);

  v33 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist);
  if (v33 == 2)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v34 = v33 & 1;
  v35 = (void *)MEMORY[0x1DF0E41AC](0x6550646C756F6873, 0xED00007473697372);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v34, v35);

  v36 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
  if (v36)
  {
LABEL_17:
    v39 = specialized static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(v36, v24 & 1);
    if (v40 >> 60 != 15)
    {
      v41 = v39;
      v42 = v40;
      v43 = Data._bridgeToObjectiveC()().super.isa;
      v44 = (void *)MEMORY[0x1DF0E41AC](1752457584, 0xE400000000000000);
      -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v43, v44);

      outlined consume of Data?(v41, v42);
    }
  }
LABEL_19:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v7, &demangling cache variable for type metadata for PKDrawing?);
  v45 = type metadata accessor for PKDrawing();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v7, 1, v45) != 1)
  {
    PKDrawing._bridgeToObjectiveC()(v47);
    v49 = v48;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v45);
    v50 = objc_msgSend(v49, sel_serialize);

    v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v53 = v52;

    v54 = Data._bridgeToObjectiveC()().super.isa;
    v55 = (void *)MEMORY[0x1DF0E41AC](0x676E6977617264, 0xE700000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v54, v55);

    outlined consume of Data._Representation(v51, v53);
  }
  v56 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription);
  v57 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8);
  if (v57 - 1 < 5)
  {
    outlined copy of SignatureDescription(v56, v57);
    v58 = specialized Collection<>.firstIndex(of:)(v56, v57, (uint64_t)&outlined read-only object #0 of static SignatureDescription.allCases.getter);
    if ((v59 & 1) == 0)
    {
      v60 = v58;
      outlined consume of SignatureDescription(v56, v57);
      v61 = (void *)MEMORY[0x1DF0E41AC](0x7470697263736564, 0xEE006761546E6F69);
      -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v60, v61);
LABEL_24:

      return;
    }
    __break(1u);
    goto LABEL_29;
  }
  if (v57)
  {
    v62 = (void *)MEMORY[0x1DF0E41AC](0x7470697263736564, 0xEE006761546E6F69);
    -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, -1, v62);

    v63 = (void *)MEMORY[0x1DF0E41AC](v56, v57);
    v61 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF50EF0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v63, v61);

    goto LABEL_24;
  }
}

uint64_t SignatureItem.dataForKeychain()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36F8]), sel_initRequiringSecureCoding_, 1);
  v2 = (void *)MEMORY[0x1DF0E41AC](0x74616E6769534B41, 0xEB00000000657275);
  type metadata accessor for SignatureItem();
  objc_msgSend(v1, sel_setClassName_forClass_, v2, swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_encodeObject_forKey_, v0, *MEMORY[0x1E0CB2CD0]);
  v3 = objc_msgSend(v1, sel_encodedData);
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v1, sel_finishEncoding);
  return v4;
}

uint64_t SignatureItem.rawValue.getter()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36F8]), sel_initRequiringSecureCoding_, 1);
  SignatureItem.encode(with:)((NSCoder)v0);
  v1 = objc_msgSend(v0, sel_encodedData);
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v0, sel_finishEncoding);
  return v2;
}

double SignatureItem.size.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const CGPath *v10;
  double v11;
  double v12;
  uint64_t v14;
  CGRect BoundingBox;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PKDrawing();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v4, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for PKDrawing?);
    v10 = *(const CGPath **)(v0 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
    if (v10)
    {
      BoundingBox = CGPathGetBoundingBox(v10);
      return BoundingBox.size.width;
    }
    else
    {
      return 0.0;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    PKDrawing.bounds.getter();
    v11 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return v11;
}

UIImage_optional __swiftcall SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(CGSize withMaximumSize, UIColor_optional withColor, Swift::Int_optional width, Swift::Bool forPrinting)
{
  uint64_t v4;
  int v5;
  double height;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  Swift::Bool v27;
  uint64_t v28;
  char *v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  const CGPath *v34;
  CGFloat x;
  CGFloat y;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  Class v42;
  Class v43;
  id v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  Class v50;
  Class v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  objc_class *v57;
  objc_class *v58;
  char *v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  PKDrawing *v66;
  void *v67;
  void *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  void *v77;
  id v78;
  void (*v79)(char *, uint64_t);
  id v80;
  objc_class *v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const CGPath *v87;
  id v88;
  objc_class *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int value;
  char *v99;
  Class isa;
  uint64_t aBlock;
  uint64_t v102;
  void (*v103)(uint64_t, void *);
  void *v104;
  void *v105;
  uint64_t v106;
  UIImage_optional result;
  CGRect BoundingBox;
  CGRect v109;

  v5 = *(_DWORD *)&width.is_nil;
  value = width.value;
  v95 = *(_QWORD *)&withColor.is_nil;
  isa = withColor.value.super.isa;
  height = withMaximumSize.height;
  v7 = withMaximumSize.width;
  v8 = type metadata accessor for PKInkingTool.InkType();
  v96 = *(_QWORD *)(v8 - 8);
  v97 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PKInk();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v99 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PKDrawing();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v26);
  v29 = (char *)&v90 - v28;
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0 && (*(_QWORD *)&height & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
LABEL_16:
    v56 = 0;
    goto LABEL_23;
  }
  v93 = v13;
  v94 = v12;
  v30 = objc_msgSend((id)objc_opt_self(), sel_currentTraitCollection);
  v31 = objc_msgSend(v30, sel_userInterfaceStyle);

  v32 = (v31 == (id)2) & (v5 ^ 1u);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v4 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v19, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PKDrawing?);
    v33 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
    if (v33)
    {
      v34 = v33;
      BoundingBox = CGPathGetBoundingBox(v34);
      x = BoundingBox.origin.x;
      y = BoundingBox.origin.y;
      v37 = BoundingBox.size.width;
      v38 = BoundingBox.size.height;
      v39 = v7 / CGRectGetWidth(BoundingBox);
      v109.origin.x = x;
      v109.origin.y = y;
      v109.size.width = v37;
      v109.size.height = v38;
      v40 = height / CGRectGetHeight(v109);
      if (v40 >= v39)
        v41 = v39;
      else
        v41 = v40;
      v42 = isa;
      if (isa)
        v43 = isa;
      else
        v43 = (Class)objc_msgSend((id)objc_opt_self(), sel_blackColor);
      v81 = v42;
      v82 = (void *)static PKInkingTool.convertColor(_:from:to:)();

      v83 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v37 * v41, v38 * v41);
      v84 = swift_allocObject();
      *(double *)(v84 + 16) = v41;
      *(CGFloat *)(v84 + 24) = x;
      *(CGFloat *)(v84 + 32) = y;
      *(double *)(v84 + 40) = v37;
      *(double *)(v84 + 48) = v38;
      *(_QWORD *)(v84 + 56) = v82;
      *(_QWORD *)(v84 + 64) = v34;
      v85 = swift_allocObject();
      *(_QWORD *)(v85 + 16) = partial apply for closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:);
      *(_QWORD *)(v85 + 24) = v84;
      v105 = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
      v106 = v85;
      aBlock = MEMORY[0x1E0C809B0];
      v102 = 1107296256;
      v103 = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
      v104 = &block_descriptor_18;
      v86 = _Block_copy(&aBlock);
      v87 = v34;
      v88 = v82;
      swift_retain();
      swift_release();
      v56 = objc_msgSend(v83, sel_imageWithActions_, v86);

      _Block_release(v86);
      LOBYTE(v83) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v83 & 1) == 0)
        goto LABEL_23;
      __break(1u);
    }
    else if (one-time initialization token for SignatureLogger == -1)
    {
LABEL_13:
      v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)SignatureLogger);
      v53 = Logger.logObject.getter();
      v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v55 = 0;
        _os_log_impl(&dword_1DDB0F000, v53, v54, "signature image but no path or drawing", v55, 2u);
        MEMORY[0x1DF0E6558](v55, -1, -1);
      }

      goto LABEL_16;
    }
    swift_once();
    goto LABEL_13;
  }
  v92 = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v29, v19, v20);
  v44 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v44, sel_scale);
  v46 = v45;

  v91 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11A0]), sel_initSyncWithSize_scale_, v7, height, v46);
  objc_msgSend(v91, sel_setInvertColors_, v32);
  PKDrawing.bounds.getter();
  v47 = (double)v95;
  v49 = v7 / v48;
  v50 = isa;
  if (isa)
    v51 = isa;
  else
    v51 = (Class)objc_msgSend((id)objc_opt_self(), sel_blackColor);
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v11, *MEMORY[0x1E0CD0F60], v97);
  v57 = v50;
  v58 = v51;
  v59 = v99;
  PKInk.init(_:color:)();
  v60 = 2.0;
  if ((value & 1) == 0)
    v60 = v47;
  v61 = v60 / sqrt(v49) / 10.0 + 2.1;
  v62 = PKDrawing.strokes.getter();
  MEMORY[0x1E0C80A78](v62, v63);
  *((double *)&v90 - 2) = v61;
  *(&v90 - 1) = (uint64_t)v59;
  v64 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:), (uint64_t)(&v90 - 4), v62);
  swift_bridgeObjectRelease();
  aBlock = v64;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PKStroke] and conformance [A], &demangling cache variable for type metadata for [PKStroke], MEMORY[0x1E0DEAF38]);
  PKDrawing.init<A>(strokes:)();
  v65 = swift_allocObject();
  *(_QWORD *)(v65 + 16) = 0;
  PKDrawing._bridgeToObjectiveC()(v66);
  v68 = v67;
  PKDrawing.bounds.getter();
  v70 = v69;
  v72 = v71;
  v74 = v73;
  v76 = v75;
  v105 = partial apply for closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:);
  v106 = v65;
  aBlock = MEMORY[0x1E0C809B0];
  v102 = 1107296256;
  v103 = thunk for @escaping @callee_guaranteed (@guaranteed UIImage?) -> ();
  v104 = &block_descriptor_9_0;
  v77 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v78 = v91;
  objc_msgSend(v91, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v68, v77, v70, v72, v74, v76, v49);
  _Block_release(v77);

  v79 = *(void (**)(char *, uint64_t))(v92 + 8);
  v79(v25, v20);
  v79(v29, v20);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v59, v94);
  swift_beginAccess();
  v56 = *(id *)(v65 + 16);
  v80 = v56;
  swift_release();
LABEL_23:
  v89 = (objc_class *)v56;
  result.value.super.isa = v89;
  result.is_nil = v27;
  return result;
}

uint64_t closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  void (*v32)(_QWORD *, _QWORD);
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  _QWORD v38[2];
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD v52[7];

  v46 = a2;
  v45 = a1;
  v38[0] = type metadata accessor for PKStrokePoint();
  v2 = *(_QWORD *)(v38[0] - 8);
  v4 = MEMORY[0x1E0C80A78](v38[0], v3);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v38 - v8;
  v43 = type metadata accessor for PKInk();
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v10);
  v44 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v12, v13);
  v38[1] = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PKStrokePath();
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD0FB0];
  v39 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v41 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)v38 - v22;
  MEMORY[0x1E0C80A78](v21, v24);
  v40 = (char *)v38 - v25;
  PKStroke.path.getter();
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath, v16, MEMORY[0x1E0CD0FC0]);
  v27 = dispatch thunk of Collection.count.getter();
  v28 = MEMORY[0x1E0DEE9D8];
  v50 = v23;
  if (!v27)
  {
LABEL_9:
    v35 = v39;
    v36 = *(void (**)(char *, uint64_t))(v39 + 8);
    v36(v50, v15);
    v52[0] = v28;
    static Date.now.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStrokePoint]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PKStrokePoint] and conformance [A], &demangling cache variable for type metadata for [PKStrokePoint], MEMORY[0x1E0DEAF38]);
    v37 = v40;
    PKStrokePath.init<A>(controlPoints:creationDate:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v44, v45, v43);
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v41, v37, v15);
    v52[0] = 0x3FF0000000000000;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = 0x3FF0000000000000;
    v52[4] = 0;
    v52[5] = 0;
    PKStroke.init(ink:path:transform:mask:)();
    return ((uint64_t (*)(char *, uint64_t))v36)(v37, v15);
  }
  v29 = v27;
  v51 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 & ~(v27 >> 63), 0);
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v29 & 0x8000000000000000) == 0)
  {
    v48 = v9;
    v49 = v15;
    v31 = v38[0];
    v47 = v26;
    do
    {
      v32 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v2 + 16))(v6);
      v32(v52, 0);
      PKStrokePoint.location.getter();
      PKStrokePoint.timeOffset.getter();
      PKStrokePoint.opacity.getter();
      PKStrokePoint.force.getter();
      PKStrokePoint.azimuth.getter();
      PKStrokePoint.altitude.getter();
      PKStrokePoint.init(location:timeOffset:size:opacity:force:azimuth:altitude:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v31);
      v28 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v51;
      }
      v34 = *(_QWORD *)(v28 + 16);
      v33 = *(_QWORD *)(v28 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v28 = v51;
      }
      *(_QWORD *)(v28 + 16) = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v28+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v34, v48, v31);
      v51 = v28;
      v15 = v49;
      dispatch thunk of Collection.formIndex(after:)();
      --v29;
    }
    while (v29);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;

  swift_beginAccess();
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  v5 = a1;

}

void thunk for @escaping @callee_guaranteed (@guaranteed UIImage?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1, void *a2, const CGPath *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  CGContext *v21;
  CGContext *v22;
  CGFloat v23;
  CGFloat MaxY;
  CGContext *v25;
  id v26;
  uint64_t v28;
  CGRect v29;
  CGRect v30;

  v16 = type metadata accessor for CGPathFillRule();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextScaleCTM(v21, a4, -a4);

  v22 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v29.origin.x = a5;
  v29.origin.y = a6;
  v29.size.width = a7;
  v29.size.height = a8;
  v23 = -CGRectGetMinX(v29);
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = a7;
  v30.size.height = a8;
  MaxY = CGRectGetMaxY(v30);
  CGContextTranslateCTM(v22, v23, -MaxY);

  objc_msgSend(a2, sel_set);
  v25 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextAddPath(v25, a3);

  v26 = objc_msgSend(a1, sel_CGContext);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, *MEMORY[0x1E0C9B8A0], v16);
  CGContextRef.fillPath(using:)();

  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

id SignatureItem.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SignatureItem.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SignatureItem.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureItem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id protocol witness for RawRepresentable.init(rawValue:) in conformance SignatureItem@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = specialized SignatureItem.__allocating_init(rawValue:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SignatureItem(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36F8]), sel_initRequiringSecureCoding_, 1);
  SignatureItem.encode(with:)((NSCoder)v2);
  v3 = objc_msgSend(v2, sel_encodedData);
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  objc_msgSend(v2, sel_finishEncoding);
  *a1 = v4;
  a1[1] = v6;
}

id protocol witness for CRType.copy(renamingReferences:) in conformance SignatureItem@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance SignatureItem()
{
  type metadata accessor for SignatureItem();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (uint64_t (*)(uint64_t))type metadata accessor for SignatureItem, (uint64_t)&protocol conformance descriptor for SignatureItem);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SignatureItem and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for SignatureItem, MEMORY[0x1E0DEFD00]);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance SignatureItem(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for SignatureItem);
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for SignatureItem, a2);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance SignatureItem(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for SignatureItem);
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for SignatureItem, a2);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance SignatureItem(uint64_t a1)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for SignatureItem, a1);
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for SignatureItem, a1);
  return CRValue<>.minEncodingVersion.getter();
}

void specialized SignatureItem.SignaturePathDecoder.nextItem<A>()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 4))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1DDBFF1A4);
}

uint64_t closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t result;
  float v16;
  float *v17;
  float **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = *(float *)a1;
  v2 = MEMORY[0x1E0DEAC20];
  v3 = MEMORY[0x1E0CB1AA8];
  v19 = MEMORY[0x1E0DEAC20];
  v20 = MEMORY[0x1E0CB1AA8];
  v17 = &v16;
  v18 = &v17;
  __swift_project_boxed_opaque_existential_1(&v17, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  switch(*(_DWORD *)a1)
  {
    case 0:
    case 1:
      LODWORD(v16) = 1;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v4 = **(double **)(a1 + 8);
      v16 = v4;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v5 = *(double *)(*(_QWORD *)(a1 + 8) + 8);
      goto LABEL_6;
    case 2:
      LODWORD(v16) = 2;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v6 = **(double **)(a1 + 8);
      v16 = v6;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v7 = *(double *)(*(_QWORD *)(a1 + 8) + 8);
      v16 = v7;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v8 = *(double *)(*(_QWORD *)(a1 + 8) + 16);
      v16 = v8;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v5 = *(double *)(*(_QWORD *)(a1 + 8) + 24);
      goto LABEL_6;
    case 3:
      LODWORD(v16) = 3;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v9 = **(double **)(a1 + 8);
      v16 = v9;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v10 = *(double *)(*(_QWORD *)(a1 + 8) + 8);
      v16 = v10;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v11 = *(double *)(*(_QWORD *)(a1 + 8) + 16);
      v16 = v11;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v12 = *(double *)(*(_QWORD *)(a1 + 8) + 24);
      v16 = v12;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v13 = *(double *)(*(_QWORD *)(a1 + 8) + 32);
      v16 = v13;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v5 = *(double *)(*(_QWORD *)(a1 + 8) + 40);
LABEL_6:
      v14 = v5;
      v16 = v14;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
      goto LABEL_7;
    case 4:
      v16 = 0.0;
      v19 = v2;
      v20 = v3;
      v17 = &v16;
      v18 = &v17;
LABEL_7:
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      break;
    default:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t specialized static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(void *a1, char a2)
{
  const CGPath *v3;
  uint64_t v4;
  double MinY;
  const CGPath *v6;
  const CGPath *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v13[6];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  double v19;
  CGRect BoundingBox;
  CGRect v21;
  CGRect v22;

  if (!a1)
    return 0;
  v3 = a1;
  BoundingBox = CGPathGetBoundingBox(v3);
  if (CGRectIsNull(BoundingBox))
  {

    return 0;
  }
  v14 = xmmword_1DDF36D20;
  v21 = CGPathGetBoundingBox(v3);
  MinY = CGRectGetMinY(v21);
  v22 = CGPathGetBoundingBox(v3);
  v16 = 0;
  v17 = 0;
  v15 = 0x3FF0000000000000;
  v18 = xmmword_1DDF325E0;
  v19 = MinY + CGRectGetMaxY(v22);
  if ((a2 & 1) != 0)
    v6 = (const CGPath *)CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
  else
    v6 = v3;
  v7 = v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = &v14;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:);
  *(_QWORD *)(v9 + 24) = v8;
  v13[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v13[5] = v9;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  v13[3] = &block_descriptor_19;
  v10 = _Block_copy(v13);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v7, v10);

  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v4 = v14;
    swift_release();
    return v4;
  }
  __break(1u);
  return result;
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

void specialized static SignatureItem.signaturePath(from:)(uint64_t a1, unint64_t a2)
{
  CGPathCreateMutable();
  outlined copy of Data._Representation(a1, a2);
  __asm { BR              X9 }
}

uint64_t sub_1DDBFFA50()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;

  if ((v23 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x1DDC0094CLL);
  }
  if (v4 >= v22)
    goto LABEL_17;
  if (!v5)
  {
    v27 = v1;
    v28 = BYTE2(v1);
    v29 = BYTE3(v1);
    v30 = v21;
    v31 = BYTE5(v1);
    v32 = BYTE6(v1);
    v33 = HIBYTE(v1);
    v34 = v0;
    v35 = BYTE2(v0);
    v36 = BYTE3(v0);
    v37 = v18;
    v38 = v19;
    if (*(_DWORD *)((char *)&v27 + v3) <= 4u)
      goto LABEL_15;
    goto LABEL_17;
  }
  if (v5 == 1)
  {
    if (v20 >= v25)
    {
      swift_retain();
      v7 = __DataStorage._bytes.getter();
      if (v7)
      {
        v8 = v7;
        v9 = __DataStorage._offset.getter();
        v10 = v25 - v9;
        if (!__OFSUB__(v25, v9))
        {
          __DataStorage._length.getter();
          v11 = *(_DWORD *)(v8 + v10 + v3);
          goto LABEL_14;
        }
LABEL_22:
        __break(1u);
        JUMPOUT(0x1DDC0095CLL);
      }
      __DataStorage._length.getter();
      __break(1u);
LABEL_24:
      __DataStorage._length.getter();
      __break(1u);
      JUMPOUT(0x1DDC00A34);
    }
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = *(_QWORD *)(v1 + 16);
  outlined copy of Data._Representation(v1, v0);
  swift_retain();
  swift_retain();
  v13 = __DataStorage._bytes.getter();
  if (!v13)
    goto LABEL_24;
  v14 = v13;
  v15 = __DataStorage._offset.getter();
  v16 = v12 - v15;
  if (__OFSUB__(v12, v15))
    goto LABEL_21;
  __DataStorage._length.getter();
  v11 = *(_DWORD *)(v14 + v16 + v3);
  swift_release();
  swift_release();
LABEL_14:
  outlined consume of Data._Representation(v1, v0);
  v2 = v26;
  if (v11 <= 4)
  {
LABEL_15:
    if (!__OFADD__(v4, 4))
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x1DDC00944);
  }
LABEL_17:
  outlined consume of Data._Representation(*(_QWORD *)(v6 - 136), *(_QWORD *)(v6 - 128));
  return v24;
}

id specialized SignatureItem.__allocating_init(rawValue:)(uint64_t a1, unint64_t a2)
{
  id v4;
  id v5;
  id v7;
  id v8;
  id v9;

  v4 = objc_allocWithZone(MEMORY[0x1E0CB3710]);
  v5 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
  v7 = v5;
  if (v5)
  {
    objc_allocWithZone((Class)type metadata accessor for SignatureItem());
    v8 = v7;
    v7 = SignatureItem.init(coder:)(v8);
    outlined consume of Data._Representation(a1, a2);
    v9 = v7;

    if (v7)
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
  }
  return v7;
}

uint64_t sub_1DDC00C48()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1)
{
  uint64_t v1;

  return closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(a1, *(void **)(v1 + 56), *(const CGPath **)(v1 + 64), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

uint64_t sub_1DDC00C88()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1DDC00CD0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1)
{
  uint64_t v1;

  closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(a1, v1);
}

uint64_t base witness table accessor for CRType in SignatureItem()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (uint64_t (*)(uint64_t))type metadata accessor for SignatureItem, (uint64_t)&protocol conformance descriptor for SignatureItem);
}

uint64_t base witness table accessor for CRCodable in SignatureItem()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (uint64_t (*)(uint64_t))type metadata accessor for SignatureItem, (uint64_t)&protocol conformance descriptor for SignatureItem);
}

uint64_t ObjC metadata update function for SignatureItem()
{
  return type metadata accessor for SignatureItem();
}

void type metadata completion function for SignatureItem()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRAsset?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRAsset?(319, &lazy cache variable for type metadata for PKDrawing?, (void (*)(uint64_t))MEMORY[0x1E0CD1100]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SignatureItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static SignatureItem.supportsSecureCoding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SignatureItem.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of SignatureItem.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SignatureItem.__allocating_init(rawValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of SignatureItem.rawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SignatureItem.size.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xD8))(a1, a2, a3 & 1);
}

uint64_t outlined init with copy of PaperDocument.PDFPageAndPaperPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDC00F28()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(uint64_t a1)
{
  return closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(a1);
}

uint64_t sub_1DDC00F40()
{
  return swift_deallocObject();
}

double specialized Sequence.reduce<A>(_:_:)(void (*a1)(_QWORD *__return_ptr, double *, char *), uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *__return_ptr, double *, char *);
  char *v40;
  _QWORD v41[4];
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;

  v35 = a2;
  v39 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v36 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v37 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a3;
  v43 = a4;
  v44 = a5;
  v45 = a6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v46, v19, v26);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v29 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D11D70]);
  v40 = v28;
  v46 = v24;
  dispatch thunk of IteratorProtocol.next()();
  v30 = v36;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  if (v31(v18, 1, v11) != 1)
  {
    v38 = v29;
    v32 = v30;
    v33 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    do
    {
      v33(v14, v18, v11);
      v39(v41, &v42, v14);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v11);
      if (v6)
        break;
      a3 = *(double *)v41;
      v42 = *(double *)v41;
      v43 = *(double *)&v41[1];
      v44 = *(double *)&v41[2];
      v45 = *(double *)&v41[3];
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v31(v18, 1, v11) != 1);
  }
  (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v46);
  return a3;
}

{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *__return_ptr, double *, char *);
  char *v40;
  _QWORD v41[4];
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;

  v35 = a2;
  v39 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v36 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v37 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a3;
  v43 = a4;
  v44 = a5;
  v45 = a6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v46, v19, v26);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11810]);
  dispatch thunk of Sequence.makeIterator()();
  v29 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D117E0]);
  v40 = v28;
  v46 = v24;
  dispatch thunk of IteratorProtocol.next()();
  v30 = v36;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  if (v31(v18, 1, v11) != 1)
  {
    v38 = v29;
    v32 = v30;
    v33 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    do
    {
      v33(v14, v18, v11);
      v39(v41, &v42, v14);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v11);
      if (v6)
        break;
      a3 = *(double *)v41;
      v42 = *(double *)v41;
      v43 = *(double *)&v41[1];
      v44 = *(double *)&v41[2];
      v45 = *(double *)&v41[3];
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v31(v18, 1, v11) != 1);
  }
  (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v46);
  return a3;
}

double specialized Sequence.reduce<A>(_:_:)(void (*a1)(_QWORD *__return_ptr, double *, id *), double a2, double a3, double a4, double a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  double v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[4];
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;

  v10 = a2;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  if (a7 >> 62)
    goto LABEL_14;
  v11 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    v12 = 4;
    while (1)
    {
      v13 = (a7 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v12 - 4, a7) : *(id *)(a7 + 8 * v12);
      v14 = v13;
      v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1))
        break;
      v22 = v13;
      a1(v17, &v18, &v22);
      if (v7)
      {
        swift_bridgeObjectRelease();

        return v10;
      }

      v10 = *(double *)v17;
      v18 = *(double *)v17;
      v19 = *(double *)&v17[1];
      v20 = *(double *)&v17[2];
      v21 = *(double *)&v17[3];
      ++v12;
      if (v15 == v11)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(void (*a1)(_QWORD *__return_ptr, double *, char *), double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  int64_t v27;
  unint64_t v28;
  unint64_t i;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD v35[4];
  double v36;
  double v37;
  double v38;
  double v39;
  void (*v40)(_QWORD *__return_ptr, double *, char *);

  v40 = a1;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v33 - v20;
  v36 = a2;
  v37 = a3;
  v38 = a4;
  v39 = a5;
  v22 = *(_QWORD *)(a7 + 56);
  v33 = a7 + 56;
  v23 = 1 << *(_BYTE *)(a7 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v34 = (unint64_t)(v23 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v27 = 0;
  if (!v25)
    goto LABEL_5;
LABEL_4:
  v28 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  for (i = v28 | (v27 << 6); ; i = __clz(__rbit64(v31)) + (v27 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v21, *(_QWORD *)(a7 + 48) + *(_QWORD *)(v14 + 72) * i, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v21, v13);
    v40(v35, &v36, v17);
    result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    if (v7)
      return swift_release();
    v36 = *(double *)v35;
    v37 = *(double *)&v35[1];
    v38 = *(double *)&v35[2];
    v39 = *(double *)&v35[3];
    if (v25)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v27++, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v34)
      return swift_release();
    v31 = *(_QWORD *)(v33 + 8 * v27);
    if (!v31)
      break;
LABEL_17:
    v25 = (v31 - 1) & v31;
  }
  v32 = v27 + 1;
  if (v27 + 1 >= v34)
    return swift_release();
  v31 = *(_QWORD *)(v33 + 8 * v32);
  if (v31)
    goto LABEL_16;
  v32 = v27 + 2;
  if (v27 + 2 >= v34)
    return swift_release();
  v31 = *(_QWORD *)(v33 + 8 * v32);
  if (v31)
    goto LABEL_16;
  v32 = v27 + 3;
  if (v27 + 3 >= v34)
    return swift_release();
  v31 = *(_QWORD *)(v33 + 8 * v32);
  if (v31)
    goto LABEL_16;
  v32 = v27 + 4;
  if (v27 + 4 >= v34)
    return swift_release();
  v31 = *(_QWORD *)(v33 + 8 * v32);
  if (v31)
  {
LABEL_16:
    v27 = v32;
    goto LABEL_17;
  }
  while (1)
  {
    v27 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v27 >= v34)
      return swift_release();
    v31 = *(_QWORD *)(v33 + 8 * v27);
    ++v32;
    if (v31)
      goto LABEL_17;
  }
LABEL_27:
  __break(1u);
  return result;
}

double Capsule<>.contentBounds(includeDrawing:)(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double x;
  double y;
  double width;
  double height;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double (*v68)(__int128 *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  CGFloat v71;
  double v72;
  CGFloat v73;
  double v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[3];
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  v2 = v1;
  LODWORD(v89) = a1;
  v3 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v3, v4);
  v84 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v93 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v90 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v92 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  *(_QWORD *)&v95 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v12);
  v87 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v85 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91, v14);
  v94 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v16 = *(v86 - 1);
  MEMORY[0x1E0C80A78](v86, v17);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  if ((v89 & 1) != 0)
  {
    v80 = v20;
    v81 = v23;
    v82 = v19;
    v83 = v16;
    v89 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Capsule<>.subscript.getter();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v36 = v93;
      v37 = v92;
      v38 = v91;
      v39 = v88;
    }
    else
    {
      v79 = v29;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v89, v27, v28);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v40 = (uint64_t)v81;
      v41 = v28;
      Ref.subscript.getter();
      v42 = v83;
      v43 = v82;
      v44 = v86;
      v45 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v83 + 16))(v82, v40 + *(int *)(v80 + 20), v86);
      MEMORY[0x1E0C80A78](v45, v46);
      *(&v79 - 2) = v2;
      v47 = specialized Sequence.reduce<A>(_:_:)((void (*)(_QWORD *__return_ptr, double *, char *))partial apply for specialized closure #1 in PKDrawingStruct.bounds<A>(in:), (uint64_t)(&v79 - 4), x, y, width, height);
      v49 = v48;
      v51 = v50;
      v53 = v52;
      (*(void (**)(char *, _QWORD *))(v42 + 8))(v43, v44);
      outlined destroy of PKStrokeProperties(v40, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      v54 = CGRect.isFinite.getter(v47, v49, v51, v53);
      v36 = v93;
      v38 = v91;
      v39 = v88;
      if (v54)
      {
        v106.origin.x = x;
        v106.origin.y = y;
        v106.size.width = width;
        v106.size.height = height;
        v110.origin.x = v47;
        v110.origin.y = v49;
        v110.size.width = v51;
        v110.size.height = v53;
        v107 = CGRectUnion(v106, v110);
        x = v107.origin.x;
        y = v107.origin.y;
        width = v107.size.width;
        height = v107.size.height;
      }
      (*(void (**)(char *, uint64_t))(v79 + 8))(v89, v41);
      v37 = v92;
    }
  }
  else
  {
    v37 = v92;
    v38 = v91;
    v39 = v88;
    v36 = v93;
  }
  swift_getKeyPath();
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v56 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v57 = v87;
  v89 = (char *)v55;
  v88 = v56;
  Capsule<>.subscript.getter();
  swift_release();
  v58 = v94;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v39);
  CROrderedSet.Iterator.next()();
  v59 = *(_QWORD **)(v36 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v59)(v37, 1, v6) != 1)
  {
    v87 = *(char **)(v36 + 32);
    v60 = (uint64_t)v84;
    v61 = v90;
    v86 = v59;
    do
    {
      ((void (*)(char *, char *, uint64_t))v87)(v61, v37, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      SharedTagged_9.subscript.getter();
      v63 = v100;
      v62 = v101;
      __swift_project_boxed_opaque_existential_1(v99, v100);
      Capsule<>.root.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      v95 = v96;
      v64 = v3;
      v65 = v2;
      v66 = v97;
      v67 = v98;
      outlined destroy of PKStrokeProperties(v60, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
      v102 = v95;
      v103 = v66;
      v104 = v67;
      v2 = v65;
      v3 = v64;
      v61 = v90;
      v105 = 0;
      v68 = *(double (**)(__int128 *, uint64_t, uint64_t))(v62 + 112);
      v38 = v91;
      v69 = v63;
      v58 = v94;
      v70 = v62;
      v37 = v92;
      v71 = v68(&v102, v69, v70);
      v73 = v72;
      v75 = v74;
      v77 = v76;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
      v108.origin.x = x;
      v108.origin.y = y;
      v108.size.width = width;
      v108.size.height = height;
      v111.origin.x = v71;
      v111.origin.y = v73;
      v111.size.width = v75;
      v111.size.height = v77;
      v109 = CGRectUnion(v108, v111);
      x = v109.origin.x;
      y = v109.origin.y;
      width = v109.size.width;
      height = v109.size.height;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v61, v6);
      CROrderedSet.Iterator.next()();
    }
    while (((unsigned int (*)(char *, uint64_t, uint64_t))v86)(v37, 1, v6) != 1);
  }
  (*(void (**)(char *, uint64_t))(v85 + 8))(v58, v38);
  return x;
}

uint64_t static CRDataStoreBundle<>.readPaper(_:url:)(uint64_t a1, uint64_t a2)
{
  uint64_t FileVersionPolicy;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, _QWORD, uint64_t);
  _QWORD v15[3];

  v15[2] = a2;
  v15[1] = a1;
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v3 = *(_QWORD *)(FileVersionPolicy - 8);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v7 = type metadata accessor for CRCodableVersion();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1DDF33AB0;
  v12 = v11 + v10;
  v13 = *(void (**)(unint64_t, _QWORD, uint64_t))(v8 + 104);
  v13(v12, *MEMORY[0x1E0D12370], v7);
  v13(v12 + v9, *MEMORY[0x1E0D12378], v7);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0D127E0], FileVersionPolicy);
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, FileVersionPolicy);
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for Paper.drawing : Paper()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Paper.drawing : Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t closure #1 in Capsule<>.transformContents(_:)(uint64_t a1, CGFloat *a2)
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  unsigned int v62;
  void (*v63)(CGAffineTransform *, _QWORD);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(CGAffineTransform *, _QWORD);
  CGRect *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CGFloat v91;
  void (*v92)(CGAffineTransform *, _QWORD);
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, _QWORD);
  void (*v96)(char *, _QWORD);
  _OWORD *v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unsigned int (*v143)(char *, uint64_t, uint64_t);
  CGAffineTransform v144;
  CGAffineTransform t2;
  CGAffineTransform t1;
  char v147[8];
  char v148[8];
  double v149;
  CGRect v150;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v119 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v120, v12);
  v118 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v122 = (uint64_t)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130, v22);
  v128 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v127 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v125 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126, v27);
  v124 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v137 = *(_QWORD *)(v123 - 8);
  MEMORY[0x1E0C80A78](v123, v29);
  v121 = (char *)&v103 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v134 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133, v31);
  v132 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v33, v34);
  v131 = (char *)&v103 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v36);
  v106 = (char *)&v103 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v104, v38);
  v105 = (char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v109 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136, v40);
  v135 = (char *)&v103 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v141 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v43);
  v111 = (char *)&v103 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v45, v46);
  v114 = (char *)&v103 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117, v48);
  v115 = (char *)&v103 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v50, v51);
  v110 = (char *)&v103 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v138 = *(v139 - 1);
  MEMORY[0x1E0C80A78](v139, v53);
  v55 = (char *)&v103 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = (unsigned int (*)(char *, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v113 = *((_QWORD *)v143 - 1);
  MEMORY[0x1E0C80A78](v143, v56);
  v142 = (char *)&v103 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v112 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v58 = v139;
  CROrderedSet.makeIterator()();
  v59 = v111;
  (*(void (**)(char *, _QWORD *))(v138 + 8))(v55, v58);
  v60 = v110;
  CROrderedSet.Iterator.next()();
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48);
  v62 = v61(v60, 1, v42);
  v149 = *(double *)&a1;
  if (v62 != 1)
  {
    v138 = *(_QWORD *)(v141 + 32);
    v140 = v42;
    v139 = v61;
    do
    {
      ((void (*)(char *, char *, uint64_t))v138)(v59, v60, v42);
      v63 = (void (*)(CGAffineTransform *, _QWORD))SharedTagged_9.subscript.modify();
      v64 = v59;
      v67 = *(_QWORD *)(v65 + 24);
      v66 = *(_QWORD *)(v65 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v65, v67);
      v68 = (void (*)(CGAffineTransform *, _QWORD))(*(uint64_t (**)(CGAffineTransform *, uint64_t, uint64_t))(v66 + 24))(&v144, v67, v66);
      v150 = *v69;
      t1.a = v3;
      t1.b = v4;
      t1.c = v5;
      t1.d = v6;
      t1.tx = v7;
      t1.ty = v8;
      *v69 = CGRectApplyAffineTransform(v150, &t1);
      v68(&v144, 0);
      v59 = v64;
      v63(&t2, 0);
      v42 = v140;
      (*(void (**)(char *, uint64_t))(v141 + 8))(v64, v140);
      CROrderedSet.Iterator.next()();
    }
    while (((unsigned int (*)(char *, uint64_t, uint64_t))v139)(v60, 1, v42) != 1);
  }
  (*(void (**)(char *, unsigned int (*)(char *, uint64_t, uint64_t)))(v113 + 8))(v142, v143);
  swift_getKeyPath();
  v70 = (uint64_t)v114;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v71 = v116;
  v72 = v117;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v70, 1, v117) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?(v70, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v115, v70, v72);
  v74 = (uint64_t)v105;
  Ref.subscript.getter();
  v75 = v107;
  v76 = v106;
  v77 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v74 + *(int *)(v104 + 20), v108);
  outlined destroy of PKStrokeProperties(v74, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
  v78 = v131;
  CROrderedSet.Iterator.next()();
  v79 = v133;
  v143 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48);
  if (v143(v78, 1, v133) != 1)
  {
    v142 = *(char **)(v134 + 32);
    ((void (*)(char *, char *, uint64_t))v142)(v132, v78, v79);
    while (1)
    {
      v83 = v124;
      Ref.subscript.getter();
      v84 = v128;
      v85 = v126;
      CRRegister.value.getter();
      v86 = v127;
      v87 = v130;
      SharedTagged_2.tagged1.getter();
      v88 = (uint64_t)v86;
      (*(void (**)(char *, uint64_t))(v129 + 8))(v84, v87);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v83, v85);
      v89 = v137;
      v90 = v123;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v88, 1, v123) == 1)
      {
        v80 = v132;
        v81 = v133;
        (*(void (**)(char *, uint64_t))(v134 + 8))(v132, v133);
        outlined destroy of StocksKitCurrencyCache.Provider?(v88, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
        v82 = v131;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v121, v88, v90);
        v91 = v149;
        v92 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
        specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(*(uint64_t *)&v91);
        v92(&t1, 0);
        Ref.subscript.getter();
        t1.a = v91;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        CRRegister.wrappedValue.getter();
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref, MEMORY[0x1E0D12A88]);
        v93 = (uint64_t)v119;
        v94 = (uint64_t)v118;
        while (1)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
          Ref.subscript.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
          CRRegister.wrappedValue.getter();
          outlined destroy of PKStrokeProperties(v94, type metadata accessor for PKStrokeInheritedProperties);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v93, 1, v17) == 1)
            break;
          (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
          (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v21, v93, v17);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v93, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        outlined destroy of PKStrokeProperties(v122, type metadata accessor for PKStrokeStruct);
        swift_release();
        v95 = (void (*)(char *, _QWORD))Ref.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
        v96 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
        v98 = v97;
        v99 = v97[1];
        v100 = v97[2];
        *(_OWORD *)&t1.a = *v97;
        *(_OWORD *)&t1.c = v99;
        *(_OWORD *)&t1.tx = v100;
        t2.a = v3;
        t2.b = v4;
        t2.c = v5;
        t2.d = v6;
        t2.tx = v7;
        t2.ty = v8;
        CGAffineTransformConcat(&v144, &t1, &t2);
        v101 = *(_OWORD *)&v144.c;
        v102 = *(_OWORD *)&v144.tx;
        *v98 = *(_OWORD *)&v144.a;
        v98[1] = v101;
        v98[2] = v102;
        v96(v147, 0);
        v95(v148, 0);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
        (*(void (**)(char *, uint64_t))(v137 + 8))(v121, v90);
        v80 = v132;
        v81 = v133;
        (*(void (**)(char *, uint64_t))(v134 + 8))(v132, v133);
        v82 = v131;
      }
      CROrderedSet.Iterator.next()();
      if (v143(v82, 1, v81) == 1)
        break;
      ((void (*)(char *, char *, uint64_t))v142)(v80, v82, v81);
    }
  }
  (*(void (**)(char *, uint64_t))(v109 + 8))(v135, v136);
  return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v115, v117);
}

void PaperKitCodingError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PaperKitCodingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int PaperKitCodingError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void one-time initialization function for allFileFormatVersions()
{
  allFileFormatVersions._rawValue = &outlined read-only object #0 of one-time initialization function for allFileFormatVersions;
}

uint64_t one-time initialization function for allReadableFileFormatVersions()
{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for allFileFormatVersions != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  result = specialized Array.append<A>(contentsOf:)(v0);
  allReadableFileFormatVersions._rawValue = &outlined read-only object #0 of one-time initialization function for allReadableFileFormatVersions;
  return result;
}

uint64_t static CRDataStoreBundle<>.canDisplayPaper(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);
  char v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v0 = type metadata accessor for CRCodableVersion();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DDF33AB0;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E0D12370], v0);
  v6(v5 + v2, *MEMORY[0x1E0D12378], v0);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  v7 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static CRDataStoreBundle<>.canDisplayPaperOnPreSydney(at:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v0 = type metadata accessor for CRCodableVersion();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1DDF32CF0;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104))(v3 + v2, *MEMORY[0x1E0D12370], v0);
  v4 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t static CRDataStoreBundle<>.writePaper(_:model:url:)()
{
  return static CRDataStoreBundle<>.writePaper(_:model:url:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v0 = type metadata accessor for CRCodableVersion();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DDF33AB0;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E0D12370], v0);
  v6(v5 + v2, *MEMORY[0x1E0D12378], v0);
  if (one-time initialization token for allFileFormatVersions != -1)
    swift_once();
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
  return swift_bridgeObjectRelease();
}

uint64_t static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t FileVersionPolicy;
  uint64_t v53;

  v49 = a4;
  v50 = a2;
  v45 = a3;
  v51 = a1;
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v4 = *(_QWORD *)(FileVersionPolicy - 8);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v46 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v35 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v16 = type metadata accessor for CRCodableVersion();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(unsigned __int8 *)(v17 + 80);
  v20 = (v19 + 32) & ~v19;
  v43 = v15;
  v39 = v19 | 7;
  v40 = v20 + 2 * v18;
  v21 = swift_allocObject();
  v38 = xmmword_1DDF33AB0;
  *(_OWORD *)(v21 + 16) = xmmword_1DDF33AB0;
  v42 = v20;
  v22 = v21 + v20;
  v23 = *(void (**)(uint64_t))(v17 + 104);
  v37 = *MEMORY[0x1E0D12370];
  v23(v21 + v20);
  v44 = v18;
  v36 = *MEMORY[0x1E0D12378];
  v41 = v16;
  v23(v22 + v18);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  v24 = FileVersionPolicy;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0D127E0], FileVersionPolicy);
  v25 = v53;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v24);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v27 = v14;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v24);
    swift_bridgeObjectRelease();
    v28 = v46;
    v29 = v48;
    Capsule.copy()();
    v30 = v47;
    v31 = *(void (**)(char *, uint64_t))(v47 + 8);
    v31(v14, v29);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v14, v28, v29);
    CRContext.assetManager.getter();
    Capsule.copyAssetsSync(to:)();
    swift_release();
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = v38;
    v33 = v41;
    v34 = v32 + v42;
    ((void (*)(uint64_t, _QWORD, uint64_t))v23)(v32 + v42, v37, v41);
    ((void (*)(uint64_t, _QWORD, uint64_t))v23)(v34 + v44, v36, v33);
    if (one-time initialization token for allFileFormatVersions != -1)
      swift_once();
    static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v31)(v27, v29);
  }
}

uint64_t static CRDataStoreBundle.canDisplayPaper(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);
  char v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v0 = type metadata accessor for CRCodableVersion();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DDF33AB0;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E0D12370], v0);
  v6(v5 + v2, *MEMORY[0x1E0D12378], v0);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  v7 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static CRDataStoreBundle.canDisplayPaperOnPreSydney(at:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v0 = type metadata accessor for CRCodableVersion();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1DDF32CF0;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104))(v3 + v2, *MEMORY[0x1E0D12370], v0);
  v4 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t static CRDataStoreBundle.paperBundle(_:sync:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, _QWORD, uint64_t);
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v27;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Capsule();
  v11 = type metadata accessor for Optional();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v27 - v15, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v16 = type metadata accessor for CRCodableVersion();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1DDF33AB0;
  v21 = v20 + v19;
  v22 = *(void (**)(unint64_t, _QWORD, uint64_t))(v17 + 104);
  v22(v21, *MEMORY[0x1E0D12370], v16);
  v22(v21 + v18, *MEMORY[0x1E0D12378], v16);
  v23 = one-time initialization token for allReadableFileFormatVersions;
  v24 = a1;
  if (v23 != -1)
    swift_once();
  v25 = one-time initialization token for allFileFormatVersions;
  swift_bridgeObjectRetain();
  if (v25 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return CRDataStoreBundle.__allocating_init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)();
}

uint64_t static CRDataStoreBundle.readPaper(_:url:)(uint64_t a1, uint64_t a2)
{
  uint64_t FileVersionPolicy;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, _QWORD, uint64_t);
  _QWORD v15[3];

  v15[2] = a2;
  v15[1] = a1;
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v3 = *(_QWORD *)(FileVersionPolicy - 8);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v7 = type metadata accessor for CRCodableVersion();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1DDF33AB0;
  v12 = v11 + v10;
  v13 = *(void (**)(unint64_t, _QWORD, uint64_t))(v8 + 104);
  v13(v12, *MEMORY[0x1E0D12370], v7);
  v13(v12 + v9, *MEMORY[0x1E0D12378], v7);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0D127E0], FileVersionPolicy);
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, FileVersionPolicy);
  return swift_bridgeObjectRelease();
}

uint64_t static CRDataStoreBundle.writePaper(_:model:url:)()
{
  return static CRDataStoreBundle<>.writePaper(_:model:url:)();
}

uint64_t static CRDataStoreBundle.copyPaper(from:fromContext:to:toContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static CRDataStoreBundle.copyPaper(from:fromContext:to:toContext:eliminateMetadata:)(a1, a2, a3, a4, 1);
}

uint64_t static CRDataStoreBundle.copyPaper(from:fromContext:to:toContext:eliminateMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  _QWORD v19[2];
  int v20;

  v20 = a5;
  v19[1] = a4;
  v9 = type metadata accessor for Capsule();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v19 - v16;
  result = static CRDataStoreBundle.readPaper(_:url:)(a2, a1);
  if (!v5)
  {
    v19[0] = a3;
    if ((v20 & 1) != 0)
    {
      Capsule.copy()();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v13, v9);
    }
    CRContext.assetManager.getter();
    Capsule.copyAssetsSync(to:)();
    swift_release();
    static CRDataStoreBundle<>.writePaper(_:model:url:)();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  }
  return result;
}

uint64_t static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void (*v37)(uint64_t, _QWORD, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _BYTE *v41;
  _BYTE *v42;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MinY;
  CGAffineTransform *Translation;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  void (*v55)(_BYTE *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  _BYTE v69[4];
  unsigned int v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  CGAffineTransform v96;
  CGAffineTransform v97;
  uint64_t FileVersionPolicy;
  CGRect v99;

  v87 = a5;
  v91 = a4;
  v86 = a3;
  v92 = a2;
  v93 = a1;
  v73 = type metadata accessor for CRKeyPath();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v6);
  v71 = &v69[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v78 = &v69[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11, v12);
  v74 = &v69[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for UUID();
  v79 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v14);
  v75 = &v69[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v95 = *(_QWORD *)(FileVersionPolicy - 8);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v16);
  v18 = &v69[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v90 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v19);
  v77 = &v69[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21, v22);
  v88 = &v69[-v23];
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = &v69[-v26];
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v29 = type metadata accessor for CRCodableVersion();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 72);
  v32 = *(unsigned __int8 *)(v30 + 80);
  v33 = (v32 + 32) & ~v32;
  v84 = v28;
  v82 = v33 + 2 * v31;
  v81 = v32 | 7;
  v34 = swift_allocObject();
  v80 = xmmword_1DDF33AB0;
  *(_OWORD *)(v34 + 16) = xmmword_1DDF33AB0;
  v83 = v33;
  v35 = v34 + v33;
  v36 = *MEMORY[0x1E0D12370];
  v37 = *(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104);
  v37(v35, *MEMORY[0x1E0D12370], v29);
  v85 = v31;
  v38 = v35 + v31;
  v39 = v29;
  v40 = *MEMORY[0x1E0D12378];
  v37(v38, *MEMORY[0x1E0D12378], v39);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v95 + 104))(v18, *MEMORY[0x1E0D127E0], FileVersionPolicy);
  v41 = v94;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  if (!v41)
  {
    v70 = v40;
    LODWORD(v92) = v36;
    v93 = v5;
    v94 = v27;
    (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v18, FileVersionPolicy);
    swift_bridgeObjectRelease();
    if ((v87 & 1) != 0)
    {
      v42 = v94;
      v99.origin.x = Capsule<>.contentBounds(includeDrawing:)(1);
      x = v99.origin.x;
      y = v99.origin.y;
      width = v99.size.width;
      height = v99.size.height;
      MinY = CGRectGetMinY(v99);
      Translation = CGAffineTransformMakeTranslation(&v96, 0.0, -MinY);
      v97 = v96;
      MEMORY[0x1E0C80A78](Translation, v49);
      *(_QWORD *)&v69[-16] = &v97;
      v50 = v89;
      v51 = Capsule.callAsFunction<A>(_:)();
      MEMORY[0x1E0C80A78](v51, v52);
      *(CGFloat *)&v69[-32] = x;
      *(CGFloat *)&v69[-24] = y;
      *(CGFloat *)&v69[-16] = width;
      *(CGFloat *)&v69[-8] = height;
      Capsule.callAsFunction<A>(_:)();
    }
    else
    {
      v50 = v89;
      v42 = v94;
    }
    v53 = v88;
    Capsule.copy()();
    v54 = v90;
    v55 = *(void (**)(_BYTE *, uint64_t))(v90 + 8);
    v55(v42, v50);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v42, v53, v50);
    CRContext.assetManager.getter();
    Capsule.copyAssetsSync(to:)();
    swift_release();
    v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = v80;
    v57 = v56 + v83;
    v37(v56 + v83, v92, v39);
    v37(v57 + v85, v70, v39);
    if (one-time initialization token for allFileFormatVersions != -1)
      swift_once();
    static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
    swift_bridgeObjectRelease();
    v59 = v77;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v90 + 16))(v77, v42, v50);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v60 = (uint64_t)v78;
    Capsule<>.subscript.getter();
    swift_release();
    v55(v59, v50);
    v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    v62 = *(_QWORD *)(v61 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v60, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v63 = (uint64_t)v74;
      v64 = v76;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v74, 1, 1, v76);
      v65 = v75;
    }
    else
    {
      v66 = v60;
      v67 = v71;
      Ref.id.getter();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v66, v61);
      v63 = (uint64_t)v74;
      CRKeyPath.uuid.getter();
      (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v67, v73);
      v64 = v76;
      v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v63, 1, v76);
      v65 = v75;
      if (v68 != 1)
      {
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v79 + 32))(v75, v63, v64);
        goto LABEL_17;
      }
    }
    UUID.init()();
    outlined destroy of StocksKitCurrencyCache.Provider?(v63, &demangling cache variable for type metadata for UUID?);
LABEL_17:
    v5 = UUID.uuidString.getter();
    (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v65, v64);
    v55(v94, v50);
    return v5;
  }
  (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v18, FileVersionPolicy);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t closure #1 in static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)(double a1, double a2, double a3, double a4)
{
  CGFloat Height;
  uint64_t (*v5)(_BYTE *, _QWORD);
  void (*v6)(uint64_t *, _QWORD);
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[32];

  Height = CGRectGetHeight(*(CGRect *)&a1);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v5 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v6 = (void (*)(uint64_t *, _QWORD))CRRegister.wrappedValue.modify();
  *(CGFloat *)(v7 + 24) = Height;
  v6(&v9, 0);
  return v5(v10, 0);
}

uint64_t Capsule<>.init(_:fromPDF:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  void *v17;

  v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static CRKeyPath.unique.getter();
  v16 = a2;
  v17 = a1;
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.init(id:initClosure:)();

  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(a3, v12, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, v8);
}

uint64_t closure #1 in Capsule<>.init(_:fromPDF:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[2];

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a2, v6, v13);
  swift_retain();
  v16 = CRContext.assetManager.getter();
  specialized PaperDocument.init<A>(url:in:assetManager:)((uint64_t)v10, a1, v16, (uint64_t)v15);
  v17 = type metadata accessor for PaperDocument(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17) != 1)
    return outlined init with take of PKStrokeStruct((uint64_t)v15, a3, type metadata accessor for PaperDocument);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for PaperDocument?);
  if (one-time initialization token for logger != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)logger);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1DDB0F000, v19, v20, "Could not load PDF.", v21, 2u);
    MEMORY[0x1DF0E6558](v21, -1, -1);
  }

  v22 = type metadata accessor for CRCodingError();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
  swift_allocError();
  *v23 = 0xD000000000000013;
  v23[1] = 0x80000001DDF51070;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v23, *MEMORY[0x1E0D11EF8], v22);
  return swift_willThrow();
}

uint64_t Capsule<>.exportToPDF(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[12] = a1;
  v2[13] = v1;
  type metadata accessor for PaperDocument(0);
  v2[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 112);
  v4 = *(void **)(*v1 + 96);
  v6 = *v1;
  swift_task_dealloc();

  outlined destroy of PKStrokeProperties(v3, type metadata accessor for PaperDocument);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
}

uint64_t Capsule<>.exportToPDF(_:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  char *v5;

  v1 = *(void **)(v0 + 96);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  v5 = (char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
     + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  v2 = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v3;
  *v3 = v0;
  v3[1] = Capsule<>.exportToPDF(_:);
  return ((uint64_t (*)(void *, _QWORD, uint64_t))v5)(v1, *(_QWORD *)(v0 + 104), v0 + 16);
}

uint64_t Capsule<>.write(_:toPDF:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  type metadata accessor for PaperDocument(0);
  v3[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Capsule<>.write(_:toPDF:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  char *v5;

  v1 = *(void **)(v0 + 96);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  v5 = (char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
     + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  v2 = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v3;
  *v3 = v0;
  v3[1] = Capsule<>.write(_:toPDF:);
  return ((uint64_t (*)(void *, _QWORD, uint64_t))v5)(v1, *(_QWORD *)(v0 + 112), v0 + 16);
}

uint64_t Capsule<>.write(_:toPDF:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3 = *(void **)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc();

  outlined destroy of PKStrokeProperties(v2, type metadata accessor for PaperDocument);
  return swift_task_switch();
}

uint64_t Capsule<>.write(_:toPDF:)@<X0>(NSURL *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  Class isa;

  v2 = *(void **)(v1 + 136);
  URL._bridgeToObjectiveC()(a1);
  v4 = v3;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for PDFDocumentWriteOption(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_writeToURL_withOptions_, v4, isa);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t specialized PaperDocument.newPDFDocument<A>(use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[49] = a3;
  v4[50] = v3;
  v4[47] = a1;
  v4[48] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  v4[51] = v5;
  v4[52] = *(_QWORD *)(v5 - 8);
  v4[53] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v4[56] = v6;
  v4[57] = *(_QWORD *)(v6 - 8);
  v4[58] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  v4[59] = swift_task_alloc();
  v4[60] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  v4[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = swift_task_alloc();
  v4[67] = swift_task_alloc();
  v7 = type metadata accessor for PageId(0);
  v4[68] = v7;
  v4[69] = *(_QWORD *)(v7 - 8);
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  v4[72] = swift_task_alloc();
  v8 = type metadata accessor for PDFPageID();
  v4[73] = v8;
  v4[74] = *(_QWORD *)(v8 - 8);
  v4[75] = swift_task_alloc();
  v4[76] = swift_task_alloc();
  v4[77] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
  v4[78] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  v4[79] = swift_task_alloc();
  v4[80] = swift_task_alloc();
  v4[81] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v4[82] = v9;
  v4[83] = *(_QWORD *)(v9 - 8);
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  v4[88] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  v4[89] = swift_task_alloc();
  v4[90] = swift_task_alloc();
  v4[91] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  v4[92] = v10;
  v4[93] = *(_QWORD *)(v10 - 8);
  v4[94] = swift_task_alloc();
  v4[95] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v4[96] = swift_task_alloc();
  v4[97] = swift_task_alloc();
  v4[98] = swift_task_alloc();
  v11 = type metadata accessor for CRAsset();
  v4[99] = v11;
  v4[100] = *(_QWORD *)(v11 - 8);
  v4[101] = swift_task_alloc();
  v4[102] = swift_task_alloc();
  v4[103] = swift_task_alloc();
  v4[104] = swift_task_alloc();
  v4[105] = swift_task_alloc();
  v4[106] = swift_task_alloc();
  v4[107] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized PaperDocument.newPDFDocument<A>(use:in:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void (*v63)(uint64_t, uint64_t);
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_unfair_lock_s *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  Swift::UInt *v91;
  int isUniquelyReferenced_nonNull_native;
  char v93;
  _BOOL8 v94;
  char v95;
  Swift::UInt *v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void (*v125)(uint64_t, unint64_t, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned int (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  os_unfair_lock_s *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);
  id v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  __objc2_prot_list **p_base_prots;
  unsigned int (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __objc2_prot_list **v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(uint64_t, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  char *v212;
  uint64_t v213;
  id v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(_QWORD, _QWORD);
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void (*v230)(_QWORD, _QWORD, _QWORD);
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t (*v234)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;

  v1 = *(_QWORD *)(v0 + 800);
  v2 = *(_QWORD *)(v0 + 792);
  v3 = *(_QWORD *)(v0 + 784);
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 864) = v4;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 872) = v6;
  *(_QWORD *)(v6 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v7 = type metadata accessor for PaperDocument(0);
  *(_QWORD *)(v0 + 880) = v7;
  *(_DWORD *)(v0 + 92) = *(_DWORD *)(v7 + 20);
  *(_QWORD *)(v0 + 888) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.getter();
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(_QWORD *)(v0 + 896) = v8;
  if (v8(v3, 1, v2) != 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 792));
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 904) = v22;
    *v22 = v0;
    v22[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
    return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 856), v4, v6);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 784), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v9 = *(_QWORD *)(v0 + 728);
  v10 = *(_QWORD *)(v0 + 664);
  v11 = *(_QWORD *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  *(_QWORD *)(v0 + 920) = v12;
  if (v12(v9, 1, v11) != 1)
  {
    *(_QWORD *)(v0 + 928) = *(_QWORD *)(*(_QWORD *)(v0 + 664) + 32);
    do
    {
      v32 = *(_QWORD *)(v0 + 648);
      v33 = *(_QWORD *)(v0 + 592);
      v34 = *(_QWORD *)(v0 + 584);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 928))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 656));
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_3.subscript.getter();
      v35 = *(_QWORD *)(v0 + 120);
      v36 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v35);
      (*(void (**)(uint64_t, uint64_t))(v36 + 88))(v35, v36);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v34) == 1)
      {
        v24 = *(_QWORD *)(v0 + 800);
        v25 = *(_QWORD *)(v0 + 792);
        v26 = *(_QWORD *)(v0 + 776);
        v27 = *(_QWORD *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v26, 1, 1, v25);
      }
      else
      {
        v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
        v38 = *(_QWORD *)(v0 + 800);
        v39 = *(_QWORD *)(v0 + 792);
        v40 = *(_QWORD *)(v0 + 776);
        v41 = *(_QWORD *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v40, v41 + *(int *)(*(_QWORD *)(v0 + 584) + 20), v39);
        outlined destroy of PKStrokeProperties(v41, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v39);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v37(v40, 1, v39) != 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 792));
          v42 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 936) = v42;
          *v42 = v0;
          v42[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872));
        }
      }
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
      v29 = *(_QWORD *)(v0 + 776);
      v30 = *(_QWORD *)(v0 + 728);
      v31 = *(_QWORD *)(v0 + 656);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 704), v31);
      outlined destroy of StocksKitCurrencyCache.Provider?(v29, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v28(v30, 1, v31) != 1);
  }
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
  v14 = *(_QWORD *)(v0 + 792);
  v15 = *(_QWORD *)(v0 + 768);
  v16 = *(_QWORD *)(*(_QWORD *)(v0 + 744) + 8);
  ((void (*)(_QWORD, _QWORD))v16)(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  v226 = (void (*)(_QWORD, _QWORD))v16;
  if (v13(v15, 1, v14) == 1)
  {
    v17 = *(_QWORD *)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 768), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    v18 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v18, v17);
    v19 = 0;
    swift_bridgeObjectRelease();
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v17, 1, v20) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 624), (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      v21 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      v52 = *(_QWORD *)(v0 + 864);
      v53 = *(_QWORD *)(v0 + 832);
      v54 = *(_QWORD *)(v0 + 824);
      v55 = *(_QWORD *)(v0 + 792);
      v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 800) + 32);
      v56(v54, *(_QWORD *)(v0 + 624), v55);
      v56(v53, v54, v55);
      swift_beginAccess();
      v57 = *(_QWORD *)(v52 + 16);
      if (!*(_QWORD *)(v57 + 16))
        goto LABEL_119;
      v58 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 832));
      if ((v59 & 1) == 0)
        goto LABEL_119;
      v60 = *(_QWORD *)(v0 + 832);
      v16 = *(_QWORD *)(v0 + 800);
      v61 = *(_QWORD *)(v0 + 792);
      v62 = *(void **)(*(_QWORD *)(v57 + 56) + 8 * v58);
      swift_endAccess();
      v63 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v21 = v62;
      v63(v60, v61);
    }
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 864);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 792));
    swift_beginAccess();
    v44 = *(_QWORD *)(v43 + 16);
    if (!*(_QWORD *)(v44 + 16))
      goto LABEL_117;
    v45 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 840));
    if ((v46 & 1) == 0)
      goto LABEL_117;
    v47 = *(_QWORD *)(v0 + 840);
    v48 = *(_QWORD *)(v0 + 800);
    v49 = *(_QWORD *)(v0 + 792);
    v50 = *(void **)(*(_QWORD *)(v44 + 56) + 8 * v45);
    swift_endAccess();
    v51 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v21 = v50;
    v51(v47, v49);
    v19 = 0;
  }
  *(_QWORD *)(v0 + 952) = v21;
  v64 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v65 = (uint64_t)objc_msgSend(v21, sel_pageCount);
  if (v65 < 0)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v16 = v65;
  v237 = v21;
  if (!v65)
  {
LABEL_46:
    *(_QWORD *)(v0 + 960) = v64;
    v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
    v106 = *(_QWORD *)(v0 + 720);
    v107 = *(_QWORD *)(v0 + 656);
    CROrderedSet.makeIterator()();
    CROrderedSet.Iterator.next()();
    if (v105(v106, 1, v107) == 1)
    {
LABEL_47:
      v108 = *(_QWORD *)(v0 + 864);
      v110 = *(_QWORD *)(v0 + 376);
      v109 = *(_QWORD *)(v0 + 384);
      v226(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 736));
      swift_beginAccess();
      v111 = *(_QWORD *)(v108 + 16);
      swift_bridgeObjectRetain();
      v112 = specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(v237, v109, v111, v110);
      *(_QWORD *)(v0 + 968) = v112;
      swift_bridgeObjectRelease();
      v113 = v112[32];
      *(_BYTE *)(v0 + 91) = v113;
      v114 = -1;
      v115 = -1 << v113;
      if (-v115 < 64)
        v114 = ~(-1 << -(char)v115);
      v116 = v114 & *((_QWORD *)v112 + 7);
      if (v116)
      {
        v117 = 0;
        v118 = __clz(__rbit64(v116));
        v119 = (v116 - 1) & v116;
        v65 = *(_QWORD *)(v0 + 968);
      }
      else
      {
        v67 = 63 - v115;
        v65 = *(_QWORD *)(v0 + 968);
        if (v67 <= 0x7F)
          goto LABEL_100;
        v170 = *(_QWORD *)(v65 + 64);
        if (v170)
        {
          v117 = 1;
          goto LABEL_75;
        }
        if (v67 < 0xC0)
          goto LABEL_100;
        v170 = *(_QWORD *)(v65 + 72);
        if (v170)
        {
          v117 = 2;
          goto LABEL_75;
        }
        if (v67 < 0x100)
          goto LABEL_100;
        v170 = *(_QWORD *)(v65 + 80);
        if (!v170)
          goto LABEL_85;
        v117 = 3;
LABEL_75:
        v119 = (v170 - 1) & v170;
        v118 = __clz(__rbit64(v170)) + (v117 << 6);
      }
      *(_QWORD *)(v0 + 984) = v119;
      *(_QWORD *)(v0 + 976) = v117;
      v120 = *(_QWORD *)(v0 + 816);
      v121 = *(_QWORD *)(v0 + 808);
      v122 = *(_QWORD *)(v0 + 800);
      v123 = *(_QWORD *)(v0 + 792);
      v124 = *(_QWORD *)(v65 + 48) + *(_QWORD *)(v122 + 72) * v118;
      v125 = *(void (**)(uint64_t, unint64_t, uint64_t))(v122 + 16);
      *(_QWORD *)(v0 + 992) = v125;
      v125(v120, v124, v123);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 32))(v121, v120, v123);
      v126 = swift_task_alloc();
      *(_QWORD *)(v0 + 1000) = v126;
      *(_QWORD *)(v126 + 16) = v121;
      v127 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1008) = v127;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
      *v127 = v0;
      v127[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
      return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
    }
    v231 = (_QWORD *)(v0 + 136);
    v233 = *(_QWORD *)(v0 + 592);
    v236 = *(_QWORD *)(v0 + 664);
    v227 = *(_QWORD *)(v0 + 552);
    v229 = *(_QWORD *)(v0 + 544);
    v230 = *(void (**)(_QWORD, _QWORD, _QWORD))(v236 + 32);
    while (1)
    {
      v132 = *(_QWORD *)(v0 + 640);
      v133 = *(_QWORD *)(v0 + 584);
      v230(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 656));
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_3.subscript.getter();
      v134 = *(_QWORD *)(v0 + 160);
      v135 = *(_QWORD *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1(v231, v134);
      (*(void (**)(uint64_t, uint64_t))(v135 + 88))(v134, v135);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v132, 1, v133) == 1)
      {
        v128 = *(_QWORD *)(v0 + 640);
        (*(void (**)(_QWORD, _QWORD))(v236 + 8))(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 656));
        outlined destroy of StocksKitCurrencyCache.Provider?(v128, &demangling cache variable for type metadata for PDFPageID?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v231);
      }
      else
      {
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v231);
        if (v64[2])
        {
          v136 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 616));
          if ((v137 & 1) != 0)
          {
            v138 = *(_QWORD *)(v64[7] + 8 * v136);
            if (one-time initialization token for lock != -1)
              swift_once();
            v139 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
            v140 = swift_task_alloc();
            *(_QWORD *)(v140 + 16) = v237;
            *(_QWORD *)(v140 + 24) = v138;
            v141 = swift_task_alloc();
            *(_QWORD *)(v141 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
            *(_QWORD *)(v141 + 24) = v140;
            v139 += 4;
            os_unfair_lock_lock(v139);
            specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v142, *(uint64_t (**)(void))(v141 + 16));
            v143 = *(_QWORD *)(v0 + 544);
            v144 = *(_QWORD *)(v0 + 536);
            os_unfair_lock_unlock(v139);
            swift_task_dealloc();
            swift_task_dealloc();
            v145 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v227 + 48);
            if (v145(v144, 1, v143) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for PageId?);
              v146 = objc_msgSend(v237, sel_pageAtIndex_, v138);
              if (!v146)
                goto LABEL_118;
              v147 = v146;
              v148 = *(_QWORD *)(v0 + 544);
              v149 = *(_QWORD *)(v0 + 528);
              type metadata accessor for PaperKitPDFPage(0);
              v150 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
              swift_beginAccess();
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v150, v149, &demangling cache variable for type metadata for PageId?);

              if (v145(v149, 1, v148) == 1)
              {
                v151 = *(_QWORD *)(v0 + 584);
                v152 = *(_QWORD *)(v0 + 576);
                outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 528), &demangling cache variable for type metadata for PageId?);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v233 + 56))(v152, 1, 1, v151);
                v153 = v229;
                v154 = v152 + *(int *)(v229 + 20);
                v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v155 - 8) + 56))(v154, 1, 1, v155);
                goto LABEL_68;
              }
              v158 = *(_QWORD *)(v0 + 576);
              v159 = *(_QWORD *)(v0 + 528);
            }
            else
            {
              v158 = *(_QWORD *)(v0 + 576);
              v159 = *(_QWORD *)(v0 + 536);
            }
            outlined init with take of PKStrokeStruct(v159, v158, type metadata accessor for PageId);
            v153 = v229;
LABEL_68:
            v160 = *(_QWORD *)(v0 + 576);
            v161 = *(_QWORD *)(v0 + 504);
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v160 + *(int *)(v153 + 20), v161, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            outlined destroy of PKStrokeProperties(v160, type metadata accessor for PageId);
            v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
            v163 = *(_QWORD *)(v162 - 8);
            v164 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162);
            outlined destroy of StocksKitCurrencyCache.Provider?(v161, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            v165 = *(_QWORD *)(v0 + 696);
            if (v164 == 1)
            {
              v224 = *(_QWORD *)(v0 + 656);
              v225 = *(_QWORD *)(v0 + 616);
              v166 = *(_QWORD *)(v0 + 568);
              v167 = v138;
              v168 = *(_QWORD *)(v0 + 496);
              (*(void (**)(_QWORD, uint64_t))(v236 + 16))(*(_QWORD *)(v0 + 688), v165);
              lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
              WeakTagged_3.init(_:)();
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v163 + 56))(v168, 0, 1, v162);
              PaperKitPDFDocument.subscript.getter(v167, v166);
              outlined assign with take of WeakTagged_3<TaggedPaperPage>?(v168, v166 + *(int *)(v229 + 20));
              PaperKitPDFDocument.subscript.setter(v166, v167);
              outlined destroy of PKStrokeProperties(v225, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v165, v224);
            }
            else
            {
              v169 = *(_QWORD *)(v0 + 656);
              outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v165, v169);
            }
            goto LABEL_54;
          }
        }
        v156 = *(_QWORD *)(v0 + 696);
        v157 = *(_QWORD *)(v0 + 656);
        outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v156, v157);
      }
LABEL_54:
      v129 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
      v130 = *(_QWORD *)(v0 + 720);
      v131 = *(_QWORD *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v129(v130, 1, v131) == 1)
        goto LABEL_47;
    }
  }
  if (one-time initialization token for lock != -1)
LABEL_90:
    v65 = swift_once();
  v66 = 0;
  v232 = *(_QWORD *)(v0 + 552);
  v235 = *(_QWORD *)(v0 + 592);
  v67 = *(_QWORD *)(v0 + 544);
  v228 = v67;
  while (v16 != v66)
  {
    v68 = static PaperKitPDFDocument.lock;
    v69 = swift_task_alloc();
    *(_QWORD *)(v69 + 16) = v21;
    *(_QWORD *)(v69 + 24) = v66;
    v70 = swift_task_alloc();
    *(_QWORD *)(v70 + 16) = partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(_QWORD *)(v70 + 24) = v69;
    v71 = (os_unfair_lock_s *)(v68 + 16);
    os_unfair_lock_lock(v71);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v72, *(uint64_t (**)(void))(v70 + 16));
    if (v19)
    {
      os_unfair_lock_unlock(v71);
      return swift_task_dealloc();
    }
    v73 = *(_QWORD *)(v0 + 544);
    v74 = *(_QWORD *)(v0 + 520);
    os_unfair_lock_unlock(v71);
    swift_task_dealloc();
    swift_task_dealloc();
    v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48);
    if (v75(v74, 1, v73) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 520), &demangling cache variable for type metadata for PageId?);
      v76 = objc_msgSend(v237, sel_pageAtIndex_, v66);
      if (!v76)
        goto LABEL_116;
      v77 = v76;
      v78 = *(_QWORD *)(v0 + 544);
      v79 = *(_QWORD *)(v0 + 512);
      type metadata accessor for PaperKitPDFPage(0);
      v80 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v80, v79, &demangling cache variable for type metadata for PageId?);

      if (v75(v79, 1, v78) == 1)
      {
        v81 = *(_QWORD *)(v0 + 584);
        v82 = *(_QWORD *)(v0 + 560);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 512), &demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v235 + 56))(v82, 1, 1, v81);
        v83 = v82 + *(int *)(v228 + 20);
        v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 1, 1, v84);
      }
      else
      {
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 560), type metadata accessor for PageId);
      }
    }
    else
    {
      outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 560), type metadata accessor for PageId);
    }
    v85 = *(_QWORD *)(v0 + 632);
    v86 = *(_QWORD *)(v0 + 584);
    v87 = *(_QWORD *)(v0 + 560);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v87, v85, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties(v87, type metadata accessor for PageId);
    v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v235 + 48))(v85, 1, v86);
    v89 = *(_QWORD *)(v0 + 632);
    if (v88 != 1)
    {
      v90 = *(_QWORD *)(v0 + 608);
      v91 = *(Swift::UInt **)(v0 + 600);
      outlined init with take of PKStrokeStruct(v89, v90, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined init with copy of PDFPageID(v90, (uint64_t)v91);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
      v67 = v64[2];
      v94 = (v93 & 1) == 0;
      v65 = v67 + v94;
      if (__OFADD__(v67, v94))
        goto LABEL_84;
      v95 = v93;
      if (v64[3] >= v65)
      {
        v21 = v237;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v93 & 1) == 0)
            goto LABEL_43;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v95 & 1) == 0)
            goto LABEL_43;
        }
      }
      else
      {
        v96 = *(Swift::UInt **)(v0 + 600);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v65, isUniquelyReferenced_nonNull_native);
        v97 = specialized __RawDictionaryStorage.find<A>(_:)(v96);
        v21 = v237;
        if ((v95 & 1) != (v98 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        v19 = v97;
        if ((v95 & 1) == 0)
        {
LABEL_43:
          v99 = *(_QWORD *)(v0 + 600);
          v64[(v19 >> 6) + 8] |= 1 << v19;
          outlined init with copy of PDFPageID(v99, v64[6] + *(_QWORD *)(v235 + 72) * v19);
          *(_QWORD *)(v64[7] + 8 * v19) = v66;
          v100 = v64[2];
          v101 = __OFADD__(v100, 1);
          v102 = v100 + 1;
          if (v101)
          {
            __break(1u);
            goto LABEL_89;
          }
          v64[2] = v102;
          goto LABEL_45;
        }
      }
      *(_QWORD *)(v64[7] + 8 * v19) = v66;
LABEL_45:
      v103 = *(_QWORD *)(v0 + 608);
      v104 = *(_QWORD *)(v0 + 600);
      swift_bridgeObjectRelease();
      outlined destroy of PKStrokeProperties(v104, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v65 = outlined destroy of PKStrokeProperties(v103, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      goto LABEL_24;
    }
    v65 = outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for PDFPageID?);
    v21 = v237;
LABEL_24:
    v19 = 0;
    if (v16 == ++v66)
      goto LABEL_46;
  }
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  if (v67 >= 0x140)
  {
    v170 = *(_QWORD *)(v65 + 88);
    if (v170)
    {
      v117 = 4;
      goto LABEL_75;
    }
    if (v67 >= 0x180)
    {
      v170 = *(_QWORD *)(v65 + 96);
      if (v170)
      {
        v117 = 5;
      }
      else
      {
        v171 = 0;
        v172 = v67 >> 6;
        if (v172 <= 6)
          v172 = 6;
        v173 = v172 - 6;
        do
        {
          if (v173 == v171)
            goto LABEL_100;
          v170 = *(_QWORD *)(v65 + 104 + 8 * v171++);
        }
        while (!v170);
        v117 = v171 + 5;
      }
      goto LABEL_75;
    }
  }
LABEL_100:
  v175 = *(_QWORD *)(v0 + 384);
  v174 = *(_QWORD *)(v0 + 392);
  v176 = *(_QWORD *)(v0 + 376);
  swift_release();
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v175, v176, v174);
  if (v176 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_114:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v238 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v238);
  }
  v178 = *(_QWORD *)(v0 + 480);
  v177 = *(_QWORD *)(v0 + 488);
  v180 = *(_QWORD *)(v0 + 464);
  v179 = *(_QWORD *)(v0 + 472);
  v181 = *(_QWORD *)(v0 + 448);
  v182 = *(_QWORD *)(v0 + 456);
  v183 = *(_QWORD *)(v0 + 400);
  v184 = *(_QWORD *)(v0 + 376);
  outlined copy of PaperDocument.PDFDocumentUse(v184);
  outlined consume of PaperDocument.PDFDocumentUse(v184);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 16))(v179, v183, v181);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 32))(v180, v179, v181);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v185 = *(int *)(v178 + 36);
  *(_DWORD *)(v0 + 1032) = v185;
  *(_QWORD *)(v177 + v185) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (2)
  {
    v187 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
    v188 = *(_QWORD *)(v0 + 712);
    v189 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v187(v188, 1, v189) == 1)
    {
      v190 = *(_QWORD *)(v0 + 432);
      v192 = *(_QWORD *)(v0 + 408);
      v191 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 56))(v190, 1, 1, v192);
LABEL_109:
      v208 = *(_QWORD *)(v0 + 440);
      v210 = *(_QWORD *)(v0 + 408);
      v209 = *(_QWORD *)(v0 + 416);
      outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v208, &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v208, 1, v210) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_114;
      }
      v211 = *(void **)(v0 + 952);
      v212 = *(char **)(v0 + 440);
      v213 = *(_QWORD *)v212;
      (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v212[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
      v214 = objc_msgSend(v211, (SEL)p_base_prots[407], v213);
      *(_QWORD *)(v0 + 1016) = v214;
      if (v214)
      {
        v215 = v214;
        type metadata accessor for PaperKitPDFPage(0);
        v216 = swift_dynamicCastClass();
        if (v216)
        {
          v217 = v216;
          v218 = *(_QWORD *)(v0 + 392);
          v219 = *(_QWORD *)(v0 + 376);
          v220 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
          SharedTagged_3.subscript.getter();
          v221 = *(_QWORD *)(v0 + 200);
          v222 = *(_QWORD *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v221);
          *(_QWORD *)(v0 + 368) = v219;
          outlined init with take of (key: Int, value: AnyCRValue)?(v218, v0 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
          v234 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v222 + 144) + *(_QWORD *)(v222 + 144));
          v223 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1024) = v223;
          *v223 = v0;
          v223[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          return v234(v217, v0 + 368, *(_QWORD *)(v0 + 384), v0 + 16, *(_QWORD *)(v0 + 880), v220, v221, v222);
        }

      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
      continue;
    }
    break;
  }
  v193 = p_base_prots;
  v194 = *(int *)(v0 + 1032);
  v195 = *(_QWORD *)(v0 + 680);
  v196 = *(_QWORD *)(v0 + 656);
  v197 = *(_QWORD *)(v0 + 488);
  v198 = *(_QWORD *)(v0 + 424);
  v199 = *(_QWORD *)(v0 + 408);
  v200 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
  v200(v195, *(_QWORD *)(v0 + 712), v196);
  v201 = v198 + *(int *)(v199 + 48);
  v202 = *(_QWORD *)(v197 + v194);
  v200(v201, v195, v196);
  if (!__OFADD__(v202, 1))
  {
    v203 = *(_QWORD *)(v0 + 656);
    v204 = *(_QWORD **)(v0 + 432);
    v206 = *(_QWORD *)(v0 + 408);
    v205 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1032)) = v202 + 1;
    v207 = (char *)v204 + *(int *)(v206 + 48);
    *v204 = v202;
    v200((uint64_t)v207, v201, v203);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v204, 0, 1, v206);
    p_base_prots = v193;
    goto LABEL_109;
  }
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  swift_endAccess();
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 912) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void (*v54)(uint64_t, uint64_t);
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  Swift::UInt *v82;
  int isUniquelyReferenced_nonNull_native;
  char v84;
  _BOOL8 v85;
  char v86;
  Swift::UInt *v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void (*v116)(uint64_t, unint64_t, uint64_t);
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unsigned int (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(uint64_t, uint64_t, uint64_t);
  id v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  __objc2_prot_list **p_base_prots;
  uint64_t *v177;
  unsigned int (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  __objc2_prot_list **v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  char *v204;
  uint64_t v205;
  id v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(_QWORD, _QWORD);
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t);
  uint64_t (*v223)(uint64_t);
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v228)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 792));
  v222 = *(uint64_t (**)(uint64_t))(v0 + 912);
  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 920) = v4;
  if (v4(v1, 1, v3) != 1)
  {
    *(_QWORD *)(v0 + 928) = *(_QWORD *)(*(_QWORD *)(v0 + 664) + 32);
    do
    {
      v22 = *(_QWORD *)(v0 + 648);
      v23 = *(_QWORD *)(v0 + 592);
      v24 = *(_QWORD *)(v0 + 584);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 928))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 656));
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_3.subscript.getter();
      v25 = *(_QWORD *)(v0 + 120);
      v26 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v25);
      (*(void (**)(uint64_t, uint64_t))(v26 + 88))(v25, v26);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v24) == 1)
      {
        v14 = *(_QWORD *)(v0 + 800);
        v15 = *(_QWORD *)(v0 + 792);
        v16 = *(_QWORD *)(v0 + 776);
        v17 = *(_QWORD *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v17, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v16, 1, 1, v15);
      }
      else
      {
        v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
        v28 = *(_QWORD *)(v0 + 800);
        v29 = *(_QWORD *)(v0 + 792);
        v30 = *(_QWORD *)(v0 + 776);
        v31 = *(_QWORD *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v30, v31 + *(int *)(*(_QWORD *)(v0 + 584) + 20), v29);
        outlined destroy of PKStrokeProperties(v31, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v29);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v27(v30, 1, v29) != 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 792));
          v32 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 936) = v32;
          *v32 = v0;
          v32[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872));
        }
      }
      v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
      v19 = *(_QWORD *)(v0 + 776);
      v20 = *(_QWORD *)(v0 + 728);
      v21 = *(_QWORD *)(v0 + 656);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 704), v21);
      outlined destroy of StocksKitCurrencyCache.Provider?(v19, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v18(v20, 1, v21) != 1);
  }
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
  v6 = *(_QWORD *)(v0 + 792);
  v7 = *(_QWORD *)(v0 + 768);
  v8 = *(_QWORD *)(*(_QWORD *)(v0 + 744) + 8);
  ((void (*)(_QWORD, _QWORD))v8)(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  v218 = (void (*)(_QWORD, _QWORD))v8;
  if (v5(v7, 1, v6) == 1)
  {
    v9 = *(_QWORD *)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 768), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    v10 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v10, v9);
    v11 = v222;
    swift_bridgeObjectRelease();
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v9, 1, v12) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 624), (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      v13 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      v8 = *(_QWORD *)(v0 + 864);
      v43 = *(_QWORD *)(v0 + 832);
      v44 = *(_QWORD *)(v0 + 824);
      v45 = *(_QWORD *)(v0 + 792);
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 800) + 32);
      v46(v44, *(_QWORD *)(v0 + 624), v45);
      v46(v43, v44, v45);
      swift_beginAccess();
      v47 = *(_QWORD *)(v8 + 16);
      if (!*(_QWORD *)(v47 + 16))
        goto LABEL_122;
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 832));
      if ((v49 & 1) == 0)
        goto LABEL_122;
      v50 = *(_QWORD *)(v0 + 832);
      v51 = *(_QWORD *)(v0 + 800);
      v52 = *(_QWORD *)(v0 + 792);
      v53 = *(void **)(*(_QWORD *)(v47 + 56) + 8 * v48);
      swift_endAccess();
      v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v13 = v53;
      v54(v50, v52);
      v11 = v222;
    }
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 864);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 792));
    swift_beginAccess();
    v35 = *(_QWORD *)(v34 + 16);
    v11 = v222;
    if (!*(_QWORD *)(v35 + 16))
      goto LABEL_120;
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 840));
    if ((v37 & 1) == 0)
      goto LABEL_120;
    v38 = *(_QWORD *)(v0 + 840);
    v39 = *(_QWORD *)(v0 + 800);
    v40 = *(_QWORD *)(v0 + 792);
    v41 = *(void **)(*(_QWORD *)(v35 + 56) + 8 * v36);
    swift_endAccess();
    v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v13 = v41;
    v42(v38, v40);
  }
  *(_QWORD *)(v0 + 952) = v13;
  v55 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v56 = (uint64_t)objc_msgSend((id)v13, sel_pageCount);
  if (v56 < 0)
  {
LABEL_92:
    __break(1u);
  }
  else
  {
    v8 = v56;
    v231 = (void *)v13;
    if (!v56)
    {
      v223 = v11;
      goto LABEL_47;
    }
    if (one-time initialization token for lock == -1)
      goto LABEL_20;
  }
  v56 = swift_once();
LABEL_20:
  v57 = 0;
  v229 = *(_QWORD *)(v0 + 592);
  v226 = *(_QWORD *)(v0 + 552);
  v58 = *(_QWORD *)(v0 + 544);
  v220 = v58;
  do
  {
    if (v8 == v57)
    {
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v59 = static PaperKitPDFDocument.lock;
    v60 = swift_task_alloc();
    *(_QWORD *)(v60 + 16) = v13;
    *(_QWORD *)(v60 + 24) = v57;
    v61 = swift_task_alloc();
    *(_QWORD *)(v61 + 16) = partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(_QWORD *)(v61 + 24) = v60;
    v62 = (os_unfair_lock_s *)(v59 + 16);
    os_unfair_lock_lock(v62);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v63, *(uint64_t (**)(void))(v61 + 16));
    if (v11)
    {
LABEL_45:
      os_unfair_lock_unlock(v62);
      return swift_task_dealloc();
    }
    v64 = *(_QWORD *)(v0 + 544);
    v65 = *(_QWORD *)(v0 + 520);
    os_unfair_lock_unlock(v62);
    swift_task_dealloc();
    swift_task_dealloc();
    v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v226 + 48);
    if (v66(v65, 1, v64) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 520), &demangling cache variable for type metadata for PageId?);
      v67 = objc_msgSend(v231, sel_pageAtIndex_, v57);
      if (!v67)
        goto LABEL_119;
      v68 = v67;
      v69 = *(_QWORD *)(v0 + 544);
      v70 = *(_QWORD *)(v0 + 512);
      type metadata accessor for PaperKitPDFPage(0);
      v71 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v71, v70, &demangling cache variable for type metadata for PageId?);

      if (v66(v70, 1, v69) == 1)
      {
        v72 = *(_QWORD *)(v0 + 584);
        v73 = *(_QWORD *)(v0 + 560);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 512), &demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v229 + 56))(v73, 1, 1, v72);
        v74 = v73 + *(int *)(v220 + 20);
        v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 1, 1, v75);
        v11 = type metadata accessor for PageId;
      }
      else
      {
        v11 = type metadata accessor for PageId;
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 560), type metadata accessor for PageId);
      }
    }
    else
    {
      v11 = type metadata accessor for PageId;
      outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 560), type metadata accessor for PageId);
    }
    v76 = *(_QWORD *)(v0 + 632);
    v77 = *(_QWORD *)(v0 + 584);
    v78 = *(_QWORD *)(v0 + 560);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v78, v76, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties(v78, type metadata accessor for PageId);
    v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v229 + 48))(v76, 1, v77);
    v80 = *(_QWORD *)(v0 + 632);
    if (v79 == 1)
    {
      v56 = outlined destroy of StocksKitCurrencyCache.Provider?(v80, &demangling cache variable for type metadata for PDFPageID?);
      goto LABEL_22;
    }
    v81 = *(_QWORD *)(v0 + 608);
    v82 = *(Swift::UInt **)(v0 + 600);
    outlined init with take of PKStrokeStruct(v80, v81, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    outlined init with copy of PDFPageID(v81, (uint64_t)v82);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v82);
    v58 = v55[2];
    v85 = (v84 & 1) == 0;
    v56 = v58 + v85;
    if (__OFADD__(v58, v85))
      goto LABEL_87;
    v86 = v84;
    if (v55[3] >= v56)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v84 & 1) == 0)
          goto LABEL_41;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v86 & 1) == 0)
          goto LABEL_41;
      }
    }
    else
    {
      v87 = *(Swift::UInt **)(v0 + 600);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, isUniquelyReferenced_nonNull_native);
      v88 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
      if ((v86 & 1) != (v89 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      v13 = v88;
      if ((v86 & 1) == 0)
      {
LABEL_41:
        v90 = *(_QWORD *)(v0 + 600);
        v55[(v13 >> 6) + 8] |= 1 << v13;
        outlined init with copy of PDFPageID(v90, v55[6] + *(_QWORD *)(v229 + 72) * v13);
        *(_QWORD *)(v55[7] + 8 * v13) = v57;
        v91 = v55[2];
        v92 = __OFADD__(v91, 1);
        v93 = v91 + 1;
        if (v92)
        {
          __break(1u);
          goto LABEL_92;
        }
        v55[2] = v93;
        goto LABEL_43;
      }
    }
    *(_QWORD *)(v55[7] + 8 * v13) = v57;
LABEL_43:
    v94 = *(_QWORD *)(v0 + 608);
    v95 = *(_QWORD *)(v0 + 600);
    swift_bridgeObjectRelease();
    outlined destroy of PKStrokeProperties(v95, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v56 = outlined destroy of PKStrokeProperties(v94, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_22:
    v13 = (unint64_t)v231;
    v11 = 0;
    ++v57;
  }
  while (v8 != v57);
  v223 = 0;
LABEL_47:
  *(_QWORD *)(v0 + 960) = v55;
  v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
  v97 = *(_QWORD *)(v0 + 720);
  v98 = *(_QWORD *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  if (v96(v97, 1, v98) != 1)
  {
    v230 = *(_QWORD *)(v0 + 592);
    v219 = *(_QWORD *)(v0 + 552);
    v221 = *(_QWORD *)(v0 + 544);
    v225 = *(_QWORD *)(v0 + 664);
    v227 = *(void (**)(_QWORD, _QWORD, _QWORD))(v225 + 32);
    do
    {
      v123 = *(_QWORD *)(v0 + 640);
      v124 = *(_QWORD *)(v0 + 584);
      v227(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 656));
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_3.subscript.getter();
      v125 = *(_QWORD *)(v0 + 160);
      v126 = *(_QWORD *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 136), v125);
      (*(void (**)(uint64_t, uint64_t))(v126 + 88))(v125, v126);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v230 + 48))(v123, 1, v124) == 1)
      {
        v119 = *(_QWORD *)(v0 + 640);
        (*(void (**)(_QWORD, _QWORD))(v225 + 8))(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 656));
        outlined destroy of StocksKitCurrencyCache.Provider?(v119, &demangling cache variable for type metadata for PDFPageID?);
        __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      }
      else
      {
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        __swift_destroy_boxed_opaque_existential_1(v0 + 136);
        if (v55[2])
        {
          v127 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 616));
          if ((v128 & 1) != 0)
          {
            v129 = *(_QWORD *)(v55[7] + 8 * v127);
            if (one-time initialization token for lock != -1)
              swift_once();
            v130 = static PaperKitPDFDocument.lock;
            v131 = swift_task_alloc();
            *(_QWORD *)(v131 + 16) = v231;
            *(_QWORD *)(v131 + 24) = v129;
            v132 = swift_task_alloc();
            *(_QWORD *)(v132 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
            *(_QWORD *)(v132 + 24) = v131;
            v62 = (os_unfair_lock_s *)(v130 + 16);
            os_unfair_lock_lock(v62);
            specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v133, *(uint64_t (**)(void))(v132 + 16));
            if (v223)
              goto LABEL_45;
            v224 = v129;
            v134 = *(_QWORD *)(v0 + 544);
            v135 = *(_QWORD *)(v0 + 536);
            os_unfair_lock_unlock(v62);
            swift_task_dealloc();
            swift_task_dealloc();
            v136 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48);
            if (v136(v135, 1, v134) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for PageId?);
              v137 = objc_msgSend(v231, sel_pageAtIndex_, v224);
              if (!v137)
                goto LABEL_121;
              v138 = v137;
              v139 = *(_QWORD *)(v0 + 544);
              v140 = *(_QWORD *)(v0 + 528);
              type metadata accessor for PaperKitPDFPage(0);
              v141 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
              swift_beginAccess();
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v141, v140, &demangling cache variable for type metadata for PageId?);

              if (v136(v140, 1, v139) == 1)
              {
                v142 = *(_QWORD *)(v0 + 584);
                v143 = *(_QWORD *)(v0 + 576);
                outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 528), &demangling cache variable for type metadata for PageId?);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v230 + 56))(v143, 1, 1, v142);
                v144 = v221;
                v145 = v143 + *(int *)(v221 + 20);
                v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 56))(v145, 1, 1, v146);
LABEL_70:
                v151 = *(_QWORD *)(v0 + 576);
                v152 = *(_QWORD *)(v0 + 504);
                outlined init with copy of Ref<PKStrokeInheritedProperties>?(v151 + *(int *)(v144 + 20), v152, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
                outlined destroy of PKStrokeProperties(v151, type metadata accessor for PageId);
                v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                v154 = *(_QWORD *)(v153 - 8);
                v155 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153);
                outlined destroy of StocksKitCurrencyCache.Provider?(v152, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
                v156 = *(_QWORD *)(v0 + 696);
                if (v155 == 1)
                {
                  v216 = *(_QWORD *)(v0 + 656);
                  v217 = *(_QWORD *)(v0 + 616);
                  v157 = *(_QWORD *)(v0 + 568);
                  v158 = *(_QWORD *)(v0 + 496);
                  (*(void (**)(_QWORD, uint64_t))(v225 + 16))(*(_QWORD *)(v0 + 688), v156);
                  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
                  WeakTagged_3.init(_:)();
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v154 + 56))(v158, 0, 1, v153);
                  PaperKitPDFDocument.subscript.getter(v224, v157);
                  outlined assign with take of WeakTagged_3<TaggedPaperPage>?(v158, v157 + *(int *)(v221 + 20));
                  PaperKitPDFDocument.subscript.setter(v157, v224);
                  outlined destroy of PKStrokeProperties(v217, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                  (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v156, v216);
                }
                else
                {
                  v159 = *(_QWORD *)(v0 + 656);
                  outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                  (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v156, v159);
                }
                v223 = 0;
                goto LABEL_55;
              }
              v149 = *(_QWORD *)(v0 + 576);
              v150 = *(_QWORD *)(v0 + 528);
            }
            else
            {
              v149 = *(_QWORD *)(v0 + 576);
              v150 = *(_QWORD *)(v0 + 536);
            }
            outlined init with take of PKStrokeStruct(v150, v149, type metadata accessor for PageId);
            v144 = v221;
            goto LABEL_70;
          }
        }
        v147 = *(_QWORD *)(v0 + 696);
        v148 = *(_QWORD *)(v0 + 656);
        outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v147, v148);
      }
LABEL_55:
      v120 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
      v121 = *(_QWORD *)(v0 + 720);
      v122 = *(_QWORD *)(v0 + 656);
      CROrderedSet.Iterator.next()();
    }
    while (v120(v121, 1, v122) != 1);
  }
  v99 = *(_QWORD *)(v0 + 864);
  v101 = *(_QWORD *)(v0 + 376);
  v100 = *(_QWORD *)(v0 + 384);
  v218(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 736));
  swift_beginAccess();
  v102 = *(_QWORD *)(v99 + 16);
  swift_bridgeObjectRetain();
  v103 = specialized PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v231, v100, v102, v101);
  *(_QWORD *)(v0 + 968) = v103;
  swift_bridgeObjectRelease();
  v104 = v103[32];
  *(_BYTE *)(v0 + 91) = v104;
  v105 = -1;
  v106 = -1 << v104;
  if (-v106 < 64)
    v105 = ~(-1 << -(char)v106);
  v107 = v105 & *((_QWORD *)v103 + 7);
  if (v107)
  {
    v108 = 0;
    v109 = __clz(__rbit64(v107));
    v110 = (v107 - 1) & v107;
    v56 = *(_QWORD *)(v0 + 968);
LABEL_52:
    *(_QWORD *)(v0 + 984) = v110;
    *(_QWORD *)(v0 + 976) = v108;
    v111 = *(_QWORD *)(v0 + 816);
    v112 = *(_QWORD *)(v0 + 808);
    v113 = *(_QWORD *)(v0 + 800);
    v114 = *(_QWORD *)(v0 + 792);
    v115 = *(_QWORD *)(v56 + 48) + *(_QWORD *)(v113 + 72) * v109;
    v116 = *(void (**)(uint64_t, unint64_t, uint64_t))(v113 + 16);
    *(_QWORD *)(v0 + 992) = v116;
    v116(v111, v115, v114);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v112, v111, v114);
    v117 = swift_task_alloc();
    *(_QWORD *)(v0 + 1000) = v117;
    *(_QWORD *)(v117 + 16) = v112;
    v118 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1008) = v118;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *v118 = v0;
    v118[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
    return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
  }
  v58 = 63 - v106;
  v56 = *(_QWORD *)(v0 + 968);
  if (v58 > 0x7F)
  {
    v160 = *(_QWORD *)(v56 + 64);
    if (v160)
    {
      v108 = 1;
LABEL_77:
      v110 = (v160 - 1) & v160;
      v109 = __clz(__rbit64(v160)) + (v108 << 6);
      goto LABEL_52;
    }
    if (v58 >= 0xC0)
    {
      v160 = *(_QWORD *)(v56 + 72);
      if (v160)
      {
        v108 = 2;
        goto LABEL_77;
      }
      if (v58 >= 0x100)
      {
        v160 = *(_QWORD *)(v56 + 80);
        if (v160)
        {
          v108 = 3;
          goto LABEL_77;
        }
LABEL_88:
        if (v58 >= 0x140)
        {
          v160 = *(_QWORD *)(v56 + 88);
          if (v160)
          {
            v108 = 4;
            goto LABEL_77;
          }
          if (v58 >= 0x180)
          {
            v160 = *(_QWORD *)(v56 + 96);
            if (v160)
            {
              v108 = 5;
            }
            else
            {
              v161 = 0;
              v162 = v58 >> 6;
              if (v162 <= 6)
                v162 = 6;
              v163 = v162 - 6;
              do
              {
                if (v163 == v161)
                  goto LABEL_103;
                v160 = *(_QWORD *)(v56 + 104 + 8 * v161++);
              }
              while (!v160);
              v108 = v161 + 5;
            }
            goto LABEL_77;
          }
        }
      }
    }
  }
LABEL_103:
  v165 = *(_QWORD *)(v0 + 384);
  v164 = *(_QWORD *)(v0 + 392);
  v166 = *(_QWORD *)(v0 + 376);
  swift_release();
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v165, v166, v164);
  if (v166 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_117:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v232 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v232);
  }
  v168 = *(_QWORD *)(v0 + 480);
  v167 = *(_QWORD *)(v0 + 488);
  v170 = *(_QWORD *)(v0 + 464);
  v169 = *(_QWORD *)(v0 + 472);
  v171 = *(_QWORD *)(v0 + 448);
  v172 = *(_QWORD *)(v0 + 456);
  v173 = *(_QWORD *)(v0 + 400);
  v174 = *(_QWORD *)(v0 + 376);
  outlined copy of PaperDocument.PDFDocumentUse(v174);
  outlined consume of PaperDocument.PDFDocumentUse(v174);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 16))(v169, v173, v171);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 32))(v170, v169, v171);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v175 = *(int *)(v168 + 36);
  *(_DWORD *)(v0 + 1032) = v175;
  *(_QWORD *)(v167 + v175) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  v177 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (2)
  {
    v178 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
    v179 = *(_QWORD *)(v0 + 712);
    v180 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v178(v179, 1, v180) == 1)
    {
      v181 = *(_QWORD *)(v0 + 432);
      v183 = *(_QWORD *)(v0 + 408);
      v182 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v182 + 56))(v181, 1, 1, v183);
LABEL_112:
      v200 = *(_QWORD *)(v0 + 440);
      v202 = *(_QWORD *)(v0 + 408);
      v201 = *(_QWORD *)(v0 + 416);
      outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v200, v177);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v200, 1, v202) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_117;
      }
      v203 = *(void **)(v0 + 952);
      v204 = *(char **)(v0 + 440);
      v205 = *(_QWORD *)v204;
      (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v204[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
      v206 = objc_msgSend(v203, (SEL)p_base_prots[407], v205);
      *(_QWORD *)(v0 + 1016) = v206;
      if (v206)
      {
        v207 = v206;
        type metadata accessor for PaperKitPDFPage(0);
        v208 = swift_dynamicCastClass();
        if (v208)
        {
          v209 = v208;
          v210 = *(_QWORD *)(v0 + 392);
          v211 = *(_QWORD *)(v0 + 376);
          v212 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
          SharedTagged_3.subscript.getter();
          v213 = *(_QWORD *)(v0 + 200);
          v214 = *(_QWORD *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v213);
          *(_QWORD *)(v0 + 368) = v211;
          outlined init with take of (key: Int, value: AnyCRValue)?(v210, v0 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
          v228 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v214 + 144) + *(_QWORD *)(v214 + 144));
          v215 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1024) = v215;
          *v215 = v0;
          v215[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          return v228(v209, v0 + 368, *(_QWORD *)(v0 + 384), v0 + 16, *(_QWORD *)(v0 + 880), v212, v213, v214);
        }

      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
      continue;
    }
    break;
  }
  v184 = v177;
  v185 = p_base_prots;
  v186 = *(int *)(v0 + 1032);
  v187 = *(_QWORD *)(v0 + 680);
  v188 = *(_QWORD *)(v0 + 656);
  v189 = *(_QWORD *)(v0 + 488);
  v190 = *(_QWORD *)(v0 + 424);
  v191 = *(_QWORD *)(v0 + 408);
  v192 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
  v192(v187, *(_QWORD *)(v0 + 712), v188);
  v193 = v190 + *(int *)(v191 + 48);
  v194 = *(_QWORD *)(v189 + v186);
  v192(v193, v187, v188);
  if (!__OFADD__(v194, 1))
  {
    v195 = *(_QWORD *)(v0 + 656);
    v196 = *(_QWORD **)(v0 + 432);
    v198 = *(_QWORD *)(v0 + 408);
    v197 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1032)) = v194 + 1;
    v199 = (char *)v196 + *(int *)(v198 + 48);
    *v196 = v194;
    v192((uint64_t)v199, v193, v195);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v196, 0, 1, v198);
    p_base_prots = v185;
    v177 = v184;
    goto LABEL_112;
  }
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  swift_endAccess();
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v7;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 792));
  v1 = *(void **)(v0 + 912);
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DDB0F000, v3, v4, "Could not create PDFDocument.", v5, 2u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v7);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 944) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void (*v56)(uint64_t, uint64_t);
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  Swift::UInt *v84;
  int isUniquelyReferenced_nonNull_native;
  char v86;
  _BOOL8 v87;
  char v88;
  Swift::UInt *v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(uint64_t, unint64_t, uint64_t);
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t);
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  __objc2_prot_list **p_base_prots;
  uint64_t *v179;
  unsigned int (*v180)(uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  __objc2_prot_list **v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  char *v206;
  uint64_t v207;
  id v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(_QWORD, _QWORD);
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t (*v224)(uint64_t);
  uint64_t (*v225)(uint64_t);
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v230)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 664);
  v5 = *(_QWORD *)(v0 + 656);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 792));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  CROrderedSet.Iterator.next()();
  v6 = v1(v2, 1, v5);
  v224 = *(uint64_t (**)(uint64_t))(v0 + 944);
  if (v6 != 1)
  {
    do
    {
      v24 = *(_QWORD *)(v0 + 648);
      v25 = *(_QWORD *)(v0 + 592);
      v26 = *(_QWORD *)(v0 + 584);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 928))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 656));
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_3.subscript.getter();
      v27 = *(_QWORD *)(v0 + 120);
      v28 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v27);
      (*(void (**)(uint64_t, uint64_t))(v28 + 88))(v27, v28);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v26) == 1)
      {
        v16 = *(_QWORD *)(v0 + 800);
        v17 = *(_QWORD *)(v0 + 792);
        v18 = *(_QWORD *)(v0 + 776);
        v19 = *(_QWORD *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v18, 1, 1, v17);
      }
      else
      {
        v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
        v30 = *(_QWORD *)(v0 + 800);
        v31 = *(_QWORD *)(v0 + 792);
        v32 = *(_QWORD *)(v0 + 776);
        v33 = *(_QWORD *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v33 + *(int *)(*(_QWORD *)(v0 + 584) + 20), v31);
        outlined destroy of PKStrokeProperties(v33, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v31);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v29(v32, 1, v31) != 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 792));
          v34 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 936) = v34;
          *v34 = v0;
          v34[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872));
        }
      }
      v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
      v21 = *(_QWORD *)(v0 + 776);
      v22 = *(_QWORD *)(v0 + 728);
      v23 = *(_QWORD *)(v0 + 656);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 704), v23);
      outlined destroy of StocksKitCurrencyCache.Provider?(v21, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v20(v22, 1, v23) != 1);
  }
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
  v8 = *(_QWORD *)(v0 + 792);
  v9 = *(_QWORD *)(v0 + 768);
  v10 = *(_QWORD *)(*(_QWORD *)(v0 + 744) + 8);
  ((void (*)(_QWORD, _QWORD))v10)(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  v220 = (void (*)(_QWORD, _QWORD))v10;
  if (v7(v9, 1, v8) == 1)
  {
    v11 = *(_QWORD *)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 768), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    v12 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v12, v11);
    v13 = v224;
    swift_bridgeObjectRelease();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v11, 1, v14) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 624), (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      v15 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 864);
      v45 = *(_QWORD *)(v0 + 832);
      v46 = *(_QWORD *)(v0 + 824);
      v47 = *(_QWORD *)(v0 + 792);
      v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 800) + 32);
      v48(v46, *(_QWORD *)(v0 + 624), v47);
      v48(v45, v46, v47);
      swift_beginAccess();
      v49 = *(_QWORD *)(v10 + 16);
      if (!*(_QWORD *)(v49 + 16))
        goto LABEL_122;
      v50 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 832));
      if ((v51 & 1) == 0)
        goto LABEL_122;
      v52 = *(_QWORD *)(v0 + 832);
      v53 = *(_QWORD *)(v0 + 800);
      v54 = *(_QWORD *)(v0 + 792);
      v55 = *(void **)(*(_QWORD *)(v49 + 56) + 8 * v50);
      swift_endAccess();
      v56 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      v15 = v55;
      v56(v52, v54);
      v13 = v224;
    }
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 864);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 792));
    swift_beginAccess();
    v37 = *(_QWORD *)(v36 + 16);
    v13 = v224;
    if (!*(_QWORD *)(v37 + 16))
      goto LABEL_120;
    v38 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 840));
    if ((v39 & 1) == 0)
      goto LABEL_120;
    v40 = *(_QWORD *)(v0 + 840);
    v41 = *(_QWORD *)(v0 + 800);
    v42 = *(_QWORD *)(v0 + 792);
    v43 = *(void **)(*(_QWORD *)(v37 + 56) + 8 * v38);
    swift_endAccess();
    v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v15 = v43;
    v44(v40, v42);
  }
  *(_QWORD *)(v0 + 952) = v15;
  v57 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v58 = (uint64_t)objc_msgSend((id)v15, sel_pageCount);
  if (v58 < 0)
  {
LABEL_92:
    __break(1u);
  }
  else
  {
    v10 = v58;
    v233 = (void *)v15;
    if (!v58)
    {
      v225 = v13;
      goto LABEL_47;
    }
    if (one-time initialization token for lock == -1)
      goto LABEL_20;
  }
  v58 = swift_once();
LABEL_20:
  v59 = 0;
  v231 = *(_QWORD *)(v0 + 592);
  v228 = *(_QWORD *)(v0 + 552);
  v60 = *(_QWORD *)(v0 + 544);
  v222 = v60;
  do
  {
    if (v10 == v59)
    {
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v61 = static PaperKitPDFDocument.lock;
    v62 = swift_task_alloc();
    *(_QWORD *)(v62 + 16) = v15;
    *(_QWORD *)(v62 + 24) = v59;
    v63 = swift_task_alloc();
    *(_QWORD *)(v63 + 16) = partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(_QWORD *)(v63 + 24) = v62;
    v64 = (os_unfair_lock_s *)(v61 + 16);
    os_unfair_lock_lock(v64);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v65, *(uint64_t (**)(void))(v63 + 16));
    if (v13)
    {
LABEL_45:
      os_unfair_lock_unlock(v64);
      return swift_task_dealloc();
    }
    v66 = *(_QWORD *)(v0 + 544);
    v67 = *(_QWORD *)(v0 + 520);
    os_unfair_lock_unlock(v64);
    swift_task_dealloc();
    swift_task_dealloc();
    v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v228 + 48);
    if (v68(v67, 1, v66) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 520), &demangling cache variable for type metadata for PageId?);
      v69 = objc_msgSend(v233, sel_pageAtIndex_, v59);
      if (!v69)
        goto LABEL_119;
      v70 = v69;
      v71 = *(_QWORD *)(v0 + 544);
      v72 = *(_QWORD *)(v0 + 512);
      type metadata accessor for PaperKitPDFPage(0);
      v73 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v73, v72, &demangling cache variable for type metadata for PageId?);

      if (v68(v72, 1, v71) == 1)
      {
        v74 = *(_QWORD *)(v0 + 584);
        v75 = *(_QWORD *)(v0 + 560);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 512), &demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v75, 1, 1, v74);
        v76 = v75 + *(int *)(v222 + 20);
        v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v76, 1, 1, v77);
        v13 = type metadata accessor for PageId;
      }
      else
      {
        v13 = type metadata accessor for PageId;
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 560), type metadata accessor for PageId);
      }
    }
    else
    {
      v13 = type metadata accessor for PageId;
      outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 560), type metadata accessor for PageId);
    }
    v78 = *(_QWORD *)(v0 + 632);
    v79 = *(_QWORD *)(v0 + 584);
    v80 = *(_QWORD *)(v0 + 560);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v80, v78, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties(v80, type metadata accessor for PageId);
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v231 + 48))(v78, 1, v79);
    v82 = *(_QWORD *)(v0 + 632);
    if (v81 == 1)
    {
      v58 = outlined destroy of StocksKitCurrencyCache.Provider?(v82, &demangling cache variable for type metadata for PDFPageID?);
      goto LABEL_22;
    }
    v83 = *(_QWORD *)(v0 + 608);
    v84 = *(Swift::UInt **)(v0 + 600);
    outlined init with take of PKStrokeStruct(v82, v83, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    outlined init with copy of PDFPageID(v83, (uint64_t)v84);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v84);
    v60 = v57[2];
    v87 = (v86 & 1) == 0;
    v58 = v60 + v87;
    if (__OFADD__(v60, v87))
      goto LABEL_87;
    v88 = v86;
    if (v57[3] >= v58)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v86 & 1) == 0)
          goto LABEL_41;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v88 & 1) == 0)
          goto LABEL_41;
      }
    }
    else
    {
      v89 = *(Swift::UInt **)(v0 + 600);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, isUniquelyReferenced_nonNull_native);
      v90 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
      if ((v88 & 1) != (v91 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      v15 = v90;
      if ((v88 & 1) == 0)
      {
LABEL_41:
        v92 = *(_QWORD *)(v0 + 600);
        v57[(v15 >> 6) + 8] |= 1 << v15;
        outlined init with copy of PDFPageID(v92, v57[6] + *(_QWORD *)(v231 + 72) * v15);
        *(_QWORD *)(v57[7] + 8 * v15) = v59;
        v93 = v57[2];
        v94 = __OFADD__(v93, 1);
        v95 = v93 + 1;
        if (v94)
        {
          __break(1u);
          goto LABEL_92;
        }
        v57[2] = v95;
        goto LABEL_43;
      }
    }
    *(_QWORD *)(v57[7] + 8 * v15) = v59;
LABEL_43:
    v96 = *(_QWORD *)(v0 + 608);
    v97 = *(_QWORD *)(v0 + 600);
    swift_bridgeObjectRelease();
    outlined destroy of PKStrokeProperties(v97, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v58 = outlined destroy of PKStrokeProperties(v96, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_22:
    v15 = (unint64_t)v233;
    v13 = 0;
    ++v59;
  }
  while (v10 != v59);
  v225 = 0;
LABEL_47:
  *(_QWORD *)(v0 + 960) = v57;
  v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
  v99 = *(_QWORD *)(v0 + 720);
  v100 = *(_QWORD *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  if (v98(v99, 1, v100) != 1)
  {
    v232 = *(_QWORD *)(v0 + 592);
    v221 = *(_QWORD *)(v0 + 552);
    v223 = *(_QWORD *)(v0 + 544);
    v227 = *(_QWORD *)(v0 + 664);
    v229 = *(void (**)(_QWORD, _QWORD, _QWORD))(v227 + 32);
    do
    {
      v125 = *(_QWORD *)(v0 + 640);
      v126 = *(_QWORD *)(v0 + 584);
      v229(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 656));
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_3.subscript.getter();
      v127 = *(_QWORD *)(v0 + 160);
      v128 = *(_QWORD *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 136), v127);
      (*(void (**)(uint64_t, uint64_t))(v128 + 88))(v127, v128);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v125, 1, v126) == 1)
      {
        v121 = *(_QWORD *)(v0 + 640);
        (*(void (**)(_QWORD, _QWORD))(v227 + 8))(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 656));
        outlined destroy of StocksKitCurrencyCache.Provider?(v121, &demangling cache variable for type metadata for PDFPageID?);
        __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      }
      else
      {
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        __swift_destroy_boxed_opaque_existential_1(v0 + 136);
        if (v57[2])
        {
          v129 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 616));
          if ((v130 & 1) != 0)
          {
            v131 = *(_QWORD *)(v57[7] + 8 * v129);
            if (one-time initialization token for lock != -1)
              swift_once();
            v132 = static PaperKitPDFDocument.lock;
            v133 = swift_task_alloc();
            *(_QWORD *)(v133 + 16) = v233;
            *(_QWORD *)(v133 + 24) = v131;
            v134 = swift_task_alloc();
            *(_QWORD *)(v134 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
            *(_QWORD *)(v134 + 24) = v133;
            v64 = (os_unfair_lock_s *)(v132 + 16);
            os_unfair_lock_lock(v64);
            specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v135, *(uint64_t (**)(void))(v134 + 16));
            if (v225)
              goto LABEL_45;
            v226 = v131;
            v136 = *(_QWORD *)(v0 + 544);
            v137 = *(_QWORD *)(v0 + 536);
            os_unfair_lock_unlock(v64);
            swift_task_dealloc();
            swift_task_dealloc();
            v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48);
            if (v138(v137, 1, v136) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for PageId?);
              v139 = objc_msgSend(v233, sel_pageAtIndex_, v226);
              if (!v139)
                goto LABEL_121;
              v140 = v139;
              v141 = *(_QWORD *)(v0 + 544);
              v142 = *(_QWORD *)(v0 + 528);
              type metadata accessor for PaperKitPDFPage(0);
              v143 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
              swift_beginAccess();
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v143, v142, &demangling cache variable for type metadata for PageId?);

              if (v138(v142, 1, v141) == 1)
              {
                v144 = *(_QWORD *)(v0 + 584);
                v145 = *(_QWORD *)(v0 + 576);
                outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 528), &demangling cache variable for type metadata for PageId?);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v232 + 56))(v145, 1, 1, v144);
                v146 = v223;
                v147 = v145 + *(int *)(v223 + 20);
                v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 56))(v147, 1, 1, v148);
LABEL_70:
                v153 = *(_QWORD *)(v0 + 576);
                v154 = *(_QWORD *)(v0 + 504);
                outlined init with copy of Ref<PKStrokeInheritedProperties>?(v153 + *(int *)(v146 + 20), v154, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
                outlined destroy of PKStrokeProperties(v153, type metadata accessor for PageId);
                v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                v156 = *(_QWORD *)(v155 - 8);
                v157 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155);
                outlined destroy of StocksKitCurrencyCache.Provider?(v154, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
                v158 = *(_QWORD *)(v0 + 696);
                if (v157 == 1)
                {
                  v218 = *(_QWORD *)(v0 + 656);
                  v219 = *(_QWORD *)(v0 + 616);
                  v159 = *(_QWORD *)(v0 + 568);
                  v160 = *(_QWORD *)(v0 + 496);
                  (*(void (**)(_QWORD, uint64_t))(v227 + 16))(*(_QWORD *)(v0 + 688), v158);
                  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
                  WeakTagged_3.init(_:)();
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v156 + 56))(v160, 0, 1, v155);
                  PaperKitPDFDocument.subscript.getter(v226, v159);
                  outlined assign with take of WeakTagged_3<TaggedPaperPage>?(v160, v159 + *(int *)(v223 + 20));
                  PaperKitPDFDocument.subscript.setter(v159, v226);
                  outlined destroy of PKStrokeProperties(v219, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                  (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v158, v218);
                }
                else
                {
                  v161 = *(_QWORD *)(v0 + 656);
                  outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                  (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v158, v161);
                }
                v225 = 0;
                goto LABEL_55;
              }
              v151 = *(_QWORD *)(v0 + 576);
              v152 = *(_QWORD *)(v0 + 528);
            }
            else
            {
              v151 = *(_QWORD *)(v0 + 576);
              v152 = *(_QWORD *)(v0 + 536);
            }
            outlined init with take of PKStrokeStruct(v152, v151, type metadata accessor for PageId);
            v146 = v223;
            goto LABEL_70;
          }
        }
        v149 = *(_QWORD *)(v0 + 696);
        v150 = *(_QWORD *)(v0 + 656);
        outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 616), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v149, v150);
      }
LABEL_55:
      v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
      v123 = *(_QWORD *)(v0 + 720);
      v124 = *(_QWORD *)(v0 + 656);
      CROrderedSet.Iterator.next()();
    }
    while (v122(v123, 1, v124) != 1);
  }
  v101 = *(_QWORD *)(v0 + 864);
  v103 = *(_QWORD *)(v0 + 376);
  v102 = *(_QWORD *)(v0 + 384);
  v220(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 736));
  swift_beginAccess();
  v104 = *(_QWORD *)(v101 + 16);
  swift_bridgeObjectRetain();
  v105 = specialized PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v233, v102, v104, v103);
  *(_QWORD *)(v0 + 968) = v105;
  swift_bridgeObjectRelease();
  v106 = v105[32];
  *(_BYTE *)(v0 + 91) = v106;
  v107 = -1;
  v108 = -1 << v106;
  if (-v108 < 64)
    v107 = ~(-1 << -(char)v108);
  v109 = v107 & *((_QWORD *)v105 + 7);
  if (v109)
  {
    v110 = 0;
    v111 = __clz(__rbit64(v109));
    v112 = (v109 - 1) & v109;
    v58 = *(_QWORD *)(v0 + 968);
LABEL_52:
    *(_QWORD *)(v0 + 984) = v112;
    *(_QWORD *)(v0 + 976) = v110;
    v113 = *(_QWORD *)(v0 + 816);
    v114 = *(_QWORD *)(v0 + 808);
    v115 = *(_QWORD *)(v0 + 800);
    v116 = *(_QWORD *)(v0 + 792);
    v117 = *(_QWORD *)(v58 + 48) + *(_QWORD *)(v115 + 72) * v111;
    v118 = *(void (**)(uint64_t, unint64_t, uint64_t))(v115 + 16);
    *(_QWORD *)(v0 + 992) = v118;
    v118(v113, v117, v116);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v114, v113, v116);
    v119 = swift_task_alloc();
    *(_QWORD *)(v0 + 1000) = v119;
    *(_QWORD *)(v119 + 16) = v114;
    v120 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1008) = v120;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *v120 = v0;
    v120[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
    return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
  }
  v60 = 63 - v108;
  v58 = *(_QWORD *)(v0 + 968);
  if (v60 > 0x7F)
  {
    v162 = *(_QWORD *)(v58 + 64);
    if (v162)
    {
      v110 = 1;
LABEL_77:
      v112 = (v162 - 1) & v162;
      v111 = __clz(__rbit64(v162)) + (v110 << 6);
      goto LABEL_52;
    }
    if (v60 >= 0xC0)
    {
      v162 = *(_QWORD *)(v58 + 72);
      if (v162)
      {
        v110 = 2;
        goto LABEL_77;
      }
      if (v60 >= 0x100)
      {
        v162 = *(_QWORD *)(v58 + 80);
        if (v162)
        {
          v110 = 3;
          goto LABEL_77;
        }
LABEL_88:
        if (v60 >= 0x140)
        {
          v162 = *(_QWORD *)(v58 + 88);
          if (v162)
          {
            v110 = 4;
            goto LABEL_77;
          }
          if (v60 >= 0x180)
          {
            v162 = *(_QWORD *)(v58 + 96);
            if (v162)
            {
              v110 = 5;
            }
            else
            {
              v163 = 0;
              v164 = v60 >> 6;
              if (v164 <= 6)
                v164 = 6;
              v165 = v164 - 6;
              do
              {
                if (v165 == v163)
                  goto LABEL_103;
                v162 = *(_QWORD *)(v58 + 104 + 8 * v163++);
              }
              while (!v162);
              v110 = v163 + 5;
            }
            goto LABEL_77;
          }
        }
      }
    }
  }
LABEL_103:
  v167 = *(_QWORD *)(v0 + 384);
  v166 = *(_QWORD *)(v0 + 392);
  v168 = *(_QWORD *)(v0 + 376);
  swift_release();
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v167, v168, v166);
  if (v168 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_117:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v234 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v234);
  }
  v170 = *(_QWORD *)(v0 + 480);
  v169 = *(_QWORD *)(v0 + 488);
  v172 = *(_QWORD *)(v0 + 464);
  v171 = *(_QWORD *)(v0 + 472);
  v173 = *(_QWORD *)(v0 + 448);
  v174 = *(_QWORD *)(v0 + 456);
  v175 = *(_QWORD *)(v0 + 400);
  v176 = *(_QWORD *)(v0 + 376);
  outlined copy of PaperDocument.PDFDocumentUse(v176);
  outlined consume of PaperDocument.PDFDocumentUse(v176);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v174 + 16))(v171, v175, v173);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v174 + 32))(v172, v171, v173);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v177 = *(int *)(v170 + 36);
  *(_DWORD *)(v0 + 1032) = v177;
  *(_QWORD *)(v169 + v177) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  v179 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (2)
  {
    v180 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
    v181 = *(_QWORD *)(v0 + 712);
    v182 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v180(v181, 1, v182) == 1)
    {
      v183 = *(_QWORD *)(v0 + 432);
      v185 = *(_QWORD *)(v0 + 408);
      v184 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56))(v183, 1, 1, v185);
LABEL_112:
      v202 = *(_QWORD *)(v0 + 440);
      v204 = *(_QWORD *)(v0 + 408);
      v203 = *(_QWORD *)(v0 + 416);
      outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v202, v179);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v203 + 48))(v202, 1, v204) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_117;
      }
      v205 = *(void **)(v0 + 952);
      v206 = *(char **)(v0 + 440);
      v207 = *(_QWORD *)v206;
      (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v206[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
      v208 = objc_msgSend(v205, (SEL)p_base_prots[407], v207);
      *(_QWORD *)(v0 + 1016) = v208;
      if (v208)
      {
        v209 = v208;
        type metadata accessor for PaperKitPDFPage(0);
        v210 = swift_dynamicCastClass();
        if (v210)
        {
          v211 = v210;
          v212 = *(_QWORD *)(v0 + 392);
          v213 = *(_QWORD *)(v0 + 376);
          v214 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
          SharedTagged_3.subscript.getter();
          v215 = *(_QWORD *)(v0 + 200);
          v216 = *(_QWORD *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v215);
          *(_QWORD *)(v0 + 368) = v213;
          outlined init with take of (key: Int, value: AnyCRValue)?(v212, v0 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
          v230 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v216 + 144) + *(_QWORD *)(v216 + 144));
          v217 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1024) = v217;
          *v217 = v0;
          v217[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          return v230(v211, v0 + 368, *(_QWORD *)(v0 + 384), v0 + 16, *(_QWORD *)(v0 + 880), v214, v215, v216);
        }

      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
      continue;
    }
    break;
  }
  v186 = v179;
  v187 = p_base_prots;
  v188 = *(int *)(v0 + 1032);
  v189 = *(_QWORD *)(v0 + 680);
  v190 = *(_QWORD *)(v0 + 656);
  v191 = *(_QWORD *)(v0 + 488);
  v192 = *(_QWORD *)(v0 + 424);
  v193 = *(_QWORD *)(v0 + 408);
  v194 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
  v194(v189, *(_QWORD *)(v0 + 712), v190);
  v195 = v192 + *(int *)(v193 + 48);
  v196 = *(_QWORD *)(v191 + v188);
  v194(v195, v189, v190);
  if (!__OFADD__(v196, 1))
  {
    v197 = *(_QWORD *)(v0 + 656);
    v198 = *(_QWORD **)(v0 + 432);
    v200 = *(_QWORD *)(v0 + 408);
    v199 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1032)) = v196 + 1;
    v201 = (char *)v198 + *(int *)(v200 + 48);
    *v198 = v196;
    v194((uint64_t)v201, v195, v197);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v198, 0, 1, v200);
    p_base_prots = v187;
    v179 = v186;
    goto LABEL_112;
  }
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  swift_endAccess();
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v13;

  v1 = *(_QWORD *)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 744);
  v3 = *(_QWORD *)(v0 + 736);
  v4 = *(_QWORD *)(v0 + 704);
  v5 = *(_QWORD *)(v0 + 664);
  v6 = *(_QWORD *)(v0 + 656);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 792));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(void **)(v0 + 944);
  if (one-time initialization token for logger != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1DDB0F000, v9, v10, "Could not create PDFDocument.", v11, 2u);
    MEMORY[0x1DF0E6558](v11, -1, -1);
  }

  v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v13);
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  id v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, unint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __objc2_prot_list **p_base_prots;
  uint64_t *v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  __objc2_prot_list **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;

  v1 = *(void **)(v0 + 360);
  if ((unint64_t)v1 >= 2)
  {
    v2 = *(_QWORD *)(v0 + 808);
    v3 = v1;
    LOBYTE(v2) = PaperKitPDFDocument.finishLoading(as:)(v2);
    outlined consume of PaperKitPDFDocument??(v1);
    if ((v2 & 1) != 0)
    {
      v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v5 = *(_QWORD *)(v0 + 808);
      v6 = *(_QWORD *)(v0 + 792);
      v88 = *(char **)(v0 + 952);
      v7 = *(_QWORD *)(v0 + 384);
      v86 = *(_QWORD *)(v0 + 376);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CRAsset, PaperKitPDFDocument)>);
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument));
      v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
      v10 = (v9 + 32) & ~v9;
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1DDF32CF0;
      v12 = v11 + v10;
      v13 = *(int *)(v8 + 48);
      v4(v12, v5, v6);
      *(_QWORD *)(v12 + v13) = v3;
      v14 = v3;
      v15 = specialized Dictionary.init(dictionaryLiteral:)(v11);
      specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(v88, v7, v15, v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined consume of PaperKitPDFDocument??(v1);
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 792));
  v17 = *(_QWORD *)(v0 + 984);
  v18 = *(_QWORD *)(v0 + 976);
  if (v17)
  {
    v19 = (v17 - 1) & v17;
    v20 = __clz(__rbit64(v17)) | (v18 << 6);
    result = *(_QWORD *)(v0 + 968);
LABEL_7:
    *(_QWORD *)(v0 + 984) = v19;
    *(_QWORD *)(v0 + 976) = v18;
    v21 = *(_QWORD *)(v0 + 816);
    v22 = *(_QWORD *)(v0 + 808);
    v23 = *(_QWORD *)(v0 + 800);
    v24 = *(_QWORD *)(v0 + 792);
    v25 = *(_QWORD *)(result + 48) + *(_QWORD *)(v23 + 72) * v20;
    v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    *(_QWORD *)(v0 + 992) = v26;
    v26(v21, v25, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v21, v24);
    v27 = swift_task_alloc();
    *(_QWORD *)(v0 + 1000) = v27;
    *(_QWORD *)(v27 + 16) = v22;
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1008) = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *v28 = v0;
    v28[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
    return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
  }
  v29 = v18 + 1;
  if (__OFADD__(v18, 1))
    goto LABEL_40;
  v30 = (unint64_t)((1 << *(_BYTE *)(v0 + 91)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 968);
  if (v29 < v30)
  {
    v31 = result + 56;
    v32 = *(_QWORD *)(result + 56 + 8 * v29);
    ++v18;
    if (v32)
    {
LABEL_11:
      v19 = (v32 - 1) & v32;
      v20 = __clz(__rbit64(v32)) + (v18 << 6);
      goto LABEL_7;
    }
    v18 = v29 + 1;
    if (v29 + 1 < v30)
    {
      v32 = *(_QWORD *)(v31 + 8 * v18);
      if (v32)
        goto LABEL_11;
      v18 = v29 + 2;
      if (v29 + 2 < v30)
      {
        v32 = *(_QWORD *)(v31 + 8 * v18);
        if (v32)
          goto LABEL_11;
        v18 = v29 + 3;
        if (v29 + 3 < v30)
        {
          v32 = *(_QWORD *)(v31 + 8 * v18);
          if (v32)
            goto LABEL_11;
          v33 = v29 + 4;
          if (v33 < v30)
          {
            v32 = *(_QWORD *)(v31 + 8 * v33);
            if (v32)
            {
              v18 = v33;
              goto LABEL_11;
            }
            while (1)
            {
              v18 = v33 + 1;
              if (__OFADD__(v33, 1))
                goto LABEL_41;
              if (v18 >= v30)
                break;
              v32 = *(_QWORD *)(v31 + 8 * v18);
              ++v33;
              if (v32)
                goto LABEL_11;
            }
          }
        }
      }
    }
  }
  v35 = *(_QWORD *)(v0 + 384);
  v34 = *(_QWORD *)(v0 + 392);
  v36 = *(_QWORD *)(v0 + 376);
  swift_release();
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v35, v36, v34);
  if (v36 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v89 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v89);
  }
  v38 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 488);
  v40 = *(_QWORD *)(v0 + 464);
  v39 = *(_QWORD *)(v0 + 472);
  v41 = *(_QWORD *)(v0 + 448);
  v42 = *(_QWORD *)(v0 + 456);
  v43 = *(_QWORD *)(v0 + 400);
  v44 = *(_QWORD *)(v0 + 376);
  outlined copy of PaperDocument.PDFDocumentUse(v44);
  outlined consume of PaperDocument.PDFDocumentUse(v44);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v39, v43, v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v40, v39, v41);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v45 = *(int *)(v38 + 36);
  *(_DWORD *)(v0 + 1032) = v45;
  *(_QWORD *)(v37 + v45) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  v47 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (1)
  {
    v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
    v49 = *(_QWORD *)(v0 + 712);
    v50 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v48(v49, 1, v50) == 1)
    {
      v51 = *(_QWORD *)(v0 + 432);
      v53 = *(_QWORD *)(v0 + 408);
      v52 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v53);
      goto LABEL_33;
    }
    v54 = v47;
    v55 = p_base_prots;
    v56 = *(int *)(v0 + 1032);
    v57 = *(_QWORD *)(v0 + 680);
    v58 = *(_QWORD *)(v0 + 656);
    v59 = *(_QWORD *)(v0 + 488);
    v60 = *(_QWORD *)(v0 + 424);
    v61 = *(_QWORD *)(v0 + 408);
    v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
    v62(v57, *(_QWORD *)(v0 + 712), v58);
    v63 = v60 + *(int *)(v61 + 48);
    v64 = *(_QWORD *)(v59 + v56);
    result = v62(v63, v57, v58);
    if (__OFADD__(v64, 1))
      break;
    v65 = *(_QWORD *)(v0 + 656);
    v66 = *(_QWORD **)(v0 + 432);
    v68 = *(_QWORD *)(v0 + 408);
    v67 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1032)) = v64 + 1;
    v69 = (char *)v66 + *(int *)(v68 + 48);
    *v66 = v64;
    v62((uint64_t)v69, v63, v65);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v66, 0, 1, v68);
    p_base_prots = v55;
    v47 = v54;
LABEL_33:
    v70 = *(_QWORD *)(v0 + 440);
    v72 = *(_QWORD *)(v0 + 408);
    v71 = *(_QWORD *)(v0 + 416);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v70, v47);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v72) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
      goto LABEL_38;
    }
    v73 = *(void **)(v0 + 952);
    v74 = *(char **)(v0 + 440);
    v75 = *(_QWORD *)v74;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v74[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
    v76 = objc_msgSend(v73, (SEL)p_base_prots[407], v75);
    *(_QWORD *)(v0 + 1016) = v76;
    if (v76)
    {
      v77 = v76;
      type metadata accessor for PaperKitPDFPage(0);
      v78 = swift_dynamicCastClass();
      if (v78)
      {
        v79 = v78;
        v80 = *(_QWORD *)(v0 + 392);
        v81 = *(_QWORD *)(v0 + 376);
        v82 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
        SharedTagged_3.subscript.getter();
        v83 = *(_QWORD *)(v0 + 200);
        v84 = *(_QWORD *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v83);
        *(_QWORD *)(v0 + 368) = v81;
        outlined init with take of (key: Int, value: AnyCRValue)?(v80, v0 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
        v87 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v84 + 144) + *(_QWORD *)(v84 + 144));
        v85 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 1024) = v85;
        *v85 = v0;
        v85[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
        return v87(v79, v0 + 368, *(_QWORD *)(v0 + 384), v0 + 16, *(_QWORD *)(v0 + 880), v82, v83, v84);
      }

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __objc2_prot_list **p_base_prots;
  uint64_t *v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __objc2_prot_list **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t (*v45)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  p_base_prots = &MiniMenuController.base_prots;
  v5 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (1)
  {
    v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 920);
    v7 = *(_QWORD *)(v0 + 712);
    v8 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v6(v7, 1, v8) == 1)
    {
      v9 = *(_QWORD *)(v0 + 432);
      v11 = *(_QWORD *)(v0 + 408);
      v10 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v11);
      goto LABEL_8;
    }
    v12 = v5;
    v13 = p_base_prots;
    v14 = *(int *)(v0 + 1032);
    v15 = *(_QWORD *)(v0 + 680);
    v16 = *(_QWORD *)(v0 + 656);
    v17 = *(_QWORD *)(v0 + 488);
    v18 = *(_QWORD *)(v0 + 424);
    v19 = *(_QWORD *)(v0 + 408);
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
    v20(v15, *(_QWORD *)(v0 + 712), v16);
    v21 = v18 + *(int *)(v19 + 48);
    v22 = *(_QWORD *)(v17 + v14);
    result = v20(v21, v15, v16);
    if (__OFADD__(v22, 1))
      break;
    v24 = *(_QWORD *)(v0 + 656);
    v25 = *(_QWORD **)(v0 + 432);
    v27 = *(_QWORD *)(v0 + 408);
    v26 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1032)) = v22 + 1;
    v28 = (char *)v25 + *(int *)(v27 + 48);
    *v25 = v22;
    v20((uint64_t)v28, v21, v24);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v25, 0, 1, v27);
    p_base_prots = v13;
    v5 = v12;
LABEL_8:
    v29 = *(_QWORD *)(v0 + 440);
    v31 = *(_QWORD *)(v0 + 408);
    v30 = *(_QWORD *)(v0 + 416);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v29, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v29, 1, v31) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v46 = *(_QWORD *)(v0 + 952);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v46);
    }
    v32 = *(void **)(v0 + 952);
    v33 = *(char **)(v0 + 440);
    v34 = *(_QWORD *)v33;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v33[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
    v35 = objc_msgSend(v32, (SEL)p_base_prots[407], v34);
    *(_QWORD *)(v0 + 1016) = v35;
    if (v35)
    {
      v36 = v35;
      type metadata accessor for PaperKitPDFPage(0);
      v37 = swift_dynamicCastClass();
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)(v0 + 392);
        v40 = *(_QWORD *)(v0 + 376);
        v41 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
        SharedTagged_3.subscript.getter();
        v42 = *(_QWORD *)(v0 + 200);
        v43 = *(_QWORD *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v42);
        *(_QWORD *)(v0 + 368) = v40;
        outlined init with take of (key: Int, value: AnyCRValue)?(v39, v0 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
        v45 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v43 + 144) + *(_QWORD *)(v43 + 144));
        v44 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 1024) = v44;
        *v44 = v0;
        v44[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
        return v45(v38, v0 + 368, *(_QWORD *)(v0 + 384), v0 + 16, *(_QWORD *)(v0 + 880), v41, v42, v43);
      }

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
  }
  __break(1u);
  return result;
}

void specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, unint64_t *a2@<X2>, CGRect *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  uint64_t v22;
  CGRect v23;
  CGRect v24;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (objc_class *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Ref.subscript.getter();
  v15 = specialized CRRegister<>.bounds(in:)(a2, v10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(objc_class *, uint64_t))(v7 + 8))(v10, v6);
  v23.origin.x = v11;
  v23.origin.y = v12;
  v23.size.width = v13;
  v23.size.height = v14;
  v24.origin.x = v15;
  v24.origin.y = v17;
  v24.size.width = v19;
  v24.size.height = v21;
  *a3 = CGRectUnion(v23, v24);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  uint64_t v22;
  CGRect v23;
  CGRect v24;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (objc_class *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Ref.subscript.getter();
  v15 = specialized CRRegister<>.bounds(in:)(a2, v10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(objc_class *, uint64_t))(v7 + 8))(v10, v6);
  v23.origin.x = v11;
  v23.origin.y = v12;
  v23.size.width = v13;
  v23.size.height = v14;
  v24.origin.x = v15;
  v24.origin.y = v17;
  v24.size.width = v19;
  v24.size.height = v21;
  *a3 = CGRectUnion(v23, v24);
}

uint64_t specialized static CRDataStoreBundle<>.paperBundle(_:sync:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, _QWORD, uint64_t);
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v25;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v11, v12);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a2, (uint64_t)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v14 = type metadata accessor for CRCodableVersion();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1DDF33AB0;
  v19 = v18 + v17;
  v20 = *(void (**)(unint64_t, _QWORD, uint64_t))(v15 + 104);
  v20(v19, *MEMORY[0x1E0D12370], v14);
  v20(v19 + v16, *MEMORY[0x1E0D12378], v14);
  v21 = one-time initialization token for allReadableFileFormatVersions;
  v22 = a1;
  if (v21 != -1)
    swift_once();
  v23 = one-time initialization token for allFileFormatVersions;
  swift_bridgeObjectRetain();
  if (v23 != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  return CRDataStoreBundle.init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)();
}

uint64_t sub_1DDC0BAAC()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return CRRegister.wrappedValue.getter();
}

void partial apply for specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
  uint64_t v2;

  specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(a1, *(unint64_t **)(v2 + 16), a2);
}

{
  uint64_t v2;

  specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(a1, *(unint64_t **)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in Capsule<>.transformContents(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Capsule<>.transformContents(_:)(a1, *(CGFloat **)(v1 + 16));
}

uint64_t partial apply for closure #1 in static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)()
{
  double *v0;

  return closure #1 in static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in Capsule<>.init(_:fromPDF:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Capsule<>.init(_:fromPDF:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type PaperKitCodingError and conformance PaperKitCodingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PaperKitCodingError and conformance PaperKitCodingError;
  if (!lazy protocol witness table cache variable for type PaperKitCodingError and conformance PaperKitCodingError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperKitCodingError, &type metadata for PaperKitCodingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperKitCodingError and conformance PaperKitCodingError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PaperKitCodingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC0BBF4 + 4 * byte_1DDF36D35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDC0BC28 + 4 * byte_1DDF36D30[v4]))();
}

uint64_t sub_1DDC0BC28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC0BC30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC0BC38);
  return result;
}

uint64_t sub_1DDC0BC44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC0BC4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDC0BC50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC0BC58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PaperKitCodingError()
{
  return &type metadata for PaperKitCodingError;
}

uint64_t sub_1DDC0BC74()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined assign with take of WeakTagged_3<TaggedPaperPage>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in PaperKitPDFDocument.subscript.getterpartial apply@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in PaperKitPDFDocument.subscript.getter(a1);
}

uint64_t FormContentType.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if ((unint64_t)(result - 2) >= 0x40)
    v2 = 1;
  else
    v2 = result;
  *a2 = v2;
  return result;
}

PaperKit::FormContentType __swiftcall FormContentType.init(_:)(__C::AFTextContentType a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  PaperKit::FormContentType result;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  NSString v217;

  v3 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_15:

    v21 = 1;
    goto LABEL_16;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
LABEL_18:

    v21 = 2;
    goto LABEL_16;
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:

    v21 = 3;
    goto LABEL_16;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
    goto LABEL_20;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:

    v21 = 4;
    goto LABEL_16;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
    goto LABEL_25;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31)
  {
    swift_bridgeObjectRelease_n();
LABEL_30:

    v21 = 5;
    goto LABEL_16;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
    goto LABEL_30;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v36)
  {
    swift_bridgeObjectRelease_n();
LABEL_35:

    v21 = 6;
    goto LABEL_16;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
    goto LABEL_35;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;
  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v40 == v41)
  {
    swift_bridgeObjectRelease_n();
LABEL_40:

    v21 = 7;
    goto LABEL_16;
  }
  v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
    goto LABEL_40;
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v45 == v46)
  {
    swift_bridgeObjectRelease_n();
LABEL_45:

    v21 = 8;
    goto LABEL_16;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
    goto LABEL_45;
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v50 = v49;
  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v50 == v51)
  {
    swift_bridgeObjectRelease_n();
LABEL_50:

    v21 = 9;
    goto LABEL_16;
  }
  v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v52 & 1) != 0)
    goto LABEL_50;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
  {
    swift_bridgeObjectRelease_n();
LABEL_55:

    v21 = 10;
    goto LABEL_16;
  }
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) != 0)
    goto LABEL_55;
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v60 = v59;
  if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v60 == v61)
  {
    swift_bridgeObjectRelease_n();
LABEL_60:

    v21 = 11;
    goto LABEL_16;
  }
  v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) != 0)
    goto LABEL_60;
  v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v65 = v64;
  if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66)
  {
    swift_bridgeObjectRelease_n();
LABEL_65:

    v21 = 12;
    goto LABEL_16;
  }
  v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
    goto LABEL_65;
  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v70 = v69;
  if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v70 == v71)
  {
    swift_bridgeObjectRelease_n();
LABEL_70:

    v21 = 13;
    goto LABEL_16;
  }
  v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v72 & 1) != 0)
    goto LABEL_70;
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v75 = v74;
  if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76)
  {
    swift_bridgeObjectRelease_n();
LABEL_75:

    v21 = 14;
    goto LABEL_16;
  }
  v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v77 & 1) != 0)
    goto LABEL_75;
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v80 = v79;
  if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v80 == v81)
  {
    swift_bridgeObjectRelease_n();
LABEL_80:

    v21 = 15;
    goto LABEL_16;
  }
  v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v82 & 1) != 0)
    goto LABEL_80;
  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v85 = v84;
  if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v85 == v86)
  {
    swift_bridgeObjectRelease_n();
LABEL_85:

    v21 = 16;
    goto LABEL_16;
  }
  v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v87 & 1) != 0)
    goto LABEL_85;
  v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v90 = v89;
  if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v90 == v91)
  {
    swift_bridgeObjectRelease_n();
LABEL_90:

    v21 = 17;
    goto LABEL_16;
  }
  v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v92 & 1) != 0)
    goto LABEL_90;
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v95 = v94;
  if (v93 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v95 == v96)
  {
    swift_bridgeObjectRelease_n();
LABEL_95:

    v21 = 18;
    goto LABEL_16;
  }
  v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v97 & 1) != 0)
    goto LABEL_95;
  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v100 = v99;
  if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v100 == v101)
  {
    swift_bridgeObjectRelease_n();
LABEL_100:

    v21 = 19;
    goto LABEL_16;
  }
  v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v102 & 1) != 0)
    goto LABEL_100;
  v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v105 = v104;
  if (v103 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v105 == v106)
  {
    swift_bridgeObjectRelease_n();
LABEL_105:

    v21 = 20;
    goto LABEL_16;
  }
  v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v107 & 1) != 0)
    goto LABEL_105;
  v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v110 = v109;
  if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v110 == v111)
  {
    swift_bridgeObjectRelease_n();
LABEL_110:

    v21 = 21;
    goto LABEL_16;
  }
  v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v112 & 1) != 0)
    goto LABEL_110;
  v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v115 = v114;
  if (v113 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v115 == v116)
  {
    swift_bridgeObjectRelease_n();
LABEL_115:

    v21 = 22;
    goto LABEL_16;
  }
  v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v117 & 1) != 0)
    goto LABEL_115;
  v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v120 = v119;
  if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v120 == v121)
  {
    swift_bridgeObjectRelease_n();
LABEL_120:

    v21 = 23;
    goto LABEL_16;
  }
  v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v122 & 1) != 0)
    goto LABEL_120;
  v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v125 = v124;
  if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v125 == v126)
  {
    swift_bridgeObjectRelease_n();
LABEL_125:

    v21 = 24;
    goto LABEL_16;
  }
  v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v127 & 1) != 0)
    goto LABEL_125;
  v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v130 = v129;
  if (v128 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v130 == v131)
  {
    swift_bridgeObjectRelease_n();
LABEL_130:

    v21 = 25;
    goto LABEL_16;
  }
  v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v132 & 1) != 0)
    goto LABEL_130;
  v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v135 = v134;
  if (v133 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v135 == v136)
  {
    swift_bridgeObjectRelease_n();
LABEL_135:

    v21 = 26;
    goto LABEL_16;
  }
  v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v137 & 1) != 0)
    goto LABEL_135;
  v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v140 = v139;
  if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v140 == v141)
  {
    swift_bridgeObjectRelease_n();
LABEL_140:

    v21 = 27;
    goto LABEL_16;
  }
  v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v142 & 1) != 0)
    goto LABEL_140;
  v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v145 = v144;
  if (v143 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v145 == v146)
  {
    swift_bridgeObjectRelease_n();
LABEL_145:

    v21 = 28;
    goto LABEL_16;
  }
  v147 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v147 & 1) != 0)
    goto LABEL_145;
  v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v150 = v149;
  if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v150 == v151)
  {
    swift_bridgeObjectRelease_n();
LABEL_150:

    v21 = 29;
    goto LABEL_16;
  }
  v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v152 & 1) != 0)
    goto LABEL_150;
  v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v155 = v154;
  if (v153 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v155 == v156)
  {
    swift_bridgeObjectRelease_n();
LABEL_155:

    v21 = 30;
    goto LABEL_16;
  }
  v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v157 & 1) != 0)
    goto LABEL_155;
  v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v160 = v159;
  if (v158 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v160 == v161)
  {
    swift_bridgeObjectRelease_n();
LABEL_160:

    v21 = 31;
    goto LABEL_16;
  }
  v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v162 & 1) != 0)
    goto LABEL_160;
  v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v165 = v164;
  if (v163 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v165 == v166)
  {
    swift_bridgeObjectRelease_n();
LABEL_165:

    v21 = 32;
    goto LABEL_16;
  }
  v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v167 & 1) != 0)
    goto LABEL_165;
  v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v170 = v169;
  if (v168 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v170 == v171)
  {
    swift_bridgeObjectRelease_n();
LABEL_170:

    v21 = 33;
    goto LABEL_16;
  }
  v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v172 & 1) != 0)
    goto LABEL_170;
  v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v175 = v174;
  if (v173 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v175 == v176)
  {
    swift_bridgeObjectRelease_n();
LABEL_175:

    v21 = 37;
    goto LABEL_16;
  }
  v177 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v177 & 1) != 0)
    goto LABEL_175;
  v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v180 = v179;
  if (v178 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v180 == v181)
  {
    swift_bridgeObjectRelease_n();
LABEL_180:

    v21 = 38;
    goto LABEL_16;
  }
  v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v182 & 1) != 0)
    goto LABEL_180;
  v183 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v185 = v184;
  if (v183 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v185 == v186)
  {
    swift_bridgeObjectRelease_n();
LABEL_185:

    v21 = 39;
    goto LABEL_16;
  }
  v187 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v187 & 1) != 0)
    goto LABEL_185;
  v188 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v190 = v189;
  if (v188 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v190 == v191)
  {
    swift_bridgeObjectRelease_n();
LABEL_190:

    v21 = 40;
    goto LABEL_16;
  }
  v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v192 & 1) != 0)
    goto LABEL_190;
  v193 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v195 = v194;
  if (v193 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v195 == v196)
  {
    swift_bridgeObjectRelease_n();
LABEL_195:

    v21 = 42;
    goto LABEL_16;
  }
  v197 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v197 & 1) != 0)
    goto LABEL_195;
  v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v200 = v199;
  if (v198 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v200 == v201)
  {
    swift_bridgeObjectRelease_n();
LABEL_200:

    v21 = 43;
    goto LABEL_16;
  }
  v202 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v202 & 1) != 0)
    goto LABEL_200;
  v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v205 = v204;
  if (v203 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v205 == v206)
  {
    swift_bridgeObjectRelease_n();
LABEL_205:

    v21 = 44;
    goto LABEL_16;
  }
  v207 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v207 & 1) != 0)
    goto LABEL_205;
  v208 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v210 = v209;
  if (v208 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v210 == v211)
  {
    swift_bridgeObjectRelease_n();
LABEL_210:

    v21 = 45;
    goto LABEL_16;
  }
  v212 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v212 & 1) != 0)
    goto LABEL_210;
  v213 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v215 = v214;
  v21 = 46;
  if (v213 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v215 != v216)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      v21 = 46;
    else
      v21 = 1;
  }
  v217 = a1._rawValue;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_16:
  *v3 = v21;
  return result;
}

uint64_t FormContentType.crFormContentType.getter()
{
  char *v0;

  return qword_1DDF371D0[*v0];
}

PaperKit::FormContentType_optional __swiftcall FormContentType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;
  char v3;

  v2 = 0;
  v3 = 48;
  switch(rawValue)
  {
    case 0:
      goto LABEL_50;
    case 1:
      v2 = 1;
      goto LABEL_50;
    case 2:
      v2 = 2;
      goto LABEL_50;
    case 3:
      v2 = 3;
      goto LABEL_50;
    case 4:
      v2 = 4;
      goto LABEL_50;
    case 5:
      v2 = 5;
      goto LABEL_50;
    case 6:
      v2 = 6;
      goto LABEL_50;
    case 7:
      v2 = 7;
      goto LABEL_50;
    case 8:
      v2 = 8;
      goto LABEL_50;
    case 9:
      v2 = 9;
      goto LABEL_50;
    case 10:
      v2 = 10;
      goto LABEL_50;
    case 11:
      v2 = 11;
      goto LABEL_50;
    case 12:
      v2 = 12;
      goto LABEL_50;
    case 13:
      v2 = 13;
      goto LABEL_50;
    case 14:
      v2 = 14;
      goto LABEL_50;
    case 15:
      v2 = 15;
      goto LABEL_50;
    case 16:
      v2 = 16;
      goto LABEL_50;
    case 17:
      v2 = 17;
      goto LABEL_50;
    case 18:
      v2 = 18;
      goto LABEL_50;
    case 19:
      v2 = 19;
      goto LABEL_50;
    case 20:
      v2 = 20;
      goto LABEL_50;
    case 21:
      v2 = 21;
      goto LABEL_50;
    case 22:
      v2 = 22;
      goto LABEL_50;
    case 23:
      v2 = 23;
      goto LABEL_50;
    case 24:
      v2 = 24;
      goto LABEL_50;
    case 25:
      v2 = 25;
      goto LABEL_50;
    case 26:
      v2 = 26;
      goto LABEL_50;
    case 27:
      v2 = 27;
      goto LABEL_50;
    case 28:
      v2 = 28;
      goto LABEL_50;
    case 29:
      v2 = 29;
      goto LABEL_50;
    case 30:
      v2 = 30;
      goto LABEL_50;
    case 31:
      v2 = 31;
      goto LABEL_50;
    case 32:
      v2 = 32;
      goto LABEL_50;
    case 33:
      v2 = 33;
      goto LABEL_50;
    case 34:
      v2 = 34;
      goto LABEL_50;
    case 35:
      v2 = 35;
      goto LABEL_50;
    case 36:
      v2 = 36;
      goto LABEL_50;
    case 37:
      v2 = 37;
      goto LABEL_50;
    case 38:
      v2 = 38;
      goto LABEL_50;
    case 39:
      v2 = 39;
      goto LABEL_50;
    case 40:
      v2 = 40;
      goto LABEL_50;
    case 41:
      v2 = 41;
      goto LABEL_50;
    case 42:
      v2 = 42;
      goto LABEL_50;
    case 43:
      v2 = 43;
      goto LABEL_50;
    case 44:
      v2 = 44;
      goto LABEL_50;
    case 45:
      v2 = 45;
      goto LABEL_50;
    case 46:
      v2 = 46;
      goto LABEL_50;
    case 47:
      v2 = 47;
LABEL_50:
      v3 = v2;
      goto LABEL_51;
    case 48:
LABEL_51:
      *v1 = v3;
      break;
    case 49:
      *v1 = 49;
      break;
    case 50:
      *v1 = 50;
      break;
    case 51:
      *v1 = 51;
      break;
    case 52:
      *v1 = 52;
      break;
    case 53:
      *v1 = 53;
      break;
    case 54:
      *v1 = 54;
      break;
    case 55:
      *v1 = 55;
      break;
    case 56:
      *v1 = 56;
      break;
    case 57:
      *v1 = 57;
      break;
    case 58:
      *v1 = 58;
      break;
    case 59:
      *v1 = 59;
      break;
    case 60:
      *v1 = 60;
      break;
    case 61:
      *v1 = 61;
      break;
    case 62:
      *v1 = 62;
      break;
    case 63:
      *v1 = 63;
      break;
    case 64:
      *v1 = 64;
      break;
    case 65:
      *v1 = 65;
      break;
    default:
      *v1 = 66;
      break;
  }
  return (PaperKit::FormContentType_optional)rawValue;
}

uint64_t FormContentType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t lazy protocol witness table accessor for type FormContentType and conformance FormContentType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FormContentType, &type metadata for FormContentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FormContentType, &type metadata for FormContentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FormContentType, &type metadata for FormContentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FormContentType, &type metadata for FormContentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FormContentType, &type metadata for FormContentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

PaperKit::FormContentType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance FormContentType(Swift::Int *a1)
{
  return FormContentType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return RawRepresentable<>.isDefaultState.getter();
}

uint64_t protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return RawRepresentable<>.init(defaultState:)();
}

void protocol witness for CRType.copy(renamingReferences:) in conformance FormContentType(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance FormContentType()
{
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t getEnumTagSinglePayload for FormContentType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xBF)
    goto LABEL_17;
  if (a2 + 65 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 65) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 65;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 65;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 65;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x42;
  v8 = v6 - 66;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 65) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xBF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC0D910 + 4 * byte_1DDF36EA7[v4]))();
  *a1 = a2 + 65;
  return ((uint64_t (*)(void))((char *)sub_1DDC0D944 + 4 * byte_1DDF36EA2[v4]))();
}

uint64_t sub_1DDC0D944(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC0D94C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC0D954);
  return result;
}

uint64_t sub_1DDC0D960(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC0D968);
  *(_BYTE *)result = a2 + 65;
  return result;
}

uint64_t sub_1DDC0D96C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC0D974(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormContentType()
{
  return &type metadata for FormContentType;
}

uint64_t specialized FormContentType.uiTextContentType.getter()
{
  char *v0;

  return **((_QWORD **)&unk_1EA843208 + *v0);
}

id specialized CanvasView.toolPickerObserver.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver;
  v2 = *(void **)(v0 + direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver);
  if (v2)
  {
    v3 = *(id *)(v0 + direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver);
  }
  else
  {
    v4 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasViewToolPickerObserver<Image>);
    v5 = objc_allocWithZone(v4);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v10.receiver = v5;
    v10.super_class = v4;
    v6 = objc_msgSendSuper2(&v10, sel_init);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void specialized CanvasViewToolPickerObserver.updateUI(toolPicker:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v17[5];

  v3 = type metadata accessor for PKInk();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasViewToolPickerObserver.canvasView, v6);
  if (v9)
  {
    v10 = (char *)v9;
    if ((objc_msgSend(a1, sel__isHandwritingToolSelected) & 1) == 0)
    {
      v11 = v10;
      v12 = objc_msgSend(a1, sel_selectedToolItem);
      PKToolPickerItem.ink.getter((uint64_t)v8);

      PKInk.tool.getter(v17);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
      specialized Canvas.tool.setter(v17);

    }
    v13 = *(void **)&v10[direct field offset for CanvasView.canvasTiledView];
    if (v13)
    {
      v14 = v13;
      if (objc_msgSend(a1, sel_isVisible))
        v15 = objc_msgSend(a1, sel_isRulerActive);
      else
        v15 = 0;
      objc_msgSend(v14, sel_setRulerEnabled_, v15);

    }
    else
    {
      __break(1u);
    }
  }
}

void specialized CanvasView.contentInset()()
{
  char *v0;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v5;
  CGFloat v6;
  char *v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  objc_msgSend(v0, sel_bounds);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  CGRectGetWidth(v12);
  v5 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (!v5)
  {
    __break(1u);
    return;
  }
  objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  CGRectGetHeight(v13);
  objc_msgSend(v5, sel_contentSize);
  v6 = x;
  v7 = &v0[direct field offset for CanvasView.snappedContentInsets];
  if ((v0[direct field offset for CanvasView.snappedContentInsets] & 1) != 0)
  {
    v8 = x;
    if ((v7[1] & 1) != 0)
      return;
    goto LABEL_4;
  }
  v8 = x;
  v9 = y;
  v10 = width;
  v11 = height;
  CGRectGetWidth(*(CGRect *)&v6);
  if (one-time initialization token for unsnappedScrollInset != -1)
    swift_once();
  if ((v7[1] & 1) == 0)
  {
LABEL_4:
    v14.origin.x = v8;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    CGRectGetHeight(v14);
    if (one-time initialization token for unsnappedScrollInset != -1)
      swift_once();
  }
}

void specialized CanvasView.updateContentInsets()()
{
  char *v0;
  double Width;
  void *v2;
  double v3;
  double v4;
  double v5;
  double Height;
  double v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  char v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  BOOL v46;
  double v47;
  uint64_t v49;
  CGRect v50;
  CGRect v51;

  objc_msgSend(v0, sel_bounds);
  Width = CGRectGetWidth(v50);
  v2 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (!v2)
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v3 = Width;
  objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
  v5 = v4;
  objc_msgSend(v0, sel_bounds);
  Height = CGRectGetHeight(v51);
  objc_msgSend(v2, sel_contentSize);
  if (v0[direct field offset for CanvasView.allowsContentSnapping] != 1)
    goto LABEL_30;
  v8 = direct field offset for CanvasView.trackingPanGestureRecognizer;
  v9 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v9)
    goto LABEL_43;
  v10 = v7;
  objc_msgSend(v9, sel_translationInView_, v0);
  v13 = *(void **)&v0[v8];
  if (!v13)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v14 = v11;
  v15 = v12;
  if ((uint64_t)objc_msgSend(v13, sel_numberOfTouches) >= 2)
  {
    v17 = fabs(v14);
    if (one-time initialization token for translationThresholdToUnsnapCentering != -1)
      swift_once();
    v16 = static UIConstants.translationThresholdToUnsnapCentering;
    if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering < v17)
    {
      v18 = 0;
LABEL_16:
      v0[direct field offset for CanvasView.snappedContentInsets] = v18;
      goto LABEL_17;
    }
  }
  v19 = v3 - v5;
  objc_msgSend(v2, sel_contentOffset, *(double *)&v16);
  v21 = 0.0;
  if (v19 >= 0.0)
    v21 = v19 * 0.5;
  v22 = fabs(v21 + v20);
  if (one-time initialization token for translationThresholdToResnapCentering != -1)
    swift_once();
  v16 = static UIConstants.translationThresholdToResnapCentering;
  if (v22 < *(double *)&static UIConstants.translationThresholdToResnapCentering)
  {
    v18 = 1;
    goto LABEL_16;
  }
LABEL_17:
  v23 = *(void **)&v0[v8];
  if (!v23)
  {
LABEL_45:
    __break(1u);
    return;
  }
  if ((uint64_t)objc_msgSend(v23, sel_numberOfTouches, *(double *)&v16) < 2)
    goto LABEL_23;
  v25 = fabs(v15);
  if (one-time initialization token for translationThresholdToUnsnapCentering != -1)
    swift_once();
  v24 = *(double *)&static UIConstants.translationThresholdToUnsnapCentering;
  if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering >= v25)
  {
LABEL_23:
    v27 = Height - v10;
    objc_msgSend(v2, sel_contentOffset, v24);
    v29 = 0.0;
    if (v27 >= 0.0)
      v29 = v27 * 0.5;
    v30 = fabs(v29 + v28);
    if (one-time initialization token for translationThresholdToResnapCentering != -1)
      swift_once();
    if (v30 >= *(double *)&static UIConstants.translationThresholdToResnapCentering)
      goto LABEL_30;
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  v0[direct field offset for CanvasView.snappedContentInsets + 1] = v26;
LABEL_30:
  specialized CanvasView.contentInset()();
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  objc_msgSend(v2, sel_contentInset);
  v44 = vabdd_f64(v34, v41) < 1.5;
  v43 = vabdd_f64(v38, v42);
  v44 = v44 && v43 < 1.5;
  v45 = vabdd_f64(v32, v39);
  v46 = v44 && v45 < 1.5;
  v47 = vabdd_f64(v36, v40);
  if (!v46 || v47 >= 1.5)
  {
    v49 = direct field offset for CanvasView.adjustingInsets;
    v0[direct field offset for CanvasView.adjustingInsets] = 1;
    objc_msgSend(v2, sel_setContentInset_, v32, v34, v36, v38);
    v0[v49] = 0;
  }
}

double key path getter for Image.description : Image@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Image.description : Image()
{
  type metadata accessor for Image();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.wrappedValue.setter();
}

void PPKMarkupContainerViewControllerError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PPKMarkupContainerViewControllerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int PPKMarkupContainerViewControllerError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t MUUseOriginalFileMetadata.getter()
{
  return 0xD000000000000019;
}

id MarkupContainerViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id MarkupContainerViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  objc_super v21;
  _OWORD v22[2];
  uint64_t v23;

  v4 = v3;
  v8 = OBJC_IVAR___PPKMarkupContainerViewController_context;
  type metadata accessor for CRContext();
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v9 = v3;
  v10 = MEMORY[0x1DF0E3C90](0, v22);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(_QWORD *)&v4[v8] = v10;
  v11 = OBJC_IVAR___PPKMarkupContainerViewController_fileCoordinator;
  *(_QWORD *)&v9[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_init);
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_analysisDelegate] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_imageCancellable] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_pdfCancellable] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes] = 0;
  v12 = &v9[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  v13 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask] = 0;
  v14 = &v9[OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets];
  v15 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *(_OWORD *)v14 = *MEMORY[0x1E0DC49E8];
  *((_OWORD *)v14 + 1) = v15;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled] = 1;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_editingMode] = 0;
  swift_unknownObjectWeakInit();
  v9[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata] = 1;
  v16 = &v9[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden] = 1;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_showBannerView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup] = 0;

  if (a2)
  {
    v17 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0;
  }
  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  v18 = objc_msgSendSuper2(&v21, sel_initWithNibName_bundle_, v17, a3);

  v19 = v18;
  MarkupContainerViewController.registerForNotifications()();

  return v19;
}

uint64_t type metadata accessor for MarkupContainerViewController()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MarkupContainerViewController;
  if (!type metadata singleton initialization cache for MarkupContainerViewController)
    return swift_getSingletonMetadata();
  return result;
}

id MarkupContainerViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id MarkupContainerViewController.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  objc_super v3;

  if (*(_QWORD *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask])
  {
    v1 = swift_retain();
    MEMORY[0x1DF0E453C](v1, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

Swift::Void __swiftcall MarkupContainerViewController.registerForNotifications()()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_pdfViewScaleChanged_, *MEMORY[0x1E0CD0ED8], 0);

  v3 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v3, sel_addObserver_selector_name_object_, v0, sel_didBecomeActive_, *MEMORY[0x1E0DC4750], 0);

  v4 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_handleSqueezeInteractionDidChangePaletteViewVisibilityNotification_, *MEMORY[0x1E0CD1328], 0);

}

double MarkupContainerViewController.minimumContentInsets.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets;
  swift_beginAccess();
  return *(double *)v1;
}

void MarkupContainerViewController.minimumContentInsets.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;
  uint64_t v10;
  void **v11;
  char *v12;
  double *v13;
  char *v14;

  v9 = (double *)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets);
  swift_beginAccess();
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v10 = *(_QWORD *)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v10)
  {
    v11 = (void **)(v10 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    v12 = (char *)*v11;
    if (*v11)
    {
      v13 = (double *)&v12[direct field offset for CanvasView.minimumContentInsets];
      *v13 = a1;
      v13[1] = a2;
      v13[2] = a3;
      v13[3] = a4;
      v14 = v12;
      specialized CanvasView.updateContentInsets()();

    }
  }
}

void (*MarkupContainerViewController.minimumContentInsets.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return MarkupContainerViewController.minimumContentInsets.modify;
}

void MarkupContainerViewController.minimumContentInsets.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  char *v6;
  _OWORD *v7;
  char *v8;
  __int128 v9;
  char *v10;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD *)(v3[3] + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v4)
    {
      v5 = (void **)(v4 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      v6 = (char *)*v5;
      if (*v5)
      {
        v7 = (_OWORD *)(v3[3] + v3[4]);
        v8 = &v6[direct field offset for CanvasView.minimumContentInsets];
        v9 = v7[1];
        *(_OWORD *)v8 = *v7;
        *((_OWORD *)v8 + 1) = v9;
        v10 = v6;
        specialized CanvasView.updateContentInsets()();

      }
    }
  }
  free(v3);
}

Swift::Void __swiftcall MarkupContainerViewController.updateFirstResponderIfNecessary()()
{
  char *v0;
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void *v4;
  uint64_t v5;
  id v6;
  char *v7;

  v1 = *(_QWORD *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (!v1
    || (v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView),
        swift_beginAccess(),
        !*v2)
    || (v3 = (void **)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker),
        swift_beginAccess(),
        (v4 = *v3) == 0))
  {
    v5 = *(_QWORD *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (!v5)
      return;
    v4 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);
  }
  v6 = v4;
  v7 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
  swift_beginAccess();
  if (*v7 == 1 && (objc_msgSend(v6, sel_isVisible) & 1) == 0)
    objc_msgSend(v0, sel_becomeFirstResponder);

}

uint64_t MarkupContainerViewController.findInteractionEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
  swift_beginAccess();
  return *v1;
}

id MarkupContainerViewController.findInteractionEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  id result;
  uint64_t v5;
  _QWORD *v6;
  id *v7;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
  result = (id)swift_beginAccess();
  *v3 = a1;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    result = (id)swift_beginAccess();
    if (*v6)
    {
      v7 = (id *)(*v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      result = *v7;
      if (*v7)
        return objc_msgSend(result, sel_setFindInteractionEnabled_, a1 & 1);
      else
        __break(1u);
    }
  }
  return result;
}

void (*MarkupContainerViewController.findInteractionEnabled.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return MarkupContainerViewController.findInteractionEnabled.modify;
}

void MarkupContainerViewController.findInteractionEnabled.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  id *v6;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) != 0)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3[6] + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v4)
    goto LABEL_6;
  v5 = (_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v5)
    goto LABEL_6;
  v6 = (id *)(*v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (*v6)
  {
    objc_msgSend(*v6, sel_setFindInteractionEnabled_, *(unsigned __int8 *)(v3[6] + v3[7]));
LABEL_6:
    free(v3);
    return;
  }
  __break(1u);
}

uint64_t MarkupContainerViewController.isImageAnalysisEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled);
  swift_beginAccess();
  return *v1;
}

void MarkupContainerViewController.isImageAnalysisEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  void *v4;
  id v5;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled);
  swift_beginAccess();
  *v3 = a1;
  v4 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v4)
  {
    v5 = v4;
    specialized CanvasElementViewController.isImageAnalysisEnabled.setter(a1 & 1);

  }
}

void key path setter for MarkupContainerViewController.isImageAnalysisEnabled : MarkupContainerViewController(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;

  v2 = *a1;
  v3 = *a2;
  v4 = (char *)(*a2 + OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled);
  swift_beginAccess();
  *v4 = v2;
  v5 = *(void **)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v5)
  {
    v6 = v5;
    specialized CanvasElementViewController.isImageAnalysisEnabled.setter(v2);

  }
}

void (*MarkupContainerViewController.isImageAnalysisEnabled.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return MarkupContainerViewController.isImageAnalysisEnabled.modify;
}

void MarkupContainerViewController.isImageAnalysisEnabled.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char v6;
  id v7;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    v5 = *(void **)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v5)
    {
      v6 = *(_BYTE *)(v4 + v3[4]);
      v7 = v5;
      specialized CanvasElementViewController.isImageAnalysisEnabled.setter(v6);

    }
  }
  free(v3);
}

id MarkupContainerViewController.findInteraction.getter()
{
  return MarkupContainerViewController.findInteraction.getter((SEL *)&selRef_findInteraction);
}

uint64_t MarkupContainerViewController.documentIsLocked.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  void *v5;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t *v9;
  id v10;
  void *v11;

  v1 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2)
    return 0;
  v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController);
  if (v3)
  {
    result = (uint64_t)objc_msgSend(v3, sel_view);
    if (!result)
    {
      __break(1u);
      goto LABEL_14;
    }
    v5 = (void *)result;
    v6 = objc_msgSend((id)result, sel_window);

    if (v6)
    {

      return 1;
    }
    v2 = *(_QWORD *)(v0 + v1);
    if (!v2)
      return 0;
  }
  v8 = (_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v8)
    return 0;
  v9 = (uint64_t *)(*v8 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  result = *v9;
  if (*v9)
  {
    v10 = objc_msgSend((id)result, sel_document);
    if (v10)
    {
      v11 = v10;
      v7 = objc_msgSend(v10, sel_isLocked);

      return (uint64_t)v7;
    }
    return 0;
  }
LABEL_14:
  __break(1u);
  return result;
}

id MarkupContainerViewController.canEncryptDocument.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id *v3;
  id result;
  void *v5;
  unsigned int v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v2)
    return 0;
  v3 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  result = *v3;
  if (*v3)
  {
    result = objc_msgSend(result, sel_document);
    if (result)
    {
      v5 = result;
      v6 = objc_msgSend(result, sel_isEncrypted);

      return (id)(v6 ^ 1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MarkupContainerViewController.editingMode.didset()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char v3;
  char *v4;
  char v5;
  char *v6;
  char *v7;
  unsigned __int8 v8;
  char *v9;
  void **v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned __int8 v17;

  v1 = v0;
  v2 = *(char **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v2)
  {
    v3 = *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode);
    v4 = &v2[direct field offset for CanvasElementViewController.editingMode];
    swift_beginAccess();
    v5 = *v4;
    *v4 = v3;
    v6 = v2;
    specialized CanvasElementViewController.editingMode.didset(v5);

  }
  v7 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v7)
  {
    v8 = *(_BYTE *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode);
    v9 = &v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode];
    swift_beginAccess();
    *v9 = v8;
    v10 = (void **)&v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v11 = (char *)*v10;
    if (*v10)
    {
      v12 = (unsigned __int8 *)&v11[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      v13 = *v12;
      *v12 = v8;
      v17 = v13;
      v14 = v7;
      v15 = v11;
      PaperDocumentView.editingMode.didset(&v17);

    }
    else
    {
      v16 = v7;
    }
    PaperDocumentViewController.updatePlusButton()();

  }
  MarkupContainerViewController.updateBackgroundColor()();
}

uint64_t MarkupContainerViewController.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

uint64_t MarkupContainerViewController.delegate.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  MarkupContainerViewController.delegate.didset();
  return swift_unknownObjectRelease();
}

uint64_t key path setter for MarkupContainerViewController.delegate : MarkupContainerViewController()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  MarkupContainerViewController.delegate.didset();
  return swift_unknownObjectRelease();
}

void (*MarkupContainerViewController.delegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return MarkupContainerViewController.delegate.modify;
}

void MarkupContainerViewController.delegate.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    MarkupContainerViewController.delegate.didset();
  }
  free(v3);
}

uint64_t MarkupContainerViewController.encryptPrivateMetadata.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.encryptPrivateMetadata.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*MarkupContainerViewController.encryptPrivateMetadata.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t MarkupContainerViewController.imageDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v10)
    return 0;
  v11 = (_QWORD *)(v10 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v11)
  {
    v12 = *(_QWORD *)(*v11 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*v11 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v9, v12, v1);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v9, v13, 1, v1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, 1, v1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<Image>?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v9, v1);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<Image>?);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v15;
}

uint64_t MarkupContainerViewController.imageDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE v21[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v21[-v12];
  v14 = *(char **)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v14)
    return swift_bridgeObjectRelease();
  v15 = &v14[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (!*(_QWORD *)v15)
    return swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(*(_QWORD *)v15 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)v15 + direct field offset for Canvas.paperView))
                  + 0x380);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, v16, v5);
  v17 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v13, v9, v5);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)&v21[-16] = a1;
  *(_QWORD *)&v21[-8] = a2;
  v19 = v14;
  Capsule.mutate<A>(_:)();
  swift_bridgeObjectRelease();
  specialized CanvasElementViewController.merge<A>(_:)((uint64_t)v13);

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v13, v5);
}

uint64_t closure #1 in MarkupContainerViewController.imageDescription.setter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  swift_bridgeObjectRetain();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t (*MarkupContainerViewController.imageDescription.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = MarkupContainerViewController.imageDescription.getter();
  a1[1] = v3;
  return MarkupContainerViewController.imageDescription.modify;
}

uint64_t MarkupContainerViewController.imageDescription.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return MarkupContainerViewController.imageDescription.setter(*a1, v2);
  swift_bridgeObjectRetain();
  MarkupContainerViewController.imageDescription.setter(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t MarkupContainerViewController.showThumbnailViewForMultipage.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v1)
  {
    v2 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    swift_beginAccess();
    LOBYTE(v1) = *v2 ^ 1;
  }
  return v1 & 1;
}

void MarkupContainerViewController.showThumbnailViewForMultipage.setter(char a1)
{
  uint64_t v1;
  char *v2;
  char *v4;
  char v5;
  char *v6;

  v2 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v2)
  {
    v4 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
    swift_beginAccess();
    v5 = *v4;
    *v4 = (a1 & 1) == 0;
    v6 = v2;
    PaperDocumentViewController.isThumbnailViewCollapsed.didset(v5);

  }
}

_QWORD *key path getter for MarkupContainerViewController.showThumbnailViewForMultipage : MarkupContainerViewController@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;

  v3 = *(_QWORD *)(*result + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v3)
  {
    v4 = (_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    result = (_QWORD *)swift_beginAccess();
    LOBYTE(v3) = *v4 ^ 1;
  }
  *a2 = v3 & 1;
  return result;
}

void key path setter for MarkupContainerViewController.showThumbnailViewForMultipage : MarkupContainerViewController(char *a1, _QWORD *a2)
{
  char *v2;
  char v3;
  char *v4;
  char v5;
  char *v6;

  v2 = *(char **)(*a2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v2)
  {
    v3 = *a1;
    v4 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
    swift_beginAccess();
    v5 = *v4;
    *v4 = (v3 & 1) == 0;
    v6 = v2;
    PaperDocumentViewController.isThumbnailViewCollapsed.didset(v5);

  }
}

void (*MarkupContainerViewController.showThumbnailViewForMultipage.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v3 = (char *)malloc(0x60uLL);
  *a1 = v3;
  v4 = v3 + 88;
  v5 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  *((_QWORD *)v3 + 9) = v1;
  *((_QWORD *)v3 + 10) = v5;
  v6 = *(_QWORD *)(v1 + v5);
  if (v6)
  {
    v7 = (_BYTE *)(v6 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    swift_beginAccess();
    LOBYTE(v6) = *v7 ^ 1;
  }
  *v4 = v6 & 1;
  return MarkupContainerViewController.showThumbnailViewForMultipage.modify;
}

void MarkupContainerViewController.showThumbnailViewForMultipage.modify(uint64_t a1, char a2)
{
  _BYTE *v2;
  char *v3;
  char v4;
  char *v5;
  char v6;
  char v7;
  char *v8;

  v2 = *(_BYTE **)a1;
  v3 = *(char **)(*(_QWORD *)(*(_QWORD *)a1 + 72) + *(_QWORD *)(*(_QWORD *)a1 + 80));
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v4 = v2[88];
      v5 = &v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
LABEL_6:
      swift_beginAccess();
      v6 = v4 ^ 1;
      v7 = *v5;
      *v5 = v6;
      v8 = v3;
      PaperDocumentViewController.isThumbnailViewCollapsed.didset(v7);

    }
  }
  else if (v3)
  {
    v4 = v2[88];
    v5 = &v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
    goto LABEL_6;
  }
  free(v2);
}

Swift::Void __swiftcall MarkupContainerViewController.viewIsAppearing(_:)(Swift::Bool a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  _QWORD v27[2];
  _QWORD aBlock[6];
  objc_super v29;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (objc_class *)type metadata accessor for MarkupContainerViewController();
  v29.receiver = v1;
  v29.super_class = v14;
  objc_msgSendSuper2(&v29, sel_viewIsAppearing_, a1);
  v15 = objc_msgSend(v1, sel_view);
  if (v15)
  {
    v16 = v15;
    v27[0] = v5;
    objc_msgSend(v15, sel_bounds);
    v18 = v17;
    v20 = v19;

    MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v20, *(unint64_t *)&v18), a1);
    v21 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (v21)
    {
      v22 = v21;
      CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(a1, 0, v18, v20);

    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v23 = (void *)static OS_dispatch_queue.main.getter();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v2;
    aBlock[4] = partial apply for closure #1 in MarkupContainerViewController.viewIsAppearing(_:);
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_19;
    v25 = _Block_copy(aBlock);
    v26 = v2;
    static DispatchQoS.unspecified.getter();
    v27[1] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1DF0E48C0](0, v13, v8, v25);
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v27[0] + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in MarkupContainerViewController.viewIsAppearing(_:)(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v1)
  {
    v2 = v1;
    specialized CanvasElementViewController.enableToolPickerTapInteraction()();

  }
}

Swift::Void __swiftcall MarkupContainerViewController.viewDidLayoutSubviews()()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double *v7;
  void *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _QWORD v13[6];
  objc_super v14;

  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  objc_msgSendSuper2(&v14, sel_viewDidLayoutSubviews);
  v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_bounds);
    v4 = v3;
    v6 = v5;

    v7 = (double *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize];
    if (*(double *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize] != v4
      || *(double *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize + 8] != v6)
    {
      v9 = (void *)objc_opt_self();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v0;
      v13[4] = partial apply for closure #1 in MarkupContainerViewController.viewDidLayoutSubviews();
      v13[5] = v10;
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 1107296256;
      v13[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v13[3] = &block_descriptor_6_3;
      v11 = _Block_copy(v13);
      v12 = v0;
      swift_release();
      objc_msgSend(v9, sel_animateWithDuration_delay_options_animations_completion_, 4, v11, 0, 0.25, 0.0);
      _Block_release(v11);
      *v7 = v4;
      v7[1] = v6;
    }
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in MarkupContainerViewController.viewDidLayoutSubviews()(char *a1)
{
  id v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  id v9;

  v2 = objc_msgSend(a1, sel_view);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_bounds);
    v5 = v4;
    v7 = v6;

    MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v7, *(unint64_t *)&v5), 0);
    v8 = *(void **)&a1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (v8)
    {
      v9 = v8;
      CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(0, 0, v5, v7);

    }
  }
  else
  {
    __break(1u);
  }
}

void MarkupContainerViewController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;
  objc_super v18;

  v18.receiver = v3;
  v18.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  objc_msgSendSuper2(&v18, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  *((_BYTE *)v3 + OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes) = 1;
  v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = partial apply for closure #1 in MarkupContainerViewController.viewWillTransition(to:with:);
  v17 = v7;
  v8 = MEMORY[0x1E0C809B0];
  v12 = MEMORY[0x1E0C809B0];
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v15 = &block_descriptor_12;
  v9 = _Block_copy(&v12);
  swift_release();
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = partial apply for closure #2 in MarkupContainerViewController.viewWillTransition(to:with:);
  v17 = v10;
  v12 = v8;
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v15 = &block_descriptor_16;
  v11 = _Block_copy(&v12);
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v9, v11);
  _Block_release(v11);
  _Block_release(v9);
}

void closure #1 in MarkupContainerViewController.viewWillTransition(to:with:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  unsigned __int8 v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  char *v14;

  if ((objc_msgSend(a1, sel_isCancelled) & 1) == 0)
  {
    swift_beginAccess();
    v4 = MEMORY[0x1DF0E666C](a2 + 16);
    if (v4)
    {
      v5 = (char *)v4;
      v6 = objc_msgSend(a1, sel_isAnimated);
      v7 = objc_msgSend(v5, sel_view);
      if (v7)
      {
        v8 = v7;
        objc_msgSend(v7, sel_bounds);
        v10 = v9;
        v12 = v11;

        MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v12, *(unint64_t *)&v10), v6);
        v13 = *(void **)&v5[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
        if (v13)
        {
          v14 = v13;
          CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(v6, 0, v10, v12);

          v5 = v14;
        }

      }
      else
      {
        __break(1u);
      }
    }
  }
}

void closure #2 in MarkupContainerViewController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (_BYTE *)MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v3[OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes] = 0;

  }
}

Swift::Void __swiftcall MarkupContainerViewController.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  char *v1;
  void *v2;
  Class isa;
  void *v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char *v11;
  char v12;
  objc_super v13;

  v2 = v1;
  isa = a1.value.super.isa;
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  objc_msgSendSuper2(&v13, sel_traitCollectionDidChange_, isa);
  v4 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (v4)
  {
    v5 = v4;
    if (isa)
      v6 = -[objc_class horizontalSizeClass](isa, sel_horizontalSizeClass);
    else
      v6 = 0;
    v7 = objc_msgSend(v2, sel_traitCollection);
    v8 = objc_msgSend(v7, sel_horizontalSizeClass);

    if (!isa || v6 != v8)
    {
      v9 = objc_msgSend(v2, sel_traitCollection);
      v10 = objc_msgSend(v9, sel_horizontalSizeClass);

      v11 = &v5[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
      swift_beginAccess();
      v12 = *v11;
      *v11 = v10 == (id)1;
      PaperDocumentViewController.isThumbnailViewCollapsed.didset(v12);
    }

  }
  MarkupContainerViewController.updateBannerViewStyle()();
}

uint64_t MarkupContainerViewController.load(fromData:with:placeholderImage:completionHandler:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  __int128 v17;

  v12 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v12, v12);
  v14 = (uint64_t *)((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v14 = a1;
  v14[1] = a2;
  swift_storeEnumTagMultiPayload();
  if (a3)
  {
    v17 = xmmword_1DDF33630;
    outlined copy of Data._Representation(a1, a2);
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();
    v15 = *((_QWORD *)&v17 + 1);
    a3 = v17;
  }
  else
  {
    outlined copy of Data._Representation(a1, a2);
    v15 = 0xF000000000000000;
  }
  MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)((uint64_t)v14, a3, v15, a4, a5, a6);
  outlined consume of Data?(a3, v15);
  return outlined destroy of PKStrokeProperties((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
}

id MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void (*a5)(void), uint64_t a6)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id result;
  void *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  id v47;
  char *v48;
  id v49;
  double v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  void (*v61)(char *, uint64_t);
  void *v62;
  _BYTE *v63;
  int v64;
  void (*v65)(char *, uint64_t);
  CFTimeInterval v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t *v78;
  uint64_t v79;
  id v80;
  void (*v81)(void);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;

  v90 = a3;
  v86 = a2;
  v93 = a1;
  v10 = type metadata accessor for DataOrURL();
  v84 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v85 = v12;
  v88 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13, v14);
  v87 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UTType();
  v92 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v80 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v80 - v30;
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3A48]), sel_init);
  v33 = *(void **)&v6[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager];
  *(_QWORD *)&v6[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager] = v32;

  v34 = OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask;
  v94 = v6;
  if (*(_QWORD *)&v6[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask])
  {
    v35 = swift_retain();
    MEMORY[0x1DF0E453C](v35, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v83 = v34;
  *(_QWORD *)&v94[v34] = 0;
  swift_release();
  MarkupContainerViewController.removeContentViewController()();
  v89 = a4;
  v91 = v31;
  if (!a4)
  {
LABEL_7:
    MarkupContainerViewController.sourceContentType(from:)(v93, (uint64_t)v31);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v31, (uint64_t)v27, &demangling cache variable for type metadata for UTType?);
    v57 = v92;
    v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
    if (v58(v27, 1, v16) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for UTType?);
      v59 = 0;
    }
    else
    {
      static UTType.image.getter();
      v60 = UTType.conforms(to:)();
      v61 = *(void (**)(char *, uint64_t))(v57 + 8);
      v59 = v60;
      v61(v19, v16);
      v61(v27, v16);
    }
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v31, (uint64_t)v23, &demangling cache variable for type metadata for UTType?);
    if (v58(v23, 1, v16) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for UTType?);
      if ((v59 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      static UTType.pdf.getter();
      v64 = UTType.conforms(to:)();
      v65 = *(void (**)(char *, uint64_t))(v92 + 8);
      v65(v19, v16);
      v65(v23, v16);
      if (((v59 | v64) & 1) == 0)
      {
LABEL_12:
        if (a5)
        {
          lazy protocol witness table accessor for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError();
          v62 = (void *)swift_allocError();
          *v63 = 0;
          a5();

        }
        return (id)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for UTType?);
      }
    }
    v66 = CACurrentMediaTime();
    v67 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v87, 1, 1, v67);
    v68 = swift_allocObject();
    LODWORD(v92) = v59;
    v69 = v94;
    swift_unknownObjectWeakInit();
    outlined init with copy of PKStrokeProperties(v93, v88, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    type metadata accessor for MainActor();
    v70 = v89;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?((uint64_t)a5);
    swift_retain();
    v71 = v86;
    outlined copy of Data?(v86, v90);
    v72 = static MainActor.shared.getter();
    v73 = (*(unsigned __int8 *)(v84 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    v74 = (v85 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
    v75 = swift_allocObject();
    v76 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v75 + 16) = v72;
    *(_QWORD *)(v75 + 24) = v76;
    *(_QWORD *)(v75 + 32) = a5;
    *(_QWORD *)(v75 + 40) = a6;
    v77 = v89;
    *(_QWORD *)(v75 + 48) = v68;
    *(_QWORD *)(v75 + 56) = v77;
    *(_BYTE *)(v75 + 64) = v92 & 1;
    outlined init with take of DataOrURL(v88, v75 + v73);
    v78 = (uint64_t *)(v75 + v74);
    *v78 = v71;
    v31 = v91;
    v78[1] = v90;
    *(CFTimeInterval *)(v75 + ((v74 + 23) & 0xFFFFFFFFFFFFFFF8)) = v66;
    swift_release();
    v79 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v87, (uint64_t)&async function pointer to partial apply for closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:), v75);
    *(_QWORD *)&v69[v83] = v79;
    swift_release();
    return (id)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for UTType?);
  }
  v81 = a5;
  v82 = a6;
  v36 = a4;
  result = objc_msgSend(v94, sel_view);
  if (result)
  {
    v38 = result;
    objc_msgSend(result, sel_bounds);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    v46 = v45;

    v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C28]), sel_initWithFrame_, v40, v42, v44, v46);
    objc_msgSend(v47, sel_setClipsToBounds_, 1);
    v48 = v94;
    objc_msgSend(v47, sel_setDelegate_, v94);
    objc_msgSend(v47, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(v47, sel_setAutoresizingMask_, 18);
    v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v36);
    v80 = v36;
    objc_msgSend(v36, sel_size);
    objc_msgSend(v49, sel_setFrame_, 0.0, 0.0, v50, v51);
    objc_msgSend(v49, sel_setContentMode_, 4);
    objc_msgSend(v49, sel_setAccessibilityIgnoresInvertColors_, 1);
    objc_msgSend(v47, sel_addSubview_, v49);
    objc_msgSend(v49, sel_bounds);
    objc_msgSend(v47, sel_setContentSize_, v52, v53);
    result = objc_msgSend(v48, sel_view);
    if (result)
    {
      v54 = result;
      objc_msgSend(result, sel_addSubview_, v47);

      v55 = *(void **)&v94[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView];
      *(_QWORD *)&v94[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView] = v47;
      v56 = v47;

      MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v46, *(unint64_t *)&v44), 0);
      a5 = v81;
      a6 = v82;
      v31 = v91;
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t MarkupContainerViewController.load(fromURL:with:placeholderImage:completionHandler:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v17;

  v10 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, a1, v14);
  swift_storeEnumTagMultiPayload();
  if (a2)
  {
    v17 = xmmword_1DDF33630;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();
    v15 = *((_QWORD *)&v17 + 1);
    a2 = v17;
  }
  else
  {
    v15 = 0xF000000000000000;
  }
  MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)((uint64_t)v13, a2, v15, a3, a4, a5);
  outlined consume of Data?(a2, v15);
  return outlined destroy of PKStrokeProperties((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
}

uint64_t MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(a1, a2, a3, a4, 0);
}

uint64_t MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  char *v5;
  char *v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  void *v89;
  void *v90;
  id v91;
  char *v92;
  id v93;
  uint64_t v94;
  int v95;
  uint64_t result;
  uint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t ObjectType;
  uint64_t v108;
  char *v109;
  char *v110;
  int v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;

  v6 = v5;
  v111 = a4;
  v108 = a3;
  v110 = (char *)a2;
  ObjectType = swift_getObjectType();
  v121 = type metadata accessor for UTType();
  v119 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121, v9);
  v105 = v10;
  v118 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for URL();
  v106 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116, v11);
  v104 = v12;
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v14, v15);
  v120 = (uint64_t)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  v115 = (uint64_t)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v117 = (uint64_t)&v97 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v102 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v114 = (uint64_t)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v109 = (char *)&v97 - v29;
  v103 = v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v97 - v33;
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v122 = *(char **)(v124 - 8);
  MEMORY[0x1E0C80A78](v124, v35);
  v98 = (char *)&v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v100 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v38);
  v113 = (uint64_t)&v97 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v97 - v42;
  v101 = v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v48 = (char *)&v97 - v47;
  v123 = v6;
  v49 = *(_QWORD *)&v6[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v49
    && (v50 = (_QWORD *)(v49 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(),
                                                                                                *v50))
  {
    v51 = *(_QWORD *)(*v50 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*v50 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    v52 = (uint64_t)v122;
    v53 = v51;
    v54 = v124;
    (*((void (**)(char *, uint64_t, uint64_t))v122 + 2))(v48, v53, v124);
    v55 = 0;
  }
  else
  {
    v55 = 1;
    v54 = v124;
    v52 = (uint64_t)v122;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v48, v55, 1, v54);
  v112 = v13;
  if (a5)
  {
    *(_QWORD *)&v125 = 0xD000000000000019;
    *((_QWORD *)&v125 + 1) = 0x80000001DDF51090;
    v56 = objc_msgSend(a5, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v57 = (uint64_t)v109;
    if (v56)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v126 = 0u;
      v125 = 0u;
    }
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v125, (uint64_t)&v127, &demangling cache variable for type metadata for Any?);
    v13 = v112;
    v54 = v124;
    if (*((_QWORD *)&v128 + 1))
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v127, &demangling cache variable for type metadata for Any?);
      goto LABEL_14;
    }
  }
  else
  {
    v127 = 0u;
    v128 = 0u;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v127, &demangling cache variable for type metadata for Any?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v48, (uint64_t)v43, &demangling cache variable for type metadata for Capsule<Image>?);
  v58 = (uint64_t)v122;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v122 + 6))(v43, 1, v54) != 1)
  {
    v63 = (uint64_t)v98;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v98, v43, v54);
    v64 = v123;
    v65 = &v123[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata];
    swift_beginAccess();
    LOBYTE(v125) = *v65;
    *(_QWORD *)&v126 = 0;
    *((_QWORD *)&v125 + 1) = 0;
    specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v63, a1, *(_QWORD *)&v64[OBJC_IVAR___PPKMarkupContainerViewController_context], (uint64_t)v110, v111 & 1);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v63, v54);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v48, &demangling cache variable for type metadata for Capsule<Image>?);
    return 1;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, &demangling cache variable for type metadata for Capsule<Image>?);
  v57 = (uint64_t)v109;
LABEL_14:
  v124 = (uint64_t)dispatch_semaphore_create(0);
  v59 = *(_QWORD *)&v123[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  v99 = a5;
  if (v59)
  {
    v60 = (_QWORD *)(v59 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v60)
    {
      v61 = *v60 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
      swift_beginAccess();
      v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v34, v61, v62);
    }
    else
    {
      v68 = v59 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v68, v57, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
      v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      v70 = *(_QWORD *)(v69 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v57, 1, v69);
      if ((_DWORD)result == 1)
      {
        __break(1u);
        return result;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v34, v57, v69);
    }
    v66 = v13;
    v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v34, 0, 1, v71);
  }
  else
  {
    v66 = v13;
    v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v34, 1, 1, v67);
  }
  v72 = v123;
  v73 = (uint64_t)&v123[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  swift_beginAccess();
  v74 = v117;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v73, v117, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v75 = &v72[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata];
  swift_beginAccess();
  LODWORD(v109) = *v75;
  type metadata accessor for ResultWrapped #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)();
  v98 = (char *)swift_allocObject();
  v98[16] = 2;
  v76 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v120, 1, 1, v76);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v74, v115, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v34, v114, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v48, v113, &demangling cache variable for type metadata for Capsule<Image>?);
  v122 = v34;
  v77 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v66, a1, v116);
  v78 = v119;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v118, v110, v121);
  v79 = (*(unsigned __int8 *)(v18 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v80 = *(unsigned __int8 *)(v102 + 80);
  v110 = v48;
  v81 = (v19 + v80 + v79) & ~v80;
  v82 = (v103 + *(unsigned __int8 *)(v100 + 80) + v81) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  v83 = (v101 + *(unsigned __int8 *)(v77 + 80) + v82) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  v84 = (v104 + *(unsigned __int8 *)(v78 + 80) + v83) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  v103 = v84 + v105;
  v105 = (v84 + v105 + 9) & 0xFFFFFFFFFFFFFFF8;
  v104 = (v105 + 15) & 0xFFFFFFFFFFFFFFF8;
  v102 = (v104 + 15) & 0xFFFFFFFFFFFFFFF8;
  v85 = (v102 + 15) & 0xFFFFFFFFFFFFFFF8;
  v86 = (char *)swift_allocObject();
  *((_QWORD *)v86 + 2) = 0;
  *((_QWORD *)v86 + 3) = 0;
  v87 = v98;
  *((_QWORD *)v86 + 4) = v98;
  *((_QWORD *)v86 + 5) = v72;
  outlined init with take of (key: Int, value: AnyCRValue)?(v115, (uint64_t)&v86[v79], (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined init with take of (key: Int, value: AnyCRValue)?(v114, (uint64_t)&v86[v81], (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  outlined init with take of (key: Int, value: AnyCRValue)?(v113, (uint64_t)&v86[v82], &demangling cache variable for type metadata for Capsule<Image>?);
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(&v86[v83], v112, v116);
  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(&v86[v84], v118, v121);
  v88 = &v86[v103];
  *v88 = v111 & 1;
  v88[1] = (char)v109;
  v89 = v99;
  *(_QWORD *)&v86[v105] = v99;
  *(_QWORD *)&v86[v104] = v108;
  v90 = (void *)v124;
  *(_QWORD *)&v86[v102] = v124;
  *(_QWORD *)&v86[v85] = ObjectType;
  v91 = v89;
  swift_retain();
  v92 = v72;
  v93 = v90;
  v94 = v120;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v120, (uint64_t)&async function pointer to partial apply for closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:), (uint64_t)v86);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();

  outlined destroy of StocksKitCurrencyCache.Provider?(v117, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v122, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v110, &demangling cache variable for type metadata for Capsule<Image>?);
  v95 = v87[16];
  swift_release();
  if (v95 == 2)
    return 0;
  else
    return v95 & 1;
}

uint64_t closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  char v11;
  char v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 88) = v14;
  *(_OWORD *)(v8 + 72) = v13;
  *(_BYTE *)(v8 + 129) = v12;
  *(_BYTE *)(v8 + 128) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  _QWORD *v0;

  v0[12] = *(_QWORD *)(v0[3] + OBJC_IVAR___PPKMarkupContainerViewController_context);
  type metadata accessor for MainActor();
  v0[13] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 130);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;

  v1 = *(_QWORD **)(v0 + 80);
  v2 = *(void **)(v0 + 120);
  if (v1)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;
    v6 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v7 = (void *)MEMORY[0x1DF0E41AC](v3, v5);
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v7, 512, 0);

    v9 = v8;
    *v1 = v8;
  }

  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v0;
  _QWORD *v1;
  char *v2;

  swift_release();
  v2 = (char *)&async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)
     + async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v1;
  *v1 = v0;
  v1[1] = closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:);
  __asm { BR              X8 }
}

uint64_t closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 130) = a1 & 1;
  return swift_task_switch();
}

uint64_t closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)()
{
  uint64_t v0;
  id v1;
  NSURL *v2;
  void *v3;
  void *v4;
  NSURL *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;
  id v11;
  void *v12;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v2);
  v4 = v3;
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  *(_QWORD *)(v0 + 16) = 0;
  v8 = objc_msgSend(v1, sel_copyItemAtURL_toURL_error_, v4, v6, v0 + 16);

  v9 = *(void **)(v0 + 16);
  if (v8)
  {
    v10 = v9;
  }
  else
  {
    v11 = v9;
    v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  **(_BYTE **)(v0 + 24) = v8 ^ 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 200) = a4;
  *(_QWORD *)(v5 + 208) = v4;
  *(_BYTE *)(v5 + 288) = a3;
  *(_QWORD *)(v5 + 184) = a1;
  *(_QWORD *)(v5 + 192) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  *(_QWORD *)(v5 + 216) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  *(_QWORD *)(v5 + 224) = swift_task_alloc();
  *(_QWORD *)(v5 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(v5 + 240) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 248) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 256) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 264) = v6;
  return swift_task_switch();
}

uint64_t MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;

  v1 = v0[30];
  v2 = v0[26];
  v3 = v2 + OBJC_IVAR___PPKMarkupContainerViewController_originalAsset;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, v1, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v4)
  {
    v10 = v0[29];
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    goto LABEL_8;
  }
  v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  v6 = *v5;
  if (*v5)
  {
    v7 = v0[29];
    v8 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
LABEL_7:
    v17 = v0[29];
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1, v18);
LABEL_8:
    v19 = *(_QWORD *)(v0[26] + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v19)
    {
      v20 = (uint64_t *)(v19 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      v21 = *v20;
      v22 = v0[27];
      if (v21)
      {
        v23 = *(_QWORD *)(v21 + direct field offset for Canvas.paperView)
            + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v21 + direct field offset for Canvas.paperView))
                        + 0x380);
        swift_beginAccess();
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
        v25 = *(_QWORD *)(v24 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        goto LABEL_13;
      }
    }
    else
    {
      v22 = v0[27];
    }
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v22, 1, 1, v26);
LABEL_13:
    swift_beginAccess();
    v28 = (char *)&async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)
        + async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
    v27 = (_QWORD *)swift_task_alloc();
    v0[34] = v27;
    *v27 = v0;
    v27[1] = MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
    __asm { BR              X8 }
  }
  v12 = v0[28];
  v13 = v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, v12, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v15 + 32))(v0[29], v0[28], v14);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 289));
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  *(_QWORD *)(*v2 + 280) = v1;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4 + 232);
  v6 = *(_QWORD *)(v4 + 240);
  v7 = *(_QWORD *)(v4 + 216);
  if (!v1)
    *(_BYTE *)(v4 + 289) = a1 & 1;
  outlined destroy of StocksKitCurrencyCache.Provider?(v7, &demangling cache variable for type metadata for Capsule<Image>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v6, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  return swift_task_switch();
}

uint64_t @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a4;
  *(_BYTE *)(v6 + 128) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = type metadata accessor for UTType();
  *(_QWORD *)(v6 + 56) = v7;
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 72) = swift_task_alloc();
  v8 = type metadata accessor for URL();
  *(_QWORD *)(v6 + 80) = v8;
  *(_QWORD *)(v6 + 88) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 96) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 104) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v0;
  const void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;

  v1 = *(const void **)(v0 + 40);
  v2 = *(void **)(v0 + 48);
  v3 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  swift_release();
  *(_QWORD *)(v0 + 112) = _Block_copy(v1);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;
  v6 = v2;
  v7 = v3;
  static UTType._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v8;
  *v8 = v0;
  v8[1] = @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
  return MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 128), *(_QWORD *)(v0 + 32));
}

uint64_t @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(char a1)
{
  void *v1;
  uint64_t *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(void **)(*v2 + 48);
  v5 = *(void **)(*v2 + 32);
  v6 = *v2;
  swift_task_dealloc();

  v7 = *(_QWORD *)(v6 + 112);
  v9 = *(_QWORD *)(v6 + 88);
  v8 = *(_QWORD *)(v6 + 96);
  v10 = *(_QWORD *)(v6 + 80);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 + 64) + 8))(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 56));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if (v1)
  {
    v11 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v11);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v7 + 16))(v7, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v6 + 8))();
}

_QWORD *MarkupContainerViewController.dataRepresentation(withError:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void **v28;
  void *v29;
  char *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  char *v35;
  uint64_t v36;
  dispatch_semaphore_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  UIImage *v44;
  NSData *v45;
  NSData *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  id v53;
  _QWORD *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  double v61;
  double v62;

  v3 = type metadata accessor for CRCodingError();
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (_QWORD **)((char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v55 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v60 = (char *)&v55 - v22;
  v23 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v23)
    return 0;
  v24 = &v23[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  v25 = *(_QWORD *)v24;
  if (!*(_QWORD *)v24)
    return 0;
  v55 = a1;
  v26 = *(_QWORD *)(v25 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v25 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v19, v26, v11);
  v57 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v57(v60, v19, v11);
  v28 = (void **)&v23[direct field offset for CanvasElementViewController.image];
  swift_beginAccess();
  v29 = *v28;
  if (v29)
  {
    v30 = v23;
    objc_msgSend(v29, sel_size);
    v32 = v31;
    v34 = v33;
    if (v31 != 0.0)
      goto LABEL_9;
  }
  else
  {
    v35 = v23;
    v34 = 0.0;
    v32 = 0.0;
  }
  if (v34 == 0.0)
  {
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    v32 = v61;
    v34 = v62;
  }
LABEL_9:
  type metadata accessor for ImageWrapper #1 in MarkupContainerViewController.dataRepresentation(withError:)();
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = 0;
  v37 = dispatch_semaphore_create(0);
  static TaskPriority.userInitiated.getter();
  v38 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v10, 0, 1, v38);
  v27(v15, (uint64_t)v60, v11);
  v56 = v12;
  v39 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v40 = (v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 24) = 0;
  *(double *)(v41 + 32) = v32;
  *(double *)(v41 + 40) = v34;
  *(_QWORD *)(v41 + 48) = v36;
  v57((char *)(v41 + v39), v15, v11);
  *(_QWORD *)(v41 + v40) = v37;
  swift_retain();
  v42 = v37;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in MarkupContainerViewController.dataRepresentation(withError:), v41);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();
  v43 = *(void **)(v36 + 16);
  if (!v43)
  {
    v47 = v55;
    if (!v55)
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v60, v11);

      swift_release();
      return v47;
    }
    *v6 = 0xD000000000000014;
    v6[1] = 0x80000001DDF510B0;
    v49 = v58;
    v48 = v59;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v58 + 104))(v6, *MEMORY[0x1E0D11EF8], v59);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    v50 = (void *)swift_allocError();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v49 + 32))(v51, v6, v48);
    v52 = (void *)_convertErrorToNSError(_:)();
    v53 = v52;
    *v47 = v52;

    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v60, v11);

    return 0;
  }
  v44 = v43;
  v45 = UIImageJPEGRepresentation(v44, 0.9);
  if (v45)
  {
    v46 = v45;
    v47 = (_QWORD *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

    swift_release();
  }
  else
  {

    swift_release();
    v47 = 0;
  }
  (*(void (**)(char *, uint64_t))(v56 + 8))(v60, v11);
  return v47;
}

uint64_t closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 136) = a7;
  *(_QWORD *)(v8 + 144) = a8;
  *(_QWORD *)(v8 + 128) = a6;
  *(double *)(v8 + 112) = a1;
  *(double *)(v8 + 120) = a2;
  type metadata accessor for Image();
  *(_QWORD *)(v8 + 152) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in MarkupContainerViewController.dataRepresentation(withError:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, char, char);

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  type metadata accessor for ImageRenderer();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = 0x3FF0000000000000;
  v4 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v3);
  *(_QWORD *)(v0 + 160) = v4;
  swift_beginAccess();
  *(_BYTE *)(v4 + 72) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule<>.root.getter();
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 48) = 0;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                     + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  *v5 = v0;
  v5[1] = closure #1 in MarkupContainerViewController.dataRepresentation(withError:);
  return v7(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136), v0 + 16, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 176);

  OS_dispatch_semaphore.signal()();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  return swift_task_switch();
}

uint64_t MarkupContainerViewController.archivedModelData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];

  v1 = v0;
  v2 = type metadata accessor for CRCodableVersion();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v21[-v14];
  v16 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v16)
    return 0;
  v17 = (_QWORD *)(v16 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v17)
    return 0;
  v18 = *(_QWORD *)(*v17 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*v17 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v18, v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v15, v11, v7);
  Capsule.mutate<A>(_:)();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0D12378], v2);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v19 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v15, v7);
  return v19;
}

uint64_t closure #1 in MarkupContainerViewController.archivedModelData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v4 = type metadata accessor for CRAssetOrData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return Capsule.Ref<>.subscript.setter();
}

void MarkupContainerViewController.contentViewScrollView.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id *v11;
  id v12;
  uint64_t v13;

  if (!*(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView))
  {
    v1 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v1)
    {
      v9 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
      if (!v9)
        return;
      v10 = (_QWORD *)(v9 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
      swift_beginAccess();
      if (!*v10)
        return;
      v11 = (id *)(*v10 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      if (*v11)
      {
        v12 = objc_msgSend(*v11, sel_documentScrollView);
        return;
      }
LABEL_21:
      __break(1u);
      return;
    }
    v2 = v1;
    v3 = objc_msgSend(v2, sel_view);
    if (!v3)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v4 = v3;
    v5 = objc_msgSend(v3, sel_subviews);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13)
        goto LABEL_7;
    }
    else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_7:
      if ((v6 & 0xC000000000000001) != 0)
      {
        v7 = (id)MEMORY[0x1DF0E4D64](0, v6);
LABEL_10:
        v8 = v7;
        swift_bridgeObjectRelease();

        objc_opt_self();
        if (!swift_dynamicCastObjCClass())

        return;
      }
      if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v7 = *(id *)(v6 + 32);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();

  }
}

uint64_t MarkupContainerViewController.annotationEditingEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.annotationEditingEnabled.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.annotationEditingEnabled.didset);
}

void MarkupContainerViewController.annotationEditingEnabled.didset()
{
  char *v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;

  MarkupContainerViewController.updateEditingMode()();
  MarkupContainerViewController.updateGestures()();
  v1 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
  swift_beginAccess();
  if (*v1 == 1)
  {
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
    return;
  }
  if (one-time initialization token for isLowJetsamLimitEnvironment != -1)
    swift_once();
  if (static NSBundle.isLowJetsamLimitEnvironment == 1)
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (v2)
    {
      v3 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      if (*v3)
        objc_msgSend(*(id *)(*v3 + direct field offset for CanvasView.canvasTiledView), sel__cancelCurrentStrokeAndReduceMemoryFootprint);
    }
  }
  v4 = objc_msgSend(v0, sel_viewIfLoaded);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, sel_window);

    if (v6)
    {
      v7 = objc_msgSend(v6, sel_windowScene);

      if (v7)
      {
        v8 = objc_msgSend((id)objc_opt_self(), sel__existingInteractionForWindowScene_, v7);
        if (v8)
        {
          v9 = v8;
          if ((objc_msgSend(v8, sel__paletteViewVisible) & 1) != 0)
          {
            v10 = objc_msgSend(v0, sel_view);
            if (!v10)
            {
              __break(1u);
              return;
            }
            v11 = v10;
            objc_msgSend(v9, sel__setMiniPaletteVisible_hoverLocation_inView_, 0, v10, 0.0, 0.0);

          }
        }

      }
    }
  }
}

void (*MarkupContainerViewController.annotationEditingEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.annotationEditingEnabled.modify;
}

void MarkupContainerViewController.annotationEditingEnabled.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    MarkupContainerViewController.annotationEditingEnabled.didset();
}

uint64_t MarkupContainerViewController.allEditingDisabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
  swift_beginAccess();
  return *v1;
}

void @objc MarkupContainerViewController.formFillingEnabled.setter(char *a1, uint64_t a2, char a3, _QWORD *a4)
{
  char *v6;
  char *v7;

  v6 = &a1[*a4];
  swift_beginAccess();
  *v6 = a3;
  v7 = a1;
  MarkupContainerViewController.delegate.didset();

}

uint64_t MarkupContainerViewController.allEditingDisabled.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.delegate.didset);
}

uint64_t MarkupContainerViewController.annotationEditingEnabled.setter(char a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _BYTE *v6;
  uint64_t v7;

  v6 = (_BYTE *)(v3 + *a2);
  v7 = swift_beginAccess();
  *v6 = a1;
  return a3(v7);
}

uint64_t (*MarkupContainerViewController.allEditingDisabled.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.allEditingDisabled.modify;
}

void MarkupContainerViewController.formFillingEnabled.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    MarkupContainerViewController.delegate.didset();
}

uint64_t MarkupContainerViewController.pencilAlwaysDraws.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.pencilAlwaysDraws.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws, (uint64_t (*)(uint64_t))MarkupContainerViewController.delegate.didset);
}

uint64_t (*MarkupContainerViewController.pencilAlwaysDraws.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.allEditingDisabled.modify;
}

uint64_t MarkupContainerViewController.formFillingEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.formFillingEnabled.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.delegate.didset);
}

void MarkupContainerViewController.delegate.didset()
{
  uint64_t v0;
  _BYTE *v1;
  int v2;
  unsigned __int8 *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
  swift_beginAccess();
  if ((*v1 & 1) != 0)
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    v3 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
    swift_beginAccess();
    v2 = *v3;
    if (v2 != 1)
    {
      v4 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
      swift_beginAccess();
      if ((*v4 & 1) != 0)
      {
        LOBYTE(v2) = 3;
      }
      else
      {
        v5 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
        swift_beginAccess();
        if (*v5)
          LOBYTE(v2) = 2;
        else
          LOBYTE(v2) = 0;
      }
    }
  }
  *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) = v2;
  MarkupContainerViewController.editingMode.didset();
}

uint64_t (*MarkupContainerViewController.formFillingEnabled.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.allEditingDisabled.modify;
}

Swift::Void __swiftcall MarkupContainerViewController.setFormFillingEnabled(_:didUseBanner:)(Swift::Bool _, Swift::Bool didUseBanner)
{
  uint64_t v2;
  Swift::Bool *v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = (Swift::Bool *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
  swift_beginAccess();
  *v5 = _;
  MarkupContainerViewController.delegate.didset();
  if (_)
  {
    if (didUseBanner)
      v6 = 48;
    else
      v6 = 51;
    v7 = *(_QWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (v7)
    {
      v8 = (uint64_t *)(v7 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
      swift_beginAccess();
      v9 = *v8;
      if (!*v8)
        return;
      v10 = &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics;
      goto LABEL_11;
    }
    v11 = *(_QWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v11)
    {
      v12 = (uint64_t *)(v11 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      v9 = *v12;
      if (*v12)
      {
        v10 = &direct field offset for CanvasView.formAnalytics;
LABEL_11:
        *(_BYTE *)(*(_QWORD *)(v9 + *v10) + 19) = v6;
      }
    }
  }
}

uint64_t MarkupContainerViewController.toolbarHidden.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.toolbarHidden.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*MarkupContainerViewController.toolbarHidden.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

id MarkupContainerViewController.validateUndo(_:)(uint64_t a1)
{
  return MarkupContainerViewController.validateUndo(_:)(a1, (SEL *)&selRef_canUndo);
}

id MarkupContainerViewController.validateRedo(_:)(uint64_t a1)
{
  return MarkupContainerViewController.validateUndo(_:)(a1, (SEL *)&selRef_canRedo);
}

id MarkupContainerViewController.validateUndo(_:)(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  id result;

  result = *(id *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager);
  if (result)
    return objc_msgSend(result, *a2);
  return result;
}

id @objc MarkupContainerViewController.validateUndo(_:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id result;

  result = *(id *)(a1 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager);
  if (result)
    return objc_msgSend(result, *a4);
  return result;
}

id MarkupContainerViewController.undo(_:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager), sel_undo);
}

id MarkupContainerViewController.redo(_:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager), sel_redo);
}

void MarkupContainerViewController.revert(_:)()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager);
  if (v1)
  {
    v2 = v1;
    if (objc_msgSend(v2, sel_canUndo))
    {
      do
        objc_msgSend(v2, sel_undo);
      while ((objc_msgSend(v2, sel_canUndo) & 1) != 0);
    }
    objc_msgSend(v2, sel_removeAllActions);

  }
}

id MarkupContainerViewController.backgroundColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v1
    && (v2 = (id *)(v1 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), *v2))
  {
    v3 = *v2;
  }
  else
  {
    v4 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (!v4)
    {
      v5 = 0;
      goto LABEL_8;
    }
    v3 = objc_msgSend(v4, sel_view);
  }
  v5 = v3;
LABEL_8:
  v6 = objc_msgSend(v5, sel_backgroundColor);

  return v6;
}

void MarkupContainerViewController.backgroundColor.setter(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id *v4;
  id v5;
  void *v6;
  void *v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v3
    && (v4 = (id *)(v3 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), *v4))
  {
    v5 = *v4;
  }
  else
  {
    v6 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (!v6)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v5 = objc_msgSend(v6, sel_view);
  }
  v7 = v5;
LABEL_8:
  objc_msgSend(v7, sel_setBackgroundColor_, a1);

}

void (*MarkupContainerViewController.backgroundColor.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v4 = v3 + 9;
  v5 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  v3[10] = v1;
  v3[11] = v5;
  v6 = *(_QWORD *)(v1 + v5);
  if (v6
    && (v7 = (id *)(v6 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), *v7))
  {
    v8 = *v7;
  }
  else
  {
    v9 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (!v9)
    {
      v10 = 0;
      goto LABEL_8;
    }
    v8 = objc_msgSend(v9, sel_view);
  }
  v10 = v8;
LABEL_8:
  v11 = objc_msgSend(v10, sel_backgroundColor);

  *v4 = v11;
  return MarkupContainerViewController.backgroundColor.modify;
}

void MarkupContainerViewController.backgroundColor.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  id v9;
  id v10;
  id *v11;
  id v12;
  void *v13;
  void *v14;

  v2 = *(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 72);
  v3 = *v4;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v6 = *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)a1 + 88));
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      v11 = (id *)(v6 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      if (*v11)
      {
        v12 = *v11;
        goto LABEL_14;
      }
      v5 = v2[10];
    }
    v13 = *(void **)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (!v13)
    {
      v14 = 0;
      goto LABEL_17;
    }
    v12 = objc_msgSend(v13, sel_view);
LABEL_14:
    v14 = v12;
LABEL_17:
    objc_msgSend(v14, sel_setBackgroundColor_, v3);

    goto LABEL_18;
  }
  if (!v6)
    goto LABEL_9;
  v7 = (void **)(v6 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v8 = *v7;
  if (!v8)
  {
    v5 = v2[10];
LABEL_9:
    v10 = *(id *)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    v9 = v3;
    if (v10)
      v10 = objc_msgSend(v10, sel_view);
    goto LABEL_15;
  }
  v9 = v3;
  v10 = v8;
LABEL_15:
  objc_msgSend(v10, sel_setBackgroundColor_, v9);

  v14 = *v4;
LABEL_18:

  free(v2);
}

Swift::Bool __swiftcall MarkupContainerViewController.isTouchInThumbnailView(_:)(UITouch a1)
{
  uint64_t v1;
  uint64_t v2;
  id *v4;
  id v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2)
    return 0;
  v4 = (id *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
  swift_beginAccess();
  if (!*v4)
    return 0;
  v5 = *v4;
  -[objc_class locationInView:](a1.super.isa, sel_locationInView_, v5);
  v6 = objc_msgSend(v5, sel_pointInside_withEvent_, 0);

  return v6;
}

Swift::Bool __swiftcall MarkupContainerViewController.isTouchInPageLabelView(_:)(UITouch a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  id v5;
  unsigned __int8 v6;

  v2 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2)
    return 0;
  v4 = v2;
  v5 = PaperDocumentViewController.pageLabelView.getter();

  -[objc_class locationInView:](a1.super.isa, sel_locationInView_, v5);
  v6 = objc_msgSend(v5, sel_pointInside_withEvent_, 0);

  return v6;
}

Swift::Bool __swiftcall MarkupContainerViewController.isTouchInBannerView(_:)(UITouch a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v3 && (v4 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView)) != 0)
  {
    v5 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v6)
      return 0;
    v7 = *(void **)(v6 + direct field offset for CanvasElementViewController.bannerView);
    v5 = v7;
    if (!v7)
      return 0;
  }
  v8 = v5;
  -[objc_class locationInView:](a1.super.isa, sel_locationInView_, v5);
  v9 = objc_msgSend(v8, sel_pointInside_withEvent_, 0);

  return v9;
}

uint64_t MarkupContainerViewController.viewAcceptSingleTouch(_:)(UITouch a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  id *v13;
  id v14;
  unsigned __int8 v15;
  uint64_t v16;
  id *v17;

  v2 = v1;
  v4 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v5)
    goto LABEL_11;
  v6 = (_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  result = swift_beginAccess();
  if (!*v6)
    goto LABEL_11;
  v8 = *(void **)(*v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v8)
  {
    v9 = v8;
    v10 = specialized TiledPaperKitView.mostVisibleAttachment()();

    if (v10)
    {
      v11 = *(_QWORD *)(v2 + v4);
      if (v11)
      {
        v12 = (_QWORD *)(v11 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
        swift_beginAccess();
        if (*v12)
        {
          v13 = (id *)(*v12 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
          swift_beginAccess();
          if (*v13)
          {
            v14 = *v13;
            if (AnyCanvas.acceptSingleTouch(_:)(a1))
            {

              v15 = 1;
            }
            else
            {
              v15 = objc_msgSend(v14, sel_acceptSingleTouch_, a1.super.isa);

            }
            goto LABEL_14;
          }
        }
      }

    }
LABEL_11:
    v16 = *(_QWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v16
      || (v17 = (id *)(v16 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), !*v17))
    {
      v15 = 0;
      return v15 & 1;
    }
    v10 = *v17;
    v15 = AnyCanvas.acceptSingleTouch(_:)(a1);
LABEL_14:

    return v15 & 1;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall AnyCanvas.acceptSingleTouch(_:)(UITouch a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v5)(void);
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2F8);
  v6 = (void *)v5();
  -[objc_class locationInView:](a1.super.isa, sel_locationInView_, v6);
  v8 = v7;
  v10 = v9;

  v11 = (void *)v5();
  v13 = v12;
  ObjectType = swift_getObjectType();
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 144))(ObjectType, v13);

  if (!v15
    || (v16 = objc_msgSend(v15, sel_hitTest_withEvent_, 0, v8, v10),
        v15,
        !v16))
  {
    v18 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
    -[objc_class locationInView:](a1.super.isa, sel_locationInView_, *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView));
    v17 = *(void **)((char *)v2 + v18);
    if (v17)
    {
      v19 = objc_msgSend(v17, sel_hitTest_withEvent_, 0);
      if (v19)
      {

        LOBYTE(v17) = 1;
        return (char)v17;
      }
      (*(void (**)(uint64_t *__return_ptr))((*v4 & *v2) + 0x2C8))(&v23);
      if (v23 != 2)
        goto LABEL_13;
      LOBYTE(v17) = AnyCanvas.canvasElementExists(at:)((CGPoint)__PAIR128__(*(unint64_t *)&v10, *(unint64_t *)&v8));
      if ((v17 & 1) != 0)
      {
LABEL_12:
        LOBYTE(v17) = 1;
        return (char)v17;
      }
      v20 = *(_QWORD *)((char *)v2 + v18);
      if (v20)
      {
        v21 = (_QWORD *)(v20 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(_QWORD *)(*v21 + 16) || *(_QWORD *)(v21[1] + 16))
          goto LABEL_12;
LABEL_13:
        LOBYTE(v17) = 0;
        return (char)v17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return (char)v17;
  }

  LOBYTE(v17) = 1;
  return (char)v17;
}

Swift::Bool __swiftcall MarkupContainerViewController.acceptSingleTouch(_:)(UITouch a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  id v7;
  unsigned __int8 v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  UITouch v13;

  v2 = v1;
  v4 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    v6 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    if (*v6)
    {
      v7 = *v6;
      -[objc_class locationInView:](a1.super.isa, sel_locationInView_, v7);
      v8 = objc_msgSend(v7, sel_pointInside_withEvent_, 0);

      if ((v8 & 1) != 0)
        goto LABEL_7;
    }
    v9 = *(void **)(v2 + v4);
    if (v9)
    {
      v10 = v9;
      v11 = PaperDocumentViewController.pageLabelView.getter();

      -[objc_class locationInView:](a1.super.isa, sel_locationInView_, v11);
      LOBYTE(v10) = objc_msgSend(v11, sel_pointInside_withEvent_, 0);

      if ((v10 & 1) != 0)
        goto LABEL_7;
    }
  }
  if (MarkupContainerViewController.isTouchInBannerView(_:)(a1))
  {
LABEL_7:
    v12 = 1;
  }
  else
  {
    v13.super.isa = a1.super.isa;
    v12 = MarkupContainerViewController.viewAcceptSingleTouch(_:)(v13);
  }
  return v12 & 1;
}

void *MarkupContainerViewController.bannerView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v1)
  {
    v2 = &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  }
  else
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v1)
      return 0;
    v2 = &direct field offset for CanvasElementViewController.bannerView;
  }
  v3 = *(void **)(v1 + *v2);
  if (v3)
    v4 = v3;
  return v3;
}

void MarkupContainerViewController.showBannerView(with:)(void *a1)
{
  uint64_t v1;
  char *v2;
  void *v3;
  id v4;
  char *v5;
  char *v6;
  void *v7;
  id v8;
  id v9;

  v2 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v2)
  {
    v3 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration];
    *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = a1;
    v9 = a1;
    v4 = a1;
    v5 = v2;

    PaperDocumentViewController.bannerViewConfiguration.didset();
  }
  else
  {
    v6 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v6)
      return;
    v7 = *(void **)&v6[direct field offset for CanvasElementViewController.bannerViewConfiguration];
    *(_QWORD *)&v6[direct field offset for CanvasElementViewController.bannerViewConfiguration] = a1;
    v9 = a1;
    v8 = a1;
    v5 = v6;

    specialized CanvasElementViewController.bannerViewConfiguration.didset();
  }

}

uint64_t MarkupContainerViewController.showBannerView.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_showBannerView);
  swift_beginAccess();
  return *v1;
}

id MarkupContainerViewController.showBannerView.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  id result;
  uint64_t v5;
  uint64_t *v6;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_showBannerView);
  result = (id)swift_beginAccess();
  *v3 = a1;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    v6 = &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v5)
      return result;
    v6 = &direct field offset for CanvasElementViewController.bannerView;
  }
  result = *(id *)(v5 + *v6);
  if (result)
    return objc_msgSend(result, sel_removeFromSuperview);
  return result;
}

id (*MarkupContainerViewController.showBannerView.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.showBannerView.modify;
}

id MarkupContainerViewController.showBannerView.modify(uint64_t a1, char a2)
{
  id result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (v6)
    {
      result = *(id *)(v6 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
      if (!result)
        return result;
    }
    else
    {
      v7 = *(_QWORD *)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
      if (!v7)
        return result;
      result = *(id *)(v7 + direct field offset for CanvasElementViewController.bannerView);
      if (!result)
        return result;
    }
    return objc_msgSend(result, sel_removeFromSuperview);
  }
  return result;
}

void MarkupContainerViewController.pdfFrame.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id *v3;
  id v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v1)
  {
    v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v2)
    {
      v3 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      if (*v3)
      {
        v4 = objc_msgSend(*v3, sel_documentView);
        if (v4)
        {
          v5 = v4;
          objc_msgSend(v4, sel_frame);

        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

id MarkupContainerViewController.pdfScrollView.getter()
{
  return MarkupContainerViewController.findInteraction.getter((SEL *)&selRef_documentScrollView);
}

id MarkupContainerViewController.findInteraction.getter(SEL *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  id *v5;
  id result;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2)
    return 0;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v4)
    return 0;
  v5 = (id *)(*v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  result = *v5;
  if (*v5)
    return objc_msgSend(result, *a1);
  __break(1u);
  return result;
}

void *MarkupContainerViewController.pdfBackgroundColor.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void MarkupContainerViewController.pdfBackgroundColor.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  MarkupContainerViewController.updateBackgroundColor()();
}

void key path setter for MarkupContainerViewController.pdfBackgroundColor : MarkupContainerViewController(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

  MarkupContainerViewController.updateBackgroundColor()();
}

void (*MarkupContainerViewController.pdfBackgroundColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.pdfBackgroundColor.modify;
}

void MarkupContainerViewController.pdfBackgroundColor.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    MarkupContainerViewController.updateBackgroundColor()();
}

id MarkupContainerViewController.canBecomeFirstResponder.getter(SEL *a1)
{
  char *v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  objc_super v9;

  v3 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v3)
  {
    v4 = *(id *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  }
  else
  {
    v5 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
    if (!v5)
    {
      v9.receiver = v1;
      v9.super_class = (Class)type metadata accessor for MarkupContainerViewController();
      return objc_msgSendSuper2(&v9, *a1);
    }
    v4 = v5;
    v3 = 0;
  }
  v6 = v3;
  v7 = objc_msgSend(v4, *a1);

  return v7;
}

void *MarkupContainerViewController.toolPicker.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void *v4;
  uint64_t v5;
  id v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v1
    || (v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView),
        swift_beginAccess(),
        !*v2)
    || (v3 = (void **)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker),
        swift_beginAccess(),
        (v4 = *v3) == 0))
  {
    v5 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v5)
      return 0;
    v4 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);
  }
  v6 = v4;
  return v4;
}

Swift::Void __swiftcall MarkupContainerViewController.updateBackgroundColor()()
{
  _BYTE *v0;
  _BYTE *v1;
  id v2;
  void *v3;
  char **v4;
  id v5;
  id *v6;
  id v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  id v17;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_view);
  if (v2)
  {
    v3 = v2;
    if (v1[OBJC_IVAR___PPKMarkupContainerViewController_editingMode] == 3
      || !*(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController])
    {
      v4 = &selRef_systemBackgroundColor;
    }
    else
    {
      v4 = &selRef_clearColor;
    }
    v5 = objc_msgSend((id)objc_opt_self(), *v4);
    objc_msgSend(v3, sel_setBackgroundColor_, v5);

    v6 = (id *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor];
    swift_beginAccess();
    v7 = *v6;
    if (*v6)
    {
      v8 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
      v9 = *(char **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
      if (v9)
      {
        v10 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor];
        *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = v7;
        v11 = v7;
        v12 = v9;

        PaperDocumentViewController.updateBackgroundColor()();
        v13 = *(char **)&v1[v8];
        if (v13)
        {
          v14 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor];
          v15 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor];
          *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = v14;
          v7 = v14;
          v16 = v13;

          PaperDocumentViewController.updateBackgroundColor()();
        }
      }
      else
      {
        v17 = v7;
      }

    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MarkupContainerViewController.configureLookAndStyle()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void **v3;
  char *v4;
  void *v5;
  char *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  char *v18;
  id v19;
  void *v20;
  void *v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  void **v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (v2)
  {
    v3 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v4 = (char *)*v3;
    if (*v3)
    {
      v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
      if (!v5)
      {
        __break(1u);
        goto LABEL_31;
      }
      v6 = v4;
      v7 = objc_msgSend(v5, sel_canvasView);
      if (v7)
      {
        v8 = v7;
        v9 = v7;
LABEL_10:
        v12 = (void *)objc_opt_self();
        v13 = v8;
        v14 = objc_msgSend(v12, sel_clearColor);
        objc_msgSend(v13, sel_setBackgroundColor_, v14);

        goto LABEL_12;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  v10 = *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v10)
  {
    v11 = (void **)(v10 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    v9 = *v11;
    if (!*v11)
      goto LABEL_12;
    v8 = v9;
    goto LABEL_10;
  }
  v9 = 0;
LABEL_12:
  MarkupContainerViewController.updateBackgroundColor()();
  v15 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  v16 = *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (!v16)
    goto LABEL_19;
  v17 = (id *)(v16 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v17)
  {
    v18 = (char *)*v17;
    v19 = objc_msgSend(v1, sel_view);
    v20 = *(void **)&v18[direct field offset for CanvasView.canvasTiledView];
    if (v20)
    {
      objc_msgSend(v20, sel_setContentSnapshottingView_, v19);

      goto LABEL_16;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_16:
  v21 = *(void **)&v1[v15];
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v1, sel_view);
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, sel_superview);

      v26 = (void **)&v22[direct field offset for CanvasElementViewController.rulerHostView];
      swift_beginAccess();
      v27 = *v26;
      *v26 = v25;
      v28 = v25;
      specialized CanvasElementViewController.rulerHostView.didset(v27);

      goto LABEL_19;
    }
LABEL_32:
    __break(1u);
    return;
  }
LABEL_19:
  if (v4)
    objc_msgSend(v4, sel_setOverrideUserInterfaceStyle_, 1);
  if (v9)
    objc_msgSend(v9, sel_setOverrideUserInterfaceStyle_, 1);
  v29 = MarkupContainerViewController.toolPicker.getter();
  if (v29)
  {
    v30 = v29;
    objc_msgSend(v29, sel_setColorUserInterfaceStyle_, 1);

  }
  MarkupContainerViewController.updateBannerViewStyle()();
  if (v4)
  {
    *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = &outlined read-only object #0 of MarkupContainerViewController.configureLookAndStyle();
    swift_bridgeObjectRelease();
  }
  v31 = MarkupContainerViewController.toolPicker.getter();
  if (v31)
  {
    v32 = v31;
    objc_msgSend(v31, sel__setShowsHandwritingTool_, 0);

  }
}

void MarkupContainerViewController.updateBannerViewStyle()()
{
  char *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v1 = *(_QWORD *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (v1)
  {
    v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v2)
    {
      v3 = *v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
      swift_beginAccess();
      v4 = MEMORY[0x1DF0E666C](v3);
      if (v4)
      {
        v5 = (void *)v4;
        type metadata accessor for PaperDocumentViewController(0);
        v6 = swift_dynamicCastClass();
        if (v6)
        {
          v7 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
          v8 = v7;

          if (v7)
          {
LABEL_11:
            v12 = v8;
            v13 = objc_msgSend(v0, sel_traitCollection);
            v14 = objc_msgSend(v13, sel_userInterfaceStyle);

            objc_msgSend(v12, sel_setOverrideUserInterfaceStyle_, v14);
            return;
          }
        }
        else
        {

        }
      }
    }
  }
  v9 = *(_QWORD *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v9)
  {
    v10 = *(void **)(v9 + direct field offset for CanvasElementViewController.bannerView);
    v11 = v10;
    if (v10)
    {
      v8 = v11;
      goto LABEL_11;
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.removeContentViewController()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;

  v1 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  v2 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2)
    goto LABEL_5;
  v3 = objc_msgSend(v2, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = v3;
  objc_msgSend(v3, sel_removeFromSuperview);

  v5 = *(void **)(v0 + v1);
  if (v5)
  {
    objc_msgSend(v5, sel_removeFromParentViewController);
    v6 = *(void **)(v0 + v1);
  }
  else
  {
LABEL_5:
    v6 = 0;
  }
  *(_QWORD *)(v0 + v1) = 0;

  v7 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  v8 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v8)
  {
LABEL_10:
    *(_QWORD *)(v0 + v7) = 0;

    return;
  }
  v9 = objc_msgSend(v8, sel_view);
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, sel_removeFromSuperview);

    v8 = *(void **)(v0 + v7);
    if (v8)
    {
      objc_msgSend(v8, sel_removeFromParentViewController);
      v8 = *(void **)(v0 + v7);
    }
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
}

Swift::Void __swiftcall MarkupContainerViewController.updateEditingMode()()
{
  uint64_t v0;
  _BYTE *v1;
  char v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
  swift_beginAccess();
  if ((*v1 & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    v3 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
    swift_beginAccess();
    if ((*v3 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v4 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
      swift_beginAccess();
      if ((*v4 & 1) != 0)
      {
        v2 = 3;
      }
      else
      {
        v5 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
        swift_beginAccess();
        if (*v5)
          v2 = 2;
        else
          v2 = 0;
      }
    }
  }
  *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) = v2;
  MarkupContainerViewController.editingMode.didset();
}

void MarkupContainerViewController.pdfViewScaleChanged(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id *v3;
  id v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char **v12;
  double v13;
  double v14;
  double v15;
  double v16;

  if ((*(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes) & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (v1)
    {
      v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
      swift_beginAccess();
      if (*v2)
      {
        v3 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
        swift_beginAccess();
        if (*v3)
        {
          v4 = *v3;
          v5 = objc_msgSend(v4, sel_documentScrollView);
          if (v5)
          {
            v6 = v5;
            objc_msgSend(v4, sel_autoScaleFactor);
            v8 = v7;
            objc_msgSend(v6, sel_minimumZoomScale);
            if (v8 != v9)
              objc_msgSend(v6, sel_setMinimumZoomScale_, v8);
            objc_msgSend(v6, sel_zoomScale);
            v11 = v10;
            v12 = &selRef_minimumZoomScale;
            objc_msgSend(v6, sel_minimumZoomScale);
            if (v11 < v13
              || (objc_msgSend(v6, sel_zoomScale),
                  v15 = v14,
                  v12 = &selRef_maximumZoomScale,
                  objc_msgSend(v6, sel_maximumZoomScale),
                  v16 < v15))
            {
              objc_msgSend(v6, *v12);
              objc_msgSend(v6, sel_setZoomScale_);
            }

          }
        }
      }
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)(CGSize a1, Swift::Bool animated)
{
  uint64_t v2;
  void *v3;
  double height;
  double width;
  id v7;
  unint64_t v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v15;
  uint64_t v16;
  id v17;

  v3 = *(void **)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  if (!v3)
    return;
  height = a1.height;
  width = a1.width;
  v17 = v3;
  v7 = objc_msgSend(v17, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_4;
LABEL_17:

    swift_bridgeObjectRelease();
    return;
  }
  if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_17;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)MEMORY[0x1DF0E4D64](0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v9 = *(id *)(v8 + 32);
  }
  v10 = v9;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_bounds);
  v13 = 1.0;
  if (v11 >= width || v12 >= height)
  {
    v15 = width / v11;
    if (height / v12 < width / v11)
      v15 = height / v12;
    v13 = fmax(v15, 0.0001);
  }
  objc_msgSend(v17, sel_setMinimumZoomScale_, v13);
  objc_msgSend(v17, sel_setZoomScale_animated_, animated, v13);
  objc_msgSend(v17, sel_center);
  objc_msgSend(v10, sel_setCenter_);

}

Swift::Void __swiftcall MarkupContainerViewController.doubleTapped(_:)(UITapGestureRecognizer *a1)
{
  char *v1;
  void *v2;
  char *v4;
  char *v5;
  void **v6;
  void *v7;
  char *v8;
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  void *v32;

  v2 = v1;
  v4 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
  swift_beginAccess();
  if ((*v4 & 1) == 0)
  {
    v5 = *(char **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (v5)
    {
      v6 = (void **)&v5[direct field offset for CanvasElementViewController.canvasView];
      swift_beginAccess();
      if (*v6)
      {
        v7 = *(void **)((char *)*v6 + direct field offset for CanvasView.canvasScrollView);
        if (v7)
        {
          v8 = v5;
          v9 = v7;
          v10 = objc_msgSend(v2, sel_view);
          if (v10)
          {
            v11 = v10;
            objc_msgSend(v10, sel_bounds);
            v13 = v12;
            v15 = v14;

            v16 = CanvasElementViewController<>.preferredZoomScale(in:zoomable:)(0, v13, v15);
            objc_msgSend(v9, sel_zoomScale);
            if (vabdd_f64(v17, v16) >= 0.01)
            {
              objc_msgSend(v9, sel_setZoomScale_animated_, 1, v16);

              v32 = *v6;
              v9 = v32;

              if (!v32)
                return;
              *((_BYTE *)v9 + direct field offset for CanvasView.isZoomScaleAltered) = 0;
              goto LABEL_14;
            }
            specialized CanvasElementViewController.imageView.getter();
            v19 = v18;
            -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v18);
            v21 = v20;
            v23 = v22;

            objc_msgSend(v9, sel_maximumZoomScale);
            if (*v6)
            {
              v25 = *(void **)((char *)*v6 + direct field offset for CanvasView.canvasScrollView);
              if (v25)
              {
                v26 = v24;
                objc_msgSend(v25, sel_frame);
                if (*v6)
                {
                  v28 = *(void **)((char *)*v6 + direct field offset for CanvasView.canvasScrollView);
                  if (v28)
                  {
                    v29 = fmin(v26, 2.5);
                    v30 = v27 / v29;
                    objc_msgSend(v28, sel_frame);
                    objc_msgSend(v9, sel_zoomToRect_animated_, 1, v21 - v31 / v29 * 0.5, v23 - v30 * 0.5, v31 / v29, v30);

LABEL_14:
                    return;
                  }
LABEL_22:
                  __break(1u);
                  return;
                }
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_18;
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.updateGestures()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  char *v4;
  char v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v1)
  {
    v2 = (_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v2)
    {
      v3 = *(void **)(*v2 + direct field offset for Canvas.paperView);
      v4 = (char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
      swift_beginAccess();
      v5 = *v4;
      v6 = OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer;
      v7 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer);
      if ((v5 & 1) != 0)
      {
        if (!v7)
          return;
        v8 = v3;
        v9 = v7;
        objc_msgSend(v8, sel_removeGestureRecognizer_, v9);
        v10 = *(_QWORD **)(v0 + v6);
        *(_QWORD *)(v0 + v6) = 0;

      }
      else
      {
        if (v7)
          return;
        v11 = objc_allocWithZone(MEMORY[0x1E0DC3D80]);
        v10 = v3;
        v12 = objc_msgSend(v11, sel_initWithTarget_action_, v0, sel_doubleTapped_);
        v13 = *(void **)(v0 + v6);
        *(_QWORD *)(v0 + v6) = v12;

        v14 = *(void **)(v0 + v6);
        if (v14)
        {
          v15 = v14;
          objc_msgSend(v15, sel_setNumberOfTapsRequired_, 2);
          v16 = *(void **)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x390));
          if (v16)
            objc_msgSend(v16, sel_requireGestureRecognizerToFail_, v15);
          objc_msgSend(v10, sel_addGestureRecognizer_, v15);

        }
      }

    }
  }
}

uint64_t MarkupContainerViewControllerAnalysisDelegate.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t @objc MarkupContainerViewControllerAnalysisDelegate.contextWillPresentVisualSearchController(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  swift_unknownObjectRetain();
  swift_retain();
  a5(a4);
  swift_unknownObjectRelease();
  return swift_release();
}

char *MarkupContainerViewController.isInteractionActive.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *result;
  unsigned int v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2)
    return 0;
  type metadata accessor for ImageElementView(0);
  result = (char *)swift_dynamicCastClass();
  if (result)
  {
    result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      v4 = objc_msgSend(result, sel_analysisInteractionHidden);
      swift_unknownObjectRelease();
      return (char *)(v4 ^ 1);
    }
  }
  return result;
}

id MarkupContainerViewController.hasResultsForVisualSearch.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  id v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2)
    return 0;
  type metadata accessor for ImageElementView(0);
  v3 = swift_dynamicCastClass();
  if (!v3)
    return 0;
  v4 = objc_msgSend(*(id *)(v3 + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext);
  if (!v4)
    return 0;
  v5 = objc_msgSend(v4, sel_hasResultsForAnalysisTypes_, 16);
  swift_unknownObjectRelease();
  return v5;
}

char *MarkupContainerViewController.isVisualSearchEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *result;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2)
    return 0;
  type metadata accessor for ImageElementView(0);
  result = (char *)swift_dynamicCastClass();
  if (result)
  {
    result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      v4 = (unint64_t)objc_msgSend(result, sel_activeInteractionTypes);
      swift_unknownObjectRelease();
      return (char *)((v4 >> 2) & 1);
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldHighlightTextAndODAfterNextAnalysis.setter(char *result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v2)
  {
    v3 = (char)result;
    v4 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    result = (char *)swift_beginAccess();
    if (*v4)
    {
      type metadata accessor for ImageElementView(0);
      result = (char *)swift_dynamicCastClass();
      if (result)
      {
        result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
        if (result)
        {
          objc_msgSend(result, sel_setAutomaticallyInvokedInteraction_, v3 & 1);
          return (char *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldHighlightTextAndODAfterNextAnalysis.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *result;
  id v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2)
    return 0;
  type metadata accessor for ImageElementView(0);
  result = (char *)swift_dynamicCastClass();
  if (result)
  {
    result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      v4 = objc_msgSend(result, sel_automaticallyInvokedInteraction);
      swift_unknownObjectRelease();
      return (char *)(v4 == (id)1);
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldEnterVisualSearchAfterNextAnalysis.setter(char *result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v2)
  {
    v3 = (char)result;
    v4 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    result = (char *)swift_beginAccess();
    if (*v4)
    {
      type metadata accessor for ImageElementView(0);
      result = (char *)swift_dynamicCastClass();
      if (result)
      {
        result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
        if (result)
        {
          if ((v3 & 1) != 0)
            v5 = 4;
          else
            v5 = 0;
          objc_msgSend(result, sel_setAutomaticallyInvokedInteraction_, v5);
          return (char *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldUpliftSubjectAfterNextAnalysis.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *result;
  id v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2)
    return 0;
  type metadata accessor for ImageElementView(0);
  result = (char *)swift_dynamicCastClass();
  if (result)
  {
    result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      v4 = objc_msgSend(result, sel_automaticallyInvokedInteraction);
      swift_unknownObjectRelease();
      return (char *)(v4 == (id)8);
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldUpliftSubjectAfterNextAnalysis.setter(char *result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v2)
  {
    v3 = (char)result;
    v4 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    result = (char *)swift_beginAccess();
    if (*v4)
    {
      type metadata accessor for ImageElementView(0);
      result = (char *)swift_dynamicCastClass();
      if (result)
      {
        result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
        if (result)
        {
          if ((v3 & 1) != 0)
            v5 = 8;
          else
            v5 = 0;
          objc_msgSend(result, sel_setAutomaticallyInvokedInteraction_, v5);
          return (char *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

id @objc MarkupContainerViewController.imageDescription.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  if (v7)
  {
    v8 = (void *)MEMORY[0x1DF0E41AC](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t MarkupContainerViewController.infoButtonGlyphName.getter()
{
  return MarkupContainerViewController.infoButtonGlyphName.getter((SEL *)&selRef_infoButtonGlyphName);
}

uint64_t MarkupContainerViewController.filledInfoButtonGlyphName.getter()
{
  return MarkupContainerViewController.infoButtonGlyphName.getter((SEL *)&selRef_filledInfoButtonGlyphName);
}

uint64_t MarkupContainerViewController.infoButtonGlyphName.getter(SEL *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v2)
    return 0;
  v4 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v4)
    return 0;
  type metadata accessor for ImageElementView(0);
  v5 = swift_dynamicCastClass();
  if (!v5)
    return 0;
  v6 = objc_msgSend(*(id *)(v5 + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext);
  if (!v6)
    return 0;
  v7 = objc_msgSend(v6, *a1);
  swift_unknownObjectRelease();
  if (!v7)
    return 0;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

Swift::Void __swiftcall MarkupContainerViewController.updateForFullscreen(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  uint64_t v2;
  void *v3;
  id v5;

  v3 = *(void **)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v3)
  {
    v5 = v3;
    PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(animated);

  }
}

Swift::Void __swiftcall MarkupContainerViewController.setShouldHideMarkupOverlays(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v3)
  {
    v6 = (_QWORD *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v6)
    {
      type metadata accessor for ImageElementView(0);
      v7 = swift_dynamicCastClass();
      if (v7)
      {
        v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v7
                                                                   + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext));
        if (v8)
        {
          objc_msgSend(v8, sel_setAnalysisInteractionHidden_animated_, _, animated);
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.infoButtonTapped()()
{
  MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4);
}

Swift::Void __swiftcall MarkupContainerViewController.setupAndStartImageAnalysisIfNeeded()()
{
  MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_setActiveInteractionTypes_, 9);
}

SEL *MarkupContainerViewController.infoButtonTapped()(SEL *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  SEL *v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v3)
  {
    v5 = result;
    v6 = (_QWORD *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    result = (SEL *)swift_beginAccess();
    if (*v6)
    {
      type metadata accessor for ImageElementView(0);
      result = (SEL *)swift_dynamicCastClass();
      if (result)
      {
        result = (SEL *)objc_msgSend(*(id *)((char *)result + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext);
        if (result)
        {
          objc_msgSend(result, *v5, a2);
          return (SEL *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

void MarkupContainerViewController.documentView(_:detectedFormInContent:withAutofill:)(void *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v4 = v3;
  v5 = *(_QWORD *)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    v9 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v10 = *v9;
    if (*v9)
    {
      type metadata accessor for PaperDocumentView();
      v11 = a1;
      v12 = v10;
      v13 = static NSObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
      {
        v14 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
        swift_beginAccess();
        v15 = (void *)MEMORY[0x1DF0E666C](v14);
        if (v15)
        {
          v16 = v15;
          if ((objc_msgSend(v15, sel_respondsToSelector_, sel_markupContainerViewController_detectedFormInContent_withAutofill_) & 1) != 0)objc_msgSend(v16, sel_markupContainerViewController_detectedFormInContent_withAutofill_, v4, a2 & 1, a3 & 1);
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

void MarkupContainerViewController.documentViewController(_:didSetupDocumentView:)(uint64_t a1, uint64_t a2)
{
  specialized MarkupContainerViewController.documentViewController(_:didSetupDocumentView:)(a2);
}

void *MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(uint64_t a1, uint64_t a2, char a3)
{
  return MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(a1, a2, a3, (SEL *)&selRef_markupContainerViewController_willPresentViewControllerWithAnimation_);
}

void *MarkupContainerViewController.documentView(_:didDismissViewController:animated:)(uint64_t a1, uint64_t a2, char a3)
{
  return MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(a1, a2, a3, (SEL *)&selRef_markupContainerViewController_didDismissViewControllerWithAnimation_);
}

void *MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(uint64_t a1, uint64_t a2, char a3, SEL *a4)
{
  uint64_t v4;
  uint64_t v7;
  void *result;
  void *v9;

  v7 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  result = (void *)MEMORY[0x1DF0E666C](v7);
  if (result)
  {
    v9 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, *a4) & 1) != 0)
      objc_msgSend(v9, *a4, v4, a3 & 1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(uint64_t a1, char a2)
{
  return MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(a1, a2, (SEL *)&selRef_markupContainerViewController_thumbnailViewDidCollapse_);
}

uint64_t MarkupContainerViewController.documentView(_:drawingWillChangeIn:)()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  result = swift_beginAccess();
  if ((*v1 & 1) == 0)
    *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup) = 1;
  return result;
}

uint64_t MarkupContainerViewController.documentView(_:shouldOpenLink:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSURL *v5;
  void *v6;
  void *v7;
  id v8;

  v1 = v0;
  v2 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1DF0E666C](v2);
  if (!v3)
    return 1;
  v4 = v3;
  if ((objc_msgSend(v3, sel_respondsToSelector_, sel_markupContainerViewController_shouldOpenLink_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    return 1;
  }
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  v8 = objc_msgSend(v4, sel_markupContainerViewController_shouldOpenLink_, v1, v6);
  swift_unknownObjectRelease();

  return (uint64_t)v8;
}

void protocol witness for PaperDocumentViewControllerDelegate.documentViewController(_:didSetupDocumentView:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2)
{
  specialized MarkupContainerViewController.documentViewController(_:didSetupDocumentView:)(a2);
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(a1, a2, a3, a4, a5, (SEL *)&selRef_markupContainerViewController_willPresentViewControllerWithAnimation_);
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:didDismissViewController:animated:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(a1, a2, a3, a4, a5, (SEL *)&selRef_markupContainerViewController_didDismissViewControllerWithAnimation_);
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v6;
  uint64_t v9;
  void *result;
  void *v11;

  v9 = v6 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  result = (void *)MEMORY[0x1DF0E666C](v9);
  if (result)
  {
    v11 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, *a6) & 1) != 0)
      objc_msgSend(v11, *a6, v6, a3 & 1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(a1, a2, a3, a4, (SEL *)&selRef_markupContainerViewController_thumbnailViewDidCollapse_);
}

uint64_t protocol witness for PaperDocumentViewDelegate.documentView(_:drawingWillChangeIn:) in conformance MarkupContainerViewController()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  result = swift_beginAccess();
  if ((*v1 & 1) == 0)
    *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup) = 1;
  return result;
}

void MarkupContainerViewController.sourceContentType(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t inited;
  void *v17;
  id v18;
  NSDictionary v19;
  NSURL *v20;
  const __CFURL *v21;
  const __CFURL *v22;
  CGImageSourceRef v23;
  uint64_t v24;
  unint64_t v25;
  const __CFData *isa;
  objc_class *v27;
  uint64_t v28;
  CGImageSource *v29;
  const __CFString *v30;
  __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x1E0C80A78](v4, v5);
  v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v17 = (void *)*MEMORY[0x1E0CBD240];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBD240];
  *(_BYTE *)(inited + 40) = 0;
  v18 = v17;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v11, v15, v7);
    URL._bridgeToObjectiveC()(v20);
    v22 = v21;
    v23 = CGImageSourceCreateWithURL(v21, v19.super.isa);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else
  {
    v24 = *v15;
    v25 = v15[1];
    isa = Data._bridgeToObjectiveC()().super.isa;
    v27 = v19.super.isa;
    v23 = CGImageSourceCreateWithData(isa, v27);
    outlined consume of Data._Representation(v24, v25);

  }
  v28 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a2, 1, 1, v28);
  if (v23)
  {
    v29 = v23;
    v30 = (id)CGImageSourceGetType(v29);
    if (v30
      && (v31 = (__CFString *)v30,
          v35 = 0,
          v36 = 0,
          static String._conditionallyBridgeFromObjectiveC(_:result:)(),
          v31,
          v36))
    {
      v32 = (uint64_t)v34;
      UTType.init(_:)();

      outlined destroy of StocksKitCurrencyCache.Provider?(a2, &demangling cache variable for type metadata for UTType?);
      outlined init with take of (key: Int, value: AnyCRValue)?(v32, a2, &demangling cache variable for type metadata for UTType?);
    }
    else
    {

    }
  }
  else
  {

  }
}

uint64_t closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  *(double *)(v9 + 232) = a1;
  *(_QWORD *)(v9 + 224) = v13;
  *(_OWORD *)(v9 + 208) = v12;
  *(_BYTE *)(v9 + 296) = a9;
  *(_QWORD *)(v9 + 192) = a7;
  *(_QWORD *)(v9 + 200) = a8;
  *(_QWORD *)(v9 + 176) = a5;
  *(_QWORD *)(v9 + 184) = a6;
  type metadata accessor for MainActor();
  *(_QWORD *)(v9 + 240) = static MainActor.shared.getter();
  *(_QWORD *)(v9 + 248) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v9 + 256) = v10;
  return swift_task_switch();
}

uint64_t closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD);
  _QWORD *v8;
  _QWORD *v10;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 176);
    swift_release();
    if (v1)
    {
      v2 = *(void (**)(void))(v0 + 176);
      lazy protocol witness table accessor for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError();
      v3 = (void *)swift_allocError();
      *v4 = 1;
      v2();

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 192) + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  *(_QWORD *)(v0 + 264) = v6;
  if (!v6)
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_QWORD *)(v0 + 200))
  {
    v7 = *(void (**)(_QWORD))(v0 + 176);
    if (v7)
      v7(0);
  }
  if (*(_BYTE *)(v0 + 296) == 1)
  {
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v8;
    *v8 = v0;
    v8[1] = closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
    return specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v10;
    *v10 = v0;
    v10[1] = closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
    return MarkupContainerViewController.loadPDF(from:)(*(_QWORD *)(v0 + 208));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD *v13;
  void *v14;
  id v15;
  id v16;
  void (*v17)(_QWORD);
  void *v18;

  swift_release();
  if (*(_QWORD *)(v0 + 200))
  {
    if (one-time initialization token for isQuickLookUIExtension != -1)
      swift_once();
    v1 = 0.25;
    if (static NSBundle.isQuickLookUIExtension == 1)
    {
      v2 = *(double *)(v0 + 232);
      v3 = v2 - CACurrentMediaTime() + 0.5;
      if (v3 < 0.0)
        v1 = 0.0;
      else
        v1 = v3;
      if (v1 < 0.25)
        v1 = 0.25;
    }
    v4 = *(_QWORD *)(v0 + 264);
    v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v6 = *(void **)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
    if (v6)
    {
      v7 = *(void **)(v0 + 264);
      v8 = (void *)objc_opt_self();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v6;
      *(_QWORD *)(v0 + 48) = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *(_QWORD *)(v0 + 56) = v9;
      v10 = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 24) = 1107296256;
      *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *(_QWORD *)(v0 + 40) = &block_descriptor_125;
      v11 = _Block_copy((const void *)(v0 + 16));
      v12 = v6;
      swift_retain();
      swift_release();
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v12;
      v13[3] = v7;
      v13[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
      v13[5] = v5;
      *(_QWORD *)(v0 + 96) = partial apply for closure #2 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *(_QWORD *)(v0 + 104) = v13;
      *(_QWORD *)(v0 + 64) = v10;
      *(_QWORD *)(v0 + 72) = 1107296256;
      *(_QWORD *)(v0 + 80) = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
      *(_QWORD *)(v0 + 88) = &block_descriptor_131;
      v14 = _Block_copy((const void *)(v0 + 64));
      v15 = v12;
      v16 = v7;
      swift_retain();
      swift_release();
      objc_msgSend(v8, sel_animateWithDuration_delay_options_animations_completion_, 0, v11, v14, 0.25, v1);

      _Block_release(v14);
      _Block_release(v11);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    v17 = *(void (**)(_QWORD))(v0 + 176);
    if (v17)
      v17(0);
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
  v18 = *(void **)(v0 + 264);
  MarkupContainerViewController.updateGestures()();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD *v26;
  void *v27;
  id v28;
  id v29;
  void (*v30)(_QWORD);
  void *v31;
  uint64_t v33;

  swift_release();
  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = *(void **)(v0 + 280);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 280);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v33 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue();
    v11 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v5, v6, "Unable to load image: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v10, -1, -1);
    MEMORY[0x1DF0E6558](v9, -1, -1);
  }
  else
  {

  }
  v13 = *(void **)(v0 + 280);
  if (*(_QWORD *)(v0 + 200))
  {
    if (one-time initialization token for isQuickLookUIExtension != -1)
      swift_once();
    v14 = 0.25;
    if (static NSBundle.isQuickLookUIExtension == 1)
    {
      v15 = *(double *)(v0 + 232);
      v16 = v15 - CACurrentMediaTime() + 0.5;
      if (v16 < 0.0)
        v14 = 0.0;
      else
        v14 = v16;
      if (v14 < 0.25)
        v14 = 0.25;
    }
    v17 = *(_QWORD *)(v0 + 264);
    v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v19 = *(void **)(v17 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
    if (v19)
    {
      v20 = *(void **)(v0 + 264);
      v21 = (void *)objc_opt_self();
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v19;
      *(_QWORD *)(v0 + 48) = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *(_QWORD *)(v0 + 56) = v22;
      v23 = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 24) = 1107296256;
      *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *(_QWORD *)(v0 + 40) = &block_descriptor_125;
      v24 = _Block_copy((const void *)(v0 + 16));
      v25 = v19;
      swift_retain();
      swift_release();
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v25;
      v26[3] = v20;
      v26[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
      v26[5] = v18;
      *(_QWORD *)(v0 + 96) = partial apply for closure #2 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *(_QWORD *)(v0 + 104) = v26;
      *(_QWORD *)(v0 + 64) = v23;
      *(_QWORD *)(v0 + 72) = 1107296256;
      *(_QWORD *)(v0 + 80) = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
      *(_QWORD *)(v0 + 88) = &block_descriptor_131;
      v27 = _Block_copy((const void *)(v0 + 64));
      v28 = v25;
      v29 = v20;
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel_animateWithDuration_delay_options_animations_completion_, 0, v24, v27, 0.25, v14);

      _Block_release(v27);
      _Block_release(v24);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    v30 = *(void (**)(_QWORD))(v0 + 176);
    if (v30)
      v30(*(_QWORD *)(v0 + 280));
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
  v31 = *(void **)(v0 + 264);
  MarkupContainerViewController.updateGestures()();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t MarkupContainerViewController.loadPDF(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[23] = a1;
  v2[24] = v1;
  type metadata accessor for DataOrURL();
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v2[26] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[27] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

id MarkupContainerViewController.loadPDF(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  id v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_BYTE **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  swift_release();
  v5 = type metadata accessor for CRAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v6 = (uint64_t)&v3[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  swift_beginAccess();
  outlined assign with take of CRAsset?(v1, v6);
  swift_endAccess();
  type metadata accessor for CRContext();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  v7 = (void *)MEMORY[0x1DF0E3C90](0, v0 + 16);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined init with copy of PKStrokeProperties(v4, v2, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v36 = v3[OBJC_IVAR___PPKMarkupContainerViewController_editingMode];
  v8 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  v9 = v7;
  v10 = specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(v2, v9, &v36);

  v11 = *(void **)&v3[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  *(_QWORD *)&v3[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController] = v10;
  v12 = (char *)v10;

  v13 = objc_msgSend(v3, sel_traitCollection);
  v14 = objc_msgSend(v13, sel_horizontalSizeClass);

  v15 = &v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
  swift_beginAccess();
  v16 = *v15;
  *v15 = v14 == (id)1;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v16);
  v17 = &v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate];
  swift_beginAccess();
  *((_QWORD *)v17 + 1) = &protocol witness table for MarkupContainerViewController;
  swift_unknownObjectWeakAssign();
  v18 = &v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  v19 = *(_QWORD *)v18;
  if (*(_QWORD *)v18)
  {
    if (MEMORY[0x1DF0E666C](v17))
      v20 = *(_QWORD *)(*((_QWORD *)v17 + 1) + 8);
    else
      v20 = 0;
    v21 = v19 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    *(_QWORD *)(v21 + 8) = v20;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  result = objc_msgSend(v12, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_18;
  }
  v23 = result;
  v24 = *(_QWORD *)(v0 + 192);
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v25 = *(void **)(v24 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  v26 = *(void **)(v0 + 192);
  if (v25)
  {
    v27 = v25;
    result = objc_msgSend(v26, sel_view);
    if (!result)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v28 = result;
    result = objc_msgSend(v12, sel_view);
    if (!result)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v29 = result;
    objc_msgSend(v28, sel_insertSubview_belowSubview_, result, v27);

LABEL_14:
    result = objc_msgSend(v12, sel_view);
    if (result)
    {
      v30 = result;
      result = objc_msgSend(*(id *)(v0 + 192), sel_view);
      if (result)
      {
        v31 = result;
        v32 = *(char **)(v0 + 192);
        specialized static NSLayoutConstraint.constrain(_:to:)(v30, result);

        objc_msgSend(v32, sel_addChildViewController_, v12);
        objc_msgSend(v12, sel_didMoveToParentViewController_, v32);
        v33 = *(_QWORD *)&v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<PaperDocument>, Never>>);
        v34 = swift_allocObject();
        *(_QWORD *)(v34 + 16) = v33;
        *(_QWORD *)(v0 + 176) = v34;
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>, MEMORY[0x1E0C95D90]);
        v35 = Publisher<>.sink(receiveValue:)();
        swift_release();
        swift_release();
        *(_QWORD *)&v32[OBJC_IVAR___PPKMarkupContainerViewController_pdfCancellable] = v35;

        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
        return (id)(*(uint64_t (**)(void))(v0 + 8))();
      }
      goto LABEL_19;
    }
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  result = objc_msgSend(*(id *)(v0 + 192), sel_view);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v28 = result;
  result = objc_msgSend(v12, sel_view);
  if (result)
  {
    v29 = result;
    objc_msgSend(v28, sel_addSubview_, result);
    goto LABEL_14;
  }
LABEL_23:
  __break(1u);
  return result;
}

void closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    MarkupContainerViewController.updateFirstResponderIfNecessary()();

  }
}

void closure #1 in MarkupContainerViewController.loadPDF(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v13 = (void *)MEMORY[0x1DF0E666C](a2 + 16);
  if (v13)
  {
    v14 = v13;
    if (*((_BYTE *)v13 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v21 = static OS_dispatch_queue.main.getter();
      v15 = swift_allocObject();
      v22 = v4;
      v16 = v15;
      swift_unknownObjectWeakInit();
      aBlock[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:);
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_144_0;
      v17 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v23 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v20 = v8;
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v18 = (void *)v21;
      MEMORY[0x1DF0E48C0](0, v12, v7, v17);
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v3);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v20);
      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

void closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v13 = (void *)MEMORY[0x1DF0E666C](a2 + 16);
  if (v13)
  {
    v14 = v13;
    if (*((_BYTE *)v13 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v21 = static OS_dispatch_queue.main.getter();
      v15 = swift_allocObject();
      v22 = v4;
      v16 = v15;
      swift_beginAccess();
      v17 = (void *)MEMORY[0x1DF0E666C](a2 + 16);
      swift_unknownObjectWeakInit();

      aBlock[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:);
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_139;
      v18 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v23 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v20 = v8;
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v19 = (void *)v21;
      MEMORY[0x1DF0E48C0](0, v12, v7, v18);
      _Block_release(v18);

      (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v3);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v20);
      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

void closure #1 in closure #1 in MarkupContainerViewController.loadPDF(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (_BYTE *)v2;
    v4 = v2 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    v5 = (void *)MEMORY[0x1DF0E666C](v4);
    if (v5)
    {
      v6 = v5;
      if ((objc_msgSend(v5, sel_respondsToSelector_, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_) & 1) != 0)objc_msgSend(v6, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_, v3, v3[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup]);
      swift_unknownObjectRelease();
      v3[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup] = 0;
    }

  }
}

uint64_t PPKZeroCallbackCounter.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

void MarkupContainerViewController.canvasElement(_:detectedFormInContent:withAutofill:)(void *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v4 = v3;
  v5 = *(void **)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v5)
  {
    type metadata accessor for AnyCanvasElementViewController();
    v9 = v5;
    v10 = a1;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if ((a1 & 1) != 0)
    {
      v11 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
      swift_beginAccess();
      v12 = (void *)MEMORY[0x1DF0E666C](v11);
      if (v12)
      {
        v13 = v12;
        if ((objc_msgSend(v12, sel_respondsToSelector_, sel_markupContainerViewController_detectedFormInContent_withAutofill_) & 1) != 0)objc_msgSend(v13, sel_markupContainerViewController_detectedFormInContent_withAutofill_, v4, a2 & 1, a3 & 1);
        swift_unknownObjectRelease();
      }
    }
  }
}

void *MarkupContainerViewController.documentView(_:openFormFilling:)()
{
  uint64_t v0;
  uint64_t v1;
  void *result;
  void *v3;

  v1 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  result = (void *)MEMORY[0x1DF0E666C](v1);
  if (result)
  {
    v3 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, sel_markupContainerViewController_openFormFilling_) & 1) != 0)objc_msgSend(v3, sel_markupContainerViewController_openFormFilling_, v0, 1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void __swiftcall MarkupContainerViewController.viewForZooming(in:)(UIView_optional *__return_ptr retstr, UIScrollView *in)
{
  id v2;
  unint64_t v3;
  id v4;
  uint64_t v5;

  v2 = -[UIScrollView subviews](in, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5)
      goto LABEL_6;
  }
  else if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1DF0E4D64](0, v3);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(id *)(v3 + 32);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t MarkupContainerViewController.canvasDrawingWillChange(_:)()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  result = swift_beginAccess();
  if ((*v1 & 1) == 0)
    *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup) = 1;
  return result;
}

void *MarkupContainerViewController.canvas(_:wantsToEnterFullscreen:)(uint64_t a1, char a2)
{
  return MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(a1, a2, (SEL *)&selRef_markupContainerViewController_wantsToEnterFullscreen_);
}

void *MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(uint64_t a1, char a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v6;
  void *result;
  void *v8;

  v6 = v3 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  result = (void *)MEMORY[0x1DF0E666C](v6);
  if (result)
  {
    v8 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, *a3) & 1) != 0)
      objc_msgSend(v8, *a3, v3, a2 & 1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

BOOL MarkupContainerViewController.canvasCanSnapshot(_:)()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) == 3;
}

void *MarkupContainerViewController.documentView(_:contentFrameDidChange:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  void *result;
  void *v11;

  v9 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  result = (void *)MEMORY[0x1DF0E666C](v9);
  if (result)
  {
    v11 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, sel_markupContainerViewController_contentFrameDidChange_) & 1) != 0)objc_msgSend(v11, sel_markupContainerViewController_contentFrameDidChange_, v4, a1, a2, a3, a4);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *protocol witness for CanvasDelegate.canvas(_:wantsToEnterFullscreen:) in conformance MarkupContainerViewController(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(a1, a2, a3, a4, (SEL *)&selRef_markupContainerViewController_wantsToEnterFullscreen_);
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(uint64_t a1, char a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v5;
  uint64_t v8;
  void *result;
  void *v10;

  v8 = v5 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  result = (void *)MEMORY[0x1DF0E666C](v8);
  if (result)
  {
    v10 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, *a5) & 1) != 0)
      objc_msgSend(v10, *a5, v5, a2 & 1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

BOOL protocol witness for CanvasDelegate.canvasCanSnapshot(_:) in conformance MarkupContainerViewController()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) == 3;
}

uint64_t one-time initialization function for isQuickLookUIExtension()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static NSBundle.isQuickLookUIExtension();
  static NSBundle.isQuickLookUIExtension = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static NSBundle.isQuickLookUIExtension()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_mainBundle);
  v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    if (v3 == 0xD000000000000027 && v5 == 0x80000001DDF51B20)
      goto LABEL_9;
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = objc_msgSend(v0, sel_mainBundle);
  v9 = objc_msgSend(v8, sel_bundleIdentifier);

  if (!v9)
    return 0;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (v10 == 0xD00000000000001FLL && v12 == 0x80000001DDF51B00)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 1;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t one-time initialization function for isMarkupPhoteEditingExtension()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static NSBundle.isMarkupPhoteEditingExtension();
  static NSBundle.isMarkupPhoteEditingExtension = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static NSBundle.isMarkupPhoteEditingExtension()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD00000000000002ELL && v4 == 0x80000001DDF51B50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

void one-time initialization function for isLowJetsamLimitEnvironment()
{
  id v0;
  id v1;
  BOOL v2;

  if (one-time initialization token for isMarkupPhoteEditingExtension != -1)
    swift_once();
  if ((static NSBundle.isMarkupPhoteEditingExtension & 1) != 0)
    goto LABEL_7;
  if (one-time initialization token for isQuickLookUIExtension != -1)
    swift_once();
  if (static NSBundle.isQuickLookUIExtension == 1)
  {
LABEL_7:
    v0 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

    v2 = v1 == 0;
  }
  else
  {
    v2 = 0;
  }
  static NSBundle.isLowJetsamLimitEnvironment = v2;
}

Swift::Bool __swiftcall AnyCanvas.canvasElementExists(at:)(CGPoint at)
{
  _QWORD *v1;
  double y;
  double x;
  _QWORD *v4;
  uint64_t (*v5)(void);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  Swift::Bool v22;

  y = at.y;
  x = at.x;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2F8);
  v6 = (void *)v5();
  v8 = v7;
  ObjectType = swift_getObjectType();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(ObjectType, v8);

  if (v10 >> 62)
    goto LABEL_14;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    v12 = 4;
    while (1)
    {
      v13 = (v10 & 0xC000000000000001) != 0
          ? (_QWORD *)MEMORY[0x1DF0E4D64](v12 - 4, v10)
          : *(id *)(v10 + 8 * v12);
      v14 = v13;
      v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1))
        break;
      if (((*(uint64_t (**)(void))((*v4 & *v13) + 0x218))() & 1) != 0)
      {

      }
      else
      {
        v16 = (void *)v5();
        objc_msgSend(v14, sel_convertPoint_fromCoordinateSpace_, v16, x, y);
        v18 = v17;
        v20 = v19;

        v21 = objc_msgSend(v14, sel_hitTest_withEvent_, 0, v18, v20);
        if (v21)
        {
          v22 = 1;
          goto LABEL_16;
        }
      }
      ++v12;
      if (v15 == v11)
        goto LABEL_15;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_15:
  v22 = 0;
LABEL_16:
  swift_bridgeObjectRelease_n();
  return v22;
}

uint64_t __deallocating_deinit in ResultWrapped #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  return swift_deallocClassInstance();
}

void specialized CanvasElementViewController.enableToolPickerTapInteraction()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;

  v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    return;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, sel_window);

  if (v3)
  {
    v4 = (void **)&v0[direct field offset for CanvasElementViewController.canvasView];
    swift_beginAccess();
    v5 = (char *)*v4;
    if (!*v4)
    {
LABEL_15:

      return;
    }
    v6 = &v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI];
    swift_beginAccess();
    v7 = MEMORY[0x1DF0E666C](v6);
    if (v7)
    {
      v8 = (void *)v7;
      type metadata accessor for AnyCanvasElementViewController();
      v9 = (char *)swift_dynamicCastClass();
      v10 = v9;
      if (v9)
      {
        if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x60))())
        {
          v12 = v11;
          ObjectType = swift_getObjectType();
          v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 24);
          v15 = v5;
          if ((v14(v10, ObjectType, v12) & 1) != 0)
          {
            v10 = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32))(v10, ObjectType, v12);

            swift_unknownObjectRelease();
LABEL_14:
            objc_msgSend(v10, sel__enableTapInteractionForWindow_, v3);

            goto LABEL_15;
          }
          swift_unknownObjectRelease();
        }
        else
        {
          v16 = v5;
        }
        v10 = (char *)*(id *)&v10[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker];

      }
      goto LABEL_14;
    }
    v10 = 0;
    goto LABEL_14;
  }
}

void specialized CanvasElementViewController.updateActionInfoViewVisibility()()
{
  uint64_t v0;
  void **v1;
  char *v2;
  void *v3;
  char *v4;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v2 = (char *)*v1;
  if (!*v1)
    return;
  v3 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v3)
    return;
  v4 = v2;
  v5 = v3;
  v6 = objc_msgSend(v5, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_18;
LABEL_5:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x1DF0E4D64](0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v8 = *(id *)(v7 + 32);
  }
  v9 = v8;
  swift_bridgeObjectRelease();

  type metadata accessor for ImageElementView(0);
  v10 = swift_dynamicCastClass();
  if (!v10)
    goto LABEL_16;
  v11 = v10;
  v12 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  v13 = *v12;
  v14 = direct field offset for ImageElementView.mediaView;
  v15 = *(void **)(v11 + direct field offset for ImageElementView.mediaView);
  if (v15)
  {
    v16 = objc_msgSend(v15, sel_imageAnalysisContext);
    if (v16)
    {
      objc_msgSend(v16, sel_setActionInfoViewHidden_animated_, (v13 & 0xFFFFFFFD) == 1, 0);
      swift_unknownObjectRelease();
    }
  }
  if ((v13 | 2) == 3
    && (v17 = *(void **)(v11 + v14)) != 0
    && (v18 = objc_msgSend(v17, sel_imageAnalysisContext)) != 0)
  {
    objc_msgSend(v18, sel_setHighlightSelectableItemsEnabled_, 0);

    swift_unknownObjectRelease();
  }
  else
  {
LABEL_16:

  }
}

void specialized CanvasElementViewController.updateToolPickerVisibility()()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t);
  char *v13;
  id v14;
  char *v15;
  unsigned __int8 *v16;
  _BOOL8 v17;

  v1 = v0;
  v2 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v3 = (char *)*v2;
  if (*v2)
  {
    v4 = &v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI];
    swift_beginAccess();
    v5 = MEMORY[0x1DF0E666C](v4);
    if (v5)
    {
      v6 = (void *)v5;
      type metadata accessor for AnyCanvasElementViewController();
      v7 = (_QWORD *)swift_dynamicCastClass();
      if (!v7)
      {
LABEL_12:

        return;
      }
      v8 = v7;
      if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x60))())
      {
        v10 = v9;
        ObjectType = swift_getObjectType();
        v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 24);
        v13 = v3;
        if ((v12(v8, ObjectType, v10) & 1) != 0)
        {
          v14 = (id)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 32))(v8, ObjectType, v10);

          swift_unknownObjectRelease();
          if (!v14)
          {
            v6 = v13;
            goto LABEL_12;
          }
LABEL_11:
          v16 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.editingMode);
          swift_beginAccess();
          v17 = *v16 == 3;
          objc_msgSend(v14, sel_setVisible_forFirstResponder_, v17, v3);
          objc_msgSend(v14, sel_setVisible_forFirstResponder_, v17, v1);

          v6 = v14;
          goto LABEL_12;
        }
        swift_unknownObjectRelease();
      }
      else
      {
        v15 = v3;
      }
      v14 = *(id *)((char *)v8 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);

      goto LABEL_11;
    }
  }
}

void specialized CanvasElementViewController.imageView.getter()
{
  uint64_t v0;
  void **v1;
  char *v2;
  void *v3;
  char *v4;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v2 = (char *)*v1;
  if (!*v1)
    return;
  v3 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v3)
    return;
  v4 = v2;
  v5 = v3;
  v6 = objc_msgSend(v5, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_5:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x1DF0E4D64](0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v8 = *(id *)(v7 + 32);
  }
  v9 = v8;
  swift_bridgeObjectRelease();

  type metadata accessor for ImageElementView(0);
  if (!swift_dynamicCastClass())

}

void specialized CanvasElementViewController.isImageAnalysisEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  void **v4;
  char *v5;
  void *v6;
  char *v7;
  id v8;
  id v9;
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (_BYTE *)(v1 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled);
  swift_beginAccess();
  *v3 = a1;
  v4 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v5 = (char *)*v4;
  if (*v4)
  {
    v6 = *(void **)&v5[direct field offset for CanvasView.zoomView];
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      v9 = objc_msgSend(v8, sel_subviews);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14)
          goto LABEL_5;
      }
      else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_5:
        if ((v10 & 0xC000000000000001) != 0)
        {
          v11 = (id)MEMORY[0x1DF0E4D64](0, v10);
        }
        else
        {
          if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v11 = *(id *)(v10 + 32);
        }
        v12 = v11;
        swift_bridgeObjectRelease();

        type metadata accessor for ImageElementView(0);
        v13 = swift_dynamicCastClass();
        if (v13)
        {
          *(_BYTE *)(v13 + direct field offset for ImageElementView.isImageAnalysisEnabled) = *v3;
          ImageElementView.updateMediaViewImageAnalysis()();
        }
        v8 = v12;
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();

LABEL_13:
    }
  }
}

id specialized CanvasElementViewController.updateViewForPaper(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void **v48;
  void *v49;
  id v50;
  void *v51;
  char *v52;
  id result;
  uint64_t v54;
  uint64_t ObjectType;
  char *v56;
  void *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t (*v63)(char *, _QWORD *);
  char *v64;
  uint64_t (*v65)(char *, _QWORD *);
  char *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  uint64_t v69;
  void *v70;
  id v71;
  char *v72;
  void **v73;
  void *v74;
  id v75;
  void *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  char *v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  id v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  void *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  id v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  char *v121;
  char *v122;
  char v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void *v129;
  unsigned __int8 *v130;
  void **v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t);
  id v138;
  _BYTE *v139;
  char *v140;
  char v141;
  void *v142;
  _BYTE *v143;
  id v144;
  char *v145;
  void *v146;
  _BYTE *v147;
  char *v148;
  char v149;
  void *v150;
  id v151;
  id v152;
  char *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  id v159;
  void *v160;
  void *v161;
  char *v162;
  _BYTE *v163;
  _BYTE *v164;
  char *v165;
  char *v166;
  char *v167;
  void *v168;
  void *v169;
  id v170;
  id v171;
  id v172;
  char *v173;
  void *v174;
  void *v175;
  id v176;
  id v177;
  id v178;
  void *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  void (*v194)(char *, char *);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  void **v201;
  char *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  unint64_t v210;
  id v211;
  Class isa;
  id v213;
  void **v214;
  void *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t (*v219)(uint64_t, uint64_t);
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  void **v245;
  char v246;
  uint64_t v247;
  char v248;
  char v249;

  v2 = v1;
  v4 = type metadata accessor for CRAssetOrData();
  v226 = *(_QWORD *)(v4 - 8);
  v227 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v225 = (uint64_t *)((char *)&v217 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v7, v8);
  v228 = (char *)&v217 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v235 = (char *)&v217 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v237, v13);
  v15 = (char *)&v217 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v231 = (char *)&v217 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v233 = *(_QWORD *)(v19 - 8);
  v234 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v232 = (char *)&v217 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v238 = *(_QWORD *)(v236 - 8);
  MEMORY[0x1E0C80A78](v236, v22);
  v229 = (char *)&v217 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CRKeyPath();
  v242 = *(_QWORD *)(v24 - 8);
  v243 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v241 = (char *)&v217 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v240 = (char *)&v217 - v29;
  v30 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v31 = *(v30 - 1);
  MEMORY[0x1E0C80A78](v30, v32);
  v230 = (char *)&v217 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v239 = (char *)&v217 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v244 = (char *)&v217 - v39;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v217 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v45);
  v47 = (char *)&v217 - v46;
  v48 = (void **)&v2[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  v245 = v48;
  v49 = *v48;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v47, &demangling cache variable for type metadata for Capsule<Image>?);
  if (v49 && (*(unsigned int (**)(char *, uint64_t, _QWORD *))(v31 + 48))(v47, 1, v30) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v47, &demangling cache variable for type metadata for Capsule<Image>?);
    v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
    objc_msgSend(v2, sel_setView_, v50);

    v51 = *v245;
    *v245 = 0;

    specialized CanvasElementViewController.updateToolPickerVisibility()();
    specialized CanvasElementViewController.updateActionInfoViewVisibility()();
    v52 = &v2[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate];
    swift_beginAccess();
    result = (id)MEMORY[0x1DF0E666C](v52);
    if (result)
    {
      v54 = *((_QWORD *)v52 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v2, ObjectType, v54);
      return (id)swift_unknownObjectRelease();
    }
    return result;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v47, &demangling cache variable for type metadata for Capsule<Image>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v43, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v31 + 48))(v43, 1, v30) == 1)
    return (id)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, &demangling cache variable for type metadata for Capsule<Image>?);
  v223 = v15;
  v56 = v244;
  (*(void (**)(char *, char *, _QWORD *))(v31 + 32))(v244, v43, v30);
  v57 = *v245;
  v224 = v31;
  if (v57)
  {
    v58 = v30;
    v59 = v56;
    v221 = (char *)direct field offset for Canvas.paperView;
    v60 = *(_QWORD *)((char *)v57 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v57 + direct field offset for Canvas.paperView))
                    + 0x380);
    swift_beginAccess();
    v61 = v239;
    (*(void (**)(char *, uint64_t, _QWORD *))(v31 + 16))(v239, v60, v58);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v222 = v57;
    v62 = v240;
    Capsule<>.rootID.getter();
    v63 = *(uint64_t (**)(char *, _QWORD *))(v31 + 8);
    v64 = v59;
    v65 = v63;
    v63(v61, v58);
    v66 = v241;
    Capsule<>.rootID.getter();
    LOBYTE(v60) = static CRKeyPath.== infix(_:_:)();
    v67 = *(void (**)(char *, uint64_t))(v242 + 8);
    v68 = v66;
    v69 = v243;
    v67(v68, v243);
    v67(v62, v69);
    if ((v60 & 1) != 0)
    {
      v70 = *(void **)&v221[(_QWORD)v57];
      swift_beginAccess();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v71 = v70;
      Capsule.merge<A>(_:)();
      swift_endAccess();

      v249 = 3;
      v72 = v222;
      AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v249);

      v30 = v58;
      v56 = v64;
      v73 = v245;
    }
    else
    {
      v73 = v245;
      v74 = *v245;
      *v245 = 0;

      specialized CanvasElementViewController.updateToolPickerVisibility()();
      specialized CanvasElementViewController.updateActionInfoViewVisibility()();

      v30 = v58;
      v56 = v64;
    }
    v31 = v224;
    if (*v73)
      return (id)v65(v56, v30);
  }
  v75 = *(id *)&v2[direct field offset for CanvasElementViewController.context];
  result = objc_msgSend(v2, sel_view);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v76 = result;
  objc_msgSend(result, sel_bounds);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v84 = v83;

  v85 = *(char **)(v31 + 16);
  v86 = v239;
  v221 = v85;
  v222 = (char *)v30;
  ((void (*)(char *, char *, _QWORD *))v85)(v239, v56, v30);
  v87 = &v2[direct field offset for CanvasElementViewController.editingMode];
  swift_beginAccess();
  v88 = v2[direct field offset for CanvasElementViewController.allowMediaCanvasElements];
  v89 = v2[direct field offset for CanvasElementViewController.transparentBackground];
  LODWORD(v87) = *v87;
  v90 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Image>));
  v91 = v2;
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(v75, v86, (int)v87, v88, v89, v2, v78, v80, v82, v84);
  v93 = v92;
  v94 = &v91[direct field offset for CanvasElementViewController.liveStreamDrawings];
  swift_beginAccess();
  LOBYTE(v87) = *v94;
  v95 = (unsigned __int8 *)&v93[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
  swift_beginAccess();
  *v95 = v87;
  v96 = direct field offset for CanvasView.canvasTiledView;
  v97 = *(void **)&v93[direct field offset for CanvasView.canvasTiledView];
  if (v97)
  {
    v98 = v93;
    v99 = (char *)objc_msgSend(v97, sel_canvasView);
    if (v99)
    {
      v100 = v99;
      objc_msgSend(v99, sel_setGenerateLiveDrawing_, *v95);

      v98 = v100;
    }

  }
  v101 = &v93[OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI];
  swift_beginAccess();
  v102 = MEMORY[0x1DF0E666C](v101);
  if (v102)
  {
    v103 = (id)v102;
    type metadata accessor for AnyCanvasElementViewController();
    v104 = (_QWORD *)swift_dynamicCastClass();
    if (!v104)
    {
LABEL_27:

      goto LABEL_28;
    }
    v105 = v104;
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v104) + 0x60))())
    {
      v107 = v106;
      v108 = swift_getObjectType();
      if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v107 + 24))(v105, v108, v107) & 1) != 0)
      {
        v109 = (id)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v107 + 32))(v105, v108, v107);

        swift_unknownObjectRelease();
        if (!v109)
          goto LABEL_28;
        goto LABEL_26;
      }
      swift_unknownObjectRelease();
    }
    v109 = *(id *)((char *)v105 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);

LABEL_26:
    objc_msgSend(v109, sel_addObserver_, v93);
    v110 = specialized CanvasView.toolPickerObserver.getter();
    objc_msgSend(v109, sel_addObserver_, v110);

    v103 = specialized CanvasView.toolPickerObserver.getter();
    specialized CanvasViewToolPickerObserver.updateUI(toolPicker:)(v109);

    goto LABEL_27;
  }
LABEL_28:
  v111 = &v91[direct field offset for CanvasElementViewController.liveStreamMessenger];
  swift_beginAccess();
  v112 = *(_QWORD *)v111;
  v113 = *((_QWORD *)v111 + 1);
  v114 = &v93[direct field offset for Canvas.liveStreamMessenger];
  swift_beginAccess();
  *(_QWORD *)v114 = v112;
  *((_QWORD *)v114 + 1) = v113;
  swift_unknownObjectRetain_n();
  v115 = v93;
  swift_unknownObjectRelease();
  specialized Canvas.liveStreamMessenger.didset();

  swift_unknownObjectRelease();
  v116 = &v91[direct field offset for CanvasElementViewController.participantDetailsDataSource];
  swift_beginAccess();
  MEMORY[0x1DF0E666C](v116);
  v117 = *((_QWORD *)v116 + 1);
  v118 = &v115[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource];
  swift_beginAccess();
  *((_QWORD *)v118 + 1) = v117;
  swift_unknownObjectWeakAssign();
  v119 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView;
  v120 = *(void **)&v115[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView];
  v121 = v115;
  objc_msgSend(v120, sel_setNeedsLayout);

  swift_unknownObjectRelease();
  v122 = &v91[direct field offset for CanvasElementViewController.showParticipantCursors];
  swift_beginAccess();
  v123 = *v122;
  v124 = &v121[OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors];
  swift_beginAccess();
  *v124 = v123;
  objc_msgSend(*(id *)&v115[v119], sel_setNeedsLayout);
  v125 = &v91[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate];
  swift_beginAccess();
  v126 = MEMORY[0x1DF0E666C](v125);
  v239 = v125;
  if (v126)
    v127 = *(_QWORD *)(*((_QWORD *)v125 + 1) + 8);
  else
    v127 = 0;
  v128 = &v121[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  *((_QWORD *)v128 + 1) = v127;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  v129 = *(void **)&v93[v96];
  if (!v129)
  {
    v131 = (void **)&v121[direct field offset for Canvas._canvasElementController];
    v132 = *(_BYTE **)&v121[direct field offset for Canvas._canvasElementController];
    if (!v132)
      goto LABEL_63;
    goto LABEL_42;
  }
  v130 = (unsigned __int8 *)&v91[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled];
  swift_beginAccess();
  objc_msgSend(v129, sel_setSixChannelBlending_, *v130);
  v131 = (void **)&v121[direct field offset for Canvas._canvasElementController];
  v132 = *(_BYTE **)&v121[direct field offset for Canvas._canvasElementController];
  if (v132)
  {
LABEL_42:
    v139 = v132;
    goto LABEL_43;
  }
  swift_getObjectType();
  v133 = swift_conformsToProtocol2();
  if (v133)
    v134 = v133;
  else
    v134 = 0;
  if (v133)
    v135 = v129;
  else
    v135 = 0;
  if (!v135)
    goto LABEL_47;
  v136 = swift_getObjectType();
  v137 = *(uint64_t (**)(uint64_t, uint64_t))(v134 + 48);
  v218 = v136;
  v219 = v137;
  v220 = v121;
  v138 = v129;
  v139 = (_BYTE *)v219(v218, v134);

  v132 = 0;
LABEL_43:
  v140 = &v91[direct field offset for CanvasElementViewController.canEditDescription];
  swift_beginAccess();
  v141 = *v140;
  v139[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription] = *v140;
  v142 = *(void **)&v139[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
  v143 = v132;
  if (v142)
  {
    v144 = v142;
    v145 = ToolPickerController.textToolListViewController.getter();
    v145[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = v141;
    TextToolListViewController.updateUI()();

  }
  else
  {
    v145 = v139;
  }

LABEL_47:
  v146 = *v131;
  if (*v131)
  {
    v147 = *v131;
    goto LABEL_49;
  }
  v154 = *(void **)&v93[v96];
  if (v154)
  {
    swift_getObjectType();
    v155 = swift_conformsToProtocol2();
    if (v155)
      v156 = v155;
    else
      v156 = 0;
    if (v155)
      v157 = v154;
    else
      v157 = 0;
    if (!v157)
    {
LABEL_61:
      v160 = *(void **)&v93[v96];
      if (v160)
        objc_msgSend(v160, sel_setRulerHostingDelegate_, *(_QWORD *)&v91[direct field offset for CanvasElementViewController._rulerHostingDelegate]);
      goto LABEL_63;
    }
    v158 = swift_getObjectType();
    v219 = *(uint64_t (**)(uint64_t, uint64_t))(v156 + 48);
    v220 = v121;
    v159 = v154;
    v147 = (_BYTE *)v219(v158, v156);

    v146 = 0;
LABEL_49:
    v148 = &v91[direct field offset for CanvasElementViewController.canEditVellumOpacity];
    swift_beginAccess();
    v149 = *v148;
    v147[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = *v148;
    v150 = *(void **)&v147[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    v151 = v146;
    if (v150)
    {
      v152 = v150;
      v153 = ToolPickerController.textToolListViewController.getter();
      v153[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v149;
      TextToolListViewController.updateUI()();

      v147 = v153;
    }

    goto LABEL_61;
  }
LABEL_63:
  if (objc_msgSend(v91, sel_isFirstResponder))
    objc_msgSend(v121, sel_becomeFirstResponder);
  objc_msgSend(v121, sel_setAutoresizingMask_, 18);
  objc_msgSend(v121, sel_setTranslatesAutoresizingMaskIntoConstraints_, 1);
  objc_msgSend(v91, sel_setView_, v121);
  v161 = *v245;
  *v245 = v121;
  v162 = v121;

  specialized CanvasElementViewController.updateToolPickerVisibility()();
  specialized CanvasElementViewController.updateActionInfoViewVisibility()();

  specialized CanvasElementViewController.imageView.getter();
  if (v163)
  {
    v164 = v163;
    v165 = &v91[direct field offset for CanvasElementViewController.isImageAnalysisEnabled];
    swift_beginAccess();
    v164[direct field offset for ImageElementView.isImageAnalysisEnabled] = *v165;
    ImageElementView.updateMediaViewImageAnalysis()();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementViewController<Image>.MediaAnalysisObserver);
  v166 = (char *)swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  specialized CanvasElementViewController.imageView.getter();
  if (v167)
  {
    v168 = v167;
    v169 = *(void **)&v167[direct field offset for ImageElementView.mediaView];
    if (v169)
    {
      swift_retain();
      v170 = v169;
      v171 = objc_msgSend(v170, sel_imageAnalysisContext);
      if (v171)
      {
        objc_msgSend(v171, sel_addAnalysisObserver_, v166);

        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_release();
      }
    }
    else
    {
      swift_retain();
      v172 = ImageElementView.pendingImageAnalysisObservers.getter();
      objc_msgSend(v172, sel_addObject_, v166);

      swift_release();
    }
  }
  *(_QWORD *)&v91[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = v166;
  swift_retain();
  swift_release();
  specialized CanvasElementViewController.imageView.getter();
  v220 = v166;
  if (v173
    && (v174 = v173,
        v175 = *(void **)&v173[direct field offset for ImageElementView.mediaView],
        v176 = v175,
        v174,
        v175)
    && (v177 = objc_msgSend(v176, sel_imageAnalysisContext), v176,
                                                                                                 v177))
  {
    v178 = objc_msgSend(v177, sel_analysis);
    swift_unknownObjectRelease();
  }
  else
  {
    v178 = 0;
  }
  v179 = *(void **)&v91[direct field offset for CanvasElementViewController.analysis];
  *(_QWORD *)&v91[direct field offset for CanvasElementViewController.analysis] = v178;
  v180 = v178;
  specialized CanvasElementViewController.analysis.didset(v179);

  swift_unknownObjectWeakInit();
  v248 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Canvas<Image>.PaperViewCanvasPublisher>);
  v181 = swift_allocObject();
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v247, v181 + 16, &demangling cache variable for type metadata for Canvas<Image>.PaperViewCanvasPublisher);
  v247 = v181;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Capsule<Image>, Never>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Image>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>, MEMORY[0x1E0C95D90]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<Image>, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<Capsule<Image>, Never>, MEMORY[0x1E0C95F40]);
  v182 = Publisher.subscribe<A>(_:)();
  swift_release();
  *(_QWORD *)&v91[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = v182;
  swift_release();
  v183 = v239;
  if (MEMORY[0x1DF0E666C](v239))
  {
    v184 = *((_QWORD *)v183 + 1);
    v185 = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v184 + 16))(v91, v185, v184);
    swift_unknownObjectRelease();
  }
  v239 = v91;
  v186 = *(_QWORD *)&v162[direct field offset for Canvas.paperView]
       + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v162[direct field offset for Canvas.paperView]) + 0x380);
  swift_beginAccess();
  v245 = (void **)v162;
  v187 = v230;
  v188 = v222;
  ((void (*)(char *, uint64_t, char *))v221)(v230, v186, v222);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v189 = (uint64_t)v231;
  Capsule<>.root.getter();
  v190 = v240;
  Capsule<>.rootID.getter();
  v246 = 1;
  v191 = v242;
  v192 = v243;
  (*(void (**)(char *, char *, uint64_t))(v242 + 16))(v241, v190, v243);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  v193 = v232;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v191 + 8))(v190, v192);
  outlined destroy of PKStrokeProperties(v189, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  v194 = *(void (**)(char *, char *))(v224 + 8);
  v194(v187, v188);
  v195 = v234;
  v196 = (uint64_t)v235;
  SharedTagged_9.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v233 + 8))(v193, v195);
  v197 = v238;
  v198 = v236;
  v199 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v238 + 48))(v196, 1, v236);
  v200 = (uint64_t)v223;
  if (v199 == 1)
  {
    v194(v244, v188);

    swift_release();
    return (id)outlined destroy of StocksKitCurrencyCache.Provider?(v196, &demangling cache variable for type metadata for Ref<Image>?);
  }
  else
  {
    v201 = v245;
    v202 = v229;
    (*(void (**)(char *, uint64_t, uint64_t))(v197 + 32))(v229, v196, v198);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    v203 = (uint64_t)v228;
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v226 + 48))(v203, 1, v227) == 1)
    {

      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v203, &demangling cache variable for type metadata for CRAssetOrData?);
    }
    else
    {
      v204 = v225;
      outlined init with copy of PKStrokeProperties(v203, (uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v205 = v203;
        v206 = *v204;
        v207 = v204[1];
        v208 = v204;
        v209 = v204[2];
        v210 = v208[3];
        outlined destroy of PKStrokeProperties(v205, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
        outlined copy of Data._Representation(v209, v210);
        outlined consume of Data._Representation(v206, v207);
        outlined consume of Data._Representation(v209, v210);
        v211 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
        outlined copy of Data._Representation(v209, v210);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v213 = objc_msgSend(v211, sel_initWithData_, isa);
        outlined consume of Data._Representation(v209, v210);

        v214 = (void **)&v239[direct field offset for CanvasElementViewController.image];
        swift_beginAccess();
        v215 = *v214;
        *v214 = v213;
        v197 = v238;

        v216 = v210;
        v202 = v229;
        outlined consume of Data._Representation(v209, v216);
      }
      else
      {
        outlined destroy of PKStrokeProperties((uint64_t)v204, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
        outlined destroy of PKStrokeProperties(v203, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      }

      swift_release();
    }
    outlined destroy of PKStrokeProperties(v200, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    (*(void (**)(char *, uint64_t))(v197 + 8))(v202, v198);
    return (id)((uint64_t (*)(char *, char *))v194)(v244, v222);
  }
}

void specialized CanvasElementViewController.merge<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void **v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  _BYTE v18[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v13 = (char *)*v12;
  if (v13)
  {
    v14 = *(void **)&v13[direct field offset for Canvas.paperView];
    swift_beginAccess();
    type metadata accessor for Image();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v15 = v13;
    v16 = v14;
    Capsule.merge<A>(_:)();
    swift_endAccess();

    v18[0] = 3;
    AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)v18);

  }
  else
  {
    v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
    v17(v11, a1, v7);
    v17(v6, (uint64_t)v11, v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    specialized CanvasElementViewController.updateViewForPaper(_:)((uint64_t)v6);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for Capsule<Image>?);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  }
}

void specialized CanvasElementViewController.bannerViewConfiguration.didset()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void **v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  Class isa;
  id v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  id v36;
  id v37;
  char *v38;
  id v39;
  id v40;
  _QWORD aBlock[6];

  v1 = *(void **)&v0[direct field offset for CanvasElementViewController.bannerViewConfiguration];
  if (v1)
  {
    v2 = v0;
    v3 = direct field offset for CanvasElementViewController.bannerView;
    v4 = *(void **)&v0[direct field offset for CanvasElementViewController.bannerView];
    v39 = v1;
    if (!v4)
    {
      v7 = v1;
      goto LABEL_6;
    }
    v5 = v1;
    v6 = objc_msgSend(v4, sel_superview, v39);
    if (v6)
    {
      v39 = v6;

LABEL_6:
      return;
    }
    v8 = *(void **)&v2[v3];
    if (!v8)
      goto LABEL_6;
    v9 = (void **)&v2[direct field offset for CanvasElementViewController.canvasView];
    swift_beginAccess();
    v10 = *v9;
    if (v10)
      objc_msgSend(v10, sel_addSubview_, v8);
    else
      v11 = v8;
    objc_msgSend(v8, sel_populateWithConfiguration_, v5);
    objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v12 = objc_msgSend(v8, sel_bottomAnchor);
    v13 = objc_msgSend(v2, sel_view);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, sel_safeAreaLayoutGuide);

      v16 = objc_msgSend(v15, sel_topAnchor);
      v17 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v16);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1DDF354A0;
      *(_QWORD *)(v18 + 32) = v17;
      v40 = v17;
      v19 = objc_msgSend(v8, sel_leadingAnchor);
      v20 = objc_msgSend(v2, sel_view);
      if (v20)
      {
        v21 = v20;
        v22 = objc_msgSend(v20, sel_leadingAnchor);

        v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);
        *(_QWORD *)(v18 + 40) = v23;
        v24 = objc_msgSend(v8, sel_trailingAnchor);
        v25 = objc_msgSend(v2, sel_view);
        if (v25)
        {
          v26 = v25;
          v27 = (void *)objc_opt_self();
          v28 = objc_msgSend(v26, sel_safeAreaLayoutGuide);

          v29 = objc_msgSend(v28, sel_trailingAnchor);
          v30 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v29);

          *(_QWORD *)(v18 + 48) = v30;
          aBlock[0] = v18;
          specialized Array._endMutation()();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v27, sel_activateConstraints_, isa);

          v32 = objc_msgSend(v2, sel_view);
          if (v32)
          {
            v33 = v32;
            objc_msgSend(v32, sel_layoutIfNeeded);

            v34 = (_QWORD *)swift_allocObject();
            v34[2] = v40;
            v34[3] = v8;
            v34[4] = v2;
            aBlock[4] = partial apply for specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset;
            aBlock[5] = v34;
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            aBlock[3] = &block_descriptor_74;
            v35 = _Block_copy(aBlock);
            v36 = v8;
            v37 = v40;
            v38 = v2;
            swift_release();
            objc_msgSend(v36, sel_showWithAnimations_, v35);

            _Block_release(v35);
            return;
          }
LABEL_20:
          __break(1u);
          return;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  objc_msgSend(a1, sel_setActive_, 0);
  v5 = objc_msgSend(a2, sel_topAnchor);
  v6 = objc_msgSend(a3, sel_view);
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, sel_safeAreaLayoutGuide);

    v9 = objc_msgSend(v8, sel_topAnchor);
    v10 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v9);

    objc_msgSend(v10, sel_setActive_, 1);
    v11 = objc_msgSend(a3, sel_view);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, sel_layoutIfNeeded);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void specialized CanvasElementViewController.rulerHostView.didset(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  objc_class *v10;
  _BYTE *v11;
  id v12;
  id v13;
  _QWORD *v14;
  void *v15;
  objc_super v16;

  v2 = v1;
  v4 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  v5 = *v4;
  if (a1)
  {
    if (!v5)
      goto LABEL_5;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v6 = v5;
    v7 = a1;
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
      return;
    v5 = *v4;
    if (!*v4)
    {
LABEL_5:
      v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
      *(_QWORD *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = 0;
      goto LABEL_8;
    }
  }
  else if (!v5)
  {
    return;
  }
  v10 = (objc_class *)type metadata accessor for RulerHostingDelegate();
  v11 = objc_allocWithZone(v10);
  swift_unknownObjectWeakInit();
  v11[OBJC_IVAR____TtC8PaperKit20RulerHostingDelegate_sharedRuler] = 1;
  swift_unknownObjectWeakAssign();
  v16.receiver = v11;
  v16.super_class = v10;
  v12 = v5;
  v13 = objc_msgSendSuper2(&v16, sel_init);
  v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
  *(_QWORD *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = v13;

LABEL_8:
  v14 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v14)
  {
    v15 = *(void **)(*v14 + direct field offset for CanvasView.canvasTiledView);
    if (v15)
      objc_msgSend(v15, sel_setRulerHostingDelegate_, *(_QWORD *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate));
  }
}

void specialized CanvasElementViewController.analysis.didset(void *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  char **v9;
  id v10;
  unint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  char **v29;
  _UNKNOWN **v30;
  id v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, _UNKNOWN **);
  id v34;
  char *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;

  v2 = *(void **)(v1 + direct field offset for CanvasElementViewController.analysis);
  if (!v2)
    return;
  v3 = v1;
  if (a1)
  {
    if (v2 == a1)
      return;
  }
  v4 = v1 + direct field offset for CanvasElementViewController.formDelegate;
  swift_beginAccess();
  v5 = MEMORY[0x1DF0E666C](v4);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v2;
  v8 = v7;
  v9 = &selRef_setCanvasWidth_;
  if (!v5)
    goto LABEL_33;
  v40 = v6;
  v10 = objc_msgSend(v7, sel_formRegions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v41 = v8;
  v12 = objc_msgSend(v8, sel_formRegions);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v42 = MEMORY[0x1E0DEE9D8];
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_9:
      v38 = v2;
      if (v14 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v14; ++i)
      {
        if ((v13 & 0xC000000000000001) != 0)
          v16 = (id)MEMORY[0x1DF0E4D64](i, v13);
        else
          v16 = *(id *)(v13 + 8 * i + 32);
        v17 = v16;
        if (!objc_msgSend(v16, sel_contentType) || objc_msgSend(v17, sel_contentType) == (id)1)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v18 = v42;
      v2 = v38;
      v9 = (char **)0x1F5462000;
      v19 = v39;
      if (v42 < 0)
        goto LABEL_41;
      goto LABEL_24;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v18 = MEMORY[0x1E0DEE9D8];
  v19 = v39;
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_26;
  }
LABEL_24:
  if ((v18 & 0x4000000000000000) != 0)
    goto LABEL_41;
  v20 = *(_QWORD *)(v18 + 16);
LABEL_26:
  swift_release();
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, BOOL, BOOL, uint64_t))(v40 + 8))(v3, v19 > 0, v20 != 0, ObjectType);
  swift_unknownObjectRelease();
  if (!v20)
  {
    v8 = v41;
    if (v19 <= 0)
      goto LABEL_33;
    v25 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    v23 = *v25;
    if (!*v25)
      goto LABEL_33;
    v24 = 44;
    goto LABEL_32;
  }
  v22 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v23 = *v22;
  v8 = v41;
  if (*v22)
  {
    v24 = 45;
LABEL_32:
    *(_BYTE *)(*(_QWORD *)(v23 + direct field offset for CanvasView.formAnalytics) + 18) = v24;
  }
LABEL_33:
  specialized CanvasElementViewController.updateFormFillingIfNeeded()();
  v26 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v27 = *v26;
  if (*v26)
  {
    v28 = *(void **)(v27 + direct field offset for Canvas._editingView);
    v29 = v9;
    if (v28)
    {
      v30 = *(_UNKNOWN ***)(v27 + direct field offset for Canvas._editingView + 8);
      v31 = *(id *)(v27 + direct field offset for Canvas._editingView);
    }
    else
    {
      v31 = *(id *)(v27 + direct field offset for Canvas.paperView);
      v30 = &protocol witness table for ContainerCanvasElementView<A>;
    }
    v32 = swift_getObjectType();
    v33 = (uint64_t (*)(uint64_t, _UNKNOWN **))v30[18];
    v34 = v28;
    v35 = (char *)v33(v32, v30);

    if (v35)
    {
      v36 = objc_msgSend(v8, (SEL)v29 + 3777);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
      v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(_QWORD *)&v35[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v37;
      swift_bridgeObjectRelease();
      v8 = *(void **)&v35[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
      *(_QWORD *)&v35[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = v2;

    }
  }

}

void specialized CanvasElementViewController.updateFormFillingIfNeeded()()
{
  uint64_t v0;
  void **v1;
  void *v2;
  void *v3;
  char *v4;
  id v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  BOOL v17;
  unint64_t v18;
  id v19;
  void *v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  void *v29;
  _QWORD *v30;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  BOOL v38;
  id v39;
  void *v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  char a_low;
  double v45;
  double v46;
  void *v47;
  id v48;
  id v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  id v59;
  id v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  unint64_t v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  double v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  void *v79;
  _QWORD *v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  BOOL v88;
  _QWORD *v89;
  void *v90;
  BOOL v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  BOOL v95;
  id v96;
  void *v97;
  char v98;
  id v99;
  void *v100;
  void *v101;
  id v102;
  id v103;
  void *v104;
  _QWORD *v105;
  char *v106;
  id v107;
  id v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  _QWORD *v113;
  void *v114;
  BOOL v115;
  uint64_t v116;
  _QWORD *v117;
  void *v118;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  void *v124;
  _UNKNOWN **v125;
  id v126;
  uint64_t ObjectType;
  unint64_t v128;
  void (*v129)(unint64_t, uint64_t, _UNKNOWN **);
  id v130;
  _QWORD *v131;
  _UNKNOWN **v132;
  _QWORD *v133;
  uint64_t v134;
  void (*v135)(_QWORD, _QWORD, _QWORD);
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  void *v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  _UNKNOWN **v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t (*v148)(uint64_t, _UNKNOWN **);
  _QWORD *v149;
  char *v150;
  id v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t i;
  id v155;
  void *v156;
  id v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  id v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  unint64_t v189;
  CGFloat v190;
  unint64_t v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  CGAffineTransform v197;
  unint64_t v198;
  CGAffineTransform v199;
  CGAffineTransform v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect v204;
  CGRect v205;
  CGRect v206;
  CGRect v207;
  CGRect v208;
  CGRect v209;
  CGRect v210;
  CGRect v211;
  CGRect v212;
  CGRect v213;
  CGRect v214;
  CGRect v215;
  CGRect v216;
  CGRect v217;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v2 = *v1;
  if (!*v1)
    return;
  v3 = *(void **)(v0 + direct field offset for CanvasElementViewController.analysis);
  if (!v3)
    return;
  v4 = v2;
  v5 = v3;
  v6 = AnyCanvas.formFieldElements.getter();
  v198 = MEMORY[0x1E0DEE9D8];
  v176 = v5;
  v7 = objc_msgSend(v5, sel_formRegions);
  v8 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
    goto LABEL_171;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v192 = v4;
  if (v10)
  {
    v11 = 0;
    v178 = v9 + 32;
    v179 = v9 & 0xFFFFFFFFFFFFFF8;
    v181 = v10;
    v193 = v6 & 0xC000000000000001;
    v182 = v9 & 0xC000000000000001;
    v183 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v180 = v9;
    v177 = v8;
    while (1)
    {
      if (v182)
      {
        v15 = (id)MEMORY[0x1DF0E4D64](v11, v9);
      }
      else
      {
        if (v11 >= *(_QWORD *)(v179 + 16))
          goto LABEL_170;
        v15 = *(id *)(v178 + 8 * v11);
      }
      v16 = v15;
      v17 = __OFADD__(v11, 1);
      v18 = v11 + 1;
      if (v17)
        goto LABEL_168;
      v19 = objc_msgSend(v15, sel_quad);
      if (!v19)
        goto LABEL_191;
      v20 = v19;
      objc_msgSend(v19, sel_boundingBox);
      v22 = v21;
      v24 = v23;
      v26 = v25;
      v28 = v27;

      v194 = direct field offset for Canvas._editingView;
      v29 = *(void **)&v4[direct field offset for Canvas._editingView];
      if (v29)
      {
        v30 = *(_QWORD **)&v4[direct field offset for Canvas._editingView];
      }
      else
      {
        v30 = *(id *)&v4[direct field offset for Canvas.paperView];
        v29 = 0;
      }
      v184 = v18;
      (*(void (**)(CGAffineTransform *__return_ptr, void *))((*MEMORY[0x1E0DEEDD8] & *v30) + 0x1A8))(&v199, v29);

      v197 = v199;
      v201.origin.x = v22;
      v201.origin.y = v24;
      v201.size.width = v26;
      v201.size.height = v28;
      v202 = CGRectApplyAffineTransform(v201, &v197);
      x = v202.origin.x;
      y = v202.origin.y;
      width = v202.size.width;
      height = v202.size.height;
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        v35 = _CocoaArrayWrapper.endIndex.getter();
        v187 = v16;
        if (!v35)
          goto LABEL_28;
      }
      else
      {
        v35 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v187 = v16;
        if (!v35)
          goto LABEL_28;
      }
      if (v193)
        v36 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v6);
      else
        v36 = *(id *)(v6 + 32);
      v37 = v36;
      v203.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v36) + 0x178))();
      v212.origin.x = x;
      v212.origin.y = y;
      v212.size.width = width;
      v212.size.height = height;
      v38 = CGRectIntersectsRect(v203, v212);

      if (v38)
      {
LABEL_25:

LABEL_26:
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      if (v35 != 1)
      {
        if (v193)
          v113 = (_QWORD *)MEMORY[0x1DF0E4D64](1, v6);
        else
          v113 = *(id *)(v6 + 40);
        v114 = v113;
        v210.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v113) + 0x178))();
        v216.origin.x = x;
        v216.origin.y = y;
        v216.size.width = width;
        v216.size.height = height;
        v115 = CGRectIntersectsRect(v210, v216);

        if (v115)
          goto LABEL_25;
        if (v35 != 2)
        {
          v116 = 6;
          while (1)
          {
            v9 = v116 - 4;
            if (v193)
              v117 = (_QWORD *)MEMORY[0x1DF0E4D64](v116 - 4, v6);
            else
              v117 = *(id *)(v6 + 8 * v116);
            v118 = v117;
            v119 = v116 - 3;
            if (__OFADD__(v9, 1))
              goto LABEL_169;
            v211.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v117) + 0x178))();
            v217.origin.x = x;
            v217.origin.y = y;
            v217.size.width = width;
            v217.size.height = height;
            v120 = CGRectIntersectsRect(v211, v217);

            if (v120)
              break;
            ++v116;
            v163 = v119 == v35;
            v16 = v187;
            if (v163)
              goto LABEL_28;
          }

          goto LABEL_26;
        }
      }
LABEL_28:
      swift_bridgeObjectRelease();
      v39 = objc_msgSend(v16, sel_autoFillContentType);
      v190 = height;
      if (!v39)
      {
        v41 = width;
        v42 = y;
        v43 = x;
        FormContentType.init(_:)((uint64_t)objc_msgSend(v16, sel_contentType), (char *)&v197);
LABEL_33:
        a_low = LOBYTE(v197.a);
        goto LABEL_34;
      }
      v40 = v39;
      v41 = width;
      v42 = y;
      v43 = x;
      if (objc_msgSend(v16, sel_regionType) != (id)4)
      {
        FormContentType.init(_:)((__C::AFTextContentType)v40);
        goto LABEL_33;
      }

      a_low = 50;
LABEL_34:
      objc_msgSend(v16, sel_suggestedLineHeight);
      v46 = v45;
      v47 = *(void **)&v4[v194];
      if (v47)
      {
        v48 = *(id *)&v4[v194];
      }
      else
      {
        v48 = *(id *)&v4[direct field offset for Canvas.paperView];
        v47 = 0;
      }
      v49 = v47;
      objc_msgSend(v48, sel_frame);
      v51 = v50;
      v53 = v52;
      v55 = v54;
      v57 = v56;

      v204.origin.x = v51;
      v204.origin.y = v53;
      v204.size.width = v55;
      v204.size.height = v57;
      v58 = CGRectGetHeight(v204);
      if (one-time initialization token for formFieldFont != -1)
        swift_once();
      v59 = objc_msgSend((id)static UIConstants.formFieldFont, sel_fontWithSize_, v46 * v58 * 0.75);
      v60 = objc_msgSend(v187, sel_children);
      if (!v60)
        goto LABEL_192;
      v61 = v60;
      v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v62 >> 62)
      {
        swift_bridgeObjectRetain();
        v63 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v63)
      {
        v195 = MEMORY[0x1E0DEE9D8];
        v64 = objc_msgSend(v187, sel_children);
        if (!v64)
          goto LABEL_193;
        v65 = v64;
        v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v189 = v66;
        if (!(v66 >> 62))
        {
          v8 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v8)
            goto LABEL_46;
          goto LABEL_121;
        }
        swift_bridgeObjectRetain();
        v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v8)
        {
LABEL_121:
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v183 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v183[2] + 1, 1, v183);
          v8 = v177;
          v9 = v180;
          v122 = v183[2];
          v121 = v183[3];
          if (v122 >= v121 >> 1)
            v183 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v121 > 1), v122 + 1, 1, v183);
          v183[2] = v122 + 1;
          v183[v122 + 4] = v195;

          goto LABEL_10;
        }
LABEL_46:
        v9 = 0;
        v188 = direct field offset for Canvas.paperView;
        v191 = v66 & 0xC000000000000001;
        v185 = v66 + 32;
        v186 = v66 & 0xFFFFFFFFFFFFFF8;
        while (2)
        {
          while (2)
          {
            if (v191)
            {
              v67 = (id)MEMORY[0x1DF0E4D64](v9, v189);
            }
            else
            {
              if (v9 >= *(_QWORD *)(v186 + 16))
                goto LABEL_167;
              v67 = *(id *)(v185 + 8 * v9);
            }
            v68 = v67;
            v17 = __OFADD__(v9++, 1);
            if (v17)
            {
              __break(1u);
              goto LABEL_166;
            }
            v69 = objc_msgSend(v67, sel_quad);
            if (!v69)
              goto LABEL_190;
            v70 = v69;
            objc_msgSend(v69, sel_boundingBox);
            v72 = v71;
            v74 = v73;
            v76 = v75;
            v78 = v77;

            v79 = *(void **)&v4[v194];
            if (v79)
            {
              v80 = *(_QWORD **)&v4[v194];
            }
            else
            {
              v80 = *(id *)&v4[v188];
              v79 = 0;
            }
            (*(void (**)(CGAffineTransform *__return_ptr, void *))((*MEMORY[0x1E0DEEDD8] & *v80) + 0x1A8))(&v200, v79);

            v197 = v200;
            v205.origin.x = v72;
            v205.origin.y = v74;
            v205.size.width = v76;
            v205.size.height = v78;
            v206 = CGRectApplyAffineTransform(v205, &v197);
            v81 = v206.origin.x;
            v82 = v206.origin.y;
            v83 = v206.size.width;
            v84 = v206.size.height;
            if (v35)
            {
              if (v193)
              {
                swift_bridgeObjectRetain();
                v86 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v6);
              }
              else
              {
                v85 = *(void **)(v6 + 32);
                swift_bridgeObjectRetain();
                v86 = v85;
              }
              v87 = v86;
              v207.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v86) + 0x178))();
              v213.origin.x = v81;
              v213.origin.y = v82;
              v213.size.width = v83;
              v213.size.height = v84;
              v88 = CGRectIntersectsRect(v207, v213);

              if (v88)
              {

                swift_bridgeObjectRelease();
                if (v9 == v8)
                  goto LABEL_121;
                continue;
              }
              if (v35 != 1)
              {
                if (v193)
                  v89 = (_QWORD *)MEMORY[0x1DF0E4D64](1, v6);
                else
                  v89 = *(id *)(v6 + 40);
                v90 = v89;
                v208.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v89) + 0x178))();
                v214.origin.x = v81;
                v214.origin.y = v82;
                v214.size.width = v83;
                v214.size.height = v84;
                v91 = CGRectIntersectsRect(v208, v214);

                if (v91)
                {
LABEL_66:

                  swift_bridgeObjectRelease();
                  goto LABEL_92;
                }
                if (v35 != 2)
                {
                  v92 = 6;
                  while (1)
                  {
                    v93 = v193 ? (_QWORD *)MEMORY[0x1DF0E4D64](v92 - 4, v6) : *(id *)(v6 + 8 * v92);
                    v94 = v93;
                    v4 = (char *)(v92 - 3);
                    if (__OFADD__(v92 - 4, 1))
                      break;
                    v209.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v93) + 0x178))();
                    v215.origin.x = v81;
                    v215.origin.y = v82;
                    v215.size.width = v83;
                    v215.size.height = v84;
                    v95 = CGRectIntersectsRect(v209, v215);

                    if (v95)
                      goto LABEL_66;
                    ++v92;
                    if (v4 == (char *)v35)
                      goto LABEL_75;
                  }
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  swift_bridgeObjectRetain();
                  v10 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  goto LABEL_5;
                }
              }
LABEL_75:
              swift_bridgeObjectRelease();
              v4 = v192;
            }
            break;
          }
          v96 = objc_msgSend(v68, sel_autoFillContentType);
          if (v96)
          {
            v97 = v96;
            if (objc_msgSend(v68, sel_regionType) == (id)4)
            {

              v98 = 50;
LABEL_82:
              LOBYTE(v197.a) = v98;
              v99 = v59;
              specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v4, 0, 0, v59, 0, 1, (unsigned __int8 *)&v197, 0x7FFFFFFFFFFFFFFFLL, v81, v82, v83, v84, 1u, objc_msgSend(v68, sel_autofillNewContextStart), 9u, 5u);
              v101 = v100;

              v102 = v101;
              MEMORY[0x1DF0E4398]();
              if (*(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v103 = v102;
              MEMORY[0x1DF0E4398]();
              if (*(_QWORD *)((v195 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v195 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              if (one-time initialization token for manager != -1)
                swift_once();
              v104 = *(void **)&v192[v194];
              if (v104)
                v105 = *(_QWORD **)&v192[v194];
              else
                v105 = *(id *)&v192[v188];
              v106 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v105) + 0x88))();
              v107 = v104;

              specialized FormAnalytics.addFielde2eEvent(canvas:)(v106);
LABEL_92:
              v4 = v192;
              if (v9 == v8)
                goto LABEL_121;
              continue;
            }
            FormContentType.init(_:)((__C::AFTextContentType)v97);
          }
          else
          {
            FormContentType.init(_:)((uint64_t)objc_msgSend(v68, sel_contentType), (char *)&v197);
          }
          break;
        }
        v98 = LOBYTE(v197.a);
        goto LABEL_82;
      }
      LOBYTE(v197.a) = a_low;
      v108 = v59;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v4, 0, 0, v59, 0, 1, (unsigned __int8 *)&v197, (uint64_t)objc_msgSend(v187, sel_maxCharacterCount), v43, v42, v41, v190, 1u, objc_msgSend(v187, sel_autofillNewContextStart), 9u, 5u);
      v110 = v109;

      v111 = v110;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (one-time initialization token for manager != -1)
        swift_once();
      v112 = *(void **)&v4[v194];
      if (v112)
        v12 = *(_QWORD **)&v4[v194];
      else
        v12 = *(id *)&v4[direct field offset for Canvas.paperView];
      v13 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x88))();
      v14 = v112;

      specialized FormAnalytics.addFielde2eEvent(canvas:)(v13);
LABEL_9:
      v9 = v180;
LABEL_10:
      v11 = v184;
      if (v184 == v181)
        goto LABEL_127;
    }
  }
  v183 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_127:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v123 = &v4[direct field offset for Canvas._editingView];
  v124 = *(void **)&v4[direct field offset for Canvas._editingView];
  if (v124)
  {
    v125 = (_UNKNOWN **)*((_QWORD *)v123 + 1);
    v126 = *(id *)&v4[direct field offset for Canvas._editingView];
  }
  else
  {
    v126 = *(id *)&v4[direct field offset for Canvas.paperView];
    v125 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  ObjectType = swift_getObjectType();
  v128 = v198;
  v129 = (void (*)(unint64_t, uint64_t, _UNKNOWN **))v125[21];
  swift_bridgeObjectRetain();
  v130 = v124;
  v129(v128, ObjectType, v125);

  swift_bridgeObjectRelease();
  v131 = *(_QWORD **)v123;
  if (*(_QWORD *)v123)
  {
    v132 = (_UNKNOWN **)*((_QWORD *)v123 + 1);
    v133 = *(_QWORD **)v123;
  }
  else
  {
    v133 = *(id *)&v4[direct field offset for Canvas.paperView];
    v132 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  v134 = swift_getObjectType();
  v135 = (void (*)(_QWORD, _QWORD, _QWORD))v132[22];
  swift_bridgeObjectRetain();
  v136 = v131;
  v135(v183, v134, v132);

  v137 = (_QWORD *)swift_bridgeObjectRelease();
  v138 = *(_QWORD **)v123;
  if (*(_QWORD *)v123)
  {
    v139 = *(_QWORD **)v123;
  }
  else
  {
    v137 = *(id *)&v4[direct field offset for Canvas.paperView];
    v139 = v137;
  }
  v140 = MEMORY[0x1E0DEE9D8];
  v141 = (void *)(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v139) + 0x88))(v137);
  v142 = v138;

  if (v141)
  {
    if (one-time initialization token for manager != -1)
      swift_once();
    swift_beginAccess();
    v143 = swift_bridgeObjectRetain();
    specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(v143, 1);

    swift_bridgeObjectRelease();
  }
  v144 = *(_QWORD **)v123;
  if (*(_QWORD *)v123)
  {
    v145 = (_UNKNOWN **)*((_QWORD *)v123 + 1);
    v146 = *(_QWORD **)v123;
  }
  else
  {
    v146 = *(id *)&v4[direct field offset for Canvas.paperView];
    v145 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  v147 = swift_getObjectType();
  v148 = (uint64_t (*)(uint64_t, _UNKNOWN **))v145[18];
  v149 = v144;
  v150 = (char *)v148(v147, v145);

  if (!v150)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  v151 = objc_msgSend(v176, sel_formRegions);
  v152 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v196 = v140;
  if (v152 >> 62)
  {
    swift_bridgeObjectRetain();
    v153 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v153)
      goto LABEL_146;
LABEL_173:
    swift_bridgeObjectRelease();
    v165 = MEMORY[0x1E0DEE9D8];
    goto LABEL_174;
  }
  v153 = *(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v153)
    goto LABEL_173;
LABEL_146:
  if (v153 < 1)
  {
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
    return;
  }
  for (i = 0; i != v153; ++i)
  {
    if ((v152 & 0xC000000000000001) != 0)
      v155 = (id)MEMORY[0x1DF0E4D64](i, v152);
    else
      v155 = *(id *)(v152 + 8 * i + 32);
    v156 = v155;
    v157 = objc_msgSend(v155, sel_autoFillContentType);
    if (!v157)
    {

      continue;
    }
    v158 = v157;
    v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v161 = v160;
    v163 = v159 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v161 == v162;
    if (v163)
    {

      swift_bridgeObjectRelease_n();
LABEL_161:

      goto LABEL_162;
    }
    v164 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v164 & 1) != 0)
      goto LABEL_161;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_162:
    v4 = v192;
  }
  swift_bridgeObjectRelease();
  v165 = v196;
LABEL_174:
  swift_bridgeObjectRelease();
  v166 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  v167 = *(_QWORD *)&v150[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
  if (v165 < 0 || (v165 & 0x4000000000000000) != 0)
  {
    swift_retain();
    swift_retain();
    v168 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    v168 = *(_QWORD *)(v165 + 16);
    swift_retain();
  }
  swift_release();
  *(_QWORD *)(v167 + 32) = v168;
  swift_release();
  v169 = *(_QWORD *)&v150[v166];
  v170 = v198;
  v171 = v198 >> 62;
  if (v198 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v172 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v172 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  *(_QWORD *)(v169 + 24) = v172;
  swift_release();
  v173 = *(_QWORD *)&v4[direct field offset for CanvasView.formAnalytics];
  if (v171)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v174 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    v174 = *(_QWORD *)((v170 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();

  }
  swift_bridgeObjectRelease();

  if (v174)
    v175 = 41;
  else
    v175 = 39;
  *(_BYTE *)(v173 + 17) = v175;
  swift_release();
}

BOOL specialized MarkupContainerViewController.documentViewShouldAllowEditing(_:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode);
  v2 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = v3;
    if ((objc_msgSend(v3, sel_respondsToSelector_, sel_shouldAllowEditingContents_) & 1) != 0)
    {
      v5 = objc_msgSend(v4, sel_shouldAllowEditingContents_, v0);
      swift_unknownObjectRelease();
      if (!v1)
        return 0;
      return (BOOL)v5;
    }
    swift_unknownObjectRelease();
  }
  return v1 != 0;
}

id specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(void *a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  objc_super v23;

  *(_QWORD *)&v7[direct field offset for CanvasElementViewController.canvasView] = 0;
  v13 = &v7[direct field offset for CanvasElementViewController.liveStreamMessenger];
  *v13 = 0;
  v13[1] = 0;
  *(_QWORD *)&v7[direct field offset for CanvasElementViewController.participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[direct field offset for CanvasElementViewController.showParticipantCursors] = 0;
  *(_QWORD *)&v7[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = 0;
  *(_QWORD *)&v7[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = 0;
  v14 = direct field offset for CanvasElementViewController.passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Capsule<Image>, Never>);
  swift_allocObject();
  v15 = v7;
  *(_QWORD *)&v7[v14] = PassthroughSubject.init()();
  *(_QWORD *)&v15[direct field offset for CanvasElementViewController.image] = 0;
  v15[direct field offset for CanvasElementViewController.liveStreamDrawings] = 0;
  v15[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled] = 0;
  v15[direct field offset for CanvasElementViewController.canEditVellumOpacity] = 0;
  v16 = &v15[direct field offset for CanvasElementViewController.isImageAnalysisEnabled];
  v15[direct field offset for CanvasElementViewController.isImageAnalysisEnabled] = 1;
  v15[direct field offset for CanvasElementViewController.canEditDescription] = 1;
  v17 = direct field offset for CanvasElementViewController.plusButton;
  type metadata accessor for FormPlusButtonView();
  *(_QWORD *)&v15[v17] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  *(_QWORD *)&v15[direct field offset for CanvasElementViewController.bannerViewConfiguration] = 0;
  v18 = direct field offset for CanvasElementViewController.bannerView;
  *(_QWORD *)&v15[v18] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  *(_QWORD *)&v15[direct field offset for CanvasElementViewController._rulerHostingDelegate] = 0;
  *(_QWORD *)&v15[direct field offset for CanvasElementViewController.rulerHostView] = 0;
  v19 = &v15[direct field offset for CanvasElementViewController.formDelegate];
  *(_QWORD *)&v15[direct field offset for CanvasElementViewController.formDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v15[direct field offset for CanvasElementViewController.analysis] = 0;
  v15[direct field offset for CanvasElementViewController.allowMediaCanvasElements] = a3;
  *(_QWORD *)&v15[direct field offset for CanvasElementViewController.context] = a1;
  v15[direct field offset for CanvasElementViewController.transparentBackground] = a4;
  v15[direct field offset for CanvasElementViewController.editingMode] = a2;
  swift_beginAccess();
  *((_QWORD *)v19 + 1) = a7;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  *v16 = a5;
  v20 = a1;

  v23.receiver = v15;
  v23.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementViewController<Image>);
  return objc_msgSendSuper2(&v23, sel_initWithNibName_bundle_, 0, 0);
}

void specialized MarkupContainerViewController.documentViewController(_:didSetupDocumentView:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  id v8;
  _BYTE *v9;
  id v10;
  void *v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  void *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  void **v18;
  char *v19;
  _OWORD *v20;
  char *v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned __int8 v27[24];

  v2 = v1;
  v4 = (void **)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  v5 = *v4;
  if (*v4)
  {
    v6 = (unsigned __int8 *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
    swift_beginAccess();
    v7 = *v6;
    v8 = v5;
    objc_msgSend(v8, sel_setFindInteractionEnabled_, v7);
    v9 = (_BYTE *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
    swift_beginAccess();
    *v9 = 0;
    objc_msgSend(v8, sel_setAutoScales_, 1);
    v10 = objc_msgSend(v8, sel_documentScrollView);
    if (v10)
    {
      v11 = v10;
      if (one-time initialization token for isQuickLookUIExtension != -1)
        swift_once();
      if (static NSBundle.isQuickLookUIExtension == 1)
        objc_msgSend(v11, sel_setContentInsetAdjustmentBehavior_, 2);

    }
    else
    {
      v11 = v8;
    }

  }
  v12 = *(_BYTE *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode);
  v13 = (unsigned __int8 *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  v14 = *v13;
  *v13 = v12;
  v27[0] = v14;
  PaperDocumentView.editingMode.didset(v27);
  v15 = *v4;
  if (*v4)
  {
    v16 = (unsigned __int8 *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
    swift_beginAccess();
    objc_msgSend(v15, sel_setFindInteractionEnabled_, *v16);
    MarkupContainerViewController.configureLookAndStyle()();
    v17 = *(_QWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v17)
    {
      v18 = (void **)(v17 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      v19 = (char *)*v18;
      if (*v18)
      {
        v20 = (_OWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets);
        swift_beginAccess();
        v21 = &v19[direct field offset for CanvasView.minimumContentInsets];
        v22 = v20[1];
        *(_OWORD *)v21 = *v20;
        *((_OWORD *)v21 + 1) = v22;
        v23 = v19;
        specialized CanvasView.updateContentInsets()();

      }
    }
    v24 = v2 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    v25 = (void *)MEMORY[0x1DF0E666C](v24);
    if (v25)
    {
      v26 = v25;
      if ((objc_msgSend(v25, sel_respondsToSelector_, sel_markupContainerViewController_updateChromeWithAnimation_) & 1) != 0)objc_msgSend(v26, sel_markupContainerViewController_updateChromeWithAnimation_, v2, 1);
      swift_unknownObjectRelease();
    }
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
  else
  {
    __break(1u);
  }
}

void specialized MarkupContainerViewController.init(coder:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD v10[2];
  uint64_t v11;

  v1 = v0;
  v2 = OBJC_IVAR___PPKMarkupContainerViewController_context;
  type metadata accessor for CRContext();
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v3 = MEMORY[0x1DF0E3C90](0, v10);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(_QWORD *)&v1[v2] = v3;
  v4 = OBJC_IVAR___PPKMarkupContainerViewController_fileCoordinator;
  *(_QWORD *)&v1[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_init);
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_analysisDelegate] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageCancellable] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfCancellable] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes] = 0;
  v5 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  v6 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask] = 0;
  v7 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets];
  v8 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *v7 = *MEMORY[0x1E0DC49E8];
  v7[1] = v8;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled] = 1;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_editingMode] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata] = 1;
  v9 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize];
  *v9 = 0;
  v9[1] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden] = 1;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_showBannerView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in MarkupContainerViewController.imageDescription.setter()
{
  return closure #1 in MarkupContainerViewController.imageDescription.setter();
}

uint64_t sub_1DDC1FA40()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in MarkupContainerViewController.viewIsAppearing(_:)()
{
  uint64_t v0;

  closure #1 in MarkupContainerViewController.viewIsAppearing(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

void partial apply for closure #1 in MarkupContainerViewController.viewDidLayoutSubviews()()
{
  uint64_t v0;

  closure #1 in MarkupContainerViewController.viewDidLayoutSubviews()(*(char **)(v0 + 16));
}

uint64_t sub_1DDC1FA8C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in MarkupContainerViewController.viewWillTransition(to:with:)(void *a1)
{
  uint64_t v1;

  closure #1 in MarkupContainerViewController.viewWillTransition(to:with:)(a1, v1);
}

void partial apply for closure #2 in MarkupContainerViewController.viewWillTransition(to:with:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in MarkupContainerViewController.viewWillTransition(to:with:)(a1, v1);
}

uint64_t type metadata accessor for ResultWrapped #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  return objc_opt_self();
}

uint64_t sub_1DDC1FAE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?)
                 - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?)
                 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v5 + v6 + v8;
  v29 = *(_QWORD *)(v7 + 64);
  v32 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v32 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v30 = v10;
  v28 = *(_QWORD *)(v10 + 64);
  v31 = type metadata accessor for UTType();
  v12 = *(_QWORD *)(v31 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v27 = *(_QWORD *)(v12 + 64);
  swift_unknownObjectRelease();
  swift_release();

  v14 = v0 + v2;
  v15 = type metadata accessor for CRAsset();
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  v17 = v9 & ~v8;
  v18 = v0 + v5;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v20 = *(_QWORD *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v22 + 48))(v0 + v17, 1, v21))
    (*(void (**)(unint64_t, uint64_t))(v22 + 8))(v0 + v17, v21);
  v23 = (v17 + v29 + v11) & ~v11;
  v24 = (v23 + v28 + v13) & ~v13;
  v25 = (v27 + v24 + 9) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v30 + 8))(v0 + v23, v32);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v24, v31);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?)
                 - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?)
                 - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_QWORD *)(type metadata accessor for UTType() - 8);
  v14 = (v11 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = v14 + *(_QWORD *)(v13 + 64);
  v16 = (v15 + 9) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = v0 + v2;
  v18 = v0 + v14;
  v19 = (char *)(v0 + v15);
  v20 = *v19;
  v21 = v19[1];
  v22 = *(_QWORD *)(v0 + v16);
  v23 = *(_QWORD *)(v0 + v17);
  v24 = *(_QWORD *)(v0 + ((v17 + 15) & 0xFFFFFFFFFFFFF8));
  v25 = swift_task_alloc();
  v26 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v29 + 16) = v25;
  *(_QWORD *)v25 = v29;
  *(_QWORD *)(v25 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(_QWORD *)(v25 + 80) = v23;
  *(_QWORD *)(v25 + 88) = v24;
  *(_BYTE *)(v25 + 129) = v21;
  *(_BYTE *)(v25 + 128) = v20;
  *(_QWORD *)(v25 + 64) = v18;
  *(_QWORD *)(v25 + 72) = v22;
  *(_QWORD *)(v25 + 48) = v0 + v8;
  *(_QWORD *)(v25 + 56) = v0 + v11;
  *(_QWORD *)(v25 + 32) = v28;
  *(_QWORD *)(v25 + 40) = v0 + v5;
  *(_OWORD *)(v25 + 16) = v26;
  return swift_task_switch();
}

void specialized MarkupContainerViewController.handleSqueezeInteractionDidChangePaletteViewVisibilityNotification(_:)()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;

  v1 = objc_msgSend(v0, sel_viewIfLoaded);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_window);

    if (v3)
    {
      v10 = objc_msgSend(v3, sel_windowScene);

      if (v10)
      {
        v4 = objc_msgSend((id)objc_opt_self(), sel__existingInteractionForWindowScene_, v10);
        if (!v4)
        {

          return;
        }
        v5 = v4;
        v6 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
        swift_beginAccess();
        if ((*v6 & 1) == 0 && (objc_msgSend(v5, sel__paletteViewVisible) & 1) != 0)
        {
          v7 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_delegate];
          swift_beginAccess();
          v8 = (void *)MEMORY[0x1DF0E666C](v7);
          if (v8)
          {
            v9 = v8;
            if ((objc_msgSend(v8, sel_respondsToSelector_, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_) & 1) == 0)
            {

              swift_unknownObjectRelease();
              return;
            }
            objc_msgSend(v9, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_, v0, 1);
            swift_unknownObjectRelease();
          }
        }

      }
    }
  }
}

uint64_t specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v8 + 264) = a6;
  *(_QWORD *)(v8 + 272) = v15;
  *(_BYTE *)(v8 + 94) = a8;
  *(_BYTE *)(v8 + 93) = a7;
  *(_QWORD *)(v8 + 248) = a4;
  *(_QWORD *)(v8 + 256) = a5;
  *(_QWORD *)(v8 + 232) = a2;
  *(_QWORD *)(v8 + 240) = a3;
  *(_QWORD *)(v8 + 224) = a1;
  type metadata accessor for PaperDocument(0);
  *(_QWORD *)(v8 + 280) = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(_QWORD *)(v8 + 288) = v9;
  *(_QWORD *)(v8 + 296) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  *(_QWORD *)(v8 + 312) = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  *(_QWORD *)(v8 + 320) = v10;
  *(_QWORD *)(v8 + 328) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 336) = swift_task_alloc();
  v11 = type metadata accessor for UUID();
  *(_QWORD *)(v8 + 344) = v11;
  *(_QWORD *)(v8 + 352) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 360) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(_QWORD *)(v8 + 368) = swift_task_alloc();
  *(_QWORD *)(v8 + 376) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  *(_QWORD *)(v8 + 384) = swift_task_alloc();
  *(_QWORD *)(v8 + 392) = swift_task_alloc();
  *(_QWORD *)(v8 + 400) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(v8 + 408) = swift_task_alloc();
  *(_QWORD *)(v8 + 416) = swift_task_alloc();
  v12 = type metadata accessor for CRAsset();
  *(_QWORD *)(v8 + 424) = v12;
  *(_QWORD *)(v8 + 432) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 440) = swift_task_alloc();
  v13 = type metadata accessor for URL();
  *(_QWORD *)(v8 + 448) = v13;
  *(_QWORD *)(v8 + 456) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 464) = swift_task_alloc();
  *(_QWORD *)(v8 + 472) = swift_task_alloc();
  *(_QWORD *)(v8 + 480) = swift_task_alloc();
  *(_QWORD *)(v8 + 488) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSURL *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 272);
  if (!v1)
  {
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 136, &demangling cache variable for type metadata for Any?);
    v17 = 0;
    v18 = (uint64_t *)(v0 + 256);
    v19 = 2;
    goto LABEL_11;
  }
  *(_QWORD *)(v0 + 200) = 0xD000000000000019;
  *(_QWORD *)(v0 + 208) = 0x80000001DDF51090;
  v2 = objc_msgSend(v1, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 168) = 0u;
    *(_OWORD *)(v0 + 184) = 0u;
  }
  outlined init with take of (key: Int, value: AnyCRValue)?(v0 + 168, v0 + 136, &demangling cache variable for type metadata for Any?);
  if (!*(_QWORD *)(v0 + 160))
    goto LABEL_10;
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 136, &demangling cache variable for type metadata for Any?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v8, v5, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v7, v6, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v9(v5, 1, v3) == 1)
  {
    v10 = *(_QWORD *)(v0 + 392);
    v11 = *(_QWORD *)(v0 + 288);
    v12 = *(_QWORD *)(v0 + 296);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 400), v10, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      v13 = *(_QWORD *)(v0 + 424);
      v14 = *(_QWORD *)(v0 + 432);
      v15 = *(_QWORD *)(v0 + 416);
      v16 = *(_QWORD *)(v0 + 392);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 400), (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v16, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v13);
    }
    else
    {
      v49 = *(_QWORD *)(v0 + 392);
      v48 = *(_QWORD *)(v0 + 400);
      v50 = *(_QWORD *)(v0 + 288);
      v51 = *(_QWORD *)(v0 + 296);
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      Capsule<>.subscript.getter();
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v48, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
    }
    v52 = *(_QWORD *)(v0 + 416);
    v53 = *(_QWORD *)(v0 + 424);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 408), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    if (v9(v52, 1, v53) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 416), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      v54 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      URL._bridgeToObjectiveC()(v55);
      v57 = v56;
      *(_QWORD *)(v0 + 216) = 0;
      v58 = objc_msgSend(v54, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v56, 1, v0 + 216);

      v59 = *(void **)(v0 + 216);
      if (v58)
      {
        v60 = *(_QWORD *)(v0 + 472);
        v61 = *(_QWORD *)(v0 + 448);
        v62 = *(_QWORD *)(v0 + 456);
        v63 = *(_QWORD *)(v0 + 376);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        v64 = v59;

        (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v63, v60, v61);
        v65 = 0;
      }
      else
      {
        v69 = v59;
        v70 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        v65 = 1;
      }
      v72 = *(_QWORD *)(v0 + 456);
      v71 = *(_QWORD *)(v0 + 464);
      v73 = *(_QWORD *)(v0 + 448);
      v74 = *(_QWORD *)(v0 + 376);
      v75 = *(_QWORD *)(v0 + 256);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, v65, 1, v73);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v71, v75, v73);
      v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v74, 1, v73);
      v77 = *(_QWORD *)(v0 + 480);
      v79 = *(_QWORD *)(v0 + 456);
      v78 = *(_QWORD *)(v0 + 464);
      v80 = *(_QWORD *)(v0 + 448);
      v81 = *(_QWORD *)(v0 + 376);
      if (v76 == 1)
      {
        URL.deletingLastPathComponent()();
        v88 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
        v88(v78, v80);
        outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        v88 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
        v88(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 448));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(v77, v81, v80);
      }
      v18 = (uint64_t *)(v0 + 472);
      v82 = *(_QWORD *)(v0 + 480);
      v83 = *(_QWORD *)(v0 + 448);
      v85 = *(_QWORD *)(v0 + 352);
      v84 = *(_QWORD *)(v0 + 360);
      v86 = *(_QWORD *)(v0 + 344);
      UUID.init()();
      UUID.uuidString.getter();
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      v88(v82, v83);
      v17 = 1;
      v19 = 4;
LABEL_11:
      v20 = *v18;
      *(_BYTE *)(v0 + 95) = v17;
      *(_QWORD *)(v0 + 520) = 0;
      v21 = *(_QWORD *)(v0 + 320);
      v22 = *(_QWORD *)(v0 + 328);
      v23 = *(_QWORD *)(v0 + 312);
      v24 = *(_QWORD *)(v0 + 248);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 456) + 8 * v19))(*(_QWORD *)(v0 + 488), v20, *(_QWORD *)(v0 + 448));
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v24, v23, &demangling cache variable for type metadata for Capsule<Image>?);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21);
      if (v25 == 1)
      {
        v31 = *(_QWORD *)(v0 + 384);
        v32 = *(_QWORD *)(v0 + 288);
        v33 = *(_QWORD *)(v0 + 296);
        v34 = *(_QWORD *)(v0 + 240);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 312), &demangling cache variable for type metadata for Capsule<Image>?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v34, v31, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) != 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 32))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 288));
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
          Capsule<>.root.getter();
          type metadata accessor for CRContext();
          *(_OWORD *)(v0 + 112) = 0u;
          *(_QWORD *)(v0 + 128) = 0;
          *(_OWORD *)(v0 + 96) = 0u;
          v42 = MEMORY[0x1DF0E3C90](0, v0 + 96);
          *(_QWORD *)(v0 + 528) = v42;
          outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
          *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
          *(_OWORD *)(v0 + 32) = 0u;
          *(_OWORD *)(v0 + 48) = 0u;
          *(_OWORD *)(v0 + 64) = 0u;
          *(_OWORD *)(v0 + 75) = 0u;
          v43 = async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          v44 = (id)v42;
          v45 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 536) = v45;
          *v45 = v0;
          v45[1] = specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
          return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                                    + v43))(v42 | 0x4000000000000000, *(_QWORD *)(v0 + 304), v0 + 16);
        }
        v35 = *(_QWORD *)(v0 + 384);
        v36 = (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?;
      }
      else
      {
        v26 = *(_QWORD *)(v0 + 488);
        v27 = *(_QWORD *)(v0 + 336);
        v28 = *(unsigned __int8 *)(v0 + 93);
        v29 = *(_QWORD *)(v0 + 264);
        v30 = *(_QWORD *)(v0 + 224);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 32))(v27, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
        specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v27, v26, v30, v29, v28);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
        if ((v17 & 1) == 0)
          goto LABEL_20;
        v47 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
        NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
        v87 = *(_QWORD *)(v0 + 368);

        v36 = &demangling cache variable for type metadata for URL?;
        v35 = v87;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v35, v36);
LABEL_20:
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(BOOL))(v0 + 8))(v25 != 1);
    }
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 432) + 32);
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 424);
    v38 = *(_QWORD *)(v0 + 432);
    v40 = *(_QWORD *)(v0 + 408);
    v39 = *(_QWORD *)(v0 + 416);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 400), (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
    v41(v39, v40, v37);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
  }
  v66 = *(_QWORD *)(v0 + 256);
  v41(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
  v67 = swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v67;
  *(_QWORD *)(v67 + 16) = v66;
  v68 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 504) = v68;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
  *v68 = v0;
  v68[1] = specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
  return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 512) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSURL *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  id v57;
  uint64_t v59;
  uint64_t v60;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));
  v1 = *(_QWORD *)(v0 + 512);
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  *(_QWORD *)(v0 + 216) = 0;
  v6 = objc_msgSend(v2, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v4, 1, v0 + 216);

  v7 = *(void **)(v0 + 216);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 472);
    v10 = *(_QWORD *)(v0 + 448);
    v9 = *(_QWORD *)(v0 + 456);
    v11 = *(_QWORD *)(v0 + 376);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v7;

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v8, v10);
    v13 = 0;
  }
  else
  {
    v14 = v7;
    v15 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v1 = 0;
    v13 = 1;
  }
  v16 = *(_QWORD *)(v0 + 456);
  v17 = *(_QWORD *)(v0 + 464);
  v18 = *(_QWORD *)(v0 + 448);
  v19 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v19, v13, 1, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v20, v18);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v19, 1, v18);
  v22 = *(_QWORD *)(v0 + 480);
  v24 = *(_QWORD *)(v0 + 456);
  v23 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 448);
  v26 = *(_QWORD *)(v0 + 376);
  v60 = v1;
  if (v21 == 1)
  {
    URL.deletingLastPathComponent()();
    v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v27(v23, v25);
    outlined destroy of StocksKitCurrencyCache.Provider?(v26, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v27(v23, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v22, v26, v25);
  }
  v28 = *(_QWORD *)(v0 + 480);
  v29 = *(_QWORD *)(v0 + 448);
  v30 = *(_QWORD *)(v0 + 352);
  v31 = *(_QWORD *)(v0 + 360);
  v32 = *(_QWORD *)(v0 + 344);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v27(v28, v29);
  v33 = *(_QWORD *)(v0 + 472);
  *(_BYTE *)(v0 + 95) = 1;
  *(_QWORD *)(v0 + 520) = v60;
  v35 = *(_QWORD *)(v0 + 320);
  v34 = *(_QWORD *)(v0 + 328);
  v36 = *(_QWORD *)(v0 + 312);
  v37 = *(_QWORD *)(v0 + 248);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 456) + 32))(*(_QWORD *)(v0 + 488), v33, *(_QWORD *)(v0 + 448));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v37, v36, &demangling cache variable for type metadata for Capsule<Image>?);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35);
  if (v38 == 1)
  {
    v47 = *(_QWORD *)(v0 + 384);
    v49 = *(_QWORD *)(v0 + 288);
    v48 = *(_QWORD *)(v0 + 296);
    v50 = *(_QWORD *)(v0 + 240);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 312), &demangling cache variable for type metadata for Capsule<Image>?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v50, v47, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v47, 1, v49) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 32))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 288));
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      Capsule<>.root.getter();
      type metadata accessor for CRContext();
      *(_OWORD *)(v0 + 112) = 0u;
      *(_QWORD *)(v0 + 128) = 0;
      *(_OWORD *)(v0 + 96) = 0u;
      v53 = MEMORY[0x1DF0E3C90](0, v0 + 96);
      *(_QWORD *)(v0 + 528) = v53;
      outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
      *(_OWORD *)(v0 + 32) = 0u;
      *(_OWORD *)(v0 + 48) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
      *(_OWORD *)(v0 + 75) = 0u;
      v54 = async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
      v55 = (id)v53;
      v56 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 536) = v56;
      *v56 = v0;
      v56[1] = specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                                + v54))(v53 | 0x4000000000000000, *(_QWORD *)(v0 + 304), v0 + 16);
    }
    v51 = *(_QWORD *)(v0 + 384);
    v52 = (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?;
  }
  else
  {
    v39 = *(_QWORD *)(v0 + 488);
    v40 = *(_QWORD *)(v0 + 336);
    v41 = *(unsigned __int8 *)(v0 + 93);
    v42 = *(_QWORD *)(v0 + 264);
    v43 = *(_QWORD *)(v0 + 224);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 32))(v40, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
    specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v40, v39, v43, v42, v41);
    if (v60)
    {
      v44 = *(_QWORD *)(v0 + 488);
      v45 = *(_QWORD *)(v0 + 448);
      v46 = *(_QWORD *)(v0 + 456);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
    v57 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
    v59 = *(_QWORD *)(v0 + 368);

    v52 = &demangling cache variable for type metadata for URL?;
    v51 = v59;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v51, v52);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v38 != 1);
}

{
  uint64_t v0;
  unint64_t v1;
  NSURL *v2;
  void *v3;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  NSURL *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSDictionary v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  id v19;
  uint64_t v21;

  if (*(_QWORD *)(v0 + 272))
  {
    type metadata accessor for PDFDocumentWriteOption(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v3 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF51B80);
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, v3, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();

    URL._bridgeToObjectiveC()(v6);
    v8 = v7;
    v9 = swift_bridgeObjectRetain();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for PDFDocumentWriteOption(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
    v10.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    URL._bridgeToObjectiveC()(v2);
    v8 = v11;
    v10.super.isa = 0;
  }
  v12 = *(void **)(v0 + 544);
  v13 = *(unsigned __int8 *)(v0 + 95);
  v15 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = objc_msgSend(v12, sel_writeToURL_withOptions_, v8, v10.super.isa);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_bridgeObjectRelease();
  if (v13 == 1 && v17)
  {
    v18 = *(_QWORD *)(v0 + 520);
    v19 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
    if (v18)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
    }
    v21 = *(_QWORD *)(v0 + 368);

    outlined destroy of StocksKitCurrencyCache.Provider?(v21, &demangling cache variable for type metadata for URL?);
    v17 = 1;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v17);
}

uint64_t specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(*(_QWORD *)v1 + 528);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = a1;
  swift_task_dealloc();

  outlined destroy of PKStrokeProperties(v3, type metadata accessor for PaperDocument);
  return swift_task_switch();
}

uint64_t type metadata accessor for ImageWrapper #1 in MarkupContainerViewController.dataRepresentation(withError:)()
{
  return objc_opt_self();
}

uint64_t sub_1DDC21AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v8 = v1[4];
  v9 = v1[5];
  v10 = *((_QWORD *)v1 + 6);
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(v8, v9, a1, v6, v7, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError;
  if (!lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PPKMarkupContainerViewControllerError, &type metadata for PPKMarkupContainerViewControllerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError;
  if (!lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PPKMarkupContainerViewControllerError, &type metadata for PPKMarkupContainerViewControllerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError);
  }
  return result;
}

__n128 sub_1DDC21C90@<Q0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *a1 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets;
  swift_beginAccess();
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

void sub_1DDC21CE0(double *a1)
{
  MarkupContainerViewController.minimumContentInsets.setter(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1DDC21D08@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled, a2);
}

id sub_1DDC21D14(char *a1)
{
  return MarkupContainerViewController.findInteractionEnabled.setter(*a1);
}

uint64_t sub_1DDC21D38@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled, a2);
}

uint64_t sub_1DDC21D48@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1DDC21DA0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata, a2);
}

uint64_t sub_1DDC21DAC(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata);
}

uint64_t sub_1DDC21DB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MarkupContainerViewController.imageDescription.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1DDC21DE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return MarkupContainerViewController.imageDescription.setter(v1, v2);
}

uint64_t sub_1DDC21E24@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled, a2);
}

void sub_1DDC21E30(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  swift_beginAccess();
  *v3 = v2;
  MarkupContainerViewController.annotationEditingEnabled.didset();
}

uint64_t sub_1DDC21E88@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled, a2);
}

void sub_1DDC21E94(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_set_52Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
}

void keypath_set_52Tm(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  swift_beginAccess();
  *v6 = v5;
  MarkupContainerViewController.delegate.didset();
}

uint64_t sub_1DDC21EF4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws, a2);
}

void sub_1DDC21F00(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_set_52Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
}

uint64_t sub_1DDC21F0C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled, a2);
}

void sub_1DDC21F18(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_set_52Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
}

uint64_t sub_1DDC21F24@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden, a2);
}

uint64_t sub_1DDC21F30(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden);
}

uint64_t keypath_set_40Tm(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

id sub_1DDC21F84@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = MarkupContainerViewController.backgroundColor.getter();
  *a1 = result;
  return result;
}

void sub_1DDC21FAC(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  MarkupContainerViewController.backgroundColor.setter(v1);
}

uint64_t sub_1DDC21FD8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_showBannerView, a2);
}

id sub_1DDC21FE4(char *a1)
{
  return MarkupContainerViewController.showBannerView.setter(*a1);
}

id sub_1DDC22008@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

char *keypath_get_selector_shouldHighlightTextAndODAfterNextAnalysis()
{
  return sel_shouldHighlightTextAndODAfterNextAnalysis;
}

id sub_1DDC22068@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_shouldHighlightTextAndODAfterNextAnalysis);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1DDC22098(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldHighlightTextAndODAfterNextAnalysis_, *a1);
}

char *keypath_get_selector_shouldEnterVisualSearchAfterNextAnalysis()
{
  return sel_shouldEnterVisualSearchAfterNextAnalysis;
}

id sub_1DDC220B8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_shouldEnterVisualSearchAfterNextAnalysis);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1DDC220E8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldEnterVisualSearchAfterNextAnalysis_, *a1);
}

char *keypath_get_selector_shouldUpliftSubjectAfterNextAnalysis()
{
  return sel_shouldUpliftSubjectAfterNextAnalysis;
}

id sub_1DDC22108@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_shouldUpliftSubjectAfterNextAnalysis);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1DDC22138(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldUpliftSubjectAfterNextAnalysis_, *a1);
}

uint64_t storeEnumTagSinglePayload for PPKMarkupContainerViewControllerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC22198 + 4 * byte_1DDF373F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDC221CC + 4 * byte_1DDF373F0[v4]))();
}

uint64_t sub_1DDC221CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC221D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC221DCLL);
  return result;
}

uint64_t sub_1DDC221E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC221F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDC221F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC221FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PPKMarkupContainerViewControllerError()
{
  return &type metadata for PPKMarkupContainerViewControllerError;
}

uint64_t ObjC metadata update function for MarkupContainerViewController()
{
  return type metadata accessor for MarkupContainerViewController();
}

void type metadata completion function for MarkupContainerViewController()
{
  unint64_t v0;

  type metadata accessor for CRAsset?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for MarkupContainerViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MarkupContainerViewController.minimumContentInsets.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of MarkupContainerViewController.minimumContentInsets.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of MarkupContainerViewController.minimumContentInsets.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteractionEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteractionEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteractionEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isImageAnalysisEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isImageAnalysisEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isImageAnalysisEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteraction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.documentIsLocked.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.canEncryptDocument.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.encryptPrivateMetadata.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of MarkupContainerViewController.encryptPrivateMetadata.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of MarkupContainerViewController.encryptPrivateMetadata.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of MarkupContainerViewController.imageDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of MarkupContainerViewController.imageDescription.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of MarkupContainerViewController.imageDescription.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showThumbnailViewForMultipage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showThumbnailViewForMultipage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showThumbnailViewForMultipage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of MarkupContainerViewController.load(fromData:with:placeholderImage:completionHandler:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of MarkupContainerViewController.load(fromURL:with:placeholderImage:completionHandler:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x380);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = dispatch thunk of MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
  return v13(a1, a2, a3, a4);
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of MarkupContainerViewController.dataRepresentation(withError:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of MarkupContainerViewController.archivedModelData()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of MarkupContainerViewController.contentViewScrollView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of MarkupContainerViewController.annotationEditingEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.annotationEditingEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.annotationEditingEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.allEditingDisabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.allEditingDisabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.allEditingDisabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pencilAlwaysDraws.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pencilAlwaysDraws.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pencilAlwaysDraws.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.formFillingEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.formFillingEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.formFillingEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.setFormFillingEnabled(_:didUseBanner:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x400))();
}

uint64_t dispatch thunk of MarkupContainerViewController.toolbarHidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of MarkupContainerViewController.toolbarHidden.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of MarkupContainerViewController.toolbarHidden.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x418))();
}

uint64_t dispatch thunk of MarkupContainerViewController.validateUndo(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x420))();
}

uint64_t dispatch thunk of MarkupContainerViewController.validateRedo(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of MarkupContainerViewController.undo(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x430))();
}

uint64_t dispatch thunk of MarkupContainerViewController.redo(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of MarkupContainerViewController.revert(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of MarkupContainerViewController.backgroundColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of MarkupContainerViewController.backgroundColor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of MarkupContainerViewController.backgroundColor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isTouchInThumbnailView(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isTouchInPageLabelView(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isTouchInBannerView(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x470))();
}

uint64_t dispatch thunk of MarkupContainerViewController.acceptSingleTouch(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of MarkupContainerViewController.bannerView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showBannerView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showBannerView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showBannerView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfFrame.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfScrollView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfBackgroundColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfBackgroundColor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfBackgroundColor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0))();
}

uint64_t type metadata accessor for MarkupContainerViewControllerAnalysisDelegate()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PPKZeroCallbackCounter()
{
  return objc_opt_self();
}

void specialized MarkupContainerViewControllerAnalysisDelegate.contextWillPresentVisualSearchController(_:)(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v3 = v1 + 16;
  v4 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    v7 = (void *)MEMORY[0x1DF0E666C](v6);

    if (v7)
    {
      if ((objc_msgSend(v7, sel_respondsToSelector_, *a1) & 1) != 0)
      {
        v8 = MEMORY[0x1DF0E666C](v3);
        if (!v8)
        {
          swift_unknownObjectRelease();
          __break(1u);
          return;
        }
        v9 = (void *)v8;
        objc_msgSend(v7, *a1, v8, 1);

      }
      swift_unknownObjectRelease();
    }
  }
}

void specialized MarkupContainerViewControllerAnalysisDelegate.contextActiveInteractionTypesDidChange(_:)(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v3 = v1 + 16;
  v4 = MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    v7 = (void *)MEMORY[0x1DF0E666C](v6);

    if (v7)
    {
      if ((objc_msgSend(v7, sel_respondsToSelector_, *a1) & 1) != 0)
      {
        v8 = MEMORY[0x1DF0E666C](v3);
        if (!v8)
        {
          swift_unknownObjectRelease();
          __break(1u);
          return;
        }
        v9 = (void *)v8;
        objc_msgSend(v7, *a1, v8);

      }
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1DDC22D30()
{
  id *v0;

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset()
{
  void **v0;

  specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset(v0[2], v0[3], v0[4]);
}

uint64_t sub_1DDC22D70()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)
                                                                                    + async function pointer to @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)))(v2, v3, v4, v5, v6, v7);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t objectdestroy_80Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t sub_1DDC22F74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v7[4] = a2;
  v7[5] = v6;
  v7[3] = a1;
  return swift_task_switch();
}

uint64_t sub_1DDC23070()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for DataOrURL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64) + v2 + 7;
  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  v5 = v0 + v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  }
  v7 = *(_QWORD *)(v0 + v4 + 8);
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(v0 + v4), v7);
  return swift_deallocObject();
}

uint64_t outlined init with take of DataOrURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataOrURL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  double v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(type metadata accessor for DataOrURL() - 8);
  v13 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v12 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_BYTE *)(v1 + 64);
  v9 = *(double *)(v1
                 + ((((*(_QWORD *)(v3 + 64)
                     + ((*(unsigned __int8 *)(v3 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                     + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(v9, a1, v13, v12, v4, v5, v6, v7, v8);
}

void partial apply for closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)()
{
  uint64_t v0;

  closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(v0);
}

id partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, 0.0);
}

uint64_t sub_1DDC232B4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  void *v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void (**)(void))(v0 + 32);
  objc_msgSend(*(id *)(v0 + 16), sel_removeFromSuperview);
  v3 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  *(_QWORD *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView) = 0;

  if (v2)
    v2();
}

uint64_t specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[37] = a3;
  v4[38] = v3;
  v4[35] = a1;
  v4[36] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v4[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[40] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v4[41] = v5;
  v4[42] = *(_QWORD *)(v5 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = type metadata accessor for DataOrURL();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4[47] = swift_task_alloc();
  v6 = type metadata accessor for URL();
  v4[48] = v6;
  v4[49] = *(_QWORD *)(v6 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v4[52] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[53] = static MainActor.shared.getter();
  v4[54] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[55] = v7;
  return swift_task_switch();
}

uint64_t specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  void *v4;
  _BYTE *v5;
  char v6;
  id v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_BYTE **)(v0 + 304);
  v29 = *(_QWORD *)(v0 + 280);
  v4 = *(void **)&v3[OBJC_IVAR___PPKMarkupContainerViewController_context];
  v5 = &v3[OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled];
  v6 = v3[OBJC_IVAR___PPKMarkupContainerViewController_editingMode];
  swift_beginAccess();
  LOBYTE(v5) = *v5;
  objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementViewController<Image>));
  v7 = v4;
  v8 = v3;
  *(_QWORD *)(v0 + 448) = specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(v7, v6, 1, 0, (char)v5, (uint64_t)v3, (uint64_t)&protocol witness table for MarkupContainerViewController);

  v9 = type metadata accessor for CRAsset();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v1, 1, 1, v9);
  v11 = (uint64_t)&v8[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  swift_beginAccess();
  outlined assign with take of CRAsset?(v1, v11);
  swift_endAccess();
  outlined init with copy of PKStrokeProperties(v29, v2, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v13 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 376);
  if (EnumCaseMultiPayload != 1)
  {
    outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 368), (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v13);
    goto LABEL_5;
  }
  v16 = *(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 32);
  v16(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 384));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 376), &demangling cache variable for type metadata for URL?);
    goto LABEL_6;
  }
  v17 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 416);
  v19 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 400);
  v20 = *(_QWORD *)(v0 + 384);
  v16(v17, *(_QWORD *)(v0 + 376), v20);
  v21 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
  type metadata accessor for CRContext();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  v22 = (void *)MEMORY[0x1DF0E3C90](0, v0 + 16);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  CRContext.assetManager.getter();

  CRAsset.init(url:coordinated:assetManager:)();
  v10(v30, 0, 1, v9);
  swift_beginAccess();
  outlined assign with take of CRAsset?(v30, v11);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
LABEL_6:
  v23 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 288);
  v24 = *(_QWORD *)(v0 + 296);
  outlined init with copy of PKStrokeProperties(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 360), (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  outlined copy of Data?(v25, v24);
  static TaskPriority.userInitiated.getter();
  v26 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 0, 1, v26);
  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 456) = v27;
  *v27 = v0;
  v27[1] = specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:);
  return Capsule<>.init(from:with:priority:)(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 320));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 448);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  id result;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  id v52;
  uint64_t v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  id v58;
  id v59;
  char *v60;
  uint64_t v61;
  void **v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;

  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 312);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v2, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v4);
  specialized CanvasElementViewController.updateViewForPaper(_:)(v5);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for Capsule<Image>?);
  v6 = MarkupContainerViewController.imageDescription.getter();
  CanvasElementViewController<>.imageDescription.setter(v6, v7);
  v8 = (_BYTE *)(v1 + direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled);
  swift_beginAccess();
  *v8 = 1;
  v9 = (uint64_t *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v9)
    objc_msgSend(*(id *)(*v9 + direct field offset for CanvasView.canvasTiledView), sel_setSixChannelBlending_, 1);
  result = objc_msgSend(*(id *)(v0 + 448), sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_35;
  }
  v11 = result;
  result = objc_msgSend(*(id *)(v0 + 304), sel_view);
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v12 = result;
  v13 = *(void **)(v0 + 448);
  objc_msgSend(result, sel_bounds);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  objc_msgSend(v11, sel_setFrame_, v15, v17, v19, v21);
  result = objc_msgSend(v13, sel_view);
  if (!result)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v22 = result;
  v23 = *(_QWORD *)(v0 + 304);
  objc_msgSend(result, sel_setAutoresizingMask_, 18);

  v24 = *(void **)(v23 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  v25 = *(void **)(v0 + 304);
  if (v24)
  {
    v26 = v24;
    result = objc_msgSend(v25, sel_view);
    if (!result)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v27 = result;
    result = objc_msgSend(*(id *)(v0 + 448), sel_view);
    if (!result)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v28 = result;
    objc_msgSend(v27, sel_insertSubview_belowSubview_, result, v26);

  }
  else
  {
    result = objc_msgSend(*(id *)(v0 + 304), sel_view);
    if (!result)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v27 = result;
    result = objc_msgSend(*(id *)(v0 + 448), sel_view);
    if (!result)
    {
LABEL_41:
      __break(1u);
      return result;
    }
    v28 = result;
    objc_msgSend(v27, sel_addSubview_, result);
  }
  v29 = *(void **)(v0 + 448);
  v30 = *(char **)(v0 + 304);

  objc_msgSend(v30, sel_addChildViewController_, v29);
  objc_msgSend(v29, sel_didMoveToParentViewController_, v30);
  v31 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  v32 = *(void **)&v30[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  *(_QWORD *)&v30[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController] = v29;
  v33 = v29;

  v34 = *v9;
  if (*v9)
  {
    *(_BYTE *)(v34 + direct field offset for CanvasView.allowsContentSnapping) = 0;
    v35 = *(void **)(v34 + direct field offset for CanvasView.trackingPanGestureRecognizer);
    if (v35)
      objc_msgSend(v35, sel_setEnabled_, 0);
  }
  v36 = *(_QWORD *)(v0 + 448) + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  *(_QWORD *)(v36 + 8) = &protocol witness table for MarkupContainerViewController;
  swift_unknownObjectWeakAssign();
  v37 = *v9;
  if (*v9)
  {
    v38 = v37 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    *(_QWORD *)(v38 + 8) = &protocol witness table for MarkupContainerViewController;
    swift_unknownObjectWeakAssign();
    *(_BYTE *)(v37 + direct field offset for CanvasView.firstLayout) = 0;
  }
  v39 = *(void **)(v0 + 304);
  MarkupContainerViewController.configureLookAndStyle()();
  result = objc_msgSend(v39, sel_view);
  if (!result)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v40 = result;
  v41 = *(_QWORD *)(v0 + 448);
  v42 = *(_QWORD *)(v0 + 304);
  objc_msgSend(result, sel_bounds);
  v44 = v43;
  v46 = v45;

  CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(0, 0, v44, v46);
  v47 = *(_QWORD *)(v41 + direct field offset for CanvasElementViewController.passThroughSubject);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<Image>, Never>>);
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v47;
  *(_QWORD *)(v0 + 272) = v48;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Image>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>, MEMORY[0x1E0C95D90]);
  v49 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(_QWORD *)(v42 + OBJC_IVAR___PPKMarkupContainerViewController_imageCancellable) = v49;
  swift_release();
  if (*v9)
  {
    v50 = *(void **)(*v9 + direct field offset for Canvas.paperView);
    type metadata accessor for ImageElementView(0);
    v51 = (char *)swift_dynamicCastClass();
    if (v51)
      v52 = v50;
  }
  else
  {
    v51 = 0;
  }
  type metadata accessor for MarkupContainerViewControllerAnalysisDelegate();
  v53 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  if (!v51)
    goto LABEL_30;
  v54 = (void *)MEMORY[0x1DF0E666C](&v51[direct field offset for ImageElementView.imageAnalysisDelegate]);
  swift_unknownObjectWeakAssign();
  swift_retain();
  v55 = v51;
  ImageElementView.imageAnalysisDelegate.didset(v54);

  swift_unknownObjectRelease();
  swift_release();
  v56 = *(void **)&v55[direct field offset for ImageElementView.mediaView];
  if (!v56)
  {
    swift_retain();
    v60 = v55;
    v58 = ImageElementView.pendingImageAnalysisObservers.getter();
    objc_msgSend(v58, sel_addObject_, v53);
    goto LABEL_28;
  }
  swift_retain();
  v57 = v55;
  v58 = v56;
  v59 = objc_msgSend(v58, sel_imageAnalysisContext);
  if (!v59)
  {
LABEL_28:

    goto LABEL_29;
  }
  objc_msgSend(v59, sel_addAnalysisObserver_, v53);

  swift_unknownObjectRelease();
LABEL_29:

  swift_release();
LABEL_30:
  v71 = v51;
  *(_QWORD *)(*(_QWORD *)(v0 + 304) + OBJC_IVAR___PPKMarkupContainerViewController_analysisDelegate) = v53;
  swift_retain();
  swift_release();
  v61 = *(_QWORD *)&v30[v31];
  if (v61)
  {
    v62 = (void **)(v61 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    v63 = (char *)*v62;
    if (*v62)
    {
      v64 = (_OWORD *)(*(_QWORD *)(v0 + 304) + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets);
      swift_beginAccess();
      v65 = &v63[direct field offset for CanvasView.minimumContentInsets];
      v66 = v64[1];
      *(_OWORD *)v65 = *v64;
      *((_OWORD *)v65 + 1) = v66;
      v67 = v63;
      specialized CanvasView.updateContentInsets()();

    }
  }
  swift_release();
  v68 = *(_QWORD *)(v0 + 336);
  v69 = *(_QWORD *)(v0 + 344);
  v70 = *(_QWORD *)(v0 + 328);

  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (id)(*(uint64_t (**)(void))(v0 + 8))();
}

void partial apply for closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)(a1, v1);
}

void partial apply for closure #1 in closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)()
{
  uint64_t v0;

  closure #1 in closure #1 in MarkupContainerViewController.loadPDF(from:)(v0);
}

void partial apply for closure #1 in MarkupContainerViewController.loadPDF(from:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MarkupContainerViewController.loadPDF(from:)(a1, v1);
}

uint64_t Array<A>.fontName.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t (**v19)@<X0>(uint64_t *@<X8>);
  BOOL (**v20)(uint64_t);
  char *v21;
  uint64_t v22;
  unint64_t v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v31 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0DEE9D8];
  v32 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = a1 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    v17 = *(_QWORD *)(v31 + 72);
    v29 = a1;
    v30 = v17;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v18(v13, v16, v10);
      v18(v5, (uint64_t)v13, v10);
      v18(v9, (uint64_t)v5, v10);
      v19 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>)
                                                                     + 44)];
      *v19 = closure #1 in CRAttributedString.Runs<>.familyNames.getter;
      v19[1] = 0;
      v20 = (BOOL (**)(uint64_t))&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>)
                                                      + 36)];
      *v20 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v20[1] = 0;
      v21 = &v9[*(int *)(v6 + 44)];
      *(_QWORD *)v21 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      *((_QWORD *)v21 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      v22 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
      specialized Array.append<A>(contentsOf:)(v22);
      v16 += v30;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v14 = v32;
  }
  v23 = *(_QWORD *)(v14 + 16);
  if (v23 <= 1)
  {
    if (v23)
    {
      v27 = *(_QWORD *)(v14 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v33._object = (void *)0x80000001DDF51BE0;
    v24._countAndFlagsBits = 0x656C7069746C754DLL;
    v24._object = (void *)0xE800000000000000;
    v25.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v25.value._object = (void *)0xEB00000000656C62;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v33._countAndFlagsBits = 0xD00000000000003FLL;
    return NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, paperKitBundle, v26, v33)._countAndFlagsBits;
  }
  return v27;
}

id Array<A>.fontSize.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t (**v19)@<X0>(uint64_t@<X8>);
  BOOL (**v20)(uint64_t);
  char *v21;
  uint64_t v22;
  float v23;
  id result;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v28 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0DEE9D8];
  v29 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    v17 = *(_QWORD *)(v28 + 72);
    v26 = a1;
    v27 = v17;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v18(v13, v16, v10);
      v18(v5, (uint64_t)v13, v10);
      v18(v9, (uint64_t)v5, v10);
      v19 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>)
                                                                   + 44)];
      *v19 = closure #1 in CRAttributedString.Runs<>.fontSizes.getter;
      v19[1] = 0;
      v20 = (BOOL (**)(uint64_t))&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>)
                                                      + 36)];
      *v20 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v20[1] = 0;
      v21 = &v9[*(int *)(v6 + 44)];
      *(_QWORD *)v21 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      *((_QWORD *)v21 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      v22 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
      specialized Array.append<A>(contentsOf:)(v22);
      v16 += v27;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v14 = v29;
  }
  if (!*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for textBoxDefaultFont == -1)
      goto LABEL_11;
    goto LABEL_18;
  }
  v23 = *(float *)(v14 + 32);
  swift_bridgeObjectRelease();
  if ((~LODWORD(v23) & 0x7F800000) != 0)
  {
    if (v23 > -9.2234e18)
    {
      if (v23 < 9.2234e18)
        return (id)(uint64_t)v23;
      goto LABEL_17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  swift_once();
LABEL_11:
  result = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
  if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v25 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v25 < 9.22337204e18)
    return (id)(uint64_t)v25;
LABEL_21:
  __break(1u);
  return result;
}

BOOL Array<A>.hasMultipleFontSizes.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t (**v19)@<X0>(uint64_t@<X8>);
  BOOL (**v20)(uint64_t);
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v27 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0DEE9D8];
  v28 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = a1 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v17 = *(_QWORD *)(v27 + 72);
    v25 = a1;
    v26 = v17;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v18(v13, v16, v10);
      v18(v5, (uint64_t)v13, v10);
      v18(v9, (uint64_t)v5, v10);
      v19 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>)
                                                                   + 44)];
      *v19 = closure #1 in CRAttributedString.Runs<>.fontSizes.getter;
      v19[1] = 0;
      v20 = (BOOL (**)(uint64_t))&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>)
                                                      + 36)];
      *v20 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v20[1] = 0;
      v21 = &v9[*(int *)(v6 + 44)];
      *(_QWORD *)v21 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      *((_QWORD *)v21 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      v22 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
      specialized Array.append<A>(contentsOf:)(v22);
      v16 += v26;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v14 = v28;
  }
  v23 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRelease();
  return v23 > 1;
}

uint64_t Array<A>.textAlignment.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v26 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0DEE9D8];
  v27 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    v17 = *(_QWORD *)(v26 + 72);
    v24 = a1;
    v25 = v17;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v18(v13, v16, v10);
      v18(v5, (uint64_t)v13, v10);
      v18(v9, (uint64_t)v5, v10);
      v19 = &v9[*(int *)(v6 + 44)];
      *(_QWORD *)v19 = closure #1 in CRAttributedString.Runs<>.alignments.getter;
      *((_QWORD *)v19 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      v20 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v10);
      specialized Array.append<A>(contentsOf:)(v20);
      v16 += v25;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v14 = v27;
  }
  v21 = *(_QWORD *)(v14 + 16);
  if (v21)
  {
    if (v21 == 1)
      v22 = *(_QWORD *)(v14 + 32);
    else
      v22 = 0;
  }
  else
  {
    v22 = 4;
  }
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t Array<A>.textStyles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)@<X0>(uint64_t@<X0>, char *@<X8>);
  BOOL (**v28)(unsigned __int8 *);
  char *v29;
  uint64_t v30;
  uint64_t result;
  int64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (**v48)@<X0>(uint64_t@<X0>, char *@<X8>);
  BOOL (**v49)(unsigned __int8 *);
  char *v50;
  uint64_t v51;
  int64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  BOOL (**v68)(unsigned __int8 *);
  char *v69;
  uint64_t v70;
  int64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64_t v77;
  unint64_t v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  BOOL (**v87)(unsigned __int8 *);
  char *v88;
  uint64_t v89;
  int64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  unint64_t v98;
  int64_t v99;
  unint64_t v100;
  int64_t v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
  MEMORY[0x1E0C80A78](v112, v6);
  v8 = (char *)v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x1E0C80A78](v9, v10);
  v105 = (char *)v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v106 = (char *)v102 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v102 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)v102 - v22;
  v109 = *(_QWORD *)(a1 + 16);
  if (!v109)
  {
    v45 = 7;
    return v45 | 8;
  }
  v111 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  v110 = *(_QWORD *)(v21 + 72);
  v102[1] = a1;
  v103 = v21;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  swift_bridgeObjectRetain();
  v25 = 0;
  while (2)
  {
    v26 = v111 + v110 * v25++;
    v24(v23, v26, v9);
    v24(v5, (uint64_t)v23, v9);
    v24(v8, (uint64_t)v5, v9);
    v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
    v27 = (uint64_t (**)@<X0>(uint64_t@<X0>, char *@<X8>))&v8[*(int *)(v108 + 44)];
    *v27 = closure #1 in CRAttributedString.Runs<>.isBold.getter;
    v27[1] = 0;
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>);
    v28 = (BOOL (**)(unsigned __int8 *))&v8[*(int *)(v107 + 36)];
    *v28 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v28[1] = 0;
    v29 = &v8[*(int *)(v112 + 44)];
    *(_QWORD *)v29 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((_QWORD *)v29 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    v30 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    result = specialized Collection.first.getter(v30);
    v32 = 0;
    v33 = result & 1;
    v34 = v30 + 56;
    v35 = 1 << *(_BYTE *)(v30 + 32);
    if (v35 < 64)
      v36 = ~(-1 << v35);
    else
      v36 = -1;
    v37 = v36 & *(_QWORD *)(v30 + 56);
    v38 = (unint64_t)(v35 + 63) >> 6;
    while (1)
    {
      if (v37)
      {
        v39 = __clz(__rbit64(v37));
        v37 &= v37 - 1;
        v40 = v39 | (v32 << 6);
        goto LABEL_8;
      }
      v41 = v32 + 1;
      if (__OFADD__(v32, 1))
      {
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
      if (v41 >= v38)
        goto LABEL_28;
      v42 = *(_QWORD *)(v34 + 8 * v41);
      ++v32;
      if (!v42)
      {
        v32 = v41 + 1;
        if (v41 + 1 >= v38)
          goto LABEL_28;
        v42 = *(_QWORD *)(v34 + 8 * v32);
        if (!v42)
        {
          v32 = v41 + 2;
          if (v41 + 2 >= v38)
            goto LABEL_28;
          v42 = *(_QWORD *)(v34 + 8 * v32);
          if (!v42)
          {
            v32 = v41 + 3;
            if (v41 + 3 >= v38)
              goto LABEL_28;
            v42 = *(_QWORD *)(v34 + 8 * v32);
            if (!v42)
            {
              v32 = v41 + 4;
              if (v41 + 4 >= v38)
                goto LABEL_28;
              v42 = *(_QWORD *)(v34 + 8 * v32);
              if (!v42)
                break;
            }
          }
        }
      }
LABEL_27:
      v37 = (v42 - 1) & v42;
      v40 = __clz(__rbit64(v42)) + (v32 << 6);
LABEL_8:
      v33 &= *(_BYTE *)(*(_QWORD *)(v30 + 48) + v40);
    }
    v43 = v41 + 5;
    if (v43 < v38)
    {
      v42 = *(_QWORD *)(v34 + 8 * v43);
      if (!v42)
      {
        while (1)
        {
          v32 = v43 + 1;
          if (__OFADD__(v43, 1))
            break;
          if (v32 >= v38)
            goto LABEL_28;
          v42 = *(_QWORD *)(v34 + 8 * v32);
          ++v43;
          if (v42)
            goto LABEL_27;
        }
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
      v32 = v43;
      goto LABEL_27;
    }
LABEL_28:
    v104 = 1;
    swift_release();
    v44 = *(void (**)(char *, uint64_t))(v103 + 8);
    v44(v23, v9);
    if ((v33 & 1) != 0)
    {
      if (v25 == v109)
        goto LABEL_33;
      continue;
    }
    break;
  }
  v104 = 0;
LABEL_33:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRetain();
  v46 = 0;
  while (2)
  {
    v47 = v46 + 1;
    if (__OFADD__(v46, 1))
      goto LABEL_132;
    v24(v18, v111 + v46 * v110, v9);
    v24(v5, (uint64_t)v18, v9);
    v24(v8, (uint64_t)v5, v9);
    v48 = (uint64_t (**)@<X0>(uint64_t@<X0>, char *@<X8>))&v8[*(int *)(v108 + 44)];
    *v48 = closure #1 in CRAttributedString.Runs<>.isItalic.getter;
    v48[1] = 0;
    v49 = (BOOL (**)(unsigned __int8 *))&v8[*(int *)(v107 + 36)];
    *v49 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v49[1] = 0;
    v50 = &v8[*(int *)(v112 + 44)];
    *(_QWORD *)v50 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((_QWORD *)v50 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    v51 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    result = specialized Collection.first.getter(v51);
    v52 = 0;
    v53 = result & 1;
    v54 = v51 + 56;
    v55 = 1 << *(_BYTE *)(v51 + 32);
    if (v55 < 64)
      v56 = ~(-1 << v55);
    else
      v56 = -1;
    v57 = v56 & *(_QWORD *)(v51 + 56);
    v58 = (unint64_t)(v55 + 63) >> 6;
    while (2)
    {
      if (v57)
      {
        v59 = __clz(__rbit64(v57));
        v57 &= v57 - 1;
        v60 = v59 | (v52 << 6);
LABEL_40:
        v53 &= *(_BYTE *)(*(_QWORD *)(v51 + 48) + v60);
        continue;
      }
      break;
    }
    v61 = v52 + 1;
    if (__OFADD__(v52, 1))
      goto LABEL_129;
    if (v61 < v58)
    {
      v62 = *(_QWORD *)(v54 + 8 * v61);
      ++v52;
      if (!v62)
      {
        v52 = v61 + 1;
        if (v61 + 1 >= v58)
          goto LABEL_60;
        v62 = *(_QWORD *)(v54 + 8 * v52);
        if (!v62)
        {
          v52 = v61 + 2;
          if (v61 + 2 >= v58)
            goto LABEL_60;
          v62 = *(_QWORD *)(v54 + 8 * v52);
          if (!v62)
          {
            v52 = v61 + 3;
            if (v61 + 3 >= v58)
              goto LABEL_60;
            v62 = *(_QWORD *)(v54 + 8 * v52);
            if (!v62)
            {
              v52 = v61 + 4;
              if (v61 + 4 >= v58)
                goto LABEL_60;
              v62 = *(_QWORD *)(v54 + 8 * v52);
              if (!v62)
              {
                v63 = v61 + 5;
                if (v63 >= v58)
                  goto LABEL_60;
                v62 = *(_QWORD *)(v54 + 8 * v63);
                if (!v62)
                {
                  while (1)
                  {
                    v52 = v63 + 1;
                    if (__OFADD__(v63, 1))
                      break;
                    if (v52 >= v58)
                      goto LABEL_60;
                    v62 = *(_QWORD *)(v54 + 8 * v52);
                    ++v63;
                    if (v62)
                      goto LABEL_59;
                  }
LABEL_135:
                  __break(1u);
LABEL_136:
                  __break(1u);
                  goto LABEL_137;
                }
                v52 = v63;
              }
            }
          }
        }
      }
LABEL_59:
      v57 = (v62 - 1) & v62;
      v60 = __clz(__rbit64(v62)) + (v52 << 6);
      goto LABEL_40;
    }
LABEL_60:
    swift_release();
    result = ((uint64_t (*)(char *, uint64_t))v44)(v18, v9);
    if ((v53 & 1) != 0)
    {
      v46 = v47;
      if (v47 == v109)
      {
        swift_bridgeObjectRelease();
        v104 |= 2uLL;
        goto LABEL_64;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_64:
  result = swift_bridgeObjectRetain();
  v64 = 0;
  while (2)
  {
    v65 = v64 + 1;
    if (__OFADD__(v64, 1))
      goto LABEL_134;
    v66 = v106;
    v24(v106, v111 + v64 * v110, v9);
    v24(v5, (uint64_t)v66, v9);
    v24(v8, (uint64_t)v5, v9);
    v67 = &v8[*(int *)(v108 + 44)];
    *(_QWORD *)v67 = closure #1 in CRAttributedString.Runs<>.isUndlerline.getter;
    *((_QWORD *)v67 + 1) = 0;
    v68 = (BOOL (**)(unsigned __int8 *))&v8[*(int *)(v107 + 36)];
    *v68 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v68[1] = 0;
    v69 = &v8[*(int *)(v112 + 44)];
    *(_QWORD *)v69 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((_QWORD *)v69 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    v70 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    result = specialized Collection.first.getter(v70);
    v71 = 0;
    v72 = result & 1;
    v73 = v70 + 56;
    v74 = 1 << *(_BYTE *)(v70 + 32);
    if (v74 < 64)
      v75 = ~(-1 << v74);
    else
      v75 = -1;
    v76 = v75 & *(_QWORD *)(v70 + 56);
    v77 = (unint64_t)(v74 + 63) >> 6;
    while (2)
    {
      if (v76)
      {
        v78 = __clz(__rbit64(v76));
        v76 &= v76 - 1;
        v79 = v78 | (v71 << 6);
LABEL_71:
        v72 &= *(_BYTE *)(*(_QWORD *)(v70 + 48) + v79);
        continue;
      }
      break;
    }
    v80 = v71 + 1;
    if (__OFADD__(v71, 1))
      goto LABEL_130;
    if (v80 < v77)
    {
      v81 = *(_QWORD *)(v73 + 8 * v80);
      ++v71;
      if (!v81)
      {
        v71 = v80 + 1;
        if (v80 + 1 >= v77)
          goto LABEL_91;
        v81 = *(_QWORD *)(v73 + 8 * v71);
        if (!v81)
        {
          v71 = v80 + 2;
          if (v80 + 2 >= v77)
            goto LABEL_91;
          v81 = *(_QWORD *)(v73 + 8 * v71);
          if (!v81)
          {
            v71 = v80 + 3;
            if (v80 + 3 >= v77)
              goto LABEL_91;
            v81 = *(_QWORD *)(v73 + 8 * v71);
            if (!v81)
            {
              v71 = v80 + 4;
              if (v80 + 4 >= v77)
                goto LABEL_91;
              v81 = *(_QWORD *)(v73 + 8 * v71);
              if (!v81)
              {
                v82 = v80 + 5;
                if (v82 >= v77)
                  goto LABEL_91;
                v81 = *(_QWORD *)(v73 + 8 * v82);
                if (!v81)
                {
                  while (1)
                  {
                    v71 = v82 + 1;
                    if (__OFADD__(v82, 1))
                      break;
                    if (v71 >= v77)
                      goto LABEL_91;
                    v81 = *(_QWORD *)(v73 + 8 * v71);
                    ++v82;
                    if (v81)
                      goto LABEL_90;
                  }
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
                  return result;
                }
                v71 = v82;
              }
            }
          }
        }
      }
LABEL_90:
      v76 = (v81 - 1) & v81;
      v79 = __clz(__rbit64(v81)) + (v71 << 6);
      goto LABEL_71;
    }
LABEL_91:
    swift_release();
    result = ((uint64_t (*)(char *, uint64_t))v44)(v106, v9);
    if ((v72 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_95;
    }
    v64 = v65;
    if (v65 != v109)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v104 |= 4uLL;
LABEL_95:
  result = swift_bridgeObjectRetain();
  v83 = 0;
  while (2)
  {
    v84 = v83 + 1;
    if (__OFADD__(v83, 1))
      goto LABEL_136;
    v85 = v105;
    v24(v105, v111 + v110 * v83, v9);
    v24(v5, (uint64_t)v85, v9);
    v24(v8, (uint64_t)v5, v9);
    v86 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>)
                     + 44)];
    *(_QWORD *)v86 = closure #1 in CRAttributedString.Runs<>.isStrikethrough.getter;
    *((_QWORD *)v86 + 1) = 0;
    v87 = (BOOL (**)(unsigned __int8 *))&v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>)
                                                              + 36)];
    *v87 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v87[1] = 0;
    v88 = &v8[*(int *)(v112 + 44)];
    *(_QWORD *)v88 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((_QWORD *)v88 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    v89 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    result = specialized Collection.first.getter(v89);
    v90 = 0;
    v91 = result & 1;
    v92 = v89 + 56;
    v93 = 1 << *(_BYTE *)(v89 + 32);
    if (v93 < 64)
      v94 = ~(-1 << v93);
    else
      v94 = -1;
    v95 = v94 & *(_QWORD *)(v89 + 56);
    v96 = (unint64_t)(v93 + 63) >> 6;
    while (2)
    {
      if (v95)
      {
        v97 = __clz(__rbit64(v95));
        v95 &= v95 - 1;
        v98 = v97 | (v90 << 6);
LABEL_102:
        v91 &= *(_BYTE *)(*(_QWORD *)(v89 + 48) + v98);
        continue;
      }
      break;
    }
    v99 = v90 + 1;
    if (__OFADD__(v90, 1))
      goto LABEL_131;
    if (v99 < v96)
    {
      v100 = *(_QWORD *)(v92 + 8 * v99);
      ++v90;
      if (!v100)
      {
        v90 = v99 + 1;
        if (v99 + 1 >= v96)
          goto LABEL_122;
        v100 = *(_QWORD *)(v92 + 8 * v90);
        if (!v100)
        {
          v90 = v99 + 2;
          if (v99 + 2 >= v96)
            goto LABEL_122;
          v100 = *(_QWORD *)(v92 + 8 * v90);
          if (!v100)
          {
            v90 = v99 + 3;
            if (v99 + 3 >= v96)
              goto LABEL_122;
            v100 = *(_QWORD *)(v92 + 8 * v90);
            if (!v100)
            {
              v90 = v99 + 4;
              if (v99 + 4 >= v96)
                goto LABEL_122;
              v100 = *(_QWORD *)(v92 + 8 * v90);
              if (!v100)
              {
                v101 = v99 + 5;
                if (v101 >= v96)
                  goto LABEL_122;
                v100 = *(_QWORD *)(v92 + 8 * v101);
                if (!v100)
                {
                  while (1)
                  {
                    v90 = v101 + 1;
                    if (__OFADD__(v101, 1))
                      goto LABEL_138;
                    if (v90 >= v96)
                      goto LABEL_122;
                    v100 = *(_QWORD *)(v92 + 8 * v90);
                    ++v101;
                    if (v100)
                      goto LABEL_121;
                  }
                }
                v90 = v101;
              }
            }
          }
        }
      }
LABEL_121:
      v95 = (v100 - 1) & v100;
      v98 = __clz(__rbit64(v100)) + (v90 << 6);
      goto LABEL_102;
    }
LABEL_122:
    swift_release();
    result = ((uint64_t (*)(char *, uint64_t))v44)(v105, v9);
    if ((v91 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return v104;
    }
    v83 = v84;
    if (v84 != v109)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v45 = v104;
  return v45 | 8;
}

uint64_t Array<A>.allowedTextStyles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  BOOL (**v23)(unsigned __int8 *);
  char *v24;
  uint64_t v25;
  uint64_t result;
  int64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL (**v44)(unsigned __int8 *);
  char *v45;
  uint64_t v46;
  int64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
  MEMORY[0x1E0C80A78](v66, v6);
  v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x1E0C80A78](v9, v10);
  v62 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)v60 - v15;
  v63 = *(_QWORD *)(a1 + 16);
  if (!v63)
  {
    v59 = 13;
    return v59 | 2;
  }
  v65 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v64 = *(_QWORD *)(v14 + 72);
  v60[1] = a1;
  v61 = v14;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  v18 = 0;
  v60[0] = 12;
  while (2)
  {
    v19 = v65 + v64 * v18++;
    v17(v16, v19, v9);
    v17(v5, (uint64_t)v16, v9);
    v17(v8, (uint64_t)v5, v9);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
    v21 = &v8[*(int *)(v20 + 44)];
    *(_QWORD *)v21 = closure #1 in CRAttributedString.Runs<>.supportsBold.getter;
    *((_QWORD *)v21 + 1) = 0;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>);
    v23 = (BOOL (**)(unsigned __int8 *))&v8[*(int *)(v22 + 36)];
    *v23 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v23[1] = 0;
    v24 = &v8[*(int *)(v66 + 44)];
    *(_QWORD *)v24 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((_QWORD *)v24 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    v25 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    result = specialized Collection.first.getter(v25);
    v27 = 0;
    v28 = result & 1;
    v29 = v25 + 56;
    v30 = 1 << *(_BYTE *)(v25 + 32);
    if (v30 < 64)
      v31 = ~(-1 << v30);
    else
      v31 = -1;
    v32 = v31 & *(_QWORD *)(v25 + 56);
    v33 = (unint64_t)(v30 + 63) >> 6;
    while (1)
    {
      if (v32)
      {
        v34 = __clz(__rbit64(v32));
        v32 &= v32 - 1;
        v35 = v34 | (v27 << 6);
        goto LABEL_8;
      }
      v36 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (v36 >= v33)
        goto LABEL_28;
      v37 = *(_QWORD *)(v29 + 8 * v36);
      ++v27;
      if (!v37)
      {
        v27 = v36 + 1;
        if (v36 + 1 >= v33)
          goto LABEL_28;
        v37 = *(_QWORD *)(v29 + 8 * v27);
        if (!v37)
        {
          v27 = v36 + 2;
          if (v36 + 2 >= v33)
            goto LABEL_28;
          v37 = *(_QWORD *)(v29 + 8 * v27);
          if (!v37)
          {
            v27 = v36 + 3;
            if (v36 + 3 >= v33)
              goto LABEL_28;
            v37 = *(_QWORD *)(v29 + 8 * v27);
            if (!v37)
            {
              v27 = v36 + 4;
              if (v36 + 4 >= v33)
                goto LABEL_28;
              v37 = *(_QWORD *)(v29 + 8 * v27);
              if (!v37)
                break;
            }
          }
        }
      }
LABEL_27:
      v32 = (v37 - 1) & v37;
      v35 = __clz(__rbit64(v37)) + (v27 << 6);
LABEL_8:
      v28 |= *(_BYTE *)(*(_QWORD *)(v25 + 48) + v35);
    }
    v38 = v36 + 5;
    if (v38 < v33)
    {
      v37 = *(_QWORD *)(v29 + 8 * v38);
      if (!v37)
      {
        while (1)
        {
          v27 = v38 + 1;
          if (__OFADD__(v38, 1))
            break;
          if (v27 >= v33)
            goto LABEL_28;
          v37 = *(_QWORD *)(v29 + 8 * v27);
          ++v38;
          if (v37)
            goto LABEL_27;
        }
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        return result;
      }
      v27 = v38;
      goto LABEL_27;
    }
LABEL_28:
    swift_release();
    v39 = *(void (**)(char *, uint64_t))(v61 + 8);
    v39(v16, v9);
    if ((v28 & 1) != 0)
    {
      if (v18 == v63)
      {
        v60[0] = 13;
        break;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRetain();
  v40 = 0;
  while (2)
  {
    v41 = v40 + 1;
    if (__OFADD__(v40, 1))
      goto LABEL_67;
    v42 = v62;
    v17(v62, v65 + v40 * v64, v9);
    v17(v5, (uint64_t)v42, v9);
    v17(v8, (uint64_t)v5, v9);
    v43 = &v8[*(int *)(v20 + 44)];
    *(_QWORD *)v43 = closure #1 in CRAttributedString.Runs<>.supportsItalic.getter;
    *((_QWORD *)v43 + 1) = 0;
    v44 = (BOOL (**)(unsigned __int8 *))&v8[*(int *)(v22 + 36)];
    *v44 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v44[1] = 0;
    v45 = &v8[*(int *)(v66 + 44)];
    *(_QWORD *)v45 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((_QWORD *)v45 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    v46 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    result = specialized Collection.first.getter(v46);
    v47 = 0;
    v48 = result & 1;
    v49 = v46 + 56;
    v50 = 1 << *(_BYTE *)(v46 + 32);
    if (v50 < 64)
      v51 = ~(-1 << v50);
    else
      v51 = -1;
    v52 = v51 & *(_QWORD *)(v46 + 56);
    v53 = (unint64_t)(v50 + 63) >> 6;
    while (2)
    {
      if (v52)
      {
        v54 = __clz(__rbit64(v52));
        v52 &= v52 - 1;
        v55 = v54 | (v47 << 6);
LABEL_38:
        v48 |= *(_BYTE *)(*(_QWORD *)(v46 + 48) + v55);
        continue;
      }
      break;
    }
    v56 = v47 + 1;
    if (__OFADD__(v47, 1))
      goto LABEL_66;
    if (v56 < v53)
    {
      v57 = *(_QWORD *)(v49 + 8 * v56);
      ++v47;
      if (!v57)
      {
        v47 = v56 + 1;
        if (v56 + 1 >= v53)
          goto LABEL_58;
        v57 = *(_QWORD *)(v49 + 8 * v47);
        if (!v57)
        {
          v47 = v56 + 2;
          if (v56 + 2 >= v53)
            goto LABEL_58;
          v57 = *(_QWORD *)(v49 + 8 * v47);
          if (!v57)
          {
            v47 = v56 + 3;
            if (v56 + 3 >= v53)
              goto LABEL_58;
            v57 = *(_QWORD *)(v49 + 8 * v47);
            if (!v57)
            {
              v47 = v56 + 4;
              if (v56 + 4 >= v53)
                goto LABEL_58;
              v57 = *(_QWORD *)(v49 + 8 * v47);
              if (!v57)
              {
                v58 = v56 + 5;
                if (v58 >= v53)
                  goto LABEL_58;
                v57 = *(_QWORD *)(v49 + 8 * v58);
                if (!v57)
                {
                  while (1)
                  {
                    v47 = v58 + 1;
                    if (__OFADD__(v58, 1))
                      goto LABEL_69;
                    if (v47 >= v53)
                      goto LABEL_58;
                    v57 = *(_QWORD *)(v49 + 8 * v47);
                    ++v58;
                    if (v57)
                      goto LABEL_57;
                  }
                }
                v47 = v58;
              }
            }
          }
        }
      }
LABEL_57:
      v52 = (v57 - 1) & v57;
      v55 = __clz(__rbit64(v57)) + (v47 << 6);
      goto LABEL_38;
    }
LABEL_58:
    swift_release();
    result = ((uint64_t (*)(char *, uint64_t))v39)(v62, v9);
    if ((v48 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return v60[0];
    }
    v40 = v41;
    if (v41 != v63)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v59 = v60[0];
  return v59 | 2;
}

id CRAttributedString.Attributes<>.fontSize.getter()
{
  id result;
  double v1;
  uint64_t v2;
  uint64_t v3;
  float v4;

  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v3 == 1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1)
      swift_once();
    result = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
    if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
    {
      if (v1 > -9.22337204e18)
      {
        if (v1 < 9.22337204e18)
          return (id)(uint64_t)v1;
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = (id)outlined consume of Font?(v2, v3);
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v4 < 9.2234e18)
    return (id)(uint64_t)v4;
LABEL_17:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.FontAttribute, &type metadata for TextAttributeScope.FontAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.FontAttribute, &type metadata for TextAttributeScope.FontAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.FontAttribute, &type metadata for TextAttributeScope.FontAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute);
  }
  return result;
}

unint64_t CRAttributedString.Attributes<>.textStyles.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v5 == 1)
  {
    v0 = 0;
  }
  else
  {
    swift_beginAccess();
    v1 = static Font.Traits.bold;
    outlined consume of Font?(v4, v5);
    v0 = (v1 & ~v6) == 0;
  }
  swift_getKeyPath();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v5 != 1)
  {
    swift_beginAccess();
    v2 = static Font.Traits.italic;
    outlined consume of Font?(v4, v5);
    if ((v2 & ~v6) == 0)
      v0 |= 2uLL;
  }
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  return v0 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 1)) & 0xF7 | (8 * (v4 & 1));
}

uint64_t outlined consume of Font?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.UnderlineAttribute, &type metadata for TextAttributeScope.UnderlineAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.UnderlineAttribute, &type metadata for TextAttributeScope.UnderlineAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.UnderlineAttribute, &type metadata for TextAttributeScope.UnderlineAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.StrikethroughAttribute, &type metadata for TextAttributeScope.StrikethroughAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.StrikethroughAttribute, &type metadata for TextAttributeScope.StrikethroughAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.StrikethroughAttribute, &type metadata for TextAttributeScope.StrikethroughAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
  }
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

{
  return (*(_BYTE *)(a1 + 4) & 1) == 0;
}

{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2) != 1;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if ((*(_BYTE *)(result + 4) & 1) != 0)
    __break(1u);
  else
    *a2 = *(_DWORD *)result;
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(unsigned __int8 *a1)
{
  return *a1 != 2;
}

unsigned __int8 *specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v2;

  v2 = *result;
  if (v2 == 2)
    __break(1u);
  else
    *a2 = v2 & 1;
  return result;
}

char *AttributeStylingControl.init(contentInsets:useCompactStyle:)(char a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  char *result;
  void *v24;
  uint64_t v25;
  id v26;
  char *v27;
  double *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  Class isa;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v51;
  double *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  Class v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  Class v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  id v84;
  void *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  id v90;
  id v91;
  objc_super v92;

  v11 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel;
  v12 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v13 = v5;
  *(_QWORD *)&v5[v11] = objc_msgSend(v12, sel_init);
  v14 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView;
  *(_QWORD *)&v13[v14] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  v15 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton;
  *(_QWORD *)&v13[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3518]), sel_init);
  v16 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView;
  *(_QWORD *)&v13[v16] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  v17 = *MEMORY[0x1E0DC4A88];
  v18 = *MEMORY[0x1E0DC1448];
  v19 = (void *)*MEMORY[0x1E0DC4920];
  v20 = (void *)objc_opt_self();
  v21 = v19;
  v22 = objc_msgSend(v20, sel_traitCollectionWithPreferredContentSizeCategory_, v21);
  result = (char *)objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v17, v18);
  if (result)
  {
    v24 = result;
    v25 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabelFont;
    v26 = objc_msgSend(result, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v22);

    *(_QWORD *)&v13[v25] = v26;
    v27 = &v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font] = 0;
    *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = 0;
    v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle] = 0;
    v28 = (double *)&v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentInsets];
    *v28 = a2;
    v28[1] = a3;
    v28[2] = a4;
    v28[3] = a5;
    v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle] = a1 & 1;

    v92.receiver = v13;
    v92.super_class = (Class)type metadata accessor for AttributeStylingControl();
    v29 = (char *)objc_msgSendSuper2(&v92, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    v30 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton;
    v31 = *(void **)&v29[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton];
    v32 = v29;
    objc_msgSend(v31, sel_setUserInteractionEnabled_, 1);
    objc_msgSend(v31, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v32, sel_addSubview_, v31);
    v91 = (id)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1DDF329D0;
    v34 = objc_msgSend(v31, sel_topAnchor);
    v35 = objc_msgSend(v32, sel_topAnchor);
    v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

    *(_QWORD *)(v33 + 32) = v36;
    v37 = objc_msgSend(*(id *)&v29[v30], sel_leadingAnchor);
    v38 = objc_msgSend(v32, sel_leadingAnchor);
    v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

    *(_QWORD *)(v33 + 40) = v39;
    v40 = objc_msgSend(*(id *)&v29[v30], sel_bottomAnchor);
    v41 = objc_msgSend(v32, sel_bottomAnchor);
    v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

    *(_QWORD *)(v33 + 48) = v42;
    v43 = objc_msgSend(*(id *)&v29[v30], sel_trailingAnchor);
    v44 = objc_msgSend(v32, (SEL)&selRef_done_);
    v45 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v44);

    *(_QWORD *)(v33 + 56) = v45;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_activateConstraints_, isa);

    v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
    objc_msgSend(v47, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(v47, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v48 = *(void **)&v29[v30];
    objc_msgSend(v48, sel_addSubview_, v47);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1DDF329D0;
    v50 = objc_msgSend(v47, sel_topAnchor);
    v51 = objc_msgSend(v48, sel_topAnchor);
    v52 = (double *)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentInsets];
    v53 = objc_msgSend(v50, sel_constraintEqualToAnchor_constant_, v51, *(double *)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentInsets]);

    *(_QWORD *)(v49 + 32) = v53;
    v54 = objc_msgSend(v47, sel_leadingAnchor);
    v55 = objc_msgSend(*(id *)&v29[v30], sel_leadingAnchor);
    v56 = objc_msgSend(v54, sel_constraintEqualToAnchor_constant_, v55, v52[1]);

    *(_QWORD *)(v49 + 40) = v56;
    v57 = objc_msgSend(v47, sel_bottomAnchor);
    v58 = objc_msgSend(*(id *)&v29[v30], sel_bottomAnchor);
    v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_constant_, v58, -v52[2]);

    *(_QWORD *)(v49 + 48) = v59;
    v60 = objc_msgSend(v47, sel_trailingAnchor);
    v61 = objc_msgSend(*(id *)&v29[v30], sel_trailingAnchor);
    v62 = objc_msgSend(v60, sel_constraintEqualToAnchor_constant_, v61, -v52[3]);

    *(_QWORD *)(v49 + 56) = v62;
    specialized Array._endMutation()();
    v63 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_activateConstraints_, v63);

    v64 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView;
    v65 = *(void **)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView];
    objc_msgSend(v65, sel_setAxis_, 0);
    objc_msgSend(v65, sel_setAlignment_, 3);
    objc_msgSend(v65, sel_setDistribution_, 0);
    objc_msgSend(v65, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v47, sel_addSubview_, v65);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_1DDF329D0;
    v67 = objc_msgSend(v65, sel_centerXAnchor);
    v68 = objc_msgSend(v47, sel_centerXAnchor);
    v69 = objc_msgSend(v67, sel_constraintEqualToAnchor_, v68);

    *(_QWORD *)(v66 + 32) = v69;
    v70 = objc_msgSend(*(id *)&v32[v64], sel_centerYAnchor);
    v71 = objc_msgSend(v47, sel_centerYAnchor);
    v72 = objc_msgSend(v70, sel_constraintEqualToAnchor_, v71);

    *(_QWORD *)(v66 + 40) = v72;
    v73 = objc_msgSend(*(id *)&v32[v64], sel_leadingAnchor);
    v74 = objc_msgSend(v47, sel_leadingAnchor);
    v75 = objc_msgSend(v73, sel_constraintGreaterThanOrEqualToAnchor_, v74);

    *(_QWORD *)(v66 + 48) = v75;
    v76 = objc_msgSend(*(id *)&v32[v64], sel_trailingAnchor);
    v77 = objc_msgSend(v47, sel_trailingAnchor);
    v78 = objc_msgSend(v76, sel_constraintLessThanOrEqualToAnchor_, v77);

    *(_QWORD *)(v66 + 56) = v78;
    specialized Array._endMutation()();
    v79 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_activateConstraints_, v79);

    v80 = *(void **)&v32[v64];
    v81 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView;
    objc_msgSend(v80, sel_addArrangedSubview_, *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView]);
    v82 = *(void **)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel];
    objc_msgSend(v80, sel_addArrangedSubview_, v82);
    objc_msgSend(v82, sel_setNumberOfLines_, 1);
    objc_msgSend(v82, sel_setLineBreakMode_, 4);
    v83 = one-time initialization token for titleLabelTextColor;
    v84 = v82;
    if (v83 != -1)
      swift_once();
    objc_msgSend(v84, sel_setTextColor_, static AttributeStylingControl.titleLabelTextColor);

    v85 = *(void **)&v32[v81];
    LODWORD(v86) = 1148846080;
    objc_msgSend(v85, sel_setContentHuggingPriority_forAxis_, 1, v86);
    LODWORD(v87) = 1148846080;
    objc_msgSend(v85, sel_setContentHuggingPriority_forAxis_, 0, v87);
    LODWORD(v88) = 1148846080;
    objc_msgSend(v85, sel_setContentCompressionResistancePriority_forAxis_, 1, v88);
    LODWORD(v89) = 1148846080;
    objc_msgSend(v85, sel_setContentCompressionResistancePriority_forAxis_, 0, v89);
    AttributeStylingControl.updateUI()();
    v90 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B18]), sel_initWithDelegate_, v32);
    objc_msgSend(v32, sel_addInteraction_, v90);

    return v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributeStylingControl.updateUI()()
{
  _QWORD *v0;
  void *v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  void *v13;

  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton), sel_setEnabled_, objc_msgSend(v0, sel_isEnabled));
  v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel);
  v2 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title);
  objc_msgSend(v1, sel_setHidden_, *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title + 8) == 0);
  v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView);
  v4 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image;
  objc_msgSend(v3, sel_setHidden_, *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image) == 0);
  v5 = v2[1];
  if (v5)
  {
    v6 = *v2;
    swift_bridgeObjectRetain();
    v7 = (void *)MEMORY[0x1DF0E41AC](v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v1, sel_setText_, v7);

  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font);
  if (v8)
  {
    v9 = *(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font);
  }
  else
  {
    v9 = *(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabelFont);
    v8 = 0;
  }
  v10 = v8;
  objc_msgSend(v1, sel_setFont_, v9);

  if (*(_QWORD *)((char *)v0 + v4))
    v11 = objc_msgSend(v3, sel_setImage_);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))(v11);
  objc_msgSend(v0, sel_setBackgroundColor_, v13);

  return (*(uint64_t (**)(void))((*v12 & *v0) + 0x118))();
}

id one-time initialization function for titleLabelTextColor()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  static AttributeStylingControl.titleLabelTextColor = (uint64_t)result;
  return result;
}

Swift::Void __swiftcall AttributeStylingControl.layoutSubviews()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  double v2;
  id v3;
  id v4;
  objc_super v5;
  CGRect v6;

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for AttributeStylingControl();
  objc_msgSendSuper2(&v5, sel_layoutSubviews);
  v1 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle;
  objc_msgSend(v0, sel_setClipsToBounds_, v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle]);
  v2 = 0.0;
  if (v0[v1] == 1)
  {
    objc_msgSend(v0, sel_bounds);
    v2 = CGRectGetHeight(v6) * 0.5;
  }
  v3 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v3, sel_setCornerRadius_, v2);

  v4 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton], sel_layer);
  objc_msgSend(v4, sel_setCornerRadius_, v2);

}

uint64_t AttributeStylingControl.addTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  v7 = v16;
  if (v16)
  {
    v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    v9 = *(_QWORD *)(v7 - 8);
    v10 = MEMORY[0x1E0C80A78](v8, v8);
    v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

uint64_t AttributeStylingControl.removeTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  v7 = v16;
  if (v16)
  {
    v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    v9 = *(_QWORD *)(v7 - 8);
    v10 = MEMORY[0x1E0C80A78](v8, v8);
    v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(v6, sel_removeTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

id @objc AttributeStylingControl.isSelected.getter(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for AttributeStylingControl();
  return objc_msgSendSuper2(&v5, *a3);
}

void @objc AttributeStylingControl.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  const char *v6;
  id v7;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for AttributeStylingControl();
  v6 = *a4;
  v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  AttributeStylingControl.updateUI()();

}

Swift::Void __swiftcall AttributeStylingControl.updateTintColor()()
{
  void *v0;

  objc_msgSend(v0, sel_setTintColor_, 0);
}

UIColor_optional __swiftcall AttributeStylingControl.resolvedBackgroundColor()()
{
  uint64_t v0;
  int v1;
  void *v2;
  char **v3;
  objc_class *v4;
  Swift::Bool v5;
  UIColor_optional result;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle);
  v2 = (void *)objc_opt_self();
  v3 = &selRef_quaternarySystemFillColor;
  if (!v1)
    v3 = &selRef_tertiarySystemFillColor;
  v4 = (objc_class *)objc_msgSend(v2, *v3);
  result.value.super.isa = v4;
  result.is_nil = v5;
  return result;
}

id AttributeStylingControl.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttributeStylingControl();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AttributeStylingControl()
{
  return objc_opt_self();
}

void closure #1 in AttributeStylingControl.pointerInteraction(_:willEnter:animator:)(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend((id)objc_opt_self(), sel_opaqueSeparatorColor);
    objc_msgSend(v2, sel_setBackgroundColor_, v3);

  }
}

void closure #1 in AttributeStylingControl.pointerInteraction(_:willExit:animator:)(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(a1, sel_view);
  if (v3)
  {
    v4 = v3;
    v5 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x120))();
    objc_msgSend(v4, sel_setBackgroundColor_, v5);

  }
}

uint64_t sub_1DDC278C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in AttributeStylingControl.pointerInteraction(_:willExit:animator:)()
{
  uint64_t v0;

  closure #1 in AttributeStylingControl.pointerInteraction(_:willExit:animator:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t sub_1DDC27910()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in AttributeStylingControl.pointerInteraction(_:willEnter:animator:)()
{
  uint64_t v0;

  closure #1 in AttributeStylingControl.pointerInteraction(_:willEnter:animator:)(*(void **)(v0 + 16));
}

void specialized AttributeStylingControl.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;

  v1 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  v2 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  v3 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3518]), sel_init);
  v4 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  v5 = *MEMORY[0x1E0DC4A88];
  v6 = *MEMORY[0x1E0DC1448];
  v7 = (void *)*MEMORY[0x1E0DC4920];
  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_traitCollectionWithPreferredContentSizeCategory_, v9);
  v11 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v5, v6);
  if (!v11)
    __break(1u);
  v12 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabelFont;
  v13 = v11;
  v14 = objc_msgSend(v11, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v10);

  *(_QWORD *)&v0[v12] = v14;
  v15 = &v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

float *specialized TextFormattingState.update(from:shouldUseStyle:)(float *result, char a2)
{
  uint64_t v2;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  v4 = result;
  v5 = *((_QWORD *)result + 3);
  if (v5)
  {
    v6 = *((_QWORD *)result + 2);
    swift_getKeyPath();
  }
  else
  {
    v5 = *((_QWORD *)result + 1);
    if (!v5)
      goto LABEL_6;
    v6 = *(_QWORD *)result;
    swift_getKeyPath();
  }
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v2 + 96) = v6;
  *(_QWORD *)(v2 + 104) = v5;
  *(_BYTE *)(v2 + 112) = 0;
  swift_bridgeObjectRelease();
  MiniMenuState._fontName.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  result = (float *)swift_release();
LABEL_6:
  if ((a2 & 1) == 0)
    return result;
  v7 = v4[8];
  if ((~LODWORD(v7) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v7 <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v7 >= 9.2234e18)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v8 = (uint64_t)v7;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v2 + 120) = v8;
  *(_BYTE *)(v2 + 128) = 0;
  MiniMenuState._fontSize.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  v9 = *((_QWORD *)v4 + 5);
  swift_beginAccess();
  LOBYTE(v8) = (static Font.Traits.bold & ~v9) == 0;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(_BYTE *)(v2 + 129) = v8;
  *(_BYTE *)(v2 + 130) = 0;
  MiniMenuState._bold.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  LOBYTE(v9) = (static Font.Traits.italic & ~v9) == 0;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(_BYTE *)(v2 + 131) = v9;
  *(_BYTE *)(v2 + 132) = 0;
  MiniMenuState._italic.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return (float *)swift_release();
}

uint64_t specialized TextStyleSelector.init(viewModel:fontTapHandler:colorTapHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t *v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;

  State.init(wrappedValue:)();
  *(_BYTE *)(a7 + 16) = v19;
  *(_QWORD *)(a7 + 24) = v20;
  State.init(wrappedValue:)();
  *(_BYTE *)(a7 + 32) = v19;
  *(_QWORD *)(a7 + 40) = v20;
  v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextStyleSelector<MiniMenuState>);
  v15 = (uint64_t *)(a7 + v14[11]);
  *v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(a7 + v14[12] + 8) = 0;
  result = swift_unknownObjectWeakInit();
  v17 = (_QWORD *)(a7 + v14[13]);
  v18 = (_QWORD *)(a7 + v14[14]);
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *v17 = a3;
  v17[1] = a4;
  *v18 = a5;
  v18[1] = a6;
  return result;
}

uint64_t MiniTextButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  void (*v38)(uint64_t *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[7];
  _BYTE v57[7];
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v2 = v1;
  v42 = a1;
  v40 = type metadata accessor for PopoverAttachmentAnchor();
  v44 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v3);
  v5 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0);
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v6);
  v46 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v1[1];
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  v38 = (void (*)(uint64_t *))*((_QWORD *)&v59 + 1);
  v39 = v59;
  DWORD2(v37) = v60;
  v8 = (_OWORD *)swift_allocObject();
  v9 = v2[1];
  v8[1] = *v2;
  v8[2] = v9;
  v10 = v2[3];
  v8[3] = v2[2];
  v8[4] = v10;
  v48 = 0uLL;
  LOBYTE(v49) = 1;
  outlined retain of MiniTextButton((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  v11 = v59;
  v12 = v60;
  v13 = *((_QWORD *)&v60 + 1);
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, (uint64_t (*)(uint64_t))type metadata accessor for MiniPopoverState, (uint64_t)&protocol conformance descriptor for MiniPopoverState);
  v14 = EnvironmentObject.init()();
  v16 = v15;
  v17 = static VerticalAlignment.firstTextBaseline.getter();
  v58 = v12;
  v48 = v11;
  LOBYTE(v49) = v12;
  *(_DWORD *)((char *)&v49 + 1) = *(_DWORD *)v57;
  DWORD1(v49) = *(_DWORD *)&v57[3];
  *((_QWORD *)&v49 + 1) = v13;
  *(_QWORD *)&v50 = v39;
  *((_QWORD *)&v50 + 1) = v38;
  LOBYTE(v51) = BYTE8(v37);
  *(_DWORD *)((char *)&v51 + 1) = *(_DWORD *)v56;
  DWORD1(v51) = *(_DWORD *)&v56[3];
  *((_QWORD *)&v51 + 1) = v14;
  *(_QWORD *)&v52 = v16;
  *((_QWORD *)&v52 + 1) = closure #1 in MiniTextButton.body.getter;
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = partial apply for closure #2 in MiniTextButton.body.getter;
  *(_QWORD *)&v54 = v8;
  *((_QWORD *)&v54 + 1) = v17;
  *(_QWORD *)&v55 = closure #1 in MiniDivider.body.getter;
  *((_QWORD *)&v55 + 1) = 0;
  v47 = v2[2];
  State.projectedValue.getter();
  v35 = v60;
  v18 = (_OWORD *)swift_allocObject();
  v19 = v2[1];
  v18[1] = *v2;
  v18[2] = v19;
  v20 = v2[3];
  v18[3] = v2[2];
  v18[4] = v20;
  outlined retain of MiniTextButton((uint64_t)v2);
  v21 = static Anchor.Source<A>.bounds.getter();
  v34 = v5;
  *v5 = v21;
  LODWORD(v39) = *MEMORY[0x1E0CDC3D0];
  v38 = *(void (**)(uint64_t *))(v44 + 104);
  v22 = v40;
  v38(v5);
  *(_QWORD *)&v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier>);
  *((_QWORD *)&v36 + 1) = type metadata accessor for FontPicker(0);
  *(_QWORD *)&v37 = lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
  *((_QWORD *)&v37 + 1) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
  v23 = v34;
  View.popover<A>(isPresented:attachmentAnchor:content:)();
  swift_release();
  swift_release();
  swift_release();
  v44 = *(_QWORD *)(v44 + 8);
  v24 = v23;
  v25 = v23;
  v26 = v22;
  ((void (*)(uint64_t *, uint64_t))v44)(v24, v22);
  v63 = v52;
  v64 = v53;
  v65 = v54;
  v66 = v55;
  v59 = v48;
  v60 = v49;
  v61 = v50;
  v62 = v51;
  outlined release of ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier>((uint64_t)&v59);
  v47 = v2[3];
  State.projectedValue.getter();
  v27 = (_OWORD *)swift_allocObject();
  v28 = v2[1];
  v27[1] = *v2;
  v27[2] = v28;
  v29 = v2[3];
  v27[3] = v2[2];
  v27[4] = v29;
  outlined retain of MiniTextButton((uint64_t)v2);
  *v25 = static Anchor.Source<A>.bounds.getter();
  ((void (*)(uint64_t *, _QWORD, uint64_t))v38)(v25, v39, v22);
  type metadata accessor for ColorPickerRepresentable(0);
  v48 = v36;
  v49 = v37;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, type metadata accessor for ColorPickerRepresentable, (uint64_t)&protocol conformance descriptor for ColorPickerRepresentable);
  v30 = v41;
  v31 = v46;
  View.popover<A>(isPresented:attachmentAnchor:content:)();
  swift_release();
  swift_release();
  swift_release();
  ((void (*)(uint64_t *, uint64_t))v44)(v25, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v31, v30);
}

uint64_t closure #1 in MiniTextButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v13[0] = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Image.init(systemName:)();
  v6 = objc_msgSend((id)objc_opt_self(), sel_labelColor, v13[0]);
  v7 = MEMORY[0x1DF0E22F8](v6);
  KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1)
    swift_once();
  v9 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = static Font.system(size:weight:design:)();
  outlined destroy of Font.Design?((uint64_t)v4);
  v11 = swift_getKeyPath();
  v13[1] = v5;
  v13[2] = KeyPath;
  v13[3] = v7;
  v13[4] = v11;
  v13[5] = v10;
  LocalizedStringKey.init(stringLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in MiniTextButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_OWORD *)swift_allocObject();
  v7 = *(_OWORD *)(a1 + 16);
  v6[1] = *(_OWORD *)a1;
  v6[2] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v6[3] = *(_OWORD *)(a1 + 32);
  v6[4] = v8;
  v9 = (_OWORD *)swift_allocObject();
  v10 = *(_OWORD *)(a1 + 16);
  v9[1] = *(_OWORD *)a1;
  v9[2] = v10;
  v11 = *(_OWORD *)(a1 + 48);
  v9[3] = *(_OWORD *)(a1 + 32);
  v9[4] = v11;
  outlined retain of MiniTextButton(a1);
  outlined retain of MiniTextButton(a1);
  swift_retain();
  return specialized TextStyleSelector.init(viewModel:fontTapHandler:colorTapHandler:)(v4, v5, (uint64_t)partial apply for closure #1 in closure #2 in MiniTextButton.body.getter, (uint64_t)v6, (uint64_t)partial apply for closure #2 in closure #2 in MiniTextButton.body.getter, (uint64_t)v9, a2);
}

uint64_t closure #1 in closure #2 in MiniTextButton.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.setter();
  return State.wrappedValue.setter();
}

uint64_t closure #2 in closure #2 in MiniTextButton.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.setter();
  return State.wrappedValue.setter();
}

uint64_t closure #4 in MiniTextButton.body.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t (*v14)(uint64_t);
  __int128 v15;
  __int128 v16;
  uint64_t (**v17)(uint64_t);
  _QWORD v19[6];
  __int128 v20;

  v4 = type metadata accessor for FontPicker(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (_QWORD *)((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *a1;
  v8 = (_QWORD *)*((_QWORD *)&v20 + 1);
  swift_getKeyPath();
  v19[3] = v8;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v9 = v8[12];
  v10 = v8[13];
  swift_bridgeObjectRetain();
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v20);
  swift_getKeyPath();
  v19[0] = v8;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v11 = v8[15];
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v20);
  v12 = (void *)MEMORY[0x1DF0E41AC](v9, v10);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend((id)objc_opt_self(), sel_fontDescriptorWithName_size_, v12, (double)v11);

  v14 = (uint64_t (*)(uint64_t))swift_allocObject();
  v15 = a1[1];
  *((_OWORD *)v14 + 1) = *a1;
  *((_OWORD *)v14 + 2) = v15;
  v16 = a1[3];
  *((_OWORD *)v14 + 3) = a1[2];
  *((_OWORD *)v14 + 4) = v16;
  *v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v7 + *(int *)(v4 + 20)) = (uint64_t)v13;
  v17 = (uint64_t (**)(uint64_t))((char *)v7 + *(int *)(v4 + 24));
  *v17 = partial apply for closure #1 in closure #4 in MiniTextButton.body.getter;
  v17[1] = v14;
  outlined init with take of FontPicker((uint64_t)v7, a2);
  return outlined retain of MiniTextButton((uint64_t)a1);
}

uint64_t closure #1 in closure #4 in MiniTextButton.body.getter(uint64_t a1, __int128 *a2)
{
  void *v3;
  __int128 v5;
  PaperKit::Font v6;

  v5 = *a2;
  v3 = (void *)objc_opt_self();
  swift_retain();
  Font.init(_:)(&v6, (UIFont)objc_msgSend(v3, sel_fontWithDescriptor_size_, a1, 0.0, v5));
  specialized TextFormattingState.update(from:shouldUseStyle:)((float *)&v6, 0);
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v5);
  return outlined release of Font((uint64_t)&v6);
}

void closure #5 in MiniTextButton.body.getter(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t (*v5)(void *);
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)(void *);
  id v10;
  id v11;
  __int128 v12;

  v12 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v4 = *(id *)(*((_QWORD *)&v12 + 1) + 160);
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v12);
  v5 = (uint64_t (*)(void *))swift_allocObject();
  v6 = a1[1];
  *((_OWORD *)v5 + 1) = *a1;
  *((_OWORD *)v5 + 2) = v6;
  v7 = a1[3];
  *((_OWORD *)v5 + 3) = a1[2];
  *((_OWORD *)v5 + 4) = v7;
  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  swift_storeEnumTagMultiPayload();
  v8 = type metadata accessor for ColorPickerRepresentable(0);
  v9 = (uint64_t (**)(void *))((char *)a2 + *(int *)(v8 + 20));
  *v9 = partial apply for closure #1 in closure #5 in MiniTextButton.body.getter;
  v9[1] = v5;
  v10 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  outlined retain of MiniTextButton((uint64_t)a1);
  v11 = objc_msgSend(v10, sel_initWithCGColor_, v4);

  *(uint64_t *)((char *)a2 + *(int *)(v8 + 24)) = (uint64_t)v11;
}

uint64_t closure #1 in closure #5 in MiniTextButton.body.getter(void *a1, __int128 *a2)
{
  id v3;
  CGColor *v4;
  __int128 v6;

  v6 = *a2;
  swift_retain();
  v3 = objc_msgSend(a1, sel_CGColor);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v4 = (CGColor *)v3;
  Color.cgColor.setter(v4);
  *(_BYTE *)(*((_QWORD *)&v6 + 1) + 168) = 0;
  swift_endAccess();

  MiniMenuState._fontColor.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return outlined release of ObservedObject<MiniMenuState>((uint64_t)&v6);
}

uint64_t protocol witness for View.body.getter in conformance MiniTextButton@<X0>(uint64_t a1@<X8>)
{
  return MiniTextButton.body.getter(a1);
}

uint64_t specialized MiniTextButton.init(state:isShowingTextStyleSelector:isShowingFontPopover:isShowingColorPopover:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for MiniMenuState();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  v2 = ObservedObject.init(wrappedValue:)();
  v4 = v3;
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  result = State.init(wrappedValue:)();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  return result;
}

uint64_t destroy for MiniTextButton()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MiniTextButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniTextButton(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MiniTextButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniTextButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniTextButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniTextButton()
{
  return &type metadata for MiniTextButton;
}

uint64_t associated type witness table accessor for View.Body : View in MiniTextButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #2 in MiniTextButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in MiniTextButton.body.getter(v1 + 16, a1);
}

uint64_t outlined retain of MiniTextButton(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #4 in MiniTextButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #4 in MiniTextButton.body.getter((__int128 *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier>);
    v2[0] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>> and conformance MiniPopoverButton<A, B>, &demangling cache variable for type metadata for MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, (uint64_t)&protocol conformance descriptor for MiniPopoverButton<A, B>);
    v2[1] = lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void partial apply for closure #5 in MiniTextButton.body.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #5 in MiniTextButton.body.getter((__int128 *)(v1 + 16), a1);
}

uint64_t outlined release of ObservedObject<MiniMenuState>(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t partial apply for closure #1 in closure #5 in MiniTextButton.body.getter(void *a1)
{
  uint64_t v1;

  return closure #1 in closure #5 in MiniTextButton.body.getter(a1, (__int128 *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #4 in MiniTextButton.body.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #4 in MiniTextButton.body.getter(a1, (__int128 *)(v1 + 16));
}

uint64_t outlined init with take of FontPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontPicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of Font(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in MiniTextButton.body.getter()
{
  return closure #1 in closure #2 in MiniTextButton.body.getter();
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #2 in MiniTextButton.body.getter()
{
  return closure #2 in closure #2 in MiniTextButton.body.getter();
}

uint64_t outlined destroy of Font.Design?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DDC295B0()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0);
  type metadata accessor for ColorPickerRepresentable(255);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier>);
  type metadata accessor for FontPicker(255);
  lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, TextStyleSelector<MiniMenuState>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, type metadata accessor for ColorPickerRepresentable, (uint64_t)&protocol conformance descriptor for ColorPickerRepresentable);
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for SignatureLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC296B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SignatureLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC296F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SignatureLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SignatureLayout;
  if (!type metadata singleton initialization cache for SignatureLayout)
    return swift_getSingletonMetadata();
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in SignatureLayout()
{
  return &protocol witness table for Signature;
}

_QWORD *SignatureLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v37;
  double v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  _QWORD v43[3];
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _UNKNOWN **v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v43[0] = a4;
  v43[1] = a5;
  v44 = a3;
  v45 = a2;
  v43[2] = a1;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Signature>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v46 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v43 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v5, v6, v22);
  v25 = type metadata accessor for Signature();
  v26 = lazy protocol witness table accessor for type Signature and conformance Signature();
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<Signature> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v47 = v25;
  v48 = v26;
  v49 = &protocol witness table for Signature;
  swift_getKeyPath();
  v27 = v44;
  v28 = v44;
  v29 = v45;
  v30 = v45;
  Capsule<>.subscript.getter();
  swift_release();
  x = v50.origin.x;
  y = v50.origin.y;
  width = v50.size.width;
  height = v50.size.height;
  MinX = CGRectGetMinX(v50);
  v51.origin.x = x;
  v51.origin.y = y;
  v51.size.width = width;
  v51.size.height = height;
  MinY = CGRectGetMinY(v51);
  v52.origin.x = x;
  v52.origin.y = y;
  v52.size.width = width;
  v52.size.height = height;
  v37 = CGRectGetWidth(v52);
  v53.origin.x = x;
  v53.origin.y = y;
  v53.size.width = width;
  v53.size.height = height;
  v38 = CGRectGetHeight(v53);
  v39 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v19, v24, v16);
  v40 = objc_allocWithZone((Class)type metadata accessor for SignatureView());
  v41 = specialized SignatureView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v19, v29, v27, MinX, MinY, v37, v38);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v16);
  return v41;
}

unint64_t lazy protocol witness table accessor for type Ref<Signature> and conformance Ref<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Ref<Signature> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<Signature> and conformance Ref<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<Signature>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12878], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<Signature> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_1DDC29AC0()
{
  return 24;
}

__n128 sub_1DDC29ACC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t BezierPath.init(path:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t BezierPath.observableDifference(from:with:)()
{
  return 1;
}

uint64_t BezierPath.init(from:)@<X0>(CGMutablePathRef *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  CGMutablePathRef Mutable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[10];
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  CGAffineTransform transform;
  CGAffineTransform v28;
  CGAffineTransform v29;
  CGAffineTransform v30;
  CGMutablePathRef *v31;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for ValueTypes_BezierPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (_QWORD *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of CRDecoder.valueContainer()();
  if (v1)
    return swift_release();
  v31 = a1;
  v10 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  v12 = v11;
  swift_release();
  v26 = 0;
  v25 = 0u;
  v24 = 0u;
  outlined copy of Data._Representation(v10, v12);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
  Message.init(serializedData:extensions:partial:options:)();
  v20 = v10;
  v21 = v12;
  Mutable = CGPathCreateMutable();
  v14 = *(_QWORD *)(*v8 + 16);
  v19[9] = *v8;
  if (v14)
  {
    v15 = v8[1];
    v19[2] = &v30.b;
    v19[1] = &v30.tx;
    v22 = v15;
    v23 = *(_QWORD *)(v15 + 16);
    v19[4] = &v29.b;
    v19[3] = &v29.tx;
    v19[8] = &v28.b;
    v19[7] = &v28.tx;
    v19[6] = &transform.b;
    v19[5] = &transform.tx;
    v16 = swift_bridgeObjectRetain();
    if (*(_BYTE *)(v16 + 40) == 1)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    v17 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    swift_allocError();
    *v18 = 0xD000000000000015;
    v18[1] = 0x80000001DDF51DA0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v18, *MEMORY[0x1E0D11EF8], v17);
    swift_willThrow();
    swift_release();

    outlined consume of Data._Representation(v20, v21);
    return outlined destroy of ValueTypes_BezierPath((uint64_t)v8);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_release();
    outlined consume of Data._Representation(v20, v21);
    swift_bridgeObjectRelease();
    result = outlined destroy of ValueTypes_BezierPath((uint64_t)v8);
    *v31 = Mutable;
  }
  return result;
}

uint64_t outlined destroy of ValueTypes_BezierPath(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ValueTypes_BezierPath();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BezierPath.encode(to:)()
{
  const CGPath **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const CGPath *v10;
  uint64_t v11;
  uint64_t NumberOfElements;
  _QWORD *v13;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char isEscapingClosureAtFileLocation;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD aBlock[6];

  v2 = type metadata accessor for ValueTypes_BezierPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (_QWORD *)((char *)aBlock - v8);
  v10 = *v0;
  v11 = MEMORY[0x1E0DEE9D8];
  *v9 = MEMORY[0x1E0DEE9D8];
  v9[1] = v11;
  UnknownStorage.init()();
  NumberOfElements = CGPathGetNumberOfElements();
  v13 = (_QWORD *)*v9;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v9 = v13;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || NumberOfElements > v13[3] >> 1)
  {
    if (v13[2] <= NumberOfElements)
      v15 = NumberOfElements;
    else
      v15 = v13[2];
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 0, v13);
  }
  *v9 = v13;
  result = CGPathGetNumberOfPoints();
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  v17 = 2 * result;
  v18 = (_QWORD *)v9[1];
  v19 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  v9[1] = v18;
  if (!(_DWORD)v19 || v17 > v18[3] >> 1)
  {
    if (v18[2] <= v17)
      v20 = v17;
    else
      v20 = v18[2];
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, 0, v18);
  }
  v9[1] = v18;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v9;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for closure #1 in BezierPath.encode(to:);
  *(_QWORD *)(v22 + 24) = v21;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_21;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v10, v23);
  _Block_release(v23);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_19;
  outlined init with copy of ValueTypes_BezierPath((uint64_t)v9, (uint64_t)v5);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (uint64_t (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath, (uint64_t)&protocol conformance descriptor for ValueTypes_BezierPath);
  v25 = Message.serializedData(partial:)();
  v27 = v26;
  outlined destroy of ValueTypes_BezierPath((uint64_t)v5);
  if (!v1)
  {
    Data.encode(to:)();
    outlined consume of Data._Representation(v25, v27);
  }
  outlined destroy of ValueTypes_BezierPath((uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BezierPath.encode(to:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;

  switch(*(_DWORD *)a1)
  {
    case 0:
      v4 = (_QWORD *)*a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a2 = (uint64_t)v4;
      }
      v7 = v4[2];
      v6 = v4[3];
      v8 = v7 + 1;
      if (v7 >= v6 >> 1)
      {
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
        v8 = v7 + 1;
        v4 = v42;
      }
      v4[2] = v8;
      v9 = &v4[2 * v7];
      v9[4] = 0;
      *((_BYTE *)v9 + 40) = 1;
      goto LABEL_27;
    case 1:
      v4 = (_QWORD *)*a2;
      v27 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v4;
      if ((v27 & 1) == 0)
      {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a2 = (uint64_t)v4;
      }
      v29 = v4[2];
      v28 = v4[3];
      v30 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v4);
        v30 = v29 + 1;
        v4 = v45;
      }
      v4[2] = v30;
      v31 = &v4[2 * v29];
      v31[4] = 1;
      *((_BYTE *)v31 + 40) = 1;
LABEL_27:
      *a2 = (uint64_t)v4;
      v32 = **(_QWORD **)(a1 + 8);
      v33 = (_QWORD *)a2[1];
      v34 = swift_isUniquelyReferenced_nonNull_native();
      a2[1] = (uint64_t)v33;
      if ((v34 & 1) == 0)
      {
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        a2[1] = (uint64_t)v33;
      }
      v36 = v33[2];
      v35 = v33[3];
      v37 = v36 + 1;
      if (v36 >= v35 >> 1)
      {
        v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v33);
        v37 = v36 + 1;
        v33 = v41;
      }
      v33[2] = v37;
      v33[v36 + 4] = v32;
      a2[1] = (uint64_t)v33;
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      result = swift_isUniquelyReferenced_nonNull_native();
      a2[1] = (uint64_t)v33;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36 + 2, 1, v33);
        v33 = (_QWORD *)result;
        a2[1] = result;
      }
      v40 = v33[2];
      v39 = v33[3];
      if (v40 >= v39 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v33);
        v33 = (_QWORD *)result;
      }
      v33[2] = v40 + 1;
      v33[v40 + 4] = v38;
      a2[1] = (uint64_t)v33;
      break;
    case 2:
      v15 = (_QWORD *)*a2;
      v16 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v15;
      if ((v16 & 1) == 0)
      {
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        *a2 = (uint64_t)v15;
      }
      v18 = v15[2];
      v17 = v15[3];
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
        v19 = v18 + 1;
        v15 = v43;
      }
      v15[2] = v19;
      v20 = &v15[2 * v18];
      v20[4] = 2;
      *((_BYTE *)v20 + 40) = 1;
      *a2 = (uint64_t)v15;
      result = closure #1 in closure #1 in BezierPath.encode(to:)(*(uint64_t **)(a1 + 8), (uint64_t)a2);
      break;
    case 3:
      v21 = (_QWORD *)*a2;
      v22 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v21;
      if ((v22 & 1) == 0)
      {
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        *a2 = (uint64_t)v21;
      }
      v24 = v21[2];
      v23 = v21[3];
      v25 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
        v25 = v24 + 1;
        v21 = v44;
      }
      v21[2] = v25;
      v26 = &v21[2 * v24];
      v26[4] = 3;
      *((_BYTE *)v26 + 40) = 1;
      *a2 = (uint64_t)v21;
      result = closure #2 in closure #1 in BezierPath.encode(to:)(*(uint64_t **)(a1 + 8), (uint64_t)a2);
      break;
    case 4:
      v10 = (_QWORD *)*a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v10;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        v10 = (_QWORD *)result;
        *a2 = result;
      }
      v13 = v10[2];
      v12 = v10[3];
      if (v13 >= v12 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
        v10 = (_QWORD *)result;
      }
      v10[2] = v13 + 1;
      v14 = &v10[2 * v13];
      v14[4] = 4;
      *((_BYTE *)v14 + 40) = 1;
      *a2 = (uint64_t)v10;
      break;
    default:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t closure #1 in closure #1 in BezierPath.encode(to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = *a1;
  v5 = *(_QWORD **)(a2 + 8);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 8) = v5;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
    *(_QWORD *)(a2 + 8) = result;
  }
  v8 = v5[2];
  v7 = v5[3];
  v9 = v8 + 1;
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v9;
  v5[v8 + 4] = v4;
  v10 = a1[1];
  *(_QWORD *)(a2 + 8) = v5;
  v11 = v5[3];
  v12 = v8 + 2;
  if ((uint64_t)(v8 + 2) > (uint64_t)(v11 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v8 + 2, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v12;
  v5[v9 + 4] = v10;
  v13 = a1[2];
  *(_QWORD *)(a2 + 8) = v5;
  v14 = v5[3];
  v15 = v8 + 3;
  if ((uint64_t)(v8 + 3) > (uint64_t)(v14 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v8 + 3, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v15;
  v5[v12 + 4] = v13;
  v16 = a1[3];
  *(_QWORD *)(a2 + 8) = v5;
  v17 = v5[3];
  if ((uint64_t)(v8 + 4) > (uint64_t)(v17 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v8 + 4, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 4;
  v5[v15 + 4] = v16;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t closure #2 in closure #1 in BezierPath.encode(to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = *a1;
  v5 = *(_QWORD **)(a2 + 8);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 8) = v5;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
    *(_QWORD *)(a2 + 8) = result;
  }
  v8 = v5[2];
  v7 = v5[3];
  v9 = v8 + 1;
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v9;
  v5[v8 + 4] = v4;
  v10 = a1[1];
  *(_QWORD *)(a2 + 8) = v5;
  v11 = v5[3];
  v12 = v8 + 2;
  if ((uint64_t)(v8 + 2) > (uint64_t)(v11 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v8 + 2, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v12;
  v5[v9 + 4] = v10;
  v13 = a1[2];
  *(_QWORD *)(a2 + 8) = v5;
  v14 = v5[3];
  v15 = v8 + 3;
  if ((uint64_t)(v8 + 3) > (uint64_t)(v14 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v8 + 3, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v15;
  v5[v12 + 4] = v13;
  v16 = a1[3];
  *(_QWORD *)(a2 + 8) = v5;
  v17 = v5[3];
  v18 = v8 + 4;
  if ((uint64_t)(v8 + 4) > (uint64_t)(v17 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v8 + 4, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v18;
  v5[v15 + 4] = v16;
  v19 = a1[4];
  *(_QWORD *)(a2 + 8) = v5;
  v20 = v5[3];
  v21 = v8 + 5;
  if ((uint64_t)(v8 + 5) > (uint64_t)(v20 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v8 + 5, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v21;
  v5[v18 + 4] = v19;
  v22 = a1[5];
  *(_QWORD *)(a2 + 8) = v5;
  v23 = v5[3];
  if ((uint64_t)(v8 + 6) > (uint64_t)(v23 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v8 + 6, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 6;
  v5[v21 + 4] = v22;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t static BezierPath.== infix(_:_:)()
{
  type metadata accessor for CGPathRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, (uint64_t (*)(uint64_t))type metadata accessor for CGPathRef, (uint64_t)&protocol conformance descriptor for CGPathRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BezierPath()
{
  type metadata accessor for CGPathRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, (uint64_t (*)(uint64_t))type metadata accessor for CGPathRef, (uint64_t)&protocol conformance descriptor for CGPathRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

void protocol witness for CRType.observableDifference(from:with:) in conformance BezierPath(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance BezierPath@<X0>(CGMutablePathRef *a1@<X8>)
{
  return BezierPath.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance BezierPath()
{
  return BezierPath.encode(to:)();
}

uint64_t sub_1DDC2AE30()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BezierPath.encode(to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in BezierPath.encode(to:)(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1DDC2AE48()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t outlined init with copy of ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ValueTypes_BezierPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for BezierPath()
{
  return &type metadata for BezierPath;
}

UIImage_optional __swiftcall ShapeOpacitySliderView.thumbImage(multiSelect:)(Swift::Bool multiSelect)
{
  char *v1;
  double v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  float v7;
  id v8;
  Swift::Bool v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  char isEscapingClosureAtFileLocation;
  objc_class *v16;
  _QWORD v17[6];
  UIImage_optional result;

  if (*(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_axis])
    v2 = 37.0;
  else
    v2 = 33.0;
  if (multiSelect)
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_weight_, 3, v2 + -6.0);
    v4 = (void *)MEMORY[0x1DF0E41AC](0x69632E73756E696DLL, 0xEC000000656C6372);
    v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

    if (v5)
    {
      v6 = objc_msgSend(v5, sel_imageWithRenderingMode_, 2);

      v5 = objc_msgSend(v6, sel_imageWithSymbolConfiguration_, v3);
    }
    objc_msgSend(v1, sel_value);
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, fmax(1.0 - v7 + 0.2, 0.6), 1.0);
    objc_msgSend(v1, sel_setTintColor_, v8);

  }
  else
  {
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v2, v2);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = 0x4004000000000000;
    *(_QWORD *)(v11 + 24) = v1;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(double *)(v11 + 48) = v2;
    *(double *)(v11 + 56) = v2;
    *(_QWORD *)(v11 + 64) = 0x4010000000000000;
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = partial apply for closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:);
    *(_QWORD *)(v12 + 24) = v11;
    v17[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v17[5] = v12;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1107296256;
    v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v17[3] = &block_descriptor_22;
    v13 = _Block_copy(v17);
    v14 = v1;
    swift_retain();
    swift_release();
    v5 = objc_msgSend(v10, sel_imageWithActions_, v13);

    _Block_release(v13);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    v16 = (objc_class *)swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      goto LABEL_11;
    }
  }
  v16 = (objc_class *)v5;
LABEL_11:
  result.value.super.isa = v16;
  result.is_nil = v9;
  return result;
}

void one-time initialization function for shortSliderLength()
{
  static ShapeOpacitySliderView.shortSliderLength = 0x406F400000000000;
}

id ShapeOpacitySliderView.init(axis:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  char *v6;
  id v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *v14;
  objc_super v16;
  Swift::String v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient;
  v5 = objc_allocWithZone(MEMORY[0x1E0CD2790]);
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, sel_init);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_trackImage] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_axis] = a1;

  v16.receiver = v6;
  v16.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v8 = one-time initialization token for paperKitBundle;
  v9 = v7;
  if (v8 != -1)
    swift_once();
  v17._object = (void *)0x80000001DDF51F70;
  v10._countAndFlagsBits = 0x7974696361704FLL;
  v10._object = (void *)0xE700000000000000;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0xD000000000000032;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v17)._countAndFlagsBits;
  v14 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

  return v9;
}

Swift::Void __swiftcall ShapeOpacitySliderView.didMoveToSuperview()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  Class isa;
  id v17;
  id v18;
  double v19;
  double v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  double v28;
  double v29;
  objc_super v30;

  v30.receiver = v0;
  v30.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v30, sel_didMoveToSuperview);
  v1 = objc_msgSend(v0, sel_superview);

  if (v1)
  {
    v2 = (void *)objc_opt_self();
    v3 = objc_msgSend(v2, sel_blackColor);
    v4 = objc_msgSend(v3, sel_colorWithAlphaComponent_, 0.02);

    objc_msgSend(v0, sel_setBackgroundColor_, v4);
    v5 = objc_msgSend(v0, sel_layer);
    objc_msgSend(v5, sel_setMasksToBounds_, 1);

    v6 = OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient;
    v7 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1DDF33AB0;
    v9 = v7;
    v10 = objc_msgSend(v2, sel_whiteColor);
    v11 = objc_msgSend(v10, sel_CGColor);

    type metadata accessor for CGColorRef(0);
    v13 = v12;
    *(_QWORD *)(v8 + 56) = v12;
    *(_QWORD *)(v8 + 32) = v11;
    v14 = objc_msgSend(v2, sel_blackColor);
    v15 = objc_msgSend(v14, sel_CGColor);

    *(_QWORD *)(v8 + 88) = v13;
    *(_QWORD *)(v8 + 64) = v15;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setColors_, isa);

    v17 = objc_msgSend(v0, sel_traitCollection);
    v18 = objc_msgSend(v17, sel_layoutDirection);

    if (v18 == (id)1)
      v19 = 1.0;
    else
      v19 = 0.0;
    if (v18 == (id)1)
      v20 = 0.0;
    else
      v20 = 1.0;
    objc_msgSend(*(id *)&v0[v6], sel_setStartPoint_, v19, 1.0);
    objc_msgSend(*(id *)&v0[v6], sel_setEndPoint_, v20, 1.0);
    v21 = objc_msgSend(v0, sel_layer);
    objc_msgSend(v21, sel_insertSublayer_atIndex_, *(_QWORD *)&v0[v6], 0);

    v22 = objc_msgSend(v0, sel_layer);
    v23 = objc_msgSend(v2, sel_systemGrayColor);
    v24 = objc_msgSend(v23, sel_colorWithAlphaComponent_, 0.2);

    v25 = objc_msgSend(v24, sel_CGColor);
    objc_msgSend(v22, sel_setBorderColor_, v25);

    v26 = objc_msgSend(v0, sel_layer);
    v27 = objc_msgSend(v0, sel_traitCollection);
    objc_msgSend(v27, sel_displayScale);
    v29 = v28;

    objc_msgSend(v26, sel_setBorderWidth_, 1.0 / v29);
  }
}

Swift::Void __swiftcall ShapeOpacitySliderView.layoutSubviews()()
{
  char *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  CGFloat tx;
  CGFloat ty;
  double v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGAffineTransform v22;
  CGAffineTransform t2;
  CGAffineTransform t1;
  objc_super v25;
  CGRect v26;
  CGRect v27;

  v25.receiver = v0;
  v25.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v25, sel_layoutSubviews);
  v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setCornerRadius_, CGRectGetHeight(v26) * 0.5);

  v2 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);

  objc_msgSend(v0, sel_bounds);
  if (!CGRectIsEmpty(v27))
  {
    v3 = OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_trackImage;
    v4 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_trackImage];
    if (!v4
      || (objc_msgSend(v4, sel_size), v6 = v5, v8 = v7, objc_msgSend(v0, sel_bounds), vabdd_f64(v6, v10) >= 0.001)
      || vabdd_f64(v8, v9) >= 0.001)
    {
      ShapeOpacitySliderView.makeTrackImage()();
      v11 = *(void **)&v0[v3];
      *(_QWORD *)&v0[v3] = v12;

      objc_msgSend(v0, sel_setMinimumTrackImage_forState_, *(_QWORD *)&v0[v3], 0);
      objc_msgSend(v0, sel_setMaximumTrackImage_forState_, *(_QWORD *)&v0[v3], 0);
    }
  }
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_axis] == 1)
  {
    CGAffineTransformMakeRotation(&t1, -1.57079633);
    v20 = *(_OWORD *)&t1.c;
    v21 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    objc_msgSend(v0, sel_bounds);
    CGAffineTransformMakeTranslation(&t1, v15 * 0.5 - v16 * 0.5, v16 * 0.5 - v15 * 0.5);
    v17 = *(_OWORD *)&t1.a;
    v18 = *(_OWORD *)&t1.c;
    v19 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v21;
    *(_OWORD *)&t1.c = v20;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v17;
    *(_OWORD *)&t2.c = v18;
    *(_OWORD *)&t2.tx = v19;
    CGAffineTransformConcat(&v22, &t1, &t2);
    t1 = v22;
    objc_msgSend(v0, sel_setTransform_, &t1);
  }
}

void ShapeOpacitySliderView.makeTrackImage()()
{
  void *v0;
  double v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v13[6];
  CGRect v14;
  CGRect v15;
  CGRect v16;

  objc_msgSend(v0, sel_bounds);
  if (!CGRectIsEmpty(v14))
  {
    objc_msgSend(v0, sel_bounds);
    v1 = CGRectGetHeight(v15) / 3.0;
    objc_msgSend(v0, sel_bounds);
    v2 = floor(CGRectGetWidth(v16) / v1);
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
        {
          v3 = (uint64_t)v2;
          objc_msgSend(v0, sel_bounds);
          v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v4, v5);
          v7 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
          v8 = objc_msgSend(v7, sel_colorWithAlphaComponent_, 0.15);

          v9 = swift_allocObject();
          *(_QWORD *)(v9 + 16) = v8;
          *(_QWORD *)(v9 + 24) = 3;
          *(_QWORD *)(v9 + 32) = v3;
          *(double *)(v9 + 40) = v1;
          v10 = swift_allocObject();
          *(_QWORD *)(v10 + 16) = partial apply for closure #1 in ShapeOpacitySliderView.makeTrackImage();
          *(_QWORD *)(v10 + 24) = v9;
          v13[4] = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
          v13[5] = v10;
          v13[0] = MEMORY[0x1E0C809B0];
          v13[1] = 1107296256;
          v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
          v13[3] = &block_descriptor_13_0;
          v11 = _Block_copy(v13);
          v12 = v8;
          swift_retain();
          swift_release();
          objc_msgSend(v6, sel_imageWithActions_, v11);

          _Block_release(v11);
          LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          if ((v6 & 1) == 0)
            return;
LABEL_10:
          __break(1u);
          return;
        }
LABEL_9:
        __break(1u);
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
}

void closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:)(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGContext *v16;
  CGContext *v17;
  id v18;
  CGColor *v19;
  float v20;
  CGFloat v21;
  CGContext *v22;
  CGColor *GenericGray;
  CGContext *v24;
  CGContext *v25;
  CGRect v26;
  CGRect v27;

  v16 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineWidth(v16, a3);

  v17 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v18 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v19 = (CGColor *)objc_msgSend(v18, sel_CGColor);

  CGContextSetStrokeColorWithColor(v17, v19);
  objc_msgSend(a2, sel_value);
  v21 = 1.0 - v20;
  v22 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  GenericGray = CGColorCreateGenericGray(v21, 1.0);
  CGContextSetFillColorWithColor(v22, GenericGray);

  v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v26.origin.x = a4;
  v26.origin.y = a5;
  v26.size.width = a6;
  v26.size.height = a7;
  v27 = CGRectInset(v26, a8, a8);
  CGContextAddEllipseInRect(v24, v27);

  v25 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v25, kCGPathFillStroke);

}

void closure #1 in ShapeOpacitySliderView.makeTrackImage()(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5)
{
  CGContext *v10;
  CGColor *v11;
  uint64_t v12;
  uint64_t v13;
  CGContext *v14;
  CGRect v15;

  v10 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v11 = (CGColor *)objc_msgSend(a2, sel_CGColor);
  CGContextSetFillColorWithColor(v10, v11);

  if (a3 < 0)
    goto LABEL_16;
  if (a3)
  {
    if (a4 < 0)
    {
LABEL_17:
      __break(1u);
      return;
    }
    v12 = 0;
    while (v12 != a3)
    {
      if (a4)
      {
        v13 = 0;
        while (!__OFADD__(v12, v13))
        {
          if ((((_BYTE)v12 + (_BYTE)v13) & 1) == 0)
          {
            v14 = (CGContext *)objc_msgSend(a1, sel_CGContext);
            v15.origin.x = (double)v13 * a5;
            v15.origin.y = (double)v12 * a5;
            v15.size.width = a5;
            v15.size.height = a5;
            CGContextFillRect(v14, v15);

          }
          if (a4 == ++v13)
            goto LABEL_5;
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v12 == a3)
        return;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
}

uint64_t type metadata accessor for ShapeOpacitySliderView()
{
  return objc_opt_self();
}

uint64_t sub_1DDC2C154()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:)(void *a1)
{
  uint64_t v1;

  closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:)(a1, *(void **)(v1 + 24), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64));
}

uint64_t sub_1DDC2C190()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t sub_1DDC2C1B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ShapeOpacitySliderView.makeTrackImage()(void *a1)
{
  uint64_t v1;

  closure #1 in ShapeOpacitySliderView.makeTrackImage()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(CGFloat *)(v1 + 40));
}

uint64_t sub_1DDC2C1EC()
{
  return swift_deallocObject();
}

void CompactTextAlignmentControl.updateUI(selectedTextAlignmentDidChange:)(char a1)
{
  char *v1;
  unsigned int v3;
  void *v4;
  char **v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  objc_super v14;

  v14.receiver = v1;
  v14.super_class = (Class)swift_getObjectType();
  v3 = objc_msgSendSuper2(&v14, sel_isHighlighted);
  v4 = (void *)objc_opt_self();
  v5 = &selRef_secondarySystemFillColor;
  if (!v3)
    v5 = &selRef_quaternarySystemFillColor;
  v6 = objc_msgSend(v4, *v5);
  objc_msgSend(v1, sel_setBackgroundColor_, v6);

  if ((a1 & 1) != 0)
  {
    if ((v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment + 8] & 1) != 0)
    {
LABEL_5:
      v7 = 0x80000001DDF4CC90;
      v8 = 0xD000000000000010;
      goto LABEL_6;
    }
    v8 = 0x696C612E74786574;
    v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment];
    if (v13)
    {
      if (v13 == 3)
      {
        v7 = 0xEC00000079666974;
        v8 = 0x73756A2E74786574;
      }
      else
      {
        if (v13 != 2)
          goto LABEL_5;
        v7 = 0xEF74686769726E67;
      }
    }
    else
    {
      v7 = 0xEE007466656C6E67;
    }
LABEL_6:
    v9 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_imageView];
    v10 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_symbolConfiguration];
    v11 = (void *)MEMORY[0x1DF0E41AC](v8, v7);
    swift_bridgeObjectRelease();
    v12 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v11, v10);

    if (v12)
    {
      objc_msgSend(v9, sel_setImage_, v12);

    }
    else
    {
      __break(1u);
    }
  }
}

void CompactTextAlignmentControl.didTapSelf()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  char *v4;
  char *v5;
  char v6;
  char *v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  id v20;
  _QWORD v21[6];
  CGRect v22;
  CGRect v23;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_viewControllerProvider])();
  if (v2)
  {
    v3 = (void *)v2;
    type metadata accessor for TextAlignmentViewController();
    v4 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v5 = *(char **)&v4[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl];
    v6 = v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment + 8];
    v7 = &v5[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment];
    *(_QWORD *)v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment];
    v7[8] = v6;
    v8 = v5;
    TextAlignmentControl.updateUI()();

    objc_msgSend(v4, sel_setModalPresentationStyle_, 7);
    v9 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, sel_setSourceView_, v1);

    }
    v11 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v1, sel_bounds);
      v23 = CGRectInset(v22, -2.0, -2.0);
      objc_msgSend(v12, sel_setSourceRect_, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);

    }
    v13 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v13, sel_setDelegate_, v1);

    }
    v15 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, sel__setIgnoresKeyboardNotifications_, 1);

    }
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v4;
    *(_QWORD *)(v17 + 24) = v1;
    v21[4] = partial apply for closure #1 in CompactTextAlignmentControl.didTapSelf();
    v21[5] = v17;
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 1107296256;
    v21[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v21[3] = &block_descriptor_23;
    v18 = _Block_copy(v21);
    v19 = v4;
    v20 = v1;
    swift_release();
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v19, 1, v18);
    _Block_release(v18);

  }
}

uint64_t type metadata accessor for CompactTextAlignmentControl()
{
  return objc_opt_self();
}

uint64_t protocol witness for TextAlignmentWidget.selectedTextAlignment.getter in conformance CompactTextAlignmentControl()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment);
}

void protocol witness for TextAlignmentWidget.selectedTextAlignment.setter in conformance CompactTextAlignmentControl(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment;
  *(_QWORD *)v3 = a1;
  *(_BYTE *)(v3 + 8) = a2 & 1;
  CompactTextAlignmentControl.updateUI(selectedTextAlignmentDidChange:)(1);
}

uint64_t sub_1DDC2C9B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in CompactTextAlignmentControl.didTapSelf()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl), sel_addTarget_action_forControlEvents_, *(_QWORD *)(v0 + 24), sel_textAlignmentValueDidChange_, 4096);
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

void specialized CompactTextAlignmentControl.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  char *v13;

  v1 = OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_imageView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  v2 = *MEMORY[0x1E0DC4A88];
  v3 = *MEMORY[0x1E0DC1448];
  v4 = (void *)*MEMORY[0x1E0DC4920];
  v5 = (void *)objc_opt_self();
  v6 = v4;
  v7 = objc_msgSend(v5, sel_traitCollectionWithPreferredContentSizeCategory_, v6);
  v8 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v2, v3);
  if (!v8)
    __break(1u);
  v9 = v8;
  v10 = objc_msgSend(v8, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v7);

  if (!v10)
    __break(1u);
  v11 = OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_symbolConfiguration;
  v12 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, v10, 2);

  *(_QWORD *)&v0[v11] = v12;
  v13 = &v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t WeakTagged_3<>.docPage.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return WeakTagged_3.tagged3.getter();
}

double SearchQueryResult.frame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*PaperPage.frame.modify(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = PaperPage.frame.modify((uint64_t)v6, a2, a3);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t (*PaperPage.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a1 = (*(double (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*PaperPage.bounds.modify(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = PaperPage.bounds.modify((uint64_t)v6, a2, a3);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t (*PaperPage.bounds.modify(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a1 = (*(double (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  return UnknownCanvasElementView.flags.modify;
}

double PaperPage.rotation.getter()
{
  return 0.0;
}

uint64_t (*PaperPage.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperPage.rotation.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperPage.updateFrom<A>(pdfPage:in:)()
{
  return protocol witness for CRValue.__hasDelta(from:) in conformance PKStrokeProperties();
}

{
  return protocol witness for CRValue.__hasDelta(from:) in conformance PKStrokeProperties();
}

uint64_t PaperPage.addDrawingAnnotation<A>(pdfPage:use:in:options:)()
{
  uint64_t v0;

  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t PaperPage.addCanvasElement<A, B>(_:capsule:)@<X0>(uint64_t a1@<X8>)
{
  return PaperPage.addCanvasElement<A, B>(_:capsule:)(a1);
}

{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t PaperPage.bounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

void PaperPage.axisAlignedRotationInDegrees.getter(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = (*(double (**)(void))(a2 + 64))();
  v3 = round((v2 + v2) / 3.14159265);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= 9.22337204e18)
LABEL_7:
    __break(1u);
}

void PaperPage.axisAlignedRotationInDegrees.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = round((double)a1 / 90.0) * 3.14159265 * 0.5;
  if (v5 >= 0.0)
    v6 = v5;
  else
    v6 = v5 + 6.28318531;
  v7 = (*(double (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  v8 = fmod(v7 - v6, 6.28318531);
  if (v8 > 3.14159265)
    v8 = v8 + -6.28318531;
  if (v8 < -3.14159265)
    v8 = v8 + 6.28318531;
  if (fabs(v8) > 0.01)
    (*(void (**)(uint64_t, uint64_t, double))(a3 + 72))(a2, a3, v6);
}

PaperKit::TaggedPaperPage::Enum_optional __swiftcall TaggedPaperPage.Enum.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::TaggedPaperPage::Enum_optional)rawValue;
}

uint64_t TaggedPaperPage.Enum.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

PaperKit::TaggedPaperPage::Enum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TaggedPaperPage.Enum(Swift::Int *a1)
{
  return TaggedPaperPage.Enum.init(rawValue:)(*a1);
}

uint64_t SharedTagged_3<>.paper.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  return SharedTagged_3.tagged1.getter();
}

uint64_t SharedTagged_3<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  return SharedTagged_3.tagged2.getter();
}

uint64_t SharedTagged_3<>.docPage.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  return SharedTagged_3.tagged3.getter();
}

uint64_t WeakTagged_3<>.paper.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return WeakTagged_3.tagged1.getter();
}

uint64_t WeakTagged_3<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return WeakTagged_3.tagged2.getter();
}

unint64_t lazy protocol witness table accessor for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum;
  if (!lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedPaperPage.Enum, &type metadata for TaggedPaperPage.Enum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum;
  if (!lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedPaperPage.Enum, &type metadata for TaggedPaperPage.Enum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum);
  }
  return result;
}

uint64_t associated type witness table accessor for Tagged_3.Unknown : CRDT in TaggedPaperPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
}

void sub_1DDC2D1A0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  keypath_getTm_1(a1, a2, (double (*)(_QWORD, _QWORD))PaperPage.frame.getter, a3);
}

uint64_t sub_1DDC2D1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnknownCanvasElementView.flags.modify(*(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_1DDC2D1D4()
{
  return 16;
}

__n128 sub_1DDC2D1E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1DDC2D1EC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  keypath_getTm_1(a1, a2, (double (*)(_QWORD, _QWORD))PaperPage.bounds.getter, a3);
}

void keypath_getTm_1(uint64_t a1@<X1>, uint64_t a2@<X2>, double (*a3)(_QWORD, _QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)a4 = a3(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *(_QWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = v6;
  *(_QWORD *)(a4 + 24) = v7;
}

uint64_t sub_1DDC2D22C()
{
  return 16;
}

__n128 sub_1DDC2D238(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1DDC2D244(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1DDC2D24C()
{
  return 16;
}

__n128 sub_1DDC2D258(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for SearchQueryResult()
{
  return &type metadata for SearchQueryResult;
}

uint64_t dispatch thunk of PaperPage.frame.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PaperPage.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperPage.bounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PaperPage.bounds.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PaperPage.bounds.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PaperPage.pdfContentsBounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PaperPage.rotation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PaperPage.rotation.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PaperPage.rotation.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of PaperPage.pdfPageID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PaperPage.setVellum<A>(opacity:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

uint64_t dispatch thunk of PaperPage.importElements<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

uint64_t dispatch thunk of PaperPage.importAnnotations<A>(from:scale:mediaBox:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 112))();
}

uint64_t dispatch thunk of PaperPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 120))();
}

uint64_t dispatch thunk of PaperPage.update<A>(pdfPage:id:use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 128))();
}

uint64_t dispatch thunk of PaperPage.updateFrom<A>(pdfPage:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

uint64_t dispatch thunk of PaperPage.addDrawingAnnotation<A>(pdfPage:use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 144) + *(_QWORD *)(a8 + 144));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of PaperPage.addCanvasElement<A, B>(_:capsule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 152))();
}

uint64_t dispatch thunk of PaperPage.shared(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of PaperPage.finishDecode(from:pageID:assetManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 168))();
}

uint64_t dispatch thunk of PaperPage.applyDifference<A>(id:in:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 176))();
}

uint64_t dispatch thunk of PaperPage.indexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 184))();
}

uint64_t dispatch thunk of PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a9 + 192) + *(_QWORD *)(a9 + 192));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v17;
  *v17 = v9;
  v17[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

ValueMetadata *type metadata accessor for TaggedPaperPage()
{
  return &type metadata for TaggedPaperPage;
}

uint64_t storeEnumTagSinglePayload for TaggedPaperPage.Enum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDC2D4FC + 4 * byte_1DDF37C05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDC2D530 + 4 * byte_1DDF37C00[v4]))();
}

uint64_t sub_1DDC2D530(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC2D538(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC2D540);
  return result;
}

uint64_t sub_1DDC2D54C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC2D554);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDC2D558(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC2D560(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaggedPaperPage.Enum()
{
  return &type metadata for TaggedPaperPage.Enum;
}

Swift::OpaquePointer_optional __swiftcall LinkView.pasteboardRepresentation()()
{
  void *v0;
  Swift::OpaquePointer_optional result;

  v0 = 0;
  result.value._rawValue = v0;
  return result;
}

uint64_t LinkView.isSelected.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit8LinkView_isSelected) = result;
  return result;
}

id LinkView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for LinkView()
{
  return objc_opt_self();
}

UIMenu closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)(uint64_t a1, UIMenuElementSize a2)
{
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;
  Swift::OpaquePointer v9;
  UIImage_optional v10;
  Swift::String swift__string;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  swift__string._object = (void *)0x80000001DDF52110;
  v3._countAndFlagsBits = 0x7474412074696445;
  v3._object = (void *)0xEF746E656D686361;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  swift__string._countAndFlagsBits = 0xD000000000000022;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, swift__string);
  if ((unint64_t)a2 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    swift_bridgeObjectRetain();
    v8 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    a2 = v8;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v10.value.super.isa = 0;
  v10.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v6, (Swift::String_optional)0, v10, 0, 0xFFFFFFFFFFFFFFFFLL, a2, v9);
}

id specialized LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v10[6];

  v1 = v0 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate;
  v2 = (id)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v5;
      v7 = (void *)objc_opt_self();
      v10[4] = partial apply for closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:);
      v10[5] = v6;
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 1107296256;
      v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
      v10[3] = &block_descriptor_24;
      v8 = _Block_copy(v10);
      swift_retain();
      swift_release();
      v2 = objc_msgSend(v7, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v8);
      swift_release();
      _Block_release(v8);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1DDC2DA9C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

UIMenu partial apply for closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)(a1, *(UIMenuElementSize *)(v1 + 16));
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t dispatch thunk of FindResultProvider.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 24)
                                                                                     + *(_QWORD *)(a6 + 24));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of FindResult.frames(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FindResult.scrollToVisible(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of FindResult.draw(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void TextAlignmentControl.init(axis:useCapsuleStyle:)(char *a1, char a2)
{
  char *v2;
  uint64_t v5;
  id v6;
  Swift::Int p_base_prots;
  char *v8;
  _BYTE *v9;
  id v10;
  _BYTE *v11;
  uint64_t v12;
  double v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  void *v22;
  void *v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;
  objc_class *v30;
  id v31;
  id v32;
  char *v33;
  void *v34;
  id v35;
  char *v36;
  id v37;
  char *v38;
  double v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  double v44;
  char *v45;
  char v46;
  id v47;
  id v48;
  char *v49;
  void *v50;
  id v51;
  char *v52;
  id v53;
  char *v54;
  id v55;
  void *v56;
  id v57;
  char v58;
  id v59;
  id v60;
  char *v61;
  void *v62;
  id v63;
  char *v64;
  id v65;
  char *v66;
  double v67;
  id v68;
  void *v69;
  id v70;
  double v71;
  double v72;
  double v73;
  char v74;
  id v75;
  id v76;
  char *v77;
  void *v78;
  id v79;
  char *v80;
  id v81;
  char *v82;
  char *v83;
  id v84;
  uint64_t v85;
  void *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  Class isa;
  void *v103;
  uint64_t *v104;
  char *v105;
  char **v106;
  id v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  id v115;
  void *v116;
  double *v117;
  id v118;
  id v119;
  void *v120;
  double *v121;
  id v122;
  id v123;
  void *v124;
  double *v125;
  id v126;
  id v127;
  void *v128;
  double *v129;
  id v130;
  Class v131;
  id v132;
  uint64_t v133;
  Swift::Int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  Swift::Int v141;
  unint64_t v142;
  _BYTE *v143;
  id v144;
  Class v145;
  void *v146;
  id v147;
  void *v148;
  id v149;
  void *v150;
  id v151;
  void *v152;
  id v153;
  void *v154;
  uint64_t v155;
  Swift::String v156;
  Swift::String_optional v157;
  Swift::String v158;
  uint64_t countAndFlagsBits;
  void *v160;
  Class v161;
  id v162;
  Swift::String v163;
  Swift::String_optional v164;
  Swift::String v165;
  uint64_t v166;
  void *v167;
  Class v168;
  id v169;
  Swift::String v170;
  Swift::String_optional v171;
  Swift::String v172;
  uint64_t v173;
  void *v174;
  Class v175;
  id v176;
  Swift::String v177;
  Swift::String_optional v178;
  Swift::String v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  uint64_t v191;
  _BYTE *v192;
  _BYTE *v193;
  char v194;
  objc_class *ObjectType;
  char *v196;
  id v197;
  uint64_t v198;
  objc_super v199;
  Swift::String v200;
  Swift::String v201;
  Swift::String v202;
  Swift::String v203;

  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  p_base_prots = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(_QWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_regularCornerRadius) = 0x4020000000000000;
  *(_OWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize) = xmmword_1DDF37DF0;
  *(_OWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize) = xmmword_1DDF37E00;
  v8 = (char *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_axis) = a1;
  v9 = (_BYTE *)OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_useCapsuleStyle;
  *(_BYTE *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_useCapsuleStyle) = a2;
  v194 = a2;
  if ((a2 & 1) != 0)
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_weight_scale_, 6, 2, 19.0);
LABEL_6:
    v21 = (unint64_t)v10;
    v22 = (void *)MEMORY[0x1DF0E41AC](0x696C612E74786574, 0xEE007466656C6E67);
    v23 = (void *)objc_opt_self();
    v24 = objc_msgSend(v23, sel_systemImageNamed_withConfiguration_, v22, v21);

    if (v24)
    {
      v196 = a1;
      if (a1)
        v25 = 15.0;
      else
        v25 = 0.0;
      if (a1)
        v26 = 0.0;
      else
        v26 = 13.0;
      if (a1)
        v27 = 10.0;
      else
        v27 = 0.0;
      if (a1)
        v28 = 0.0;
      else
        v28 = 10.0;
      v29 = v9[p_base_prots];
      v30 = (objc_class *)type metadata accessor for AttributeStylingButton();
      v31 = objc_allocWithZone(v30);
      v32 = v24;
      v33 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v29 & 1) == 0, v25, v26, v27, v28);
      v34 = *(void **)&v33[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
      *(_QWORD *)&v33[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v24;
      v35 = v32;
      v36 = v33;
      v37 = v35;
      v38 = v36;

      AttributeStylingControl.updateUI()();
      if (one-time initialization token for spacing != -1)
        goto LABEL_78;
      while (1)
      {
        v39 = 0.0;
        objc_msgSend(v38, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        objc_msgSend(v38, sel_setIsAccessibilityElement_, 1);
        v40 = *MEMORY[0x1E0DC4660];
        objc_msgSend(v38, sel_setAccessibilityTraits_, *MEMORY[0x1E0DC4660]);

        v190 = v37;
        *(_QWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton) = v38;
        v41 = (id)v21;
        v42 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000010, 0x80000001DDF4CC90);
        v43 = objc_msgSend(v23, sel_systemImageNamed_withConfiguration_, v42, v41);

        if (!v43)
          goto LABEL_102;
        if (v196)
          v44 = 10.0;
        else
          v44 = 0.0;
        if (!v196)
          v39 = 10.0;
        v193 = v9;
        v45 = &v9[p_base_prots];
        v46 = v9[p_base_prots];
        v47 = objc_allocWithZone(v30);
        v48 = v43;
        v49 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v46 & 1) == 0, v44, v39, v44, v39);
        v50 = *(void **)&v49[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
        *(_QWORD *)&v49[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v43;
        v51 = v48;
        v52 = v49;
        v53 = v51;
        v54 = v52;

        AttributeStylingControl.updateUI()();
        objc_msgSend(v54, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        objc_msgSend(v54, sel_setIsAccessibilityElement_, 1);
        objc_msgSend(v54, sel_setAccessibilityTraits_, v40);

        v189 = v53;
        *(_QWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton) = v54;
        v55 = v41;
        v56 = (void *)MEMORY[0x1DF0E41AC](0x696C612E74786574, 0xEF74686769726E67);
        v57 = objc_msgSend(v23, sel_systemImageNamed_withConfiguration_, v56, v55);

        if (!v57)
          goto LABEL_103;
        v58 = *v45;
        v59 = objc_allocWithZone(v30);
        v60 = v57;
        v61 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v58 & 1) == 0, v44, v39, v44, v39);
        v62 = *(void **)&v61[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
        *(_QWORD *)&v61[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v57;
        v63 = v60;
        v64 = v61;
        v65 = v63;
        v66 = v64;

        AttributeStylingControl.updateUI()();
        v67 = 0.0;
        objc_msgSend(v66, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        objc_msgSend(v66, sel_setIsAccessibilityElement_, 1);
        objc_msgSend(v66, sel_setAccessibilityTraits_, v40);

        v188 = v65;
        *(_QWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton) = v66;
        v68 = v55;
        v69 = (void *)MEMORY[0x1DF0E41AC](0x73756A2E74786574, 0xEC00000079666974);
        v70 = objc_msgSend(v23, sel_systemImageNamed_withConfiguration_, v69, v68);

        v187 = v68;
        if (!v70)
          goto LABEL_104;
        if (v196)
          v71 = 10.0;
        else
          v71 = 0.0;
        if (v196)
          v72 = 0.0;
        else
          v72 = 10.0;
        if (v196)
          v73 = 15.0;
        else
          v73 = 0.0;
        if (!v196)
          v67 = 13.0;
        v74 = v193[p_base_prots];
        v75 = objc_allocWithZone(v30);
        v76 = v70;
        v77 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v74 & 1) == 0, v71, v72, v73, v67);
        v78 = *(void **)&v77[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
        *(_QWORD *)&v77[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v70;
        v79 = v76;
        v80 = v77;
        v81 = v79;
        v82 = v80;

        AttributeStylingControl.updateUI()();
        objc_msgSend(v82, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        objc_msgSend(v82, sel_setIsAccessibilityElement_, 1);
        objc_msgSend(v82, sel_setAccessibilityTraits_, v40);

        v186 = v81;
        *(_QWORD *)(p_base_prots + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton) = v82;

        v199.receiver = (id)p_base_prots;
        v199.super_class = ObjectType;
        v83 = (char *)objc_msgSendSuper2(&v199, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
        objc_msgSend(v83, sel_setClipsToBounds_, 1);
        v84 = objc_msgSend(v83, sel_layer);
        objc_msgSend(v84, sel_setCornerCurve_, *MEMORY[0x1E0CD2A68]);

        v85 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView;
        v86 = *(void **)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView];
        objc_msgSend(v86, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        objc_msgSend(v86, sel_setAxis_, v196);
        objc_msgSend(v86, sel_setAlignment_, 0);
        objc_msgSend(v86, sel_setDistribution_, (v194 & 1) == 0);
        objc_msgSend(v86, sel_setSpacing_, *(double *)&static AttributeStylingButton.spacing);
        objc_msgSend(v83, sel_addSubview_, v86);
        v87 = (_BYTE *)objc_opt_self();
        v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v89 = swift_allocObject();
        v191 = 4;
        *(_OWORD *)(v89 + 16) = xmmword_1DDF329D0;
        v90 = objc_msgSend(v86, sel_topAnchor);
        v91 = objc_msgSend(v83, sel_topAnchor);
        v92 = objc_msgSend(v90, sel_constraintEqualToAnchor_, v91);

        *(_QWORD *)(v89 + 32) = v92;
        v93 = objc_msgSend(*(id *)&v83[v85], sel_leadingAnchor);
        v94 = objc_msgSend(v83, sel_leadingAnchor);
        v95 = objc_msgSend(v93, sel_constraintEqualToAnchor_, v94);

        *(_QWORD *)(v89 + 40) = v95;
        v96 = objc_msgSend(*(id *)&v83[v85], sel_trailingAnchor);
        v97 = objc_msgSend(v83, sel_trailingAnchor);
        v98 = objc_msgSend(v96, sel_constraintEqualToAnchor_, v97);

        *(_QWORD *)(v89 + 48) = v98;
        v99 = objc_msgSend(*(id *)&v83[v85], sel_bottomAnchor);
        v100 = objc_msgSend(v83, sel_bottomAnchor);
        v101 = objc_msgSend(v99, sel_constraintEqualToAnchor_, v100);

        *(_QWORD *)(v89 + 56) = v101;
        v198 = v89;
        specialized Array._endMutation()();
        v194 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v192 = v87;
        objc_msgSend(v87, sel_activateConstraints_, isa);

        ObjectType = (objc_class *)v85;
        v103 = *(void **)&v83[v85];
        v185 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(_QWORD *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton]);
        v104 = (uint64_t *)OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(_QWORD *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton]);
        v105 = (char *)OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(_QWORD *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton]);
        v9 = (_BYTE *)OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(_QWORD *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton]);
        v106 = &selRef_setCanvasWidth_;
        v107 = objc_msgSend(v103, sel_arrangedSubviews);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v108 >> 62)
        {
          swift_bridgeObjectRetain();
          v182 = _CocoaArrayWrapper.endIndex.getter();
          v109 = swift_bridgeObjectRelease();
          v23 = v196;
          if (!v182)
          {
LABEL_80:
            swift_bridgeObjectRelease();
            __break(1u);
LABEL_81:
            v110 = (char *)MEMORY[0x1DF0E4D64](0, v108);
            goto LABEL_44;
          }
        }
        else
        {
          v23 = v196;
          if (!*(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_80;
        }
        v184 = v105;
        if ((v108 & 0xC000000000000001) != 0)
          goto LABEL_81;
        if (!*(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_84;
        v110 = (char *)*(id *)(v108 + 32);
LABEL_44:
        v105 = v110;
        swift_bridgeObjectRelease();
        v111 = objc_msgSend(*(id *)((char *)ObjectType + (_QWORD)v83), sel_arrangedSubviews);
        v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v108 >> 62)
        {
          swift_bridgeObjectRetain();
          p_base_prots = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!p_base_prots)
          {
LABEL_83:
            v109 = swift_bridgeObjectRelease();
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            v112 = (id)MEMORY[0x1DF0E4D64](v109, v108);
            goto LABEL_51;
          }
        }
        else
        {
          p_base_prots = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!p_base_prots)
            goto LABEL_83;
        }
        v109 = p_base_prots - 1;
        if (__OFSUB__(p_base_prots, 1))
          goto LABEL_85;
        v193 = v9;
        v183 = v104;
        if ((v108 & 0xC000000000000001) != 0)
          goto LABEL_86;
        if ((v109 & 0x8000000000000000) != 0)
        {
          __break(1u);
          goto LABEL_88;
        }
        if (v109 >= *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_99;
        v112 = *(id *)(v108 + 8 * v109 + 32);
LABEL_51:
        v113 = v112;
        swift_bridgeObjectRelease();
        v114 = swift_allocObject();
        *(_OWORD *)(v114 + 16) = xmmword_1DDF329D0;
        v115 = objc_msgSend(v105, sel_widthAnchor);
        v116 = v115;
        v104 = &demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0;
        v117 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (v23)
          v117 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize + 8];
        p_base_prots = (Swift::Int)&MiniMenuController.base_prots;
        v118 = objc_msgSend(v115, sel_constraintEqualToConstant_, *v117);

        *(_QWORD *)(v114 + 32) = v118;
        v196 = v105;
        v119 = objc_msgSend(v105, sel_heightAnchor);
        v120 = v119;
        v121 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (!v23)
          ++v121;
        v122 = objc_msgSend(v119, sel_constraintEqualToConstant_, *v121);

        *(_QWORD *)(v114 + 40) = v122;
        v123 = objc_msgSend(v113, sel_widthAnchor);
        v124 = v123;
        v125 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (v23)
          ++v125;
        v126 = objc_msgSend(v123, sel_constraintEqualToConstant_, *v125);

        *(_QWORD *)(v114 + 48) = v126;
        v191 = (uint64_t)v113;
        v127 = objc_msgSend(v113, sel_heightAnchor);
        v128 = v127;
        v129 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (!v23)
          ++v129;
        v130 = objc_msgSend(v127, sel_constraintEqualToConstant_, *v129);

        *(_QWORD *)(v114 + 56) = v130;
        v198 = v114;
        specialized Array._endMutation()();
        v131 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v9 = v192;
        objc_msgSend(v192, sel_activateConstraints_, v131);

        v132 = objc_msgSend(*(id *)((char *)ObjectType + (_QWORD)v83), sel_arrangedSubviews);
        v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v106 = (char **)(v108 >> 62);
        if (!(v108 >> 62))
        {
          v133 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v133 >= 1)
            v88 = 1;
          else
            v88 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v133 < (unint64_t)v88)
            goto LABEL_98;
          goto LABEL_64;
        }
LABEL_88:
        if ((v108 & 0x8000000000000000) != 0)
          p_base_prots = v108;
        else
          p_base_prots = v108 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v133 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v133 < 0)
          goto LABEL_107;
        if (v133 >= 1)
          v88 = 1;
        else
          v88 = v133;
        swift_bridgeObjectRetain();
        v104 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((uint64_t)v104 < v88)
          goto LABEL_98;
        swift_bridgeObjectRetain();
        v104 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((uint64_t)v104 < v133)
        {
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          swift_once();
LABEL_76:
          v156._countAndFlagsBits = p_base_prots - 5;
          v200._countAndFlagsBits = p_base_prots + 32;
          v200._object = (void *)0x80000001DDF52340;
          v156._object = (void *)0x80000001DDF52320;
          v157.value._countAndFlagsBits = 0x617A696C61636F4CLL;
          v157.value._object = (void *)0xEB00000000656C62;
          v158._countAndFlagsBits = 0;
          v158._object = (void *)0xE000000000000000;
          countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v156, v157, paperKitBundle, v158, v200)._countAndFlagsBits;
          v160 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
          swift_bridgeObjectRelease();
          objc_msgSend(v106, sel_setAccessibilityLabel_, v160);

          v161 = paperKitBundle.super.isa;
          v162 = *(id *)((char *)v104 + (_QWORD)v83);
          v163._countAndFlagsBits = p_base_prots - 3;
          v201._countAndFlagsBits = p_base_prots + 34;
          v201._object = (void *)0x80000001DDF523A0;
          v163._object = (void *)0x80000001DDF52380;
          v164.value._countAndFlagsBits = 0x617A696C61636F4CLL;
          v164.value._object = (void *)0xEB00000000656C62;
          v165._countAndFlagsBits = 0;
          v165._object = (void *)0xE000000000000000;
          v166 = NSLocalizedString(_:tableName:bundle:value:comment:)(v163, v164, (NSBundle)v161, v165, v201)._countAndFlagsBits;
          v167 = (void *)MEMORY[0x1DF0E41AC](v166);
          swift_bridgeObjectRelease();
          objc_msgSend(v162, sel_setAccessibilityLabel_, v167);

          v168 = paperKitBundle.super.isa;
          v169 = *(id *)&v83[v88];
          v170._countAndFlagsBits = p_base_prots - 4;
          v202._countAndFlagsBits = p_base_prots + 33;
          v202._object = (void *)0x80000001DDF52400;
          v170._object = (void *)0x80000001DDF523E0;
          v171.value._countAndFlagsBits = 0x617A696C61636F4CLL;
          v171.value._object = (void *)0xEB00000000656C62;
          v172._countAndFlagsBits = 0;
          v172._object = (void *)0xE000000000000000;
          v173 = NSLocalizedString(_:tableName:bundle:value:comment:)(v170, v171, (NSBundle)v168, v172, v202)._countAndFlagsBits;
          v174 = (void *)MEMORY[0x1DF0E41AC](v173);
          swift_bridgeObjectRelease();
          objc_msgSend(v169, sel_setAccessibilityLabel_, v174);

          v175 = paperKitBundle.super.isa;
          v176 = *(id *)&v193[(_QWORD)v83];
          v203._countAndFlagsBits = p_base_prots + 37;
          v203._object = (void *)0x80000001DDF52460;
          v177._object = (void *)0x80000001DDF52440;
          v177._countAndFlagsBits = 0xD000000000000018;
          v178.value._countAndFlagsBits = 0x617A696C61636F4CLL;
          v178.value._object = (void *)0xEB00000000656C62;
          v179._countAndFlagsBits = 0;
          v179._object = (void *)0xE000000000000000;
          v180 = NSLocalizedString(_:tableName:bundle:value:comment:)(v177, v178, (NSBundle)v175, v179, v203)._countAndFlagsBits;
          v181 = (void *)MEMORY[0x1DF0E41AC](v180);
          swift_bridgeObjectRelease();
          objc_msgSend(v176, sel_setAccessibilityLabel_, v181);

          TextAlignmentControl.updateUI()();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          return;
        }
LABEL_64:
        if ((v108 & 0xC000000000000001) != 0 && (unint64_t)v133 >= 2)
        {
          v134 = v88;
          do
          {
            p_base_prots = v134 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v134);
            v134 = p_base_prots;
          }
          while (v133 != p_base_prots);
        }
        if (v106)
        {
          swift_bridgeObjectRetain();
          v135 = _CocoaArrayWrapper.subscript.getter();
          v136 = v137;
          v88 = v138;
          v21 = v139;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v135 = v108 & 0xFFFFFFFFFFFFFF8;
          v136 = (v108 & 0xFFFFFFFFFFFFFF8) + 32;
          v21 = (2 * v133) | 1;
        }
        v30 = (objc_class *)specialized Collection.dropLast(_:)(1, v135, v136, v88, v21);
        v198 = MEMORY[0x1E0DEE9D8];
        v143 = (_BYTE *)(v142 >> 1);
        if (v141 == v142 >> 1)
        {
LABEL_75:
          swift_bridgeObjectRetain();
          v145 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v9, sel_activateConstraints_, v145);

          v146 = *(void **)&v83[v185];
          objc_msgSend(v146, sel_addTarget_action_forControlEvents_, v83, sel_didTapLeftAlignmentButton, 64);
          v104 = v183;
          objc_msgSend(*(id *)((char *)v183 + (_QWORD)v83), sel_addTarget_action_forControlEvents_, v83, sel_didTapCenterAlignmentButton, 64);
          v88 = (uint64_t)v184;
          objc_msgSend(*(id *)&v184[(_QWORD)v83], sel_addTarget_action_forControlEvents_, v83, sel_didTapRightAlignmentButton, 64);
          objc_msgSend(*(id *)&v193[(_QWORD)v83], sel_addTarget_action_forControlEvents_, v83, sel_didTapJustifiedAlignmentButton, 64);
          v147 = v146;
          p_base_prots = 0xD000000000000018;
          v148 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF522A0);
          objc_msgSend(v147, sel_setAccessibilityIdentifier_, v148);

          v149 = *(id *)((char *)v183 + (_QWORD)v83);
          v150 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000019, 0x80000001DDF522C0);
          objc_msgSend(v149, sel_setAccessibilityIdentifier_, v150);

          v151 = *(id *)&v184[(_QWORD)v83];
          v152 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF522E0);
          objc_msgSend(v151, sel_setAccessibilityIdentifier_, v152);

          v153 = *(id *)&v193[(_QWORD)v83];
          v154 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ALL, 0x80000001DDF52300);
          objc_msgSend(v153, sel_setAccessibilityIdentifier_, v154);

          v155 = one-time initialization token for paperKitBundle;
          v106 = (char **)*(id *)&v83[v185];
          if (v155 != -1)
            goto LABEL_100;
          goto LABEL_76;
        }
        v38 = v140;
        v37 = 0;
        while (v141 < (uint64_t)v143)
        {
          v21 = v23 == 0;
          p_base_prots = v141 + 1;
          v197 = *(id *)&v38[8 * v141];
          v144 = v197;
          closure #1 in TextAlignmentControl.init(axis:useCapsuleStyle:)(&v197, &v198, v23 == 0, (uint64_t)v83);

          v141 = p_base_prots;
          if (v143 == (_BYTE *)p_base_prots)
            goto LABEL_75;
        }
        __break(1u);
LABEL_78:
        swift_once();
      }
    }
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  v11 = v9;
  v12 = *MEMORY[0x1E0DC4A88];
  v13 = *MEMORY[0x1E0DC1448];
  v14 = (void *)*MEMORY[0x1E0DC4920];
  v15 = (void *)objc_opt_self();
  v16 = v14;
  v17 = objc_msgSend(v15, sel_traitCollectionWithPreferredContentSizeCategory_, v16);
  v18 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v12, v13);
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v17);

    if (!v20)
      goto LABEL_106;
    v10 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, v20, 2);

    v9 = v11;
    goto LABEL_6;
  }
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = v6 - result;
  if (__OFSUB__(v6, result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 < 1)
  {
    v7 = 0;
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = a5 >> 1;
    if (v6 < v7)
    {
LABEL_10:
      if (v8 >= a4)
      {
        if (v5 >= a4)
        {
          if (v5 >= v8)
          {
            if ((v8 & 0x8000000000000000) == 0)
              return a2;
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  v8 = a4 + v7;
  if (!__OFADD__(a4, v7))
    goto LABEL_10;
LABEL_22:
  __break(1u);
  return result;
}

void closure #1 in TextAlignmentControl.init(axis:useCapsuleStyle:)(id *a1, _QWORD *a2, char a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  double *v10;
  id v11;
  id v12;
  void *v13;
  double *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v7 = *a1;
  v8 = objc_msgSend(*a1, sel_widthAnchor);
  v9 = v8;
  v10 = (double *)(a4 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize);
  if ((a3 & 1) == 0)
    v10 = (double *)(a4 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize + 8);
  v11 = objc_msgSend(v8, sel_constraintEqualToConstant_, *v10);

  v12 = objc_msgSend(v7, sel_heightAnchor);
  v13 = v12;
  v14 = (double *)(a4 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize);
  if ((a3 & 1) != 0)
    ++v14;
  v15 = objc_msgSend(v12, sel_constraintEqualToConstant_, *v14);

  if (*a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v17 = v19 + 2;
    if (!__OFADD__(v19, 2))
    {
LABEL_7:
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v17, 1);
      specialized Array._endMutation()();
      v11 = v11;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else
  {
    v16 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = v16 + 2;
    if (!__OFADD__(v16, 2))
      goto LABEL_7;
  }
  __break(1u);
LABEL_14:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_8:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v18 = v15;
  MEMORY[0x1DF0E4398]();
  if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

}

id TextAlignmentControl.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  void *v6;
  id result;
  objc_super *v8;
  void *v9;
  void *v10;
  void *v11;
  objc_super v12;
  objc_super v13;
  objc_super v14;
  objc_super v15;
  objc_super v16;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton);
  v3 = (objc_class *)type metadata accessor for AttributeStylingButton();
  v16.receiver = v2;
  v16.super_class = v3;
  objc_msgSendSuper2(&v16, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  v4 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton);
  v15.receiver = v4;
  v15.super_class = v3;
  objc_msgSendSuper2(&v15, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  v5 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton);
  v14.receiver = v5;
  v14.super_class = v3;
  objc_msgSendSuper2(&v14, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  v6 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton);
  v13.receiver = v6;
  v13.super_class = v3;
  objc_msgSendSuper2(&v13, sel_setSelected_, 0);
  result = AttributeStylingButton.isSelected.didset();
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment + 8) & 1) == 0)
  {
    switch(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment))
    {
      case 0:
        v9 = v2;
        v8 = (objc_super *)&v9;
        goto LABEL_7;
      case 1:
        v10 = v4;
        v8 = (objc_super *)&v10;
        goto LABEL_7;
      case 2:
        v11 = v5;
        v8 = (objc_super *)&v11;
        goto LABEL_7;
      case 3:
        v12.receiver = v6;
        v8 = &v12;
LABEL_7:
        v8->super_class = v3;
        -[objc_super setSelected:](v8, sel_setSelected_, 1, v9);
        result = AttributeStylingButton.isSelected.didset();
        break;
      default:
        return result;
    }
  }
  return result;
}

Swift::Void __swiftcall TextAlignmentControl.layoutSubviews()()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  double Width;
  double v8;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_layoutSubviews);
  v1 = objc_msgSend(v0, sel_layer);
  if (v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_useCapsuleStyle] == 1)
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_axis];
    objc_msgSend(v0, sel_bounds);
    if (v2)
      Width = CGRectGetWidth(*(CGRect *)&v3);
    else
      Width = CGRectGetHeight(*(CGRect *)&v3);
    v8 = Width * 0.5;
  }
  else
  {
    v8 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_regularCornerRadius];
  }
  objc_msgSend(v1, sel_setCornerRadius_, v8);

}

uint64_t type metadata accessor for TextAlignmentControl()
{
  return objc_opt_self();
}

uint64_t protocol witness for TextAlignmentWidget.selectedTextAlignment.getter in conformance TextAlignmentControl()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment);
}

id protocol witness for TextAlignmentWidget.selectedTextAlignment.setter in conformance TextAlignmentControl(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment;
  *(_QWORD *)v3 = a1;
  *(_BYTE *)(v3 + 8) = a2 & 1;
  return TextAlignmentControl.updateUI()();
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x1DF0E4D70](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

void specialized TextAlignmentControl.init(coder:)()
{
  char *v0;
  uint64_t v1;
  char *v2;

  v1 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_regularCornerRadius] = 0x4020000000000000;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize] = xmmword_1DDF37DF0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize] = xmmword_1DDF37E00;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PKDrawingUUIDKeyPath.aes128Key.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for Insecure.MD5();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9A18];
  MEMORY[0x1E0C80A78](v0, v2);
  v3 = type metadata accessor for Insecure.MD5Digest();
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  MEMORY[0x1DF0E3D44](v5);
  v7 = v6;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, 255, v1, MEMORY[0x1E0CA9A10]);
  dispatch thunk of HashFunction.init()();
  __asm { BR              X10 }
}

uint64_t sub_1DDC2FC8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;

  *(_QWORD *)(v7 - 128) = v4;
  *(_WORD *)(v7 - 120) = v5;
  *(_BYTE *)(v7 - 118) = BYTE2(v5);
  *(_BYTE *)(v7 - 117) = BYTE3(v5);
  *(_BYTE *)(v7 - 116) = BYTE4(v5);
  *(_BYTE *)(v7 - 115) = BYTE5(v5);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  outlined consume of Data._Representation(v4, v5);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8))(v3, v2);
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(v7 - 104) = v0;
  *(_QWORD *)(v7 - 96) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Insecure.MD5Digest and conformance Insecure.MD5Digest, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9A48], MEMORY[0x1E0CA9A38]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 - 128));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v1, v0);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 128), *(_QWORD *)(v7 - 104));
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  v9 = *(_QWORD *)(v7 - 144);
  __swift_destroy_boxed_opaque_existential_1(v7 - 128);
  return v9;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

void specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1DDC30018
     + dword_1DDC3024C[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1DDC30028()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  outlined copy of Data._Representation(v1, v0);
  closure #1 in Data.init<A>(_:)(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  outlined consume of Data._Representation(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t PKDrawingUUIDKeyPath.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _BYTE v40[24];
  uint64_t v41;

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v38 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v36 - v16;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v36 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v23((char *)&v36 - v21, v1 + OBJC_IVAR____TtC8PaperKit20PKDrawingUUIDKeyPath_keypath, v3, v20);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v24(v22, 0, 1, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v40, &demangling cache variable for type metadata for Any?);
  if (v41)
  {
    type metadata accessor for PKDrawingUUIDKeyPath();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v25 = v39;
      ((void (*)(char *, char *, uint64_t))v23)(v17, &v39[OBJC_IVAR____TtC8PaperKit20PKDrawingUUIDKeyPath_keypath], v3);

      v26 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, &demangling cache variable for type metadata for Any?);
  }
  v26 = 1;
LABEL_6:
  v24(v17, v26, 1, v3);
  v27 = (uint64_t)&v10[*(int *)(v7 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, v27, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v28((uint64_t)v10, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v29 = v28(v27, 1, v3);
    if (v29 == 1)
      v30 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    else
      v30 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    if (v29 == 1)
      v31 = -1;
    else
      v31 = 0;
  }
  else
  {
    v32 = v38;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, v38, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v28(v27, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v32, v3);
      v31 = 0;
      v30 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      v33 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v37, v27, v3);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v34 = *(void (**)(char *, uint64_t))(v4 + 8);
      v34(v33, v3);
      v30 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v34((char *)v32, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, v30);
  return v31 & 1;
}

id PKDrawingUUIDKeyPath.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKDrawingUUIDKeyPath();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeMaskWrapper(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16);
}

uint64_t PKStrokeMaskStruct.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;

  v5 = objc_allocWithZone(MEMORY[0x1E0CD1228]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
  outlined consume of Data._Representation(a1, a2);

  if (v7)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v2 + 16) = v8;
  }
  else
  {
    type metadata accessor for PKStrokeMaskStruct();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t PKStrokeMaskStruct.rawValue.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 16), sel_rawValue);
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t PKStrokeMaskStruct.__allocating_init(from:)(_QWORD *a1)
{
  return specialized PKStrokeMaskStruct.__allocating_init(from:)(a1);
}

uint64_t PKStrokeMaskStruct.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v7[24];
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + 16) + 16), sel_rawValue);
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  outlined consume of Data._Representation(v3, v5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t PKStrokeMaskStruct.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PKStrokeMaskStruct.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PKStrokeMaskStruct@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized PKStrokeMaskStruct.__allocating_init(rawValue:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKStrokeMaskStruct(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 16), sel_rawValue);
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeMaskStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CRCodable.init(from:) in conformance PKStrokeMaskStruct(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeMaskStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CRCodable.encode(to:) in conformance PKStrokeMaskStruct(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeMaskStruct(uint64_t a1, uint64_t a2)
{
  return protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeMaskStruct(a1, a2, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeMaskStruct(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKStrokeMaskStruct@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized PKStrokeMaskStruct.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKStrokeMaskStruct(_QWORD *a1)
{
  return PKStrokeMaskStruct.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeMaskStruct@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeMaskStruct()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for PKStrokeMaskStruct();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, v0, (uint64_t (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, v1, (uint64_t (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
  return CRValue<>.observableDifference(from:with:)();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance PKInk(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  Class isa;
  id v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
  outlined consume of Data._Representation(v3, v4);

  *a2 = v7;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKInk(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, sel_rawValue);
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKInk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CRCodable.init(from:) in conformance PKStrokeMaskStruct(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PKInk, (uint64_t)&protocol conformance descriptor for PKInk);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeMaskStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1DF0E6450](a4);
  MEMORY[0x1DF0E6450](a5, a2);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKInk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CRCodable.encode(to:) in conformance PKStrokeMaskStruct(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PKInk, (uint64_t)&protocol conformance descriptor for PKInk);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeMaskStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1DF0E6450](a4);
  MEMORY[0x1DF0E6450](a5, a2);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKInk(uint64_t a1, uint64_t a2)
{
  return protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeMaskStruct(a1, a2, (uint64_t)&protocol conformance descriptor for PKInk, (uint64_t)&protocol conformance descriptor for PKInk);
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeMaskStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1DF0E6450](a3, a1);
  MEMORY[0x1DF0E6450](a4, a1);
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKInk()
{
  type metadata accessor for PKInk();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type PKInk and conformance PKInk, 255, (uint64_t (*)(uint64_t))type metadata accessor for PKInk, (uint64_t)&protocol conformance descriptor for PKInk);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PKInk and conformance NSObject, 255, (uint64_t (*)(uint64_t))type metadata accessor for PKInk, MEMORY[0x1E0DEFD00]);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t CGRect.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[40];

  specialized CGRect.init(rawValue:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  return outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v7, a3, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t CGRect.rawValue.getter(double a1, double a2, double a3, double a4)
{
  _QWORD v8[4];
  uint64_t v9;

  v8[0] = _OSSwapInt64(*(unint64_t *)&a1);
  v8[1] = _OSSwapInt64(*(unint64_t *)&a2);
  v8[2] = _OSSwapInt64(*(unint64_t *)&a3);
  v8[3] = _OSSwapInt64(*(unint64_t *)&a4);
  return specialized Data.init<A>(_:)((uint64_t)v8, (uint64_t)&v9);
}

BOOL CGRect.isDefaultState.getter(double a1, double a2, double a3, double a4)
{
  CGRect v5;

  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  v5.size.width = 0.0;
  v5.size.height = 0.0;
  return CGRectEqualToRect(*(CGRect *)&a1, v5);
}

double CGRect.init(defaultState:)()
{
  return 0.0;
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGRect()
{
  CGRect *v0;
  CGRect v2;

  v2.origin.x = 0.0;
  v2.origin.y = 0.0;
  v2.size.width = 0.0;
  v2.size.height = 0.0;
  return CGRectEqualToRect(*v0, v2);
}

double protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance CGRect@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CGRect@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  _BYTE v6[40];

  v3 = *a1;
  v4 = a1[1];
  specialized CGRect.init(rawValue:)(*a1, v4);
  outlined consume of Data._Representation(v3, v4);
  return outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v6, a2, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CGRect@<X0>(uint64_t *a1@<X8>)
{
  double *v1;
  uint64_t result;
  uint64_t v4;

  result = CGRect.rawValue.getter(*v1, v1[1], v1[2], v1[3]);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGRect()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9D0]);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGRect()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGRect()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGRect()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  return CRValue<>.minEncodingVersion.getter();
}

double CGPoint.init(defaultState:)()
{
  return 0.0;
}

void protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance CGPoint(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGPoint()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA28]);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGPoint()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGPoint()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGPoint()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t CGPoint.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  specialized CGPoint.init(rawValue:)(a1, a2);
  v5 = v4;
  outlined consume of Data._Representation(a1, a2);
  return v5;
}

uint64_t CGPoint.rawValue.getter(double a1, double a2)
{
  _QWORD v4[2];
  uint64_t v5;

  v4[0] = _OSSwapInt64(*(unint64_t *)&a1);
  v4[1] = _OSSwapInt64(*(unint64_t *)&a2);
  return specialized Data.init<A>(_:)((uint64_t)v4, (uint64_t)&v5);
}

BOOL CGSize.isDefaultState.getter(double a1, double a2)
{
  return a2 == 0.0 && a1 == 0.0;
}

double CGSize.init(defaultState:)()
{
  return 0.0;
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGSize()
{
  double *v0;

  return v0[1] == 0.0 && *v0 == 0.0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CGPoint@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  specialized CGPoint.init(rawValue:)(*a1, v4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  result = outlined consume of Data._Representation(v3, v4);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CGPoint@<X0>(uint64_t *a1@<X8>)
{
  double *v1;
  double v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;

  v3 = v1[1];
  v6[0] = CFConvertDoubleHostToSwapped(*v1);
  v6[1] = CFConvertDoubleHostToSwapped(v3);
  result = specialized Data.init<A>(_:)((uint64_t)v6, (uint64_t)&v7);
  *a1 = result;
  a1[1] = v5;
  return result;
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance CGSize@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGSize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA00]);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGSize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGSize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGSize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  return CRValue<>.minEncodingVersion.getter();
}

double CGFloat.init(from:)()
{
  uint64_t v0;
  double v1;
  double v3;

  dispatch thunk of CRDecoder.valueContainer()();
  if (!v0)
  {
    dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
    v1 = v3;
    swift_release();
  }
  swift_release();
  return v1;
}

uint64_t CGFloat.encode(to:)()
{
  return Double.encode(to:)();
}

BOOL CGFloat.isDefaultState.getter(double a1)
{
  return a1 == 0.0;
}

double CGFloat.init(defaultState:)()
{
  return 0.0;
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGFloat()
{
  double *v0;

  return *v0 == 0.0;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGFloat()
{
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGFloat@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  dispatch thunk of CRDecoder.valueContainer()();
  if (v1)
    return swift_release();
  dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  v4 = v3;
  swift_release();
  result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGFloat()
{
  return Double.encode(to:)();
}

uint64_t CGAffineTransform.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[56];

  specialized CGAffineTransform.init(rawValue:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  return outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v7, a3, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
}

uint64_t CGAffineTransform.rawValue.getter()
{
  unint64_t *v0;
  _QWORD v2[6];
  uint64_t v3;

  v2[0] = _OSSwapInt64(*v0);
  v2[1] = _OSSwapInt64(v0[1]);
  v2[2] = _OSSwapInt64(v0[2]);
  v2[3] = _OSSwapInt64(v0[3]);
  v2[4] = _OSSwapInt64(v0[4]);
  v2[5] = _OSSwapInt64(v0[5]);
  return specialized Data.init<A>(_:)((uint64_t)v2, (uint64_t)&v3);
}

uint64_t CGAffineTransform.isDefaultState.getter()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

void CGAffineTransform.init(defaultState:)(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGAffineTransform()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

void protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance CGAffineTransform(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CGAffineTransform@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  _BYTE v6[56];

  v3 = *a1;
  v4 = a1[1];
  specialized CGAffineTransform.init(rawValue:)(*a1, v4);
  outlined consume of Data._Representation(v3, v4);
  return outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v6, a2, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CGAffineTransform@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CGAffineTransform.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance CGAffineTransform@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGAffineTransform()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E0C9B9A8]);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGAffineTransform()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGAffineTransform()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGAffineTransform()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  return CRValue<>.minEncodingVersion.getter();
}

PaperKit::PKStrokeClipPlane __swiftcall PKStrokeClipPlane.init(origin:normal:)(CGPoint origin, CGPoint normal)
{
  CGFloat *v2;
  PaperKit::PKStrokeClipPlane result;

  *v2 = origin.x;
  v2[1] = origin.y;
  v2[2] = normal.x;
  v2[3] = normal.y;
  result.normal.y = normal.y;
  result.normal.x = normal.x;
  result.origin.y = origin.y;
  result.origin.x = origin.x;
  return result;
}

void PKStrokeClipPlane.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1DDC320F4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;

  if (BYTE6(v2) != 32)
  {
    result = outlined consume of Data._Representation(v3, v2);
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_BYTE *)(v1 + 32) = 1;
    return result;
  }
  if (!a1)
  {
    v33 = (_QWORD *)v3;
    v34 = v2;
    v35 = BYTE2(v2);
    v36 = BYTE3(v2);
    v37 = BYTE4(v2);
    v10 = (v2 >> 51) & 0x1F;
    v38 = BYTE5(v2);
    v9 = (char *)&v33;
    goto LABEL_22;
  }
  if (a1 != 1)
  {
    v12 = *(_QWORD *)(v3 + 16);
    v13 = *(_QWORD *)(v3 + 24);
    swift_retain();
    swift_retain();
    v14 = (char *)__DataStorage._bytes.getter();
    if (v14)
    {
      v15 = __DataStorage._offset.getter();
      if (__OFSUB__(v12, v15))
        goto LABEL_42;
      v14 += v12 - v15;
    }
    v16 = __OFSUB__(v13, v12);
    v17 = v13 - v12;
    if (!v16)
    {
      v18 = __DataStorage._length.getter();
      if (v14)
      {
        if (v18 >= v17)
          v19 = v17;
        else
          v19 = v18;
        v20 = v19 / 8;
      }
      else
      {
        v20 = 0;
      }
      v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v14, v20);
      swift_release();
      swift_release();
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
        goto LABEL_23;
LABEL_34:
      swift_bridgeObjectRelease();
      v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v28 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v28)
        goto LABEL_28;
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    goto LABEL_40;
  }
  if (v3 >> 32 < (int)v3)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
  v4 = __DataStorage._bytes.getter();
  if (!v4)
  {
    __DataStorage._length.getter();
    v9 = 0;
    v10 = 0;
    goto LABEL_22;
  }
  v5 = v4;
  v6 = __DataStorage._offset.getter();
  v7 = (int)v3 - v6;
  if (__OFSUB__((int)v3, v6))
    goto LABEL_41;
  v8 = __DataStorage._length.getter();
  v9 = (char *)(v5 + v7);
  if (v8 >= (v3 >> 32) - (int)v3)
    v8 = (v3 >> 32) - (int)v3;
  v10 = v8 / 8;
LABEL_22:
  v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v10);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    goto LABEL_34;
LABEL_23:
  v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
  v23 = 0;
  v24 = v33;
  do
  {
    v25 = _OSSwapInt64(*(_QWORD *)(v21 + 8 * v23 + 32));
    v33 = v24;
    v27 = v24[2];
    v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      v24 = v33;
    }
    ++v23;
    v24[2] = v27 + 1;
    v24[v27 + 4] = v25;
  }
  while (v22 != v23);
  swift_bridgeObjectRelease();
  v28 = v24[2];
  if (!v28)
    goto LABEL_35;
LABEL_28:
  if (v28 == 1)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v28 < 3)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v28 == 3)
  {
LABEL_38:
    __break(1u);
    JUMPOUT(0x1DDC323F0);
  }
  v29 = v24[4];
  v30 = v24[5];
  v31 = v24[6];
  v32 = v24[7];
  swift_bridgeObjectRelease();
  result = outlined consume of Data._Representation(v3, v2);
  *(_QWORD *)v1 = v29;
  *(_QWORD *)(v1 + 8) = v30;
  *(_QWORD *)(v1 + 16) = v31;
  *(_QWORD *)(v1 + 24) = v32;
  *(_BYTE *)(v1 + 32) = 0;
  return result;
}

uint64_t PKStrokeClipPlane.rawValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[4];
  uint64_t v6;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[1];
  v5[0] = _OSSwapInt64(*v0);
  v5[1] = _OSSwapInt64(v3);
  v5[2] = _OSSwapInt64(v1);
  v5[3] = _OSSwapInt64(v2);
  return specialized Data.init<A>(_:)((uint64_t)v5, (uint64_t)&v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PKStrokeClipPlane.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C616D726F6ELL;
  else
    return 0x6E696769726FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PKStrokeClipPlane.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PKStrokeClipPlane.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PKStrokeClipPlane.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance PKStrokeClipPlane.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PKStrokeClipPlane.CodingKeys()
{
  lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PKStrokeClipPlane.CodingKeys()
{
  lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PKStrokeClipPlane.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PKStrokeClipPlane.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = v9;
  v17 = v10;
  v15 = 0;
  type metadata accessor for CGPoint(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA20]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v16 = v11;
    v17 = v12;
    v15 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t PKStrokeClipPlane.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<PKStrokeClipPlane.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    v14 = 0;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA30]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v13;
    v14 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v11 = v13;
    *a2 = v10;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKStrokeClipPlane@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return PKStrokeClipPlane.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKStrokeClipPlane(_QWORD *a1)
{
  return PKStrokeClipPlane.encode(to:)(a1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance PKStrokeClipPlane(uint64_t *a1)
{
  PKStrokeClipPlane.init(rawValue:)(*a1, a1[1]);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PKStrokeClipPlane@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PKStrokeClipPlane.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKStrokeClipPlane()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  v0 = PKStrokeClipPlane.rawValue.getter();
  v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PKStrokeClipPlane()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = PKStrokeClipPlane.rawValue.getter();
  v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKStrokeClipPlane()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  v0 = PKStrokeClipPlane.rawValue.getter();
  v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeClipPlane@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeClipPlane()
{
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeClipPlane()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = PKStrokeClipPlane.rawValue.getter();
  v2 = v1;
  v3 = PKStrokeClipPlane.rawValue.getter();
  v5 = v4;
  specialized static Data.== infix(_:_:)(v0, v2);
  v7 = v6;
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v7 & 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeClipPlane()
{
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeClipPlane()
{
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeClipPlane()
{
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  return CRValue<>.minEncodingVersion.getter();
}

void Quad.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1DDC32C74@<X0>(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  char v42;

  if (BYTE6(v2) != 64)
  {
    result = outlined consume of Data._Representation(v3, v2);
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_BYTE *)(v1 + 64) = 1;
    return result;
  }
  if (!a1)
  {
    v37 = (_QWORD *)v3;
    v38 = v2;
    v39 = BYTE2(v2);
    v40 = BYTE3(v2);
    v41 = BYTE4(v2);
    v10 = (v2 >> 51) & 0x1F;
    v42 = BYTE5(v2);
    v9 = (char *)&v37;
    goto LABEL_22;
  }
  if (a1 != 1)
  {
    v12 = *(_QWORD *)(v3 + 16);
    v13 = *(_QWORD *)(v3 + 24);
    swift_retain();
    swift_retain();
    v14 = (char *)__DataStorage._bytes.getter();
    if (v14)
    {
      v15 = __DataStorage._offset.getter();
      if (__OFSUB__(v12, v15))
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v14 += v12 - v15;
    }
    v16 = __OFSUB__(v13, v12);
    v17 = v13 - v12;
    if (!v16)
    {
      v18 = __DataStorage._length.getter();
      if (v14)
      {
        if (v18 >= v17)
          v19 = v17;
        else
          v19 = v18;
        v20 = v19 / 8;
      }
      else
      {
        v20 = 0;
      }
      v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v14, v20);
      swift_release();
      swift_release();
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
        goto LABEL_23;
LABEL_38:
      swift_bridgeObjectRelease();
      v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v28 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v28)
        goto LABEL_28;
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v3 >> 32 < (int)v3)
  {
    __break(1u);
    goto LABEL_48;
  }
  v4 = __DataStorage._bytes.getter();
  if (!v4)
  {
    __DataStorage._length.getter();
    v9 = 0;
    v10 = 0;
    goto LABEL_22;
  }
  v5 = v4;
  v6 = __DataStorage._offset.getter();
  v7 = (int)v3 - v6;
  if (__OFSUB__((int)v3, v6))
LABEL_50:
    __break(1u);
  v8 = __DataStorage._length.getter();
  v9 = (char *)(v5 + v7);
  if (v8 >= (v3 >> 32) - (int)v3)
    v8 = (v3 >> 32) - (int)v3;
  v10 = v8 / 8;
LABEL_22:
  v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v10);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    goto LABEL_38;
LABEL_23:
  v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
  v23 = 0;
  v24 = v37;
  do
  {
    v25 = _OSSwapInt64(*(_QWORD *)(v21 + 8 * v23 + 32));
    v37 = v24;
    v27 = v24[2];
    v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      v24 = v37;
    }
    ++v23;
    v24[2] = v27 + 1;
    v24[v27 + 4] = v25;
  }
  while (v22 != v23);
  swift_bridgeObjectRelease();
  v28 = v24[2];
  if (!v28)
    goto LABEL_39;
LABEL_28:
  if (v28 == 1)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v28 < 3)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v28 == 3)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v28 < 5)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v28 == 5)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v28 < 7)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v28 == 7)
  {
LABEL_46:
    __break(1u);
    JUMPOUT(0x1DDC32FBCLL);
  }
  v29 = v24[4];
  v30 = v24[5];
  v31 = v24[6];
  v32 = v24[7];
  v33 = v24[8];
  v34 = v24[9];
  v35 = v24[11];
  v36 = v24[10];
  swift_bridgeObjectRelease();
  result = outlined consume of Data._Representation(v3, v2);
  *(_QWORD *)v1 = v29;
  *(_QWORD *)(v1 + 8) = v30;
  *(_QWORD *)(v1 + 16) = v31;
  *(_QWORD *)(v1 + 24) = v32;
  *(_QWORD *)(v1 + 32) = v33;
  *(_QWORD *)(v1 + 40) = v34;
  *(_QWORD *)(v1 + 48) = v36;
  *(_QWORD *)(v1 + 56) = v35;
  *(_BYTE *)(v1 + 64) = 0;
  return result;
}

uint64_t Quad.rawValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[8];
  uint64_t v10;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[1];
  v9[0] = _OSSwapInt64(*v0);
  v9[1] = _OSSwapInt64(v7);
  v9[2] = _OSSwapInt64(v1);
  v9[3] = _OSSwapInt64(v2);
  v9[4] = _OSSwapInt64(v3);
  v9[5] = _OSSwapInt64(v4);
  v9[6] = _OSSwapInt64(v5);
  v9[7] = _OSSwapInt64(v6);
  return specialized Data.init<A>(_:)((uint64_t)v9, (uint64_t)&v10);
}

uint64_t Quad.isDefaultState.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = Quad.rawValue.getter();
  v2 = v1;
  v3 = Quad.rawValue.getter();
  v5 = v4;
  specialized static Data.== infix(_:_:)(v0, v2);
  v7 = v6;
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v7 & 1;
}

double Quad.init(defaultState:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance Quad()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = Quad.rawValue.getter();
  v2 = v1;
  v3 = Quad.rawValue.getter();
  v5 = v4;
  specialized static Data.== infix(_:_:)(v0, v2);
  v7 = v6;
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v7 & 1;
}

double protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance Quad@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance Quad(uint64_t *a1)
{
  Quad.init(rawValue:)(*a1, a1[1]);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Quad@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Quad.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance Quad@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Quad()
{
  lazy protocol witness table accessor for type Quad and conformance Quad();
  lazy protocol witness table accessor for type Quad and conformance Quad();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Quad()
{
  lazy protocol witness table accessor for type Quad and conformance Quad();
  lazy protocol witness table accessor for type Quad and conformance Quad();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Quad()
{
  lazy protocol witness table accessor for type Quad and conformance Quad();
  lazy protocol witness table accessor for type Quad and conformance Quad();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Quad()
{
  lazy protocol witness table accessor for type Quad and conformance Quad();
  lazy protocol witness table accessor for type Quad and conformance Quad();
  return CRValue<>.minEncodingVersion.getter();
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    v1 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v2, v1);
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, MEMORY[0x1E0DEC3C0]);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for ReflowElement);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for CanvasElementResizeHandle);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for ShapeView);
}

{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 160 * a3;
        if (v10 < (unint64_t)&v8[20 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 160 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 160);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for SynapseLinkItem);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    v4 = 4 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 29;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 2);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      v10 = v9;
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      if (v10 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, char *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (result - v10 != 0x8000000000000000 || v9 != -1)
    {
      v11[2] = v4;
      v11[3] = 2 * ((uint64_t)(result - v10) / v9);
      v14 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8) + 80);
      v15 = a4(&v16, (char *)v11 + ((v14 + 32) & ~v14), v4, a1);
      swift_bridgeObjectRetain();
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      if (v15 == v4)
        return (size_t)v11;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6)
      return MEMORY[0x1E0DEE9D8];
    v10 = v6;
    if (v6 <= 0)
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0)
          goto LABEL_19;
        v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8)
          goto LABEL_19;
        a5(0);
        swift_arrayInitWithCopy();
        return (uint64_t)v11;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for Insecure.MD5();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9A18], MEMORY[0x1E0CA9A10]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1DDC342B4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1DDC342E8 + *((int *)qword_1DDC344C0 + (v0 >> 62))))();
}

uint64_t sub_1DDC342F8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t specialized PKStrokeMaskStruct.__allocating_init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;

  type metadata accessor for PKStrokeMaskStruct();
  v4 = swift_allocObject();
  v5 = objc_allocWithZone(MEMORY[0x1E0CD1228]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
  outlined consume of Data._Representation(a1, a2);

  if (v7)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v4;
}

uint64_t type metadata accessor for PKStrokeMaskStruct()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PKStrokeMaskWrapper()
{
  return objc_opt_self();
}

uint64_t specialized PKStrokeMaskStruct.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[4];

  v3 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = objc_allocWithZone(MEMORY[0x1E0CD1228]);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
    outlined consume of Data._Representation(v10, v11);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if (v7)
    {
      type metadata accessor for PKStrokeMaskWrapper();
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v7;
      type metadata accessor for PKStrokeMaskStruct();
      v3 = swift_allocObject();
      *(_QWORD *)(v3 + 16) = v8;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return v3;
    }
    v3 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    swift_allocError();
    *v9 = 0x2E6B73616D206F4ELL;
    v9[1] = 0xE800000000000000;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v9, *MEMORY[0x1E0D11EF8], v3);
    swift_willThrow();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void specialized CGRect.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1DDC34908(unint64_t a1@<X1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  char v41;

  if (BYTE6(a1) == 32)
  {
    if (!a2)
    {
      v36 = (_QWORD *)v3;
      v37 = a1;
      v38 = BYTE2(a1);
      v39 = BYTE3(a1);
      v19 = a1 >> 40;
      v40 = BYTE4(a1);
      v13 = (a1 >> 51) & 0x1F;
      v41 = v19;
      v12 = (char *)&v36;
      goto LABEL_22;
    }
    if (a2 == 1)
    {
      v4 = (int)v3;
      v5 = (v3 >> 32) - (int)v3;
      if (v3 >> 32 >= (int)v3)
      {
        v6 = __DataStorage._bytes.getter();
        if (!v6)
        {
          __DataStorage._length.getter();
          v12 = 0;
          v13 = 0;
          goto LABEL_22;
        }
        v7 = v6;
        v8 = __DataStorage._offset.getter();
        v9 = __OFSUB__(v4, v8);
        v10 = v4 - v8;
        if (!v9)
        {
          v11 = __DataStorage._length.getter();
          v12 = (char *)(v7 + v10);
          if (v11 >= v5)
            v11 = v5;
          v13 = v11 / 8;
LABEL_22:
          v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v12, v13);
          v29 = *(_QWORD *)(v28 + 16);
          if (v29)
          {
LABEL_23:
            v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
            v30 = 0;
            v31 = v36;
            do
            {
              v32 = _OSSwapInt64(*(_QWORD *)(v28 + 8 * v30 + 32));
              v36 = v31;
              v34 = v31[2];
              v33 = v31[3];
              if (v34 >= v33 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
                v31 = v36;
              }
              ++v30;
              v31[2] = v34 + 1;
              v31[v34 + 4] = v32;
            }
            while (v29 != v30);
            swift_bridgeObjectRelease();
            v35 = v31[2];
            if (v35)
            {
LABEL_28:
              if (v35 != 1)
              {
                if (v35 >= 3)
                {
                  if (v35 != 3)
                  {
                    v14 = v31[4];
                    v15 = v31[5];
                    v16 = v31[6];
                    v17 = v31[7];
                    swift_bridgeObjectRelease();
                    v18 = 0;
                    goto LABEL_32;
                  }
LABEL_39:
                  __break(1u);
                  JUMPOUT(0x1DDC34BF0);
                }
LABEL_38:
                __break(1u);
                goto LABEL_39;
              }
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
LABEL_35:
          swift_bridgeObjectRelease();
          v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v35 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          if (v35)
            goto LABEL_28;
          goto LABEL_36;
        }
        goto LABEL_42;
      }
      __break(1u);
    }
    else
    {
      v20 = *(_QWORD *)(v3 + 16);
      v21 = *(_QWORD *)(v3 + 24);
      swift_retain();
      swift_retain();
      v22 = (char *)__DataStorage._bytes.getter();
      if (v22)
      {
        v23 = __DataStorage._offset.getter();
        if (__OFSUB__(v20, v23))
          goto LABEL_43;
        v22 += v20 - v23;
      }
      v9 = __OFSUB__(v21, v20);
      v24 = v21 - v20;
      if (!v9)
      {
        v25 = __DataStorage._length.getter();
        if (v22)
        {
          if (v25 >= v24)
            v26 = v24;
          else
            v26 = v25;
          v27 = v26 / 8;
        }
        else
        {
          v27 = 0;
        }
        v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v22, v27);
        swift_release();
        swift_release();
        v29 = *(_QWORD *)(v28 + 16);
        if (v29)
          goto LABEL_23;
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
LABEL_32:
  *(_QWORD *)v2 = v14;
  *(_QWORD *)(v2 + 8) = v15;
  *(_QWORD *)(v2 + 16) = v16;
  *(_QWORD *)(v2 + 24) = v17;
  *(_BYTE *)(v2 + 32) = v18;
}

unint64_t CFConvertDoubleHostToSwapped(double a1)
{
  return bswap64(*(unint64_t *)&a1);
}

void specialized CGPoint.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1DDC34C80@<X0>(unint64_t a1@<X1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;

  if (BYTE6(a1) == 16)
  {
    if (!a2)
    {
      v32 = (_QWORD *)v2;
      v33 = a1;
      v34 = BYTE2(a1);
      v35 = BYTE3(a1);
      v14 = a1 >> 40;
      v36 = BYTE4(a1);
      v12 = (a1 >> 51) & 0x1F;
      v37 = v14;
      v11 = (char *)&v32;
      goto LABEL_22;
    }
    if (a2 == 1)
    {
      v3 = (int)v2;
      v4 = (v2 >> 32) - (int)v2;
      if (v2 >> 32 >= (int)v2)
      {
        v5 = __DataStorage._bytes.getter();
        if (!v5)
        {
          __DataStorage._length.getter();
          v11 = 0;
          v12 = 0;
          goto LABEL_22;
        }
        v6 = v5;
        v7 = __DataStorage._offset.getter();
        v8 = __OFSUB__(v3, v7);
        v9 = v3 - v7;
        if (!v8)
        {
          v10 = __DataStorage._length.getter();
          v11 = (char *)(v6 + v9);
          if (v10 >= v4)
            v10 = v4;
          v12 = v10 / 8;
LABEL_22:
          v23 = specialized _copyCollectionToContiguousArray<A>(_:)(v11, v12);
          v24 = *(_QWORD *)(v23 + 16);
          if (v24)
          {
LABEL_23:
            v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
            v25 = 0;
            v26 = v32;
            do
            {
              v27 = _OSSwapInt64(*(_QWORD *)(v23 + 8 * v25 + 32));
              v32 = v26;
              v29 = v26[2];
              v28 = v26[3];
              if (v29 >= v28 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
                v26 = v32;
              }
              ++v25;
              v26[2] = v29 + 1;
              v26[v29 + 4] = v27;
            }
            while (v24 != v25);
            swift_bridgeObjectRelease();
            v30 = v26[2];
            if (v30)
            {
LABEL_28:
              if (v30 != 1)
              {
                v13 = v26[4];
                swift_bridgeObjectRelease();
                return v13;
              }
LABEL_35:
              __break(1u);
              JUMPOUT(0x1DDC34F40);
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          swift_bridgeObjectRelease();
          v26 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v30 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          if (v30)
            goto LABEL_28;
          goto LABEL_34;
        }
        goto LABEL_38;
      }
      __break(1u);
    }
    else
    {
      v15 = *(_QWORD *)(v2 + 16);
      v16 = *(_QWORD *)(v2 + 24);
      swift_retain();
      swift_retain();
      v17 = (char *)__DataStorage._bytes.getter();
      if (v17)
      {
        v18 = __DataStorage._offset.getter();
        if (__OFSUB__(v15, v18))
          goto LABEL_39;
        v17 += v15 - v18;
      }
      v8 = __OFSUB__(v16, v15);
      v19 = v16 - v15;
      if (!v8)
      {
        v20 = __DataStorage._length.getter();
        if (v17)
        {
          if (v20 >= v19)
            v21 = v19;
          else
            v21 = v20;
          v22 = v21 / 8;
        }
        else
        {
          v22 = 0;
        }
        v23 = specialized _copyCollectionToContiguousArray<A>(_:)(v17, v22);
        swift_release();
        swift_release();
        v24 = *(_QWORD *)(v23 + 16);
        if (v24)
          goto LABEL_23;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  return 0;
}

void specialized CGAffineTransform.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1DDC34FDC(unint64_t a1@<X1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  char v43;

  if (BYTE6(a1) == 48)
  {
    if (!a2)
    {
      v38 = (_QWORD *)v3;
      v39 = a1;
      v40 = BYTE2(a1);
      v41 = BYTE3(a1);
      v21 = a1 >> 40;
      v42 = BYTE4(a1);
      v13 = (a1 >> 51) & 0x1F;
      v43 = v21;
      v12 = (char *)&v38;
      goto LABEL_22;
    }
    if (a2 == 1)
    {
      v4 = (int)v3;
      v5 = (v3 >> 32) - (int)v3;
      if (v3 >> 32 >= (int)v3)
      {
        v6 = __DataStorage._bytes.getter();
        if (!v6)
        {
          __DataStorage._length.getter();
          v12 = 0;
          v13 = 0;
          goto LABEL_22;
        }
        v7 = v6;
        v8 = __DataStorage._offset.getter();
        v9 = __OFSUB__(v4, v8);
        v10 = v4 - v8;
        if (!v9)
        {
          v11 = __DataStorage._length.getter();
          v12 = (char *)(v7 + v10);
          if (v11 >= v5)
            v11 = v5;
          v13 = v11 / 8;
LABEL_22:
          v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v12, v13);
          v31 = *(_QWORD *)(v30 + 16);
          if (v31)
          {
LABEL_23:
            v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
            v32 = 0;
            v33 = v38;
            do
            {
              v34 = _OSSwapInt64(*(_QWORD *)(v30 + 8 * v32 + 32));
              v38 = v33;
              v36 = v33[2];
              v35 = v33[3];
              if (v36 >= v35 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
                v33 = v38;
              }
              ++v32;
              v33[2] = v36 + 1;
              v33[v36 + 4] = v34;
            }
            while (v31 != v32);
            swift_bridgeObjectRelease();
            v37 = v33[2];
            if (v37)
            {
LABEL_28:
              if (v37 != 1)
              {
                if (v37 >= 3)
                {
                  if (v37 != 3)
                  {
                    if (v37 >= 5)
                    {
                      if (v37 != 5)
                      {
                        v14 = v33[4];
                        v15 = v33[5];
                        v16 = v33[6];
                        v17 = v33[7];
                        v18 = v33[8];
                        v19 = v33[9];
                        swift_bridgeObjectRelease();
                        v20 = 0;
                        goto LABEL_34;
                      }
LABEL_43:
                      __break(1u);
                      JUMPOUT(0x1DDC352ECLL);
                    }
LABEL_42:
                    __break(1u);
                    goto LABEL_43;
                  }
LABEL_41:
                  __break(1u);
                  goto LABEL_42;
                }
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_37:
          swift_bridgeObjectRelease();
          v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v37 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          if (v37)
            goto LABEL_28;
          goto LABEL_38;
        }
        goto LABEL_46;
      }
      __break(1u);
    }
    else
    {
      v22 = *(_QWORD *)(v3 + 16);
      v23 = *(_QWORD *)(v3 + 24);
      swift_retain();
      swift_retain();
      v24 = (char *)__DataStorage._bytes.getter();
      if (v24)
      {
        v25 = __DataStorage._offset.getter();
        if (__OFSUB__(v22, v25))
          goto LABEL_47;
        v24 += v22 - v25;
      }
      v9 = __OFSUB__(v23, v22);
      v26 = v23 - v22;
      if (!v9)
      {
        v27 = __DataStorage._length.getter();
        if (v24)
        {
          if (v27 >= v26)
            v28 = v26;
          else
            v28 = v27;
          v29 = v28 / 8;
        }
        else
        {
          v29 = 0;
        }
        v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v24, v29);
        swift_release();
        swift_release();
        v31 = *(_QWORD *)(v30 + 16);
        if (v31)
          goto LABEL_23;
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
LABEL_34:
  *(_QWORD *)v2 = v14;
  *(_QWORD *)(v2 + 8) = v15;
  *(_QWORD *)(v2 + 16) = v16;
  *(_QWORD *)(v2 + 24) = v17;
  *(_QWORD *)(v2 + 32) = v18;
  *(_QWORD *)(v2 + 40) = v19;
  *(_BYTE *)(v2 + 48) = v20;
}

unint64_t lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane.CodingKeys, &unk_1EA844570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane.CodingKeys, &unk_1EA844570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane.CodingKeys, &unk_1EA844570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane.CodingKeys, &unk_1EA844570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

uint64_t base witness table accessor for CRType in PKStrokeMaskStruct(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, a2, (uint64_t (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
}

uint64_t base witness table accessor for CRCodable in PKStrokeMaskStruct(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, a2, (uint64_t (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
}

uint64_t base witness table accessor for CRType in PKInk()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type PKInk and conformance PKInk, 255, (uint64_t (*)(uint64_t))type metadata accessor for PKInk, (uint64_t)&protocol conformance descriptor for PKInk);
}

uint64_t base witness table accessor for CRCodable in PKInk()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PKInk and conformance PKInk, 255, (uint64_t (*)(uint64_t))type metadata accessor for PKInk, (uint64_t)&protocol conformance descriptor for PKInk);
}

uint64_t base witness table accessor for CRType in CGRect()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
}

uint64_t base witness table accessor for CRCodable in CGRect()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
}

uint64_t base witness table accessor for CRType in CGPoint()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
}

uint64_t base witness table accessor for CRCodable in CGPoint()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
}

uint64_t base witness table accessor for CRType in CGSize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
}

uint64_t base witness table accessor for CRCodable in CGSize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
}

uint64_t base witness table accessor for CRType in CGAffineTransform()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
}

uint64_t base witness table accessor for CRCodable in CGAffineTransform()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
}

uint64_t ObjC metadata update function for PKDrawingUUIDKeyPath()
{
  return type metadata accessor for PKDrawingUUIDKeyPath();
}

uint64_t type metadata accessor for PKDrawingUUIDKeyPath()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PKDrawingUUIDKeyPath;
  if (!type metadata singleton initialization cache for PKDrawingUUIDKeyPath)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PKDrawingUUIDKeyPath()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PKStrokeMaskStruct()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PKStrokeMaskStruct.__allocating_init(rawValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PKStrokeMaskStruct.rawValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PKStrokeMaskStruct.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PKStrokeMaskStruct.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

ValueMetadata *type metadata accessor for PKStrokeClipPlane()
{
  return &type metadata for PKStrokeClipPlane;
}

uint64_t storeEnumTagSinglePayload for PKStrokeClipPlane.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC358EC + 4 * byte_1DDF37E95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDC35920 + 4 * asc_1DDF37E90[v4]))();
}

uint64_t sub_1DDC35920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC35928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC35930);
  return result;
}

uint64_t sub_1DDC3593C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC35944);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDC35948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC35950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PKStrokeClipPlane.CodingKeys()
{
  return &unk_1EA844570;
}

uint64_t specialized PKStrokeClipPlane.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E696769726FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB1B08], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

unint64_t _OSSwapInt64(unint64_t a1)
{
  return bswap64(a1);
}

uint64_t PDFAnnotation.quadPoints.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD v15[2];
  _QWORD v16[4];

  if (objc_msgSend(v0, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0E00]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)v16);
  if (!v16[3])
  {
    outlined destroy of Any?((uint64_t)v16);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSValue]);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  if (!(v14 >> 62))
  {
    v1 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v1)
      goto LABEL_8;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v1 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v1)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_8:
  v16[0] = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 & ~(v1 >> 63), 0);
  if ((v1 & 0x8000000000000000) == 0)
  {
    v3 = 0;
    v4 = v16[0];
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x1DF0E4D64](v3);
      else
        v5 = *(id *)(v14 + 8 * v3 + 32);
      v6 = v5;
      objc_msgSend(v5, sel_CGPointValue);
      v8 = v7;
      v10 = v9;

      v16[0] = v4;
      v12 = *(_QWORD *)(v4 + 16);
      v11 = *(_QWORD *)(v4 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v4 = v16[0];
      }
      ++v3;
      *(_QWORD *)(v4 + 16) = v12 + 1;
      v13 = v4 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
    }
    while (v1 != v3);
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

void PDFAnnotation.quadPoints.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  double *v5;
  id v6;
  Class isa;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      v4 = (void *)objc_opt_self();
      v5 = (double *)(a1 + 40);
      do
      {
        v6 = objc_msgSend(v4, sel_valueWithCGPoint_, *(v5 - 1), *v5);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v5 += 2;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for NSValue();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setValue_forAnnotationKey_, isa, *MEMORY[0x1E0CD0E00]);

  }
  else
  {
    objc_msgSend(v1, sel_removeValueForAnnotationKey_, *MEMORY[0x1E0CD0E00]);
  }
}

Swift::Bool __swiftcall PDFAnnotation.shouldMirrorAsPDFAnnotationElement()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  _BYTE v40[24];
  uint64_t v41;

  if (objc_msgSend(v0, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0E08]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v39, 0, sizeof(v39));
  }
  outlined init with take of Any?((uint64_t)v39, (uint64_t)v40);
  if (!v41)
  {
    outlined destroy of Any?((uint64_t)v40);
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    v12 = 0;
    return v12 & 1;
  }
  v1 = (void *)MEMORY[0x1DF0E41AC]();
  swift_bridgeObjectRelease();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
    goto LABEL_13;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_14:

    v12 = 1;
    return v12 & 1;
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
    goto LABEL_13;
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    goto LABEL_14;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
    goto LABEL_13;
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_14;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
    goto LABEL_13;
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    goto LABEL_14;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
    goto LABEL_13;
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
    goto LABEL_14;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v32 = v31;
  if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v32 == v33)
  {
LABEL_13:
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
    goto LABEL_14;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;
  if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

unint64_t type metadata accessor for NSValue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSValue;
  if (!lazy cache variable for type metadata for NSValue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  }
  return result;
}

uint64_t PKStrokePathStruct.path.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PKStrokePath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PKStrokePathStruct.path.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PKStrokePath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*PKStrokePathStruct.path.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PKStrokePathStruct.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  Class isa;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  id v58;
  Class v59;
  id v60;
  id v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  Class v68;
  Class v69;
  id v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t result;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t, uint64_t);
  char *v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;

  v89 = a2;
  v4 = type metadata accessor for PKStrokePath();
  v86 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v88 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v82 = (char *)v74 - v9;
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
  v85 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v10);
  v83 = (_QWORD *)((char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (_QWORD *)((char *)v74 - v14);
  MEMORY[0x1E0C80A78](v16, v17);
  v84 = (_QWORD *)((char *)v74 - v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (_QWORD *)((char *)v74 - v21);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v74 - v29;
  dispatch thunk of CRDecoder.crdtContainer()();
  if (v2)
    return swift_release();
  v31 = dispatch thunk of CRDecoder.CRDTContainer.decodeCustomSiblings()();
  swift_release();
  v78 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v30;
  v32 = *(_QWORD *)(v31 + 16);
  v80 = v26;
  v81 = v32;
  if (!v32)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v33 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
  v75 = v31;
  v79 = v31 + v33;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v31 + v33, (uint64_t)v22, &demangling cache variable for type metadata for (Data, CRVersion?));
  v34 = *v22;
  v35 = v22[1];
  v36 = objc_allocWithZone(MEMORY[0x1E0CD1230]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v38 = objc_msgSend(v36, sel_initWithRawValue_, isa);

  if (v38)
  {
    v39 = v38;
    v40 = v34;
    v41 = (char *)v78;
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
    outlined consume of Data._Representation(v40, v35);

    v42 = v86;
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
    v44 = v41;
    v45 = 0;
  }
  else
  {
    outlined consume of Data._Representation(v34, v35);
    v42 = v86;
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
    v41 = (char *)v78;
    v44 = (char *)v78;
    v45 = 1;
  }
  v77 = v43;
  v43(v44, v45, 1, v4);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22 + *(int *)(v87 + 48), &demangling cache variable for type metadata for CRVersion?);
  v78 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v42 + 48);
  if (v78(v41, 1, v4) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v89, v41, v4);
    v46 = v81;
    if (*(_QWORD *)(v75 + 16) < v81)
      goto LABEL_20;
    if (v81 != 1)
    {
      v74[0] = 0;
      v74[1] = a1;
      v47 = v86;
      v76 = (uint64_t)v84 + *(int *)(v87 + 48);
      v48 = 1;
      while (v46 != v48)
      {
        v49 = v84;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v79 + *(_QWORD *)(v85 + 72) * v48, (uint64_t)v84, &demangling cache variable for type metadata for (Data, CRVersion?));
        v50 = v87;
        v51 = (uint64_t)v15 + *(int *)(v87 + 48);
        v52 = *v49;
        v53 = v49[1];
        *v15 = v52;
        v15[1] = v53;
        v54 = (uint64_t)v15;
        outlined init with take of (key: Int, value: AnyCRValue)?(v76, v51, &demangling cache variable for type metadata for CRVersion?);
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v88, v89, v4);
        v55 = *(int *)(v50 + 48);
        v56 = v83;
        v57 = (uint64_t)v83 + v55;
        *v83 = v52;
        v56[1] = v53;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v51, (uint64_t)v56 + v55, &demangling cache variable for type metadata for CRVersion?);
        v58 = objc_allocWithZone(MEMORY[0x1E0CD1230]);
        outlined copy of Data._Representation(v52, v53);
        v59 = Data._bridgeToObjectiveC()().super.isa;
        v60 = objc_msgSend(v58, sel_initWithRawValue_, v59);

        if (v60)
        {
          v61 = v60;
          v62 = v80;
          static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
          v63 = v53;
          v64 = v62;
          outlined consume of Data._Representation(v52, v63);

          v65 = v62;
          v66 = 0;
        }
        else
        {
          outlined consume of Data._Representation(v52, v53);
          v64 = v80;
          v65 = v80;
          v66 = 1;
        }
        v77(v65, v66, 1, v4);
        outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CRVersion?);
        if (v78(v64, 1, v4) == 1)
          goto LABEL_21;
        v15 = (_QWORD *)v54;
        ++v48;
        v67 = v88;
        v68 = PKStrokePath._bridgeToObjectiveC()().super.isa;
        v69 = PKStrokePath._bridgeToObjectiveC()().super.isa;
        v70 = -[objc_class dataApplying:](v68, sel_dataApplying_, v69);

        v71 = v82;
        static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

        v47 = v86;
        v72 = *(void (**)(char *, uint64_t))(v86 + 8);
        v72(v67, v4);
        outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for (Data, CRVersion?));
        v72(v64, v4);
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 40))(v89, v71, v4);
        v46 = v81;
        if (v81 == v48)
          goto LABEL_16;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_22:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for versionUUID()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID();
  __swift_allocate_value_buffer(v4, static PKStrokePathStruct.versionUUID);
  v5 = __swift_project_value_buffer(v4, (uint64_t)static PKStrokePathStruct.versionUUID);
  UUID.init(uuidString:)();
  v6 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v5, v3, v4);
  __break(1u);
  return result;
}

void PKStrokePathStruct.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Class isa;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRVersion?);
  MEMORY[0x1E0C80A78](v0, v1);
  v29 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexSet?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRVersion();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  CRVersion.init()();
  if (one-time initialization token for versionUUID != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v7, (uint64_t)static PKStrokePathStruct.versionUUID);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v17, v7);
  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v19 = (unint64_t)-[objc_class _immutablePointsCount](isa, sel__immutablePointsCount);

  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    IndexSet.init(integersIn:)();
    v20 = type metadata accessor for IndexSet();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 0, 1, v20);
    CRVersion.subscript.setter();
    v21 = v30;
    dispatch thunk of CREncoder.crdtContainer()();
    if (!v21)
    {
      v22 = PKStrokePath._bridgeToObjectiveC()().super.isa;
      v23 = -[objc_class rawValue](v22, sel_rawValue);

      v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      v27 = (uint64_t)v29;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v29, v16, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v27, 0, 1, v12);
      dispatch thunk of CREncoder.CRDTContainer.encodeCustom(_:version:)();
      outlined consume of Data._Representation(v24, v26);
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for CRVersion?);
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

uint64_t PKStrokePathStruct.merge(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Class isa;
  id v13;
  Class v14;
  id v15;
  Class v16;
  id v17;
  Class v18;
  id v19;
  Class v20;
  id v21;
  Class v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v26 - v10;
  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v13 = -[objc_class _immutablePointsCount](isa, sel__immutablePointsCount);

  v14 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v15 = -[objc_class _immutablePointsCount](v14, sel__immutablePointsCount);

  outlined init with copy of PKStrokePathStruct(a1, (uint64_t)v11);
  if ((uint64_t)v15 < (uint64_t)v13)
  {
    outlined destroy of PKStrokePathStruct((uint64_t)v11);
LABEL_5:
    v25 = type metadata accessor for PKStrokePath();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v2, a1, v25);
  }
  v16 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v17 = -[objc_class _immutablePointsCount](v16, sel__immutablePointsCount);

  v18 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v19 = -[objc_class _immutablePointsCount](v18, sel__immutablePointsCount);

  outlined init with copy of PKStrokePathStruct((uint64_t)v11, (uint64_t)v7);
  if (v17 == v19)
  {
    v20 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v21 = -[objc_class count](v20, sel_count);

    v22 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v23 = -[objc_class count](v22, sel_count);

    outlined destroy of PKStrokePathStruct((uint64_t)v7);
    result = outlined destroy of PKStrokePathStruct((uint64_t)v11);
    if ((uint64_t)v23 >= (uint64_t)v21)
      return result;
    goto LABEL_5;
  }
  outlined destroy of PKStrokePathStruct((uint64_t)v7);
  return outlined destroy of PKStrokePathStruct((uint64_t)v11);
}

uint64_t type metadata accessor for PKStrokePathStruct(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokePathStruct);
}

uint64_t outlined init with copy of PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePathStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PKStrokePathStruct(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PKStrokePathStruct(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PKStrokePathStruct.Partial.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t *, uint64_t);
  uint64_t v17;
  unint64_t v18;
  id v19;
  Class isa;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?)?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of CRDecoder.crdtContainer()();
  if (v1)
    return swift_release();
  v11 = dispatch thunk of CRDecoder.CRDTContainer.decodeCustomSiblings()();
  result = swift_release();
  if (*(_QWORD *)(v11 + 16) != 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
  v14 = *(_QWORD *)(v13 - 8);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v6, &demangling cache variable for type metadata for (Data, CRVersion?));
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  swift_bridgeObjectRelease();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
  v16 = *(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
  v26 = v15;
  result = v16(v6, 1);
  if ((_DWORD)result == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v17 = *v6;
  v18 = v6[1];
  v19 = objc_allocWithZone(MEMORY[0x1E0CD1230]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v21 = objc_msgSend(v19, sel_initWithRawValue_, isa);

  if (v21)
  {
    v22 = v21;
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
    outlined consume of Data._Representation(v17, v18);

    v23 = type metadata accessor for PKStrokePath();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v10, 0, 1, v23);
  }
  else
  {
    outlined consume of Data._Representation(v17, v18);
    v23 = type metadata accessor for PKStrokePath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v10, 1, 1, v23);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6 + *(int *)(v26 + 48), &demangling cache variable for type metadata for CRVersion?);
  type metadata accessor for PKStrokePath();
  v24 = *(_QWORD *)(v23 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v10, 1, v23);
  if ((_DWORD)result != 1)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v10, v23);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t PKStrokePathStruct.Partial.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  Class isa;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRVersion?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = dispatch thunk of CREncoder.crdtContainer()();
  if (!v0)
  {
    isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v7 = -[objc_class rawValue](isa, sel_rawValue);

    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    CRVersion.init()();
    v11 = type metadata accessor for CRVersion();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 0, 1, v11);
    dispatch thunk of CREncoder.CRDTContainer.encodeCustom(_:version:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for CRVersion?);
    outlined consume of Data._Representation(v8, v10);
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokePathStruct.Partial@<X0>(uint64_t a1@<X8>)
{
  return PKStrokePathStruct.Partial.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokePathStruct.Partial()
{
  return PKStrokePathStruct.Partial.encode(to:)();
}

uint64_t PKStrokePathStruct.delta(_:from:)@<X0>(char *a1@<X8>)
{
  return PKStrokePathStruct.partialCRDT(from:)(a1);
}

uint64_t PKStrokePathStruct.partialCRDT(from:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Class isa;
  Class v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for PKStrokePath();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v16 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v17 = -[objc_class deltaTo:](isa, sel_deltaTo_, v16);

  if (v17)
  {
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v5, v18, 1, v10);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v5, (uint64_t)v9, &demangling cache variable for type metadata for PKStrokePath?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PKStrokePath?);
    v19 = type metadata accessor for PKStrokePathStruct.Partial(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v21(v14, v9, v10);
    v21(a1, v14, v10);
    v22 = type metadata accessor for PKStrokePathStruct.Partial(0);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a1, 0, 1, v22);
  }
}

uint64_t type metadata accessor for PKStrokePathStruct.Partial(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokePathStruct.Partial);
}

id PKStrokePathStruct.Partial.canMerge(delta:)()
{
  Class isa;
  Class v1;
  id v2;

  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v1 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v2 = -[objc_class canApplyDelta:](isa, sel_canApplyDelta_, v1);

  return v2;
}

id PKStrokePathStruct.Partial.merge(delta:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Class isa;
  Class v8;
  id v9;
  Class v10;
  Class v11;
  id v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for PKStrokePath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v8 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v9 = -[objc_class canApplyDelta:](isa, sel_canApplyDelta_, v8);

  if ((_DWORD)v9)
  {
    v10 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v11 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v12 = -[objc_class dataApplying:](v10, sel_dataApplying_, v11);

    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v1, v6, v2);
  }
  return v9;
}

uint64_t static PKStrokePathStruct.initPartialCRDT(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  Class isa;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?)?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (_QWORD *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = dispatch thunk of CRDecoder.crdtContainer()();
  if (!v1)
  {
    v12 = dispatch thunk of CRDecoder.CRDTContainer.decodeCustomSiblings()();
    result = swift_release();
    if (*(_QWORD *)(v12 + 16) == 1)
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
      v14 = *(_QWORD *)(v13 - 8);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v12 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v6, &demangling cache variable for type metadata for (Data, CRVersion?));
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
      swift_bridgeObjectRelease();
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
      result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v6, 1, v15);
      if ((_DWORD)result != 1)
      {
        v16 = *v6;
        v17 = v6[1];
        v18 = objc_allocWithZone(MEMORY[0x1E0CD1230]);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v20 = objc_msgSend(v18, sel_initWithRawValue_, isa);

        if (v20)
        {
          v21 = v20;
          static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
          outlined consume of Data._Representation(v16, v17);

          v22 = type metadata accessor for PKStrokePath();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v10, 0, 1, v22);
        }
        else
        {
          outlined consume of Data._Representation(v16, v17);
          v22 = type metadata accessor for PKStrokePath();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v10, 1, 1, v22);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6 + *(int *)(v15 + 48), &demangling cache variable for type metadata for CRVersion?);
        type metadata accessor for PKStrokePath();
        v23 = *(_QWORD *)(v22 - 8);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v22);
        if ((_DWORD)result != 1)
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v10, v22);
LABEL_12:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t static PKStrokePathStruct.encode(partialCRDT:to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  Class isa;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRVersion?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = dispatch thunk of CREncoder.crdtContainer()();
  if (!v0)
  {
    isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v7 = -[objc_class rawValue](isa, sel_rawValue);

    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    CRVersion.init()();
    v11 = type metadata accessor for CRVersion();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 0, 1, v11);
    dispatch thunk of CREncoder.CRDTContainer.encodeCustom(_:version:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for CRVersion?);
    outlined consume of Data._Representation(v8, v10);
    return swift_release();
  }
  return result;
}

uint64_t PKStrokePathStruct.copy(newContext:renamingReferences:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PKStrokePathStruct(v1, a1);
}

uint64_t PKStrokePathStruct.copy(renamingReferences:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PKStrokePathStruct(v1, a1);
}

BOOL static PKStrokePathStruct.== infix(_:_:)()
{
  Class isa;
  id v1;
  Class v2;
  id v3;

  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v1 = -[objc_class _immutablePointsCount](isa, sel__immutablePointsCount);

  v2 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v3 = -[objc_class _immutablePointsCount](v2, sel__immutablePointsCount);

  return v1 == v3;
}

uint64_t PKStrokePathStruct.actionUndoingDifference(from:)()
{
  return 1;
}

uint64_t PKStrokePathStruct.observableDifference(from:with:)()
{
  return 1;
}

BOOL PKStrokePathStruct.hasDelta(from:)()
{
  Class isa;
  id v1;
  Class v2;
  id v3;

  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v1 = -[objc_class _immutablePointsCount](isa, sel__immutablePointsCount);

  v2 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v3 = -[objc_class _immutablePointsCount](v2, sel__immutablePointsCount);

  return (uint64_t)v1 < (uint64_t)v3;
}

Swift::Bool __swiftcall PKStrokePathStruct.needToFinalizeTimestamps()()
{
  return 0;
}

uint64_t base witness table accessor for CRCodable in PKStrokePathStruct.Partial()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial, type metadata accessor for PKStrokePathStruct.Partial, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct.Partial);
}

uint64_t base witness table accessor for CRMergeable in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
}

uint64_t base witness table accessor for CRType in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial, type metadata accessor for PKStrokePathStruct.Partial, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct.Partial);
}

uint64_t protocol witness for CRDT.context.getter in conformance PKStrokePathStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
  return CRType.context.getter();
}

BOOL protocol witness for CRDT.hasDelta(from:) in conformance PKStrokePathStruct()
{
  Class isa;
  id v1;
  Class v2;
  id v3;

  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v1 = -[objc_class _immutablePointsCount](isa, sel__immutablePointsCount);

  v2 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v3 = -[objc_class _immutablePointsCount](v2, sel__immutablePointsCount);

  return (uint64_t)v1 < (uint64_t)v3;
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKStrokePathStruct@<X0>(char *a1@<X8>)
{
  return PKStrokePathStruct.partialCRDT(from:)(a1);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokePathStruct@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PKStrokePathStruct.init(from:)(a1, a2);
}

void protocol witness for CRCodable.encode(to:) in conformance PKStrokePathStruct()
{
  PKStrokePathStruct.encode(to:)();
}

uint64_t base witness table accessor for CRCodable in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokePathStruct@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PKStrokePathStruct(v1, a1);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKStrokePathStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKStrokePathStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
  return CRDT.init(serializedData:)();
}

uint64_t getEnumTagSinglePayload for PKStrokePathStruct()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PKStrokePathStruct()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePath();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PKStrokePathStruct(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PKStrokePath();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokePathStruct.Partial()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PKStrokePathStruct.Partial()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokePath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PKStrokePathStruct()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PKStrokePath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *UnknownPageView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  char *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  objc_super v25;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit15UnknownPageView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3890]);
  v10 = v4;
  v11 = objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
  v12 = OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView] = v11;
  objc_msgSend(v11, sel_setContentMode_, 1);
  objc_msgSend(*(id *)&v10[v12], sel_setClipsToBounds_, 1);
  v13 = *(id *)&v10[v12];
  v14 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ALL, 0x80000001DDF4C4C0);
  v15 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v14);

  objc_msgSend(v13, sel_setImage_, v15);
  v16 = one-time initialization token for imageMissingIconColor;
  v17 = *(id *)&v10[v12];
  if (v16 != -1)
    swift_once();
  objc_msgSend(v17, sel_setTintColor_, static UIConstants.imageMissingIconColor);

  v25.receiver = v10;
  v25.super_class = (Class)type metadata accessor for UnknownPageView();
  v18 = (char *)objc_msgSendSuper2(&v25, sel_initWithFrame_, a1, a2, a3, a4);
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView];
  v20 = v18;
  objc_msgSend(v20, sel_addSubview_, v19);
  v21 = one-time initialization token for imageMissingBackgroundColor;
  v22 = v20;
  if (v21 != -1)
    swift_once();
  objc_msgSend(v22, sel_setBackgroundColor_, static UIConstants.imageMissingBackgroundColor);
  v23 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4C4E0);
  objc_msgSend(v22, sel_setAccessibilityIdentifier_, v23);

  return v22;
}

Swift::Void __swiftcall UnknownPageView.layoutSubviews()()
{
  char *v0;
  id v1;
  double v2;
  CGFloat v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  objc_super v14;
  CGRect v15;
  CGRect v16;

  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for UnknownPageView();
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
  v1 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView];
  objc_msgSend(v0, sel_bounds);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  objc_msgSend(v0, sel_bounds);
  v11 = v10 * 0.2;
  objc_msgSend(v0, sel_bounds);
  v13 = v12 * 0.2;
  v15.origin.x = v3;
  v15.origin.y = v5;
  v15.size.width = v7;
  v15.size.height = v9;
  v16 = CGRectInset(v15, v11, v13);
  objc_msgSend(v1, sel_setFrame_, v16.origin.x, v16.origin.y, v16.size.width, v16.size.height);

}

id UnknownPageView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UnknownPageView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UnknownPageView()
{
  return objc_opt_self();
}

uint64_t protocol witness for PageOverlayView.textualContextProvider.setter in conformance UnknownPageView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit15UnknownPageView_textualContextProvider + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void protocol witness for PageOverlayView.viewControllerForPresentingUI.setter in conformance UnknownPageView(void *a1)
{
  swift_unknownObjectWeakAssign();

}

Swift::Void __swiftcall InlineDrawingTiledTextView.didMoveToWindow()()
{
  char *v0;
  id v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  objc_super v18;

  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for InlineDrawingTiledTextView();
  objc_msgSendSuper2(&v18, sel_didMoveToWindow);
  v1 = objc_msgSend(v0, sel_window);

  v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit26InlineDrawingTiledTextView_inlineDrawingCanvasElementController];
  v3 = &v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_delegate];
  if (v1)
  {
    *((_QWORD *)v3 + 1) = &protocol witness table for InlineDrawingTiledTextView;
    v4 = swift_unknownObjectWeakAssign();
    v5 = MEMORY[0x1DF0E666C](v4);
    v6 = v0;
    swift_unknownObjectRelease();
    if (v5)
    {
      v7 = (char *)objc_allocWithZone((Class)type metadata accessor for ToolPickerController());
      v8 = v2;
      v9 = specialized ToolPickerController.init(delegate:)(v8, v7);
      v10 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = v9;
    }
    else
    {
      v10 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = 0;
    }

    v17 = objc_msgSend(v6, sel_selectionInteraction);
    objc_msgSend(v17, sel_setDelegate_, v6);
  }
  else
  {
    *((_QWORD *)v3 + 1) = 0;
    v11 = swift_unknownObjectWeakAssign();
    v12 = MEMORY[0x1DF0E666C](v11);
    swift_unknownObjectRelease();
    if (v12)
    {
      v13 = (char *)objc_allocWithZone((Class)type metadata accessor for ToolPickerController());
      v14 = v2;
      v15 = specialized ToolPickerController.init(delegate:)(v14, v13);
      v16 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = v15;
    }
    else
    {
      v16 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = 0;
    }

    v17 = objc_msgSend(v0, sel_selectionInteraction);
    objc_msgSend(v17, sel_setDelegate_, 0);
  }

}

id InlineDrawingTiledTextView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InlineDrawingTiledTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InlineDrawingTiledTextView()
{
  return objc_opt_self();
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_19;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = 0;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v3, a1) : *(id *)(a1 + 32 + 8 * v3);
      v5 = v4;
      if (__OFADD__(v3++, 1))
        break;
      v7 = InlineDrawingTextAttachmentView.acceptedDropLayouts.getter();
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = v7 + 40;
        while (((*(uint64_t (**)(void *))(*(_QWORD *)v9 + 32))(v5) & 1) == 0)
        {
          v9 += 16;
          if (!--v8)
            goto LABEL_4;
        }
        v10 = swift_bridgeObjectRelease();
        MEMORY[0x1DF0E4398](v10);
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if (v3 == v2)
        {
LABEL_17:
          swift_bridgeObjectRelease();
          return v12;
        }
      }
      else
      {
LABEL_4:

        swift_bridgeObjectRelease();
        if (v3 == v2)
          goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

{
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  id v14;
  id v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = v1;
  v3 = a1;
  v21 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v5 = 0;
    v19 = v3;
    v20 = v3 & 0xC000000000000001;
    v16 = v2;
    v17 = v3 + 32;
    v18 = v4;
    while (1)
    {
      v6 = v20 ? (id)MEMORY[0x1DF0E4D64](v5, v3) : *(id *)(v17 + 8 * v5);
      v7 = v6;
      if (__OFADD__(v5++, 1))
        break;
      v9 = InlineDrawingTextAttachmentView.acceptedDropLayouts.getter();
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = (uint64_t *)(v9 + 40);
        while (1)
        {
          v12 = *v11;
          v2 = objc_msgSend(v7, sel_itemProvider, v16);
          v13 = (*(uint64_t (**)(void))(v12 + 32))();

          if ((v13 & 1) != 0)
            break;
          v11 += 2;
          if (!--v10)
          {

            swift_bridgeObjectRelease();
            v4 = v18;
            v3 = v19;
            goto LABEL_5;
          }
        }
        swift_bridgeObjectRelease();
        v14 = objc_msgSend(v7, sel_itemProvider);

        v4 = v18;
        v3 = v19;
        if (v14)
        {
          MEMORY[0x1DF0E4398]();
          if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
LABEL_5:
      if (v5 == v4)
      {
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

void specialized InlineDrawingTiledTextView.inlineDrawingCanvasElementControllerCurrentAttachment(_:)()
{
  void *v0;
  void *v1;
  id v2;
  unint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  CGFloat width;
  CGFloat height;
  CGFloat x;
  double v12;
  id v13;
  void *v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double v27;
  CGFloat y;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_visibleAttachments);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = objc_msgSend(v1, sel_standInAttachmentView);
  if (v4)
  {
    v5 = v4;
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  if (!(v3 >> 62))
  {
    v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_7;
LABEL_19:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_19;
LABEL_7:
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    width = 0.0;
    height = 0.0;
    x = 0.0;
    v12 = 0.0;
    do
    {
      v29 = v12;
      v30 = x;
      v31 = height;
      v32 = width;
      if ((v3 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x1DF0E4D64](v8, v3);
      else
        v13 = *(id *)(v3 + 8 * v8 + 32);
      v14 = v13;
      objc_msgSend(v13, sel_bounds, *(_QWORD *)&y);
      objc_msgSend(v14, sel_convertRect_toCoordinateSpace_, v1);
      v16 = v15;
      v18 = v17;
      v20 = v19;
      v22 = v21;
      objc_msgSend(v1, sel_bounds);
      v36.origin.x = v23;
      v36.origin.y = v24;
      v36.size.width = v25;
      v36.size.height = v26;
      v33.origin.x = v16;
      v33.origin.y = v18;
      v33.size.width = v20;
      v33.size.height = v22;
      v34 = CGRectIntersection(v33, v36);
      x = v34.origin.x;
      width = v34.size.width;
      height = v34.size.height;
      y = v34.origin.y;
      v27 = CGRectGetHeight(v34);
      v35.origin.x = v30;
      v35.origin.y = v29;
      v35.size.width = v32;
      v35.size.height = v31;
      if (CGRectGetHeight(v35) >= v27)
      {

        width = v32;
        height = v31;
        x = v30;
        v12 = v29;
      }
      else
      {

        type metadata accessor for InlineDrawingTextAttachmentView();
        v7 = (void *)swift_dynamicCastClass();
        if (!v7)

        v12 = y;
      }
      ++v8;
    }
    while (v6 != v8);
    goto LABEL_19;
  }
  __break(1u);
}

void specialized InlineDrawingTiledTextView.selectionInteraction(_:canPerformAction:withSender:inAttachment:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  unint64_t v4;
  id v5;
  unint64_t v6;

  specialized InlineDrawingTiledTextView.inlineDrawingCanvasElementControllerCurrentAttachment(_:)();
  if (v0)
  {
    v1 = v0;
    if ((static Selector.== infix(_:_:)() & 1) != 0)
    {
      v2 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
      v3 = objc_msgSend(v2, sel_itemProviders);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
      v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v5 = v1;
      v6 = specialized Sequence.compactMap<A>(_:)(v4);
      swift_bridgeObjectRelease();

      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {

      }
      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t PrincipalLine.encode(to:)(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v17;
  double v18;
  char v19;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PrincipalLine.CodingKeys>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = a2;
  v18 = a3;
  v19 = 0;
  type metadata accessor for CGPoint(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA20]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    v17 = a4;
    v18 = a5;
    v19 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PrincipalLine.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 6581861;
  else
    return 0x7472617473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PrincipalLine.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PrincipalLine.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PrincipalLine.CodingKeys()
{
  lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PrincipalLine.CodingKeys()
{
  lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance PrincipalLine(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = specialized PrincipalLine.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PrincipalLine(_QWORD *a1)
{
  double *v1;

  return PrincipalLine.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void CHReflowableTextToken.overestimatedTextSize.getter()
{
  void *v0;
  CGRect v1;
  CGRect v2;
  CGRect v3;

  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v1);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v2);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_principalLines);
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v3);
}

double ReflowWord.baseline.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 176);
}

double ReflowWord.baselineDelta.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  CGRect v4;
  CGRect v5;

  objc_msgSend(*(id *)(v0 + 272), sel__canvasBounds);
  CGRectGetWidth(v4);
  objc_msgSend(*(id *)(v0 + 272), sel__canvasBounds);
  CGRectGetHeight(v5);
  return UnknownCanvasElementView.flags.modify(v1, v2);
}

uint64_t ReflowWord.init(reflowableTextToken:drawing:scale:image:)(void *a1, void *a2, void *a3, CGFloat a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGPoint v46;
  CGPoint v47;
  CGPoint v48;
  CGPoint v49;
  CGPoint v50;
  CGPoint v51;
  CGPoint v52;
  CGPoint v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v83;
  CGFloat v84;
  CGFloat v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  CGAffineTransform v90;
  double v91;
  double v92;
  CGPoint v93;
  double v94;
  double v95;
  CGPoint v96;
  double v97;
  double v98;
  CGAffineTransform v99;
  CGAffineTransform v100;
  CGAffineTransform v101;
  CGPoint v102;
  CGPoint v103;
  CGPoint v104;
  CGPoint v105;
  CGPoint v106;
  CGPoint v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v86 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 320) = 1;
  *(_QWORD *)(v5 + 288) = a3;
  v89 = a3;
  swift_retain();
  v18 = objc_msgSend(a1, sel_string);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  *(_QWORD *)(v5 + 304) = v19;
  *(_QWORD *)(v5 + 312) = v21;
  objc_msgSend(a2, sel__canvasBounds);
  if (CGRectIsEmpty(v108) || (objc_msgSend(a2, sel__canvasBounds), !CGRect.isFinite.getter(v22, v23, v24, v25)))
  {
    objc_msgSend(a2, sel_bounds);
    objc_msgSend(a2, sel_set_canvasBounds_);
  }
  objc_msgSend(a2, sel__canvasBounds);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  if (fabs(a4 + -1.0) <= 0.01)
  {
    v34 = a2;
  }
  else
  {
    CGAffineTransformMakeScale(&v90, a4, a4);
    v101 = v90;
    v34 = PKDrawingCoherence.applyTransform(_:transformInk:)((uint64_t)&v101, 0);
  }
  *(_QWORD *)(v5 + 272) = v34;
  v35 = v34;
  objc_msgSend(v35, sel__canvasBounds);
  v110 = CGRectIntegral(v109);
  objc_msgSend(v35, sel_set_canvasBounds_, v110.origin.x, v110.origin.y, v110.size.width, v110.size.height);

  objc_msgSend(a1, sel_bounds);
  v90.a = v36;
  v90.b = 0.0;
  v90.c = 0.0;
  v90.d = v38;
  v90.tx = v37 - v36 * 0.0;
  v90.ty = v39 - v38 * 0.0;
  v100.a = 1.0 / v31;
  v100.b = 0.0;
  v100.c = 0.0;
  v100.d = 1.0 / v33;
  v100.tx = 0.0 - v27 * (1.0 / v31);
  v100.ty = 0.0 - v29 * (1.0 / v33);
  CGAffineTransformConcat(&v99, &v90, &v100);
  a = v99.a;
  b = v99.b;
  c = v99.c;
  d = v99.d;
  tx = v99.tx;
  ty = v99.ty;
  objc_msgSend(a1, sel_principalLines);
  v84 = v95;
  v85 = v94;
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v46 = CGPointApplyAffineTransform(v93, &v90);
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v102.y = v84;
  v102.x = v85;
  v47 = CGPointApplyAffineTransform(v102, &v90);
  *(CGPoint *)(v5 + 144) = v46;
  *(CGPoint *)(v5 + 160) = v47;
  objc_msgSend(a1, sel_principalLines);
  v103.x = v90.a;
  v103.y = v90.b;
  v84 = v90.d;
  v85 = v90.c;
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v48 = CGPointApplyAffineTransform(v103, &v90);
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v104.y = v84;
  v104.x = v85;
  v49 = CGPointApplyAffineTransform(v104, &v90);
  *(CGPoint *)(v5 + 240) = v48;
  *(CGPoint *)(v5 + 256) = v49;
  objc_msgSend(a1, sel_principalLines);
  v105 = *(CGPoint *)&v90.tx;
  v84 = v92;
  v85 = v91;
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v50 = CGPointApplyAffineTransform(v105, &v90);
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v106.y = v84;
  v106.x = v85;
  v51 = CGPointApplyAffineTransform(v106, &v90);
  *(CGPoint *)(v5 + 176) = v50;
  *(CGPoint *)(v5 + 192) = v51;
  objc_msgSend(a1, sel_principalLines);
  v84 = v98;
  v85 = v97;
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v52 = CGPointApplyAffineTransform(v96, &v90);
  v90.a = a;
  v90.b = b;
  v90.c = c;
  v90.d = d;
  v90.tx = tx;
  v90.ty = ty;
  v107.y = v84;
  v107.x = v85;
  v53 = CGPointApplyAffineTransform(v107, &v90);
  *(CGPoint *)(v5 + 208) = v52;
  *(CGPoint *)(v5 + 224) = v53;
  v54 = *(double *)(v5 + 176);
  v55 = *(double *)(v5 + 192);
  if (v54 < 0.0)
  {
    v56 = 0.0 - v54 / (v55 - v54);
    v54 = v54 + (v55 - v54) * v56;
    v57 = *(double *)(v5 + 184) + v56 * (*(double *)(v5 + 200) - *(double *)(v5 + 184));
    *(double *)(v5 + 176) = v54;
    *(double *)(v5 + 184) = v57;
  }
  v85 = *(double *)&a2;
  if (v55 > 1.0)
  {
    v58 = v55 - v54;
    v59 = 1.0 - v54 / v58;
    v60 = v54 + v58 * v59;
    v61 = *(double *)(v5 + 184) + v59 * (*(double *)(v5 + 200) - *(double *)(v5 + 184));
    *(double *)(v5 + 192) = v60;
    *(double *)(v5 + 200) = v61;
  }
  v62 = *(char **)(v5 + 272);
  v63 = &v62[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v64 = v86;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v17, v63, v14);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v65 = v62;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v14);
  v66 = v65;
  v67 = specialized Sequence.compactMap<A>(_:)((uint64_t)v13, (uint64_t)v66);

  (*(void (**)(char *, uint64_t))(v87 + 8))(v13, v88);
  *(_QWORD *)(v5 + 280) = v67;
  v68 = swift_release();
  v70 = UnknownCanvasElementView.flags.modify(v68, v69);
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_QWORD *)(v5 + 96) = 0;
  *(double *)(v5 + 104) = v70;
  *(_QWORD *)(v5 + 112) = v71;
  *(_QWORD *)(v5 + 120) = -1;
  *(_QWORD *)(v5 + 128) = 0;
  *(_BYTE *)(v5 + 136) = 0;
  swift_retain_n();
  objc_msgSend(v66, sel__canvasBounds);
  v73 = v72;
  v75 = v74;
  v77 = v76;
  v79 = v78;

  swift_release();
  *(_QWORD *)(v5 + 16) = v73;
  *(_QWORD *)(v5 + 24) = v75;
  *(_QWORD *)(v5 + 32) = v77;
  *(_QWORD *)(v5 + 40) = v79;
  swift_release();
  v80 = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v5 + 64) = v80;
  v81 = *(_OWORD *)(v5 + 192);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(v5 + 176);
  *(_OWORD *)(v5 + 104) = v81;
  return v5;
}

uint64_t ReflowWord.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDC39D74 + 4 * byte_1DDF38F30[a1]))(0x656E696C65736162, 0xE800000000000000);
}

uint64_t sub_1DDC39D74()
{
  return 0x656E694C706F74;
}

uint64_t sub_1DDC39D8C()
{
  return 0x65646E6563736564;
}

uint64_t sub_1DDC39DB0()
{
  return 0x694C6E616964656DLL;
}

uint64_t sub_1DDC39DCC()
{
  return 0x676E6977617264;
}

unint64_t sub_1DDC39DE4()
{
  return 0xD000000000000015;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ReflowWord.CodingKeys@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ReflowWord.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReflowWord.CodingKeys()
{
  unsigned __int8 *v0;

  return ReflowWord.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReflowWord.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ReflowWord.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance ReflowWord.CodingKeys@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ReflowWord.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReflowWord.CodingKeys()
{
  lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowWord.CodingKeys()
{
  lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ReflowWord.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  objc_class *v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  objc_class *v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  Class v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  objc_super v68;
  char v69;
  __int128 v70;
  __int128 v71;
  char v72;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v60 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v7 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v53 - v13;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReflowWord.CodingKeys>);
  v15 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 288) = 0;
  *(_BYTE *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 320) = 1;
  v19 = a1[3];
  v66 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  swift_retain();
  v64 = v18;
  v20 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);

    outlined consume of PaperKitPDFDocument??(*(id *)(v2 + 320));
    type metadata accessor for ReflowWord();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v58 = v10;
    v59 = v14;
    v21 = v7;
    v22 = v63;
    v67 = v15;
    v69 = 0;
    v23 = lazy protocol witness table accessor for type PrincipalLine and conformance PrincipalLine();
    v24 = v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v71;
    *(_OWORD *)(v2 + 176) = v70;
    *(_OWORD *)(v2 + 192) = v25;
    v69 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v26 = v71;
    *(_OWORD *)(v2 + 208) = v70;
    *(_OWORD *)(v2 + 224) = v26;
    v69 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v27 = v71;
    *(_OWORD *)(v2 + 240) = v70;
    *(_OWORD *)(v2 + 256) = v27;
    v69 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v28 = v71;
    *(_OWORD *)(v2 + 144) = v70;
    *(_OWORD *)(v2 + 160) = v28;
    v29 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    v69 = 4;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingCoherence and conformance PKDrawingCoherence, type metadata accessor for PKDrawingCoherence, (uint64_t)&protocol conformance descriptor for PKDrawingCoherence);
    v57 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v55 = (id)v70;
    v31 = v70 + OBJC_IVAR___PKDrawingCoherence_model;
    v54 = v70 + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    v33 = v58;
    v56 = v23;
    v34 = v22;
    v32(v58, v31, v22);
    v35 = v59;
    Capsule.copy()();
    v36 = *(void (**)(char *, uint64_t))(v21 + 8);
    v36(v33, v22);
    v37 = v57;
    v38 = (char *)objc_allocWithZone(v57);
    v32(&v38[OBJC_IVAR___PKDrawingCoherence_model], (uint64_t)v35, v34);
    v68.receiver = v38;
    v68.super_class = v37;
    v39 = objc_msgSendSuper2(&v68, sel_init);
    v36(v35, v34);
    *(_QWORD *)(v2 + 272) = v39;
    v32(v35, v54, v34);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v40 = (uint64_t)v60;
    Capsule<>.subscript.getter();
    v41 = v65;
    swift_release();
    v36(v35, v34);
    v42 = v55;
    v43 = specialized Sequence.compactMap<A>(_:)(v40, (uint64_t)v42);

    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v40, v62);
    *(_QWORD *)(v2 + 280) = v43;
    *(_QWORD *)(v2 + 304) = 0;
    *(_QWORD *)(v2 + 312) = 0;
    v44 = swift_release();
    v46 = UnknownCanvasElementView.flags.modify(v44, v45);
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_QWORD *)(v2 + 96) = 0;
    *(double *)(v2 + 104) = v46;
    *(_QWORD *)(v2 + 112) = v47;
    *(_QWORD *)(v2 + 120) = -1;
    *(_QWORD *)(v2 + 128) = 0;
    *(_BYTE *)(v2 + 136) = 0;
    v72 = 5;
    swift_retain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v48 = v71;
    *(_OWORD *)(v2 + 88) = v70;
    *(_OWORD *)(v2 + 104) = v48;
    swift_retain();
    objc_msgSend(v42, sel__canvasBounds);
    *(_QWORD *)(v2 + 16) = v49;
    *(_QWORD *)(v2 + 24) = v50;
    *(_QWORD *)(v2 + 32) = v51;
    *(_QWORD *)(v2 + 40) = v52;
    swift_release();
    LOBYTE(v70) = 6;
    swift_retain();
    LOBYTE(v43) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v24, v41);

    *(_BYTE *)(v2 + 136) = v43 & 1;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
    swift_release();
  }
  return v2;
}

__n128 closure #1 in ReflowWord.init(reflowableTextToken:drawing:scale:image:)@<Q0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __n128 result;
  __n128 *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *i;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __n128 *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  __n128 *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;

  v82 = a3;
  v79 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v71, v8);
  v72 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v67 - v12;
  v14 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v92 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v78 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77, v17);
  v75 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87.n128_u64[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v76 = *(_QWORD *)(v87.n128_u64[0] - 8);
  MEMORY[0x1E0C80A78](v87.n128_u64[0], v19);
  v86.n128_u64[0] = (unint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v22 = *(_QWORD *)(v21 - 8);
  v84 = v21;
  v73 = v22;
  MEMORY[0x1E0C80A78](v21, v23);
  v70 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v69 = (char *)&v67 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v68 = (char *)&v67 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v67 - v33;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v35, v36);
  v74 = (char *)&v67 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v40);
  v42 = (char *)&v67 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v44 = *(void (**)(char *, uint64_t))(v22 + 16);
  v85 = v43;
  v83 = v44;
  ((void (*)(char *, uint64_t, uint64_t))v44)(v34, v43, v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v45 = type metadata accessor for PKDrawingStruct();
  v80 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v81 = v45;
  Ref.subscript.getter();
  v79 = *(void (**)(char *, uint64_t))(v73 + 8);
  v79(v34, v84);
  v46 = v75;
  CRRegister.value.getter();
  v47 = (uint64_t)v74;
  v48 = v77;
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v46, v48);
  (*(void (**)(unint64_t, unint64_t))(v76 + 8))(v86.n128_u64[0], v87.n128_u64[0]);
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = v47;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v47, 1, v49) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    result.n128_u64[0] = 0;
    v53 = v82;
    *v82 = 0u;
    v53[1] = 0u;
    v53[2] = 0u;
    v53[3].n128_u8[0] = 1;
  }
  else
  {
    v54 = v68;
    v87.n128_u64[0] = v50;
    v55 = v84;
    v83(v68, v85);
    Ref.subscript.getter();
    v79(v54, v55);
    (*(void (**)(uint64_t, uint64_t))(v87.n128_u64[0] + 8))(v51, v49);
    v56 = v69;
    ((void (*)(char *, uint64_t, uint64_t))v83)(v69, v85, v55);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>, MEMORY[0x1E0D12B28]);
    v57 = v55;
    for (i = v56; ; i = v59)
    {
      v59 = i;
      v60 = v57;
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v13, type metadata accessor for PKStrokeInheritedProperties);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v7, 1, v38) == 1)
        break;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v42, v7, v38);
      v57 = v60;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    outlined destroy of PKStrokeProperties(v92, type metadata accessor for PKStrokeStruct);
    v61 = v79;
    v79(v59, v60);
    v62 = v70;
    ((void (*)(char *, uint64_t, uint64_t))v83)(v70, v85, v60);
    v63 = (uint64_t)v72;
    Ref.subscript.getter();
    v61(v62, v60);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    CRRegister.wrappedValue.getter();
    v86 = v89;
    v87 = v88;
    v64 = v90;
    v65 = v91;
    outlined destroy of PKStrokeProperties(v63, type metadata accessor for PKStrokeInheritedProperties);
    v66 = v82;
    result = v86;
    *v82 = v87;
    v66[1] = result;
    v66[2].n128_u64[0] = v64;
    v66[2].n128_u64[1] = v65;
    v66[3].n128_u8[0] = 0;
  }
  return result;
}

uint64_t ReflowWord.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReflowWord.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = *(_OWORD *)(v3 + 192);
  v18 = *(_OWORD *)(v3 + 176);
  v19 = v10;
  v17 = 0;
  lazy protocol witness table accessor for type PrincipalLine and conformance PrincipalLine();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + 224);
    v18 = *(_OWORD *)(v3 + 208);
    v19 = v11;
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = *(_OWORD *)(v3 + 256);
    v18 = *(_OWORD *)(v3 + 240);
    v19 = v12;
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = *(_OWORD *)(v3 + 160);
    v18 = *(_OWORD *)(v3 + 144);
    v19 = v13;
    v17 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v18 = *(_QWORD *)(v3 + 272);
    v17 = 4;
    type metadata accessor for PKDrawingCoherence(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingCoherence and conformance PKDrawingCoherence, type metadata accessor for PKDrawingCoherence, (uint64_t)&protocol conformance descriptor for PKDrawingCoherence);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14 = *(_OWORD *)(v3 + 104);
    v18 = *(_OWORD *)(v3 + 88);
    v19 = v14;
    v17 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

id ReflowWord._layer.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 320);
  v2 = v1;
  if (v1 == (void *)1)
  {
    v2 = closure #1 in ReflowWord._layer.getter(v0);
    v3 = *(void **)(v0 + 320);
    *(_QWORD *)(v0 + 320) = v2;
    v4 = v2;
    outlined consume of PaperKitPDFDocument??(v3);
  }
  outlined copy of CALayer??(v1);
  return v2;
}

id closure #1 in ReflowWord._layer.getter(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v7;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
  v3 = *(void **)(a1 + 288);
  if (v3 && (v4 = objc_msgSend(v3, sel_CGImage)) != 0)
  {
    v7 = v4;
    type metadata accessor for CGImageRef(0);
    v5 = _bridgeAnythingToObjectiveC<A>(_:)();

  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v2, sel_setContents_, v5);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t closure #1 in ReflowWord.generateImage()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[3] = a1;
  v4[4] = a4;
  type metadata accessor for MainActor();
  v4[5] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ReflowWord.generateImage()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;

  swift_release();
  v1 = ReflowWord._layer.getter();
  if (v1)
  {
    v2 = *(void **)(*(_QWORD *)(v0 + 32) + 288);
    if (v2 && (v3 = objc_msgSend(v2, sel_CGImage)) != 0)
    {
      *(_QWORD *)(v0 + 16) = v3;
      type metadata accessor for CGImageRef(0);
      v4 = _bridgeAnythingToObjectiveC<A>(_:)();

    }
    else
    {
      v4 = 0;
    }
    objc_msgSend(v1, sel_setContents_, v4);
    swift_unknownObjectRelease();

  }
  **(_BYTE **)(v0 + 24) = v1 == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ReflowWord.updateLayer()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  id v8;
  id v9;
  id v10;
  CGMutablePathRef v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  CGRect v19;

  v1 = ReflowWord._layer.getter();
  if (v1)
  {
    if (one-time initialization token for showDebugUI != -1)
    {
      v18 = v1;
      swift_once();
      v1 = v18;
    }
    if (static ReflowTextView.showDebugUI == 1)
    {
      v17 = v1;
      v2 = (void *)objc_opt_self();
      v3 = objc_msgSend(v2, sel_redColor);
      v4 = objc_msgSend(v3, sel_colorWithAlphaComponent_, 0.1);

      v5 = objc_msgSend(v4, sel_CGColor);
      objc_msgSend(v17, sel_setBorderColor_, v5);

      type metadata accessor for CALayer();
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v17, sel_setSublayers_, isa);

      v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
      objc_msgSend(v7, sel_setLineWidth_, 0.5);
      v8 = objc_msgSend(v2, sel_redColor);
      v9 = objc_msgSend(v8, sel_colorWithAlphaComponent_, 0.7);

      v10 = objc_msgSend(v9, sel_CGColor);
      objc_msgSend(v7, sel_setStrokeColor_, v10);

      objc_msgSend(v7, sel_setFillColor_, 0);
      v11 = closure #1 in ReflowWord.updateLayer()((double *)v0, 0.0, 0.0, *(CGFloat *)(v0 + 64), *(CGFloat *)(v0 + 72));
      objc_msgSend(v7, sel_setPath_, v11);

      objc_msgSend(v17, sel_addSublayer_, v7);
      if (*(_BYTE *)(v0 + 136) == 1)
      {
        v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD28A0]), sel_init);
        v13 = (void *)MEMORY[0x1DF0E41AC](46786, 0xA200000000000000);
        objc_msgSend(v12, sel_setString_, v13);

        objc_msgSend(v12, sel_setFontSize_, 24.0);
        v14 = v12;
        objc_msgSend(v17, sel_frame);
        objc_msgSend(v14, sel_setFrame_, CGRectGetWidth(v19), 0.0, 30.0, 30.0);

        v15 = objc_msgSend(v2, sel_systemBlueColor);
        v16 = objc_msgSend(v15, sel_CGColor);

        objc_msgSend(v14, sel_setForegroundColor_, v16);
        objc_msgSend(v17, sel_addSublayer_, v14);

      }
      v1 = v17;
    }

  }
}

CGMutablePathRef closure #1 in ReflowWord.updateLayer()(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGMutablePathRef Mutable;
  uint64_t v11;
  double v12;
  double v13;
  double MinX;
  double v15;
  double MinY;
  CGFloat Height;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  CGAffineTransform v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  Mutable = CGPathCreateMutable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1DDF33AB0;
  v12 = a1[22];
  v13 = a1[23];
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  MinX = CGRectGetMinX(v26);
  v27.origin.x = a2;
  v27.origin.y = a3;
  v27.size.width = a4;
  v27.size.height = a5;
  v15 = MinX + v12 * CGRectGetWidth(v27);
  v28.origin.x = a2;
  v28.origin.y = a3;
  v28.size.width = a4;
  v28.size.height = a5;
  MinY = CGRectGetMinY(v28);
  v29.origin.x = a2;
  v29.origin.y = a3;
  v29.size.width = a4;
  v29.size.height = a5;
  Height = CGRectGetHeight(v29);
  *(double *)(v11 + 32) = v15;
  *(double *)(v11 + 40) = MinY + v13 * Height;
  v18 = a1[24];
  v19 = a1[25];
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.width = a4;
  v30.size.height = a5;
  v20 = CGRectGetMinX(v30);
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.width = a4;
  v31.size.height = a5;
  v21 = v20 + v18 * CGRectGetWidth(v31);
  v32.origin.x = a2;
  v32.origin.y = a3;
  v32.size.width = a4;
  v32.size.height = a5;
  v22 = CGRectGetMinY(v32);
  v33.origin.x = a2;
  v33.origin.y = a3;
  v33.size.width = a4;
  v33.size.height = a5;
  v23 = CGRectGetHeight(v33);
  *(double *)(v11 + 48) = v21;
  *(double *)(v11 + 56) = v22 + v19 * v23;
  v25.a = 1.0;
  v25.b = 0.0;
  v25.c = 0.0;
  v25.d = 1.0;
  v25.tx = 0.0;
  v25.ty = 0.0;
  CGMutablePathRef.addLines(between:transform:)((Swift::OpaquePointer)v11, &v25);
  swift_bridgeObjectRelease();
  return Mutable;
}

uint64_t ReflowWord.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(19);
  v1._countAndFlagsBits = 0x57776F6C6665523CLL;
  v1._object = (void *)0xED0000203A64726FLL;
  String.append(_:)(v1);
  if (*(_QWORD *)(v0 + 312))
  {
    v2 = *(_QWORD *)(v0 + 304);
    v3 = *(void **)(v0 + 312);
  }
  else
  {
    v3 = (void *)0xE300000000000000;
    v2 = 4079420;
  }
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

void ReflowWord.__ivar_destroyer()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PaperKitPDFDocument??(v0[40]);
}

uint64_t ReflowWord.__deallocating_deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PaperKitPDFDocument??(v0[40]);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReflowWord()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PrincipalLine()
{
  return &type metadata for PrincipalLine;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReflowWord@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for ReflowWord();
  v5 = swift_allocObject();
  result = ReflowWord.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReflowWord(_QWORD *a1)
{
  return ReflowWord.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowWord()
{
  return ReflowWord.debugDescription.getter();
}

unint64_t lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowWord.CodingKeys, &type metadata for ReflowWord.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowWord.CodingKeys, &type metadata for ReflowWord.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowWord.CodingKeys, &type metadata for ReflowWord.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowWord.CodingKeys, &type metadata for ReflowWord.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrincipalLine and conformance PrincipalLine()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine;
  if (!lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PrincipalLine, &type metadata for PrincipalLine);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine;
  if (!lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PrincipalLine, &type metadata for PrincipalLine);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine);
  }
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  _QWORD *v24;
  void (*v25)(void (*)(char *, uint64_t), char *, uint64_t);
  _OWORD *v26;
  __n128 v27;
  __n128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __n128 v40[3];
  char v41;
  uint64_t v42;

  v38 = a2;
  v42 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (void (*)(char *, uint64_t))((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v32 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v42, v11, v18);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v21 = v33;
  v22 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D11D70]);
  v39 = v20;
  v42 = v16;
  v37 = v22;
  dispatch thunk of IteratorProtocol.next()();
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v23(v10, 1, v3) == 1)
  {
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v42);
  }
  else
  {
    v25 = *(void (**)(void (*)(char *, uint64_t), char *, uint64_t))(v21 + 32);
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v25(v6, v10, v3);
    while (1)
    {
      v28 = closure #1 in ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v6, v38, v40);
      if (v2)
        break;
      (*(void (**)(void (*)(char *, uint64_t), uint64_t, __n128))(v21 + 8))(v6, v3, v28);
      if ((v41 & 1) == 0)
      {
        v35 = v40[1];
        v36 = v40[0];
        v34 = v40[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        v30 = v24[2];
        v29 = v24[3];
        if (v30 >= v29 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v24);
        v24[2] = v30 + 1;
        v26 = &v24[6 * v30];
        v27 = v35;
        v26[2] = v36;
        v26[3] = v27;
        v26[4] = v34;
        v21 = v33;
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v23(v10, 1, v3) == 1)
        goto LABEL_3;
      v25(v6, v10, v3);
    }
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, __n128))(v21 + 8))(v6, v3, v28);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v42);
    swift_bridgeObjectRelease();
  }
  return v24;
}

uint64_t specialized PrincipalLine.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double specialized PrincipalLine.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v9;
  char v10;
  double v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PrincipalLine.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  type metadata accessor for CGPoint(0);
  v10 = 0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA30]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v7 = v11;
  v10 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

unint64_t lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PrincipalLine.CodingKeys, &unk_1EA844A50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PrincipalLine.CodingKeys, &unk_1EA844A50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PrincipalLine.CodingKeys, &unk_1EA844A50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PrincipalLine.CodingKeys, &unk_1EA844A50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

unint64_t type metadata accessor for CALayer()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CALayer;
  if (!lazy cache variable for type metadata for CALayer)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CALayer);
  }
  return result;
}

id outlined copy of CALayer??(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t storeEnumTagSinglePayload for PrincipalLine.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC3BF10 + 4 * byte_1DDF38F3C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDC3BF44 + 4 * byte_1DDF38F37[v4]))();
}

uint64_t sub_1DDC3BF44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC3BF4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC3BF54);
  return result;
}

uint64_t sub_1DDC3BF60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC3BF68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDC3BF6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC3BF74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PrincipalLine.CodingKeys()
{
  return &unk_1EA844A50;
}

uint64_t getEnumTagSinglePayload for ReflowWord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReflowWord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1DDC3C06C + 4 * byte_1DDF38F46[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1DDC3C0A0 + 4 * byte_1DDF38F41[v4]))();
}

uint64_t sub_1DDC3C0A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC3C0A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC3C0B0);
  return result;
}

uint64_t sub_1DDC3C0BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC3C0C4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1DDC3C0C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC3C0D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReflowWord.CodingKeys()
{
  return &type metadata for ReflowWord.CodingKeys;
}

unint64_t specialized ReflowWord.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

uint64_t specialized ReflowWord.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E696C65736162 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E694C706F74 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65646E6563736564 && a2 == 0xED0000656E694C72
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x694C6E616964656DLL && a2 == 0xEA0000000000656ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E6977617264 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001DDF52840
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001DDF52860)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

id protocol witness for PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a3, a4, (uint64_t)&unk_1EA844CC0, (uint64_t)closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)partial apply, (uint64_t)&block_descriptor_7_1);
}

id PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a3, a4, (uint64_t)&unk_1EA844CC0, (uint64_t)closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)partial apply, (uint64_t)&block_descriptor_7_1);
}

BOOL PaperDocumentViewDelegate.documentViewShouldAllowEditing(_:)(uint64_t a1)
{
  _BYTE *v1;

  v1 = (_BYTE *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  return *v1 != 0;
}

uint64_t PaperDocumentViewDelegate.documentView(_:shouldOpenLink:)()
{
  return 1;
}

UIMenu closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, UIMenuElementSize a2)
{
  Swift::String v3;
  Swift::OpaquePointer v5;
  UIImage_optional v6;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6.value.super.isa = 0;
  v6.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v6, 0, 0xFFFFFFFFFFFFFFFFLL, a2, v5);
}

id protocol witness for PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:) in conformance PaperDocumentViewDelegate_Checker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a3, a4, (uint64_t)&unk_1EA844C70, (uint64_t)partial apply for closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:), (uint64_t)&block_descriptor_25);
}

BOOL protocol witness for PaperDocumentViewDelegate.documentViewShouldAllowEditing(_:) in conformance PaperDocumentViewDelegate_Checker(uint64_t a1)
{
  _BYTE *v1;

  v1 = (_BYTE *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  return *v1 != 0;
}

id thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  void *v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v3 = (void *)v1(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:detectedFormInContent:withAutofill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewShouldAllowEditing(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:didDismissViewController:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:shouldOpenLink:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:drawingWillChangeIn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:didChangeEditingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:openFormFilling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:contentFrameDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewDidScroll(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewDidBeginUsingTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewDidEndUsingTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t type metadata accessor for PaperDocumentViewDelegate_Checker()
{
  return objc_opt_self();
}

id specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v13[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  v9 = (void *)objc_opt_self();
  v13[4] = a4;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  v13[3] = a5;
  v10 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v11 = objc_msgSend(v9, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v10);
  swift_release();
  _Block_release(v10);
  return v11;
}

uint64_t sub_1DDC3C990()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

UIMenu partial apply for closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a1, *(UIMenuElementSize *)(v1 + 16));
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

id PasswordViewController.textField.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField);
  }
  else
  {
    v4 = closure #1 in PasswordViewController.textField.getter(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

Swift::Bool __swiftcall PasswordViewController.textFieldShouldReturn(_:)(UITextField *a1)
{
  char *v1;
  void *v2;
  NSString *v4;
  NSString *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  Class isa;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  void *v21;
  id v22;
  Swift::String v23;
  Swift::String_optional v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  UITextField *v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD aBlock[6];
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;

  v2 = v1;
  if (MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate]))
  {
    v4 = -[UITextField text](a1, sel_text);
    if (v4)
    {
      v5 = v4;
      v6 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

    }
    else
    {
      v6 = 0;
      v8 = (void *)0xE000000000000000;
    }
    v9 = PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(v1, v6, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if ((v9 & 1) != 0)
      return 1;
  }
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  isa = paperKitBundle.super.isa;
  v34._countAndFlagsBits = 0xD00000000000001CLL;
  v34._object = (void *)0x80000001DDF529E0;
  v12._object = (void *)0x80000001DDF529C0;
  v12._countAndFlagsBits = 0xD000000000000010;
  v13.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v13.value._object = (void *)0xEB00000000656C62;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v34);
  v35._countAndFlagsBits = 0xD00000000000001ELL;
  v16._countAndFlagsBits = 0xD000000000000020;
  v35._object = (void *)0x80000001DDF52A30;
  v16._object = (void *)0x80000001DDF52A00;
  v17.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v17.value._object = (void *)0xEB00000000656C62;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)isa, v18, v35);
  v20 = (void *)MEMORY[0x1DF0E41AC](v15._countAndFlagsBits, v15._object);
  swift_bridgeObjectRelease();
  v21 = (void *)MEMORY[0x1DF0E41AC](v19._countAndFlagsBits, v19._object);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, v20, v21, 1);

  v36._countAndFlagsBits = 0xD000000000000027;
  v36._object = (void *)0x80000001DDF52A50;
  v23._countAndFlagsBits = 19279;
  v23._object = (void *)0xE200000000000000;
  v24.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v24.value._object = (void *)0xEB00000000656C62;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, paperKitBundle, v25, v36);
  v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = a1;
  swift_retain();
  v29 = a1;
  v30 = (void *)MEMORY[0x1DF0E41AC](v26._countAndFlagsBits, v26._object);
  swift_bridgeObjectRelease();
  aBlock[4] = partial apply for closure #1 in PasswordViewController.textFieldShouldReturn(_:);
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_26;
  v31 = _Block_copy(aBlock);
  swift_release();
  v32 = objc_msgSend((id)objc_opt_self(), sel_actionWithTitle_style_handler_, v30, 0, v31);
  _Block_release(v31);
  swift_release();

  objc_msgSend(v22, sel_addAction_, v32);
  objc_msgSend(v2, sel_presentViewController_animated_completion_, v22, 1, 0);

  return 0;
}

id closure #1 in PasswordViewController.textField.getter(uint64_t a1)
{
  id v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t inited;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::String v25;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3DB8]), sel_init);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v2, sel_setSecureTextEntry_, 1);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
  objc_msgSend(v3, sel_setAlignment_, 1);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v25._object = (void *)0x80000001DDF52A80;
  v4._countAndFlagsBits = 0x64726F7773736150;
  v4._object = (void *)0xE800000000000000;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0xD000000000000023;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF33AB0;
  v9 = (void *)*MEMORY[0x1E0DC1178];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1178];
  v10 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  *(_QWORD *)(inited + 40) = v3;
  v11 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 72) = v11;
  v12 = (void *)objc_opt_self();
  v13 = v9;
  v14 = v3;
  v15 = v11;
  v16 = objc_msgSend(v12, sel_placeholderTextColor);
  *(_QWORD *)(inited + 104) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(_QWORD *)(inited + 80) = v16;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v17 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v18 = (void *)MEMORY[0x1DF0E41AC](v7._countAndFlagsBits, v7._object);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v17, sel_initWithString_attributes_, v18, isa);

  objc_msgSend(v2, sel_setAttributedPlaceholder_, v20);
  v21 = v2;
  v22 = objc_msgSend(v12, sel_systemBackgroundColor);
  objc_msgSend(v21, sel_setBackgroundColor_, v22);

  v23 = objc_msgSend(v12, sel_secondaryLabelColor);
  objc_msgSend(v21, sel_setTextColor_, v23);

  objc_msgSend(v21, sel_setTextAlignment_, 1);
  objc_msgSend(v21, sel_setDelegate_, a1);
  objc_msgSend(v21, sel_setReturnKeyType_, 1);

  return v21;
}

Swift::Void __swiftcall PasswordViewController.loadView()()
{
  char *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  double v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  Class isa;
  id v35;
  id v36;
  id v37;
  objc_super v38;
  Swift::String v39;

  v38.receiver = v0;
  v38.super_class = (Class)type metadata accessor for PasswordViewController();
  objc_msgSendSuper2(&v38, sel_loadView);
  v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v3 = (void *)objc_opt_self();
    v4 = objc_msgSend(v3, sel_secondarySystemBackgroundColor);
    objc_msgSend(v2, sel_setBackgroundColor_, v4);

    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
    objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v6._countAndFlagsBits = 0xD000000000000024;
    v39._object = (void *)0x80000001DDF529A0;
    v6._object = (void *)0x80000001DDF52970;
    v7.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v7.value._object = (void *)0xEB00000000656C62;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v39._countAndFlagsBits = 0xD000000000000019;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, paperKitBundle, v8, v39)._countAndFlagsBits;
    v10 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setText_, v10);

    v11 = objc_msgSend(v3, sel_secondaryLabelColor);
    objc_msgSend(v5, sel_setTextColor_, v11);

    v12 = PasswordViewController.textField.getter();
    objc_msgSend(v2, sel_addSubview_, v5);
    objc_msgSend(v2, sel_addSubview_, v12);
    v13 = objc_msgSend(v12, sel_bottomAnchor);
    v14 = objc_msgSend(v2, sel_centerYAnchor);
    v36 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

    LODWORD(v15) = 1144750080;
    objc_msgSend(v36, sel_setPriority_, v15);
    v16 = objc_msgSend(v12, sel_bottomAnchor);
    v17 = objc_msgSend(v2, sel_keyboardLayoutGuide);
    v18 = objc_msgSend(v17, sel_topAnchor);

    v35 = objc_msgSend(v16, sel_constraintLessThanOrEqualToAnchor_constant_, v18, -2.0);
    v37 = (id)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1DDF39360;
    v20 = objc_msgSend(v12, sel_widthAnchor);
    v21 = objc_msgSend(v5, sel_widthAnchor);
    v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

    *(_QWORD *)(v19 + 32) = v22;
    v23 = objc_msgSend(v12, sel_centerXAnchor);
    v24 = objc_msgSend(v2, sel_centerXAnchor);
    v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

    *(_QWORD *)(v19 + 40) = v25;
    v26 = objc_msgSend(v5, sel_centerXAnchor);
    v27 = objc_msgSend(v2, sel_centerXAnchor);
    v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

    *(_QWORD *)(v19 + 48) = v28;
    v29 = objc_msgSend(v5, sel_bottomAnchor);
    v30 = objc_msgSend(v12, sel_topAnchor);
    v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_constant_, v30, -*(double *)&v0[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromLabelToTextField]);

    *(_QWORD *)(v19 + 56) = v31;
    *(_QWORD *)(v19 + 64) = v35;
    *(_QWORD *)(v19 + 72) = v36;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    v32 = v35;
    v33 = v36;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v37, sel_activateConstraints_, isa);

  }
}

void closure #1 in PasswordViewController.textFieldShouldReturn(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD aBlock[6];

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a3;
    aBlock[4] = partial apply for closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:);
    aBlock[5] = v7;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_10_0;
    v8 = _Block_copy(aBlock);
    v9 = a3;
    swift_release();
    objc_msgSend(v6, sel_dismissViewControllerAnimated_completion_, 1, v8);
    _Block_release(v8);

  }
}

id closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:)(void *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1DF0E41AC](0, 0xE000000000000000);
  objc_msgSend(a1, sel_setText_, v2);

  return objc_msgSend(a1, sel_becomeFirstResponder);
}

id PasswordViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  void *v7;
  id v8;
  objc_super v10;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromLabelToTextField] = 0x4034000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromTopOfKeyboard] = 0x4000000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField] = 0;
  if (a2)
  {
    v7 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for PasswordViewController();
  v8 = objc_msgSendSuper2(&v10, sel_initWithNibName_bundle_, v7, a3);

  return v8;
}

id PasswordViewController.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromLabelToTextField] = 0x4034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromTopOfKeyboard] = 0x4000000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for PasswordViewController();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id PasswordViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PasswordViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PasswordViewController()
{
  return objc_opt_self();
}

uint64_t sub_1DDC3DAB8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDC3DADC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in PasswordViewController.textFieldShouldReturn(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PasswordViewController.textFieldShouldReturn(_:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t sub_1DDC3DB28()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:)(*(void **)(v0 + 16));
}

uint64_t protocol witness for CalculateMathItem.expressionString.getter in conformance PKMathRecognitionItem()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_expression);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id protocol witness for CalculateMathItem.sortIndex.getter in conformance PKMathRecognitionItem()
{
  id *v0;

  return objc_msgSend(*v0, sel_sortIndex);
}

void protocol witness for CalculateMathItem.uuid.getter in conformance PKMathRecognitionItem()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, sel_uuid);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

}

id protocol witness for CalculateMathItem.strokeGroupIdentifier.getter in conformance PKMathRecognitionItem()
{
  id *v0;

  return objc_msgSend(*v0, sel_strokeGroupIdentifier);
}

uint64_t String.stringByInsertingLaTeXSpaces()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v3 = 4 * v2;
  while (1)
  {
    v4._countAndFlagsBits = String.subscript.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    if (v3 == (unint64_t)String.index(_:offsetBy:)() >> 14)
      break;
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
  }
  return 0;
}

uint64_t CalculateExpression.pkTokens.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __objc2_prot_list **p_base_prots;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  void *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  Class isa;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  id v77;
  uint8_t *v78;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  id v92;
  id v93;
  void *v94;
  id v95;
  void *v96;
  uint64_t v97;
  id v98;
  Class v99;
  id v100;
  uint64_t v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _BOOL4 v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  id v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v2, v3);
  v116 = (char *)v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for CalculateExpression.TokenType();
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v5);
  v111 = (char *)v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = MEMORY[0x1E0DEE9D8];
  v7 = CalculateExpression.expression.getter();
  v9 = v8;
  CalculateExpression.plain.getter();
  v10 = dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
  swift_release();
  v11 = v10;
  if (v10 >> 62)
  {
LABEL_83:
    v101 = v11;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v101;
  }
  else
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v118 = v9;
  if (v12)
  {
    v102[1] = v1;
    v117 = 0;
    v13 = 0;
    v110 = v11 & 0xC000000000000001;
    v104 = v11 & 0xFFFFFFFFFFFFFF8;
    v106 = v11;
    v103 = v11 + 32;
    v109 = *MEMORY[0x1E0D09D30];
    v105 = *MEMORY[0x1E0D09D40];
    v14 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v14 = v7 & 0xFFFFFFFFFFFFLL;
    v15 = 11;
    if (((v9 >> 60) & ((v7 & 0x800000000000000) == 0)) == 0)
      v15 = 7;
    v115 = v15 | (v14 << 16);
    v108 = 4 * v14;
    v16 = 15;
    p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
    v114 = v7;
    v107 = v12;
    do
    {
      if (v110)
      {
        v11 = MEMORY[0x1DF0E4D64](v13, v106);
        v20 = v11;
        v21 = __OFADD__(v13, 1);
        v22 = v13 + 1;
        if (v21)
          goto LABEL_80;
      }
      else
      {
        if (v13 >= *(_QWORD *)(v104 + 16))
          goto LABEL_82;
        v20 = *(_QWORD *)(v103 + 8 * v13);
        v11 = swift_retain();
        v21 = __OFADD__(v13, 1);
        v22 = v13 + 1;
        if (v21)
        {
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
      }
      v1 = dispatch thunk of CalculateExpression.Token.text.getter();
      v24 = v23;
      v9 = v7;
      if (String.count.getter() < 2)
      {
        v120 = 0;
        v122 = 0xE000000000000000;
      }
      else
      {
        v120 = String.stringByInsertingLaTeXSpaces()(v1, v24);
        v122 = v25;
      }
      v7 = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11E8]), (SEL)p_base_prots[308]);
      v26 = v111;
      CalculateExpression.Token.type.getter();
      v27 = (*(uint64_t (**)(char *, uint64_t))(v112 + 88))(v26, v113);
      v124 = (id)v7;
      if (v27 == v109)
      {
        v11 = (uint64_t)objc_msgSend((id)v7, sel_setType_, 1);
      }
      else if (v27 == v105)
      {
        v11 = (uint64_t)objc_msgSend(v124, sel_setType_, 2);
      }
      else
      {
        objc_msgSend(v124, sel_setType_, 0);
        v11 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v111, v113);
      }
      if (v108 < v16 >> 14)
        goto LABEL_81;
      v119 = v22;
      v123 = v20;
      swift_bridgeObjectRetain();
      v28 = String.subscript.getter();
      v30 = v29;
      v32 = v31;
      v34 = v33;
      swift_bridgeObjectRelease();
      v127 = v28;
      v128 = v30;
      v129 = v32;
      v130 = v34;
      v125 = v1;
      v126 = v24;
      v35 = type metadata accessor for Locale();
      v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
      v37 = (uint64_t)v116;
      v36(v116, 1, 1, v35);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v121 = lazy protocol witness table accessor for type String and conformance String();
      v38 = StringProtocol.range<A>(of:options:range:locale:)();
      LOBYTE(v28) = v39;
      outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v40 = HIBYTE(v122) & 0xF;
        if ((v122 & 0x2000000000000000) == 0)
          v40 = v120 & 0xFFFFFFFFFFFFLL;
        if (!v40)
          goto LABEL_58;
        swift_bridgeObjectRetain();
        v41 = String.subscript.getter();
        v43 = v42;
        v45 = v44;
        v47 = v46;
        swift_bridgeObjectRelease();
        v127 = v41;
        v128 = v43;
        v129 = v45;
        v130 = v47;
        v24 = v122;
        v1 = v120;
        v125 = v120;
        v126 = v122;
        v48 = (uint64_t)v116;
        v36(v116, 1, 1, v35);
        v38 = StringProtocol.range<A>(of:options:range:locale:)();
        LOBYTE(v41) = v49;
        outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for Locale?);
        swift_bridgeObjectRelease();
        if ((v41 & 1) != 0)
        {
LABEL_58:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (one-time initialization token for logger != -1)
            swift_once();
          v73 = type metadata accessor for Logger();
          __swift_project_value_buffer(v73, (uint64_t)logger);
          v74 = Logger.logObject.getter();
          v75 = static os_log_type_t.default.getter();
          v76 = os_log_type_enabled(v74, v75);
          v77 = v124;
          if (v76)
          {
            v78 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v78 = 0;
            _os_log_impl(&dword_1DDB0F000, v74, v75, "Error parsing Calculate tokens", v78, 2u);
            MEMORY[0x1DF0E6558](v78, -1, -1);
          }

          swift_release();
          return MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      p_base_prots = &MiniMenuController.base_prots;
      if ((v24 & 0x1000000000000000) != 0)
        v50 = String.UTF16View._foreignCount()();
      else
        v50 = String.UTF16View._nativeGetOffset(for:)();
      v122 = v50;
      if (objc_msgSend(v124, sel_type)
        || (v51 = *(_QWORD *)(dispatch thunk of CalculateExpression.Token.errors.getter() + 16),
            swift_bridgeObjectRelease(),
            v51))
      {
        v120 = v38;
        v125 = MEMORY[0x1E0DEE9D8];
        v52 = dispatch thunk of CalculateExpression.Token.errors.getter();
        v53 = *(_QWORD *)(v52 + 16);
        if (v53)
        {
          v54 = (void **)(v52 + 32);
          do
          {
            v55 = *v54;
            swift_getErrorValue();
            v56 = v55;
            v57 = Error.localizedDescription.getter();
            v59 = v58;
            v60 = HIBYTE(v58) & 0xF;
            if ((v58 & 0x2000000000000000) == 0)
              v60 = v57 & 0xFFFFFFFFFFFFLL;
            if (v60)
            {
              v61 = v57;
              v62 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11D8]), sel_init);
              v63 = (void *)MEMORY[0x1DF0E41AC](v61, v59);
              swift_bridgeObjectRelease();
              objc_msgSend(v62, sel_setErrorString_, v63);

              v64 = v62;
              MEMORY[0x1DF0E4398]();
              if (*(_QWORD *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();

            }
            else
            {
              swift_bridgeObjectRelease();
            }

            ++v54;
            --v53;
          }
          while (v53);
        }
        swift_bridgeObjectRelease();
        v65 = v114;
        v127 = v114;
        v128 = v118;
        v66 = String.Index.utf16Offset<A>(in:)();
        v67 = (void *)MEMORY[0x1DF0E41AC](v1, v24);
        swift_bridgeObjectRelease();
        v68 = v124;
        objc_msgSend(v124, sel_setText_, v67);

        v1 = v122;
        objc_msgSend(v68, sel_setCharacterRange_, v66, v122);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKMathRecognitionError);
        swift_bridgeObjectRetain();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v68, sel_setErrors_, isa);

        v70 = v68;
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v71 = v107;
        v13 = v119;
        if (v117)
        {
          swift_bridgeObjectRelease();
          v18 = 1;
        }
        else
        {
          if (v125 >> 62)
          {
            swift_bridgeObjectRetain();
            v72 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v72 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          v18 = v72 != 0;
        }
        v117 = v18;
        v19 = v71;
        v7 = v65;
        v9 = v118;
      }
      else
      {
        swift_bridgeObjectRelease();
        v9 = v118;
        v7 = v114;
        v19 = v107;
        v13 = v119;
        v68 = v124;
        v1 = v122;
      }
      v16 = String.index(_:offsetBy:)();
      swift_release();

    }
    while (v13 != v19);
    swift_bridgeObjectRelease();
    if ((CalculateExpression.isGraphable.getter() & 1) != 0 || v117)
      goto LABEL_74;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((CalculateExpression.isGraphable.getter() & 1) != 0)
      goto LABEL_74;
  }
  v80 = CalculateExpression.error.getter();
  if (v80)
  {
    v81 = (void *)v80;
    swift_getErrorValue();
    v82 = Error.localizedDescription.getter();
    v84 = v83;

    v85 = HIBYTE(v84) & 0xF;
    if ((v84 & 0x2000000000000000) == 0)
      v85 = v82 & 0xFFFFFFFFFFFFLL;
    if (v85)
    {
      if (one-time initialization token for mathLogger != -1)
        swift_once();
      v86 = type metadata accessor for Logger();
      __swift_project_value_buffer(v86, (uint64_t)mathLogger);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v87 = Logger.logObject.getter();
      v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = swift_slowAlloc();
        v124 = (id)swift_slowAlloc();
        v127 = (uint64_t)v124;
        *(_DWORD *)v89 = 136380931;
        v90 = CalculateExpression.expression.getter();
        v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v89 + 12) = 2080;
        swift_bridgeObjectRetain();
        v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, &v127);
        v9 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1DDB0F000, v87, v88, "Found expression error for: %{private}s => %s", (uint8_t *)v89, 0x16u);
        v92 = v124;
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v92, -1, -1);
        MEMORY[0x1DF0E6558](v89, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      v93 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11D8]), sel_init);
      v94 = (void *)MEMORY[0x1DF0E41AC](v82, v84);
      swift_bridgeObjectRelease();
      objc_msgSend(v93, sel_setErrorString_, v94);

      v95 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11E8]), sel_init);
      objc_msgSend(v95, sel_setType_, 5);
      objc_msgSend(v95, sel_setCharacterRange_, 0, String.count.getter());
      v96 = (void *)MEMORY[0x1DF0E41AC](v7, v9);
      swift_bridgeObjectRelease();
      objc_msgSend(v95, sel_setText_, v96);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v97 = swift_allocObject();
      *(_OWORD *)(v97 + 16) = xmmword_1DDF35440;
      *(_QWORD *)(v97 + 32) = v93;
      v127 = v97;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKMathRecognitionError);
      v98 = v93;
      v99 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v95, sel_setErrors_, v99);

      v100 = v95;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      return v131;
    }
    swift_bridgeObjectRelease();
  }
LABEL_74:
  swift_bridgeObjectRelease();
  return v131;
}

Class @objc CalculateDocumentProvider.recognizedExpressions.getter(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t *a5)
{
  id v7;
  uint64_t v8;
  Class isa;

  v7 = a1;
  v8 = swift_bridgeObjectRetain();
  a4(v8);

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(a5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t CalculateDocumentProvider.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  char *v28;
  _BYTE v29[24];
  uint64_t v30;

  v2 = v1;
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v29);
  if (!v30)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Any?);
    goto LABEL_25;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_25:
    v25 = 0;
    return v25 & 1;
  }
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables);
  v5 = *(_QWORD *)&v28[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized static Set.== infix(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
    goto LABEL_24;
  v7 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions);
  if (!(v8 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    v9 = v8;
LABEL_6:
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CHMathExpression);
  v9 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v9 >> 62))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_7:
  swift_bridgeObjectRelease();
  v11 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions;
  v12 = *(_QWORD *)&v28[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions];
  if (!(v12 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    v13 = v12;
LABEL_9:
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CHMathExpression);
  v13 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v13 >> 62))
    goto LABEL_9;
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  if (v10 != v14)
    goto LABEL_24;
  v15 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults;
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults);
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults;
  v19 = *(_QWORD *)&v28[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults];
  if (!(v19 >> 62))
  {
    if (v17 == *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
LABEL_24:

    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v17 != v26)
    goto LABEL_24;
LABEL_15:
  v20 = *(_QWORD *)(v2 + v7);
  v21 = *(_QWORD *)&v28[v11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = specialized static Array<A>.== infix(_:_:)(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
    goto LABEL_24;
  v23 = *(_QWORD *)(v2 + v15);
  v24 = *(_QWORD *)&v28[v18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = specialized static Array<A>.== infix(_:_:)(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v25 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CalculateDocumentProvider.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CalculateDocumentProvider.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CalculateDocumentProvider.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CalculateDocumentProvider.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CalculateDocumentProvider.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CalculateDocumentProvider.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CalculateDocumentProvider.CodingKeys(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x80000001DDF4B030;
  v4 = 0xEB00000000736E6FLL;
  v5 = 0x6973736572707865;
  if (v2 != 1)
  {
    v5 = 0xD000000000000011;
    v4 = 0x80000001DDF4B050;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000011;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance CalculateDocumentProvider.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6973736572707865;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance CalculateDocumentProvider.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CalculateDocumentProvider.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CalculateDocumentProvider.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CalculateDocumentProvider.CodingKeys()
{
  lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CalculateDocumentProvider.CodingKeys()
{
  lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t type metadata accessor for CalculateDocumentProvider()
{
  return objc_opt_self();
}

char *CalculateDocumentProvider.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CalculateDocumentProvider.CodingKeys>);
  v4 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  v9 = a1[3];
  v16 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  v10 = (char *)v8;
  v14 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    v17 = 0;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
    v11 = v15;
    v12 = v14;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables] = v18;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpression]);
    v17 = 1;
    lazy protocol witness table accessor for type [MathExpression] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpression] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpression and conformance MathExpression, (uint64_t)&protocol conformance descriptor for MathExpression, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions] = v18;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpressionEvaluationResult]);
    v17 = 2;
    lazy protocol witness table accessor for type [MathExpressionEvaluationResult] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpressionEvaluationResult] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpressionEvaluationResult and conformance MathExpressionEvaluationResult, (uint64_t)&protocol conformance descriptor for MathExpressionEvaluationResult, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v11);

    *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults] = v18;
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v10;
}

char *protocol witness for Decodable.init(from:) in conformance CalculateDocumentProvider@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = CalculateDocumentProvider.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t CalculateDocumentProvider.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CalculateDocumentProvider.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables);
  HIBYTE(v11) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions);
    HIBYTE(v11) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpression]);
    lazy protocol witness table accessor for type [MathExpression] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpression] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpression and conformance MathExpression, (uint64_t)&protocol conformance descriptor for MathExpression, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults);
    HIBYTE(v11) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpressionEvaluationResult]);
    lazy protocol witness table accessor for type [MathExpressionEvaluationResult] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpressionEvaluationResult] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpressionEvaluationResult and conformance MathExpressionEvaluationResult, (uint64_t)&protocol conformance descriptor for MathExpressionEvaluationResult, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CalculateDocumentProvider(_QWORD *a1)
{
  return CalculateDocumentProvider.encode(to:)(a1);
}

BOOL MathExpression.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  _BYTE v8[24];
  uint64_t v9;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v8);
  if (v9)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit14MathExpression_expression) == *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit14MathExpression_expression]
        && *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit14MathExpression_expression + 8) == *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit14MathExpression_expression + 8];
      if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit14MathExpression_expressionType);
        v5 = *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit14MathExpression_expressionType];

        return v4 == v5;
      }

    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t @objc CalculateDocumentProvider.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MathExpression.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MathExpression.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MathExpression.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MathExpression.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of MathExpression.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MathExpression.CodingKeys(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0xEA00000000006E6FLL;
  if (*v1)
    v2 = 0xEE00657079546E6FLL;
  *a1 = 0x6973736572707865;
  a1[1] = v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MathExpression.CodingKeys()
{
  return 0x6973736572707865;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of MathExpression.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MathExpression.CodingKeys()
{
  lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MathExpression.CodingKeys()
{
  lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t type metadata accessor for MathExpression()
{
  return objc_opt_self();
}

char *MathExpression.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  char v20;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MathExpression.CodingKeys>);
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  v9 = a1[3];
  v18 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  v10 = (char *)v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

  }
  else
  {
    v20 = 0;
    v11 = v17;
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v14 = (uint64_t *)&v10[OBJC_IVAR____TtC8PaperKit14MathExpression_expression];
    *v14 = v12;
    v14[1] = v15;
    swift_bridgeObjectRelease();
    v19 = 1;
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v11);

    *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit14MathExpression_expressionType] = v16;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v10;
}

char *protocol witness for Decodable.init(from:) in conformance MathExpression@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = MathExpression.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t MathExpression.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MathExpression.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MathExpression(_QWORD *a1)
{
  return MathExpression.encode(to:)(a1);
}

id @objc MathExpression.expression.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  v4 = *v3;
  v5 = v3[1];
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x1DF0E41AC](v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t @objc MathExpression.expression.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = (uint64_t *)(a1 + *a4);
  *v7 = v6;
  v7[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t MathExpressionEvaluationResult.strokes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  PKDrawing *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v16;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  v6 = v5;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = type metadata accessor for PKDrawing();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
  v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) != 1)
  {
    PKDrawing._bridgeToObjectiveC()(v9);
    v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v4, v7);
  }
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1238]), sel_initWithDrawing_, v10);

  if (v12)
  {
    v13 = objc_msgSend(v12, sel_orderedStrokes);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CHStroke);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v6 = v13;
  }
  else
  {
    v14 = MEMORY[0x1E0DEE9D8];
  }

  return v14;
}

BOOL MathExpressionEvaluationResult.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  double v21;
  void *v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  BOOL v27;
  char *v29;
  _BYTE v30[24];
  uint64_t v31;

  v2 = v1;
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v30);
  if (v31)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string) == *(_QWORD *)&v29[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string]
        && *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string + 8) == *(_QWORD *)&v29[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string + 8];
      if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v5 = *(void **)&v29[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier];
        v6 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier);
        v7 = v5;
        v8 = static NSObject.== infix(_:_:)();

        if ((v8 & 1) != 0)
        {
          v9 = MathExpressionEvaluationResult.strokes.getter();
          v10 = v9 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();
          v11 = MathExpressionEvaluationResult.strokes.getter();
          v12 = v11 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();
          if (v10 == v12)
          {
            v13 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing);
            if (v13)
            {
              objc_msgSend(v13, sel_bounds);
              v15 = v14;
              v17 = v16;
              v19 = v18;
              v21 = v20;
              v22 = *(void **)&v29[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing];
              if (v22)
              {
LABEL_16:
                objc_msgSend(v22, sel_bounds);
LABEL_23:
                v27 = CGRect.almostEqual(_:threshold:)(v23, v24, v25, v26, 0.1, v15, v17, v19, v21);

                return v27;
              }
            }
            else
            {
              v15 = *MEMORY[0x1E0C9D628];
              v17 = *(double *)(MEMORY[0x1E0C9D628] + 8);
              v19 = *(double *)(MEMORY[0x1E0C9D628] + 16);
              v21 = *(double *)(MEMORY[0x1E0C9D628] + 24);
              v22 = *(void **)&v29[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing];
              if (v22)
                goto LABEL_16;
            }
            v23 = *MEMORY[0x1E0C9D628];
            v24 = *(double *)(MEMORY[0x1E0C9D628] + 8);
            v25 = *(double *)(MEMORY[0x1E0C9D628] + 16);
            v26 = *(double *)(MEMORY[0x1E0C9D628] + 24);
            goto LABEL_23;
          }
        }
      }

    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MathExpressionEvaluationResult.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MathExpressionEvaluationResult.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MathExpressionEvaluationResult.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MathExpressionEvaluationResult.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpressionEvaluationResult.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of MathExpressionEvaluationResult.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  char v6;

  v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  result = swift_bridgeObjectRelease();
  if (v4 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v4)
    v6 = 0;
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MathExpressionEvaluationResult.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x676E69727473;
  if (*v1)
    v2 = 0x44676E6977617264;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEB00000000617461;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MathExpressionEvaluationResult.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x44676E6977617264;
  else
    return 0x676E69727473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MathExpressionEvaluationResult.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of MathExpressionEvaluationResult.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MathExpressionEvaluationResult.CodingKeys()
{
  lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MathExpressionEvaluationResult.CodingKeys()
{
  lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t type metadata accessor for MathExpressionEvaluationResult()
{
  return objc_opt_self();
}

char *MathExpressionEvaluationResult.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MathExpressionEvaluationResult.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  v9 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  v10 = (char *)v8;
  v11 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
  {

    v14 = (uint64_t)v28;
  }
  else
  {
    v12 = v10;
    LOBYTE(v30[0]) = 0;
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    v16 = (uint64_t *)&v10[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string];
    *v16 = v13;
    v16[1] = v17;
    swift_bridgeObjectRelease();
    LOBYTE(v30[0]) = 1;
    v18 = KeyedDecodingContainer.contains(_:)();
    if ((v18 & 1) != 0)
    {
      LOBYTE(v31) = 1;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v29 = v3;
      v21 = v30[0];
      v27 = v30[1];
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_1DDF33AB0;
      *(_QWORD *)(v22 + 32) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
      *(_QWORD *)(v22 + 40) = type metadata accessor for PKDrawingCoherence(0);
      v23 = v21;
      v24 = v27;
      static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v29);
      swift_bridgeObjectRelease();
      v10 = v12;

      outlined consume of Data._Representation(v23, v24);
      if (v30[3])
      {
        if (swift_dynamicCast())
          v25 = v31;
        else
          v25 = 0;
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
        v25 = 0;
      }
      v20 = (uint64_t)v28;
      v19 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing];
      *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing] = v25;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v19 = v10;
      v20 = (uint64_t)v28;
    }

    v14 = v20;
  }
  __swift_destroy_boxed_opaque_existential_1(v14);
  return v10;
}

char *protocol witness for Decodable.init(from:) in conformance MathExpressionEvaluationResult@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = MathExpressionEvaluationResult.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t MathExpressionEvaluationResult.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE v20[8];
  id v21[3];

  v3 = v1;
  v21[2] = *(id *)MEMORY[0x1E0C80C00];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MathExpressionEvaluationResult.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v21[0]) = 0;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v11 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing);
  if (v11)
  {
    v12 = (void *)objc_opt_self();
    v21[0] = 0;
    v13 = v11;
    v14 = objc_msgSend(v12, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v13, 1, v21);
    v15 = v21[0];
    if (v14)
    {
      v16 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v17;

      v21[0] = v16;
      v21[1] = v18;
      v20[7] = 1;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);

      return outlined consume of Data._Representation((uint64_t)v16, (unint64_t)v18);
    }
    v19 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MathExpressionEvaluationResult(_QWORD *a1)
{
  return MathExpressionEvaluationResult.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DrawingIdentifier()
{
  void **v0;
  void *v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v1, sel_hash));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DrawingIdentifier()
{
  id *v0;

  Hasher._combine(_:)((Swift::UInt)objc_msgSend(*v0, sel_hash));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DrawingIdentifier()
{
  void **v0;
  void *v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v1, sel_hash));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DrawingIdentifier()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

void *one-time initialization function for controllers()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static CalculateDocumentController.controllers = result;
  return result;
}

id CalculateDocumentController.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  objc_super v16;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers] = MEMORY[0x1E0DEE9D8];
  v6 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForResults;
  v7 = v0;
  *(_QWORD *)&v0[v6] = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v8 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForTokens;
  *(_QWORD *)&v7[v8] = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs] = MEMORY[0x1E0DEE9E8];
  v9 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionStrokeGroups;
  *(_QWORD *)&v7[v9] = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v10 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings;
  *(_QWORD *)&v7[v10] = specialized Dictionary.init(dictionaryLiteral:)(v5);

  v11 = (objc_class *)type metadata accessor for CalculateDocumentController();
  v16.receiver = v7;
  v16.super_class = v11;
  v12 = objc_msgSendSuper2(&v16, sel_init);
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in CalculateDocumentController.init(), v14);
  swift_release();
  return v12;
}

uint64_t closure #1 in CalculateDocumentController.init()()
{
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 24) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  swift_release();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  dispatch thunk of CalculateDocument.expressions.getter();
  swift_bridgeObjectRelease();
  dispatch thunk of CalculateDocument.declaredSymbols.getter();
  return swift_bridgeObjectRelease();
}

void (*implicit closure #1 in CalculateDocumentController.trackExpressions(in:)())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v1 = swift_allocObject();
  swift_weakInit();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:);
}

void closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v12 = MEMORY[0x1DF0E666C](a1 + 16);
  if (v12)
  {
    v13 = (void *)v12;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v24 = static OS_dispatch_queue.main.getter();
      v14 = swift_allocObject();
      v25 = v7;
      v15 = v14;
      swift_unknownObjectWeakInit();
      v16 = swift_allocObject();
      swift_weakInit();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v15;
      *(_QWORD *)(v17 + 24) = v16;
      aBlock[4] = partial apply for closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:);
      aBlock[5] = v17;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_27;
      v18 = _Block_copy(aBlock);
      v23 = v8;
      v19 = v18;
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v26 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      v22 = v3;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v20 = (void *)v24;
      MEMORY[0x1DF0E48C0](0, v11, v6, v19);
      _Block_release(v19);

      swift_release();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v2);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v25);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

void closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      objc_msgSend((id)objc_opt_self(), sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v3, sel_sendExpressionsChanged, 0);
      v4 = objc_msgSend(v3, sel_performSelector_withObject_afterDelay_, sel_sendExpressionsChanged, 0, 0.1);
      MEMORY[0x1E0C80A78](v4, v5);
      withObservationTracking<A>(_:onChange:)();

      swift_release();
    }
    else
    {

    }
  }
}

uint64_t CalculateDocumentController.updateTokens(expression:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  char v19;
  _DWORD v21[2];
  uint64_t v22;
  uint64_t v23[3];

  v3 = v2;
  v5 = CalculateExpression.pkTokens.getter();
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)mathLogger);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v23[0] = v10;
    *(_DWORD *)v9 = 136380931;
    v11 = CalculateExpression.expression.getter();
    v21[1] = (unint64_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v23) >> 32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 1024;
    v13 = CalculateExpression.isGraphable.getter();
    swift_release();
    v21[0] = v13 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1DDB0F000, v7, v8, "updateTokens for: %{private}s, graphable: %{BOOL}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v10, -1, -1);
    MEMORY[0x1DF0E6558](v9, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v14 = v3 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
  swift_beginAccess();
  v15 = *(_QWORD *)(*(_QWORD *)v14 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)v14 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of WeakObserver(v16, (uint64_t)v21);
      if (MEMORY[0x1DF0E666C](v21))
      {
        v17 = v22;
        ObjectType = swift_getObjectType();
        v19 = CalculateExpression.isGraphable.getter();
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 24))(v5, a2, v19 & 1, ObjectType, v17);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v21);
      v16 += 16;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)();
  uint64_t v64;
  int isUniquelyReferenced_nonNull_native;
  char v66;
  unint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t v95;
  void (*v96)(char *, unint64_t, uint64_t);
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char v111;
  void *v112;
  uint64_t v113;
  uint64_t ObjectType;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t inited;
  void *v128;
  id v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  char *v138;
  void *v139;
  char *v140;
  char *v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  void *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  char *v156;
  int64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int64_t v161;
  uint64_t v162;
  unint64_t v163;
  int64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  char v173;
  char v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  char v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  void *v188;
  char *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  char v195;
  void *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  void (*v209)(uint64_t, uint64_t);
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t (*v213)();
  void (*v214)(uint64_t, uint64_t (*)());
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)();
  uint64_t v218;
  void *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  unsigned int v224;
  void *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  id v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  int64_t v240;
  char *v241;
  char *v242;
  int64_t v243;
  char *v244;
  uint64_t v245;
  int64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v254;
  int64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  __int128 aBlock;
  __int128 v262;
  uint64_t (*v263)();
  uint64_t v264;
  __int128 v265;
  unint64_t v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;

  v256 = a4;
  v248 = a3;
  v230 = a2;
  v222 = a1;
  v228 = type metadata accessor for CalculateExpression.Base();
  v227 = *(_QWORD *)(v228 - 8);
  MEMORY[0x1E0C80A78](v228, v5);
  v226 = (char *)&v221 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v237 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v238 = (char *)&v221 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = type metadata accessor for DispatchQoS();
  v235 = *(_QWORD *)(v236 - 8);
  MEMORY[0x1E0C80A78](v236, v10);
  v12 = (char *)&v221 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v13, v14);
  v245 = (uint64_t)&v221 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v221 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v221 - v22;
  v24 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v221 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v260 = (unint64_t)&v221 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v234 = (char *)&v221 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v233 = (char *)&v221 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v250 = (uint64_t)&v221 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v242 = (char *)&v221 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v241 = (char *)&v221 - v46;
  v49 = MEMORY[0x1E0C80A78](v47, v48);
  v51 = (char *)&v221 - v50;
  v249 = v4;
  v52 = &v4[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  if (MEMORY[0x1DF0E666C](&v4[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document], v49))
  {
    v239 = v23;
    v231 = v12;
    v232 = v7;
    v244 = v28;
    v259 = v25;
    v257 = *((_QWORD *)v52 + 1);
    if (one-time initialization token for mathLogger != -1)
      goto LABEL_130;
    while (1)
    {
      v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)mathLogger);
      v54 = v222;
      swift_bridgeObjectRetain();
      v55 = v230;
      swift_bridgeObjectRetain();
      v56 = v248;
      swift_bridgeObjectRetain();
      v57 = Logger.logObject.getter();
      v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc();
        *(_DWORD *)v59 = 134218496;
        *(_QWORD *)&aBlock = *(_QWORD *)(v54 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 12) = 2048;
        *(_QWORD *)&aBlock = *(_QWORD *)(v55 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 22) = 2048;
        *(_QWORD *)&aBlock = *(_QWORD *)(v56 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v57, v58, "CalculateDocumentController mathDidUpdateExpressions: updated: %ld, new: %ld, removed: %ld", (uint8_t *)v59, 0x20u);
        MEMORY[0x1DF0E6558](v59, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v60 = *((_QWORD *)v256 + 2);
      v252 = v19;
      if (v60)
      {
        v19 = v256 + 32;
        swift_bridgeObjectRetain();
        v258 = MEMORY[0x1E0DEE9E0];
        while (1)
        {
          outlined init with copy of FindResult((uint64_t)v19, (uint64_t)&aBlock);
          v62 = *((_QWORD *)&v262 + 1);
          v63 = v263;
          __swift_project_boxed_opaque_existential_1(&aBlock, *((uint64_t *)&v262 + 1));
          (*((void (**)(uint64_t, uint64_t (*)()))v63 + 3))(v62, v63);
          outlined init with copy of FindResult((uint64_t)&aBlock, (uint64_t)&v267);
          v64 = v258;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v265 = v64;
          v67 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v51);
          v68 = *(_QWORD *)(v64 + 16);
          v69 = (v66 & 1) == 0;
          v70 = v68 + v69;
          if (__OFADD__(v68, v69))
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }
          v71 = v66;
          if (*(_QWORD *)(v64 + 24) >= v70)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v70, isUniquelyReferenced_nonNull_native);
            v72 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v51);
            if ((v71 & 1) != (v73 & 1))
            {
LABEL_140:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            v67 = v72;
          }
          v74 = (_QWORD *)v265;
          if ((v71 & 1) != 0)
          {
            v258 = v265;
            v61 = *(_QWORD *)(v265 + 56) + 40 * v67;
            __swift_destroy_boxed_opaque_existential_1(v61);
            outlined init with take of FindResult(&v267, v61);
          }
          else
          {
            *(_QWORD *)(v265 + 8 * (v67 >> 6) + 64) |= 1 << v67;
            (*(void (**)(unint64_t, char *, uint64_t))(v259 + 16))(v74[6] + *(_QWORD *)(v259 + 72) * v67, v51, v24);
            outlined init with take of FindResult(&v267, v74[7] + 40 * v67);
            v75 = v74[2];
            v76 = __OFADD__(v75, 1);
            v77 = v75 + 1;
            if (v76)
              goto LABEL_125;
            v74[2] = v77;
            v258 = v265;
          }
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v259 + 8))(v51, v24);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
          v19 += 40;
          if (!--v60)
          {
            swift_bridgeObjectRelease();
            v19 = v252;
            goto LABEL_21;
          }
        }
      }
      v258 = MEMORY[0x1E0DEE9E0];
LABEL_21:
      v229 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 1);
      v266 = MEMORY[0x1E0DEE9D8];
      v78 = v222;
      swift_bridgeObjectRetain();
      v79 = v230;
      swift_bridgeObjectRetain();
      specialized Set.union<A>(_:)(v78, v79);
      v80 = 0;
      v82 = *(_QWORD *)(v81 + 56);
      v240 = v81 + 56;
      v246 = v81;
      v83 = 1 << *(_BYTE *)(v81 + 32);
      v84 = -1;
      if (v83 < 64)
        v84 = ~(-1 << v83);
      v85 = v84 & v82;
      v251 = &v249[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs];
      v256 = &v249[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionStrokeGroups];
      v243 = (unint64_t)(v83 + 63) >> 6;
      v225 = (void *)*MEMORY[0x1E0D09E80];
      v224 = *MEMORY[0x1E0D09CA0];
      v223 = xmmword_1DDF32CF0;
      v86 = v259;
      v87 = v258;
      v88 = v239;
      v89 = v242;
      v90 = (uint64_t)v241;
      while (1)
      {
        if (v85)
        {
          v254 = (v85 - 1) & v85;
          v255 = v80;
          v91 = __clz(__rbit64(v85)) | (v80 << 6);
          goto LABEL_42;
        }
        v92 = v80 + 1;
        if (__OFADD__(v80, 1))
          goto LABEL_126;
        if (v92 >= v243)
          break;
        v93 = *(_QWORD *)(v240 + 8 * v92);
        v94 = v80 + 1;
        if (!v93)
        {
          v94 = v80 + 2;
          if (v80 + 2 >= v243)
            break;
          v93 = *(_QWORD *)(v240 + 8 * v94);
          if (!v93)
          {
            v94 = v80 + 3;
            if (v80 + 3 >= v243)
              break;
            v93 = *(_QWORD *)(v240 + 8 * v94);
            if (!v93)
            {
              v95 = v80 + 4;
              if (v80 + 4 >= v243)
                break;
              v93 = *(_QWORD *)(v240 + 8 * v95);
              if (!v93)
              {
                while (1)
                {
                  v94 = v95 + 1;
                  if (__OFADD__(v95, 1))
                    goto LABEL_128;
                  if (v94 >= v243)
                    goto LABEL_64;
                  v93 = *(_QWORD *)(v240 + 8 * v94);
                  ++v95;
                  if (v93)
                    goto LABEL_41;
                }
              }
              v94 = v80 + 4;
            }
          }
        }
LABEL_41:
        v254 = (v93 - 1) & v93;
        v255 = v94;
        v91 = __clz(__rbit64(v93)) + (v94 << 6);
LABEL_42:
        v96 = *(void (**)(char *, unint64_t, uint64_t))(v86 + 16);
        v96(v88, *(_QWORD *)(v246 + 48) + *(_QWORD *)(v86 + 72) * v91, v24);
        v51 = *(char **)(v86 + 56);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v51)(v88, 0, 1, v24);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v88, 1, v24) == 1)
          goto LABEL_65;
        (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v90, v88, v24);
        if (*(_QWORD *)(v87 + 16) && (v97 = specialized __RawDictionaryStorage.find<A>(_:)(v90), (v98 & 1) != 0))
        {
          outlined init with copy of FindResult(*(_QWORD *)(v87 + 56) + 40 * v97, (uint64_t)&aBlock);
        }
        else
        {
          v263 = 0;
          v262 = 0u;
          aBlock = 0u;
        }
        v51 = *(char **)(v86 + 8);
        ((void (*)(uint64_t, uint64_t))v51)(v90, v24);
        if (*((_QWORD *)&v262 + 1))
        {
          outlined init with take of FindResult(&aBlock, (uint64_t)&v267);
          v99 = *((_QWORD *)&v268 + 1);
          v100 = v269;
          __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
          v101 = (*(double (**)(uint64_t, uint64_t))(v100 + 16))(v99, v100);
          v102 = *((_QWORD *)&v268 + 1);
          v103 = v269;
          __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
          (*(void (**)(uint64_t, uint64_t))(v103 + 24))(v102, v103);
          v104 = v233;
          v96(v233, (unint64_t)v89, v24);
          swift_beginAccess();
          v105 = v250;
          specialized Set._Variant.insert(_:)(v250, v104);
          ((void (*)(uint64_t, uint64_t))v51)(v105, v24);
          swift_endAccess();
          v106 = (uint64_t)v234;
          v96(v234, (unint64_t)v89, v24);
          v107 = *((_QWORD *)&v268 + 1);
          v108 = v269;
          __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
          v109 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 32))(v107, v108);
          v110 = v256;
          swift_beginAccess();
          if (v109)
          {
            v111 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v265 = *(_QWORD *)v110;
            *(_QWORD *)v110 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v109, v106, v111);
            *(_QWORD *)v110 = v265;
            swift_bridgeObjectRelease();
            ((void (*)(uint64_t, uint64_t))v51)(v106, v24);
          }
          else
          {
            v112 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v106);
            ((void (*)(uint64_t, uint64_t))v51)(v106, v24);

          }
          v113 = v257;
          swift_endAccess();
          ObjectType = swift_getObjectType();
          v115 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v113 + 48))(v89, ObjectType, v113);
          v247 = v51;
          if (v115)
          {
            v116 = v115;
            v117 = CalculateExpression.expression.getter();
            v119 = v118;
            v121 = *((_QWORD *)&v268 + 1);
            v120 = v269;
            __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
            if (v117 == (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 8))(v121, v120) && v119 == v122)
            {
              swift_bridgeObjectRelease_n();
              v123 = v257;
              v124 = v232;
            }
            else
            {
              v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v123 = v257;
              v124 = v232;
              if ((v142 & 1) == 0)
              {
                v143 = *((_QWORD *)&v268 + 1);
                v144 = v269;
                __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
                (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v143, v144);
                CalculateExpression.expression.setter();
              }
            }
            *(double *)&aBlock = v101;
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v123 + 32))(v116, &aBlock, ObjectType, v123);
            v145 = swift_retain();
            MEMORY[0x1DF0E4398](v145);
            v86 = v259;
            if (*(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
            v136 = (void *)static OS_dispatch_queue.main.getter();
            outlined init with copy of FindResult((uint64_t)&v267, (uint64_t)&v265);
            v146 = swift_allocObject();
            v147 = v249;
            *(_QWORD *)(v146 + 16) = v249;
            *(_QWORD *)(v146 + 24) = v116;
            outlined init with take of FindResult(&v265, v146 + 32);
            v263 = partial apply for closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:);
            v264 = v146;
            *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
            *((_QWORD *)&aBlock + 1) = 1107296256;
            *(_QWORD *)&v262 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            *((_QWORD *)&v262 + 1) = &block_descriptor_54_1;
            v148 = _Block_copy(&aBlock);
            swift_retain();
            v149 = v147;
            swift_release();
            v51 = v231;
            static DispatchQoS.unspecified.getter();
            *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            v141 = v238;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            MEMORY[0x1DF0E48C0](0, v51, v141, v148);
            _Block_release(v148);
            swift_release();
          }
          else
          {
            v125 = *((_QWORD *)&v268 + 1);
            v126 = v269;
            __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
            (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v125, v126);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v223;
            v128 = v225;
            *(_QWORD *)(inited + 32) = v225;
            *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            v129 = v229;
            *(_QWORD *)(inited + 40) = v229;
            v130 = v128;
            v131 = v129;
            specialized Dictionary.init(dictionaryLiteral:)(inited);
            v132 = *((_QWORD *)&v268 + 1);
            v133 = v269;
            __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
            (*(void (**)(uint64_t, uint64_t))(v133 + 24))(v132, v133);
            (*(void (**)(char *, _QWORD, uint64_t))(v227 + 104))(v226, v224, v228);
            type metadata accessor for CalculateExpression();
            swift_allocObject();
            v134 = CalculateExpression.init(_:options:base:id:)();
            v135 = swift_retain();
            MEMORY[0x1DF0E4398](v135);
            if (*(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            *(double *)&aBlock = v101;
            (*(void (**)(uint64_t, __int128 *, uint64_t))(v257 + 24))(v134, &aBlock, ObjectType);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
            v136 = (void *)static OS_dispatch_queue.main.getter();
            outlined init with copy of FindResult((uint64_t)&v267, (uint64_t)&v265);
            v137 = swift_allocObject();
            v138 = v249;
            *(_QWORD *)(v137 + 16) = v249;
            *(_QWORD *)(v137 + 24) = v134;
            outlined init with take of FindResult(&v265, v137 + 32);
            v263 = partial apply for closure #3 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:);
            v264 = v137;
            *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
            *((_QWORD *)&aBlock + 1) = 1107296256;
            *(_QWORD *)&v262 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            *((_QWORD *)&v262 + 1) = &block_descriptor_48_0;
            v139 = _Block_copy(&aBlock);
            v140 = v138;
            swift_retain();
            swift_release();
            v51 = v231;
            static DispatchQoS.unspecified.getter();
            *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            v141 = v238;
            v124 = v232;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            MEMORY[0x1DF0E48C0](0, v51, v141, v139);
            _Block_release(v139);
            swift_release();
            v86 = v259;
          }

          (*(void (**)(char *, uint64_t))(v237 + 8))(v141, v124);
          (*(void (**)(char *, uint64_t))(v235 + 8))(v51, v236);
          v89 = v242;
          ((void (*)(char *, uint64_t))v247)(v242, v24);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v267);
          v19 = v252;
          v87 = v258;
          v88 = v239;
          v90 = (uint64_t)v241;
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for CalculateMathItem?);
        }
        v80 = v255;
        v85 = v254;
      }
LABEL_64:
      v51 = *(char **)(v86 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v51)(v88, 1, 1, v24);
LABEL_65:
      swift_release();
      v150 = *(_QWORD *)(v248 + 56);
      v243 = v248 + 56;
      v151 = 1 << *(_BYTE *)(v248 + 32);
      v152 = -1;
      if (v151 < 64)
        v152 = ~(-1 << v151);
      v153 = v152 & v150;
      v154 = (uint64_t *)&v249[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForTokens];
      v155 = (uint64_t *)&v249[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForResults];
      v156 = &v249[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings];
      v246 = (unint64_t)(v151 + 63) >> 6;
      swift_bridgeObjectRetain();
      v157 = 0;
      v254 = (uint64_t)v154;
      v247 = v51;
      while (2)
      {
        if (v153)
        {
          v158 = __clz(__rbit64(v153));
          v159 = (v153 - 1) & v153;
          v255 = v157;
          v160 = v158 | (v157 << 6);
          goto LABEL_85;
        }
        v161 = v157 + 1;
        if (__OFADD__(v157, 1))
          goto LABEL_127;
        v162 = v230;
        if (v161 >= v246)
        {
LABEL_107:
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v51)(v19, 1, 1, v24);
          swift_release();
          goto LABEL_108;
        }
        v163 = *(_QWORD *)(v243 + 8 * v161);
        v164 = v157 + 1;
        if (v163)
          goto LABEL_84;
        v164 = v157 + 2;
        if (v157 + 2 >= v246)
          goto LABEL_107;
        v163 = *(_QWORD *)(v243 + 8 * v164);
        if (v163)
          goto LABEL_84;
        v164 = v157 + 3;
        if (v157 + 3 >= v246)
          goto LABEL_107;
        v163 = *(_QWORD *)(v243 + 8 * v164);
        if (v163)
          goto LABEL_84;
        v165 = v157 + 4;
        if (v157 + 4 >= v246)
          goto LABEL_107;
        v163 = *(_QWORD *)(v243 + 8 * v165);
        if (v163)
        {
          v164 = v157 + 4;
LABEL_84:
          v159 = (v163 - 1) & v163;
          v255 = v164;
          v160 = __clz(__rbit64(v163)) + (v164 << 6);
LABEL_85:
          v166 = *(_QWORD *)(v86 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v86 + 16))(v19, *(_QWORD *)(v248 + 48) + v166 * v160, v24);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v51)(v19, 0, 1, v24);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v19, 1, v24) != 1)
          {
            v167 = v159;
            v168 = v156;
            v169 = v155;
            v170 = v260;
            (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))(v260, v19, v24);
            swift_beginAccess();
            v171 = v154;
            swift_bridgeObjectRetain();
            v172 = specialized __RawDictionaryStorage.find<A>(_:)(v170);
            v174 = v173;
            swift_bridgeObjectRelease();
            if ((v174 & 1) != 0)
            {
              v175 = swift_isUniquelyReferenced_nonNull_native();
              v176 = *v154;
              *(_QWORD *)&v265 = *v154;
              *v154 = 0x8000000000000000;
              if ((v175 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                v176 = v265;
              }
              (*(void (**)(unint64_t, uint64_t))(v86 + 8))(*(_QWORD *)(v176 + 48) + v172 * v166, v24);
              v177 = v265;
              outlined init with take of WeakCalculateExpression(*(_QWORD *)(v265 + 56) + 8 * v172, (uint64_t)&v267);
              specialized _NativeDictionary._delete(at:)(v172, v177);
              *v171 = v177;
              swift_bridgeObjectRelease();
            }
            else
            {
              *(_QWORD *)&v267 = 0;
            }
            BYTE8(v267) = (v174 & 1) == 0;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v267, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
            swift_endAccess();
            v155 = v169;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            v178 = specialized __RawDictionaryStorage.find<A>(_:)(v260);
            v180 = v179;
            swift_bridgeObjectRelease();
            if ((v180 & 1) != 0)
            {
              v181 = swift_isUniquelyReferenced_nonNull_native();
              v182 = *v169;
              *(_QWORD *)&v265 = *v169;
              *v169 = 0x8000000000000000;
              v156 = v168;
              if ((v181 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                v182 = v265;
              }
              (*(void (**)(unint64_t, uint64_t))(v86 + 8))(*(_QWORD *)(v182 + 48) + v178 * v166, v24);
              v183 = v265;
              outlined init with take of WeakCalculateExpression(*(_QWORD *)(v265 + 56) + 8 * v178, (uint64_t)&v267);
              specialized _NativeDictionary._delete(at:)(v178, v183);
              *v155 = v183;
              swift_bridgeObjectRelease();
            }
            else
            {
              *(_QWORD *)&v267 = 0;
              v156 = v168;
            }
            v153 = v167;
            BYTE8(v267) = (v180 & 1) == 0;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v267, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
            swift_endAccess();
            swift_beginAccess();
            v184 = v245;
            v185 = v260;
            specialized Set._Variant.remove(_:)(v260, v245);
            outlined destroy of StocksKitCurrencyCache.Provider?(v184, &demangling cache variable for type metadata for UUID?);
            swift_endAccess();
            swift_beginAccess();
            swift_bridgeObjectRetain();
            v186 = specialized __RawDictionaryStorage.find<A>(_:)(v185);
            LOBYTE(v185) = v187;
            swift_bridgeObjectRelease();
            v188 = 0;
            v51 = v247;
            if ((v185 & 1) != 0)
            {
              v189 = v256;
              v190 = swift_isUniquelyReferenced_nonNull_native();
              v191 = *(_QWORD *)v189;
              *(_QWORD *)&v267 = *(_QWORD *)v189;
              *(_QWORD *)v189 = 0x8000000000000000;
              if (!v190)
              {
                specialized _NativeDictionary.copy()();
                v191 = v267;
              }
              (*(void (**)(unint64_t, uint64_t))(v259 + 8))(*(_QWORD *)(v191 + 48) + v186 * v166, v24);
              v192 = v267;
              v188 = *(void **)(*(_QWORD *)(v267 + 56) + 8 * v186);
              specialized _NativeDictionary._delete(at:)(v186, v267);
              *(_QWORD *)v189 = v192;
              swift_bridgeObjectRelease();
            }
            swift_endAccess();

            swift_beginAccess();
            swift_bridgeObjectRetain();
            v193 = specialized __RawDictionaryStorage.find<A>(_:)(v260);
            v195 = v194;
            swift_bridgeObjectRelease();
            v196 = 0;
            if ((v195 & 1) != 0)
            {
              v197 = swift_isUniquelyReferenced_nonNull_native();
              v198 = *(_QWORD *)v156;
              *(_QWORD *)&v267 = *(_QWORD *)v156;
              *(_QWORD *)v156 = 0x8000000000000000;
              if (!v197)
              {
                specialized _NativeDictionary.copy()();
                v198 = v267;
              }
              (*(void (**)(unint64_t, uint64_t))(v259 + 8))(*(_QWORD *)(v198 + 48) + v193 * v166, v24);
              v199 = v267;
              v196 = *(void **)(*(_QWORD *)(v267 + 56) + 8 * v193);
              specialized _NativeDictionary._delete(at:)(v193, v267);
              *(_QWORD *)v156 = v199;
              swift_bridgeObjectRelease();
            }
            swift_endAccess();

            v200 = swift_getObjectType();
            v201 = v257;
            if ((*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v257 + 48))(v260, v200, v257))
            {
              (*(void (**)(void))(v201 + 40))();
              swift_release();
            }
            v86 = v259;
            (*(void (**)(unint64_t, uint64_t))(v259 + 8))(v260, v24);
            v19 = v252;
            v87 = v258;
            v154 = (uint64_t *)v254;
            v157 = v255;
            continue;
          }
          swift_release();
          v162 = v230;
LABEL_108:
          v202 = v266;
          v203 = (uint64_t)v244;
          if (v266 >> 62)
          {
            swift_bridgeObjectRetain();
            v204 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v204)
              goto LABEL_132;
LABEL_110:
            if (v204 < 1)
            {
              __break(1u);
              goto LABEL_140;
            }
            v205 = 0;
            v260 = v202 & 0xC000000000000001;
            do
            {
              if (v260)
              {
                v206 = MEMORY[0x1DF0E4D64](v205, v202);
              }
              else
              {
                v206 = *(_QWORD *)(v202 + 8 * v205 + 32);
                swift_retain();
              }
              CalculateExpression.id.getter();
              if (*(_QWORD *)(v87 + 16)
                && (v207 = specialized __RawDictionaryStorage.find<A>(_:)(v203), (v208 & 1) != 0))
              {
                outlined init with copy of FindResult(*(_QWORD *)(v87 + 56) + 40 * v207, (uint64_t)&v267);
              }
              else
              {
                v269 = 0;
                v267 = 0u;
                v268 = 0u;
              }
              v209 = *(void (**)(uint64_t, uint64_t))(v259 + 8);
              v209(v203, v24);
              if (*((_QWORD *)&v268 + 1))
              {
                outlined init with take of FindResult(&v267, (uint64_t)&aBlock);
                v210 = *((_QWORD *)&v262 + 1);
                v211 = v204;
                v212 = v202;
                v213 = v263;
                __swift_project_boxed_opaque_existential_1(&aBlock, *((uint64_t *)&v262 + 1));
                v214 = (void (*)(uint64_t, uint64_t (*)()))*((_QWORD *)v213 + 3);
                v215 = v250;
                v216 = v210;
                v203 = (uint64_t)v244;
                v217 = v213;
                v202 = v212;
                v204 = v211;
                v214(v216, v217);
                CalculateDocumentController.trackTokens(for:itemUUID:)(v206, v215);
                swift_release();
                v218 = v215;
                v87 = v258;
                v209(v218, v24);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
              }
              else
              {
                swift_release();
                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v267, &demangling cache variable for type metadata for CalculateMathItem?);
              }
              ++v205;
            }
            while (v204 != v205);
            swift_bridgeObjectRelease();
            v162 = v230;
          }
          else
          {
            v204 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v204)
              goto LABEL_110;
LABEL_132:
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v162 + 16) || *(_QWORD *)(v222 + 16) || *(_QWORD *)(v248 + 16))
          {
            v219 = (void *)objc_opt_self();
            v220 = v249;
            objc_msgSend(v219, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v249, sel_sendExpressionsChanged, 0);
            objc_msgSend(v220, sel_performSelector_withObject_afterDelay_, sel_sendExpressionsChanged, 0, 0.1);
          }
          swift_unknownObjectRelease();

          return;
        }
        break;
      }
      while (1)
      {
        v164 = v165 + 1;
        if (__OFADD__(v165, 1))
          break;
        if (v164 >= v246)
          goto LABEL_107;
        v163 = *(_QWORD *)(v243 + 8 * v164);
        ++v165;
        if (v163)
          goto LABEL_84;
      }
LABEL_129:
      __break(1u);
LABEL_130:
      swift_once();
    }
  }
}

