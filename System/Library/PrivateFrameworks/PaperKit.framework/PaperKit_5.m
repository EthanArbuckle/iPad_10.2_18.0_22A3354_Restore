id PaperDocumentView.canZoomIn.getter()
{
  return PaperDocumentView.canGoToNextPage.getter((SEL *)&selRef_canZoomIn);
}

Swift::Void __swiftcall PaperDocumentView.zoomIn()()
{
  PaperDocumentView.goToNextPage()((SEL *)&selRef_zoomIn_);
}

id PaperDocumentView.canZoomOut.getter()
{
  return PaperDocumentView.canGoToNextPage.getter((SEL *)&selRef_canZoomOut);
}

id PaperDocumentView.canGoToNextPage.getter(SEL *a1)
{
  uint64_t v1;
  id *v3;
  id result;

  v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  result = *v3;
  if (*v3)
    return objc_msgSend(result, *a1);
  __break(1u);
  return result;
}

Swift::Void __swiftcall PaperDocumentView.zoomOut()()
{
  PaperDocumentView.goToNextPage()((SEL *)&selRef_zoomOut_);
}

id PaperDocumentView.goToNextPage()(SEL *a1)
{
  uint64_t v1;
  id *v3;
  id result;

  v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  result = *v3;
  if (*v3)
    return objc_msgSend(result, *a1, 0);
  __break(1u);
  return result;
}

void PaperDocumentView.page(for:nearest:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v13)
  {
    __break(1u);
    return;
  }
  v14 = objc_msgSend(*v13, sel_pageForPoint_nearest_, a1 & 1, a3, a4);
  if (!v14)
  {
LABEL_7:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
    return;
  }
  v15 = v14;
  type metadata accessor for PaperKitPDFPage(0);
  v16 = swift_dynamicCastClass();
  if (!v16)
  {

    goto LABEL_7;
  }
  v17 = v16 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v17, (uint64_t)v12, &demangling cache variable for type metadata for PageId?);
  v18 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v12, 1, v18))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for PageId?);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v12[*(int *)(v18 + 20)], a2, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for PageId?);
  }

}

void PaperDocumentView.convert(_:to:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  id *v27;
  id v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v37;
  CGFloat v38;
  double v39[3];
  CGFloat v40;
  _BYTE v41[16];
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v14 = *v13;
  v42 = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.canvas(for:), (uint64_t)v41, v14);
  v16 = v15;
  swift_bridgeObjectRelease();
  if (v16)
  {
    v17 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v17, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    WeakTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v18 = v44;
    if (!v44)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, &demangling cache variable for type metadata for PaperPage?);
      return;
    }
    v19 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    v27 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v27)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
    v28 = objc_msgSend(*v27, sel_viewForPage_, v16);
    if (v28)
    {
      v29 = v28;
      v40 = v20;
      if (*v27)
      {
        objc_msgSend(*v27, sel_convertPoint_toPage_, v16, a2, a3);
        v31 = v30;
        v39[2] = v32;
        objc_msgSend(v29, sel_bounds);
        x = v46.origin.x;
        y = v46.origin.y;
        width = v46.size.width;
        height = v46.size.height;
        v37 = v31 - CGRectGetMinX(v46);
        v47.origin.x = x;
        v47.origin.y = y;
        v47.size.width = width;
        v47.size.height = height;
        v39[1] = v37 / CGRectGetWidth(v47);
        v48.origin.x = x;
        v48.origin.y = y;
        v48.size.width = width;
        v48.size.height = height;
        CGRectGetMinY(v48);
        v49.origin.x = x;
        v49.origin.y = y;
        v49.size.width = width;
        v49.size.height = height;
        CGRectGetHeight(v49);
        v38 = v40;
        v50.origin.x = v40;
        v50.origin.y = v22;
        v50.size.width = v24;
        v50.size.height = v26;
        CGRectGetMinX(v50);
        v51.origin.x = v38;
        v51.origin.y = v22;
        v51.size.width = v24;
        v51.size.height = v26;
        CGRectGetWidth(v51);
        v52.origin.x = v38;
        v52.origin.y = v22;
        v52.size.width = v24;
        v52.size.height = v26;
        CGRectGetMinY(v52);
        v53.origin.x = v38;
        v53.origin.y = v22;
        v53.size.width = v24;
        v53.size.height = v26;
        CGRectGetHeight(v53);

        return;
      }
      goto LABEL_11;
    }

  }
}

void PaperDocumentView.convert(_:from:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  id *v27;
  id v28;
  void *v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double Height;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  CGFloat MinY;
  CGFloat Width;
  CGFloat MinX;
  double v47;
  double v48;
  _BYTE v49[16];
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v14 = *v13;
  v50 = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)v49, v14);
  v16 = v15;
  swift_bridgeObjectRelease();
  if (v16)
  {
    v17 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v17, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    WeakTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v18 = v52;
    if (!v52)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v51, &demangling cache variable for type metadata for PaperPage?);
      return;
    }
    v19 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    v27 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v27)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
    v28 = objc_msgSend(*v27, sel_viewForPage_, v16);
    if (v28)
    {
      v29 = v28;
      v47 = a3;
      v48 = a2;
      objc_msgSend(v28, sel_bounds);
      v31 = v30;
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v54.origin.x = v20;
      v54.origin.y = v22;
      v54.size.width = v24;
      v54.size.height = v26;
      MinX = CGRectGetMinX(v54);
      v55.origin.x = v20;
      v55.origin.y = v22;
      v55.size.width = v24;
      v55.size.height = v26;
      Width = CGRectGetWidth(v55);
      v56.origin.x = v20;
      v56.origin.y = v22;
      v56.size.width = v24;
      v56.size.height = v26;
      MinY = CGRectGetMinY(v56);
      v57.origin.x = v20;
      v57.origin.y = v22;
      v57.size.width = v24;
      v57.size.height = v26;
      Height = CGRectGetHeight(v57);
      v58.origin.x = v31;
      v58.origin.y = v33;
      v58.size.width = v35;
      v58.size.height = v37;
      v39 = CGRectGetMinX(v58);
      v59.origin.x = v31;
      v59.origin.y = v33;
      v59.size.width = v35;
      v59.size.height = v37;
      v40 = CGRectGetWidth(v59);
      v60.origin.x = v31;
      v60.origin.y = v33;
      v60.size.width = v35;
      v60.size.height = v37;
      v41 = CGRectGetMinY(v60);
      v61.origin.x = v31;
      v61.origin.y = v33;
      v61.size.width = v35;
      v61.size.height = v37;
      v42 = CGRectGetHeight(v61);
      if (*v27)
      {
        objc_msgSend(*v27, sel_convertPoint_fromPage_, v16, v39 + (v48 - MinX) / Width * v40, v41 + (1.0 - (v47 - MinY) / Height) * v42);

        return;
      }
      goto LABEL_11;
    }

  }
}

uint64_t closure #1 in PaperDocumentView.convert(_:to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v37 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v38 = (uint64_t)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v37 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v37 - v24;
  v26 = *a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v26, (uint64_t)v14, &demangling cache variable for type metadata for PageId?);
  v27 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v14, 1, v27))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v25, 1, 1, v3);
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v14[*(int *)(v27 + 20)], (uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PageId?);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v21, v39, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v21, 0, 1, v3);
  v28 = (uint64_t)&v10[*(int *)(v7 + 48)];
  v29 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v25, (uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v21, v28, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v30((uint64_t)v10, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v30(v28, 1, v3) == 1)
    {
      v31 = -1;
    }
    else
    {
      v29 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
      v31 = 0;
    }
  }
  else
  {
    v32 = v38;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, v38, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v30(v28, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v32, v3);
      v31 = 0;
      v29 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
    }
    else
    {
      v33 = v32;
      v34 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v37, v28, v3);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>, MEMORY[0x1E0D11E48]);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v35 = *(void (**)(char *, uint64_t))(v4 + 8);
      v35(v34, v3);
      v29 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v35((char *)v33, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, v29);
  return v31 & 1;
}

uint64_t PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  int64_t v57;
  void *v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  char v70[16];
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;

  v68 = a6;
  LODWORD(v69) = a3;
  v67 = a1;
  v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v10, v11);
  v65 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v13);
  v61 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v64 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v66 = (char *)&v60 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v60 - v32;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v25, 1, 1, v34);
  v71 = a4;
  v72 = a5;
  v35 = a2;
  v73 = v68;
  v74 = v6;
  v75 = a2;
  v76 = v67;
  specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v25, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:), (uint64_t)v70, (uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)&unk_1EA84F788, (uint64_t)partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  if ((v69 & 1) == 0)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v33, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v29, 1, v15) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v33 = v29;
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  }
  v36 = v66;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v66, v29, v15);
  v37 = (uint64_t *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  v38 = swift_beginAccess();
  v39 = *v37;
  MEMORY[0x1E0C80A78](v38, v40);
  *(&v60 - 2) = v35;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v60 - 4), v39);
  v42 = v41;
  v44 = v43;
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v36, v15);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  }

  type metadata accessor for AnyCanvas();
  v45 = swift_dynamicCastClass();
  if (!v45)
  {

    goto LABEL_9;
  }
  v46 = (_QWORD *)v45;
  v68 = v44;
  v69 = v33;
  v47 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v48 = v62;
  v49 = v61;
  v50 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v47, v63);
  LOBYTE(v79) = 3;
  v51 = *(void (**)(char *, uint64_t *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v46) + 0x538);
  v52 = type metadata accessor for PaperDocument(0);
  v53 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v51(v49, &v79, v52, v53);
  LOBYTE(v79) = 3;
  (*(void (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *v46) + 0x518))(&v79);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_1DDF32CF0;
  v55 = v64;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v64, v36, v15);
  SharedTagged_9.tag.getter();
  v77 = v79;
  v78 = v80;
  MEMORY[0x1DF0E3408](v15);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  v56 = *(void (**)(char *, uint64_t))(v16 + 8);
  v56(v55, v15);
  if (*(_QWORD *)(v54 + 16))
    v57 = specialized Set.init(_nonEmptyArrayLiteral:)(v54);
  else
    v57 = MEMORY[0x1E0DEE9E8];
  v58 = v68;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  AnyCanvas.selection.setter(v57, MEMORY[0x1E0DEE9E8], 6, 0);

  v56(v66, v15);
  v33 = v69;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
}

uint64_t closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  Capsule.callAsFunction<A>(_:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;

  v22 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v12 = (uint64_t (*)(_BYTE *, _QWORD))WeakTagged_3.subscript.modify();
  v13 = *(_QWORD *)(v11 + 24);
  if (v13)
  {
    v20 = a5;
    v14 = *(_QWORD *)(v11 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v11, v13);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 152);
    v15 = type metadata accessor for PaperDocument(0);
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v19(v22, a1, a3, v15, a4, v20, v16, v13, v14);
    return v12(v21, 0);
  }
  else
  {
    v12(v21, 0);
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a6, 1, 1, v18);
  }
}

uint64_t PaperDocumentView.canvas(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t result;
  _QWORD v10[5];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v4 = *v3;
  v10[2] = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)v10, v4);
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  if (v6)
  {

    type metadata accessor for AnyCanvas();
    result = swift_dynamicCastClass();
    if (result)
      return result;

  }
  return 0;
}

Swift::Bool __swiftcall PaperDocumentView.isLiveEditing()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::Bool result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Bool v17;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v14 >= v7)
      goto LABEL_26;
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v9;
    if (!v15)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v7)
        goto LABEL_26;
      v15 = *(_QWORD *)(v3 + 8 * v9);
      if (!v15)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v7)
          goto LABEL_26;
        v15 = *(_QWORD *)(v3 + 8 * v9);
        if (!v15)
        {
          v9 = v14 + 3;
          if (v14 + 3 >= v7)
            goto LABEL_26;
          v15 = *(_QWORD *)(v3 + 8 * v9);
          if (!v15)
          {
            v9 = v14 + 4;
            if (v14 + 4 >= v7)
              goto LABEL_26;
            v15 = *(_QWORD *)(v3 + 8 * v9);
            if (!v15)
            {
              v16 = v14 + 5;
              if (v16 >= v7)
              {
LABEL_26:
                v17 = 0;
                goto LABEL_27;
              }
              v15 = *(_QWORD *)(v3 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v9 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_29;
                  if (v9 >= v7)
                    goto LABEL_26;
                  v15 = *(_QWORD *)(v3 + 8 * v9);
                  ++v16;
                  if (v15)
                    goto LABEL_24;
                }
              }
              v9 = v16;
            }
          }
        }
      }
    }
LABEL_24:
    v6 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v11 + 8);
    ObjectType = swift_getObjectType();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 80))(ObjectType, v12);
    if (result)
    {
      v17 = 1;
LABEL_27:
      swift_release();
      swift_bridgeObjectRelease();
      return v17;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void PaperDocumentView.liveStreamMessenger.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;

  v1 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  v61 = *(_QWORD *)(v1 - 8);
  v62 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v59 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for CRKeyPath();
  v58 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v4);
  v57 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v6);
  v55 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v53 = (char *)&v51 - v10;
  v11 = (_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v12 = *v11;
  v14 = (_QWORD *)(*v11 + 64);
  v13 = *v14;
  v63 = v0;
  v64 = v14;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v13;
  v18 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v19 = 0;
  v65 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_5;
    }
    v30 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      return;
    }
    if (v30 >= v65)
      goto LABEL_21;
    v31 = v64[v30];
    ++v19;
    if (!v31)
    {
      v19 = v30 + 1;
      if (v30 + 1 >= v65)
        goto LABEL_21;
      v31 = v64[v19];
      if (!v31)
      {
        v19 = v30 + 2;
        if (v30 + 2 >= v65)
          goto LABEL_21;
        v31 = v64[v19];
        if (!v31)
          break;
      }
    }
LABEL_20:
    v17 = (v31 - 1) & v31;
    v21 = __clz(__rbit64(v31)) + (v19 << 6);
LABEL_5:
    v22 = *(_QWORD *)(v12 + 56) + 16 * v21;
    v23 = *(void **)v22;
    v24 = *(_QWORD *)(v22 + 8);
    ObjectType = swift_getObjectType();
    v26 = MEMORY[0x1DF0E666C](v18);
    v27 = *(_QWORD *)(v18 + 8);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 128);
    v29 = v23;
    v28(v26, v27, ObjectType, v24);

  }
  v32 = v30 + 3;
  if (v32 < v65)
  {
    v31 = v64[v32];
    if (!v31)
    {
      while (1)
      {
        v19 = v32 + 1;
        if (__OFADD__(v32, 1))
          goto LABEL_26;
        if (v19 >= v65)
          goto LABEL_21;
        v31 = v64[v19];
        ++v32;
        if (v31)
          goto LABEL_20;
      }
    }
    v19 = v32;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v18))
  {
    v65 = *(_QWORD *)(v18 + 8);
    v64 = (_QWORD *)swift_getObjectType();
    v33 = v63;
    v52 = *(void **)(v63 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context);
    v34 = v63 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v35 = v54;
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    v37 = v53;
    v38 = v56;
    v36(v53, v34, v56);
    v39 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v40 = (uint64_t)v57;
    Capsule<>.rootID.getter();
    v54 = *(_QWORD *)(v35 + 8);
    ((void (*)(char *, uint64_t))v54)(v37, v38);
    v41 = (uint64_t)v55;
    v36(v55, v34, v38);
    v43 = v61;
    v42 = v62;
    v44 = (uint64_t)v59;
    (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v59, *MEMORY[0x1E0D127D0], v62);
    v45 = type metadata accessor for PaperDocument(0);
    v50 = v39;
    v46 = (uint64_t)v64;
    v47 = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v52, v40, v41, v44, 0x636F447265706150, 0xED0000746E656D75, (uint64_t)v64, v45, v65, v50);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v42);
    ((void (*)(uint64_t, uint64_t))v54)(v41, v38);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v40, v60);
    v48 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v49 = type metadata accessor for PaperDocumentView();
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v47, v33, 6516548, 0xE300000000000000, (uint64_t)partial apply for closure #1 in PaperDocumentView.liveStreamMessenger.didset, v48, v46, v49, v65, (uint64_t)&protocol witness table for PaperDocumentView);
    swift_release();
    *(_QWORD *)(v33 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection) = v47;
    swift_unknownObjectRelease();
  }
  else
  {
    *(_QWORD *)(v63 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection) = 0;
  }
  swift_release();
}

void closure #1 in PaperDocumentView.liveStreamMessenger.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = (void *)v4;
    specialized PaperDocumentView.merge<A>(_:from:)(a1, 1u);

  }
}

uint64_t PaperDocumentView.liveStreamMessenger.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger);
}

uint64_t PaperDocumentView.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

void (*PaperDocumentView.liveStreamMessenger.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentView.liveStreamMessenger.modify;
}

void PaperDocumentView.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  PaperDocumentView.pageOverlayViewProvider.modify(a1, a2, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *a2 + *a5;
  swift_beginAccess();
  *(_QWORD *)(v8 + 8) = v7;
  swift_unknownObjectWeakAssign();
  v9 = swift_unknownObjectRetain();
  a6(v9);
  return swift_unknownObjectRelease();
}

void PaperDocumentView.participantDetailsDataSource.didset()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v2 = *v1;
  v21 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v6 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v7 = 0;
  v22 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v18 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v22)
      goto LABEL_21;
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v7;
    if (!v19)
    {
      v7 = v18 + 1;
      if (v18 + 1 >= v22)
        goto LABEL_21;
      v19 = *(_QWORD *)(v21 + 8 * v7);
      if (!v19)
      {
        v7 = v18 + 2;
        if (v18 + 2 >= v22)
          goto LABEL_21;
        v19 = *(_QWORD *)(v21 + 8 * v7);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v5 = (v19 - 1) & v19;
    v9 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_5:
    v10 = *(_QWORD *)(v2 + 56) + 16 * v9;
    v11 = *(void **)v10;
    v12 = *(_QWORD *)(v10 + 8);
    ObjectType = swift_getObjectType();
    v14 = MEMORY[0x1DF0E666C](v6);
    v15 = *(_QWORD *)(v6 + 8);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 152);
    v17 = v11;
    v16(v14, v15, ObjectType, v12);

  }
  v20 = v18 + 3;
  if (v20 >= v22)
  {
LABEL_21:
    swift_release();
    return;
  }
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v7 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v7 >= v22)
      goto LABEL_21;
    v19 = *(_QWORD *)(v21 + 8 * v7);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t PaperDocumentView.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource);
}

uint64_t PaperDocumentView.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t PaperDocumentView.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = v4 + *a3;
  swift_beginAccess();
  *(_QWORD *)(v7 + 8) = a2;
  v8 = swift_unknownObjectWeakAssign();
  a4(v8);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentView.participantDetailsDataSource.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentView.participantDetailsDataSource.modify;
}

void PaperDocumentView.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  PaperDocumentView.pageOverlayViewProvider.modify(a1, a2, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

void PaperDocumentView.pageOverlayViewProvider.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  void *v5;
  uint64_t v6;

  v5 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    v6 = swift_unknownObjectRelease();
    a3(v6);
  }
  free(v5);
}

Swift::Void __swiftcall PaperDocumentView.participantDetailsDidChange()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void (*v15)(uint64_t, uint64_t);
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v7)
      goto LABEL_21;
    v18 = *(_QWORD *)(v3 + 8 * v17);
    ++v8;
    if (!v18)
    {
      v8 = v17 + 1;
      if (v17 + 1 >= v7)
        goto LABEL_21;
      v18 = *(_QWORD *)(v3 + 8 * v8);
      if (!v18)
      {
        v8 = v17 + 2;
        if (v17 + 2 >= v7)
          goto LABEL_21;
        v18 = *(_QWORD *)(v3 + 8 * v8);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v6 = (v18 - 1) & v18;
    v10 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_5:
    v11 = *(_QWORD *)(v2 + 56) + 16 * v10;
    v12 = *(void **)v11;
    v13 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    v15 = *(void (**)(uint64_t, uint64_t))(v13 + 112);
    v16 = v12;
    v15(ObjectType, v13);

  }
  v19 = v17 + 3;
  if (v19 >= v7)
  {
LABEL_21:
    swift_release();
    return;
  }
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
  {
    v8 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v8 >= v7)
      goto LABEL_21;
    v18 = *(_QWORD *)(v3 + 8 * v8);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

void PaperDocumentView.showParticipantCursors.didset()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v2 = *v1;
  v21 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v6 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v7 = 0;
  v8 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }
    v18 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v8)
      goto LABEL_21;
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v7;
    if (!v19)
    {
      v7 = v18 + 1;
      if (v18 + 1 >= v8)
        goto LABEL_21;
      v19 = *(_QWORD *)(v21 + 8 * v7);
      if (!v19)
      {
        v7 = v18 + 2;
        if (v18 + 2 >= v8)
          goto LABEL_21;
        v19 = *(_QWORD *)(v21 + 8 * v7);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v5 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_5:
    v11 = *(_QWORD *)(v2 + 56) + 16 * v10;
    v12 = *(void **)v11;
    v13 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    v15 = *v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 176);
    v17 = v12;
    v16(v15, ObjectType, v13);

  }
  v20 = v18 + 3;
  if (v20 >= v8)
  {
LABEL_21:
    swift_release();
    return;
  }
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v7 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v7 >= v8)
      goto LABEL_21;
    v19 = *(_QWORD *)(v21 + 8 * v7);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t PaperDocumentView.showParticipantCursors.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.showParticipantCursors.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors, (uint64_t (*)(uint64_t))PaperDocumentView.showParticipantCursors.didset);
}

uint64_t (*PaperDocumentView.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.showParticipantCursors.modify;
}

uint64_t PaperDocumentView.showParticipantCursors.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))PaperDocumentView.showParticipantCursors.didset);
}

uint64_t PaperDocumentView.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t PaperDocumentView.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t (*PaperDocumentView.textualContextProvider.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

void PaperDocumentView.canvasSelectionDidChange(_:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  char *v20;

  v2 = *(_QWORD *)&a1[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v2)
    goto LABEL_30;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(_QWORD *)(*v4 + 16) || *(_QWORD *)(v4[1] + 16))
  {
    v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    swift_beginAccess();
    v6 = *v5;
    v7 = *v5 + 64;
    v8 = 1 << *(_BYTE *)(*v5 + 32);
    v9 = -1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    v10 = v9 & *(_QWORD *)(*v5 + 64);
    v11 = (unint64_t)(v8 + 63) >> 6;
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = MEMORY[0x1E0DEE9E8];
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        if (v16 >= v11)
          goto LABEL_26;
        v17 = *(_QWORD *)(v7 + 8 * v16);
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_26;
          v17 = *(_QWORD *)(v7 + 8 * v12);
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v11)
              goto LABEL_26;
            v17 = *(_QWORD *)(v7 + 8 * v12);
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v11)
              {
LABEL_26:
                swift_release();
                return;
              }
              v17 = *(_QWORD *)(v7 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    break;
                  if (v12 >= v11)
                    goto LABEL_26;
                  v17 = *(_QWORD *)(v7 + 8 * v12);
                  ++v18;
                  if (v17)
                    goto LABEL_22;
                }
LABEL_29:
                __break(1u);
LABEL_30:
                __break(1u);
                return;
              }
              v12 = v18;
            }
          }
        }
LABEL_22:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(char **)(*(_QWORD *)(v6 + 56) + 16 * v15);
      if (v19 != a1)
      {
        type metadata accessor for AnyCanvas();
        if (swift_dynamicCastClass())
        {
          v20 = v19;
          AnyCanvas.selection.setter(v13, v13, 6, 0);

        }
      }
    }
  }
}

uint64_t PaperDocumentView.canvasDrawingWillChange(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t ObjectType;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  if (result)
  {
    v5 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 64))(v1, a1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

void PaperDocumentView.pdfSelectionChanged(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  id v16;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = MEMORY[0x1E0DEE9E8];
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v8 << 6);
LABEL_22:
    v15 = *(void **)(*(_QWORD *)(v2 + 56) + 16 * v11);
    type metadata accessor for AnyCanvas();
    if (swift_dynamicCastClass())
    {
      v16 = v15;
      AnyCanvas.selection.setter(v9, v9, 6, 0);

    }
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v8;
  if (v13)
    goto LABEL_21;
  v8 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v8);
  if (v13)
    goto LABEL_21;
  v8 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v8);
  if (v13)
    goto LABEL_21;
  v8 = v12 + 3;
  if (v12 + 3 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v8);
  if (v13)
  {
LABEL_21:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_22;
  }
  v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v13 = *(_QWORD *)(v3 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
}

void PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD v65[5];
  __int128 v66;
  __int128 v67;

  v2 = v1;
  v4 = type metadata accessor for Notification();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    v20 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v11, 1, 1, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    type metadata accessor for MainActor();
    v21 = v1;
    v22 = static MainActor.shared.getter();
    v23 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v24 = (char *)swift_allocObject();
    v25 = MEMORY[0x1E0DF06E8];
    *((_QWORD *)v24 + 2) = v22;
    *((_QWORD *)v24 + 3) = v25;
    *((_QWORD *)v24 + 4) = v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v24[v23], (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.annotationPropertiesChanged(_:), (uint64_t)v24);
    swift_release();
    return;
  }
  if ((v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument] & 1) != 0)
    return;
  v16 = Notification.userInfo.getter();
  if (!v16)
  {
    v66 = 0u;
    v67 = 0u;
LABEL_24:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v66, &demangling cache variable for type metadata for Any?);
    return;
  }
  v17 = v16;
  v63 = 0x697461746F6E6E61;
  v64 = 0xEA00000000006E6FLL;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v17 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v65), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v66);
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v65);
  if (!*((_QWORD *)&v67 + 1))
    goto LABEL_24;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v26 = (void *)v65[0];
  v27 = Notification.userInfo.getter();
  if (!v27)
  {
    v66 = 0u;
    v67 = 0u;
LABEL_23:

    goto LABEL_24;
  }
  v28 = v27;
  v63 = 7955819;
  v64 = 0xE300000000000000;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v28 + 16) && (v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v65), (v30 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v29, (uint64_t)&v66);
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v65);
  if (!*((_QWORD *)&v67 + 1))
    goto LABEL_23;
  if ((swift_dynamicCast() & 1) == 0)
  {

    return;
  }
  v31 = (void *)MEMORY[0x1DF0E41AC](v65[0], v65[1]);
  swift_bridgeObjectRelease();
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = v33;
  if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
    goto LABEL_21;
  v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
    goto LABEL_28;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v48 == v49)
    goto LABEL_21;
  v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
    goto LABEL_28;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = v52;
  if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v53 == v54)
    goto LABEL_21;
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) != 0)
    goto LABEL_28;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v58 = v57;
  if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v58 == v59)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
LABEL_28:
    v37 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
    v38 = objc_msgSend(v26, sel_fieldName);
    v39 = objc_msgSend(v37, sel_annotationsForFieldName_, v38);

    if (v39)
    {
      v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v41 = specialized _arrayConditionalCast<A, B>(_:)(v40);
      swift_bridgeObjectRelease();
      if (v41)
      {
        if (v41 >> 62)
        {
          swift_bridgeObjectRetain();
          v61 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v61)
            goto LABEL_34;
        }
        else if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_34:
          v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v15, 1, 1, v44);
          v45 = v2;
          swift_bridgeObjectRetain();
          specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 1, (uint64_t)v15, v45, v45, v41);

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v42 + 32) = v26;
    v65[0] = v42;
    specialized Array._endMutation()();
    v41 = v65[0];
    v43 = v26;
    goto LABEL_34;
  }
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v60 & 1) != 0)
    goto LABEL_28;

}

uint64_t closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release();
  PaperDocumentView.annotationPropertiesChanged(_:)(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  PDFAnnotation *v21;
  PDFAnnotation *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD);
  uint64_t v29;
  _QWORD v30[2];
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38[32];
  uint64_t v39;

  v35 = a1;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  v34 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v4);
  v37 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRKeyPath();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v33 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v36 = (char *)v30 - v16;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v17 = result;
    if (result)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v17)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v17 >= 1)
  {
    v30[1] = v2;
    v19 = 0;
    v20 = a2 & 0xC000000000000001;
    v31 = a2 & 0xC000000000000001;
    v32 = v17;
    while (1)
    {
      if (v20)
        v21 = (PDFAnnotation *)MEMORY[0x1DF0E4D64](v19, a2);
      else
        v21 = (PDFAnnotation *)*(id *)(a2 + 8 * v19 + 32);
      v22 = v21;
      type metadata accessor for CanvasElementPDFAnnotation();
      v23 = swift_dynamicCastClass();
      if (v23)
      {
        v24 = v23 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
        swift_beginAccess();
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v24, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
        {
          v25 = a2;
          v26 = v36;
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v9, v10);
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v33, v26, v10);
          v27 = type metadata accessor for PDFAnnotationElement();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
          WeakRef.init(id:)();
          v28 = (void (*)(char *, _QWORD))WeakRef.subscript.modify();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v29, 1, v27))
            PDFAnnotationElement.updateFrom(_:)(v22);
          v28(v38, 0);
          v20 = v31;

          (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v39);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
          a2 = v25;
          v17 = v32;
          goto LABEL_7;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
      }

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
LABEL_7:
      if (v17 == ++v19)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

void PaperDocumentView.annotationsChanged(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;
  id v10[5];
  __int128 v11;
  __int128 v12;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument) & 1) == 0)
  {
    v1 = Notification.userInfo.getter();
    if (!v1)
      goto LABEL_13;
    v2 = v1;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v2 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v4 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v10);
    if (!*((_QWORD *)&v12 + 1))
      goto LABEL_14;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    if ((swift_dynamicCast() & 1) == 0)
      return;

    v5 = Notification.userInfo.getter();
    if (v5)
    {
      v6 = v5;
      AnyHashable.init<A>(_:)();
      if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v8 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v11);
      }
      else
      {
        v11 = 0u;
        v12 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v10);
      if (*((_QWORD *)&v12 + 1))
      {
        type metadata accessor for PaperKitPDFPage(0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v9 = v10[0];
          PaperDocumentView.pdfPageDidChange(page:)((uint64_t)v10[0]);

        }
        return;
      }
    }
    else
    {
LABEL_13:
      v11 = 0u;
      v12 = 0u;
    }
LABEL_14:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t @objc PaperDocumentView.annotationPropertiesChanged(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v13;

  v6 = type metadata accessor for Notification();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a1;
  a4(v10);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t PaperDocumentView.pdfPageDidChange(page:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  v23 = a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v23, (uint64_t)v8, &demangling cache variable for type metadata for PageId?);
  v24 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v8, 1, v24))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  v25 = (uint64_t)v12;
  v39 = v22;
  v40 = v4;
  v41 = v21;
  v26 = v44;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v8[*(int *)(v24 + 20)], (uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v28 = v17;
  v29 = v41;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v41, v16, v17);
  v30 = v18;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v25, 1, 1, v28);
  MEMORY[0x1E0C80A78](v31, v32);
  v33 = v43;
  *(&v39 - 4) = v43;
  *(&v39 - 3) = (uint64_t)v29;
  *(&v39 - 2) = v39;
  LOBYTE(v29) = specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, v25, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in PaperDocumentView.pdfPageDidChange(page:));
  outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v34 = v40;
  if ((v29 & 1) != 0)
  {
    v35 = v33 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v36 = v42;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
    v37(v34, v35, v26);
    PassthroughSubject.send(_:)();
    v38 = *(void (**)(char *, uint64_t))(v36 + 8);
    v38(v34, v26);
    if (*(_QWORD *)(v33 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
    {
      v37(v34, v35, v26);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v38(v34, v26);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v41, v28);
}

uint64_t closure #1 in PaperDocumentView.pdfPageDidChange(page:)()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  Capsule.callAsFunction<A>(_:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.pdfPageDidChange(page:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  char v15;
  _QWORD v16[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v7 = (uint64_t (*)(_QWORD *, _QWORD))WeakTagged_3.subscript.modify();
  v8 = *(_QWORD *)(v6 + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(v6 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v6, *(_QWORD *)(v6 + 24));
    v16[5] = a3;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 136);
    v11 = type metadata accessor for PaperDocument(0);
    v12 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v13 = v10(a2, a1, v11, v12, v8, v9);
    result = v7(v16, 0);
    v15 = v13 & 1;
  }
  else
  {
    result = v7(v16, 0);
    v15 = 2;
  }
  *a3 = v15;
  return result;
}

uint64_t PaperDocumentView.loadPaperKitPageIfNeeded(for:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  id v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  _QWORD v104[2];
  void (*v105)(char *, uint64_t, uint64_t);
  void *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  void (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD v130[5];

  v108 = type metadata accessor for CRKeyPath();
  v110 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v2);
  v109 = (char *)v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v117 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128, v4);
  v111 = (char *)v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v112 = (char *)v104 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v116 = (char *)v104 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x1E0C80A78](v12, v13);
  v113 = (char *)v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v118 = (void (*)(char *, uint64_t))((char *)v104 - v17);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x1E0C80A78](v18, v19);
  v115 = (char *)v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v121 = (void (*)(char *, uint64_t, uint64_t))((char *)v104 - v23);
  v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
  v122 = *(_QWORD *)(v123 - 8);
  MEMORY[0x1E0C80A78](v123, v24);
  v114 = (char *)v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v120 = (char *)v104 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v29, v30);
  v127 = (uint64_t)v104 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for PDFPageID();
  v125 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126, v32);
  v124 = (uint64_t)v104 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)v104 - v40;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)v104 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v48);
  v50 = (char *)v104 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a1;
  v52 = (uint64_t)a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v52, (uint64_t)v41, &demangling cache variable for type metadata for PageId?);
  v53 = type metadata accessor for PageId(0);
  v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48);
  if (v54(v41, 1, v53))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v41, &demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v45, 1, 1, v46);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  v107 = v50;
  v106 = v51;
  v55 = v128;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v41[*(int *)(v53 + 20)], (uint64_t)v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v41, &demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v57 = v46;
  v58 = v107;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v107, v45, v57);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v52, (uint64_t)v37, &demangling cache variable for type metadata for PageId?);
  if (!v54(v37, 1, v53))
  {
    v59 = v127;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v37, v127, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v37, &demangling cache variable for type metadata for PageId?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v59, 1, v126) == 1)
      goto LABEL_8;
    v126 = v47;
    v60 = v59;
    v61 = v124;
    outlined init with take of PKStrokeStruct(v60, v124, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v62 = (uint64_t)v121;
    WeakTagged_3.tagged3.getter();
    v63 = v122;
    v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
    v65 = v123;
    if (v64(v62, 1, v123) == 1)
    {
      outlined destroy of PKStrokeProperties(v61, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
      v47 = v126;
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v58, v57);
    }
    v127 = v57;
    v105 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 32);
    v105(v120, v62, v65);
    v66 = v119 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v67 = v117;
    v68 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 16);
    v69 = v116;
    v125 = v66;
    v121 = v68;
    v68(v116, v66, v55);
    v70 = type metadata accessor for PaperDocument(0);
    v71 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v72 = (uint64_t)v118;
    v104[1] = v70;
    v104[0] = v71;
    WeakRef.subscript.getter();
    v73 = *(void (**)(char *, uint64_t))(v67 + 8);
    v73(v69, v55);
    v74 = type metadata accessor for PaperDocumentPage();
    v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 48);
    if (v75(v72, 1, v74) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v72, &demangling cache variable for type metadata for PaperDocumentPage?);
LABEL_15:
      (*(void (**)(char *, uint64_t))(v63 + 8))(v120, v123);
      outlined destroy of PKStrokeProperties(v124, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v57 = v127;
LABEL_30:
      v47 = v126;
      v58 = v107;
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v58, v57);
    }
    v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    v77 = v130[0];
    v78 = outlined destroy of PKStrokeProperties(v72, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
    if ((v77 & 0x20) == 0)
      goto LABEL_15;
    v117 = v76;
    v118 = v73;
    v80 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument;
    *(_BYTE *)(v119 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument) = 1;
    MEMORY[0x1E0C80A78](v78, v79);
    v81 = v106;
    v104[-4] = v107;
    v104[-3] = v81;
    v104[-2] = v124;
    v104[-1] = v82;
    v83 = v125;
    swift_beginAccess();
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();
    v84 = v115;
    WeakTagged_3.tagged3.getter();
    v85 = v123;
    if (v64((uint64_t)v84, 1, v123) == 1)
    {
      (*(void (**)(char *, uint64_t))(v122 + 8))(v120, v85);
      v86 = &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?;
      v87 = (uint64_t)v84;
    }
    else
    {
      v88 = v114;
      v105(v114, (uint64_t)v84, v85);
      v89 = v112;
      v121(v112, v83, v55);
      v90 = (uint64_t)v113;
      WeakRef.subscript.getter();
      v118(v89, v55);
      if (v75(v90, 1, v74) != 1)
      {
        v93 = v55;
        v116 = (char *)v80;
        v94 = v109;
        WeakRef.id.getter();
        v95 = (uint64_t)v111;
        v121(v111, v83, v55);
        v130[0] = xmmword_1DDF32D00;
        type metadata accessor for PaperKitPDFPage(0);
        memset(&v130[1], 0, 59);
        v96 = v106;
        v97 = swift_dynamicCastClass();
        v98 = v108;
        v99 = v110;
        v57 = v127;
        if (v97)
        {
          v100 = (char *)v97;
          v101 = v96;
          CRRegister.wrappedValue.getter();
          if ((v129 & 0x20) == 0)
          {
            specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v100, 0);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
            CRRegister.wrappedValue.getter();
            if (*(_QWORD *)&v100[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              *(_QWORD *)&v100[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v129;
              outlined consume of PaperKitPDFPage.AnnotationIDState(0);
            }
            specialized PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(v100, 0x8000000000000000, (uint64_t)v111, (uint64_t)v130);
          }

          v95 = (uint64_t)v111;
        }
        v118((char *)v95, v93);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v94, v98);
        v102 = *(void (**)(char *, uint64_t))(v122 + 8);
        v103 = v123;
        v102(v114, v123);
        v102(v120, v103);
        outlined destroy of PKStrokeProperties(v90, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
        v92 = v119;
        v80 = (uint64_t)v116;
        goto LABEL_29;
      }
      v91 = *(void (**)(char *, uint64_t))(v122 + 8);
      v91(v88, v85);
      v91(v120, v85);
      v86 = &demangling cache variable for type metadata for PaperDocumentPage?;
      v87 = v90;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v87, v86);
    v92 = v119;
    v57 = v127;
LABEL_29:
    *(_BYTE *)(v92 + v80) = 0;
    outlined destroy of PKStrokeProperties(v124, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    goto LABEL_30;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v37, &demangling cache variable for type metadata for PageId?);
  v59 = v127;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56))(v127, 1, 1, v126);
LABEL_8:
  outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for PDFPageID?);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v58, v57);
}

uint64_t closure #1 in PaperDocumentView.loadPaperKitPageIfNeeded(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t (*v31)(char *, uint64_t);
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(_BYTE *, _QWORD);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t (*v46)(uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[40];
  uint64_t v62;

  v51 = a5;
  v52 = a4;
  v56 = a3;
  v62 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v47 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v14 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v15);
  v55 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v45 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v60 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v49 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v53 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v57 = v9;
  v58 = v10;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v26 = v9;
  v27 = v59;
  v25(v13, v62, v26);
  v28 = lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  v54 = v13;
  v50 = v28;
  SharedTagged_3.init(_:)();
  v48 = specialized Collection<>.firstIndex(of:)();
  LOBYTE(a1) = v29;
  v30 = *(void (**)(char *, uint64_t))(v14 + 8);
  v30(v20, v27);
  v31 = *(uint64_t (**)(char *, uint64_t))(v60 + 8);
  v60 = v21;
  result = v31(v24, v21);
  if ((a1 & 1) == 0)
  {
    v45 = v25;
    v46 = (uint64_t (*)(uint64_t, uint64_t))v30;
    v33 = CRContext.assetManager.getter();
    v34 = v55;
    specialized PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)(v52, v53, v33, v55);
    swift_release();
    swift_getKeyPath();
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v35(v20, v34, v27);
    v36 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.subscript.modify();
    CROrderedSet.subscript.setter();
    v36(v61, 0);
    swift_release();
    v35(v20, v34, v27);
    v37 = v54;
    WeakTagged_3.init(_:)();
    v38 = v57;
    v39 = v62;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 40))(v62, v37, v57);
    v40 = PaperKitPDFPage.pageId.modify();
    v42 = v41;
    v43 = type metadata accessor for PageId(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43))
    {
      v44 = (uint64_t)v47;
      v45(v47, v39, v38);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v44, 0, 1, v38);
      outlined assign with take of Date?(v44, v42 + *(int *)(v43 + 20), &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    }
    ((void (*)(_BYTE *, _QWORD))v40)(v61, 0);
    return v46(v34, v27);
  }
  return result;
}

void __swiftcall PaperDocumentView.pdfView(_:overlayViewFor:)(UIView_optional *__return_ptr retstr, PDFView *_, PDFPage *overlayViewFor)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  PDFPage *v33;
  PDFPage *v34;
  PDFPage *v35;
  PDFPage *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  PDFPage *v61;
  id v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t ObjectType;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  id v72;
  id v73;
  uint64_t v74;
  id v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void (*v84)(void *, uint64_t, uint64_t);
  id v85;
  id v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  id v90;
  char *v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  PDFPage *v101;
  uint64_t *v102;
  char *v103;
  PDFView *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v4 = v3;
  v104 = _;
  v107 = type metadata accessor for CRKeyPath();
  v106 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107, v6);
  v105 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v103 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v96 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v111 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  v28 = swift_dynamicCastClass();
  if (!v28)
    return;
  v29 = (void *)v28;
  v110 = v25;
  v109 = v24;
  v108 = v4;
  v30 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v102 = v30;
  v31 = *v30;
  v32 = *(_QWORD *)(v31 + 16);
  v33 = overlayViewFor;
  v34 = v33;
  if (v32)
  {
    v35 = v33;
    v36 = v33;
    swift_bridgeObjectRetain();
    v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29);
    if ((v38 & 1) != 0)
    {
      *(id *)(*(_QWORD *)(v31 + 56) + 16 * v37);
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();

    v34 = v35;
  }
  v39 = v108;
  PaperDocumentView.loadPaperKitPageIfNeeded(for:)(v29);
  v40 = (uint64_t)v29 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v40, (uint64_t)v19, &demangling cache variable for type metadata for PageId?);
  v41 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v19, 1, v41))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v23, 1, 1, v109);
LABEL_9:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    return;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v19[*(int *)(v41 + 20)], (uint64_t)v23, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PageId?);
  v42 = v110;
  v43 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v23, 1, v109) == 1)
    goto LABEL_9;
  v101 = v34;
  v44 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v45 = v39;
  v44(v111, v23, v43);
  v46 = v39 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v100 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v100(v15, v46, v8);
  v47 = type metadata accessor for PaperDocument(0);
  v48 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v99 = v47;
  WeakTagged_3.subscript.getter();
  v49 = *(void (**)(char *, uint64_t))(v9 + 8);
  v49(v15, v8);
  v50 = v115;
  if (!v115)
  {

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v114, &demangling cache variable for type metadata for PaperPage?);
LABEL_33:
    (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v43);
    return;
  }
  v51 = v43;
  v52 = v116;
  v98 = __swift_project_boxed_opaque_existential_1(&v114, v115);
  v97 = v48;
  v53 = v105;
  MEMORY[0x1DF0E3078](v51);
  v54 = v103;
  v100(v103, v46, v8);
  v55 = (void *)(*(uint64_t (**)(char *, char *, PDFView *, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 120))(v53, v54, v104, v45, v29, v99, v97, v50, v52);
  v49(v54, v8);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v53, v107);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  if (!v55)
  {

LABEL_32:
    v43 = v109;
    goto LABEL_33;
  }
  v56 = v45;
  swift_getObjectType();
  v57 = swift_conformsToProtocol2();
  if (v57)
    v58 = v57;
  else
    v58 = 0;
  if (v57)
    v59 = (uint64_t)v55;
  else
    v59 = 0;
  if (!v59)
  {

    goto LABEL_32;
  }
  v60 = v102;
  swift_beginAccess();
  v61 = v101;
  v62 = v55;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v113 = *v60;
  *v60 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v58, v29, isUniquelyReferenced_nonNull_native);
  *v60 = v113;
  swift_bridgeObjectRelease();

  swift_endAccess();
  ObjectType = swift_getObjectType();
  v65 = v56 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  v66 = MEMORY[0x1DF0E666C](v65);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 224))(v66, ObjectType, v58);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v58 + 64))(*(unsigned __int8 *)(v56 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode), ObjectType, v58);
  v67 = v56 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  swift_beginAccess();
  v68 = MEMORY[0x1DF0E666C](v67);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 128))(v68, *(_QWORD *)(v67 + 8), ObjectType, v58);
  v69 = v56 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  swift_beginAccess();
  v70 = MEMORY[0x1DF0E666C](v69);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 152))(v70, *(_QWORD *)(v69 + 8), ObjectType, v58);
  v71 = (unsigned __int8 *)(v56 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v58 + 176))(*v71, ObjectType, v58);
  v72 = PaperDocumentView.paperDocumentViewProxy.getter();
  (*(void (**)(id, _UNKNOWN **, uint64_t, uint64_t))(v58 + 200))(v72, &protocol witness table for PaperDocumentView.PaperDocumentViewProxy, ObjectType, v58);
  v73 = objc_msgSend(v29, sel_annotations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v75 = objc_msgSend(v29, sel_detectedAnnotations);
  v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v112 = v74;
  v77 = v108;
  specialized Array.append<A>(contentsOf:)(v76, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
  PaperDocumentView.addFormFields(_:for:)(v112, v29);
  swift_bridgeObjectRelease();
  v78 = v77 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  swift_beginAccess();
  v79 = MEMORY[0x1DF0E666C](v78);
  v80 = v111;
  if (v79)
  {
    v81 = *(_QWORD *)(v78 + 8);
    v82 = swift_getObjectType();
    v83 = (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v81 + 8))(v77, v80, v82, v81);
    swift_unknownObjectRelease();
    if (v83)
    {
      v84 = *(void (**)(void *, uint64_t, uint64_t))(v58 + 16);
      v85 = v62;
      v86 = v83;
      v84(v83, ObjectType, v58);
      v77 = v108;

      v62 = v85;
    }
  }
  v87 = *(char **)(v77 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v87)
  {
    v88 = &v87[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments];
    swift_beginAccess();
    v89 = *(_QWORD **)v88;
    v90 = v62;
    v91 = v87;
    v92 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v88 = v89;
    if ((v92 & 1) == 0)
    {
      v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, v89, &demangling cache variable for type metadata for _ContiguousArrayStorage<PageOverlayView>, &demangling cache variable for type metadata for PageOverlayView);
      *(_QWORD *)v88 = v89;
    }
    v94 = v89[2];
    v93 = v89[3];
    if (v94 >= v93 >> 1)
    {
      v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v93 > 1), v94 + 1, 1, v89, &demangling cache variable for type metadata for _ContiguousArrayStorage<PageOverlayView>, &demangling cache variable for type metadata for PageOverlayView);
      *(_QWORD *)v88 = v89;
    }
    v89[2] = v94 + 1;
    v95 = &v89[2 * v94];
    v95[4] = v59;
    v95[5] = v58;
    swift_endAccess();

    (*(void (**)(char *, uint64_t))(v110 + 8))(v80, v109);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall PaperDocumentView.pdfView(_:willDisplayOverlayView:for:)(PDFView *_, UIView *willDisplayOverlayView, PDFPage *a3)
{
  specialized PaperDocumentView.pdfView(_:willDisplayOverlayView:for:)(a3);
}

Swift::Void __swiftcall PaperDocumentView.pdfView(_:willEndDisplayingOverlayView:for:)(PDFView *_, UIView *willEndDisplayingOverlayView, PDFPage *a3)
{
  specialized PaperDocumentView.pdfView(_:willEndDisplayingOverlayView:for:)(a3);
}

Swift::Void __swiftcall PaperDocumentView.didMoveToSuperview()()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for PaperDocumentView();
  objc_msgSendSuper2(&v4, sel_didMoveToSuperview);
  v1 = objc_msgSend(v0, sel_superview);

  if (!v1)
  {
    swift_beginAccess();
    v2 = v0;
    v3 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v3);

    swift_bridgeObjectRelease();
    swift_retain();
    FormAnalytics.recordSessionEvent()();
    swift_release();
  }
}

void PaperDocumentView.addFormFields(_:for:)(unint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v20)
      return;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v14 = static OS_dispatch_queue.main.getter();
  v22 = v5;
  v15 = (void *)v14;
  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v16;
  v17[3] = a2;
  v17[4] = a1;
  aBlock[4] = partial apply for closure #1 in PaperDocumentView.addFormFields(_:for:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_308;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v19 = a2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v13, v8, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void closure #1 in PaperDocumentView.addFormFields(_:for:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char **v29;
  id v30;
  void *v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  void *v40;
  id *v41;
  id v42;
  id v43;
  uint64_t (*v44)(void);
  void *v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  BOOL v63;
  unsigned __int8 v64;
  char v65;
  uint64_t *v66;
  id v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  id v81;
  id v82;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t (*v89)(void);
  uint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  id v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int8 v107;
  uint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unsigned __int8 v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(void);
  _QWORD *v117;
  uint64_t (*v118)(uint64_t);
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t ObjectType;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  _QWORD *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  id v166;
  void *v167;
  _QWORD *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  id v180;
  void *v181;
  id v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v189;
  char v190;
  id v191;
  char v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  id v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  unint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t (*v234)(void);
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239[4];
  _OWORD v240[2];
  __int128 v241;
  uint64_t v242;
  uint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  CGRect v247;
  CGRect v248;
  CGRect v249;
  CGRect v250;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v223 = *(_QWORD *)(v6 - 8);
  v224 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v222 = (char *)&v212 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRKeyPath();
  v217 = *(_QWORD *)(v9 - 8);
  v218 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v219 = (char *)&v212 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NSFastEnumerationIterator();
  v228 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v229 = (char *)&v212 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v227 = a1 + 16;
  v15 = MEMORY[0x1DF0E666C](a1 + 16);
  if (!v15)
    return;
  v16 = (void *)v15;
  v17 = (uint64_t *)(v15 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v18 = *v17;
  v19 = a2;
  swift_bridgeObjectRetain();

  if (!*(_QWORD *)(v18 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v19), (v21 & 1) == 0))
  {

    goto LABEL_13;
  }
  v22 = *(id *)(*(_QWORD *)(v18 + 56) + 16 * v20);

  swift_bridgeObjectRelease();
  type metadata accessor for AnyCanvas();
  v214 = (_QWORD *)swift_dynamicCastClass();
  if (!v214)
  {

    return;
  }
  v213 = v22;
  v23 = a3 >> 62;
  if (a3 >> 62)
    goto LABEL_189;
  if (*(uint64_t *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
  {
LABEL_190:

    return;
  }
  while (2)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    v245 = MEMORY[0x1E0DEE9D8];
    v246 = MEMORY[0x1E0DEE9D8];
    LODWORD(v236) = PaperKitPDFPage.hasFormWidgets.getter();
    v238 = AnyCanvas.formFieldElements.getter();
    v25 = specialized Dictionary.init(dictionaryLiteral:)(v24);
    v26 = v25;
    if (v23)
    {
      v114 = v25;
      swift_bridgeObjectRetain();
      v26 = v114;
      v27 = _CocoaArrayWrapper.endIndex.getter();
      if (!v27)
      {
LABEL_151:
        v237 = v26;
        swift_bridgeObjectRelease();
        v115 = swift_bridgeObjectRelease();
        v116 = (uint64_t (*)(void))MEMORY[0x1E0DEE9D8];
        goto LABEL_153;
      }
    }
    else
    {
      v27 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v27)
        goto LABEL_151;
    }
    v216 = v19;
    v233 = a3 & 0xC000000000000001;
    swift_beginAccess();
    v23 = 0;
    v220 = a3 + 32;
    v221 = a3 & 0xFFFFFFFFFFFFFF8;
    v28 = (uint64_t *)(v238 & 0xFFFFFFFFFFFFFF8);
    v232 = v238 & 0xFFFFFFFFFFFFFF8;
    if (v238 < 0)
      v28 = (uint64_t *)v238;
    v225 = v28;
    v235 = v238 & 0xC000000000000001;
    v226 = (uint64_t *)*MEMORY[0x1E0D00448];
    v29 = &selRef_initWithAnnotationDictionary_forPage_;
    v230 = v27;
    v231 = a3;
    v215 = v12;
    while (1)
    {
      if (v233)
      {
        v30 = (id)MEMORY[0x1DF0E4D64](v23, a3);
      }
      else
      {
        if (v23 >= *(_QWORD *)(v221 + 16))
          goto LABEL_186;
        v30 = *(id *)(v220 + 8 * v23);
      }
      v31 = v30;
      v32 = __OFADD__(v23++, 1);
      if (v32)
      {
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }
      v237 = v26;
      v33 = objc_msgSend(v30, sel_isSynthesizedFormField);
      type metadata accessor for CanvasElementPDFAnnotation();
      v34 = swift_dynamicCastClass();
      if (v34)
        break;
      v36 = v31;
      if (!v33)
        goto LABEL_50;
      if ((v236 & 1) == 0)
        goto LABEL_38;
LABEL_47:
      v26 = v237;
      v29 = &selRef_initWithAnnotationDictionary_forPage_;
      v37 = (uint64_t)v36;
LABEL_56:
      a3 = v231;
LABEL_17:

      if (v23 == v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v238 = v26 & 0xC000000000000001;
        v87 = v26 & 0xFFFFFFFFFFFFFF8;
        if (v26 < 0)
          v87 = v26;
        v236 = v87;
        swift_bridgeObjectRetain();
        v88 = 0;
        v235 = MEMORY[0x1E0DEE9B0] + 8;
        v37 = MEMORY[0x1E0DEE9B8] + 8;
        v89 = (uint64_t (*)(void))MEMORY[0x1E0DEE9D8];
        v23 = (unint64_t)v229;
        v19 = v216;
        while (1)
        {
          if (v233)
          {
            v90 = (uint64_t *)MEMORY[0x1DF0E4D64](v88, a3);
          }
          else
          {
            if (v88 >= *(_QWORD *)(v221 + 16))
              goto LABEL_187;
            v90 = (uint64_t *)*(id *)(v220 + 8 * v88);
          }
          v32 = __OFADD__(v88, 1);
          v91 = v88 + 1;
          if (v32)
            goto LABEL_185;
          v232 = v91;
          v237 = v26;
          v92 = v90;
          v93 = objc_msgSend((id)v19, sel_formFieldGroupForAnnotation_, v90);
          if ((uint64_t)objc_msgSend(v93, sel_count) > 0)
            break;

          v26 = v237;
LABEL_98:
          v88 = v232;
          if (v232 == v27)
          {
            v115 = swift_bridgeObjectRelease();
            v116 = v89;
LABEL_153:
            v117 = (_QWORD *)MEMORY[0x1E0DEEDD8];
            v118 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v214) + 0x2F8);
            v119 = (void *)v118(v115);
            v121 = v120;
            ObjectType = swift_getObjectType();
            v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 168);
            v124 = swift_bridgeObjectRetain();
            v123(v124, ObjectType, v121);

            v125 = swift_bridgeObjectRelease();
            v126 = (void *)v118(v125);
            v128 = v127;
            v129 = swift_getObjectType();
            v37 = *(_QWORD *)(v128 + 184);
            v130 = swift_bridgeObjectRetain();
            ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v130, v129, v128);

            v131 = swift_bridgeObjectRelease();
            v132 = (void *)v118(v131);
            v134 = v133;
            v135 = swift_getObjectType();
            v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 176);
            v137 = swift_bridgeObjectRetain();
            v136(v137, v135, v134);

            v234 = v116;
            v138 = swift_bridgeObjectRelease();
            v139 = (_QWORD *)v118(v138);
            v77 = (void *)(*(uint64_t (**)(void))((*v117 & *v139) + 0x88))();

            if (v77)
            {
              if (one-time initialization token for manager != -1)
                goto LABEL_192;
              goto LABEL_155;
            }
            goto LABEL_156;
          }
        }
        v226 = v92;
        v244 = MEMORY[0x1E0DEE9D8];
        v94 = (uint64_t *)v93;
        NSOrderedSet.makeIterator()();
        v225 = v94;

        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58], MEMORY[0x1E0CAFB80]);
        while (1)
        {
          dispatch thunk of IteratorProtocol.next()();
          if (!v242)
            break;
          outlined init with take of Any(&v241, v240);
          outlined init with copy of Any((uint64_t)v240, (uint64_t)v239);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          if (swift_dynamicCast())
          {
            v92 = v243;
            MEMORY[0x1DF0E4398]();
            if (*(_QWORD *)((v244 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v244 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v240);
        }
        (*(void (**)(unint64_t, uint64_t))(v228 + 8))(v23, v12);
        v95 = v244;
        *(_QWORD *)&v241 = MEMORY[0x1E0DEE9D8];
        v234 = v89;
        if (!(v244 >> 62))
        {
          v96 = *(_QWORD *)((v244 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v96)
            goto LABEL_114;
LABEL_134:
          swift_bridgeObjectRelease();
          v105 = MEMORY[0x1E0DEE9D8];
LABEL_135:
          swift_bridgeObjectRelease();
          v89 = v234;
          v23 = *((_QWORD *)v234 + 2);
          a3 = v231;
          v12 = v215;
          if (v23)
          {
            swift_bridgeObjectRetain();
            v106 = swift_bridgeObjectRetain();
            v107 = specialized static Array<A>.== infix(_:_:)(v106, v105);
            swift_bridgeObjectRelease();
            if ((v107 & 1) != 0)
            {
LABEL_137:

              v89 = v234;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v108 = v225;
              v19 = v216;
              v27 = v230;
LABEL_149:

              swift_bridgeObjectRelease();
              v26 = v237;
              v23 = (unint64_t)v229;
              goto LABEL_98;
            }
            if (v23 != 1)
            {
              v19 = 5;
              while (1)
              {
                v109 = v19 - 3;
                if (__OFADD__(v19 - 4, 1))
                  break;
                v110 = swift_bridgeObjectRetain();
                v111 = specialized static Array<A>.== infix(_:_:)(v110, v105);
                swift_bridgeObjectRelease();
                if ((v111 & 1) != 0)
                  goto LABEL_137;
                ++v19;
                if (v109 == v23)
                  goto LABEL_143;
              }
              __break(1u);
              goto LABEL_184;
            }
LABEL_143:
            v89 = v234;
            swift_bridgeObjectRelease();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v89 = (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v89 + 2) + 1, 1, v89);
          v27 = v230;
          v113 = *((_QWORD *)v89 + 2);
          v112 = *((_QWORD *)v89 + 3);
          v19 = v216;
          if (v113 >= v112 >> 1)
            v89 = (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v112 > 1), v113 + 1, 1, v89);
          *((_QWORD *)v89 + 2) = v113 + 1;
          *((_QWORD *)v89 + v113 + 4) = v105;

          v108 = v226;
          goto LABEL_149;
        }
        swift_bridgeObjectRetain_n();
        v96 = _CocoaArrayWrapper.endIndex.getter();
        if (!v96)
          goto LABEL_134;
LABEL_114:
        v97 = 4;
        while (1)
        {
          if ((v95 & 0xC000000000000001) != 0)
            v98 = (id)MEMORY[0x1DF0E4D64](v97 - 4, v95);
          else
            v98 = *(id *)(v95 + 8 * v97);
          v99 = v98;
          v100 = v97 - 3;
          if (__OFADD__(v97 - 4, 1))
          {
            __break(1u);
            goto LABEL_165;
          }
          if (v238)
          {
            v92 = (uint64_t *)v98;
            v101 = __CocoaDictionary.lookup(_:)();
            if (v101)
            {
              v239[0] = v101;
              type metadata accessor for AnyCanvasElementView();
              swift_unknownObjectRetain();
              swift_dynamicCast();
              v92 = *(uint64_t **)&v240[0];
              swift_unknownObjectRelease();
              goto LABEL_127;
            }
          }
          else
          {
            v102 = v237;
            if (!*(_QWORD *)(v237 + 16))
            {

              goto LABEL_116;
            }
            v92 = (uint64_t *)v98;
            v103 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v92);
            if ((v104 & 1) != 0)
            {
              v92 = (uint64_t *)*(id *)(*(_QWORD *)(v102 + 56) + 8 * v103);
LABEL_127:

              if (v92)
              {
                MEMORY[0x1DF0E4398]();
                if (*(_QWORD *)((v241 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v241 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              goto LABEL_116;
            }
          }

LABEL_116:
          ++v97;
          if (v100 == v96)
          {
            swift_bridgeObjectRelease();
            v105 = v241;
            goto LABEL_135;
          }
        }
      }
    }
    v19 = v34;
    v35 = v29[101];
    v36 = v31;
    v37 = v31;
    if (objc_msgSend((id)v19, sel_respondsToSelector_, v35))
      v38 = objc_msgSend((id)v19, v29[101]);
    else
      v38 = 0;
    if (!objc_msgSend((id)v19, sel_respondsToSelector_, sel_isAppearanceStreamEmpty))
    {

LABEL_36:
      v27 = v230;
      if (!v33)
        goto LABEL_50;
      if ((v236 & 1) != 0)
        goto LABEL_55;
LABEL_38:
      v19 = 0;
      goto LABEL_39;
    }
    v19 = (unint64_t)objc_msgSend((id)v19, sel_isAppearanceStreamEmpty);

    if ((v38 & 1) == 0)
      goto LABEL_36;
    if (v33)
    {
      v27 = v230;
      if ((v236 & 1) != 0)
        goto LABEL_55;
    }
    else
    {
      v27 = v230;
      if (!(_DWORD)v19)
      {
LABEL_50:
        v37 = (uint64_t)v36;
        if (objc_msgSend(v36, sel_isTextWidget))
        {
          v59 = objc_msgSend(v36, sel_isActivatableTextField);
          v29 = &selRef_initWithAnnotationDictionary_forPage_;
          a3 = v231;
          if (v59 && swift_dynamicCastClass())
          {
            v37 = (uint64_t)(id)v37;
            MEMORY[0x1DF0E4398]();
            v19 = *(_QWORD *)((v245 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v19 >= *(_QWORD *)((v245 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v26 = v237;
          goto LABEL_17;
        }
        goto LABEL_55;
      }
      v19 = 1;
    }
LABEL_39:
    v39 = MEMORY[0x1DF0E666C](v227);
    if (!v39)
      goto LABEL_47;
    v40 = (void *)v39;
    v41 = (id *)(v39 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    v42 = *v41;
    v43 = *v41;

    v37 = (uint64_t)v36;
    if (!v42)
    {
LABEL_55:
      v26 = v237;
      v29 = &selRef_initWithAnnotationDictionary_forPage_;
      goto LABEL_56;
    }
    v44 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v214) + 0x2F8);
    v45 = (void *)v44();
    objc_msgSend(v36, sel_bounds);
    objc_msgSend(v43, sel_convertRect_fromPage_, v216);
    objc_msgSend(v45, sel_convertRect_fromCoordinateSpace_, v43);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    v53 = v52;

    v54 = v238;
    v234 = v44;
    if ((unint64_t)v238 >> 62)
    {
      swift_bridgeObjectRetain();
      v55 = _CocoaArrayWrapper.endIndex.getter();
      if (!v55)
        goto LABEL_65;
LABEL_43:
      if (v235)
        v56 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v54);
      else
        v56 = *(id *)(v54 + 32);
      v57 = v56;
      v247.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v56) + 0x178))();
      v249.origin.x = v47;
      v249.origin.y = v49;
      v249.size.width = v51;
      v249.size.height = v53;
      v58 = CGRectIntersectsRect(v247, v249);

      if (v58)
      {
LABEL_46:

        swift_bridgeObjectRelease();
        v26 = v237;
        a3 = v231;
        v12 = v215;
        goto LABEL_89;
      }
      v60 = v238;
      if (v55 == 1)
        goto LABEL_65;
      a3 = 5;
      while (1)
      {
        v61 = v235 ? (_QWORD *)MEMORY[0x1DF0E4D64](a3 - 4, v60) : *(id *)(v60 + 8 * a3);
        v62 = v61;
        v12 = a3 - 3;
        if (__OFADD__(a3 - 4, 1))
          break;
        v248.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v61) + 0x178))();
        v250.origin.x = v47;
        v250.origin.y = v49;
        v250.size.width = v51;
        v250.size.height = v53;
        v63 = CGRectIntersectsRect(v248, v250);

        if (v63)
          goto LABEL_46;
        ++a3;
        v60 = v238;
        if (v12 == v55)
          goto LABEL_65;
      }
LABEL_188:
      __break(1u);
LABEL_189:
      swift_bridgeObjectRetain();
      v176 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v176 < 1)
        goto LABEL_190;
      continue;
    }
    break;
  }
  v55 = *(_QWORD *)(v232 + 16);
  swift_bridgeObjectRetain();
  if (v55)
    goto LABEL_43;
LABEL_65:
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)v37, sel_respondsToSelector_, sel_isAutofillNewContextStart))
    v64 = objc_msgSend((id)v37, sel_isAutofillNewContextStart);
  else
    v64 = 0;
  if (((objc_msgSend((id)v37, sel_isDetectedSignature) | v19) & 1) != 0)
  {
    v65 = 50;
  }
  else
  {
    v66 = (uint64_t *)objc_msgSend((id)v37, sel_autoFillTextContentType);
    if (!v66)
      v66 = v226;
    FormContentType.init(_:)((__C::AFTextContentType)v66);
    v65 = v241;
  }
  v67 = objc_msgSend((id)v37, sel_contents);
  if (v67)
  {
    v68 = v67;
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v71 = v70;

  }
  else
  {
    v69 = 0;
    v71 = 0;
  }
  v72 = objc_msgSend((id)v37, sel_font);
  v73 = objc_msgSend((id)v37, sel_alignment);
  LOBYTE(v241) = v65;
  v74 = objc_msgSend((id)v37, sel_maximumLength);
  specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v214, v69, v71, v72, (uint64_t)v73, 0, (unsigned __int8 *)&v241, (uint64_t)v74, v47, v49, v51, v53, 1u, v64, 9u, 2u);
  v76 = v75;

  swift_bridgeObjectRelease();
  v77 = (void *)v237;
  if ((v237 & 0xC000000000000001) == 0)
  {
    v81 = (id)v37;
    v82 = v76;
    a3 = v231;
    v12 = v215;
LABEL_82:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v241 = v77;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v76, (void *)v37, isUniquelyReferenced_nonNull_native);
    v84 = v241;

    swift_bridgeObjectRelease();
    v19 = v76;
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v246 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v246 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (objc_msgSend((id)v37, sel_respondsToSelector_, sel_setShouldReportAnalytics_))
      objc_msgSend((id)v37, sel_setShouldReportAnalytics_, 0);
    if (one-time initialization token for manager != -1)
      swift_once();
    v85 = (_QWORD *)v234();
    v86 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v85) + 0x88))();

    specialized FormAnalytics.addFielde2eEvent(canvas:)(v86);
    v37 = (uint64_t)v86;
    v26 = v84;
LABEL_89:
    v27 = v230;
    v29 = &selRef_initWithAnnotationDictionary_forPage_;
    goto LABEL_17;
  }
  if (v237 >= 0)
    v77 = (void *)(v237 & 0xFFFFFFFFFFFFFF8);
  v78 = (id)v37;
  v79 = v76;
  v80 = __CocoaSet.count.getter();
  a3 = v231;
  v12 = v215;
  if (!__OFADD__(v80, 1))
  {
    v77 = (void *)specialized _NativeDictionary.init(_:capacity:)((uint64_t)v77, v80 + 1);
    goto LABEL_82;
  }
  __break(1u);
LABEL_192:
  swift_once();
LABEL_155:
  swift_beginAccess();
  v140 = swift_bridgeObjectRetain();
  specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(v140, 1);

  swift_bridgeObjectRelease();
LABEL_156:
  v141 = v227;
  swift_beginAccess();
  v142 = MEMORY[0x1DF0E666C](v141);
  if (!v142)
    goto LABEL_163;
  v143 = (void *)v142;
  v144 = PaperDocumentView.currentPageCanvas.getter();

  if (!v144
    || (v145 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v144) + 0x2F8))(),
        v147 = v146,
        v144,
        v148 = swift_getObjectType(),
        v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v147 + 144))(v148, v147),
        v145,
        !v97))
  {
LABEL_163:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v149 = v227;
  swift_beginAccess();
  v150 = MEMORY[0x1DF0E666C](v149);
  v92 = &OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  if (v150)
  {
    v151 = (void *)v150;
    v152 = *(_QWORD *)(v150 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics);
    swift_retain();

    v100 = (uint64_t)v219;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v214) + 0x300))();
    swift_beginAccess();
    v153 = *(_QWORD *)(v152 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v153 + 16) && (v154 = specialized __RawDictionaryStorage.find<A>(_:)(v100), (v155 & 1) != 0))
    {
      v156 = *(_QWORD *)(*(_QWORD *)(v153 + 56) + 8 * v154);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v100, v218);
      *(_QWORD *)(v97 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) = v156;
      swift_release();
    }
    else
    {
LABEL_165:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v100, v218);
    }
  }
  v231 = *v92;
  v157 = *(_QWORD *)(v97 + v231);
  swift_retain();
  v158 = AnyCanvas.formFieldElements.getter();
  if (v158 >> 62)
    v159 = _CocoaArrayWrapper.endIndex.getter();
  else
    v159 = *(_QWORD *)((v158 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v157 + 24) = v159;
  swift_release();
  v160 = AnyCanvas.formFieldElements.getter();
  v161 = v160;
  if (v160 >> 62)
  {
    swift_bridgeObjectRetain();
    v162 = _CocoaArrayWrapper.endIndex.getter();
    v232 = v97;
    if (!v162)
      goto LABEL_195;
LABEL_170:
    if (v162 < 1)
    {
      __break(1u);
      goto LABEL_241;
    }
    v37 = 0;
    v236 = v161 & 0xC000000000000001;
    v163 = (char *)MEMORY[0x1E0DEE9D8];
    v238 = v161;
    v164 = v222;
    v165 = v223;
    while (1)
    {
      if (v236)
        v166 = (id)MEMORY[0x1DF0E4D64](v37, v161);
      else
        v166 = *(id *)(v161 + 8 * v37 + 32);
      v167 = v166;
      type metadata accessor for ShapeView();
      v168 = (_QWORD *)swift_dynamicCastClass();
      if (v168)
      {
        v169 = (char *)v168 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v168) + 0x380);
        swift_beginAccess();
        v170 = v162;
        v171 = v224;
        (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v164, v169, v224);
        swift_getKeyPath();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
        Capsule<>.subscript.getter();
        swift_release();
        v172 = v171;
        v162 = v170;
        (*(void (**)(char *, uint64_t))(v165 + 8))(v164, v172);
        LODWORD(v169) = v244;

        v173 = (_DWORD)v169 != 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_182;
      }
      else
      {

        v173 = 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_182:
          v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v163 + 2) + 1, 1, v163);
      }
      v175 = *((_QWORD *)v163 + 2);
      v174 = *((_QWORD *)v163 + 3);
      v161 = v238;
      if (v175 >= v174 >> 1)
        v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v174 > 1), v175 + 1, 1, v163);
      ++v37;
      *((_QWORD *)v163 + 2) = v175 + 1;
      v163[v175 + 32] = v173;
      if (v162 == v37)
        goto LABEL_196;
    }
  }
  v162 = *(_QWORD *)((v160 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v232 = v97;
  if (v162)
    goto LABEL_170;
LABEL_195:
  v163 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_196:
  swift_bridgeObjectRelease_n();
  v236 = v245;
  if (v245 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v177 = _CocoaArrayWrapper.endIndex.getter();
    if (!v177)
      goto LABEL_218;
LABEL_198:
    if (v177 >= 1)
    {
      v178 = 0;
      v235 = v236 & 0xC000000000000001;
      v238 = *MEMORY[0x1E0D00448];
      v179 = (char *)MEMORY[0x1E0DEE9D8];
      v233 = v177;
      while (1)
      {
        v180 = v235 ? (id)MEMORY[0x1DF0E4D64](v178, v236) : *(id *)(v236 + 8 * v178 + 32);
        v181 = v180;
        v182 = objc_msgSend(v180, sel_autoFillTextContentType);
        if (v182)
          break;

        v190 = 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_210;
LABEL_213:
        v194 = *((_QWORD *)v179 + 2);
        v193 = *((_QWORD *)v179 + 3);
        if (v194 >= v193 >> 1)
          v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v193 > 1), v194 + 1, 1, v179);
        ++v178;
        *((_QWORD *)v179 + 2) = v194 + 1;
        v179[v194 + 32] = v190 & 1;
        if (v177 == v178)
          goto LABEL_219;
      }
      v183 = v182;
      v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v186 = v185;
      if (v184 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v186 == v187)
        v189 = 1;
      else
        v189 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v191 = (id)v238;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v190 = v189 ^ 1;
      v192 = swift_isUniquelyReferenced_nonNull_native();
      v177 = v233;
      if ((v192 & 1) != 0)
        goto LABEL_213;
LABEL_210:
      v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v179 + 2) + 1, 1, v179);
      goto LABEL_213;
    }
LABEL_241:
    __break(1u);
LABEL_242:
    swift_bridgeObjectRetain();
    v203 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_228;
  }
  v177 = *(_QWORD *)((v236 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (v177)
    goto LABEL_198;
LABEL_218:
  v179 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_219:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v37 = v232;
  v195 = *(_QWORD *)(v232 + v231);
  v196 = *((_QWORD *)v163 + 2);
  swift_retain();
  swift_bridgeObjectRelease();
  v197 = *((_QWORD *)v179 + 2);
  swift_bridgeObjectRelease();
  if (__OFADD__(v196, v197))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v195 + 32) = v196 + v197;
    swift_release();
    if (!(v246 >> 62))
    {
      v198 = *(_QWORD *)((v246 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_222;
    }
  }
  swift_bridgeObjectRetain();
  v198 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_222:
  swift_bridgeObjectRelease();
  if (v198)
  {
    swift_bridgeObjectRelease();
    v199 = v227;
    swift_beginAccess();
    v200 = (char *)MEMORY[0x1DF0E666C](v199);

    if (v200)
    {
      v201 = *(_QWORD *)&v200[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
      swift_retain();

      v202 = 41;
      goto LABEL_225;
    }
    goto LABEL_13;
  }
  if (v245 >> 62)
    goto LABEL_242;
  v203 = *(_QWORD *)((v245 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_228:
  swift_bridgeObjectRelease();
  if (!v203)
    goto LABEL_236;
  v204 = v227;
  swift_beginAccess();
  v205 = MEMORY[0x1DF0E666C](v204);
  if (!v205)
    goto LABEL_236;
  v206 = (void *)v205;
  v207 = *(_QWORD *)(v205 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics);
  swift_retain();

  LOBYTE(v206) = *(_BYTE *)(v207 + 17);
  swift_release();
  if (FormAnalyticsKeys.rawValue.getter(v206) == 0x657079546D726F66 && v208 == 0xEC000000656E6F4ELL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_234;
  }
  v209 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v209 & 1) == 0)
  {
LABEL_236:

    goto LABEL_13;
  }
LABEL_234:
  v210 = v227;
  swift_beginAccess();
  v211 = (char *)MEMORY[0x1DF0E666C](v210);

  if (v211)
  {
    v201 = *(_QWORD *)&v211[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
    swift_retain();

    v202 = 40;
LABEL_225:
    *(_BYTE *)(v201 + 17) = v202;
    swift_release();
  }
LABEL_13:
  swift_bridgeObjectRelease();
}

uint64_t PaperDocumentView.handlePageOrderedCollectionDifference(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t *, _QWORD);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  id v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60[4];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v49 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v52 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v3);
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v46 = (uint64_t)&v46 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PDFPage>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PDFPage>>);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v46 - v19;
  lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type PDFPage and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for PDFPage);
  CollectionDifference<A>.inferringMoves()();
  v57 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v57(v16, v12, v8);
  v21 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<PDFPage> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<PDFPage>, MEMORY[0x1E0DECE10]);
  dispatch thunk of Collection.startIndex.getter();
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v58 = v12;
  v56 = v22;
  v22(v12, v8);
  *(_QWORD *)&v16[*(int *)(v13 + 36)] = v60[0];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v16, (uint64_t)v20, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PDFPage>>);
  v23 = &v20[*(int *)(v13 + 36)];
  v24 = *(_QWORD *)v23;
  v59 = v20;
  dispatch thunk of Collection.endIndex.getter();
  if (v24 != v60[0])
  {
    v54 = v23;
    v55 = v21;
    v53 = v8;
    do
    {
      v32 = (uint64_t)v59;
      v33 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v35 = *v34;
      v36 = v34[1];
      v37 = (void *)v34[2];
      v38 = *((unsigned __int8 *)v34 + 24);
      v39 = *((unsigned __int8 *)v34 + 25);
      outlined copy of CollectionDifference<PDFPage>.Change(*v34, v36, v37, v38, v39);
      v33(v60, 0);
      v40 = v58;
      v57(v58, (char *)v32, v8);
      dispatch thunk of Collection.formIndex(after:)();
      v56(v40, v8);
      if ((v39 & 1) != 0)
      {
        if ((v38 & 1) == 0)
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
          v42 = (uint64_t)v49;
          v51(v49, 1, 1, v41);
          v43 = (char *)v50;
          v44 = v46;
          specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, v42, v43, v43, v35, v37, v46);
          outlined destroy of StocksKitCurrencyCache.Provider?(v42, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          v45 = v48;
          (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v47, v44, v48);
          lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
          WeakTagged_3.init(_:)();
          v51((char *)v42, 0, 1, v41);
          PaperDocumentView.goToPage(_:hint:)(v42, v37, 0);
          outlined consume of CollectionDifference<PDFPage>.Change(v35, v36, v37, v38, 1);
          outlined destroy of StocksKitCurrencyCache.Provider?(v42, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v44, v45);
          goto LABEL_6;
        }
        v26 = v35;
        v27 = v36;
        v28 = v37;
        v29 = v38;
        v30 = 1;
      }
      else
      {
        v26 = v35;
        v27 = v36;
        v28 = v37;
        v29 = v38;
        v30 = 0;
      }
      outlined consume of CollectionDifference<PDFPage>.Change(v26, v27, v28, v29, v30);
LABEL_6:
      v8 = v53;
      v31 = *(_QWORD *)v54;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v31 != v60[0]);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v59, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PDFPage>>);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.handlePageOrderedCollectionDifference(_:)@<X0>(Swift::Int a1@<X1>, Swift::Int a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20[32];
  Swift::Int v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_getKeyPath();
  v12 = a2;
  v13 = a1;
  v14 = v12;
  if (v13 < v12 && (v14 = v12 + 1, __OFADD__(v12, 1)))
  {
    __break(1u);
  }
  else
  {
    v21 = v12;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v19 = a3;
    v15 = Capsule.Ref<>.subscript.modify();
    v18 = v7;
    v16 = (void (*)(char *, _QWORD))v15;
    CROrderedSet.move(from:to:)(v13, v14);
    v16(v20, 0);
    swift_release();
    swift_getKeyPath();
    Capsule.Ref<>.subscript.getter();
    swift_release();
    CROrderedSet.subscript.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v10, v6);
  }
  return result;
}

uint64_t PaperDocumentView.insertFile(at:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = type metadata accessor for URL();
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 + 64);
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[15] = swift_task_alloc();
  v6 = type metadata accessor for URLResourceValues();
  v3[16] = v6;
  v3[17] = *(_QWORD *)(v6 - 8);
  v3[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  v3[19] = swift_task_alloc();
  v7 = type metadata accessor for UTType();
  v3[20] = v7;
  v3[21] = *(_QWORD *)(v7 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[24] = static MainActor.shared.getter();
  v3[25] = dispatch thunk of Actor.unownedExecutor.getter();
  v3[26] = v8;
  return swift_task_switch();
}

uint64_t PaperDocumentView.insertFile(at:at:)()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v2 = (void *)*MEMORY[0x1E0C998E0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C998E0];
  v3 = v2;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  URLResourceValues.contentType.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    v10 = *(_QWORD *)(v0 + 152);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v10, &demangling cache variable for type metadata for UTType?);
    goto LABEL_3;
  }
  v13 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v15 + 32))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 152), v14);
  static UTType.pdf.getter();
  v16 = UTType.conforms(to:)();
  v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  *(_QWORD *)(v0 + 216) = v17;
  v17(v13, v14);
  if ((v16 & 1) == 0)
  {
    v31 = *(_QWORD *)(v0 + 176);
    v32 = *(_QWORD *)(v0 + 160);
    swift_release();
    static UTType.image.getter();
    v33 = UTType.conforms(to:)();
    v17(v31, v32);
    v34 = *(_QWORD *)(v0 + 184);
    v35 = *(_QWORD *)(v0 + 160);
    if ((v33 & 1) != 0)
    {
      v11 = PaperDocumentView.loadAndInsertImage(url:at:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
      v17(v34, v35);
      goto LABEL_4;
    }
    v17(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
LABEL_3:
    v11 = 0;
LABEL_4:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
  }
  v19 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 120);
  v21 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 104);
  v23 = *(void **)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  static TaskPriority.userInitiated.getter();
  v26 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v18, 0, 1, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, v24, v22);
  v27 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = 0;
  *((_QWORD *)v28 + 4) = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(&v28[v27], v19, v22);
  *(_QWORD *)&v28[(v20 + v27 + 7) & 0xFFFFFFFFFFFFFFF8] = v25;
  v29 = v23;
  *(_QWORD *)(v0 + 224) = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSi_Tgm5(v18, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.insertFile(at:at:), (uint64_t)v28);
  outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for TaskPriority?);
  v30 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v30;
  *v30 = v0;
  v30[1] = PaperDocumentView.insertFile(at:at:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  swift_release();
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t closure #1 in PaperDocumentView.insertFile(at:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  *(_QWORD *)(v6 + 16) = a1;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v9;
  *v9 = v6;
  v9[1] = closure #1 in PaperDocumentView.insertFile(at:at:);
  return PaperDocumentView.loadAndInsertPDF(url:at:)(a5, a6);
}

uint64_t closure #1 in PaperDocumentView.insertFile(at:at:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentView.insertFile(at:at:)()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall PaperDocumentView.insertBlankPage(at:)(Swift::Int at)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  Swift::Int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46[2];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v44 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v40 - v13;
  v15 = type metadata accessor for PaperDocument(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v40 - v27;
  if (v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
  {
    if (objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly, v26))
    {
      v42 = at;
      v29 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
      swift_beginAccess();
      v43 = v8;
      v30 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
      v30(v28, v29, v19);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      Capsule<>.root.getter();
      v31 = *(void (**)(char *, uint64_t))(v20 + 8);
      v31(v28, v19);
      v30(v23, v29, v19);
      v32 = v42;
      specialized PaperDocument.pageGeometryForInserting<A>(at:in:)(v42, (double *)v48);
      v41 = v48[0];
      v40 = v48[1];
      v33 = v49;
      v31(v23, v19);
      outlined destroy of PKStrokeProperties((uint64_t)v18, type metadata accessor for PaperDocument);
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
      v35(v7, 1, 1, v34);
      v46[0] = v41;
      v46[1] = v40;
      v47 = v33;
      v36 = v2;
      v37 = (void *)v32;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v7, v36, v36, v46, v32, (uint64_t)v14);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v38 = v45;
      v39 = v43;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v44, v14, v43);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:)();
      v35(v7, 0, 1, v34);
      PaperDocumentView.goToPage(_:hint:)((uint64_t)v7, v37, 0);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
    }
  }
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insertBlankPage(at:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(__int128 *, _QWORD);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v50 = a3;
  v48 = a1;
  v49 = a4;
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  v8 = a2[4];
  v9 = type metadata accessor for CRKeyPath();
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v44 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<Paper>);
  v46 = *(_QWORD *)(v16 - 8);
  v47 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v45 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v40 - v25;
  v27 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v27, v28);
  v41 = (uint64_t)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v40 - v32;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v51 = 0u;
  v52 = 0u;
  CRRegister.init(wrappedValue:)();
  v51 = 0u;
  v52 = 0u;
  CRRegister.init(wrappedValue:)();
  v34 = &v33[*(int *)(v27 + 24)];
  *(_QWORD *)&v51 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  v40 = v34;
  CRRegister.init(wrappedValue:)();
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v26, 1, 1, v35);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v26, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v51 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v51 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  *(_QWORD *)&v33[*(int *)(v27 + 48)] = MEMORY[0x1E0DEE9E0];
  *(double *)&v51 = v4;
  *((_QWORD *)&v51 + 1) = v5;
  *(_QWORD *)&v52 = v6;
  *((_QWORD *)&v52 + 1) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v51 = 0uLL;
  *(_QWORD *)&v52 = v6;
  *((_QWORD *)&v52 + 1) = v7;
  CRRegister.wrappedValue.setter();
  if (v8 != 0.0)
  {
    *(double *)&v51 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.setter();
  }
  outlined init with copy of PKStrokeProperties((uint64_t)v33, v41, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  swift_retain();
  static CRKeyPath.unique.getter();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v43);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v36 = v45;
  Ref.init<A>(_:_:identity:)();
  LOBYTE(v51) = 0;
  v37 = v47;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  SharedTagged_3.init(_:id:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v38 = (void (*)(__int128 *, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.insert(_:at:)();
  v38(&v51, 0);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v37);
  return outlined destroy of PKStrokeProperties((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.deletePage(at:)(uint64_t a1, Swift::Int a2)
{
  uint64_t (*v3)(uint64_t *, _QWORD);
  uint64_t v5;

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v3 = (uint64_t (*)(uint64_t *, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.remove(at:)(a2);
  return v3(&v5, 0);
}

uint64_t PaperDocumentView.export()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[15] = v0;
  type metadata accessor for PaperDocument(0);
  v1[16] = swift_task_alloc();
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v1[17] = v2;
  v1[18] = *(_QWORD *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[21] = static MainActor.shared.getter();
  v1[22] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[23] = v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v6, v3);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 192) = v8;
  v8(v2, v3);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context);
  v7(v1, v6, v3);
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD *v3;
  char *v5;

  v1 = (void *)v0[25];
  v5 = (char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
     + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  v2 = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[26] = v3;
  *v3 = v0;
  v3[1] = PaperDocumentView.export();
  return ((uint64_t (*)(void *, _QWORD, _QWORD *))v5)(v1, v0[19], v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t PaperDocumentView.export()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(*(_QWORD *)v1 + 200);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 192);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc();

  v3(v4, v5);
  outlined destroy of PKStrokeProperties(v6, type metadata accessor for PaperDocument);
  return swift_task_switch();
}

Swift::Void __swiftcall PaperDocumentView.registerFileRepresentations(forPage:to:)(Swift::Int forPage, NSItemProvider to)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  id v37;
  Class v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  void (*v84)(uint64_t, char *, uint64_t);
  char *v85;
  Class isa;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  uint64_t aBlock;
  uint64_t v92;
  id (*v93)(uint64_t, void *);
  void *v94;
  void *v95;
  uint64_t v96;

  isa = to.super.isa;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v4);
  v76 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v75 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v80 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v88 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81, v12);
  v70 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v71 = (char *)&v67 - v16;
  v87 = type metadata accessor for UTType();
  v73 = *(char **)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v17);
  v85 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v19, v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x1E0C80A78](v21, v24);
  v25 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = v23;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v67 - v28;
  static CRKeyPath.unique.getter();
  v89 = v2;
  v90 = forPage;
  type metadata accessor for PaperDocument(0);
  v74 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.init(id:initClosure:)();
  v30 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF58F40);
  v31 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context);
  v82 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v82(v25, v29, v21);
  v32 = *(unsigned __int8 *)(v22 + 80);
  v83 = v32 | 7;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v31;
  v79 = v22;
  v84 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
  v34 = v85;
  v35 = v29;
  v84(v33 + ((v32 + 24) & ~v32), v25, v21);
  v95 = partial apply for closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  v96 = v33;
  aBlock = MEMORY[0x1E0C809B0];
  v92 = 1107296256;
  v93 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  v94 = &block_descriptor_222;
  v36 = _Block_copy(&aBlock);
  v37 = v31;
  swift_release();
  v38 = isa;
  -[objc_class registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:](isa, sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_, v30, 0, 0, v36);

  _Block_release(v36);
  static UTType.pdf.getter();
  v39 = UTType.identifier.getter();
  v41 = v40;
  v68 = (void (*)(char *, uint64_t))*((_QWORD *)v73 + 1);
  v68(v34, v87);
  v42 = (void *)MEMORY[0x1DF0E41AC](v39, v41);
  swift_bridgeObjectRelease();
  v43 = v35;
  v82(v25, v35, v21);
  v44 = (v32 + 16) & ~v32;
  v45 = v44 + v72;
  v46 = (v44 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = swift_allocObject();
  v72 = v44;
  v73 = v25;
  v84(v47 + v44, v25, v21);
  *(_QWORD *)(v47 + v46) = v37;
  v95 = partial apply for closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  v96 = v47;
  aBlock = MEMORY[0x1E0C809B0];
  v92 = 1107296256;
  v93 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  v94 = &block_descriptor_228;
  v48 = _Block_copy(&aBlock);
  v49 = v37;
  swift_release();
  v50 = (uint64_t)v75;
  -[objc_class registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:](v38, sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_, v42, 0, 0, v48);

  _Block_release(v48);
  swift_getKeyPath();
  v51 = v76;
  v52 = v43;
  Capsule<>.subscript.getter();
  swift_release();
  specialized Collection.first.getter(v50);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v51, v78);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v50, 1, v53) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
    v55 = (uint64_t)v80;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v80, 1, 1, v81);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v79 + 8))(v43, v21);
    outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for Ref<Image>?);
    return;
  }
  v78 = v45;
  v56 = v80;
  SharedTagged_3.tagged2.getter();
  v57 = v53;
  v55 = (uint64_t)v56;
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v50, v57);
  v58 = v81;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v56, 1, v81) == 1)
    goto LABEL_4;
  v59 = v88;
  v77 = *(_QWORD *)(v88 + 32);
  v60 = v71;
  ((void (*)(char *, uint64_t, uint64_t))v77)(v71, v55, v58);
  v61 = v85;
  static UTType.jpeg.getter();
  v62 = v21;
  v63 = v73;
  v82(v73, v52, v62);
  v64 = v70;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v70, v60, v58);
  v65 = (v78 + *(unsigned __int8 *)(v59 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v66 = swift_allocObject();
  v84(v66 + v72, v63, v62);
  ((void (*)(unint64_t, char *, uint64_t))v77)(v66 + v65, v64, v58);
  NSItemProvider.registerDataRepresentation(for:visibility:loadHandler:)();
  swift_release();
  v68(v61, v87);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v58);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v52, v62);
}

uint64_t closure #1 in PaperDocumentView.registerFileRepresentations(forPage:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a3;
  v36 = a2;
  v37 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v42 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v40 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v9 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  v39 = v9;
  MEMORY[0x1E0C80A78](v8, v10);
  v34 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v34 - v23;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v25 = type metadata accessor for PaperDocument(0);
  v26 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v24, 1, 1, v26);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v24, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(a4 + *(int *)(v25 + 24)) = MEMORY[0x1E0DEE9E0];
  v27 = v36 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v28(v16, v27, v12);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule.Ref.import<A>(_:)();
  v29 = *(void (**)(char *, uint64_t))(v13 + 8);
  v29(v16, v12);
  v28(v16, v27, v12);
  swift_getKeyPath();
  v30 = v34;
  Capsule<>.subscript.getter();
  swift_release();
  v29(v16, v12);
  v31 = v40;
  v32 = v38;
  CROrderedSet.subscript.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v32);
  CROrderedSet.append(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v31, v35);
}

uint64_t closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:)(void (*a1)(uint64_t, _QWORD, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(unint64_t, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(uint64_t, _QWORD, _QWORD);

  v33 = a3;
  v34 = a4;
  v36 = a2;
  v37 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v4, v5);
  v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v31 - v19;
  v21 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v32 = *(void (**)(char *, uint64_t))(v13 + 8);
  v32(v16, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v22 = type metadata accessor for CRCodableVersion();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 72);
  v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1DDF33AB0;
  v27 = v26 + v25;
  v28 = *(void (**)(unint64_t, _QWORD, uint64_t))(v23 + 104);
  v28(v27, *MEMORY[0x1E0D12370], v22);
  v28(v27 + v24, *MEMORY[0x1E0D12378], v22);
  if (one-time initialization token for allFileFormatVersions != -1)
    swift_once();
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  v29 = (uint64_t)v35;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v35, v20, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v29, 0, 1, v12);
  v37(v29, 0, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?(v29, &demangling cache variable for type metadata for URL?);
  v32(v20, v12);
  return 0;
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(void (*)(uint64_t, char, uint64_t), uint64_t);
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(uint64_t (**)(void (*)(uint64_t, char, uint64_t), uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();
  return v5;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> ()(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v11, &demangling cache variable for type metadata for URL?);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  if (a3)
    v17 = (void *)_convertErrorToNSError(_:)();
  else
    v17 = 0;
  (*(void (**)(uint64_t, void *, _QWORD, void *))(a4 + 16))(a4, v15, a2 & 1, v17);

}

uint64_t closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v11 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a3, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = (v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v17, v11, v7);
  *(_QWORD *)(v19 + v18) = a4;
  v20 = (_QWORD *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v20 = v24;
  v20[1] = a2;
  v21 = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:), v19);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for TaskPriority?);
  return 0;
}

uint64_t closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v7[16] = swift_task_alloc();
  type metadata accessor for PaperDocument(0);
  v7[17] = swift_task_alloc();
  v8 = type metadata accessor for UUID();
  v7[18] = v8;
  v7[19] = *(_QWORD *)(v8 - 8);
  v7[20] = swift_task_alloc();
  v9 = type metadata accessor for URL();
  v7[21] = v9;
  v7[22] = *(_QWORD *)(v9 - 8);
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString *v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  void *v14;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v14 = *(void **)(v0 + 104);
  v7 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v0 + 208) = v8;
  v8(v2, v4);
  URL.appendingPathExtension(_:)();
  v8(v1, v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                          + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:));
  v9 = v14;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v10;
  *v10 = v0;
  v10[1] = closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  return v13((uint64_t)v14, *(_QWORD *)(v0 + 96), v0 + 16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Class isa;
  NSURL *v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 200);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 128);
  v10 = *(NSURL **)(v0 + 112);
  URL._bridgeToObjectiveC()(v10);
  v7 = v6;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for PDFDocumentWriteOption(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_writeToURL_withOptions_, v7, isa);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v2, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v4);
  ((void (*)(uint64_t, _QWORD, _QWORD))v10)(v5, 0, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for URL?);
  v11(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(void **)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc();

  outlined destroy of PKStrokeProperties(v2, type metadata accessor for PaperDocument);
  return swift_task_switch();
}

uint64_t closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a4;
  v27 = a1;
  v28 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v6 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9, v12);
  v13 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v5);
  v19 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v20 = (v11 + *(unsigned __int8 *)(v6 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v19, v13, v9);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v21 + v20, (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
  v22 = (_QWORD *)(v21 + ((v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8));
  v23 = v28;
  *v22 = v27;
  v22[1] = v23;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:), v21);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for TaskPriority?);
  return 0;
}

uint64_t closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v7[6] = type metadata accessor for Image();
  v7[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, double);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule.subscript.getter();
  v3 = (uint64_t (*)(uint64_t, double))((char *)&async function pointer to specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)
                                               + async function pointer to specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  return v3(*(_QWORD *)(v0 + 16), 0.9);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 32))(v2, v1, 0);
  outlined consume of Data?(v2, v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a2;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v4, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  return swift_task_switch();
}

void PaperDocumentView.paste(document:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1
    && objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly, v18))
  {
    v28[1] = a1;
    v21 = v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, v21, v15);
    swift_getKeyPath();
    v29 = a2;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    Capsule<>.subscript.getter();
    v22 = v29;
    swift_release();
    v23 = *(void (**)(char *, uint64_t))(v16 + 8);
    v23(v20, v15);
    v24 = CROrderedSet.count.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    if (v24 >= v22)
    {
      Capsule.copy()();
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v9, 1, 1, v25);
      MEMORY[0x1E0C80A78](v26, v27);
      v28[-4] = v3;
      v28[-3] = v20;
      v28[-2] = v22;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v9, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.paste(document:at:));
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v23(v20, v15);
    }
  }
}

uint64_t closure #1 in PaperDocumentView.paste(document:at:)()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule.callAsFunction<A>(_:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.paste(document:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD *, _QWORD);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD);
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD v47[4];
  uint64_t *v48;

  v45 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v41 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v40 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  MEMORY[0x1E0C80A78](v42, v16);
  v48 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18, v19);
  v46 = (char *)&v40 - v20;
  type metadata accessor for PaperDocument(0);
  v21 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule.Ref.import<A>(_:)();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v44 = v21;
  Capsule<>.subscript.getter();
  v22 = v41;
  swift_release();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = v15;
  (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(v48, v15, v23);
  v26 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC8]);
  dispatch thunk of Collection.endIndex.getter();
  v27 = v25;
  v28 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  v29 = v42;
  v30 = (uint64_t)v48;
  *(uint64_t *)((char *)v48 + *(int *)(v42 + 36)) = v47[0];
  outlined init with take of (key: Int, value: AnyCRValue)?(v30, v28, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  v48 = (uint64_t *)(v28 + *(int *)(v29 + 36));
  v31 = *v48;
  dispatch thunk of Collection.startIndex.getter();
  if (v31 != v47[0])
  {
    v42 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DB8]);
    v43 = v26;
    do
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v32 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v5 + 16))(v11);
      v32(v47, 0);
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v22, v11, v4);
      swift_getKeyPath();
      v33 = v11;
      v34 = v5;
      v35 = v4;
      v36 = a1;
      v37 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.subscript.modify();
      CROrderedSet.insert(_:at:)();
      v37(v47, 0);
      a1 = v36;
      v4 = v35;
      v5 = v34;
      v11 = v33;
      v28 = (uint64_t)v46;
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v4);
      v38 = *v48;
      dispatch thunk of Collection.startIndex.getter();
    }
    while (v38 != v47[0]);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?(v28, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
}

void PaperDocumentView.insert(newDocument:at:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;

  v3 = v2;
  v56 = a2;
  v53 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v55 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v52 = (char *)&v48 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v50 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v48 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v54 = (char *)&v48 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v30 = *(_QWORD *)(v29 - 8);
  v32 = MEMORY[0x1E0C80A78](v29, v31);
  v34 = (char *)&v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
  {
    if (objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly, v32))
    {
      v49 = v4;
      v35 = v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v34, v35, v29);
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v29);
      v36 = CROrderedSet.count.getter();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
      if (v36 >= (uint64_t)v56)
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        v38 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
        v39 = v38(v16, 1, 1, v37);
        MEMORY[0x1E0C80A78](v39, v40);
        v41 = v53;
        v42 = (uint64_t)v54;
        *(&v48 - 4) = v3;
        *(&v48 - 3) = v41;
        v43 = v56;
        *(&v48 - 2) = (uint64_t)v56;
        specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v16, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.insert(newDocument:at:), (uint64_t)(&v48 - 6), (uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)&unk_1EA84F420, (uint64_t)partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
        v44 = v49;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v42, (uint64_t)v20, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        v45 = v55;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v20, 1, v44) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v42, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        }
        else
        {
          v46 = v52;
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v52, v20, v44);
          (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v51, v46, v44);
          lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
          v47 = (uint64_t)v50;
          WeakTagged_3.init(_:)();
          v38((char *)v47, 0, 1, v37);
          PaperDocumentView.goToPage(_:hint:)(v47, v43, 0);
          outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
          v20 = (char *)v42;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      }
    }
  }
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(newDocument:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(_BYTE *, _QWORD);
  void (*v7)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];

  v11 = a1;
  v12 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v10 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule.Ref.import<A>(_:)();
  swift_getKeyPath();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule<>.subscript.getter();
  swift_release();
  v6 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.subscript.modify();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  CROrderedSet.insert<A>(contentsOf:at:)();
  v7 = *(void (**)(char *, uint64_t))(v10 + 8);
  v7(v5, v2);
  v6(v13, 0);
  swift_release();
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  specialized Collection.first.getter(v12);
  return ((uint64_t (*)(char *, uint64_t))v7)(v5, v2);
}

uint64_t PaperDocumentView.loadAndInsertPDF(url:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  type metadata accessor for CRKeyPath();
  v3[8] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[9] = v5;
  v3[10] = *(_QWORD *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PaperDocumentView.loadAndInsertPDF(url:at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_BYTE *)(v0 + 128) = 0;
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  static CRKeyPath.unique.getter();
  v3 = (_QWORD *)swift_task_alloc();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 128;
  type metadata accessor for PaperDocument(0);
  *(_QWORD *)(v0 + 104) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.init(id:initClosure:)();
  swift_task_dealloc();
  if (*(_BYTE *)(v0 + 128) == 1)
  {
    Capsule.copy()();
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 112) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  v4 = (void *)v0[3];
  swift_release();
  PaperDocumentView.insert(newDocument:at:)(v1, v4);
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[15] = v5;
  v5(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v4 = CROrderedSet.count.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(_QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t closure #1 in PaperDocumentView.loadAndInsertPDF(url:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BYTE *v28;
  uint64_t v29;

  v28 = a3;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v29, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v28 - v12;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, a2, v14, v21);
  swift_retain();
  v24 = CRContext.assetManager.getter();
  specialized PaperDocument.init<A>(url:in:assetManager:)((uint64_t)v18, a1, v24, (uint64_t)v23);
  v25 = type metadata accessor for PaperDocument(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v23, 1, v25) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PaperDocument?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
    CROrderedSet.init()();
    v26 = type metadata accessor for CRAsset();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 1, 1, v26);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
    CRRegister.init(wrappedValue:)();
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    *(_QWORD *)(a4 + *(int *)(v25 + 24)) = MEMORY[0x1E0DEE9E0];
  }
  else
  {
    result = outlined init with take of PKStrokeStruct((uint64_t)v23, a4, type metadata accessor for PaperDocument);
    *v28 = 1;
  }
  return result;
}

uint64_t PaperDocumentView.loadAndInsertImage(url:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  void *v38;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  CGAffineTransform v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;

  v69 = (void *)a2;
  v73 = a1;
  v3 = type metadata accessor for URL();
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v74 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v65 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v75 = (uint64_t)&v65 - v16;
  v68 = type metadata accessor for Image();
  v70 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v17);
  v66 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v67 = (uint64_t)&v65 - v21;
  v22 = type metadata accessor for PaperDocument(0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v65 - v33;
  v35 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v36(v34, v35, v26);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  v37 = *(void (**)(char *, uint64_t))(v27 + 8);
  v37(v34, v26);
  v36(v30, v35, v26);
  v38 = v69;
  specialized PaperDocument.pageGeometryForInserting<A>(at:in:)((uint64_t)v69, &v76.a);
  a = v76.a;
  b = v76.b;
  c = v76.c;
  d = v76.d;
  CGAffineTransformMakeRotation(&v76, v76.tx);
  v77.origin.x = a;
  v77.origin.y = b;
  v77.size.width = c;
  v77.size.height = d;
  v78 = CGRectApplyAffineTransform(v77, &v76);
  x = v78.origin.x;
  y = v78.origin.y;
  width = v78.size.width;
  height = v78.size.height;
  v47 = v30;
  v48 = v68;
  v37(v47, v26);
  outlined destroy of PKStrokeProperties((uint64_t)v25, type metadata accessor for PaperDocument);
  v50 = v71;
  v49 = v72;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v51(v9, v73, v72);
  v79.origin.x = x;
  v79.origin.y = y;
  v79.size.width = width;
  v79.size.height = height;
  v52 = CGRectGetWidth(v79);
  v53 = CRContext.assetManager.getter();
  v54 = (uint64_t)v74;
  v51(v74, (uint64_t)v9, v49);
  Image.init(url:targetPageSize:assetManager:)(v54, v52, v52, 0, v53, (uint64_t)v13);
  v55 = v49;
  v56 = v70;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v55);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  if (v57(v13, 1, v48))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Image?);
    v58 = 1;
    v59 = v75;
  }
  else
  {
    v60 = v66;
    outlined init with take of PKStrokeStruct((uint64_t)v13, v66, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    v61 = v60;
    v59 = v75;
    outlined init with take of PKStrokeStruct(v61, v75, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    v58 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v59, v58, 1, v48);
  if (v57((char *)v59, 1, v48) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for Image?);
    return 0;
  }
  else
  {
    v63 = v59;
    v64 = v67;
    outlined init with take of PKStrokeStruct(v63, v67, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    PaperDocumentView.insert(_:at:)(v64, v38);
    outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    return 1;
  }
}

void PaperDocumentView.insert(_:at:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t, uint64_t);

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v22 - v17;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
  {
    if (objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      v23 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
      v20 = v23(v8, 1, 1, v19);
      MEMORY[0x1E0C80A78](v20, v21);
      *(&v22 - 4) = v2;
      *(&v22 - 3) = a1;
      *(&v22 - 2) = (uint64_t)a2;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v8, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.insert(_:at:), (uint64_t)(&v22 - 6), (uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)&unk_1EA84F380, (uint64_t)partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v18, v9);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:)();
      v23(v8, 0, 1, v19);
      PaperDocumentView.goToPage(_:hint:)((uint64_t)v8, a2, 0);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    }
  }
}

uint64_t closure #1 in PaperDocumentView.insert(newDocument:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  Capsule.callAsFunction<A>(_:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, _QWORD);
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26[32];

  v24 = a4;
  v25 = a3;
  v21[1] = a1;
  v22 = a2;
  v4 = type metadata accessor for CRKeyPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v23 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v22, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  v26[0] = 1;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  SharedTagged_3.init(_:id:)();
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v19 = (void (*)(char *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.insert(_:at:)();
  v19(v26, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v18, v15);
}

Swift::Void __swiftcall PaperDocumentView.insert(_:at:)(VNDocumentCameraScan _, Swift::Int at)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v22 - v17;
  if (v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
  {
    if (objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
      v20(v8, 1, 1, v19);
      v21 = v2;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v8, v21, v21, _.super.isa, (void *)at, (uint64_t)v18);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v18, v9);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:)();
      v20(v8, 0, 1, v19);
      PaperDocumentView.goToPage(_:hint:)((uint64_t)v8, (void *)at, 0);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    }
  }
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  _BYTE v13[32];

  v6 = type metadata accessor for PaperDocument(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = CRContext.assetManager.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v11 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  specialized PaperDocument.insert<A>(scan:at:in:assetManager:)(a2, a3, a1, v10);
  swift_release();
  v11(v13, 0);
  Capsule.Ref<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.subscript.getter();
  return outlined destroy of PKStrokeProperties((uint64_t)v9, type metadata accessor for PaperDocument);
}

Swift::Bool __swiftcall PaperDocumentView.insert(_:at:)(NSItemProvider _, Swift::Int at)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _BYTE *v36;
  id v37;
  uint64_t aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, void *);
  void *v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;

  v3 = v2;
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] != 1)
    goto LABEL_10;
  v12 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly, v9);
  if (v12)
  {
    v13 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF58F40);
    v14 = -[objc_class hasItemConformingToTypeIdentifier:](_.super.isa, sel_hasItemConformingToTypeIdentifier_, v13);

    if (v14)
    {
      v15 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF58F40);
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v3;
      *(_QWORD *)(v16 + 24) = at;
      v43 = partial apply for closure #1 in PaperDocumentView.insert(_:at:);
      v44 = v16;
      aBlock = MEMORY[0x1E0C809B0];
      v40 = 1107296256;
      v17 = &block_descriptor_179;
LABEL_9:
      v41 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ();
      v42 = v17;
      v35 = _Block_copy(&aBlock);
      v36 = v3;
      swift_release();
      v37 = -[objc_class loadFileRepresentationForTypeIdentifier:completionHandler:](_.super.isa, sel_loadFileRepresentationForTypeIdentifier_completionHandler_, v15, v35, aBlock, v40);
      _Block_release(v35);

      LOBYTE(v12) = 1;
      return v12;
    }
    static UTType.pdf.getter();
    v18 = UTType.identifier.getter();
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v11, v6);
    v22 = (void *)MEMORY[0x1DF0E41AC](v18, v20);
    swift_bridgeObjectRelease();
    LODWORD(v20) = -[objc_class hasItemConformingToTypeIdentifier:](_.super.isa, sel_hasItemConformingToTypeIdentifier_, v22);

    if ((_DWORD)v20)
    {
      static UTType.pdf.getter();
      v23 = UTType.identifier.getter();
      v25 = v24;
      v21(v11, v6);
      v15 = (void *)MEMORY[0x1DF0E41AC](v23, v25);
      swift_bridgeObjectRelease();
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v3;
      *(_QWORD *)(v26 + 24) = at;
      v43 = partial apply for closure #2 in PaperDocumentView.insert(_:at:);
      v44 = v26;
      aBlock = MEMORY[0x1E0C809B0];
      v40 = 1107296256;
      v17 = &block_descriptor_173;
      goto LABEL_9;
    }
    static UTType.image.getter();
    v27 = UTType.identifier.getter();
    v29 = v28;
    v21(v11, v6);
    v30 = (void *)MEMORY[0x1DF0E41AC](v27, v29);
    swift_bridgeObjectRelease();
    LODWORD(v29) = -[objc_class hasItemConformingToTypeIdentifier:](_.super.isa, sel_hasItemConformingToTypeIdentifier_, v30);

    if ((_DWORD)v29)
    {
      static UTType.image.getter();
      v31 = UTType.identifier.getter();
      v33 = v32;
      v21(v11, v6);
      v15 = (void *)MEMORY[0x1DF0E41AC](v31, v33);
      swift_bridgeObjectRelease();
      v34 = swift_allocObject();
      *(_QWORD *)(v34 + 16) = v3;
      *(_QWORD *)(v34 + 24) = at;
      v43 = partial apply for closure #3 in PaperDocumentView.insert(_:at:);
      v44 = v34;
      aBlock = MEMORY[0x1E0C809B0];
      v40 = 1107296256;
      v17 = &block_descriptor_167_0;
      goto LABEL_9;
    }
LABEL_10:
    LOBYTE(v12) = 0;
  }
  return v12;
}

uint64_t closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t FileVersionPolicy;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(unint64_t, _QWORD, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  id v56[3];
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;

  v60 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v62 = *(_QWORD *)(FileVersionPolicy - 8);
  v63 = (char *)FileVersionPolicy;
  MEMORY[0x1E0C80A78](FileVersionPolicy, v11);
  v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v64 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v65 = *(_QWORD *)(v17 - 8);
  v66 = v17;
  v18 = *(_QWORD *)(v65 + 64);
  MEMORY[0x1E0C80A78](v17, v19);
  v59 = (char *)v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v61 = (char *)v56 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for URL();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v26, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for URL?);
  v57 = v27;
  v58 = v9;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v26, v27);
  v56[0] = a3;
  v56[2] = *(id *)&a3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context];
  v56[1] = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v33 = type metadata accessor for CRCodableVersion();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(_QWORD *)(v34 + 72);
  v36 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1DDF33AB0;
  v38 = v37 + v36;
  v39 = *(void (**)(unint64_t, _QWORD, uint64_t))(v34 + 104);
  v39(v38, *MEMORY[0x1E0D12370], v33);
  v39(v38 + v35, *MEMORY[0x1E0D12378], v33);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  v41 = v62;
  v40 = v63;
  (*(void (**)(char *, _QWORD, char *))(v62 + 104))(v13, *MEMORY[0x1E0D127E0], v63);
  v42 = v64;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  v43 = (uint64_t)v58;
  (*(void (**)(char *, char *))(v41 + 8))(v13, v40);
  swift_bridgeObjectRelease();
  v63 = v31;
  v44 = v65;
  v45 = v66;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v42, 0, 1, v66);
  v62 = *(_QWORD *)(v44 + 32);
  v46 = v61;
  ((void (*)(char *, char *, uint64_t))v62)(v61, v42, v45);
  v47 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v43, 1, 1, v47);
  v48 = v59;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v59, v46, v45);
  type metadata accessor for MainActor();
  v49 = v43;
  v50 = v56[0];
  v51 = static MainActor.shared.getter();
  v52 = (*(unsigned __int8 *)(v44 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v53 = (v18 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  v54 = (_QWORD *)swift_allocObject();
  v55 = MEMORY[0x1E0DF06E8];
  v54[2] = v51;
  v54[3] = v55;
  v54[4] = v50;
  ((void (*)(char *, char *, uint64_t))v62)((char *)v54 + v52, v48, v45);
  *(_QWORD *)((char *)v54 + v53) = v60;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v49, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PaperDocumentView.insert(_:at:), (uint64_t)v54);
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v61, v45);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v63, v57);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  type metadata accessor for MainActor();
  v6[5] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release();
  PaperDocumentView.paste(document:at:)(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, void *);
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = type metadata accessor for URL();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  }
  swift_retain();
  v13 = a3;
  v10(v9, a3);
  swift_release();

  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
}

uint64_t closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for URL();
  v6[5] = v7;
  v6[6] = *(_QWORD *)(v7 - 8);
  v6[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  v6[9] = dispatch thunk of Actor.unownedExecutor.getter();
  v6[10] = v8;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)()
{
  uint64_t *v0;
  _QWORD *v1;

  CRStableAsset.url.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v0[11] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:);
  return PaperDocumentView.loadAndInsertPDF(url:at:)(v0[7], v0[4]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a4;
  v46 = a6;
  v42 = a3;
  v43 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v47 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for CRStableAsset();
  v41 = *(_QWORD *)(v44 - 8);
  v10 = *(_QWORD *)(v41 + 64);
  MEMORY[0x1E0C80A78](v44, v11);
  v12 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v40 - v28;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v20, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v29, v20, v21);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v29, v21);
  v40 = v16;
  CRStableAsset.init(url:extension:)();
  v31 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v47, 1, 1, v31);
  v32 = v41;
  v33 = v16;
  v34 = v44;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v12, v33, v44);
  type metadata accessor for MainActor();
  v42 = v42;
  v35 = static MainActor.shared.getter();
  v36 = (*(unsigned __int8 *)(v32 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v37 = (char *)swift_allocObject();
  v38 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v37 + 2) = v35;
  *((_QWORD *)v37 + 3) = v38;
  *((_QWORD *)v37 + 4) = v42;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v37[v36], v12, v34);
  v39 = v46;
  *(_QWORD *)&v37[(v10 + v36 + 7) & 0xFFFFFFFFFFFFFFF8] = v45;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v47, v39, (uint64_t)v37);
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v40, v34);
}

uint64_t closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for URL();
  v6[5] = v7;
  v6[6] = *(_QWORD *)(v7 - 8);
  v6[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  swift_release();
  CRStableAsset.url.getter();
  PaperDocumentView.loadAndInsertImage(url:at:)(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall PaperDocumentView.paste(at:)(Swift::Int at)
{
  uint64_t v1;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  Swift::Bool v15;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) != 1
    || !objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly))
  {
    return;
  }
  v3 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
  v4 = objc_msgSend(v3, sel_itemProviders);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_5;
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_17;
LABEL_5:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x1DF0E4D64](0, v5);
LABEL_8:
    v8 = v7;
    v9 = PaperDocumentView.insert(_:at:)((NSItemProvider)v7, at);

    if (!v9)
    {
      v10 = 0;
      v11 = v6 - 1;
      while (v11 != v10)
      {
        v12 = v10 + 1;
        if ((v5 & 0xC000000000000001) != 0)
        {
          v13 = (id)MEMORY[0x1DF0E4D64](v10 + 1, v5);
        }
        else
        {
          if (v12 >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_20;
          v13 = *(id *)(v5 + 8 * v10 + 40);
        }
        v14 = v13;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        v15 = PaperDocumentView.insert(_:at:)((NSItemProvider)v13, at);

        ++v10;
        if (v15)
          goto LABEL_17;
      }
    }
    goto LABEL_17;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v5 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

Swift::Void __swiftcall PaperDocumentView.rotatePage(at:left:)(Swift::Int at, Swift::Bool left)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  char *v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;

  v37 = left;
  v39 = at;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PaperDocument(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v40 = *(_QWORD *)(v21 - 8);
  v41 = v21;
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v38 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
  {
    v35 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
    if (objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly, v23))
    {
      v34 = v6;
      v36 = v2;
      v26 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v26, v16);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      Capsule<>.root.getter();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v15, v7);
      v27 = v36;
      outlined destroy of PKStrokeProperties((uint64_t)v15, type metadata accessor for PaperDocument);
      v28 = v38;
      CROrderedSet.subscript.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      if (*(_BYTE *)(v27 + v25) == 1)
      {
        if (objc_msgSend(*(id *)(v27 + v35), sel_allowsDocumentAssembly))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          v30 = (uint64_t)v34;
          v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v34, 1, 1, v29);
          MEMORY[0x1E0C80A78](v31, v32);
          *(&v33 - 4) = v27;
          *(&v33 - 3) = (uint64_t)v28;
          *((_BYTE *)&v33 - 16) = v37;
          specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, v30, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.rotatePage(_:left:));
          outlined destroy of StocksKitCurrencyCache.Provider?(v30, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        }
      }
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
    }
  }
}

uint64_t closure #1 in PaperDocumentView.rotatePage(_:left:)()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule.callAsFunction<A>(_:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.rotatePage(_:left:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;

  if ((a3 & 1) != 0)
    v3 = -90;
  else
    v3 = 90;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v4 = (uint64_t (*)(uint64_t *, _QWORD))SharedTagged_3.subscript.modify();
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_QWORD *)(v5 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v5, v6);
  PaperPage.axisAlignedRotationInDegrees.getter(v6, v7);
  v9 = __OFADD__(v8, v3);
  result = v8 + v3;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    PaperPage.axisAlignedRotationInDegrees.setter(result, v6, v7);
    return v4(&v11, 0);
  }
  return result;
}

Swift::Void __swiftcall PaperDocumentView.insertFromFile(at:)(Swift::Int at)
{
  char *v1;
  char *v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  _BOOL8 v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  id v12;
  void *v13;

  if (v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
  {
    if (objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly))
    {
      v3 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI];
      swift_beginAccess();
      v4 = (id)MEMORY[0x1DF0E666C](v3);
      if (v4
        || (v12 = objc_msgSend(v1, sel_window)) != 0
        && (v13 = v12,
            v4 = objc_msgSend(v12, sel_rootViewController),
            v13,
            v4))
      {
        *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex] = at;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
        type metadata accessor for UTType();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_1DDF33AB0;
        static UTType.image.getter();
        static UTType.pdf.getter();
        v5 = objc_allocWithZone(MEMORY[0x1E0DC3730]);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v7 = objc_msgSend(v5, sel_initForOpeningContentTypes_asCopy_, isa, 1);

        objc_msgSend(v7, sel_setAllowsMultipleSelection_, 1);
        objc_msgSend(v7, sel_setDelegate_, v1);
        objc_msgSend(v7, sel_setModalPresentationStyle_, 2);
        v8 = !UIAccessibilityIsReduceMotionEnabled();
        v9 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
        swift_beginAccess();
        if (MEMORY[0x1DF0E666C](v9))
        {
          v10 = *((_QWORD *)v9 + 1);
          ObjectType = swift_getObjectType();
          (*(void (**)(char *, id, _BOOL8, uint64_t, uint64_t))(v10 + 32))(v1, v7, v8, ObjectType, v10);
          swift_unknownObjectRelease();
        }
        objc_msgSend(v4, sel_presentViewController_animated_completion_, v7, v8, 0);

      }
    }
  }
}

Swift::Void __swiftcall PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(UIDocumentPickerViewController *_, Swift::OpaquePointer didPickDocumentsAt)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BOOL4 IsReduceMotionEnabled;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::OpaquePointer *v17;
  void *v18;
  uint64_t v19;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v10))
  {
    v11 = *((_QWORD *)v10 + 1);
    ObjectType = swift_getObjectType();
    IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
    (*(void (**)(char *, UIDocumentPickerViewController *, BOOL, uint64_t, uint64_t))(v11 + 40))(v3, _, !IsReduceMotionEnabled, ObjectType, v11);
    swift_unknownObjectRelease();
  }
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  type metadata accessor for MainActor();
  swift_bridgeObjectRetain();
  v15 = v3;
  v16 = static MainActor.shared.getter();
  v17 = (Swift::OpaquePointer *)swift_allocObject();
  v18 = (void *)MEMORY[0x1E0DF06E8];
  v17[2]._rawValue = (void *)v16;
  v17[3]._rawValue = v18;
  v17[4]._rawValue = didPickDocumentsAt._rawValue;
  v17[5]._rawValue = v15;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:), (uint64_t)v17);
  swift_release();
}

uint64_t closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for URL();
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  v5[9] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[10] = v7;
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 88) = v2;
  v3 = *(_QWORD *)(v0 + 40);
  if (v2)
  {
    *(_QWORD *)(v0 + 96) = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex;
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 144) = v4;
    *(_QWORD *)(v0 + 104) = *(_QWORD *)(v3 + 72);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)(v0 + 112) = v5;
    *(_QWORD *)(v0 + 120) = 0;
    v6 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 32);
    v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain();
    v5(v6, v8, v7);
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
    *(_QWORD *)(v0 + 128) = v9;
    v9(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      v10 = *(_QWORD *)(v0 + 96);
      v11 = *(_QWORD *)(v0 + 24);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 32))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
      v12 = *(_QWORD *)(v11 + v10);
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v13;
      *v13 = v0;
      v13[1] = closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:);
      return PaperDocumentView.insertFile(at:at:)(*(_QWORD *)(v0 + 48), v12);
    }
  }
  else
  {
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v16 = *(_QWORD *)(v0 + 56);
    v17 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain();
    v15(v16, 1, 1, v17);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, unint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 120) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  if (v2 == v1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 56), 1, 1, *(_QWORD *)(v0 + 32));
LABEL_4:
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120) + 1;
  *(_QWORD *)(v0 + 120) = v4;
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v3(v5, *(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 144) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 144))+ *(_QWORD *)(v0 + 104) * v4, v6);
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56);
  *(_QWORD *)(v0 + 128) = v8;
  v8(v5, 0, 1, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    goto LABEL_4;
  v10 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 32))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
  v12 = *(_QWORD *)(v11 + v10);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v13;
  *v13 = v0;
  v13[1] = closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:);
  return PaperDocumentView.insertFile(at:at:)(*(_QWORD *)(v0 + 48), v12);
}

Swift::Void __swiftcall PaperDocumentView.documentPickerWasCancelled(_:)(UIDocumentPickerViewController *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _BOOL4 IsReduceMotionEnabled;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v3))
  {
    v4 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
    (*(void (**)(uint64_t, UIDocumentPickerViewController *, BOOL, uint64_t, uint64_t))(v4 + 40))(v1, a1, !IsReduceMotionEnabled, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

void closure #1 in PaperDocumentView.copyPageAction(for:)(uint64_t a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  Class isa;
  uint64_t v12;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36C8]), sel_init);
    PaperDocumentView.registerFileRepresentations(forPage:to:)(a3, (NSItemProvider)v7);
    v8 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v9 + 32) = v7;
    v12 = v9;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    v10 = v7;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setItemProviders_, isa, v12);

  }
}

UIAction_optional __swiftcall PaperDocumentView.pasteAction(for:)(PDFPage_optional *a1)
{
  _BYTE *v1;
  uint64_t v3;
  Swift::Bool v4;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  char *v23;
  char *v24;
  Swift::String v25;
  Swift::String_optional v26;
  Swift::String v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  UIAction_optional result;
  Swift::String v41;

  if (v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] != 1)
    goto LABEL_27;
  v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  if (!objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly))goto LABEL_27;
  v5 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
  v6 = objc_msgSend(v5, sel_itemProviders);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v38 = v3;
  if (v7 >> 62)
  {
LABEL_25:
    v33 = v1;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
      goto LABEL_5;
    goto LABEL_26;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v1;
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_26:

    swift_bridgeObjectRelease_n();
LABEL_27:
    v32 = 0;
    goto LABEL_28;
  }
LABEL_5:
  v10 = 0;
  v11 = v7 & 0xC000000000000001;
  v12 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  v36 = v8;
  v37 = v7 + 32;
  v39 = v7;
  v34 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  v35 = v7 & 0xC000000000000001;
  while (1)
  {
    if (v11)
      v13 = (id)MEMORY[0x1DF0E4D64](v10, v7);
    else
      v13 = *(id *)(v37 + 8 * v10);
    v14 = v13;
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    v16 = *(_QWORD *)&v1[v12];
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
      break;
LABEL_6:

    if (v10 == v8)
      goto LABEL_26;
  }
  swift_bridgeObjectRetain_n();
  v18 = (uint64_t *)(v16 + 40);
  while (1)
  {
    v20 = *(v18 - 1);
    v19 = *v18;
    swift_bridgeObjectRetain();
    v21 = (void *)MEMORY[0x1DF0E41AC](v20, v19);
    v22 = objc_msgSend(v14, sel_hasItemConformingToTypeIdentifier_, v21);

    swift_bridgeObjectRelease();
    if (v22)
      break;
    v18 += 2;
    if (!--v17)
    {
      swift_bridgeObjectRelease_n();
      v7 = v39;
      v11 = v35;
      v8 = v36;
      v12 = v34;
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  if (a1)
  {
    v23 = (char *)objc_msgSend(*(id *)&v1[v38], sel_indexForPage_);
    v24 = v23 + 1;
    if (!__OFADD__(v23, 1))
      goto LABEL_21;
    __break(1u);
  }
  v24 = 0;
LABEL_21:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v41._countAndFlagsBits = 0xD000000000000028;
  v41._object = (void *)0x80000001DDF58EF0;
  v25._countAndFlagsBits = 0x6574736150;
  v25._object = (void *)0xE500000000000000;
  v26.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v26.value._object = (void *)0xEB00000000656C62;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, paperKitBundle, v27, v41);
  v28 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000010, 0x80000001DDF4DE50);
  v29 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v28);

  MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58F20);
  v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v30;
  *(_QWORD *)(v31 + 24) = v24;
  v32 = (objc_class *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
LABEL_28:
  result.value.super.super.isa = v32;
  result.is_nil = v4;
  return result;
}

void closure #1 in PaperDocumentView.rotateLeftAction(for:)(uint64_t a1, uint64_t a2, Swift::Int a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  if (v7)
  {
    v8 = (void *)v7;
    PaperDocumentView.rotatePage(at:left:)(a3, a4 & 1);

  }
}

void closure #2 in PaperDocumentView.pasteAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  if (v7)
  {
    v8 = (void *)v7;
    a4(a3);

  }
}

UIAction_optional __swiftcall PaperDocumentView.deleteAction(for:)(PDFPage *a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Bool v4;
  id v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  UIAction_optional result;
  Swift::String v15;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1
    && (v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument,
        objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly)))
  {
    v5 = objc_msgSend(*(id *)(v1 + v3), sel_indexForPage_, a1);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v15._countAndFlagsBits = 0xD000000000000076;
    v6.value._object = (void *)0xEB00000000656C62;
    v15._object = (void *)0x80000001DDF58E70;
    v7._countAndFlagsBits = 0x50206574656C6544;
    v7._object = (void *)0xEB00000000656761;
    v6.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v6, paperKitBundle, v8, v15);
    v9 = (void *)MEMORY[0x1DF0E41AC](0x6873617274, 0xE500000000000000);
    v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v9);

    MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF57460);
    v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v5;
    v13 = (objc_class *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    v13 = 0;
  }
  result.value.super.super.isa = v13;
  result.is_nil = v4;
  return result;
}

void closure #1 in PaperDocumentView.deleteAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v9 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v9)
  {
    v10 = (void *)v9;
    if (*(_BYTE *)(v9 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
    {
      if (objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
        v12 = v10;
        specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v8, v12, v12, a3);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      }
    }

  }
}

Swift::OpaquePointer_optional __swiftcall PaperDocumentView.menuElements(for:)(PDFPage *a1)
{
  PDFPage *v1;
  PDFPage *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Swift::Bool v14;
  uint64_t v15;
  PDFPage_optional *v16;
  void *v17;
  PDFPage *v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t inited;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  PDFPage *v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  UIMenuElementSize v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  id v54;
  Swift::String v55;
  Swift::String_optional v56;
  Swift::String v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  Swift::String_optional v65;
  Swift::String v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  void *v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  UIMenuElementSize v80;
  Swift::String v81;
  UIMenu v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  id v86;
  Swift::String v87;
  Swift::String_optional v88;
  Swift::String v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  char v95;
  uint64_t v96;
  char *v97;
  char *v98;
  Swift::String v99;
  Swift::String_optional v100;
  Swift::String v101;
  void *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  void *v108;
  char *v109;
  char *v110;
  Swift::String v111;
  Swift::String_optional v112;
  Swift::String v113;
  void *v114;
  id v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  void *v120;
  id v121;
  void *v122;
  id v123;
  void *v124;
  id v125;
  UIMenuElementSize v126;
  Swift::String v127;
  UIMenu v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  UIMenuElementSize v138;
  id v139;
  Swift::String v140;
  id v141;
  void *v142;
  id v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  Swift::OpaquePointer v148;
  UIMenu v149;
  UIMenu v150;
  __int128 v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  PDFPage *v162;
  PDFPage_optional *v163;
  uint64_t v164;
  uint64_t v165;
  UIMenuElementSize v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  Swift::OpaquePointer_optional result;
  UIImage_optional v171;
  UIImage_optional v172;
  UIImage_optional v173;
  UIImage_optional v174;
  Swift::String v175;
  Swift::String v176;
  Swift::String v177;
  Swift::String v178;
  Swift::String v179;
  Swift::String v180;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v164 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v151 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  v13 = swift_dynamicCastClass();
  v15 = MEMORY[0x1E0DEE9D8];
  if (!v13)
    goto LABEL_115;
  v16 = (PDFPage_optional *)v13;
  v159 = v9;
  v160 = v8;
  v161 = v7;
  v165 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  v17 = *(Class *)((char *)&v2->super.isa + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
  v18 = a1;
  v19 = objc_msgSend(v17, sel_indexForPage_, v16);
  if (v19 == (id)NSNotFound.getter())
  {

    goto LABEL_115;
  }
  v20 = (char *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  v21 = MEMORY[0x1DF0E666C](v20);
  v156 = v4;
  if (v21)
  {
    v22 = *((_QWORD *)v20 + 1);
    ObjectType = swift_getObjectType();
    LOBYTE(v22) = (*(uint64_t (**)(PDFPage *, uint64_t, uint64_t))(v22 + 24))(v2, ObjectType, v22);
    swift_unknownObjectRelease();
    if ((v22 & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v24 = (char *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode;
    swift_beginAccess();
    if (!*v24)
      goto LABEL_10;
  }
  if (*((_BYTE *)&v2->super.isa + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
  {
    v25 = (unint64_t)objc_msgSend(*(id *)((char *)&v2->super.isa + v165), sel_allowsDocumentAssembly);
    goto LABEL_11;
  }
LABEL_10:
  v25 = 0;
LABEL_11:
  v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v26 = swift_allocObject();
  v151 = xmmword_1DDF35440;
  *(_OWORD *)(v26 + 16) = xmmword_1DDF35440;
  v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF33AB0;
  v28 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying;
  swift_beginAccess();
  v29 = 0;
  v30 = *v28;
  v162 = v18;
  v163 = v16;
  v155 = v12;
  if (v30 == 1)
  {
    v153 = objc_msgSend(*(id *)((char *)&v2->super.isa + v165), sel_indexForPage_, v16);
    v154 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v175._countAndFlagsBits = 0xD000000000000027;
    v175._object = (void *)0x80000001DDF58E40;
    v31._countAndFlagsBits = 2037411651;
    v31._object = (void *)0xE400000000000000;
    v32.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v32.value._object = (void *)0xEB00000000656C62;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, paperKitBundle, v33, v175);
    v34 = (void *)MEMORY[0x1DF0E41AC](0x642E6E6F2E636F64, 0xEA0000000000636FLL);
    v35 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v34);

    MEMORY[0x1DF0E41AC](0xD000000000000013, 0x80000001DDF573C0);
    v36 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v37 = swift_allocObject();
    v38 = v153;
    *(_QWORD *)(v37 + 16) = v36;
    *(_QWORD *)(v37 + 24) = v38;
    v29 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v16 = v163;
    v15 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(inited + 32) = v29;
  v39 = v165;
  if (!(_DWORD)v25
    || (v40 = v162,
        v41 = (unint64_t)PaperDocumentView.pasteAction(for:)(v16),
        v40,
        !v41))
  {
    v41 = 0;
  }
  *(_QWORD *)(inited + 40) = v41;
  v167 = inited;
  specialized Array._endMutation()();
  v42 = v167;
  v167 = v15;
  v43 = *(void **)(v42 + 32);
  if (v43)
  {
    v44 = v43;
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v16 = v163;
  }
  v45 = *(void **)(v42 + 40);
  if (v45)
  {
    v46 = v45;
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v16 = v163;
  }
  v47 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v48 = v167;
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  v171.value.super.isa = 0;
  v171.is_nil = 0;
  *(UIMenu *)(v26 + 32) = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v49, (Swift::String_optional)0, v171, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v48, v148);
  v167 = v26;
  specialized Array._endMutation()();
  v50 = v167;
  v169 = v167;
  if ((v25 & 1) != 0)
  {
    v154 = swift_allocObject();
    *(_OWORD *)(v154 + 16) = xmmword_1DDF329E0;
    v51 = swift_initStackObject();
    *(_OWORD *)(v51 + 16) = xmmword_1DDF33640;
    v52 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
    v53 = *((unsigned __int8 *)&v2->super.isa
          + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing);
    v152 = v47;
    v153 = (_BYTE *)OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
    if (v53 == 1 && objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_allowsDocumentAssembly))
    {
      v54 = objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_indexForPage_, v16);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v176._countAndFlagsBits = 0xD000000000000078;
      v176._object = (void *)0x80000001DDF58DA0;
      v55._countAndFlagsBits = 0x4C20657461746F52;
      v55._object = (void *)0xEB00000000746665;
      v56.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v56.value._object = (void *)0xEB00000000656C62;
      v57._countAndFlagsBits = 0;
      v57._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v55, v56, paperKitBundle, v57, v176);
      v58 = (void *)MEMORY[0x1DF0E41AC](0x6C2E657461746F72, 0xEB00000000746665);
      v59 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v58);

      MEMORY[0x1DF0E41AC](0xD00000000000001ALL, 0x80000001DDF58E20);
      v60 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v61 = swift_allocObject();
      *(_QWORD *)(v61 + 16) = v60;
      *(_QWORD *)(v61 + 24) = v54;
      v62 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      v16 = v163;
      v15 = MEMORY[0x1E0DEE9D8];
      v52 = (uint64_t)v153;
      v39 = v165;
    }
    else
    {
      v62 = 0;
    }
    *(_QWORD *)(v51 + 32) = v62;
    if (*((_BYTE *)&v2->super.isa + v52) == 1
      && objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_allowsDocumentAssembly))
    {
      v63 = objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_indexForPage_, v16);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v177._countAndFlagsBits = 0xD000000000000079;
      v177._object = (void *)0x80000001DDF58860;
      v64._countAndFlagsBits = 0x5220657461746F52;
      v64._object = (void *)0xEC00000074686769;
      v65.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v65.value._object = (void *)0xEB00000000656C62;
      v66._countAndFlagsBits = 0;
      v66._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v64, v65, paperKitBundle, v66, v177);
      v67 = (void *)MEMORY[0x1DF0E41AC](0x722E657461746F72, 0xEC00000074686769);
      v68 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v67);

      MEMORY[0x1DF0E41AC](0xD00000000000001BLL, 0x80000001DDF58D80);
      v69 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v70 = swift_allocObject();
      *(_QWORD *)(v70 + 16) = v69;
      *(_QWORD *)(v70 + 24) = v63;
      v71 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      v16 = v163;
      v15 = MEMORY[0x1E0DEE9D8];
      v39 = v165;
    }
    else
    {
      v71 = 0;
    }
    *(_QWORD *)(v51 + 40) = v71;
    *(_QWORD *)(v51 + 48) = PaperDocumentView.applyFilterPageAction(for:)((uint64_t)v16);
    *(_QWORD *)(v51 + 56) = PaperDocumentView.cropPageAction(for:)(v16);
    v167 = v51;
    specialized Array._endMutation()();
    v25 = v167;
    v167 = v15;
    v72 = *(void **)(v25 + 32);
    if (!v72)
      goto LABEL_42;
    v73 = v72;
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_41;
    goto LABEL_119;
  }
  while (1)
  {
    if (!((unint64_t)v50 >> 62))
    {
      v2 = v162;
      if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1)
        goto LABEL_105;
      swift_bridgeObjectRetain();
      goto LABEL_98;
    }
    if (v50 < 0)
      v25 = v50;
    else
      v25 = v50 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v146 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v147 = v146 == 1;
    v2 = v162;
    if (!v147)
      goto LABEL_114;
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter())
      break;
LABEL_98:
    if ((v50 & 0xC000000000000001) != 0)
    {
      v141 = (id)MEMORY[0x1DF0E4D64](0, v50);
LABEL_101:
      v142 = v141;
      swift_bridgeObjectRelease();
      v143 = objc_msgSend(v142, sel_children);

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
      v144 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v144 >> 62)
      {
        swift_bridgeObjectRetain();
        v145 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v145 = *(_QWORD *)((v144 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v145)
      {
        if ((unint64_t)v50 >> 62)
          goto LABEL_114;
LABEL_105:
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();

        swift_bridgeObjectRelease();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        v15 = v50;
      }
      else
      {

        swift_bridgeObjectRelease();
        v15 = MEMORY[0x1E0DEE9D8];
      }
      goto LABEL_115;
    }
    if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v141 = *(id *)(v50 + 32);
      goto LABEL_101;
    }
    __break(1u);
LABEL_119:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_41:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_42:
    v74 = *(void **)(v25 + 40);
    if (v74)
    {
      v75 = v74;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v76 = *(void **)(v25 + 48);
    if (v76)
    {
      v77 = v76;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v78 = *(void **)(v25 + 56);
    if (v78)
    {
      v79 = v78;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v80 = v167;
    swift_bridgeObjectRelease();
    v81._countAndFlagsBits = 0;
    v81._object = (void *)0xE000000000000000;
    v172.value.super.isa = 0;
    v172.is_nil = 0;
    v82.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v81, (Swift::String_optional)0, v172, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v80, (Swift::OpaquePointer)v149.super.super.isa).super.super.isa;
    *(UIMenu *)(v154 + 32) = v82;
    v83 = swift_initStackObject();
    v84 = 0;
    *(_OWORD *)(v83 + 16) = xmmword_1DDF35B30;
    v85 = v153;
    if (v153[(_QWORD)v2] == 1)
    {
      if (objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_allowsDocumentAssembly))
      {
        v86 = objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_indexForPage_, v16);
        v15 = (uint64_t)v86 + 1;
        if (!__OFADD__(v86, 1))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
          if (one-time initialization token for paperKitBundle != -1)
            goto LABEL_122;
          goto LABEL_58;
        }
        __break(1u);
        goto LABEL_121;
      }
      v84 = 0;
    }
    while (1)
    {
      *(_QWORD *)(v83 + 32) = v84;
      if (v85[(_QWORD)v2] == 1
        && objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_allowsDocumentAssembly))
      {
        v94 = (id)MGCopyAnswer();
        v95 = objc_msgSend(v94, "BOOLValue");

        v96 = 0;
        if ((v95 & 1) != 0)
          goto LABEL_67;
        v97 = (char *)objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_indexForPage_, v16);
        v98 = v97 + 1;
        if (__OFADD__(v97, 1))
        {
          __break(1u);
        }
        else
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
          if (one-time initialization token for paperKitBundle == -1)
          {
LABEL_65:
            v99._countAndFlagsBits = 0xD000000000000010;
            v179._countAndFlagsBits = 0xD000000000000080;
            v179._object = (void *)0x80000001DDF58C10;
            v99._object = (void *)0x80000001DDF58BF0;
            v100.value._countAndFlagsBits = 0x617A696C61636F4CLL;
            v100.value._object = (void *)0xEB00000000656C62;
            v101._countAndFlagsBits = 0;
            v101._object = (void *)0xE000000000000000;
            NSLocalizedString(_:tableName:bundle:value:comment:)(v99, v100, paperKitBundle, v101, v179);
            v102 = (void *)MEMORY[0x1DF0E41AC](0x7265646C6F66, 0xE600000000000000);
            v103 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v102);

            MEMORY[0x1DF0E41AC](0xD00000000000001ALL, 0x80000001DDF58CA0);
            v104 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v105 = swift_allocObject();
            *(_QWORD *)(v105 + 16) = v104;
            *(_QWORD *)(v105 + 24) = v98;
            v96 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
            v16 = v163;
            v15 = MEMORY[0x1E0DEE9D8];
            v85 = v153;
            v39 = v165;
            goto LABEL_67;
          }
        }
        swift_once();
        goto LABEL_65;
      }
      v96 = 0;
LABEL_67:
      *(_QWORD *)(v83 + 40) = v96;
      v106 = -[PDFPage window](v2, sel_window);

      if (v106)
      {
        v107 = -[PDFPage window](v2, sel_window);
        if (!v107)
        {
          __break(1u);
          goto LABEL_126;
        }
        v108 = v107;
        v106 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v107);

      }
      if (v85[(_QWORD)v2] != 1
        || (objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_allowsDocumentAssembly) & 1) == 0)
      {

        v118 = 0;
        goto LABEL_77;
      }
      v109 = (char *)objc_msgSend(*(id *)((char *)&v2->super.isa + v39), sel_indexForPage_, v16);
      v110 = v109 + 1;
      if (!__OFADD__(v109, 1))
        break;
LABEL_121:
      __break(1u);
LABEL_122:
      swift_once();
LABEL_58:
      v87._countAndFlagsBits = 0xD000000000000011;
      v178._countAndFlagsBits = 0xD00000000000007CLL;
      v178._object = (void *)0x80000001DDF58CE0;
      v87._object = (void *)0x80000001DDF58CC0;
      v88.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v88.value._object = (void *)0xEB00000000656C62;
      v89._countAndFlagsBits = 0;
      v89._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v87, v88, paperKitBundle, v89, v178);
      v90 = (void *)MEMORY[0x1DF0E41AC](0x676461622E636F64, 0xEE0073756C702E65);
      v91 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v90);

      MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF58D60);
      v92 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v93 = swift_allocObject();
      *(_QWORD *)(v93 + 16) = v92;
      *(_QWORD *)(v93 + 24) = v15;
      v84 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      v16 = v163;
      v15 = MEMORY[0x1E0DEE9D8];
      v85 = v153;
      v39 = v165;
    }
    v165 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v180._countAndFlagsBits = 0xD000000000000075;
    v111._object = (void *)0xEA00000000007365;
    v180._object = (void *)0x80000001DDF58B50;
    v111._countAndFlagsBits = 0x676150206E616353;
    v112.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v112.value._object = (void *)0xEB00000000656C62;
    v113._countAndFlagsBits = 0;
    v113._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v111, v112, paperKitBundle, v113, v180);
    v114 = (void *)MEMORY[0x1DF0E41AC](0x776569762E636F64, 0xEE007265646E6966);
    v115 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v114);

    MEMORY[0x1DF0E41AC](0xD000000000000019, 0x80000001DDF58BD0);
    v116 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v117 = (_QWORD *)swift_allocObject();
    v117[2] = v116;
    v117[3] = v106;
    v117[4] = v110;
    v118 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v16 = v163;
    v15 = MEMORY[0x1E0DEE9D8];
LABEL_77:
    *(_QWORD *)(v83 + 48) = v118;
    v167 = v83;
    specialized Array._endMutation()();
    v119 = (_QWORD *)v167;
    v167 = v15;
    v120 = (void *)v119[4];
    if (v120)
    {
      v121 = v120;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v122 = (void *)v119[5];
    if (v122)
    {
      v123 = v122;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v124 = (void *)v119[6];
    if (v124)
    {
      v125 = v124;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v126 = v167;
    swift_bridgeObjectRelease();
    v127._countAndFlagsBits = 0;
    v127._object = (void *)0xE000000000000000;
    v173.value.super.isa = 0;
    v173.is_nil = 0;
    v128.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v127, (Swift::String_optional)0, v173, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v126, (Swift::OpaquePointer)v150.super.super.isa).super.super.isa;
    v129 = v154;
    *(UIMenu *)(v154 + 40) = v128;
    v167 = v129;
    specialized Array._endMutation()();
    v25 = v167;
    v168 = v167;
    v130 = (char *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v39 = v159;
    v131 = v160;
    v15 = (uint64_t)v155;
    (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v155, v130, v160);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v132 = v161;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v15, v131);
    v133 = v156;
    v134 = CROrderedSet.count.getter();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v132, v133);
    if (v134 >= 2)
    {
      v135 = (unint64_t)PaperDocumentView.deleteAction(for:)(&v16->value);
      if (v135)
      {
        v136 = (void *)v135;
        v137 = swift_allocObject();
        *(_OWORD *)(v137 + 16) = v151;
        *(_QWORD *)(v137 + 32) = v136;
        v166 = v137;
        specialized Array._endMutation()();
        v138 = v166;
        v139 = v136;
        v140._countAndFlagsBits = 0;
        v140._object = (void *)0xE000000000000000;
        v174.value.super.isa = 0;
        v174.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v140, (Swift::String_optional)0, v174, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v138, (Swift::OpaquePointer)v149.super.super.isa);
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        v25 = v168;
      }
    }
    specialized Array.append<A>(contentsOf:)(v25, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
    v50 = v169;
  }
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_114:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  swift_bridgeObjectRetain();
  v15 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease_n();

LABEL_115:
  v107 = (id)v15;
LABEL_126:
  result.value._rawValue = v107;
  result.is_nil = v14;
  return result;
}

Swift::Void __swiftcall PaperDocumentView.tiledViewUpdateEditingState()()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v1)
  {
    v2 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
    swift_beginAccess();
    v3 = *v2;
    v4 = v3 >= 2;
    if ((_DWORD)v3 != 2)
      v3 = 0;
    if (v4)
      v5 = v3;
    else
      v5 = 0;
    v6 = v4;
    v7 = v1;
    v8 = objc_msgSend(v7, sel_canvasView);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v8, sel_drawingGestureRecognizer);

      objc_msgSend(v10, sel_setEnabled_, v6);
    }
    objc_msgSend(v7, sel_setDrawingPolicy_, v5);

  }
  else
  {
    __break(1u);
  }
}

void closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(void *);
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t ObjectType;
  id v22;
  void *v23;

  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  if (v7)
  {
    v8 = (char *)v7;
    v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
    swift_beginAccess();
    v10 = (id)MEMORY[0x1DF0E666C](v9);
    if (v10
      || (v22 = objc_msgSend(v8, sel_window)) != 0
      && (v23 = v22,
          v10 = objc_msgSend(v22, sel_rootViewController),
          v23,
          v10))
    {
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1D860]), sel_init);
      objc_msgSend(v11, sel_setModalPresentationStyle_, 5);
      objc_msgSend(v11, sel_setDelegate_, *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate]);
      objc_msgSend(a3, sel__lockHidden);
      v12 = !UIAccessibilityIsReduceMotionEnabled();
      v13 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v13;
      *(_QWORD *)(v15 + 24) = v14;
      *(_QWORD *)(v15 + 32) = a4;
      *(_BYTE *)(v15 + 40) = v12;
      *(_QWORD *)(v15 + 48) = a3;
      v16 = (void (**)(void *))&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      v17 = *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      *v16 = partial apply for closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:);
      v16[1] = (void (*)(void *))v15;
      v18 = a3;
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v17);
      v19 = &v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
      swift_beginAccess();
      if (MEMORY[0x1DF0E666C](v19))
      {
        v20 = *((_QWORD *)v19 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(char *, id, _BOOL8, uint64_t, uint64_t))(v20 + 32))(v8, v11, v12, ObjectType, v20);
        swift_unknownObjectRelease();
      }
      objc_msgSend(v10, sel_presentViewController_animated_completion_, v11, v12, 0);

    }
  }
}

void closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(void *a1, uint64_t a2, uint64_t a3, Swift::Int a4, char a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t ObjectType;

  v11 = a2 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x1DF0E666C](v11);
  if (v12)
  {
    v13 = (char *)v12;
    swift_beginAccess();
    v14 = MEMORY[0x1DF0E666C](a3 + 16);
    if (v14)
    {
      v15 = (void *)v14;
      v16 = &v13[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      v17 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v17);
      if (a1)
      {
        v18 = a1;
        PaperDocumentView.insert(_:at:)((VNDocumentCameraScan)v18, a4);

      }
      objc_msgSend(v15, sel_dismissViewControllerAnimated_completion_, a5 & 1, 0);
      v19 = &v13[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
      swift_beginAccess();
      if (MEMORY[0x1DF0E666C](v19))
      {
        v20 = *((_QWORD *)v19 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(char *, void *, _QWORD, uint64_t, uint64_t))(v20 + 40))(v13, v15, a5 & 1, ObjectType, v20);
        swift_unknownObjectRelease();
      }
      objc_msgSend(a6, sel__unlockHidden);

    }
    else
    {
      v15 = v13;
    }

  }
}

uint64_t closure #1 in PaperDocumentView.apply(filter:to:)()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
  Capsule.callAsFunction<A>(_:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.apply(filter:to:)@<X0>(unsigned __int8 a1@<W1>, char *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[32];

  v4 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v25 - v11;
  if (v4 == 4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    v13 = (uint64_t (*)(_BYTE *, _QWORD))WeakRef.subscript.modify();
    v15 = v14;
    v16 = type metadata accessor for Image();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 1, 1, v17);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v8, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
      CRRegister.wrappedValue.setter();
      v18 = (uint64_t)v12;
LABEL_7:
      outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      result = v13(v27, 0);
      v23 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    v13 = (uint64_t (*)(_BYTE *, _QWORD))WeakRef.subscript.modify();
    v20 = v19;
    v21 = type metadata accessor for Image();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      v25 = a1;
      v26 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BasicImageFilter>, MEMORY[0x1E0D11CB8]);
      TaggedValue_1.init(_:)();
      v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v12, 0, 1, v24);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v8, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
      CRRegister.wrappedValue.setter();
      v18 = (uint64_t)v12;
      goto LABEL_7;
    }
  }
  result = v13(v27, 0);
  v23 = 1;
LABEL_8:
  *a2 = v23;
  return result;
}

Class PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class isa;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String_optional v44;
  Swift::String v45;
  Swift::String v46;
  id v47;
  void *v48;
  UIMenuElementSize v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  UIMenuElementSize v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  Swift::String v63;
  Swift::OpaquePointer v64;
  uint64_t v65;
  id v66;
  objc_class *v67;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  UIMenuElementSize aBlock[7];
  UIImage_optional v81;
  Swift::String v82;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v3 = *(char **)(v2 - 8);
  v74 = v2;
  v75 = v3;
  v4 = *((_QWORD *)v3 + 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v76 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v65 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v78 = *(_QWORD *)(v22 - 8);
  v79 = v22;
  v23 = *(_QWORD *)(v78 + 64);
  MEMORY[0x1E0C80A78](v22, v24);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v65 - v27;
  v29 = a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v29, (uint64_t)v13, &demangling cache variable for type metadata for PageId?);
  v30 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v13, 1, v30))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for PageId?);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v17, 1, 1, v31);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v21, 1, 1, v79);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakRef<Image>?);
    return 0;
  }
  v71 = v23;
  v72 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v4;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v13[*(int *)(v30 + 20)], (uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for PageId?);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v17, 1, v32) == 1)
    goto LABEL_4;
  WeakTagged_3.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v32);
  v36 = v78;
  v37 = v79;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v21, 1, v79) == 1)
    goto LABEL_5;
  v70 = *(uint64_t (**)(char *, char *, uint64_t))(v36 + 32);
  v38 = v70(v28, v21, v37);
  MEMORY[0x1E0C80A78](v38, v39);
  v40 = v36;
  v41 = v28;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v42 = (uint64_t)v9;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  v74 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v82._object = (void *)0x80000001DDF58950;
  v43._countAndFlagsBits = 0x737265746C6946;
  v43._object = (void *)0xE700000000000000;
  v44.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v44.value._object = (void *)0xEB00000000656C62;
  v45._countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  v82._countAndFlagsBits = 0xD000000000000033;
  v46 = NSLocalizedString(_:tableName:bundle:value:comment:)(v43, v44, paperKitBundle, v45, v82);
  countAndFlagsBits = v46._countAndFlagsBits;
  object = v46._object;
  v47 = objc_msgSend((id)objc_opt_self(), sel_configurationPreferringMonochrome);
  v48 = (void *)MEMORY[0x1DF0E41AC](0x662E6172656D6163, 0xEE00737265746C69);
  v67 = (objc_class *)objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v48, v47);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_1DDF35440;
  v66 = (id)objc_opt_self();
  v50 = v76;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, v76, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v51 = v72;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v72, v41, v37);
  v52 = v37;
  v53 = v40;
  v54 = (v75[80] + 16) & ~(unint64_t)v75[80];
  v75 = v41;
  v55 = (v73 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = (*(unsigned __int8 *)(v53 + 80) + v55 + 8) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  v57 = swift_allocObject();
  v73 = v42;
  v58 = v57;
  outlined init with take of (key: Int, value: AnyCRValue)?(v50, v57 + v54, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v59 = v77;
  *(_QWORD *)(v58 + v55) = v77;
  v70((char *)(v58 + v56), v51, v52);
  aBlock[4] = (UIMenuElementSize)partial apply for closure #2 in PaperDocumentView.applyFilterPageAction(for:);
  aBlock[5] = v58;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (UIMenuElementSize)thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ();
  aBlock[3] = (UIMenuElementSize)&block_descriptor_98_0;
  v60 = _Block_copy(aBlock);
  v61 = v59;
  swift_release();
  v62 = objc_msgSend(v66, sel_elementWithUncachedProvider_, v60);
  _Block_release(v60);
  *(_QWORD *)(v49 + 32) = v62;
  aBlock[0] = v49;
  specialized Array._endMutation()();
  v63._countAndFlagsBits = countAndFlagsBits;
  v63._object = object;
  v81.value.super.isa = v67;
  v81.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v63, (Swift::String_optional)0, v81, 0, 0xFFFFFFFFFFFFFFFFLL, aBlock[0], v64).super.super.isa;
  outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v75, v52);
  return isa;
}

uint64_t closure #1 in PaperDocumentView.applyFilterPageAction(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  WeakRef.subscript.getter();
  v6 = type metadata accessor for Image();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Image?);
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    CRRegister.wrappedValue.getter();
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Image?);
  }
}

uint64_t closure #2 in PaperDocumentView.applyFilterPageAction(for:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  Swift::String v43;
  Swift::String_optional v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(uint64_t, _QWORD);
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  unsigned int v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, char *, uint64_t);
  Swift::String v63;
  Swift::String_optional v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (**v72)(uint64_t, _QWORD);
  uint64_t v73;
  char *v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  Swift::String v81;
  Swift::String_optional v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  void (**v91)(uint64_t, _QWORD);
  char *v92;
  char v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  Swift::String_optional v104;
  Swift::String v105;
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  void (*object)(uint64_t, char *, uint64_t);
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t);
  void (*v121)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t, uint64_t);
  uint64_t countAndFlagsBits;
  uint64_t v126;
  void (**v127)(uint64_t, _QWORD);
  uint64_t (*v128)(char *, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  Swift::String v141;
  Swift::String v142;
  Swift::String v143;
  Swift::String v144;

  v135 = a5;
  v136 = a3;
  v138 = a4;
  v119 = a2;
  v120 = a1;
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v5 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133, v6);
  v131 = v7;
  v134 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v9 = *(_QWORD **)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v113 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  MEMORY[0x1E0C80A78](v12, v13);
  v118 = (uint64_t)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v116 = (char *)&v110 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v110 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v22, v23);
  v112 = (uint64_t)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v117 = (char *)&v110 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v111 = (uint64_t)&v110 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v110 - v33;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v110 - v37;
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v110 - v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_1DDF329D0;
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v141._countAndFlagsBits = 0xD000000000000039;
  v141._object = (void *)0x80000001DDF589B0;
  v43._countAndFlagsBits = 0x726F6C6F43;
  v43._object = (void *)0xE500000000000000;
  v44.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v44.value._object = (void *)0xEB00000000656C62;
  v45._countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  v46 = NSLocalizedString(_:tableName:bundle:value:comment:)(v43, v44, paperKitBundle, v45, v141);
  countAndFlagsBits = v46._countAndFlagsBits;
  object = (void (*)(uint64_t, char *, uint64_t))v46._object;
  v114 = MEMORY[0x1DF0E41AC](0xD00000000000001BLL, 0x80000001DDF589F0);
  v139 = 0;
  v140 = 0;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
  v122 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BasicImageFilter>, MEMORY[0x1E0D11CB8]);
  v123 = v47;
  TaggedValue_1.init(_:)();
  v121 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v9[7];
  v121(v42, 0, 1, v8);
  v126 = v12;
  v127 = (void (**)(uint64_t, _QWORD))v9;
  v48 = (uint64_t)&v21[*(int *)(v12 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v136, (uint64_t)v21, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v49 = v127;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v42, v48, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v50 = (uint64_t (*)(char *, uint64_t, uint64_t))v49[6];
  v51 = v50(v21, 1, v8);
  v137 = v8;
  v128 = v50;
  if (v51 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v42, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v50((char *)v48, 1, v8) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v21, (uint64_t)v38, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v50((char *)v48, 1, v8) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v42, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v49[1]((uint64_t)v38, v8);
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
    goto LABEL_10;
  }
  v52 = v113;
  ((void (*)(char *, uint64_t, uint64_t))v49[4])(v113, v48, v8);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
  dispatch thunk of static Equatable.== infix(_:_:)();
  v53 = v49[1];
  v50 = v128;
  v53((uint64_t)v52, v137);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v42, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v53((uint64_t)v38, v137);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_10:
  v54 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v56 = v134;
  v57 = v133;
  v124 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v124(v134, v135, v133);
  v58 = *(unsigned __int8 *)(v5 + 80);
  v59 = (v58 + 24) & ~v58;
  v129 = v58 | 7;
  v130 = v59 + v131;
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = v55;
  v131 = v59;
  v61 = v60 + v59;
  v62 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v62(v61, v56, v57);
  countAndFlagsBits = v54;
  *(_QWORD *)(v132 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v142._countAndFlagsBits = 0xD00000000000003DLL;
  v142._object = (void *)0x80000001DDF58A10;
  v63._countAndFlagsBits = 0x6C61637379617247;
  v63._object = (void *)0xE900000000000065;
  v64.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v64.value._object = (void *)0xEB00000000656C62;
  v65._countAndFlagsBits = 0;
  v65._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v63, v64, paperKitBundle, v65, v142);
  MEMORY[0x1DF0E41AC](0xD00000000000001FLL, 0x80000001DDF58A50);
  v139 = 1;
  v140 = 0;
  TaggedValue_1.init(_:)();
  v66 = v137;
  v121(v34, 0, 1, v137);
  v67 = (uint64_t)v116;
  v68 = (uint64_t)&v116[*(int *)(v126 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v136, (uint64_t)v116, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v34, v68, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v50((char *)v67, 1, v66) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v50((char *)v68, 1, v66) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      v69 = (uint64_t)v117;
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v70 = v111;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v67, v111, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v50((char *)v68, 1, v66) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v127[1](v70, v66);
LABEL_15:
    outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
    v69 = (uint64_t)v117;
    goto LABEL_17;
  }
  object = v62;
  v71 = v67;
  v72 = v127;
  v73 = v70;
  v74 = v113;
  ((void (*)(char *, uint64_t, uint64_t))v127[4])(v113, v68, v66);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
  dispatch thunk of static Equatable.== infix(_:_:)();
  v75 = v72[1];
  v75((uint64_t)v74, v137);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v75(v73, v137);
  v76 = v71;
  v62 = object;
  outlined destroy of StocksKitCurrencyCache.Provider?(v76, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v69 = (uint64_t)v117;
LABEL_17:
  v77 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v78 = v134;
  v79 = v133;
  v124(v134, v135, v133);
  v80 = swift_allocObject();
  *(_QWORD *)(v80 + 16) = v77;
  v62(v80 + v131, v78, v79);
  *(_QWORD *)(v132 + 40) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v143._countAndFlagsBits = 0xD000000000000041;
  v143._object = (void *)0x80000001DDF58A70;
  v81._countAndFlagsBits = 0x2026206B63616C42;
  v81._object = (void *)0xED00006574696857;
  v82.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v82.value._object = (void *)0xEB00000000656C62;
  v83._countAndFlagsBits = 0;
  v83._object = (void *)0xE000000000000000;
  v84 = NSLocalizedString(_:tableName:bundle:value:comment:)(v81, v82, paperKitBundle, v83, v143);
  v117 = (char *)v84._countAndFlagsBits;
  v116 = (char *)v84._object;
  object = (void (*)(uint64_t, char *, uint64_t))MEMORY[0x1DF0E41AC](0xD000000000000023, 0x80000001DDF58AC0);
  v139 = 2;
  v140 = 0;
  TaggedValue_1.init(_:)();
  v85 = v137;
  v121((char *)v69, 0, 1, v137);
  v86 = v118;
  v87 = v118 + *(int *)(v126 + 48);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v136, v118, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v69, v87, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v88 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v128;
  if (v128((char *)v86, 1, v85) != 1)
  {
    v90 = v112;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v86, v112, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v88(v87, 1, v85) != 1)
    {
      v91 = v127;
      v92 = v113;
      ((void (*)(char *, uint64_t, uint64_t))v127[4])(v113, v87, v85);
      lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
      v93 = dispatch thunk of static Equatable.== infix(_:_:)();
      v94 = v91[1];
      v94((uint64_t)v92, v85);
      outlined destroy of StocksKitCurrencyCache.Provider?(v69, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      v94(v90, v85);
      outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      if ((v93 & 1) != 0)
      {
        v89 = v136;
        goto LABEL_26;
      }
LABEL_25:
      v89 = v136;
      goto LABEL_26;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v69, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v127[1](v90, v85);
LABEL_22:
    outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
    goto LABEL_25;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v69, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v88(v87, 1, v85) != 1)
    goto LABEL_22;
  v89 = v136;
  outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_26:
  v95 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v96 = v134;
  v97 = v135;
  v98 = v133;
  v99 = v124;
  v124(v134, v135, v133);
  v100 = swift_allocObject();
  *(_QWORD *)(v100 + 16) = v95;
  v62(v100 + v131, v96, v98);
  v101 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v102 = v132;
  *(_QWORD *)(v132 + 48) = v101;
  v144._countAndFlagsBits = 0xD000000000000039;
  v144._object = (void *)0x80000001DDF58AF0;
  v103._countAndFlagsBits = 0x6F746F6850;
  v103._object = (void *)0xE500000000000000;
  v104.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v104.value._object = (void *)0xEB00000000656C62;
  v105._countAndFlagsBits = 0;
  v105._object = (void *)0xE000000000000000;
  v106 = NSLocalizedString(_:tableName:bundle:value:comment:)(v103, v104, paperKitBundle, v105, v144);
  v136 = v106._countAndFlagsBits;
  v127 = (void (**)(uint64_t, _QWORD))v106._object;
  v126 = MEMORY[0x1DF0E41AC](0xD00000000000001BLL, 0x80000001DDF58B30);
  v128((char *)v89, 1, v137);
  v107 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v99(v96, v97, v98);
  v108 = swift_allocObject();
  *(_QWORD *)(v108 + 16) = v107;
  v62(v108 + v131, v96, v98);
  *(_QWORD *)(v102 + 56) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v139 = v102;
  specialized Array._endMutation()();
  v120(v139);
  return swift_bridgeObjectRelease();
}

void closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v11 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v11)
  {
    v12 = (void *)v11;
    v16[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v14 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
    MEMORY[0x1E0C80A78](v14, v15);
    *(_QWORD *)&v16[-32] = v12;
    v16[-24] = 0;
    *(_QWORD *)&v16[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v10, (void (*)(uint64_t *__return_ptr, uint64_t))closure #1 in PaperDocumentView.apply(filter:to:)partial apply);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);

  }
}

void closure #2 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v11 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v11)
  {
    v12 = (void *)v11;
    v16[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v14 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
    MEMORY[0x1E0C80A78](v14, v15);
    *(_QWORD *)&v16[-32] = v12;
    v16[-24] = 1;
    *(_QWORD *)&v16[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v10, (void (*)(uint64_t *__return_ptr, uint64_t))closure #1 in PaperDocumentView.apply(filter:to:)partial apply);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);

  }
}

void closure #3 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v11 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v11)
  {
    v12 = (void *)v11;
    v16[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v14 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
    MEMORY[0x1E0C80A78](v14, v15);
    *(_QWORD *)&v16[-32] = v12;
    v16[-24] = 2;
    *(_QWORD *)&v16[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v10, (void (*)(uint64_t *__return_ptr, uint64_t))closure #1 in PaperDocumentView.apply(filter:to:)partial apply);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);

  }
}

void closure #4 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v11 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v11)
  {
    v12 = (void *)v11;
    v16[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v14 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
    MEMORY[0x1E0C80A78](v14, v15);
    *(_QWORD *)&v16[-32] = v12;
    v16[-24] = 4;
    *(_QWORD *)&v16[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v10, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in PaperDocumentView.apply(filter:to:));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);

  }
}

uint64_t closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
  Capsule.callAsFunction<A>(_:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)@<X0>(_OWORD *a1@<X2>, BOOL *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t result;
  _OWORD v22[4];
  _BYTE v23[32];
  uint64_t v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v22 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v13 = (uint64_t (*)(_BYTE *, _QWORD))WeakRef.subscript.modify();
  v15 = v14;
  v16 = type metadata accessor for Image();
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16);
  if (!v17)
  {
    v18 = a1[1];
    v22[0] = *a1;
    v22[1] = v18;
    v19 = a1[3];
    v22[2] = a1[2];
    v22[3] = v19;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v24 = v2;
    lazy protocol witness table accessor for type Quad and conformance Quad();
    TaggedValue_2.init(_:)();
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 0, 1, v20);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  }
  result = v13(v23, 0);
  *a2 = v17 != 0;
  return result;
}

uint64_t PaperDocumentView.cropPageAction(for:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::String v31;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v14, (uint64_t)v5, &demangling cache variable for type metadata for PageId?);
  v15 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v5, 1, v15))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for PageId?);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 1, 1, v19);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for WeakRef<Image>?);
    return 0;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v5[*(int *)(v15 + 20)], (uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for PageId?);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v17) == 1)
    goto LABEL_4;
  WeakTagged_3.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v17);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v13, 1, v21) == 1)
    goto LABEL_5;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for WeakRef<Image>?);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v31._countAndFlagsBits = 0xD000000000000079;
  v31._object = (void *)0x80000001DDF58860;
  v22._countAndFlagsBits = 0x67615020706F7243;
  v22._object = (void *)0xE900000000000065;
  v23.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v23.value._object = (void *)0xEB00000000656C62;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, paperKitBundle, v24, v31);
  v25 = (void *)MEMORY[0x1DF0E41AC](1886351971, 0xE400000000000000);
  v26 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v25);

  MEMORY[0x1DF0E41AC](0xD000000000000013, 0x80000001DDF588E0);
  v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = a1;
  v29 = a1;
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
}

uint64_t closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char v107;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5, v6);
  v91 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v89 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v11, v12);
  v93 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for CRAssetOrData();
  v94 = *(_QWORD *)(v92 - 8);
  v14 = *(_QWORD *)(v94 + 64);
  MEMORY[0x1E0C80A78](v92, v15);
  v90 = (uint64_t)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v95 = (uint64_t)&v85 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)&v99 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(_QWORD *)&v98 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v100 = type metadata accessor for Image();
  *(_QWORD *)&v97 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100, v26);
  v96 = (uint64_t)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v85 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v102 = *(_QWORD *)(v40 - 8);
  v41 = *(_QWORD *)(v102 + 64);
  MEMORY[0x1E0C80A78](v40, v42);
  v88 = (char *)&v85 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v101 = (char *)&v85 - v45;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](a2 + 16);
  if (result)
  {
    v47 = (char *)result;
    v48 = a3 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v48, (uint64_t)v31, &demangling cache variable for type metadata for PageId?);
    v49 = type metadata accessor for PageId(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v31, 1, v49))
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PageId?);
      v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v35, 1, 1, v50);
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56))(v39, 1, 1, v40);
LABEL_6:

      v53 = &demangling cache variable for type metadata for WeakRef<Image>?;
      v54 = (uint64_t)v39;
      return outlined destroy of StocksKitCurrencyCache.Provider?(v54, v53);
    }
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v31[*(int *)(v49 + 20)], (uint64_t)v35, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PageId?);
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v35, 1, v51) == 1)
      goto LABEL_5;
    WeakTagged_3.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v51);
    v55 = v102;
    v56 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v39, 1, v40) == 1)
      goto LABEL_6;
    v57 = v101;
    v86 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v86(v101, v39, v56);
    v87 = v56;
    v58 = &v47[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
    swift_beginAccess();
    v59 = v98;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v25, v58, v22);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v60 = v99;
    v61 = v100;
    Capsule.subscript.getter();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v60, 1, v61) == 1)
    {
      (*(void (**)(char *, uint64_t))(v102 + 8))(v57, v87);

      v53 = &demangling cache variable for type metadata for Image?;
      v54 = v60;
      return outlined destroy of StocksKitCurrencyCache.Provider?(v54, v53);
    }
    v62 = v87;
    v63 = v96;
    outlined init with take of PKStrokeStruct(v60, v96, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    v64 = (uint64_t)v93;
    CRRegister.wrappedValue.getter();
    v65 = v94;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v64, 1, v92) == 1)
    {

      outlined destroy of PKStrokeProperties(v63, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v62);
      v53 = &demangling cache variable for type metadata for CRAssetOrData?;
      v54 = v64;
      return outlined destroy of StocksKitCurrencyCache.Provider?(v54, v53);
    }
    outlined init with take of PKStrokeStruct(v64, v95, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    v66 = (uint64_t)v89;
    CRRegister.wrappedValue.getter();
    v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v68 = *(_QWORD *)(v67 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      v69 = 0uLL;
      v70 = 1;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
    }
    else
    {
      TaggedValue_2.tagged2.getter();
      v100 = v103;
      v99 = v104;
      v98 = v105;
      v97 = v106;
      v70 = v107;
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
      v73 = v97;
      v72 = v98;
      v71 = v99;
      v69 = v100;
    }
    v103 = v69;
    v104 = v71;
    v105 = v72;
    v106 = v73;
    v107 = v70;
    v74 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v91, 1, 1, v74);
    v75 = v90;
    outlined init with copy of PKStrokeProperties(v95, v90, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    v76 = v102;
    v77 = v88;
    (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v88, v101, v62);
    type metadata accessor for MainActor();
    v78 = v47;
    v79 = static MainActor.shared.getter();
    v80 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    v81 = (v80 + v14 + 79) & 0xFFFFFFFFFFFFFFF8;
    v82 = (*(unsigned __int8 *)(v76 + 80) + v81 + 8) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    v83 = swift_allocObject();
    v84 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v83 + 16) = v79;
    *(_QWORD *)(v83 + 24) = v84;
    outlined init with take of PKStrokeStruct(v75, v83 + v80, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v103, v83 + ((v80 + v14 + 7) & 0xFFFFFFFFFFFFFFF8), &demangling cache variable for type metadata for Quad?);
    *(_QWORD *)(v83 + v81) = v78;
    v86((char *)(v83 + v82), v77, v62);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v91, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:), v83);
    swift_release();

    outlined destroy of PKStrokeProperties(v95, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    outlined destroy of PKStrokeProperties(v96, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v101, v62);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v7[21] = a6;
  v7[22] = a7;
  v7[20] = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v7[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[24] = v9;
  v7[25] = *(_QWORD *)(v9 + 64);
  v7[26] = swift_task_alloc();
  v7[27] = type metadata accessor for MainActor();
  v7[28] = static MainActor.shared.getter();
  v10 = (_QWORD *)swift_task_alloc();
  v7[29] = v10;
  *v10 = v7;
  v10[1] = closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

id closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release();
  if (!v1)
  {
LABEL_9:
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 160);
  v20 = *(void **)(v0 + 240);
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v20);
  outlined init with take of (key: Int, value: AnyCRValue)?(v2, v0 + 16, &demangling cache variable for type metadata for Quad?);
  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1D820]), sel_initWithBottomLeft_bottomRight_topLeft_topRight_, *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
    v3 = result;
    if (!result)
      goto LABEL_14;
  }
  v5 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v11 + v10, v5, v7);
  v12 = objc_allocWithZone(MEMORY[0x1E0D1D828]);
  *(_QWORD *)(v0 + 120) = partial apply for closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:);
  *(_QWORD *)(v0 + 128) = v11;
  *(_QWORD *)(v0 + 88) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 96) = 1107296256;
  *(_QWORD *)(v0 + 104) = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed UIImage?, @guaranteed ICDocCamImageQuad?, @unowned Bool) -> ();
  *(_QWORD *)(v0 + 112) = &block_descriptor_49;
  v13 = _Block_copy((const void *)(v0 + 88));
  swift_retain();
  swift_release();
  v14 = objc_msgSend(v12, sel_initWithImage_quad_scanDataDelegate_orientation_completionHandler_, v21, v3, 0, 0, v13);

  _Block_release(v13);
  result = (id)swift_release();
  if (v14)
  {
    v15 = *(_QWORD *)(v0 + 168);
    objc_msgSend(v14, sel_setShowImageAsAspectFit_, 1);
    v16 = v15 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
    swift_beginAccess();
    v17 = (id)MEMORY[0x1DF0E666C](v16);
    if (v17
      || (v18 = objc_msgSend(*(id *)(v0 + 168), sel_window)) != 0
      && (v19 = v18,
          v17 = objc_msgSend(v18, sel_rootViewController),
          v19,
          v17))
    {
      objc_msgSend(v17, sel_presentViewController_animated_completion_, v14, 1, 0);

    }
    *(_QWORD *)(*(_QWORD *)(v0 + 168) + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController) = v14;

    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[8];
  _QWORD v38[8];

  v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v37[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v15 = MEMORY[0x1DF0E666C](a5 + 16);
  if (v15)
  {
    v16 = (char *)v15;
    if (a3)
    {
      v17 = a3;
      objc_msgSend(v17, sel_topLeft);
      v19 = v18;
      v21 = v20;
      objc_msgSend(v17, sel_topRight);
      v23 = v22;
      v25 = v24;
      objc_msgSend(v17, sel_bottomLeft);
      v27 = v26;
      v29 = v28;
      objc_msgSend(v17, sel_bottomRight);
      v38[0] = v19;
      v38[1] = v21;
      v38[2] = v23;
      v38[3] = v25;
      v38[4] = v27;
      v38[5] = v29;
      v38[6] = v30;
      v38[7] = v31;
      v37[7] = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
      WeakRef.id.getter();
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:id:)();
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      v33 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v14, 0, 1, v32);
      MEMORY[0x1E0C80A78](v33, v34);
      *(_QWORD *)&v37[-32] = v16;
      *(_QWORD *)&v37[-24] = a6;
      *(_QWORD *)&v37[-16] = v38;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v14, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:));
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);

    }
    v35 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController;
    if (*(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController])
    {
      swift_unknownObjectRetain();
      objc_opt_self();
      v36 = (void *)swift_dynamicCastObjCClass();
      if (v36)
        objc_msgSend(v36, sel_dismissViewControllerAnimated_completion_, 1, 0);
      swift_unknownObjectRelease();
    }
    *(_QWORD *)&v16[v35] = 0;
    swift_unknownObjectRelease();

  }
}

uint64_t PaperDocumentView.canvas(_:shouldOpenLink:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  char v7;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v4))
  {
    v5 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, a2, ObjectType, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = 1;
  }
  return v7 & 1;
}

void key path setter for PaperDocumentView.rulerHostView : PaperDocumentView(void **a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x1DF0E666C](v3);
  swift_unknownObjectWeakAssign();
  v5 = v2;
  PaperDocumentView.rulerHostView.didset(v4);

}

void PaperDocumentView.rulerHostView.didset(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  void *v10;
  objc_class *v11;
  _BYTE *v12;
  id v13;
  void *v14;
  void *v15;
  objc_super v16;

  v2 = v1;
  v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  swift_beginAccess();
  v5 = (void *)MEMORY[0x1DF0E666C](v4);
  v6 = v5;
  if (a1)
  {
    if (v5)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v7 = a1;
      v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) != 0)
        return;
    }
  }
  else
  {
    if (!v5)
      return;

  }
  v9 = MEMORY[0x1DF0E666C](v4);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (objc_class *)type metadata accessor for RulerHostingDelegate();
    v12 = objc_allocWithZone(v11);
    swift_unknownObjectWeakInit();
    v12[OBJC_IVAR____TtC8PaperKit20RulerHostingDelegate_sharedRuler] = 1;
    swift_unknownObjectWeakAssign();
    v16.receiver = v12;
    v16.super_class = v11;
    v13 = objc_msgSendSuper2(&v16, sel_init);
    v14 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate) = v13;

  }
  else
  {
    v14 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate) = 0;
  }

  v15 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v15)
    objc_msgSend(v15, sel_setRulerHostingDelegate_, *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate));
  else
    __break(1u);
}

uint64_t PaperDocumentView.rulerHostView.getter()
{
  return PaperDocumentView.viewControllerForPresentingUI.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView);
}

uint64_t PaperDocumentView.viewControllerForPresentingUI.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v2);
}

void PaperDocumentView.rulerHostView.setter(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x1DF0E666C](v3);
  swift_unknownObjectWeakAssign();
  PaperDocumentView.rulerHostView.didset(v4);

}

void (*PaperDocumentView.rulerHostView.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return PaperDocumentView.rulerHostView.modify;
}

void PaperDocumentView.rulerHostView.modify(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  void **v5;
  void *v6;
  id v7;

  v3 = *(void **)a1;
  v5 = (void **)(*(_QWORD *)a1 + 24);
  v4 = *v5;
  v6 = (void *)MEMORY[0x1DF0E666C](*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40));
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    v7 = v4;
    PaperDocumentView.rulerHostView.didset(v6);

    v6 = *v5;
  }
  else
  {
    PaperDocumentView.rulerHostView.didset(v6);

  }
  free(v3);
}

uint64_t key path setter for PaperDocumentView.magicGenerativePlaygroundTokenProvider : PaperDocumentView(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v5, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v5, v3, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  return swift_endAccess();
}

uint64_t PaperDocumentView.magicGenerativePlaygroundTokenProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a1, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t PaperDocumentView.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  return swift_endAccess();
}

uint64_t (*PaperDocumentView.magicGenerativePlaygroundTokenProvider.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t PaperDocumentView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 72) = v5;
  *(double *)(v6 + 56) = a4;
  *(double *)(v6 + 64) = a5;
  *(double *)(v6 + 40) = a2;
  *(double *)(v6 + 48) = a3;
  *(_OWORD *)(v6 + 80) = *(_OWORD *)a1;
  *(_BYTE *)(v6 + 33) = *(_BYTE *)(a1 + 16);
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 96) = static MainActor.shared.getter();
  *(_QWORD *)(v6 + 104) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v6 + 112) = v7;
  return swift_task_switch();
}

uint64_t PaperDocumentView.initiateMagicGenerativePlayground(context:in:)()
{
  uint64_t v0;
  char *v1;
  void *v2;
  void *v3;
  char v4;
  _QWORD *v5;

  v1 = (char *)PaperDocumentView.currentPageCanvas.getter();
  if (v1
    && (v2 = v1,
        v3 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool],
        *(_QWORD *)(v0 + 120) = v3,
        v3,
        v2,
        v3))
  {
    v4 = *(_BYTE *)(v0 + 33);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 80);
    *(_BYTE *)(v0 + 32) = v4;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v5;
    *v5 = v0;
    v5[1] = PaperDocumentView.initiateMagicGenerativePlayground(context:in:);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:)(v0 + 16, *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64));
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 120);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t key path setter for PaperDocumentView.calculateDocument : PaperDocumentView(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = swift_unknownObjectRetain();
  specialized PaperDocumentView.calculateDocument.setter(v2, v1);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentView.calculateDocument.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t PaperDocumentView.calculateDocument.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentView.calculateDocument.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentView.calculateDocument.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.calculateDocument.modify;
}

void PaperDocumentView.calculateDocument.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void *v10;
  _QWORD *v11;
  id v12;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v3 = PaperDocumentView.currentPageCanvas.getter();
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v3)
    {
      v5 = v3;
      v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))();
      v8 = v7;

      ObjectType = swift_getObjectType();
      v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

      if (v10)
      {
        CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

      }
    }
    v11 = PaperDocumentView.currentPageCanvas.getter();
    if (v11)
    {
      v12 = v11;
      (*(void (**)(void))((*v4 & *v11) + 0x750))();

    }
  }
}

void key path setter for PaperDocumentView.calculateDocumentExpressionSolvingBehavior : PaperDocumentView(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void *v10;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *v3 = v2;
  v4 = PaperDocumentView.currentPageCanvas.getter();
  if (v4)
  {
    v5 = v4;
    v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2F8))();
    v8 = v7;

    ObjectType = swift_getObjectType();
    v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

    if (v10)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    }
  }
}

uint64_t PaperDocumentView.calculateDocumentExpressionSolvingBehavior.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperDocumentView.calculateDocumentExpressionSolvingBehavior.setter(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void *v10;

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *v3 = v2;
  v4 = PaperDocumentView.currentPageCanvas.getter();
  if (v4)
  {
    v5 = v4;
    v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2F8))();
    v8 = v7;

    ObjectType = swift_getObjectType();
    v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

    if (v10)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    }
  }
}

void (*PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify;
}

void PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  id v9;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v3 = PaperDocumentView.currentPageCanvas.getter();
    if (v3)
    {
      v4 = v3;
      v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))();
      v7 = v6;

      ObjectType = swift_getObjectType();
      v9 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);

      if (v9)
      {
        CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

      }
    }
  }
}

id PaperDocumentView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void PaperDocumentView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v4 = *v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperDocumentView(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  v8 = *(_QWORD *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return SynapseLinkItem.delegate.modify;
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperDocumentView()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperDocumentView(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  PaperDocumentView.viewControllerForPresentingUI.didset();

}

void (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperDocumentView(_QWORD *a1))(id **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  v3[4] = *v1;
  v3[5] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v6);
  return PaperDocumentView.viewControllerForPresentingUI.modify;
}

uint64_t protocol witness for LiveEditable.isCurrentlyLiveEditing.getter in conformance PaperDocumentView()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isCurrentlyLiveEditing);
}

uint64_t (*protocol witness for LiveEditable.liveEditingContinuations.modify in conformance PaperDocumentView())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

void (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentView(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  v8 = *(_QWORD *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return PaperDocumentView.liveStreamMessenger.modify;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t))
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;

  v9 = *v6 + *a5;
  swift_beginAccess();
  *(_QWORD *)(v9 + 8) = a2;
  v10 = swift_unknownObjectWeakAssign();
  a6(v10);
  return swift_unknownObjectRelease();
}

void (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentView(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  v8 = *(_QWORD *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return PaperDocumentView.participantDetailsDataSource.modify;
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperDocumentView()
{
  PaperDocumentView.participantDetailsDidChange()();
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperDocumentView()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperDocumentView(char a1)
{
  _QWORD *v1;
  _BYTE *v3;

  v3 = (_BYTE *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  *v3 = a1;
  PaperDocumentView.showParticipantCursors.didset();
}

void (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentView(uint64_t a1))(uint64_t a1, char a2)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 24) = *v1;
  swift_beginAccess();
  return protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentView;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentView(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    PaperDocumentView.showParticipantCursors.didset();
}

uint64_t sub_1DDDFB1BC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  *(_BYTE *)(v7 + 80) = a7;
  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a6;
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v7 + 72) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    goto LABEL_15;
  v4 = (void *)v2;
  v5 = *(unsigned __int8 *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
  v9 = (void *)MEMORY[0x1DF0E41AC](v7, v6);
  v10 = objc_msgSend(v8, sel_findString_withOptions_, v9, v5);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PDFSelection);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_4;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_14:

    swift_bridgeObjectRelease();
LABEL_15:
    **(_QWORD **)(v0 + 40) = v3;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_4:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v20 = v4;
    v14 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
        v15 = (id)MEMORY[0x1DF0E4D64](v14, v11);
      else
        v15 = *(id *)(v11 + 8 * v14 + 32);
      v16 = v15;
      v18 = *(_QWORD *)(v3 + 16);
      v17 = *(_QWORD *)(v3 + 24);
      if (v18 >= v17 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      *(_QWORD *)(v3 + 16) = v18 + 1;
      v19 = v3 + 48 * v18;
      *(_QWORD *)(v19 + 32) = v16;
      ++v14;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_BYTE *)(v19 + 72) = 0;
    }
    while (v12 != v14);

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DDDFB484()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t protocol witness for FindResultProvider.performTextSearch(queryString:ignoreCase:wholeWords:) in conformance PaperDocumentView(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, a2, a3, a4);
}

uint64_t closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;

  v2 = a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v2);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v6 = 1;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 72))(a1, &v6, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

id PaperDocumentDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.getter in conformance PaperDocumentView()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentView.calculateDocument.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperDocumentView(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentView.calculateDocument.modify((uint64_t)v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.getter in conformance PaperDocumentView@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.setter in conformance PaperDocumentView(char *a1)
{
  _QWORD *v1;
  char v2;
  _BYTE *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void *v10;

  v2 = *a1;
  v3 = (_BYTE *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *v3 = v2;
  v4 = PaperDocumentView.currentPageCanvas.getter();
  if (v4)
  {
    v5 = v4;
    v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2F8))();
    v8 = v7;

    ObjectType = swift_getObjectType();
    v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

    if (v10)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    }
  }
}

void (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.modify in conformance PaperDocumentView(uint64_t a1))(uint64_t a1, char a2)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 24) = *v1;
  swift_beginAccess();
  return PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify;
}

uint64_t specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, double a7)
{
  uint64_t v7;

  *(_BYTE *)(v7 + 339) = a6;
  *(_BYTE *)(v7 + 338) = a5;
  *(_BYTE *)(v7 + 337) = a4;
  *(_QWORD *)(v7 + 368) = a3;
  *(double *)(v7 + 360) = a7;
  *(_QWORD *)(v7 + 344) = a1;
  *(_QWORD *)(v7 + 352) = a2;
  return swift_task_switch();
}

{
  uint64_t v7;

  *(_BYTE *)(v7 + 339) = a6;
  *(_BYTE *)(v7 + 338) = a5;
  *(_BYTE *)(v7 + 337) = a4;
  *(_QWORD *)(v7 + 368) = a3;
  *(double *)(v7 + 360) = a7;
  *(_QWORD *)(v7 + 344) = a1;
  *(_QWORD *)(v7 + 352) = a2;
  return swift_task_switch();
}

{
  uint64_t v7;

  *(_BYTE *)(v7 + 339) = a6;
  *(_BYTE *)(v7 + 338) = a5;
  *(_BYTE *)(v7 + 337) = a4;
  *(_QWORD *)(v7 + 368) = a3;
  *(double *)(v7 + 360) = a7;
  *(_QWORD *)(v7 + 344) = a1;
  *(_QWORD *)(v7 + 352) = a2;
  return swift_task_switch();
}

uint64_t specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  CGContext *v9;
  id v10;
  double MinY;
  CGFloat MaxY;
  __int128 v13;
  __int128 v14;
  int Type;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  CGAffineTransform v24;
  CGRect v25;
  CGRect v26;

  v1 = *(_QWORD *)(v0 + 344);
  CGContextSaveGState(*(CGContextRef *)(v0 + 368));
  if (!v1)
    goto LABEL_10;
  v2 = *(void **)(v0 + 344);
  outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 352), v0 + 304, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if ((*(_BYTE *)(v0 + 336) & 1) != 0)
    goto LABEL_10;
  v3 = *(double *)(v0 + 304);
  v4 = *(double *)(v0 + 312);
  *(double *)(v0 + 376) = v3;
  *(double *)(v0 + 384) = v4;
  v5 = *(double *)(v0 + 320);
  v6 = *(double *)(v0 + 328);
  *(double *)(v0 + 392) = v5;
  *(double *)(v0 + 400) = v6;
  if (!CGRect.isFinite.getter(v3, v4, v5, v6))
    goto LABEL_10;
  if (v5 <= 1.0 || v6 <= 1.0)
  {
LABEL_10:
    CGContextRestoreGState(*(CGContextRef *)(v0 + 368));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v0 + 256;
    v9 = *(CGContext **)(v0 + 368);
    v10 = v2;
    v25.origin.x = v3;
    v25.origin.y = v4;
    v25.size.width = v5;
    v25.size.height = v6;
    MinY = CGRectGetMinY(v25);
    v26.origin.x = v3;
    v26.origin.y = v4;
    v26.size.width = v5;
    v26.size.height = v6;
    MaxY = CGRectGetMaxY(v26);
    *(_QWORD *)(v0 + 208) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 216) = 0;
    *(_QWORD *)(v0 + 224) = 0;
    *(_QWORD *)(v0 + 232) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 240) = 0;
    *(_QWORD *)(v0 + 248) = 0;
    *(_QWORD *)(v0 + 256) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 264) = 0;
    *(_QWORD *)(v0 + 272) = 0;
    *(_QWORD *)(v0 + 280) = 0xBFF0000000000000;
    *(_QWORD *)(v0 + 288) = 0;
    *(double *)(v0 + 296) = MinY + MaxY;
    CGAffineTransformConcat(&v24, (CGAffineTransform *)(v0 + 208), (CGAffineTransform *)(v0 + 256));
    v13 = *(_OWORD *)&v24.c;
    v14 = *(_OWORD *)&v24.tx;
    *(_OWORD *)(v0 + 208) = *(_OWORD *)&v24.a;
    *(_OWORD *)(v0 + 224) = v13;
    *(_OWORD *)(v0 + 240) = v14;
    CGContextConcatCTM(v9, (CGAffineTransform *)(v0 + 208));
    Type = CGContextGetType();
    if (Type == 1)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v17 = Type != 6;
      v16 = (Type != 6) & *(_BYTE *)(v0 + 337);
    }
    v19 = *(unsigned __int8 *)(v0 + 338);
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11A0]), sel_initWithSize_scale_renderQueue_sixChannelBlending_, 0, v16, v5, v6, *(double *)(v0 + 360));
    *(_QWORD *)(v0 + 408) = v20;
    v21 = v20;
    objc_msgSend(v21, sel_setInvertColors_, v19);
    if ((_DWORD)v16)
    {
      *(_QWORD *)(v0 + 56) = v8;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
      *(_QWORD *)(v0 + 240) = swift_continuation_init();
      *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 216) = 0x40000000;
      *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?);
      *(_QWORD *)(v0 + 232) = &block_descriptor_341;
      objc_msgSend(v21, sel_sixChannelCGRenderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
    }
    else if (v17
           || (*(_BYTE *)(v0 + 337) & 1) == 0
           || (objc_msgSend(v21, sel_respondsToSelector_, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_) & 1) == 0)
    {
      *(_QWORD *)(v0 + 184) = v8;
      *(_QWORD *)(v0 + 144) = v0;
      *(_QWORD *)(v0 + 152) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
      *(_QWORD *)(v0 + 240) = swift_continuation_init();
      *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 216) = 0x40000000;
      *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
      *(_QWORD *)(v0 + 232) = &block_descriptor_339_0;
      objc_msgSend(v21, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 368);
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
      v23 = swift_continuation_init();
      *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 216) = 0x40000000;
      *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
      *(_QWORD *)(v0 + 232) = &block_descriptor_340;
      *(_QWORD *)(v0 + 240) = v23;
      objc_msgSend(v21, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_, v10, v22, v0 + 208, v3, v4, v5, v6, 1.0);
    }
    return swift_continuation_await();
  }
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGContext *v7;
  CGImage *v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGContext *v13;
  CGImage *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  CGContext *v19;
  __int128 v21;
  __C::CGRect v22;
  __C::CGRect v23;

  v2 = *(void **)(v0 + 256);
  v1 = *(void **)(v0 + 264);
  if (v1)
  {
    v4 = *(double *)(v0 + 392);
    v3 = *(double *)(v0 + 400);
    v6 = *(double *)(v0 + 376);
    v5 = *(double *)(v0 + 384);
    v7 = *(CGContext **)(v0 + 368);
    v8 = v1;
    CGContextSetBlendMode(v7, kCGBlendModeMultiply);
    v22.origin.x = v6;
    v22.origin.y = v5;
    v22.size.width = v4;
    v22.size.height = v3;
    CGContextRef.draw(_:in:byTiling:)(v8, v22, 0);

  }
  if (v2)
  {
    v10 = *(double *)(v0 + 392);
    v9 = *(double *)(v0 + 400);
    v12 = *(double *)(v0 + 376);
    v11 = *(double *)(v0 + 384);
    v13 = *(CGContext **)(v0 + 368);
    v14 = v2;
    CGContextSetBlendMode(v13, kCGBlendModePlusLighter);
    v23.origin.x = v12;
    v23.origin.y = v11;
    v23.size.width = v10;
    v23.size.height = v9;
    CGContextRef.draw(_:in:byTiling:)(v14, v23, 0);

  }
  if (*(_BYTE *)(v0 + 339) == 1)
  {
    v16 = *(_QWORD *)(v0 + 392);
    v15 = *(_QWORD *)(v0 + 400);
    v21 = *(_OWORD *)(v0 + 376);
    CGContextSetRGBFillColor(*(CGContextRef *)(v0 + 368), 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1DDF32CF0;
    *(_OWORD *)(v17 + 32) = v21;
    *(_QWORD *)(v17 + 48) = v16;
    *(_QWORD *)(v17 + 56) = v15;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v17);
    swift_bridgeObjectRelease();
  }
  v18 = *(void **)(v0 + 344);

  v19 = *(CGContext **)(v0 + 368);
  CGContextRestoreGState(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  CGImage *v1;
  CGImage *v2;
  CGImage *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  CGContext *v8;
  __int128 v10;

  v1 = *(CGImage **)(v0 + 256);
  if (v1)
  {
    v2 = (CGImage *)objc_msgSend(*(id *)(v0 + 256), sel_CGImage);
    if (v2)
    {
      v3 = v2;
      CGContextRef.draw(_:in:byTiling:)(v2, *(__C::CGRect *)(v0 + 376), 0);

      v1 = v3;
    }

  }
  if (*(_BYTE *)(v0 + 339) == 1)
  {
    v5 = *(_QWORD *)(v0 + 392);
    v4 = *(_QWORD *)(v0 + 400);
    v10 = *(_OWORD *)(v0 + 376);
    CGContextSetRGBFillColor(*(CGContextRef *)(v0 + 368), 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1DDF32CF0;
    *(_OWORD *)(v6 + 32) = v10;
    *(_QWORD *)(v6 + 48) = v5;
    *(_QWORD *)(v6 + 56) = v4;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v6);
    swift_bridgeObjectRelease();
  }
  v7 = *(void **)(v0 + 344);

  v8 = *(CGContext **)(v0 + 368);
  CGContextRestoreGState(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  CGContext *v5;
  __int128 v7;

  if (*(_BYTE *)(v0 + 339) == 1)
  {
    v2 = *(_QWORD *)(v0 + 392);
    v1 = *(_QWORD *)(v0 + 400);
    v7 = *(_OWORD *)(v0 + 376);
    CGContextSetRGBFillColor(*(CGContextRef *)(v0 + 368), 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1DDF32CF0;
    *(_OWORD *)(v3 + 32) = v7;
    *(_QWORD *)(v3 + 48) = v2;
    *(_QWORD *)(v3 + 56) = v1;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v3);
    swift_bridgeObjectRelease();
  }
  v4 = *(void **)(v0 + 344);

  v5 = *(CGContext **)(v0 + 368);
  CGContextRestoreGState(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  CGContext *v9;
  id v10;
  double MinY;
  CGFloat MaxY;
  __int128 v13;
  __int128 v14;
  int Type;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  CGAffineTransform v24;
  CGRect v25;
  CGRect v26;

  v1 = *(_QWORD *)(v0 + 344);
  CGContextSaveGState(*(CGContextRef *)(v0 + 368));
  if (!v1)
    goto LABEL_10;
  v2 = *(void **)(v0 + 344);
  outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 352), v0 + 304, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if ((*(_BYTE *)(v0 + 336) & 1) != 0)
    goto LABEL_10;
  v3 = *(double *)(v0 + 304);
  v4 = *(double *)(v0 + 312);
  *(double *)(v0 + 376) = v3;
  *(double *)(v0 + 384) = v4;
  v5 = *(double *)(v0 + 320);
  v6 = *(double *)(v0 + 328);
  *(double *)(v0 + 392) = v5;
  *(double *)(v0 + 400) = v6;
  if (!CGRect.isFinite.getter(v3, v4, v5, v6))
    goto LABEL_10;
  if (v5 <= 1.0 || v6 <= 1.0)
  {
LABEL_10:
    CGContextRestoreGState(*(CGContextRef *)(v0 + 368));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v0 + 256;
    v9 = *(CGContext **)(v0 + 368);
    v10 = v2;
    v25.origin.x = v3;
    v25.origin.y = v4;
    v25.size.width = v5;
    v25.size.height = v6;
    MinY = CGRectGetMinY(v25);
    v26.origin.x = v3;
    v26.origin.y = v4;
    v26.size.width = v5;
    v26.size.height = v6;
    MaxY = CGRectGetMaxY(v26);
    *(_QWORD *)(v0 + 208) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 216) = 0;
    *(_QWORD *)(v0 + 224) = 0;
    *(_QWORD *)(v0 + 232) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 240) = 0;
    *(_QWORD *)(v0 + 248) = 0;
    *(_QWORD *)(v0 + 256) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 264) = 0;
    *(_QWORD *)(v0 + 272) = 0;
    *(_QWORD *)(v0 + 280) = 0xBFF0000000000000;
    *(_QWORD *)(v0 + 288) = 0;
    *(double *)(v0 + 296) = MinY + MaxY;
    CGAffineTransformConcat(&v24, (CGAffineTransform *)(v0 + 208), (CGAffineTransform *)(v0 + 256));
    v13 = *(_OWORD *)&v24.c;
    v14 = *(_OWORD *)&v24.tx;
    *(_OWORD *)(v0 + 208) = *(_OWORD *)&v24.a;
    *(_OWORD *)(v0 + 224) = v13;
    *(_OWORD *)(v0 + 240) = v14;
    CGContextConcatCTM(v9, (CGAffineTransform *)(v0 + 208));
    Type = CGContextGetType();
    if (Type == 1)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v17 = Type != 6;
      v16 = (Type != 6) & *(_BYTE *)(v0 + 337);
    }
    v19 = *(unsigned __int8 *)(v0 + 338);
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11A0]), sel_initWithSize_scale_renderQueue_sixChannelBlending_, 0, v16, v5, v6, *(double *)(v0 + 360));
    *(_QWORD *)(v0 + 408) = v20;
    v21 = v20;
    objc_msgSend(v21, sel_setInvertColors_, v19);
    if ((_DWORD)v16)
    {
      *(_QWORD *)(v0 + 56) = v8;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
      *(_QWORD *)(v0 + 240) = swift_continuation_init();
      *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 216) = 0x40000000;
      *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?);
      *(_QWORD *)(v0 + 232) = &block_descriptor_248;
      objc_msgSend(v21, sel_sixChannelCGRenderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
    }
    else if (v17
           || (*(_BYTE *)(v0 + 337) & 1) == 0
           || (objc_msgSend(v21, sel_respondsToSelector_, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_) & 1) == 0)
    {
      *(_QWORD *)(v0 + 184) = v8;
      *(_QWORD *)(v0 + 144) = v0;
      *(_QWORD *)(v0 + 152) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
      *(_QWORD *)(v0 + 240) = swift_continuation_init();
      *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 216) = 0x40000000;
      *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
      *(_QWORD *)(v0 + 232) = &block_descriptor_246_0;
      objc_msgSend(v21, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 368);
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
      v23 = swift_continuation_init();
      *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 216) = 0x40000000;
      *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
      *(_QWORD *)(v0 + 232) = &block_descriptor_247;
      *(_QWORD *)(v0 + 240) = v23;
      objc_msgSend(v21, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_, v10, v22, v0 + 208, v3, v4, v5, v6, 1.0);
    }
    return swift_continuation_await();
  }
}

{
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  CGContext *v9;
  id v10;
  double MinY;
  CGFloat MaxY;
  __int128 v13;
  __int128 v14;
  int Type;
  BOOL v16;
  _BOOL8 v17;
  BOOL v18;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  CGAffineTransform v25;
  CGRect v26;
  CGRect v27;

  v1 = *(_QWORD *)(v0 + 344);
  CGContextSaveGState(*(CGContextRef *)(v0 + 368));
  if (!v1)
    goto LABEL_11;
  v2 = *(void **)(v0 + 344);
  outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 352), v0 + 304, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if ((*(_BYTE *)(v0 + 336) & 1) != 0)
    goto LABEL_11;
  v3 = *(double *)(v0 + 304);
  v4 = *(double *)(v0 + 312);
  *(double *)(v0 + 376) = v3;
  *(double *)(v0 + 384) = v4;
  v5 = *(double *)(v0 + 320);
  v6 = *(double *)(v0 + 328);
  *(double *)(v0 + 392) = v5;
  *(double *)(v0 + 400) = v6;
  if (!CGRect.isFinite.getter(v3, v4, v5, v6))
    goto LABEL_11;
  if (v5 <= 1.0 || v6 <= 1.0)
  {
LABEL_11:
    CGContextRestoreGState(*(CGContextRef *)(v0 + 368));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = v0 + 256;
  v9 = *(CGContext **)(v0 + 368);
  v10 = v2;
  v26.origin.x = v3;
  v26.origin.y = v4;
  v26.size.width = v5;
  v26.size.height = v6;
  MinY = CGRectGetMinY(v26);
  v27.origin.x = v3;
  v27.origin.y = v4;
  v27.size.width = v5;
  v27.size.height = v6;
  MaxY = CGRectGetMaxY(v27);
  *(_QWORD *)(v0 + 208) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_QWORD *)(v0 + 280) = 0xBFF0000000000000;
  *(_QWORD *)(v0 + 288) = 0;
  *(double *)(v0 + 296) = MinY + MaxY;
  CGAffineTransformConcat(&v25, (CGAffineTransform *)(v0 + 208), (CGAffineTransform *)(v0 + 256));
  v13 = *(_OWORD *)&v25.c;
  v14 = *(_OWORD *)&v25.tx;
  *(_OWORD *)(v0 + 208) = *(_OWORD *)&v25.a;
  *(_OWORD *)(v0 + 224) = v13;
  *(_OWORD *)(v0 + 240) = v14;
  CGContextConcatCTM(v9, (CGAffineTransform *)(v0 + 208));
  Type = CGContextGetType();
  if (Type == 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    if ((*(_BYTE *)(v0 + 337) & 1) != 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v16 = Type != 6;
  v17 = Type != 6;
  v18 = Type != 6;
  if ((*(_BYTE *)(v0 + 337) & 1) == 0)
  {
LABEL_13:
    v17 = 0;
    v18 = v16;
  }
LABEL_14:
  v20 = *(unsigned __int8 *)(v0 + 338);
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11A0]), sel_initWithSize_scale_renderQueue_sixChannelBlending_, 0, v17, v5, v6, *(double *)(v0 + 360));
  *(_QWORD *)(v0 + 408) = v21;
  v22 = v21;
  objc_msgSend(v22, sel_setInvertColors_, v20);
  if (v17)
  {
    *(_QWORD *)(v0 + 56) = v8;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
    *(_QWORD *)(v0 + 240) = swift_continuation_init();
    *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 216) = 0x40000000;
    *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?);
    *(_QWORD *)(v0 + 232) = &block_descriptor_14_3;
    objc_msgSend(v22, sel_sixChannelCGRenderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
  }
  else if (v18
         || (*(_BYTE *)(v0 + 337) & 1) == 0
         || !objc_msgSend(v22, sel_respondsToSelector_, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_))
  {
    *(_QWORD *)(v0 + 184) = v8;
    *(_QWORD *)(v0 + 144) = v0;
    *(_QWORD *)(v0 + 152) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
    *(_QWORD *)(v0 + 240) = swift_continuation_init();
    *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 216) = 0x40000000;
    *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(_QWORD *)(v0 + 232) = &block_descriptor_12_1;
    objc_msgSend(v22, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 368);
    *(_QWORD *)(v0 + 80) = v0;
    *(_QWORD *)(v0 + 88) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
    v24 = swift_continuation_init();
    *(_QWORD *)(v0 + 208) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 216) = 0x40000000;
    *(_QWORD *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
    *(_QWORD *)(v0 + 232) = &block_descriptor_13_3;
    *(_QWORD *)(v0 + 240) = v24;
    objc_msgSend(v22, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_, v10, v23, v0 + 208, v3, v4, v5, v6, 1.0);
  }
  return swift_continuation_await();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?)(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  v4 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40);
  *v4 = a2;
  v4[1] = a3;
  v5 = a2;
  v6 = a3;
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ()()
{
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v6, v3, &demangling cache variable for type metadata for UIImage?);
  return swift_continuation_resume();
}

uint64_t specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 104) = a3;
  *(_QWORD *)(v8 + 112) = a4;
  *(_QWORD *)(v8 + 96) = a2;
  *(double *)(v8 + 80) = a7;
  *(double *)(v8 + 88) = a8;
  *(double *)(v8 + 64) = a5;
  *(double *)(v8 + 72) = a6;
  *(_QWORD *)(v8 + 56) = a1;
  return swift_task_switch();
}

{
  uint64_t v8;

  *(_QWORD *)(v8 + 104) = a3;
  *(_QWORD *)(v8 + 112) = a4;
  *(_QWORD *)(v8 + 96) = a2;
  *(double *)(v8 + 80) = a7;
  *(double *)(v8 + 88) = a8;
  *(double *)(v8 + 64) = a5;
  *(double *)(v8 + 72) = a6;
  *(_QWORD *)(v8 + 56) = a1;
  return swift_task_switch();
}

uint64_t specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)()
{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  char *v14;
  uint64_t v15;
  double v16;
  int Type;
  BOOL v18;
  double v19;
  double v20;
  char v21;
  char v22;
  _QWORD *v23;
  double v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, char, char, char, double);
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v2 = *(double *)(v0 + 80);
  v1 = *(double *)(v0 + 88);
  v4 = *(double *)(v0 + 64);
  v3 = *(double *)(v0 + 72);
  objc_msgSend(*(id *)(v0 + 56), sel_bounds);
  x = v26.origin.x;
  y = v26.origin.y;
  width = v26.size.width;
  height = v26.size.height;
  v31.origin.x = v4;
  v31.origin.y = v3;
  v31.size.width = v2;
  v31.size.height = v1;
  v27 = CGRectIntersection(v26, v31);
  v9 = v27.origin.x;
  v10 = v27.origin.y;
  v11 = v27.size.width;
  v12 = v27.size.height;
  if (CGRectIsEmpty(v27))
    return (*(uint64_t (**)(void))(v0 + 8))();
  v14 = *(char **)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 56);
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  v28.size.height = height;
  v29 = CGContextConvertRectToDeviceSpace((CGContextRef)*(_QWORD *)(v0 + 96), v28);
  v24 = CGRectGetWidth(v29);
  v30.origin.x = x;
  v30.origin.y = y;
  v30.size.width = width;
  v30.size.height = height;
  v16 = CGRectGetWidth(v30);
  Type = CGContextGetType();
  v18 = Type == 6 || Type == 1;
  v19 = 1.0;
  if (v18)
    v19 = 2.0;
  v20 = v24 / v16 * v19;
  *(CGFloat *)(v0 + 16) = v9;
  *(CGFloat *)(v0 + 24) = v10;
  *(CGFloat *)(v0 + 32) = v11;
  *(CGFloat *)(v0 + 40) = v12;
  *(_BYTE *)(v0 + 48) = 0;
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))((char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                                                                                    + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:));
  v21 = *v14;
  v22 = v14[1];
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v23;
  *v23 = v0;
  v23[1] = specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  return v25(v15, v0 + 16, *(_QWORD *)(v0 + 96), v21, v22, 0, v20);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  char *v14;
  uint64_t v15;
  double v16;
  int Type;
  BOOL v18;
  double v19;
  double v20;
  char v21;
  char v22;
  _QWORD *v23;
  double v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, char, char, char, double);
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v2 = *(double *)(v0 + 80);
  v1 = *(double *)(v0 + 88);
  v4 = *(double *)(v0 + 64);
  v3 = *(double *)(v0 + 72);
  objc_msgSend(*(id *)(v0 + 56), sel_bounds);
  x = v26.origin.x;
  y = v26.origin.y;
  width = v26.size.width;
  height = v26.size.height;
  v31.origin.x = v4;
  v31.origin.y = v3;
  v31.size.width = v2;
  v31.size.height = v1;
  v27 = CGRectIntersection(v26, v31);
  v9 = v27.origin.x;
  v10 = v27.origin.y;
  v11 = v27.size.width;
  v12 = v27.size.height;
  if (CGRectIsEmpty(v27))
    return (*(uint64_t (**)(void))(v0 + 8))();
  v14 = *(char **)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 56);
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  v28.size.height = height;
  v29 = CGContextConvertRectToDeviceSpace((CGContextRef)*(_QWORD *)(v0 + 96), v28);
  v24 = CGRectGetWidth(v29);
  v30.origin.x = x;
  v30.origin.y = y;
  v30.size.width = width;
  v30.size.height = height;
  v16 = CGRectGetWidth(v30);
  Type = CGContextGetType();
  v18 = Type == 6 || Type == 1;
  v19 = 1.0;
  if (v18)
    v19 = 2.0;
  v20 = v24 / v16 * v19;
  *(CGFloat *)(v0 + 16) = v9;
  *(CGFloat *)(v0 + 24) = v10;
  *(CGFloat *)(v0 + 32) = v11;
  *(CGFloat *)(v0 + 40) = v12;
  *(_BYTE *)(v0 + 48) = 0;
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))((char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                                                                                    + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:));
  v21 = *v14;
  v22 = v14[1];
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v23;
  *v23 = v0;
  v23[1] = specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  return v25(v15, v0 + 16, *(_QWORD *)(v0 + 96), v21, v22, 0, v20);
}

{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  char *v14;
  uint64_t v15;
  double v16;
  int Type;
  BOOL v18;
  double v19;
  double v20;
  char v21;
  char v22;
  _QWORD *v23;
  double v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, char, char, char, double);
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v2 = *(double *)(v0 + 80);
  v1 = *(double *)(v0 + 88);
  v4 = *(double *)(v0 + 64);
  v3 = *(double *)(v0 + 72);
  objc_msgSend(*(id *)(v0 + 56), sel_bounds);
  x = v26.origin.x;
  y = v26.origin.y;
  width = v26.size.width;
  height = v26.size.height;
  v31.origin.x = v4;
  v31.origin.y = v3;
  v31.size.width = v2;
  v31.size.height = v1;
  v27 = CGRectIntersection(v26, v31);
  v9 = v27.origin.x;
  v10 = v27.origin.y;
  v11 = v27.size.width;
  v12 = v27.size.height;
  if (CGRectIsEmpty(v27))
    return (*(uint64_t (**)(void))(v0 + 8))();
  v14 = *(char **)(v0 + 104);
  v15 = *(_QWORD *)(v0 + 56);
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  v28.size.height = height;
  v29 = CGContextConvertRectToDeviceSpace((CGContextRef)*(_QWORD *)(v0 + 96), v28);
  v24 = CGRectGetWidth(v29);
  v30.origin.x = x;
  v30.origin.y = y;
  v30.size.width = width;
  v30.size.height = height;
  v16 = CGRectGetWidth(v30);
  Type = CGContextGetType();
  v18 = Type == 6 || Type == 1;
  v19 = 1.0;
  if (v18)
    v19 = 2.0;
  v20 = v24 / v16 * v19;
  *(CGFloat *)(v0 + 16) = v9;
  *(CGFloat *)(v0 + 24) = v10;
  *(CGFloat *)(v0 + 32) = v11;
  *(CGFloat *)(v0 + 40) = v12;
  *(_BYTE *)(v0 + 48) = 0;
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))((char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                                                                                    + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:));
  v21 = *v14;
  v22 = v14[1];
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v23;
  *v23 = v0;
  v23[1] = specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  return v25(v15, v0 + 16, *(_QWORD *)(v0 + 96), v21, v22, 0, v20);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void specialized Shape.renderSync<A>(in:id:capsule:options:)(CGContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CGColor *v4;
  CGColor *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  double a;
  double b;
  double c;
  double d;
  CGFloat v45;
  double MidX;
  double MidY;
  CGFloat v48;
  CGFloat tx;
  CGFloat ty;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  double v59;
  void *v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  CGFloat MaxY;
  CGContext *v73;
  double v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  double v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double MinX;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  double v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  int a_low;
  int b_low;
  BOOL v102;
  char v103;
  uint64_t v104;
  double v105;
  _BOOL4 v106;
  uint64_t v107;
  CGFloat v108;
  uint64_t v109;
  CGColor *v110;
  _BOOL4 v111;
  int v112;
  id v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  id v122;
  CGColor *v123;
  CGContext *v124;
  CGFloat v125;
  double v126;
  double v127;
  CGFloat v128;
  char v129;
  CGFloat v130;
  CGContext *v131;
  id v132;
  void *v133;
  CGFloat v134;
  _BOOL4 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  CGFloat v140;
  id v141;
  void *v142;
  CGFloat v143;
  CGContextRef v144;
  CGFloat v145;
  uint64_t v146;
  double v147;
  double v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int (*v153)(uint64_t, uint64_t, uint64_t);
  CGLineCap c_low;
  double v155;
  double v156;
  CGFloat v157;
  double v158;
  CGFloat v159;
  double v160;
  CGFloat v161;
  double v162;
  double v163;
  CGFloat v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  const CGPath *v170;
  const CGPath *v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t, uint64_t);
  char *v175;
  double v176;
  CGColor *v177;
  _BOOL4 v178;
  uint64_t v179;
  uint64_t v180;
  _BOOL4 v181;
  char v182;
  const CGPath *v183;
  const CGPath *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  double v191;
  CGFloat v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  CGColor *v203;
  __int128 v204;
  __int128 v205;
  double v206;
  CGFloat v207;
  CGFloat v208;
  double v209;
  uint64_t v210;
  CGAffineTransform v211;
  CGAffineTransform t1;
  double v213;
  double v214;
  uint64_t v215;
  CGAffineTransform v216;
  CGAffineTransform t2;
  CGSize v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect PathBoundingBox;
  CGRect v228;
  CGRect v229;
  __C::CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;

  v5 = v4;
  v195 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v194 = (char *)&v188 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v196 = (char *)&v188 - v13;
  v201 = type metadata accessor for CGPathFillRule();
  v200 = *(_QWORD *)(v201 - 8);
  MEMORY[0x1E0C80A78](v201, v14);
  v199 = (char *)&v188 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v16, v17);
  v197 = (uint64_t)&v188 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v198 = (uint64_t)&v188 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v203 = (CGColor *)((char *)&v188 - v24);
  MEMORY[0x1E0C80A78](v25, v26);
  v202 = (uint64_t)&v188 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v188 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v188 - v34;
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v188 - v38;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  v45 = t1.a;
  v209 = a - c * 0.0;
  v208 = b - d * 0.0;
  v219.origin.x = a;
  v219.origin.y = b;
  v219.size.width = c;
  v206 = c;
  v219.size.height = d;
  v207 = d;
  MidX = CGRectGetMidX(v219);
  v220.origin.x = a;
  v220.origin.y = b;
  v220.size.width = c;
  v220.size.height = d;
  MidY = CGRectGetMidY(v220);
  CGAffineTransformMakeRotation(&t1, v45);
  v205 = *(_OWORD *)&t1.a;
  v204 = *(_OWORD *)&t1.c;
  v48 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v48);
  v51 = t1.a;
  v52 = t1.b;
  v53 = t1.c;
  v54 = t1.d;
  v55 = t1.tx;
  v56 = t1.ty;
  *(_OWORD *)&t2.a = v205;
  *(_OWORD *)&t2.c = v204;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v216, &t1, &t2);
  v205 = *(_OWORD *)&v216.a;
  v204 = *(_OWORD *)&v216.c;
  v57 = v216.tx;
  v58 = v216.ty;
  t1.a = v51;
  t1.b = v52;
  t1.c = v53;
  t1.d = v54;
  t1.tx = v55;
  t1.ty = v56;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v205;
  *(_OWORD *)&t1.c = v204;
  t1.tx = v57;
  t1.ty = v58;
  CGAffineTransformConcat(&v216, &t1, &t2);
  t1.a = v206;
  t1.c = 0.0;
  t1.b = 0.0;
  t1.d = v207;
  t1.tx = v209;
  t1.ty = v208;
  t2 = v216;
  CGAffineTransformConcat(&v216, &t1, &t2);
  t2 = v216;
  v209 = *(double *)&a1;
  CGContextSaveGState(a1);
  *(_QWORD *)&v59 = (char *)v4 + v16[13];
  v208 = COERCE_DOUBLE(type metadata accessor for ShapeSecondaryProperties());
  v207 = v59;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  *(_QWORD *)&v205 = a4;
  if ((LOBYTE(t1.a) & 0x20) != 0 && (v60 = *(void **)(a4 + 64)) != 0)
  {
    v193 = v40;
    *(_QWORD *)&v204 = v16;
    v206 = COERCE_DOUBLE(v60);
    v61 = objc_msgSend(*(id *)&v206, sel_annotations);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    MEMORY[0x1E0C80A78](v63, v64);
    *(&v188 - 2) = v195;
    v65 = COERCE_DOUBLE(specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v188 - 4), v62));
    v189 = 0;
    swift_bridgeObjectRelease();
    if (v65 == 0.0)
    {
      v65 = v206;
    }
    else
    {
      if (objc_msgSend(*(id *)&v65, sel_hasAppearanceStream))
      {
        v66 = v206;
        objc_msgSend(*(id *)&v206, sel_boundsForBox_, 0);
        x = v221.origin.x;
        y = v221.origin.y;
        width = v221.size.width;
        height = v221.size.height;
        MinY = CGRectGetMinY(v221);
        v222.origin.x = x;
        v222.origin.y = y;
        v222.size.width = width;
        v222.size.height = height;
        MaxY = CGRectGetMaxY(v222);
        t1.a = 1.0;
        t1.b = 0.0;
        t1.c = 0.0;
        t1.d = 1.0;
        t1.ty = 0.0;
        t1.tx = 0.0;
        v216.b = 0.0;
        v216.c = 0.0;
        v216.a = 1.0;
        *(_OWORD *)&v216.d = xmmword_1DDF325E0;
        v216.ty = MinY + MaxY;
        CGAffineTransformConcat(&v211, &t1, &v216);
        t1 = v211;
        v73 = *(CGContext **)&v209;
        CGContextConcatCTM(*(CGContextRef *)&v209, &t1);
        objc_msgSend(*(id *)&v66, sel_transformForBox_, 1);
        CGAffineTransformInvert(&v216, &t1);
        t1 = v216;
        CGContextConcatCTM(v73, &t1);
        CRRegister.wrappedValue.getter();
        if ((LOBYTE(t1.a) & 0x40) == 0)
        {
          objc_msgSend(*(id *)&v65, sel_bounds);
          v75 = v74;
          v77 = v76;
          v79 = v78;
          v81 = v80;
          objc_msgSend(*(id *)&v66, sel_boundsForBox_, 0);
          v83 = v82;
          v85 = v84;
          v223.origin.x = v75;
          v223.origin.y = v77;
          v223.size.width = v79;
          v223.size.height = v81;
          MinX = CGRectGetMinX(v223);
          v224.origin.x = v75;
          v224.origin.y = v77;
          v224.size.width = v79;
          v224.size.height = v81;
          v87 = v85 + v83 + v83 - CGRectGetMaxY(v224);
          v225.origin.x = v75;
          v225.origin.y = v77;
          v225.size.width = v79;
          v225.size.height = v81;
          CGRectGetWidth(v225);
          v226.origin.x = v75;
          v226.origin.y = v77;
          v226.size.width = v79;
          v226.size.height = v81;
          CGRectGetHeight(v226);
          CRRegister.wrappedValue.getter();
          v88 = t1.a - MinX;
          v89 = t1.b - v87;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
          CRRegister.wrappedValue.getter();
          if (*(_QWORD *)&t1.ty)
          {
            v90 = t1.d;
            v91 = t1.c;
            swift_bridgeObjectRelease();
          }
          else
          {
            v90 = 0.0;
            v91 = 0.0;
          }
          CGContextTranslateCTM(v73, v88 + v91, -(v89 + v90));
        }
        objc_msgSend(*(id *)&v65, sel_drawWithBox_inContext_, 1, v73);
        CGContextRestoreGState(v73);

LABEL_77:
        return;
      }

    }
    v16 = (int *)v204;
  }
  else
  {
    v189 = 0;
  }
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&t1, 1.0);
  v92 = t1.a;
  v93 = t1.b;
  v192 = t1.c;
  v94 = t1.d;
  v95 = t1.tx;
  v191 = t1.ty;
  v190 = v213;
  v96 = v214;
  v97 = v215;
  v98 = (char *)v4 + v16[11];
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v193 = (uint64_t)v98;
  CRRegister.wrappedValue.getter();
  a_low = LOBYTE(t1.a);
  b_low = LOBYTE(t1.b);
  outlined init with copy of PKStrokeProperties((uint64_t)v5, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (a_low)
    v102 = a_low == 9;
  else
    v102 = 1;
  v103 = v102;
  v195 = v99;
  if (b_low == 1 || (v103 & 1) == 0)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v104 = 1;
  }
  else
  {
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v104 = LOBYTE(t1.b) | (LOBYTE(t1.a) != 0);
  }
  *(_QWORD *)&v204 = (char *)v5 + v16[8];
  CRRegister.wrappedValue.getter();
  v105 = t1.a;
  outlined init with copy of PKStrokeProperties((uint64_t)v5, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v105 <= 0.0)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v106 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v106 = *(_QWORD *)&t1.a != 0;

  }
  *(double *)&v107 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>));
  CRRegister.wrappedValue.getter();
  v108 = t1.a;

  outlined init with copy of PKStrokeProperties((uint64_t)v5, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (!v106 || v108 == 0.0)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v109 = v202;
    outlined init with copy of PKStrokeProperties((uint64_t)v5, v202, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
LABEL_31:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v109, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v111 = *(_QWORD *)&t1.d != 0;

    v112 = v106 & v104;
    v110 = v203;
    outlined init with copy of PKStrokeProperties((uint64_t)v5, (uint64_t)v203, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    if (v112 != 1)
      goto LABEL_29;
    goto LABEL_32;
  }
  CRRegister.wrappedValue.getter();
  v105 = t1.a;
  outlined destroy of PKStrokeProperties((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v109 = v202;
  outlined init with copy of PKStrokeProperties((uint64_t)v5, v202, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v105 >= 1.0)
    goto LABEL_31;
  outlined destroy of PKStrokeProperties(v109, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v110 = v203;
  outlined init with copy of PKStrokeProperties((uint64_t)v5, (uint64_t)v203, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v111 = 1;
  if ((v104 & 1) == 0)
  {
LABEL_29:
    LODWORD(v202) = 0;
    goto LABEL_42;
  }
LABEL_32:
  CRRegister.wrappedValue.getter();
  if (!*(_QWORD *)&t1.a)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  v113 = *(id *)&t1.a;
  v114 = CGColorRef.components.getter();

  if (!v114)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (*(_QWORD *)(v114 + 16) < 4uLL)
  {
    __break(1u);
    goto LABEL_106;
  }
  v115 = *(double *)(v114 + 56);

  swift_bridgeObjectRelease();
  v116 = v198;
  outlined init with copy of PKStrokeProperties((uint64_t)v110, v198, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v115 >= 1.0)
  {
    v117 = v197;
    outlined init with copy of PKStrokeProperties(v116, v197, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    if (v111)
    {
      LODWORD(v202) = 0;
    }
    else
    {
      CRRegister.wrappedValue.getter();
      v117 = v197;
      LODWORD(v202) = t1.a < 1.0;
    }
    outlined destroy of PKStrokeProperties(v117, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  }
  else
  {
    LODWORD(v202) = 1;
  }
  outlined destroy of PKStrokeProperties(v116, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
LABEL_42:
  outlined destroy of PKStrokeProperties((uint64_t)v110, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  v118 = t1.d;
  v206 = v92;
  if (*(_QWORD *)&t1.d)
  {
    v119 = t1.c;
    v120 = t1.b;
    v121 = t1.a;
    v122 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&t1.d);
    v123 = (CGColor *)objc_msgSend(v122, sel_CGColor);

    v124 = *(CGContext **)&v209;
    v218.width = v121;
    v218.height = v120;
    CGContextSetShadowWithColor(*(CGContextRef *)&v209, v218, v119, v123);

  }
  else
  {
    v124 = *(CGContext **)&v209;
  }
  v104 = v205;
  v197 = (uint64_t)v5 + v16[10];
  CRRegister.wrappedValue.getter();
  CGContextSetAlpha(v124, t1.a);
  if (v111)
  {
    *(double *)&v203 = v93;
    PathBoundingBox = CGPathGetPathBoundingBox(*(CGPathRef *)&v206);
    v105 = PathBoundingBox.origin.x;
    v56 = PathBoundingBox.origin.y;
    v57 = PathBoundingBox.size.width;
    v93 = PathBoundingBox.size.height;
    CRRegister.wrappedValue.getter();
    v125 = t1.a;

    if (v125 == 0.0)
    {
      v127 = 1.0;
      goto LABEL_50;
    }
    v198 = v97;
    *(double *)&v97 = v96;
    v96 = v95;
    v95 = v94;
    if (one-time initialization token for shapeStrokeMiterLimit == -1)
    {
LABEL_48:
      v126 = *(double *)&static UIConstants.shapeStrokeMiterLimit;
      CRRegister.wrappedValue.getter();
      v127 = v126 * t1.a;
      v94 = v95;
      v95 = v96;
      v96 = *(double *)&v97;
      v97 = v198;
LABEL_50:
      v128 = -v127;
      v228.origin.x = v105;
      v228.origin.y = v56;
      v228.size.width = v57;
      v228.size.height = v93;
      v229 = CGRectInset(v228, v128, v128);
      CGContextBeginTransparencyLayerWithRect(*(CGContextRef *)&v209, v229, 0);
      v93 = *(double *)&v203;
      goto LABEL_51;
    }
LABEL_106:
    swift_once();
    goto LABEL_48;
  }
LABEL_51:
  v129 = *(_BYTE *)(v104 + 1);
  CRRegister.wrappedValue.getter();
  v130 = t1.a;
  if (*(_QWORD *)&t1.a)
  {
    v198 = v107;
    v203 = v5;
    v131 = *(CGContext **)&v209;
    if ((v129 & 1) != 0)
    {
      v132 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&t1.a);
      v133 = (void *)static PKInkingTool.convertColor(_:from:to:)();

      Color.init(cgColor:)((CGColor *)objc_msgSend(v133, sel_CGColor), (CGColor **)&v216);
      v134 = v216.a;
      if (!*(_QWORD *)&v216.a)
      {
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }

      v130 = v134;
      v104 = v205;
    }
    CGContextSetFillColorWithColor(v131, *(CGColorRef *)&v130);
    CGContextAddPath(v131, *(CGPathRef *)&v206);
    v135 = v111;
    v136 = v200;
    v137 = v199;
    v138 = v201;
    (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v199, *MEMORY[0x1E0C9B8A0], v201);
    CGContextRef.fillPath(using:)();

    v139 = *(void (**)(char *, uint64_t))(v136 + 8);
    v111 = v135;
    v139(v137, v138);
    v5 = v203;
  }
  else
  {
    v131 = *(CGContext **)&v209;
  }
  CRRegister.wrappedValue.getter();
  v140 = t1.a;
  if (!*(_QWORD *)&t1.a)
  {
LABEL_71:
    v65 = v206;
    if (!v111)
      goto LABEL_73;
    goto LABEL_72;
  }
  if ((v129 & 1) != 0)
  {
    v141 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&t1.a);
    v142 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v142, sel_CGColor), (CGColor **)&v216);
    v143 = v216.a;
    if (!*(_QWORD *)&v216.a)
    {
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }

    v140 = v143;
    v104 = v205;
  }
  CRRegister.wrappedValue.getter();
  if (t1.a <= 0.0)
  {

    goto LABEL_71;
  }
  *(double *)&v144 = COERCE_DOUBLE(*(id *)&v140);
  v145 = *(double *)&v144;
  if ((v202 & 1) == 0)
    goto LABEL_68;
  v146 = CGColorRef.components.getter();
  if (v146)
  {
    if (*(_QWORD *)(v146 + 16) >= 4uLL)
    {
      v147 = *(double *)(v146 + 56);

      swift_bridgeObjectRelease();
      v148 = 1.0;
      if (!v111)
      {
        CRRegister.wrappedValue.getter();
        v148 = t1.a;
      }
      CGContextSetAlpha(v131, v147 * v148);
      *(_QWORD *)&v216.a = v144;
      Color.withAlphaComponent(_:)((CGColorRef *)&t1, 1.0);
      v145 = t1.a;
      CGContextBeginTransparencyLayer(v131, 0);
LABEL_68:
      *(double *)&v203 = v145;
      CGContextSetStrokeColorWithColor(v131, *(CGColorRef *)&v145);
      CRRegister.wrappedValue.getter();
      CGContextSetLineWidth(v131, t1.a);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
      v149 = v196;
      CRRegister.wrappedValue.getter();
      v150 = (uint64_t)v149;
      v151 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
      v152 = *(_QWORD *)(v151 - 8);
      v153 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
      if (v153(v150, 1, v151) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v150, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
        c_low = kCGLineCapButt;
      }
      else
      {
        TaggedValue_2.tagged1.getter();
        if (*(_QWORD *)&t1.b)
        {
          c_low = LODWORD(t1.c);
          swift_bridgeObjectRelease();
        }
        else
        {
          c_low = kCGLineCapButt;
        }
        (*(void (**)(char *, uint64_t))(v152 + 8))(v196, v151);
      }
      CGContextSetLineCap(*(CGContextRef *)&v209, c_low);
      v165 = (uint64_t)v194;
      CRRegister.wrappedValue.getter();
      if (v153(v165, 1, v151) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v165, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
        v131 = *(CGContext **)&v209;
        v65 = v206;
      }
      else
      {
        TaggedValue_2.tagged1.getter();
        v166 = *(_QWORD *)&t1.b;
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v165, v151);
        v131 = *(CGContext **)&v209;
        v65 = v206;
        if (v166)
        {
          if (*(_QWORD *)(v166 + 16))
          {
            v167 = CRRegister.wrappedValue.getter();
            MEMORY[0x1E0C80A78](v167, v168);
            *(&v188 - 2) = (uint64_t)v5;
            _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12CoreGraphics7CGFloatVG_AHs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in Shape.renderSync<A>(in:id:capsule:options:), (uint64_t)(&v188 - 4), v166);
            swift_bridgeObjectRelease();
            CGContextRef.setLineDash(phase:lengths:)();
          }
          swift_bridgeObjectRelease();
        }
      }
      CGContextAddPath(v131, *(CGPathRef *)&v65);
      CGContextStrokePath(v131);
      CGContextSetFillColorWithColor(v131, v203);
      CRRegister.wrappedValue.getter();
      if ((LOBYTE(t1.b) & 1) != 0)
      {
        v169 = 1;
      }
      else
      {
        v169 = LOBYTE(t1.a);
        if (!LOBYTE(t1.a))
          goto LABEL_93;
      }
      LOBYTE(v211.a) = v169;
      CRRegister.wrappedValue.getter();
      v170 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v93, v192, v191, v190, v216.a);
      if (v170)
      {
        v171 = v170;
        CGContextAddPath(v131, v170);
        v172 = *MEMORY[0x1E0C9B898];
        v173 = v200;
        v174 = *(void (**)(char *, uint64_t, uint64_t))(v200 + 104);
        v175 = v199;
        v209 = *(double *)&v144;
        v176 = v65;
        v177 = v5;
        v178 = v111;
        v179 = v201;
        v174(v199, v172, v201);
        CGContextRef.fillPath(using:)();

        v180 = v179;
        v111 = v178;
        v5 = v177;
        v65 = v176;
        *(double *)&v144 = v209;
        (*(void (**)(char *, uint64_t))(v173 + 8))(v175, v180);
      }
LABEL_93:
      CRRegister.wrappedValue.getter();
      if ((LOBYTE(t1.b) & 1) != 0)
      {
        v181 = v111;
        v182 = 1;
      }
      else
      {
        v181 = v111;
        v182 = LOBYTE(t1.a);
        if (!LOBYTE(t1.a))
          goto LABEL_98;
      }
      LOBYTE(v211.a) = v182;
      CRRegister.wrappedValue.getter();
      v183 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v94, v95, v96, *(double *)&v97, v216.a);
      if (v183)
      {
        v184 = v183;
        CGContextAddPath(v131, v183);
        v185 = v200;
        v186 = v199;
        v187 = v201;
        (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v199, *MEMORY[0x1E0C9B898], v201);
        CGContextRef.fillPath(using:)();

        (*(void (**)(char *, uint64_t))(v185 + 8))(v186, v187);
      }
LABEL_98:
      if ((_DWORD)v202)
        CGContextEndTransparencyLayer(v131);

      v104 = v205;
      if (!v181)
        goto LABEL_73;
LABEL_72:
      CGContextEndTransparencyLayer(v131);
LABEL_73:
      outlined init with take of (key: Int, value: AnyCRValue)?(v104 + 24, (uint64_t)&t1, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      CGContextRestoreGState(v131);
      v155 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)((uint64_t)v5, (uint64_t)&t1);
      v157 = v156;
      v159 = v158;
      v161 = v160;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      if ((LOBYTE(v216.a) & 2) != 0)
      {
        v230 = Shape.renderFrame(in:)((__C::CGRect_optional *)&t1);
        v162 = CGRectGetHeight((CGRect)v230);
        v231.origin.x = v155;
        v231.origin.y = v157;
        v231.size.width = v159;
        v231.size.height = v161;
        v163 = v162 - CGRectGetHeight(v231);
        if (v163 > 0.0)
        {
          v164 = v163 * 0.5;
          v232.origin.x = v155;
          v232.origin.y = v157;
          v232.size.width = v159;
          v232.size.height = v161;
          v233 = CGRectOffset(v232, 0.0, v164);
          v155 = v233.origin.x;
          v157 = v233.origin.y;
          v159 = v233.size.width;
          v161 = v233.size.height;
        }
      }
      specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)((uint64_t)v5, v131, v155, v157, v159, v161);
      goto LABEL_77;
    }
    __break(1u);
    goto LABEL_108;
  }
LABEL_112:
  __break(1u);
}

void specialized PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(int a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[10];
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD v63[2];
  _QWORD aBlock[7];

  v4 = v3;
  v47[5] = a2;
  v52 = 0;
  v50 = a1;
  v6 = a1;
  aBlock[6] = *MEMORY[0x1E0C80C00];
  v48 = type metadata accessor for SHA256Digest();
  v47[9] = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v7);
  v47[8] = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v61, v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v10, v11);
  v59 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = type metadata accessor for CRKeyPath();
  v60 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v58 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v62 = (char *)v47 - v22;
  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v57 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v23);
  v56 = (char *)v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for SHA256();
  v47[7] = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v25);
  v49 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v47 - v29;
  v63[1] = a3;
  SHA256.init()();
  v55 = v4;
  objc_msgSend(v4, sel_boundsForBox_, 0);
  v53 = v30;
  v47[6] = v17;
  if (v6 == 1)
  {
    CGRect.rawValue.getter(v31, v32, v33, v34);
    __asm { BR              X10 }
  }
  CGRect.roundedHash(into:)(v31, v32, v33, v34);
  v63[0] = MEMORY[0x1E0DEE9D8];
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
  v37 = CGDisplayListCreateWithRect();
  v38 = (void *)CGDisplayListContextCreate();
  objc_msgSend(v55, sel_drawWithBox_inContext_withOptions_, 0, v38, 0);

  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v63;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = partial apply for closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:);
  *(_QWORD *)(v40 + 24) = v39;
  v47[4] = v39;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v40;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  aBlock[3] = &block_descriptor_211;
  v41 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGDisplayListEnumerateEntriesWithOptions();
  _Block_release(v41);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v41 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v42 = v63[0];
    v43 = *(_QWORD *)(v63[0] + 16);
    if (!(v43 >> 61))
    {
      v47[3] = v37;
      v44 = v63[0] + 32 + 4 * v43;
      swift_bridgeObjectRetain();
      specialized Data.init<A>(_:)(v42 + 32, v44);
      v46 = v45;
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x1DDE00100);
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed UIImage?, @guaranteed ICDocCamImageQuad?, @unowned Bool) -> ()(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  void (*v9)(uint64_t, void *, void *, uint64_t);
  id v10;
  id v11;

  v9 = *(void (**)(uint64_t, void *, void *, uint64_t))(a1 + 32);
  swift_retain();
  v11 = a3;
  v10 = a4;
  v9(a2, a3, a4, a5);
  swift_release();

}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SortableCalculateExpression>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSTextAlignment>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Color>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[AnyCanvasElementView]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowEnum>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, SearchQueryResult)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocumentFindResult>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ValueTypes_BezierPath.ElementType>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGAffineTransform>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(_NSRange, ReflowWord)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4])
          memmove(v12, a4 + 4, 160 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_NSRange>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchQueryResult>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MiniDefaultColor>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakObserver>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = (unint64_t)(v10 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = MEMORY[0x1E0DEE9D8] + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 16 * v8)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (_QWORD *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GraphableExpression>, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CapsuleUndoAction>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12468]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Link>, (uint64_t (*)(_QWORD))type metadata accessor for Link);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD10B8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Shape>, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PageId?>, &demangling cache variable for type metadata for PageId?);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AsyncStream<Data>.Continuation>, &demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_3<TaggedPaperPage>>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CheckedContinuation<(), Never>>, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size_0(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CanvasUIOverlay>, &demangling cache variable for type metadata for CanvasUIOverlay);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<(), Never>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PageOverlayView>, &demangling cache variable for type metadata for PageOverlayView);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size_0(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size_0(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  Swift::Int v43;
  Swift::Int v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  Swift::Int v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  _OWORD *v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  Swift::Int v127;
  uint64_t v128;
  char *__dst;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char v137;
  uint64_t v138;

  v3 = a1[1];
  result = (char *)_minimumMergeRunLength(_:)(v3);
  if ((uint64_t)result >= v3)
  {
    if (v3 < 0)
      goto LABEL_133;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, (char *)v3, (char *)1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_141;
  v126 = result;
  v138 = v1;
  v123 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_99:
      v113 = v11;
      v125 = v8;
      if (v12 >= 2)
      {
        v114 = *v123;
        do
        {
          v115 = v12 - 2;
          if (v12 < 2)
            goto LABEL_128;
          if (!v114)
            goto LABEL_140;
          v116 = v113;
          v117 = *(_QWORD *)&v113[16 * v115 + 32];
          v118 = *(_QWORD *)&v113[16 * v12 + 24];
          v119 = v138;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v114 + 48 * v117), (char *)(v114 + 48 * *(_QWORD *)&v113[16 * v12 + 16]), v114 + 48 * v118, __dst);
          v138 = v119;
          if (v119)
            break;
          if (v118 < v117)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v116 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v116);
          if (v115 >= *((_QWORD *)v116 + 2))
            goto LABEL_130;
          v120 = &v116[16 * v115 + 32];
          *(_QWORD *)v120 = v117;
          *((_QWORD *)v120 + 1) = v118;
          v121 = *((_QWORD *)v116 + 2);
          if (v12 > v121)
            goto LABEL_131;
          memmove(&v116[16 * v12 + 16], &v116[16 * v12 + 32], 16 * (v121 - v12));
          v113 = v116;
          *((_QWORD *)v116 + 2) = v121 - 1;
          v12 = v121 - 1;
        }
        while (v121 > 2);
      }
LABEL_96:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v125 + 16) = 0;
      return (char *)swift_bridgeObjectRelease();
    }
    v125 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v125 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v124 = *a1 + 80;
  v122 = *a1 - 48;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v127 = v3;
  v128 = *a1;
  while (1)
  {
    v13 = v9++;
    v14 = v13;
    if (v9 < v3)
    {
      v15 = v10 + 48 * v9;
      v16 = *(_QWORD *)(v15 + 32);
      v17 = *(_BYTE *)(v15 + 40);
      v18 = v10 + 48 * v13;
      v19 = *(_QWORD *)(v18 + 32);
      v20 = *(_BYTE *)(v18 + 40);
      v21 = *(_OWORD *)(v15 + 16);
      v134 = *(_OWORD *)v15;
      v135 = v21;
      v136 = v16;
      v137 = v17;
      v22 = *(_OWORD *)(v18 + 16);
      v130 = *(_OWORD *)v18;
      v131 = v22;
      v132 = v19;
      v133 = v20;
      v23 = specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v134, (uint64_t)&v130);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v24 = v124 + 48 * v13;
        while (1)
        {
          v25 = *(_QWORD *)(v24 + 48);
          v26 = *(_BYTE *)(v24 + 56);
          v27 = *(_QWORD *)v24;
          v28 = *(_BYTE *)(v24 + 8);
          v29 = *(_OWORD *)(v24 + 32);
          v134 = *(_OWORD *)(v24 + 16);
          v135 = v29;
          v136 = v25;
          v137 = v26;
          v30 = *(_OWORD *)(v24 - 16);
          v130 = *(_OWORD *)(v24 - 32);
          v131 = v30;
          v132 = v27;
          v133 = v28;
          if (((v23 ^ specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v134, (uint64_t)&v130)) & 1) != 0)break;
          ++v9;
          v24 += 48;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if ((v23 & 1) != 0)
      {
        if (v9 < v14)
          goto LABEL_134;
        v31 = v14;
        if (v14 < v9)
        {
          v32 = 48 * v9;
          v33 = 48 * v14;
          v34 = v9;
          do
          {
            if (v31 != --v34)
            {
              if (!v10)
                goto LABEL_139;
              v35 = (_OWORD *)(v10 + v33);
              v36 = *(_QWORD *)(v10 + v33 + 32);
              v37 = v10 + v32;
              v38 = *(_BYTE *)(v10 + v33 + 40);
              v39 = *(_OWORD *)(v10 + v33);
              v40 = *(_OWORD *)(v10 + v33 + 16);
              v42 = *(_OWORD *)(v10 + v32 - 32);
              v41 = *(_OWORD *)(v10 + v32 - 16);
              *v35 = *(_OWORD *)(v10 + v32 - 48);
              v35[1] = v42;
              v35[2] = v41;
              *(_OWORD *)(v37 - 48) = v39;
              *(_OWORD *)(v37 - 32) = v40;
              *(_QWORD *)(v37 - 16) = v36;
              *(_BYTE *)(v37 - 8) = v38;
            }
            ++v31;
            v32 -= 48;
            v33 += 48;
          }
          while (v31 < v34);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v14))
      goto LABEL_132;
    if (v9 - v14 >= (uint64_t)v126)
      goto LABEL_39;
    if (__OFADD__(v14, v126))
      goto LABEL_135;
    v43 = (uint64_t)&v126[v14] >= v3 ? v3 : (Swift::Int)&v126[v14];
    if (v43 < v14)
      break;
    if (v9 != v43)
    {
      v97 = v122 + 48 * v9;
      v44 = v14;
      do
      {
        v98 = v44;
        v99 = v97;
        do
        {
          v100 = *(_QWORD *)(v99 + 80);
          v101 = *(_BYTE *)(v99 + 88);
          v102 = *(_QWORD *)(v99 + 32);
          v103 = (_OWORD *)(v99 + 48);
          v104 = *(_BYTE *)(v99 + 40);
          v105 = *(_OWORD *)(v99 + 64);
          v134 = *(_OWORD *)(v99 + 48);
          v135 = v105;
          v136 = v100;
          v137 = v101;
          v106 = *(_OWORD *)(v99 + 16);
          v130 = *(_OWORD *)v99;
          v131 = v106;
          v132 = v102;
          v133 = v104;
          if ((specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v134, (uint64_t)&v130) & 1) == 0)break;
          if (!v10)
            goto LABEL_137;
          v108 = *(_OWORD *)(v99 + 48);
          v107 = *(_OWORD *)(v99 + 64);
          v109 = *(_OWORD *)(v99 + 16);
          v110 = *(_OWORD *)(v99 + 32);
          *v103 = *(_OWORD *)v99;
          *(_OWORD *)(v99 + 64) = v109;
          v111 = *(_QWORD *)(v99 + 80);
          v112 = *(_BYTE *)(v99 + 88);
          *(_OWORD *)v99 = v108;
          *(_OWORD *)(v99 + 16) = v107;
          *(_QWORD *)(v99 + 32) = v111;
          *(_BYTE *)(v99 + 40) = v112;
          v99 -= 48;
          ++v98;
          v103[2] = v110;
        }
        while (v9 != v98);
        ++v9;
        v97 += 48;
      }
      while (v9 != v43);
      v9 = v43;
      if (v43 < v44)
        goto LABEL_127;
      goto LABEL_40;
    }
LABEL_39:
    v44 = v14;
    if (v9 < v14)
      goto LABEL_127;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v46 = *((_QWORD *)v11 + 2);
    v45 = *((_QWORD *)v11 + 3);
    v12 = v46 + 1;
    if (v46 >= v45 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v47 = v11 + 32;
    v48 = &v11[16 * v46 + 32];
    *(_QWORD *)v48 = v44;
    *((_QWORD *)v48 + 1) = v9;
    if (v46)
    {
      v10 = v128;
      while (1)
      {
        v49 = v12 - 1;
        if (v12 >= 4)
        {
          v54 = &v47[16 * v12];
          v55 = *((_QWORD *)v54 - 8);
          v56 = *((_QWORD *)v54 - 7);
          v60 = __OFSUB__(v56, v55);
          v57 = v56 - v55;
          if (v60)
            goto LABEL_116;
          v59 = *((_QWORD *)v54 - 6);
          v58 = *((_QWORD *)v54 - 5);
          v60 = __OFSUB__(v58, v59);
          v52 = v58 - v59;
          v53 = v60;
          if (v60)
            goto LABEL_117;
          v61 = v12 - 2;
          v62 = &v47[16 * v12 - 32];
          v64 = *(_QWORD *)v62;
          v63 = *((_QWORD *)v62 + 1);
          v60 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v60)
            goto LABEL_119;
          v60 = __OFADD__(v52, v65);
          v66 = v52 + v65;
          if (v60)
            goto LABEL_122;
          if (v66 >= v57)
          {
            v84 = &v47[16 * v49];
            v86 = *(_QWORD *)v84;
            v85 = *((_QWORD *)v84 + 1);
            v60 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v60)
              goto LABEL_126;
            v77 = v52 < v87;
            goto LABEL_77;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v78 = *((_QWORD *)v11 + 4);
            v79 = *((_QWORD *)v11 + 5);
            v60 = __OFSUB__(v79, v78);
            v71 = v79 - v78;
            v72 = v60;
            goto LABEL_71;
          }
          v51 = *((_QWORD *)v11 + 4);
          v50 = *((_QWORD *)v11 + 5);
          v60 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          v53 = v60;
        }
        if ((v53 & 1) != 0)
          goto LABEL_118;
        v61 = v12 - 2;
        v67 = &v47[16 * v12 - 32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v70 = __OFSUB__(v68, v69);
        v71 = v68 - v69;
        v72 = v70;
        if (v70)
          goto LABEL_121;
        v73 = &v47[16 * v49];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v60 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v60)
          goto LABEL_124;
        if (__OFADD__(v71, v76))
          goto LABEL_125;
        if (v71 + v76 >= v52)
        {
          v77 = v52 < v76;
LABEL_77:
          if (v77)
            v49 = v61;
          goto LABEL_79;
        }
LABEL_71:
        if ((v72 & 1) != 0)
          goto LABEL_120;
        v80 = &v47[16 * v49];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v60 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v60)
          goto LABEL_123;
        if (v83 < v71)
          goto LABEL_15;
LABEL_79:
        v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v10)
          goto LABEL_138;
        v89 = v11;
        v90 = v10;
        v91 = &v47[16 * v88];
        v92 = *(_QWORD *)v91;
        v93 = &v47[16 * v49];
        v94 = *((_QWORD *)v93 + 1);
        v95 = v138;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 48 * *(_QWORD *)v91), (char *)(v90 + 48 * *(_QWORD *)v93), v90 + 48 * v94, __dst);
        v138 = v95;
        if (v95)
          goto LABEL_96;
        if (v94 < v92)
          goto LABEL_113;
        if (v49 > *((_QWORD *)v89 + 2))
          goto LABEL_114;
        *(_QWORD *)v91 = v92;
        *(_QWORD *)&v47[16 * v88 + 8] = v94;
        v96 = *((_QWORD *)v89 + 2);
        if (v49 >= v96)
          goto LABEL_115;
        v11 = v89;
        v12 = v96 - 1;
        memmove(&v47[16 * v49], v93 + 16, 16 * (v96 - 1 - v49));
        *((_QWORD *)v89 + 2) = v96 - 1;
        v77 = v96 > 2;
        v10 = v128;
        if (!v77)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v128;
LABEL_15:
    v3 = v127;
    if (v9 >= v127)
    {
      v8 = v125;
      goto LABEL_99;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  result = (char *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(char *result, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _OWORD *v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  char v26;
  _OWORD v27[2];
  uint64_t v28;
  char v29;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 48 * (_QWORD)a3 - 48;
LABEL_5:
    v9 = v6;
    v10 = v8;
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 80);
      v12 = *(_BYTE *)(v10 + 88);
      v13 = *(_QWORD *)(v10 + 32);
      v14 = (_OWORD *)(v10 + 48);
      v15 = *(_BYTE *)(v10 + 40);
      v16 = *(_OWORD *)(v10 + 64);
      v27[0] = *(_OWORD *)(v10 + 48);
      v27[1] = v16;
      v28 = v11;
      v29 = v12;
      v17 = *(_OWORD *)(v10 + 16);
      v24[0] = *(_OWORD *)v10;
      v24[1] = v17;
      v25 = v13;
      v26 = v15;
      result = (char *)specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v27, (uint64_t)v24);
      if ((result & 1) == 0)
      {
LABEL_4:
        ++v4;
        v8 += 48;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v19 = *(_OWORD *)(v10 + 48);
      v18 = *(_OWORD *)(v10 + 64);
      v20 = *(_OWORD *)(v10 + 16);
      v21 = *(_OWORD *)(v10 + 32);
      *v14 = *(_OWORD *)v10;
      *(_OWORD *)(v10 + 64) = v20;
      v22 = *(_QWORD *)(v10 + 80);
      v23 = *(_BYTE *)(v10 + 88);
      *(_OWORD *)v10 = v19;
      *(_OWORD *)(v10 + 16) = v18;
      *(_QWORD *)(v10 + 32) = v22;
      *(_BYTE *)(v10 + 40) = v23;
      v10 -= 48;
      ++v9;
      v14[2] = v21;
      if (v4 == v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v8 = type metadata accessor for CRAsset();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v7, v8);
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_DWORD *)(*(_QWORD *)(a4 + 48) + 4 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v43 = *(_QWORD *)(v12 - 8);
  v14.n128_f64[0] = MEMORY[0x1E0C80A78](v12, v13);
  v42 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a4;
  v17 = a4 + 56;
  v16 = *(_QWORD *)(a4 + 56);
  v18 = -1 << *(_BYTE *)(a4 + 32);
  v37 = a1;
  v38 = v18;
  v19 = -v18;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
LABEL_39:
    v33 = v37;
    v34 = ~v38;
    *v37 = v44;
    v33[1] = v17;
    v33[2] = v34;
    v33[3] = v22;
    v33[4] = v21;
    return;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v22 = 0;
  v23 = 0;
  v39 = a4 + 56;
  v40 = (unint64_t)(63 - v38) >> 6;
  v36 = v40 - 1;
  v41 = a3;
  v24 = v42;
  v25 = v43;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v26 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v27 = v26 | (v22 << 6);
  while (1)
  {
    v31 = *(_QWORD *)(v25 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v25 + 16))(v11, *(_QWORD *)(v44 + 48) + v31 * v27, v12, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v12) == 1)
    {
      v17 = v39;
      goto LABEL_38;
    }
    ++v23;
    v32 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v32(v24, v11, v12);
    v32(a2, v24, v12);
    if (v23 == v41)
    {
      v17 = v39;
      goto LABEL_39;
    }
    a2 += v31;
    v25 = v43;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    v17 = v39;
    if (v28 >= v40)
      goto LABEL_37;
    v29 = *(_QWORD *)(v39 + 8 * v28);
    if (!v29)
    {
      v30 = v22 + 2;
      ++v22;
      if (v28 + 1 >= v40)
        goto LABEL_37;
      v29 = *(_QWORD *)(v39 + 8 * v30);
      if (v29)
        goto LABEL_14;
      v22 = v28 + 1;
      if (v28 + 2 >= v40)
        goto LABEL_37;
      v29 = *(_QWORD *)(v39 + 8 * (v28 + 2));
      if (v29)
      {
        v28 += 2;
      }
      else
      {
        v22 = v28 + 2;
        if (v28 + 3 >= v40)
          goto LABEL_37;
        v29 = *(_QWORD *)(v39 + 8 * (v28 + 3));
        if (!v29)
        {
          v30 = v28 + 4;
          v22 = v28 + 3;
          if (v28 + 4 < v40)
          {
            v29 = *(_QWORD *)(v39 + 8 * v30);
            if (!v29)
            {
              while (1)
              {
                v28 = v30 + 1;
                if (__OFADD__(v30, 1))
                  goto LABEL_42;
                if (v28 >= v40)
                {
                  v22 = v36;
                  goto LABEL_37;
                }
                v29 = *(_QWORD *)(v39 + 8 * v28);
                ++v30;
                if (v29)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v28 = v30;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v25 + 56))(v11, 1, 1, v12, v14);
          v21 = 0;
LABEL_38:
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
          goto LABEL_39;
        }
        v28 += 3;
      }
    }
LABEL_21:
    v21 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v28 << 6);
    v22 = v28;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v7 = (_QWORD *)result;
  if (a4 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!a2)
      goto LABEL_26;
  }
  else
  {
    v8 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!a2)
      goto LABEL_26;
  }
  if (!a3)
  {
LABEL_27:
    *v7 = a4;
    v7[1] = v8;
    return a3;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!v8)
  {
LABEL_26:
    a3 = 0;
    goto LABEL_27;
  }
  if ((a4 & 0xC000000000000001) != 0)
  {
    v9 = __OFSUB__(v8--, 1);
    if (!v9)
    {
      v10 = 0;
      do
      {
        result = MEMORY[0x1DF0E4D64](v8, a4);
        *(_QWORD *)(a2 + 8 * v10) = result;
        if (a3 - 1 == v10)
          goto LABEL_27;
        if (!v8)
        {
          a3 = v10 + 1;
          goto LABEL_27;
        }
        ++v10;
        v9 = __OFSUB__(v8--, 1);
      }
      while (!v9);
    }
    __break(1u);
  }
  if (!__OFSUB__(v8, 1))
  {
    v11 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8 - 1 >= v11)
    {
LABEL_20:
      __break(1u);
    }
    else
    {
      v12 = 0;
      while (1)
      {
        *(_QWORD *)(a2 + 8 * v12) = *(_QWORD *)(a4 + 24 + 8 * v8);
        if (a3 - 1 == v12)
          break;
        if (v8 == 1)
        {
          v8 = 0;
          a3 = v12 + 1;
          goto LABEL_22;
        }
        swift_retain();
        v13 = v8 - 2;
        ++v12;
        --v8;
        if (v13 >= v11)
          goto LABEL_20;
      }
    }
    --v8;
LABEL_22:
    swift_retain();
    goto LABEL_27;
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v35 - v17;
  v42 = a4;
  v21 = *(_QWORD *)(a4 + 56);
  v20 = a4 + 56;
  v19 = v21;
  v40 = v20;
  v22 = -1 << *(_BYTE *)(v20 - 24);
  if (-v22 < 64)
    v23 = ~(-1 << -(char)v22);
  else
    v23 = -1;
  v24 = v23 & v19;
  if (!a2)
  {
    v25 = 0;
LABEL_37:
    v34 = v40;
    *a1 = v42;
    a1[1] = v34;
    a1[2] = ~v22;
    a1[3] = v25;
    a1[4] = v24;
    return;
  }
  if (!a3)
  {
    v25 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v37 = -1 << *(_BYTE *)(v20 - 24);
  v38 = a1;
  v25 = 0;
  v26 = 0;
  v39 = (unint64_t)(63 - v22) >> 6;
  v36 = v39 - 1;
  v41 = a3;
  if (!v24)
    goto LABEL_9;
LABEL_8:
  v27 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  v28 = v27 | (v25 << 6);
  while (1)
  {
    ++v26;
    v32 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v13, *(_QWORD *)(v42 + 48) + v32 * v28, v9, v16);
    v33 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v33(v18, v13, v9);
    v33(a2, v18, v9);
    if (v26 == v41)
      goto LABEL_36;
    a2 += v32;
    if (v24)
      goto LABEL_8;
LABEL_9:
    v29 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v29 >= v39)
      goto LABEL_32;
    v30 = *(_QWORD *)(v40 + 8 * v29);
    if (!v30)
      break;
LABEL_18:
    v24 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v29 << 6);
    v25 = v29;
  }
  v25 += 2;
  if (v29 + 1 >= v39)
  {
    v24 = 0;
    v25 = v29;
    goto LABEL_36;
  }
  v30 = *(_QWORD *)(v40 + 8 * v25);
  if (v30)
    goto LABEL_14;
  v31 = v29 + 2;
  if (v29 + 2 >= v39)
    goto LABEL_32;
  v30 = *(_QWORD *)(v40 + 8 * v31);
  if (v30)
    goto LABEL_17;
  v25 = v29 + 3;
  if (v29 + 3 >= v39)
  {
    v24 = 0;
    v25 = v29 + 2;
    goto LABEL_36;
  }
  v30 = *(_QWORD *)(v40 + 8 * v25);
  if (v30)
  {
LABEL_14:
    v29 = v25;
    goto LABEL_18;
  }
  v31 = v29 + 4;
  if (v29 + 4 >= v39)
  {
LABEL_32:
    v24 = 0;
LABEL_36:
    v22 = v37;
    a1 = v38;
    goto LABEL_37;
  }
  v30 = *(_QWORD *)(v40 + 8 * v31);
  if (v30)
  {
LABEL_17:
    v29 = v31;
    goto LABEL_18;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v39)
    {
      v24 = 0;
      v25 = v36;
      goto LABEL_36;
    }
    v30 = *(_QWORD *)(v40 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PKAttachmentView] and conformance [A], &demangling cache variable for type metadata for [PKAttachmentView], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKAttachmentView]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AnyCanvasElementView, (unint64_t *)&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [NSObject] and conformance [A], &demangling cache variable for type metadata for [NSObject], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSObject]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [ReflowElement] and conformance [A], &demangling cache variable for type metadata for [ReflowElement], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReflowElement]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ReflowElement();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [CHStrokeIdentifier] and conformance [A], &demangling cache variable for type metadata for [CHStrokeIdentifier], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CHStrokeIdentifier]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStrokeIdentifier);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [UIMenu] and conformance [A], &demangling cache variable for type metadata for [UIMenu], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIMenu]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PDFAnnotation] and conformance [A], &demangling cache variable for type metadata for [PDFAnnotation], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PDFAnnotation]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PKStroke] and conformance [A], &demangling cache variable for type metadata for [PKStroke], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(a5, a6, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_NSRange, ReflowWord));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCanvasElementView]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 160 * a1 + 32;
    v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 40 * a1 + 32);
    v6 = 40 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 48 * a1 + 32);
    v6 = 48 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (**v61)(void *);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  id v69;
  char v70;
  __int128 v71;
  id v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  id v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  char v85;
  void *v86;
  __int128 v87;
  id v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char **v98;
  id v99;
  Class v100;
  unint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  char **v112;
  uint64_t v113;
  char *v114;
  Class isa;
  NSDate v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int32x2_t v120;
  char v121;
  char v122;
  id v123;
  uint64_t v124;
  char *v125;
  char v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  CGFloat v129;
  CGFloat v130;
  CGFloat v131;
  CGFloat v132;
  CGFloat v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  double v137;
  double v138;
  double v139;
  double v140;
  __int128 v141;
  uint64_t v142;
  id v143;
  char v144;
  void *v145;
  void *v146;
  id v147;
  id v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  id v154;
  void *v155;
  id v156;
  char *v157;
  id v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char v163;
  id v164;
  void *v165;
  id v166;
  char v167;
  id v168;
  char v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  double v196;
  double v197;
  double v198;
  _OWORD v199[2];
  CGRect v200;
  CGRect v201;

  v192 = a3;
  v190 = a1;
  v191 = a2;
  v173 = type metadata accessor for CRKeyPath();
  v172 = *(_QWORD *)(v173 - 8);
  MEMORY[0x1E0C80A78](v173, v3);
  v171 = (char *)&v170 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v181 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  v182 = *(_QWORD *)(v183 - 8);
  MEMORY[0x1E0C80A78](v183, v8);
  v176 = (char *)&v170 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for Date();
  v186 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v10);
  v174 = (char *)&v170 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x1E0C80A78](v178, v12);
  v185 = (uint64_t)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v14, v15);
  v177 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v175 = (uint64_t)&v170 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v179 = (char *)&v170 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v184 = (uint64_t)&v170 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
  v187 = *(_QWORD *)(v26 - 8);
  v27 = *(_QWORD *)(v187 + 64);
  MEMORY[0x1E0C80A78](v26, v28);
  v188 = (uint64_t)&v170 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v189 = (uint64_t)&v170 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 64);
  MEMORY[0x1E0C80A78](v32, v35);
  v36 = (char *)&v170 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v170 - v39;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v170 - v43;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (char *)&v170 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v191, (uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v49, v44, v45);
    v50 = v190;
    if (v190 >> 62)
    {
      if (v190 >> 62 != 1)
      {
LABEL_8:
        (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
        goto LABEL_9;
      }
      v50 = v190 & 0x3FFFFFFFFFFFFFFFLL;
    }
    type metadata accessor for CanvasElementPDFAnnotation();
    v51 = swift_dynamicCastClass();
    if (v51)
    {
      v191 = v51;
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
      v53 = v189;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v189, 1, 1, v52);
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v40, v49, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v53, v188, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v40, (uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      v54 = *(unsigned __int8 *)(v187 + 80);
      v187 = v50;
      v55 = (v54 + 16) & ~v54;
      v56 = (v27 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
      v57 = (*(unsigned __int8 *)(v33 + 80) + v56 + 8) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      v170 = v57 + v34;
      v58 = swift_allocObject();
      v59 = ((v57 + v34) & 0xFFFFFFFFFFFFFFF8) + v58;
      outlined init with take of (key: Int, value: AnyCRValue)?(v188, v58 + v55, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      *(_QWORD *)(v58 + v56) = v187;
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v36, v58 + v57, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      *(_BYTE *)(v58 + v170) = 0;
      *(_QWORD *)(v59 + 8) = 0;
      *(_QWORD *)(v59 + 16) = 0;
      v60 = v190;
      v61 = (void (**)(void *))(v191
                                         + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      v62 = *(_QWORD *)(v191 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      *v61 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
      v61[1] = (void (*)(void *))v58;
      outlined copy of PaperDocument.PDFDocumentUse(v60);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v62);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v189, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
    }
    goto LABEL_8;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
LABEL_9:
  v63 = type metadata accessor for PDFAnnotationElement();
  v64 = v193 + *(int *)(v63 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  v65 = v195;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (_QWORD)v65 && v66 == *((_QWORD *)&v65 + 1))
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (_QWORD)v65 && v68 == *((_QWORD *)&v65 + 1))
  {
    swift_bridgeObjectRelease_n();
    v69 = v192;
    goto LABEL_18;
  }
  v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v69 = v192;
  if ((v70 & 1) == 0)
  {
    v191 = v64;
    v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    CRRegister.wrappedValue.getter();
    v78 = v195;
    v79 = objc_msgSend(v69, sel_widgetStringValue);
    if (v79)
    {
      v80 = v79;
      v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v83 = v82;

      if (*((_QWORD *)&v78 + 1))
      {
        if (v83)
        {
          if (v78 == __PAIR128__(v83, v81))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
          v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v162 & 1) != 0)
          {
LABEL_46:
            v190 = v77;
            CRRegister.wrappedValue.getter();
            v87 = v195;
            v88 = objc_msgSend(v69, sel_contents);
            if (v88)
            {
              v89 = v88;
              v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v92 = v91;

              if (*((_QWORD *)&v87 + 1))
              {
                v93 = v184;
                if (v92)
                {
                  if (v87 == __PAIR128__(v92, v90))
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_59;
                  }
                  v163 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v163 & 1) != 0)
                  {
LABEL_59:
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
                    CRRegister.wrappedValue.getter();
                    v95 = v195;
                    v96 = *MEMORY[0x1E0CD0DF0];
                    if (objc_msgSend(v69, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0DF0]))
                    {
                      _bridgeAnyObjectToAny(_:)();
                      swift_unknownObjectRelease();
                    }
                    else
                    {
                      memset(v199, 0, sizeof(v199));
                    }
                    v97 = (uint64_t)v179;
                    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v199, (uint64_t)&v195, &demangling cache variable for type metadata for Any?);
                    v98 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                    if (v197 == 0.0)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v195, &demangling cache variable for type metadata for Any?);
                    }
                    else if ((swift_dynamicCast() & 1) != 0)
                    {
                      v99 = v192;
                      if (v95 == (_QWORD)v194)
                      {
LABEL_69:
                        v101 = v193 + *(int *)(v63 + 32);
                        v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
                        CRRegister.wrappedValue.getter();
                        v103 = objc_msgSend(v99, sel_modificationDate);
                        v104 = v180;
                        v190 = v101;
                        v189 = v102;
                        if (v103)
                        {
                          v105 = v103;
                          static Date._unconditionallyBridgeFromObjectiveC(_:)();

                          v106 = 0;
                        }
                        else
                        {
                          v106 = 1;
                        }
                        v107 = v185;
                        v108 = v178;
                        v109 = v186;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v186 + 56))(v97, v106, 1, v104);
                        v110 = v107 + *(int *)(v108 + 48);
                        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v93, v107, &demangling cache variable for type metadata for Date?);
                        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v97, v110, &demangling cache variable for type metadata for Date?);
                        v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48);
                        if (v111(v107, 1, v104) == 1)
                        {
                          outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Date?);
                          outlined destroy of StocksKitCurrencyCache.Provider?(v93, &demangling cache variable for type metadata for Date?);
                          if (v111(v110, 1, v104) == 1)
                          {
                            outlined destroy of StocksKitCurrencyCache.Provider?(v107, &demangling cache variable for type metadata for Date?);
                            v112 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                            goto LABEL_82;
                          }
                        }
                        else
                        {
                          v113 = v175;
                          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v107, v175, &demangling cache variable for type metadata for Date?);
                          if (v111(v110, 1, v104) != 1)
                          {
                            v124 = v186;
                            v125 = v174;
                            (*(void (**)(char *, uint64_t, uint64_t))(v186 + 32))(v174, v110, v104);
                            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
                            v126 = dispatch thunk of static Equatable.== infix(_:_:)();
                            v127 = *(void (**)(char *, uint64_t))(v124 + 8);
                            v128 = v125;
                            v98 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                            v127(v128, v104);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Date?);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v184, &demangling cache variable for type metadata for Date?);
                            v127((char *)v113, v104);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v185, &demangling cache variable for type metadata for Date?);
                            v112 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                            if ((v126 & 1) != 0)
                              goto LABEL_82;
                            goto LABEL_78;
                          }
                          outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Date?);
                          outlined destroy of StocksKitCurrencyCache.Provider?(v93, &demangling cache variable for type metadata for Date?);
                          (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v113, v104);
                        }
                        outlined destroy of StocksKitCurrencyCache.Provider?(v107, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
                        v112 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
LABEL_78:
                        v114 = v177;
                        CRRegister.wrappedValue.getter();
                        if (v111((uint64_t)v114, 1, v104) == 1)
                        {
                          isa = 0;
                        }
                        else
                        {
                          v116.super.isa = Date._bridgeToObjectiveC()().super.isa;
                          v117 = v114;
                          isa = v116.super.isa;
                          (*(void (**)(char *, uint64_t))(v186 + 8))(v117, v104);
                        }
                        objc_msgSend(v192, sel_setModificationDate_, isa);

LABEL_82:
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
                        CRRegister.wrappedValue.getter();
                        v118 = v195;
                        v119 = PDFAnnotation.quadPoints.getter();
                        if (v118)
                        {
                          if (v119)
                          {
                            specialized static Array<A>.== infix(_:_:)(v118, v119, v120);
                            v122 = v121;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v123 = v192;
                            if ((v122 & 1) != 0)
                            {
LABEL_92:
                              CRRegister.wrappedValue.getter();
                              v129 = *((double *)&v195 + 1);
                              v130 = v196;
                              v131 = v197;
                              v132 = v198;
                              swift_bridgeObjectRelease();
                              objc_msgSend(v123, sel_bounds);
                              v201.origin.x = v133;
                              v201.origin.y = v134;
                              v201.size.width = v135;
                              v201.size.height = v136;
                              v200.origin.x = v129;
                              v200.origin.y = v130;
                              v200.size.width = v131;
                              v200.size.height = v132;
                              if (!CGRectEqualToRect(v200, v201))
                              {
                                CRRegister.wrappedValue.getter();
                                v137 = *((double *)&v195 + 1);
                                v138 = v196;
                                v139 = v197;
                                v140 = v198;
                                swift_bridgeObjectRelease();
                                objc_msgSend(v123, sel_setBounds_, v137, v138, v139, v140);
                              }
                              CRRegister.wrappedValue.getter();
                              v141 = v195;
                              v142 = *MEMORY[0x1E0CD0E08];
                              if (!objc_msgSend(v123, v112[418], *MEMORY[0x1E0CD0E08]))
                              {
                                __break(1u);
                                return;
                              }
                              _bridgeAnyObjectToAny(_:)();
                              swift_unknownObjectRelease();
                              outlined init with take of Any(v199, &v195);
                              swift_dynamicCast();
                              if (v141 == v194)
                              {
                                swift_bridgeObjectRelease_n();
                                v143 = v192;
                              }
                              else
                              {
                                v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v143 = v192;
                                if ((v144 & 1) == 0)
                                {
                                  CRRegister.wrappedValue.getter();
                                  v145 = (void *)MEMORY[0x1DF0E41AC](v195, *((_QWORD *)&v195 + 1));
                                  swift_bridgeObjectRelease();
                                  objc_msgSend(v143, v98[425], v145, v142);

                                }
                              }
                              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
                              CRRegister.wrappedValue.getter();
                              v146 = (void *)v195;
                              if ((_QWORD)v195)
                              {
                                v147 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, (_QWORD)v195);

                                v148 = objc_msgSend(v143, sel_color);
                                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                                v149 = static NSObject.== infix(_:_:)();

                                v150 = v183;
                                v151 = v182;
                                if ((v149 & 1) == 0)
                                  objc_msgSend(v143, sel_setColor_, v147);

                              }
                              else
                              {
                                v150 = v183;
                                v151 = v182;
                              }
                              v152 = (uint64_t)v181;
                              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
                              CRRegister.wrappedValue.getter();
                              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v152, 1, v150) == 1)
                              {
                                outlined destroy of StocksKitCurrencyCache.Provider?(v152, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
                                return;
                              }
                              v153 = v176;
                              (*(void (**)(char *, uint64_t, uint64_t))(v151 + 32))(v176, v152, v150);
                              v154 = objc_msgSend(v143, sel_page);
                              if (v154)
                              {
                                v155 = v154;
                                type metadata accessor for PaperKitPDFPage(0);
                                v156 = (id)swift_dynamicCastClass();
                                if (v156)
                                {
                                  v157 = v171;
                                  WeakRef.id.getter();
                                  v158 = objc_msgSend(v156, sel_annotations);
                                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                                  v159 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                                  MEMORY[0x1E0C80A78](v160, v161);
                                  *(&v170 - 2) = (uint64_t)v157;
                                  v156 = specialized Sequence.first(where:)((uint64_t (*)(id *))closure #1 in PaperKitPDFPage.annotationFor(id:)partial apply, (uint64_t)(&v170 - 4), v159);

                                  swift_bridgeObjectRelease();
                                  (*(void (**)(char *, uint64_t))(v172 + 8))(v157, v173);
                                }
                                else
                                {

                                }
                              }
                              else
                              {
                                v156 = 0;
                              }
                              v164 = objc_msgSend(v143, sel_popup);
                              if (v164)
                              {
                                v165 = v164;
                                if (!v156)
                                {

LABEL_123:
                                  objc_msgSend(v143, sel_setPopup_, v156);
LABEL_124:

                                  goto LABEL_125;
                                }
                                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                                v156 = v156;
                                v166 = v165;
                                v167 = static NSObject.== infix(_:_:)();

                                if ((v167 & 1) != 0)
                                  goto LABEL_124;
                              }
                              else if (!v156)
                              {
LABEL_125:
                                (*(void (**)(char *, uint64_t))(v151 + 8))(v153, v150);
                                return;
                              }
                              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                              v156 = v156;
                              v168 = v143;
                              v169 = static NSObject.== infix(_:_:)();

                              if ((v169 & 1) != 0)
                                goto LABEL_124;
                              goto LABEL_123;
                            }
LABEL_91:
                            CRRegister.wrappedValue.getter();
                            PDFAnnotation.quadPoints.setter(v195);
                            goto LABEL_92;
                          }
                        }
                        else if (!v119)
                        {
                          v123 = v192;
                          goto LABEL_92;
                        }
                        swift_bridgeObjectRelease();
                        v123 = v192;
                        goto LABEL_91;
                      }
LABEL_68:
                      CRRegister.wrappedValue.getter();
                      v100 = Int._bridgeToObjectiveC()().super.super.isa;
                      objc_msgSend(v99, sel_setValue_forAnnotationKey_, v100, v96);

                      goto LABEL_69;
                    }
                    v99 = v192;
                    goto LABEL_68;
                  }
LABEL_55:
                  CRRegister.wrappedValue.getter();
                  if (*((_QWORD *)&v195 + 1))
                  {
                    v94 = (void *)MEMORY[0x1DF0E41AC](v195, *((_QWORD *)&v195 + 1));
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v94 = 0;
                  }
                  objc_msgSend(v69, sel_setContents_, v94);

                  goto LABEL_59;
                }
              }
              else
              {
                v93 = v184;
                if (!v92)
                  goto LABEL_59;
              }
            }
            else
            {
              v93 = v184;
              if (!*((_QWORD *)&v87 + 1))
                goto LABEL_59;
            }
            swift_bridgeObjectRelease();
            goto LABEL_55;
          }
LABEL_42:
          CRRegister.wrappedValue.getter();
          if (*((_QWORD *)&v195 + 1))
          {
            v86 = (void *)MEMORY[0x1DF0E41AC](v195, *((_QWORD *)&v195 + 1));
            swift_bridgeObjectRelease();
          }
          else
          {
            v86 = 0;
          }
          objc_msgSend(v69, sel_setWidgetStringValue_, v86);

          goto LABEL_46;
        }
      }
      else if (!v83)
      {
        goto LABEL_46;
      }
    }
    else if (!*((_QWORD *)&v78 + 1))
    {
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
LABEL_18:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  v71 = v195;
  v72 = objc_msgSend(v69, sel_widgetStringValue);
  if (!v72)
  {
    if (!*((_QWORD *)&v71 + 1))
      return;
    goto LABEL_31;
  }
  v73 = v72;
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v76 = v75;

  if (!*((_QWORD *)&v71 + 1))
  {
    if (!v76)
      return;
    goto LABEL_31;
  }
  if (!v76)
  {
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_32:
    CRRegister.wrappedValue.getter();
    if (*((_QWORD *)&v195 + 1))
    {
      v84 = (void *)MEMORY[0x1DF0E41AC](v195, *((_QWORD *)&v195 + 1));
      swift_bridgeObjectRelease();
    }
    else
    {
      v84 = 0;
    }
    objc_msgSend(v69, sel_setWidgetStringValue_, v84);

    return;
  }
  if (v71 == __PAIR128__(v76, v74))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v85 & 1) == 0)
    goto LABEL_32;
}

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t (*v18)(uint64_t, uint64_t);
  id v19;
  char *v20;
  uint64_t v21;
  int64_t v22;

  v21 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (v3)
  {
    v6 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    v7 = v6 | (v4 << 6);
LABEL_23:
    v11 = *(void **)(*(_QWORD *)(a1 + 56) + 16 * v7);
    type metadata accessor for AnyCanvas();
    v12 = (_QWORD *)swift_dynamicCastClass();
    if (v12)
    {
      v13 = v12;
      v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x2F8))();
      v16 = v15;
      ObjectType = swift_getObjectType();
      v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 144);
      v19 = v11;
      v20 = (char *)v18(ObjectType, v16);

      if (v20)
      {
        v5 = *(_QWORD *)&v20[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
        swift_retain();

        swift_retain();
        FormAnalytics.merge(_:for:)(v5, v13);

        swift_release();
        swift_release();
      }
      else
      {

      }
    }
  }
  v8 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v8 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v8);
  ++v4;
  if (v9)
    goto LABEL_22;
  v4 = v8 + 1;
  if (v8 + 1 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v4);
  if (v9)
    goto LABEL_22;
  v4 = v8 + 2;
  if (v8 + 2 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v4);
  if (v9)
    goto LABEL_22;
  v4 = v8 + 3;
  if (v8 + 3 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v4);
  if (v9)
  {
LABEL_22:
    v3 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v4 << 6);
    goto LABEL_23;
  }
  v10 = v8 + 4;
  if (v10 >= v22)
  {
LABEL_26:
    swift_release();
    return;
  }
  v9 = *(_QWORD *)(v21 + 8 * v10);
  if (v9)
  {
    v4 = v10;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v4 >= v22)
      goto LABEL_26;
    v9 = *(_QWORD *)(v21 + 8 * v4);
    ++v10;
    if (v9)
      goto LABEL_22;
  }
LABEL_28:
  __break(1u);
}

uint64_t specialized PaperKitPDFDocument.updatePDFPage<A>(in:use:options:page:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[10];
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;

  v54 = a3;
  v53 = a2;
  v58 = a1;
  v57 = type metadata accessor for CRKeyPath();
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57, v5);
  v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a4;
  v29 = a4 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v29, (uint64_t)v18, &demangling cache variable for type metadata for PageId?);
  v30 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v18, 1, v30))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, 1, 1, v23);
LABEL_4:
    v32 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
    v33 = v22;
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, v32);
  }
  v31 = v58;
  v52 = v28;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v18[*(int *)(v30 + 20)], (uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    goto LABEL_4;
  v35 = v24;
  v36 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v37 = v27;
  v36(v27, v22, v23);
  v38 = v10;
  WeakTagged_3.tagged3.getter();
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v10, 1, v39) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
    v41 = v31;
  }
  else
  {
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v41 = v31;
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    v42 = type metadata accessor for PaperDocumentPage();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v14, 1, v42) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PaperDocumentPage?);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.getter();
      v43 = v59[0];
      outlined destroy of PKStrokeProperties((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
      if ((v43 & 0x20) != 0)
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v23);
    }
  }
  v58 = v35;
  v44 = type metadata accessor for PaperDocument(0);
  v45 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  WeakTagged_3.subscript.getter();
  v46 = v62;
  if (!v62)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v37, v23);
    v32 = &demangling cache variable for type metadata for PaperPage?;
    v33 = (char *)v61;
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, v32);
  }
  v47 = v63;
  __swift_project_boxed_opaque_existential_1(v61, v62);
  v48 = v37;
  v49 = v41;
  v50 = v55;
  MEMORY[0x1DF0E3078](v23);
  v60 = v53;
  outlined init with take of (key: Int, value: AnyCRValue)?(v54, (uint64_t)v59, &demangling cache variable for type metadata for PaperRenderableOptions?);
  (*(void (**)(uint64_t, char *, uint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 128))(v52, v50, &v60, v49, v59, v44, v45, v46, v47);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v50, v57);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v23);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
}

uint64_t specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 264) = a4;
  *(_QWORD *)(v5 + 272) = v4;
  *(_QWORD *)(v5 + 248) = a1;
  *(_QWORD *)(v5 + 256) = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  *(_QWORD *)(v5 + 280) = swift_task_alloc();
  type metadata accessor for PaperDocument(0);
  *(_QWORD *)(v5 + 288) = swift_task_alloc();
  v7 = type metadata accessor for UTType();
  *(_QWORD *)(v5 + 296) = v7;
  *(_QWORD *)(v5 + 304) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 312) = swift_task_alloc();
  *(_QWORD *)(v5 + 320) = swift_task_alloc();
  *(_BYTE *)(v5 + 91) = *a3;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 328) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 336) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 344) = v8;
  return swift_task_switch();
}

uint64_t specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  v4 = *(_BYTE **)(v0 + 272);
  v39 = *(void **)(v0 + 264);
  v37 = *(_QWORD *)(v0 + 312);
  v38 = *(void **)(v0 + 248);
  v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode] = 3;
  v5 = v4;
  UUID.init()();
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] = 1;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying] = 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState;
  *(_QWORD *)(v0 + 352) = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState;
  v7 = &v5[v6];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(_QWORD *)(v0 + 360) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v0 + 368) = v9;
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  *(_QWORD *)(v0 + 376) = v10;
  v10(v7, 1, 1, v8);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate] = 0;
  v11 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v5[v11] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy] = 0;
  v13 = (void **)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor] = 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = &outlined read-only object #0 of PaperDocumentView.init(context:document:editingMode:toolPicker:);
  v14 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(_QWORD *)&v5[v14] = PassthroughSubject.init()();
  v15 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_livePassThroughSubject;
  swift_allocObject();
  *(_QWORD *)&v5[v15] = PassthroughSubject.init()();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument] = 0;
  v16 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocAsset];
  v17 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocTask] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask] = 0;
  static ContinuousClock.Instant.now.getter();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isCurrentlyLiveEditing] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveEditingContinuations] = v12;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v18 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics;
  type metadata accessor for FormAnalytics();
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = 791357252;
  *(_WORD *)(v19 + 20) = 0;
  *(_QWORD *)(v19 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v12);
  *(_QWORD *)&v5[v18] = v19;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex] = 0;
  v20 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1DDF35B30;
  *(_QWORD *)(v21 + 32) = 0xD000000000000018;
  *(_QWORD *)(v21 + 40) = 0x80000001DDF58F40;
  static UTType.pdf.getter();
  v22 = UTType.identifier.getter();
  v24 = v23;
  v25 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v25(v1, v3);
  *(_QWORD *)(v21 + 48) = v22;
  *(_QWORD *)(v21 + 56) = v24;
  static UTType.image.getter();
  v26 = UTType.identifier.getter();
  v28 = v27;
  v25(v37, v3);
  *(_QWORD *)(v21 + 64) = v26;
  *(_QWORD *)(v21 + 72) = v28;
  *(_QWORD *)&v5[v20] = v21;
  v29 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
  *v29 = 0;
  v29[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate] = 0;
  swift_unknownObjectWeakInit();
  v30 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v30 = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  *((_QWORD *)v30 + 4) = 0;
  v31 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument];
  *v31 = 0;
  v31[1] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context] = v38;
  swift_beginAccess();
  v32 = *v13;
  *v13 = v39;
  v33 = v38;
  v34 = v39;

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                          + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:));
  v35 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v35;
  *v35 = v0;
  v35[1] = specialized PaperDocumentView.init(context:document:editingMode:toolPicker:);
  return v40(0x8000000000000000, *(_QWORD *)(v0 + 256), v0 + 16);
}

uint64_t specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, type metadata accessor for PaperDocument);
  return swift_task_switch();
}

void specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  id v11;
  objc_class *v12;
  id v13;
  char *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  char *v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  id v26;
  id *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  char *v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char v47;
  void *v48;
  _BYTE *v49;
  id v50;
  char *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  NSObject *v62;
  NSObject *v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  os_log_type_t v70;
  uint8_t *v71;
  void *v72;
  uint64_t v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 v85;
  id v86;
  uint64_t v87;
  char *v88;
  unsigned __int8 v89;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  v7 = *(char **)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 256);
  swift_release();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument] = v1;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v9(&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel], v8, v4);
  v9((char *)v6, v8, v4);
  v3(v6, 0, 1, v4);
  swift_beginAccess();
  outlined assign with take of Date?(v6, (uint64_t)&v7[v5], (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();

  v10 = type metadata accessor for PaperDocumentView();
  *(_QWORD *)(v0 + 216) = v7;
  *(_QWORD *)(v0 + 224) = v10;
  v11 = objc_msgSendSuper2((objc_super *)(v0 + 216), sel_initWithFrame_, 0.0, 0.0, 100.0, 100.0);
  v12 = (objc_class *)type metadata accessor for PaperDocumentDelegate();
  v13 = objc_allocWithZone(v12);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(v0 + 232) = v13;
  *(_QWORD *)(v0 + 240) = v12;
  v14 = (char *)v11;
  v15 = objc_msgSendSuper2((objc_super *)(v0 + 232), sel_init);
  v16 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  objc_msgSend(*(id *)&v14[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_setDelegate_, v15);
  v17 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate];
  *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate] = v15;
  v18 = v15;

  v19 = (void *)objc_opt_self();
  v20 = v14;
  v21 = objc_msgSend(v19, sel_whiteColor);
  objc_msgSend(v20, sel_setBackgroundColor_, v21);

  objc_msgSend(v20, sel_bounds);
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD0DD8]), sel_initWithFrame_, v22, v23, v24, v25);
  v27 = (id *)&v20[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  v28 = *v27;
  *v27 = v26;

  if (!*v27)
  {
    __break(1u);
    goto LABEL_40;
  }
  objc_msgSend(*v27, sel_setDelegate_, v18);
  if (!*v27)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  objc_msgSend(*v27, sel_setAllowsUndo_, 0);
  if (!*v27)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  objc_msgSend(*v27, sel_setAllowsMarkupAnnotationEditing_, 1);
  if (!*v27)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v87 = v16;
  v88 = v14;
  v29 = v18;
  objc_msgSend(*v27, sel_setTextSelectionEnabled_, 1);
  v86 = (id)objc_opt_self();
  v30 = objc_msgSend(v86, sel_defaultCenter);
  v31 = *v27;
  if (!*v27)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v32 = v30;
  v33 = *MEMORY[0x1E0CD0EB8];
  v34 = v20;
  v35 = objc_msgSend(v31, sel_documentScrollView);
  objc_msgSend(v32, sel_addObserver_selector_name_object_, v34, sel_pageDidScroll_, v33, v35);

  v36 = *v27;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v36, "setFormFillingUpdatesAnnotationOnEveryTextChange:", 1);

  if (!*v27)
    goto LABEL_44;
  v37 = objc_msgSend(*v27, sel_documentScrollView);
  if (!v37)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v38 = v37;
  v39 = v18;
  v40 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TiledDocumentView()), sel_initInScrollView_, v37);

  v41 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  v42 = *(void **)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
  *(_QWORD *)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView] = v40;

  v43 = *(void **)&v34[v41];
  if (!v43)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v43, sel_setRulerHostingDelegate_, *(_QWORD *)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate]);
  v44 = *(_QWORD *)&v34[v41];
  if (!v44)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v45 = *(_BYTE **)(v44 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
  v46 = &v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity];
  swift_beginAccess();
  v47 = *v46;
  v45[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = *v46;
  v48 = *(void **)&v45[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
  if (v48)
  {
    v49 = v45;
    v50 = v48;
    v51 = ToolPickerController.textToolListViewController.getter();
    v51[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v47;
    TextToolListViewController.updateUI()();

  }
  v52 = *(void **)&v34[v41];
  if (!v52)
    goto LABEL_48;
  objc_msgSend(v52, sel_setInsertSpaceEnabled_, 0);
  v53 = *(void **)&v34[v41];
  if (!v53)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  objc_msgSend(v53, sel_setSupportsCopyAsText_, 1);
  v54 = *(void **)&v34[v41];
  if (!v54)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  objc_msgSend(v54, sel_setDelegate_, v29);
  if (!*v27)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  objc_msgSend(*v27, sel_setPageOverlayViewProvider_, v34);
  if (!*v27)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  objc_msgSend(*v27, sel_setDocument_, *(_QWORD *)&v88[v87]);
  if (!*v27)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v55 = objc_msgSend(*v27, sel_documentView);
  if (v55)
  {
    v56 = v55;
    objc_msgSend(v55, sel_resignFirstResponder);

  }
  v57 = *v27;
  if (!*v27)
    goto LABEL_54;
  v58 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v59 = v57;
  v60 = objc_msgSend(v58, sel_initWithWhite_alpha_, 0.9, 1.0);
  objc_msgSend(v59, sel_setBackgroundColor_, v60);

  if (!*v27)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  objc_msgSend(v34, sel_addSubview_);
  v61 = *(void **)&v34[v41];
  if (!v61)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  objc_msgSend(v61, sel_setContentSnapshottingView_, v34);
  if (!*v27)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v62 = objc_msgSend(*v27, sel_documentView);
  if (v62)
  {
    v63 = v62;
    v64 = *(void **)&v34[v41];
    if (!v64)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v65 = objc_msgSend(v64, sel_superview);
    if (v65)
    {
      v66 = *(void **)&v34[v41];
      if (!v66)
      {
LABEL_60:
        __break(1u);
        return;
      }
      v67 = v65;
      v68 = v66;
      objc_msgSend(v67, sel_insertSubview_aboveSubview_, v68, v63);

    }
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)logger);
    v63 = Logger.logObject.getter();
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v71 = 0;
      _os_log_impl(&dword_1DDB0F000, v63, v70, "Cannot edit pdf without a document view.", v71, 2u);
      MEMORY[0x1DF0E6558](v71, -1, -1);
    }
  }

  v72 = *(void **)&v34[v41];
  if (!v72)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v73 = *(_QWORD *)(v0 + 264);
  objc_msgSend(v72, sel_setCanvasViewZOrderPolicy_, 1);
  v74 = objc_msgSend(v86, sel_defaultCenter);
  objc_msgSend(v74, sel_addObserver_selector_name_object_, v34, sel_pdfSelectionChanged_, *MEMORY[0x1E0CD0EE0], *v27);

  v75 = objc_msgSend(v86, sel_defaultCenter);
  v76 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001BLL, 0x80000001DDF59040);
  objc_msgSend(v75, sel_addObserver_selector_name_object_, v34, sel_annotationsChanged_, v76, *v27);

  v77 = objc_msgSend(v86, sel_defaultCenter);
  objc_msgSend(v77, sel_addObserver_selector_name_object_, v34, sel_annotationPropertiesChanged_, *MEMORY[0x1E0CD0E18], *v27);

  if (v73)
  {
    v78 = *(id *)(v0 + 264);
    objc_msgSend(v78, sel_addObserver_, v34);
    v79 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v78, sel_addObserver_, v79);

    PaperDocumentView.updateTiledViewInk(for:)(v78);
    PaperDocumentView.updateToolPicker()();

  }
  v80 = *(_QWORD *)(v0 + 360);
  v81 = *(_QWORD *)(v0 + 368);
  v82 = *(_BYTE *)(v0 + 91);
  v83 = *(_QWORD *)(v0 + 256);

  v84 = (unsigned __int8 *)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
  swift_beginAccess();
  v85 = *v84;
  *v84 = v82;
  v89 = v85;
  PaperDocumentView.editingMode.didset(&v89);

  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(char *))(v0 + 8))(v34);
}

uint64_t partial apply for closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(a1, *(double *)(v1 + 16));
}

uint64_t type metadata accessor for PaperDocumentView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PaperDocumentView;
  if (!type metadata singleton initialization cache for PaperDocumentView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for closure #1 in PaperDocumentView.canvas(for:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in PaperDocumentView.convert(_:to:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)()
{
  return closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized PaperDocumentView.PaperDocumentViewProxy._toolPicker(_:didChange:)(void *a1)
{
  char *Strong;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  char *v19;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  v3 = *(void **)&Strong[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
  v4 = v3;

  if (v3)
  {
    v19 = (char *)*(id *)&v4[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController];

    if (a1)
    {
      v5 = &v19[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
      if (MEMORY[0x1DF0E666C](&v19[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
      {
        v6 = *((_QWORD *)v5 + 1);
        ObjectType = swift_getObjectType();
        v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
        v9 = a1;
        v10 = (_QWORD *)v8(ObjectType, v6);
        v11 = swift_unknownObjectRelease();
        if (v10)
        {
          v12 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x320);
          v13 = (void *)((uint64_t (*)(uint64_t))v12)(v11);
          if (v13)
          {
            v14 = v13;
            v15 = objc_msgSend(v13, sel_selectionInteraction);

            LOBYTE(v14) = objc_msgSend(v15, sel_currentSelectionHasStrokes);
            if ((v14 & 1) != 0)
            {
              v16 = (void *)v12();
              objc_msgSend(v16, sel_setSelectedStrokesColor_, v9);

            }
          }

        }
      }
      else
      {
        v18 = a1;
      }
      CanvasElementController.updateToolPickerContextualEditingView()();

      v17 = a1;
    }
    else
    {
      v17 = v19;
    }

  }
  else
  {
    __break(1u);
  }
}

void specialized PaperDocumentView.init(coder:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for UTType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v33 - v9;
  v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode] = 3;
  UUID.init()();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] = 1;
  v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v11 = &v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState];
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate] = 0;
  v13 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap;
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[v13] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = &outlined read-only object #0 of PaperDocumentView.init(coder:);
  v15 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(_QWORD *)&v1[v15] = PassthroughSubject.init()();
  v16 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_livePassThroughSubject;
  swift_allocObject();
  *(_QWORD *)&v1[v16] = PassthroughSubject.init()();
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument] = 0;
  v17 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocAsset];
  v18 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocTask] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask] = 0;
  static ContinuousClock.Instant.now.getter();
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isCurrentlyLiveEditing] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveEditingContinuations] = v14;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v19 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics;
  type metadata accessor for FormAnalytics();
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 791357252;
  *(_WORD *)(v20 + 20) = 0;
  *(_QWORD *)(v20 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *(_QWORD *)&v1[v19] = v20;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex] = 0;
  v21 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1DDF35B30;
  *(_QWORD *)(v22 + 32) = 0xD000000000000018;
  *(_QWORD *)(v22 + 40) = 0x80000001DDF58F40;
  static UTType.pdf.getter();
  v23 = UTType.identifier.getter();
  v25 = v24;
  v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v10, v2);
  *(_QWORD *)(v22 + 48) = v23;
  *(_QWORD *)(v22 + 56) = v25;
  static UTType.image.getter();
  v27 = UTType.identifier.getter();
  v29 = v28;
  v26(v6, v2);
  *(_QWORD *)(v22 + 64) = v27;
  *(_QWORD *)(v22 + 72) = v29;
  *(_QWORD *)&v1[v21] = v22;
  v30 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
  *v30 = 0;
  v30[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate] = 0;
  swift_unknownObjectWeakInit();
  v31 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v31 = 0u;
  *((_OWORD *)v31 + 1) = 0u;
  *((_QWORD *)v31 + 4) = 0;
  v32 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument];
  *v32 = 0;
  v32[1] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PaperDocumentView.pdfView(_:willDisplayOverlayView:for:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t ObjectType;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v16);
  if (result)
  {
    v18 = *(_QWORD *)(v16 + 8);
    type metadata accessor for PaperKitPDFPage(0);
    v19 = swift_dynamicCastClass();
    if (v19)
    {
      v20 = v19;
      v39 = v1;
      v40 = v15;
      v21 = v19 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v21, (uint64_t)v6, &demangling cache variable for type metadata for PageId?);
      v22 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v6, 1, v22))
      {
        v23 = a1;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PageId?);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
LABEL_6:

        swift_unknownObjectRelease();
        return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      }
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v6[*(int *)(v22 + 20)], (uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v24 = a1;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PageId?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
        goto LABEL_6;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v40, v10, v11);
      v25 = (uint64_t *)(v39 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      v26 = *v25;
      if (*(_QWORD *)(v26 + 16))
      {
        v27 = v24;
        swift_bridgeObjectRetain();
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
        if ((v29 & 1) != 0)
        {
          v30 = *(_QWORD *)(v26 + 56) + 16 * v28;
          v31 = *(_QWORD *)(v30 + 8);
          v32 = *(id *)v30;

          swift_bridgeObjectRelease();
          ObjectType = swift_getObjectType();
          v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(ObjectType, v31);
          if (v34)
          {
            v35 = (void *)v34;
            v36 = swift_getObjectType();
            v37 = v40;
            (*(void (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v18 + 16))(v39, v35, v40, v36, v18);

            swift_unknownObjectRelease();
            return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v37, v11);
          }
          (*(void (**)(char *, uint64_t))(v12 + 8))(v40, v11);

          return swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v12 + 8))(v40, v11);

    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, void *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  __int128 v17;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    while ((void *)v2[v6 + 4] != a2)
    {
      ++v7;
      v6 += 2;
      if (v3 == v7)
        return;
    }
    v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_10;
    }
    while (v8 != v3)
    {
      if (v8 >= v3)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return;
      }
      v9 = (void *)v2[v6 + 6];
      if (v9 != a2)
      {
        if (v8 != v7)
        {
          if (v7 >= v3)
            goto LABEL_24;
          v10 = v2[v6 + 7];
          v17 = *(_OWORD *)&v2[2 * v7 + 4];
          v11 = (id)v17;
          v12 = v9;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          v13 = &v2[2 * v7];
          v14 = (void *)v13[4];
          v13[4] = v12;
          v13[5] = v10;

          if (v8 >= v2[2])
            goto LABEL_25;
          v15 = (void *)v2[v6 + 6];
          *(_OWORD *)&v2[v6 + 6] = v17;

          *(_QWORD *)a1 = v2;
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_23;
        v3 = v2[2];
      }
LABEL_10:
      ++v8;
      v6 += 2;
    }
  }
}

void specialized PaperDocumentView.pdfView(_:willEndDisplayingOverlayView:for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  id v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  id v46;
  void *v47;
  uint64_t ObjectType;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    v18 = v17;
    v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    swift_beginAccess();
    v20 = *v19;
    if (*(_QWORD *)(*v19 + 16))
    {
      v21 = a1;
      swift_bridgeObjectRetain();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
      if ((v23 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        return;
      }
      v24 = *(_QWORD *)(v20 + 56) + 16 * v22;
      v25 = *(void **)v24;
      v55 = *(_QWORD *)(v24 + 8);
      v56 = v25;

      swift_bridgeObjectRelease();
      v26 = v18 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v26, (uint64_t)v7, &demangling cache variable for type metadata for PageId?);
      v27 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v7, 1, v27))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PageId?);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_8:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        goto LABEL_9;
      }
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v7[*(int *)(v27 + 20)], (uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PageId?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        goto LABEL_8;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
      ObjectType = swift_getObjectType();
      v49 = (*(uint64_t (**)(uint64_t))(v55 + 8))(ObjectType);
      if (v49)
      {
        v50 = (void *)v49;
        v51 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
        swift_beginAccess();
        if (!MEMORY[0x1DF0E666C](v51))
        {
          (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);

LABEL_9:
          type metadata accessor for AnyCanvas();
          v28 = v56;
          v29 = (_QWORD *)swift_dynamicCastClass();
          if (v29)
          {
            v30 = v29;
            v54 = v21;
            v31 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v29) + 0x2F8))();
            v33 = v32;
            v34 = swift_getObjectType();
            v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 144);
            v36 = v28;
            v37 = (char *)v35(v34, v33);

            if (v37)
            {
              v38 = *(_QWORD *)&v37[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
              swift_retain();

              swift_retain();
              FormAnalytics.merge(_:for:)(v38, v30);

              swift_release();
              swift_release();
            }
            else
            {

            }
            v21 = v54;
            v28 = v56;
          }
          v39 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
          if (v39)
          {
            v40 = (uint64_t)v39 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments;
            swift_beginAccess();
            v41 = v28;
            v42 = v39;
            specialized MutableCollection._halfStablePartition(isSuffixElement:)(v40, v41);
            v44 = v43;

            v45 = *(_QWORD *)(*(_QWORD *)v40 + 16);
            if (v45 >= v44)
            {
              specialized Array.replaceSubrange<A>(_:with:)(v44, v45);
              swift_endAccess();

              objc_msgSend(v41, sel_removeFromSuperview);
              swift_beginAccess();
              v46 = v21;
              v47 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v18);
              swift_endAccess();

              return;
            }
            __break(1u);
          }
          __break(1u);
          return;
        }
        v52 = *(_QWORD *)(v51 + 8);
        v53 = swift_getObjectType();
        (*(void (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v52 + 24))(v2, v50, v16, v53, v52);

        swift_unknownObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      goto LABEL_9;
    }
  }
}

uint64_t sub_1DDE0A8C8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(a1, v4, v5, v7, v6);
}

void specialized PaperDocumentView.calculateDocument.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void *v14;
  _QWORD *v15;
  void *v16;

  v3 = v2;
  v6 = (_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v7 = PaperDocumentView.currentPageCanvas.getter();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v7)
  {
    v9 = v7;
    v10 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x2F8))();
    v12 = v11;

    ObjectType = swift_getObjectType();
    v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);

    if (v14)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    }
  }
  v15 = PaperDocumentView.currentPageCanvas.getter();
  if (v15)
  {
    v16 = v15;
    (*(void (**)(void))((*v8 & *v15) + 0x750))();

  }
}

uint64_t sub_1DDE0AB5C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode, a2);
}

id sub_1DDE0AB6C@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView, a2);
}

uint64_t sub_1DDE0AB7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1DDE0ABD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_23Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI, a2);
}

uint64_t sub_1DDE0ABE4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, a2);
}

uint64_t sub_1DDE0ABF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(uint64_t))PaperDocumentView.pageOverlayViewProvider.didset);
}

_QWORD *sub_1DDE0AC18(_QWORD *result, _QWORD *a2)
{
  void *v2;

  v2 = *(void **)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
    return objc_msgSend(v2, sel_setContentSnapshottingView_, *result);
  __break(1u);
  return result;
}

id sub_1DDE0AC44@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  if (*(_BYTE *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
    result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly);
  else
    result = 0;
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1DDE0ACA0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying, a2);
}

uint64_t sub_1DDE0ACAC(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying);
}

uint64_t sub_1DDE0ACB8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate, a2);
}

uint64_t sub_1DDE0ACC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate);
}

double sub_1DDE0ACD0@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double *v3;
  double result;

  v3 = (double *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity);
  swift_beginAccess();
  result = *v3;
  *a2 = *(_QWORD *)v3;
  return result;
}

uint64_t sub_1DDE0AD20(double *a1)
{
  return PaperDocumentView.vellumOpacity.setter(*a1);
}

uint64_t sub_1DDE0AD44@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity, a2);
}

uint64_t sub_1DDE0AD50(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity, (uint64_t (*)(uint64_t))PaperDocumentView.canEditVellumOpacity.didset);
}

_QWORD *sub_1DDE0AD64@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*result + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
    *a2 = *(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
                   + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden);
  else
    __break(1u);
  return result;
}

_BYTE *sub_1DDE0ADA4(_BYTE *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
    *(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
             + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden) = *result;
  else
    __break(1u);
  return result;
}

id sub_1DDE0ADE4@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker, a2);
}

uint64_t sub_1DDE0ADFC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor, a2);
}

uint64_t sub_1DDE0AE08(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
}

uint64_t sub_1DDE0AE14@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, a2);
}

uint64_t sub_1DDE0AE20(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t sub_1DDE0AE44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, a2);
}

uint64_t sub_1DDE0AE50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t sub_1DDE0AE74@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors, a2);
}

uint64_t sub_1DDE0AE80(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors, (uint64_t (*)(uint64_t))PaperDocumentView.showParticipantCursors.didset);
}

uint64_t keypath_set_38Tm(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t))
{
  char v7;
  _BYTE *v8;
  uint64_t v9;

  v7 = *a1;
  v8 = (_BYTE *)(*a2 + *a5);
  v9 = swift_beginAccess();
  *v8 = v7;
  return a6(v9);
}

uint64_t sub_1DDE0AEEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider, a2);
}

uint64_t sub_1DDE0AEF8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t sub_1DDE0AF04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_23Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView, a2);
}

uint64_t keypath_get_23Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1 + *a2;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v4);
  *a3 = result;
  return result;
}

uint64_t sub_1DDE0AF64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a2, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t sub_1DDE0AFC4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t sub_1DDE0B020@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior, a2);
}

uint64_t ObjC metadata update function for PaperDocumentView()
{
  return type metadata accessor for PaperDocumentView();
}

void type metadata completion function for PaperDocumentView()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Capsule<PaperDocument>?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Capsule<PaperDocument>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRAsset?();
        if (v3 <= 0x3F)
        {
          type metadata accessor for ContinuousClock.Instant();
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t method lookup function for PaperDocumentView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PaperDocumentView.editingMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PaperDocumentView.editingMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PaperDocumentView.editingMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresenting.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresenting.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresenting.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresentingUI.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresentingUI.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresentingUI.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of PaperDocumentView.pageOverlayViewProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of PaperDocumentView.pageOverlayViewProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of PaperDocumentView.pageOverlayViewProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of PaperDocumentView.contentSnapshottingView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of PaperDocumentView.contentSnapshottingView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of PaperDocumentView.contentSnapshottingView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureEditing.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureEditing.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureEditing.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureCopying.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureCopying.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureCopying.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of PaperDocumentView.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of PaperDocumentView.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of PaperDocumentView.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of PaperDocumentView.vellumOpacity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of PaperDocumentView.vellumOpacity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of PaperDocumentView.vellumOpacity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of PaperDocumentView.canEditVellumOpacity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of PaperDocumentView.canEditVellumOpacity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of PaperDocumentView.canEditVellumOpacity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPicker.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPicker.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPicker.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of PaperDocumentView.paperDocument.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of PaperDocumentView.paperDocument.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of PaperDocumentView.paperDocument.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x418))();
}

uint64_t dispatch thunk of PaperDocumentView.merge<A>(_:forward:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 1072) + *(_QWORD *)(v4 + 1072));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PaperDocumentView.deselectAll()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of PaperDocumentView.automaticallyAdjustScaleFactor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of PaperDocumentView.automaticallyAdjustScaleFactor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of PaperDocumentView.automaticallyAdjustScaleFactor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerSelectedToolDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerSelectedToolItemDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerIsRulerActiveDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerVisibilityDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of PaperDocumentView.publisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of PaperDocumentView.livePublisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of PaperDocumentView.revertAllChanges()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x590))();
}

uint64_t dispatch thunk of PaperDocumentView.currentPage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5A0))();
}

uint64_t dispatch thunk of PaperDocumentView.canGoToNextPage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5A8))();
}

uint64_t dispatch thunk of PaperDocumentView.goToNextPage()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5B0))();
}

uint64_t dispatch thunk of PaperDocumentView.canGoToPreviousPage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5B8))();
}

uint64_t dispatch thunk of PaperDocumentView.goToPreviousPage()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5C0))();
}

uint64_t dispatch thunk of PaperDocumentView.canZoomIn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5D0))();
}

uint64_t dispatch thunk of PaperDocumentView.zoomIn()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of PaperDocumentView.canZoomOut.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E0))();
}

uint64_t dispatch thunk of PaperDocumentView.zoomOut()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
}

uint64_t dispatch thunk of PaperDocumentView.page(for:nearest:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5F0))();
}

uint64_t dispatch thunk of PaperDocumentView.convert(_:to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5F8))();
}

uint64_t dispatch thunk of PaperDocumentView.convert(_:from:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x600))();
}

uint64_t dispatch thunk of PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x608))();
}

uint64_t dispatch thunk of PaperDocumentView.canvas(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x610))();
}

uint64_t dispatch thunk of PaperDocumentView.liveStreamMessenger.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x668))();
}

uint64_t dispatch thunk of PaperDocumentView.liveStreamMessenger.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x670))();
}

uint64_t dispatch thunk of PaperDocumentView.liveStreamMessenger.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x678))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x680))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x688))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x690))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDidChange()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x698))();
}

uint64_t dispatch thunk of PaperDocumentView.showParticipantCursors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6A0))();
}

uint64_t dispatch thunk of PaperDocumentView.showParticipantCursors.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6A8))();
}

uint64_t dispatch thunk of PaperDocumentView.showParticipantCursors.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6B0))();
}

uint64_t dispatch thunk of PaperDocumentView.textualContextProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6B8))();
}

uint64_t dispatch thunk of PaperDocumentView.textualContextProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6C0))();
}

uint64_t dispatch thunk of PaperDocumentView.textualContextProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6C8))();
}

uint64_t dispatch thunk of PaperDocumentView.canvasSelectionDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6D0))();
}

uint64_t dispatch thunk of PaperDocumentView.canvasDrawingWillChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6D8))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView(_:overlayViewFor:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x718))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView(_:willDisplayOverlayView:for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x720))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView(_:willEndDisplayingOverlayView:for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x728))();
}

uint64_t dispatch thunk of PaperDocumentView.export()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x778);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v5();
}

uint64_t dispatch thunk of PaperDocumentView.documentPicker(_:didPickDocumentsAt:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x810))();
}

uint64_t dispatch thunk of PaperDocumentView.documentPickerWasCancelled(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x818))();
}

uint64_t dispatch thunk of PaperDocumentView.canvas(_:shouldOpenLink:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8E0))();
}

uint64_t dispatch thunk of PaperDocumentView.rulerHostView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x900))();
}

uint64_t dispatch thunk of PaperDocumentView.rulerHostView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x908))();
}

uint64_t dispatch thunk of PaperDocumentView.rulerHostView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x910))();
}

uint64_t dispatch thunk of PaperDocumentView.magicGenerativePlaygroundTokenProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x918))();
}

uint64_t dispatch thunk of PaperDocumentView.magicGenerativePlaygroundTokenProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x920))();
}

uint64_t dispatch thunk of PaperDocumentView.magicGenerativePlaygroundTokenProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x928))();
}

uint64_t dispatch thunk of PaperDocumentView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, double, double, double, double);

  v12 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x930);
  v15 = (uint64_t (*)(uint64_t, double, double, double, double))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v15(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocument.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x938))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocument.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x940))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocument.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x948))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocumentExpressionSolvingBehavior.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x950))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocumentExpressionSolvingBehavior.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x958))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x960))();
}

void type metadata accessor for Capsule<PaperDocument>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Capsule<PaperDocument>)
  {
    type metadata accessor for PaperDocument(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v0 = type metadata accessor for Capsule();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<PaperDocument>);
  }
}

uint64_t type metadata accessor for PaperDocumentView.PaperDocumentViewProxy()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PaperDocumentDelegate()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for PPKEdgeInsetsAxis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDE0BFA8 + 4 * byte_1DDF436D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDE0BFDC + 4 * byte_1DDF436D0[v4]))();
}

uint64_t sub_1DDE0BFDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE0BFE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDE0BFECLL);
  return result;
}

uint64_t sub_1DDE0BFF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDE0C000);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDE0C004(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE0C00C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PPKEdgeInsetsAxis()
{
  return &type metadata for PPKEdgeInsetsAxis;
}

unint64_t lazy protocol witness table accessor for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis;
  if (!lazy protocol witness table cache variable for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PPKEdgeInsetsAxis, &type metadata for PPKEdgeInsetsAxis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis);
  }
  return result;
}

id specialized PaperDocumentDelegate.documentCanBeEdited(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  id v6;
  char *v7;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v1)
  {
    v2 = (char *)v1;
    v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x1DF0E666C](v3))
    {
      v4 = *(_QWORD *)(v3 + 8);
      ObjectType = swift_getObjectType();
      LOBYTE(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 24))(v2, ObjectType, v4);
      swift_unknownObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v7 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      if (!*v7)
        goto LABEL_9;
    }
    if (v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
    {
      v6 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly);
LABEL_10:

      return v6;
    }
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  return 0;
}

void specialized PaperDocumentDelegate.pdfDocument(_:handleTabFrom:direction:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  char v14;
  id v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  void *v21;
  id v22;
  id v23;
  _BYTE v24[40];

  v5 = objc_msgSend(a1, sel_page);
  if (v5)
  {
    v23 = v5;
    type metadata accessor for PaperKitPDFPage(0);
    v6 = swift_dynamicCastClass();
    if (v6
      && (v7 = v6, (v8 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView)) != 0))
    {
      v9 = (void *)v8;
      v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      v11 = *v10;
      v12 = v23;
      swift_bridgeObjectRetain();

      if (*(_QWORD *)(v11 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v14 & 1) != 0))
      {
        v15 = *(id *)(*(_QWORD *)(v11 + 56) + 16 * v13);

        swift_bridgeObjectRelease();
        type metadata accessor for AnyCanvas();
        v16 = (_QWORD *)swift_dynamicCastClass();
        if (v16
          && (v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x2F8))(),
              v19 = v18,
              ObjectType = swift_getObjectType(),
              v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 144))(ObjectType, v19),
              v17,
              v21))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          lazy protocol witness table accessor for type UITouch and conformance NSObject(&lazy protocol witness table cache variable for type PDFAnnotation and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          v22 = a1;
          AnyHashable.init<A>(_:)();
          FormFillingView.focusNextField(from:direction:)((uint64_t)v24, a2 != 0);

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for AnyHashable?);
        }
        else
        {

        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
  }
}

void specialized PaperDocumentDelegate.pdfView(_:allowsFormFillingMode:for:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v3 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x1DF0E666C](v5))
    {
      v6 = *(_QWORD *)(v5 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(void *, _QWORD, _QWORD, uint64_t, uint64_t))(v6 + 16))(v4, a1 & 1, 0, ObjectType, v6);

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

void specialized PaperDocumentDelegate.pdfView(_:allowsFormFillingMode:withAutofill:for:)(char a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v5 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x1DF0E666C](v7))
    {
      v8 = *(_QWORD *)(v7 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(void *, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 16))(v6, a1 & 1, a2 & 1, ObjectType, v8);

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

void specialized PaperDocumentDelegate.pdfView(_:allowsFormFillingMode:with:for:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  char v11;

  v5 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v5)
  {
    v6 = (char *)v5;
    v7 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x1DF0E666C](v7))
    {
      v8 = *(_QWORD *)(v7 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(char *, _QWORD, BOOL, uint64_t, uint64_t))(v8 + 16))(v6, a1 & 1, a2 == 3, ObjectType, v8);
      swift_unknownObjectRelease();
    }
    if (a2 == 3)
    {
      v10 = *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
      swift_retain();

      v11 = 45;
LABEL_8:
      *(_BYTE *)(v10 + 18) = v11;
      swift_release();
      return;
    }
    if ((a1 & 1) != 0)
    {
      v10 = *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
      swift_retain();

      v11 = 44;
      goto LABEL_8;
    }

  }
}

void specialized PaperDocumentDelegate.pdfDocument(_:didReceive:for:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  void *v28;
  id v29;

  v3 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v3)
  {
    v4 = (char *)v3;
    v5 = objc_msgSend(a1, sel_formRegions);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
      goto LABEL_14;
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
    {
      v8 = 4;
      while (1)
      {
        v9 = (v6 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v8 - 4, v6) : *(id *)(v6 + 8 * v8);
        v10 = v9;
        v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        if (objc_msgSend(v9, sel_contentType) != (id)1 && objc_msgSend(v10, sel_contentType))
        {
          v12 = 0;
          goto LABEL_16;
        }

        ++v8;
        if (v11 == v7)
          goto LABEL_15;
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
    }
LABEL_15:
    v10 = 0;
    v12 = 1;
LABEL_16:

    swift_bridgeObjectRelease_n();
    v13 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI];
    swift_beginAccess();
    v14 = MEMORY[0x1DF0E666C](v13);
    if (v14)
    {
      v15 = (void *)v14;
      type metadata accessor for PaperDocumentViewController(0);
      v16 = swift_dynamicCastClass();
      if (v16)
        v17 = v12;
      else
        v17 = 1;
      if ((v17 & 1) == 0)
      {
        v18 = (_BYTE *)(v16 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
        swift_beginAccess();
        if (*v18 == 1)
        {
          v19 = swift_allocObject();
          *(_QWORD *)(v19 + 16) = v4;
          v20 = v4;
          PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)((uint64_t)partial apply for closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:), v19);
          swift_release();
        }
      }

    }
    v21 = PaperDocumentView.currentPageCanvas.getter();
    if (v21)
    {
      v22 = v21;
      v23 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0x2F8))();
      v25 = v24;

      ObjectType = swift_getObjectType();
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 144))(ObjectType, v25);

      if (v27)
      {
        v28 = *(void **)(v27 + OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis);
        *(_QWORD *)(v27 + OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis) = a1;
        v29 = a1;

        v4 = (char *)v27;
      }
    }

  }
}

void specialized PaperDocumentDelegate.pdfViewWillClick(onLink:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t ObjectType;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView;
  v4 = MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    v7 = MEMORY[0x1DF0E666C](v6);
    v8 = *(_QWORD *)(v6 + 8);

    if (v7)
    {
      v9 = MEMORY[0x1DF0E666C](v3);
      if (v9)
      {
        v10 = (void *)v9;
        ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, a1, ObjectType, v8);
        swift_unknownObjectRelease();

      }
      else
      {
        __break(1u);
      }
    }
  }
}

void specialized PaperDocumentDelegate.canvasViewDidBeginDrawing(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t ObjectType;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView;
  v2 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    v5 = MEMORY[0x1DF0E666C](v4);
    v6 = *(_QWORD *)(v4 + 8);

    if (v5)
    {
      v7 = MEMORY[0x1DF0E666C](v1);
      if (v7)
      {
        v8 = (void *)v7;
        ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v6 + 104))(v8, ObjectType, v6);

        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void specialized PaperDocumentDelegate.canvasViewDidEndDrawing(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t ObjectType;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView;
  v2 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    v5 = MEMORY[0x1DF0E666C](v4);
    v6 = *(_QWORD *)(v4 + 8);

    if (v5)
    {
      v7 = MEMORY[0x1DF0E666C](v1);
      if (v7)
      {
        v8 = (void *)v7;
        ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v6 + 112))(v8, ObjectType, v6);

        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1DDE0CC38()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:)()
{
  uint64_t v0;

  return closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1DDE0CC64()
{
  return objectdestroy_74Tm();
}

uint64_t partial apply for closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperDocumentView.cropPageAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1DDE0CC74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  v7 = v0 + v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
  }
  else
  {
    v8 = type metadata accessor for CRAsset();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v2, v8);
  }
  v9 = (v3 + v2 + 79) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + v6 + 8) & ~v6;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v10, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + 79) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>)
                                      - 8)
                          + 80);
  v10 = v9 + v8 + 8;
  v11 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = v1 + v5;
  v14 = v1 + v7;
  v15 = *(_QWORD *)(v1 + v8);
  v16 = v1 + (v10 & ~v9);
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(a1, v11, v12, v13, v14, v15, v16);
}

void partial apply for closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>)
                                      - 8)
                          + 80);
  closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), v4 + ((v9 + 24) & ~v9));
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)()
{
  return closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)();
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)()
{
  uint64_t v0;

  return closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)(*(_OWORD **)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.applyFilterPageAction(for:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PaperDocumentView.applyFilterPageAction(for:)(a1);
}

uint64_t sub_1DDE0CF3C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 64);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v2, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v2, v6);
  v8 = (v11 + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + v5 + 8) & ~v5;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v9, v3);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PaperDocumentView.applyFilterPageAction(for:)(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>)
                                      - 8)
                          + 80);
  return closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), v2 + ((v7 + v8 + 8) & ~v8));
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t partial apply for closure #2 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #2 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t partial apply for closure #3 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #3 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t objectdestroy_83Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #4 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>)
                                      - 8)
                          + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

uint64_t partial apply for closure #1 in PaperDocumentView.apply(filter:to:)()
{
  return closure #1 in PaperDocumentView.apply(filter:to:)();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.apply(filter:to:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.apply(filter:to:)(*(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_1DDE0D210()
{
  return objectdestroy_74Tm();
}

uint64_t objectdestroy_74Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1DDE0D25C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentView.insertFromFileAction(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PaperDocumentView.pasteAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(uint64_t))PaperDocumentView.insertFromFile(at:));
}

void partial apply for closure #1 in PaperDocumentView.insertPageAction(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PaperDocumentView.pasteAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(uint64_t))PaperDocumentView.insertBlankPage(at:));
}

void partial apply for closure #1 in PaperDocumentView.rotateRightAction(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentView.rotateLeftAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), 0);
}

void partial apply for closure #1 in PaperDocumentView.rotateLeftAction(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentView.rotateLeftAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), 1);
}

void partial apply for closure #1 in PaperDocumentView.copyPageAction(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentView.copyPageAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1DDE0D300()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(void **)(v1 + 48));
}

void partial apply for closure #1 in PaperDocumentView.deleteAction(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentView.deleteAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.deletePage(at:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.deletePage(at:)(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for closure #2 in PaperDocumentView.pasteAction(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PaperDocumentView.pasteAction(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(uint64_t))PaperDocumentView.paste(at:));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.rotatePage(_:left:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.rotatePage(_:left:)(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_1DDE0D3A8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in PaperDocumentView.insert(_:at:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t)&unk_1EA84F330, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:));
}

uint64_t partial apply for closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in PaperDocumentView.insert(_:at:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t)&unk_1EA84F308, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:));
}

uint64_t partial apply for closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in PaperDocumentView.insert(_:at:)(a1, a2, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1DDE0D424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(a1, v6, v7, v8, v9, v10);
}

{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1DDE0D560()
{
  return objectdestroy_185Tm((uint64_t (*)(_QWORD))MEMORY[0x1E0D11F78]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for CRStableAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1DDE0D618()
{
  return objectdestroy_185Tm((uint64_t (*)(_QWORD))MEMORY[0x1E0D11F78]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for CRStableAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)(a1, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in PaperDocumentView.insert(_:at:)()
{
  uint64_t *v0;

  return closure #1 in PaperDocumentView.insert(newDocument:at:)(v0[2], v0[3], v0[4], &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insert(_:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in PaperDocumentView.loadAndInsertPDF(url:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PaperDocumentView.loadAndInsertPDF(url:at:)(a1, *(_QWORD *)(v2 + 16), *(_BYTE **)(v2 + 32), a2);
}

id partial apply for specialized closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return specialized PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)(*a1, *(char **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), a2);
}

uint64_t sub_1DDE0D780()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1DDE0D798()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentView.insert(newDocument:at:)()
{
  uint64_t *v0;

  return closure #1 in PaperDocumentView.insert(newDocument:at:)(v0[2], v0[3], v0[4], &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insert(newDocument:at:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.insert(newDocument:at:)(*(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.paste(document:at:)()
{
  return closure #1 in PaperDocumentView.paste(document:at:)();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.paste(document:at:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.paste(document:at:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PaperDocumentView.registerFileRepresentations(forPage:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1DDE0D81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:)(void (*a1)(uint64_t, _QWORD, _QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                                      - 8)
                          + 80);
  return closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_1DDE0D8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, a2, v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1DDE0D9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>)
                                      - 8)
                          + 80);
  return closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, a2, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8));
}

uint64_t sub_1DDE0DB00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>)
                 - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + v8;
  v13 = (uint64_t *)(v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v14 = *v13;
  v15 = v13[1];
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, v9, v10, v11, v12, v14, v15);
}

uint64_t outlined retain of PaperRenderableOptions(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 8);
  v3 = *(id *)(a1 + 64);
  v4 = v2;
  return a1;
}

uint64_t partial apply for closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1DDE0DCFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + v6);
  v10 = v1 + v5;
  v11 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, v7, v8, v10, v9, v12, v13);
}

uint64_t sub_1DDE0DE6C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> ()(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> ()(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insertBlankPage(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_OWORD *)(v2 + 32);
  v6[0] = *(_OWORD *)(v2 + 16);
  v6[1] = v4;
  v7 = v3;
  return closure #1 in closure #1 in PaperDocumentView.insertBlankPage(at:)(a1, (double *)v6, *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_1DDE0DED0()
{
  return objectdestroy_185Tm((uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
}

uint64_t objectdestroy_185Tm(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentView.insertFile(at:at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v8[2] = a1;
  v9 = (_QWORD *)swift_task_alloc();
  v8[3] = v9;
  *v9 = v8;
  v9[1] = closure #1 in PaperDocumentView.insertFile(at:at:);
  return PaperDocumentView.loadAndInsertPDF(url:at:)(v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.handlePageOrderedCollectionDifference(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentView.handlePageOrderedCollectionDifference(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.pdfPageDidChange(page:)()
{
  return closure #1 in PaperDocumentView.pdfPageDidChange(page:)();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.pdfPageDidChange(page:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in PaperDocumentView.pdfPageDidChange(page:)(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1DDE0E070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Notification();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Notification() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in PaperDocumentView.annotationPropertiesChanged(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1DDE0E19C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentView.didChange(page:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.didChange(page:)(a1, v4, v5, v6);
}

uint64_t sub_1DDE0E240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for CRAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for CRAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(a1, v6, v7, v8, v9);
}

uint64_t partial apply for specialized closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  return specialized closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(a1);
}

double partial apply for closure #1 in Shape.renderSync<A>(in:id:capsule:options:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  return closure #1 in Shape.renderSync<A>(in:id:capsule:options:)(a1, a2);
}

uint64_t sub_1DDE0E3A8()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentView.addFormFields(_:for:)()
{
  uint64_t v0;

  closure #1 in PaperDocumentView.addFormFields(_:for:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in PaperDocumentView.loadPaperKitPageIfNeeded(for:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PaperDocumentView.loadPaperKitPageIfNeeded(for:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1DDE0E40C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v0 + v5, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v5, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_86Tm()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for CapsuleUndoAction();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v2, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v2, v6);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v9 + v5) & ~v5), v3);
  return swift_deallocObject();
}

void *partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for CapsuleUndoAction();
  return specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)((*(_BYTE *)(v0 + 16) | *(_BYTE *)(v0 + 17)) & 1, 0, v0 + v2, (void (*)(uint64_t))partial apply for closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)(a1, v2[6], v2[2], v2[3], v2[4], a2);
}

void partial apply for closure #1 in PaperDocumentView.liveStreamMessenger.didset(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentView.liveStreamMessenger.didset(a1, v1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.convert(_:from:)(_QWORD *a1)
{
  return partial apply for closure #1 in PaperDocumentView.canvas(for:)(a1) & 1;
}

uint64_t closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for FontToggleStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FontToggleStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = type metadata accessor for ColorScheme();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for FontToggleStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for FontToggleStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v6);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of Environment<ColorScheme>.Content(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for FontToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for FontToggleStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v7);
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FontToggleStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE0EC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FontToggleStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE0ECF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FontToggleStyle()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FontToggleStyle;
  if (!type metadata singleton initialization cache for FontToggleStyle)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for FontToggleStyle()
{
  unint64_t v0;

  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in FontToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #2 in FontToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  void *v24;
  char **v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  _QWORD v54[2];
  char v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;

  v4 = type metadata accessor for ColorScheme();
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v34 - v10;
  swift_bridgeObjectRetain();
  v12 = Image.init(systemName:)();
  v13 = static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, (uint64_t)v54, 0.0, 1, 36.0, 0, v13, v14, v12);
  swift_release();
  v15 = v54[0];
  v47 = v54[1];
  v16 = v55;
  v46 = v56;
  v45 = v57;
  v44 = v58;
  v17 = v59;
  v43 = v60;
  v18 = v61;
  v42 = v62;
  v41 = v63;
  v40 = v64;
  v39 = v65;
  v38 = v66;
  v37 = v67;
  if ((ToggleStyleConfiguration.isOn.getter() & 1) != 0)
  {
    v19 = static Color.accentColor.getter();
  }
  else
  {
    type metadata accessor for FontToggleStyle();
    specialized Environment.wrappedValue.getter((uint64_t)v11);
    v20 = *MEMORY[0x1E0CD86E0];
    v35 = v15;
    v21 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 104))(v7, v20, v4);
    v22 = static ColorScheme.== infix(_:_:)();
    v23 = *(void (**)(char *, uint64_t))(v21 + 8);
    v23(v7, v4);
    v23(v11, v4);
    v15 = v35;
    v24 = (void *)objc_opt_self();
    v25 = &selRef_secondarySystemBackgroundColor;
    if ((v22 & 1) == 0)
      v25 = &selRef_tertiarySystemBackgroundColor;
    v19 = MEMORY[0x1DF0E23A0](objc_msgSend(v24, *v25));
  }
  v26 = v19;
  result = static Edge.Set.all.getter();
  v53 = v16;
  v28 = v45;
  v52 = v45;
  v51 = v17;
  v50 = v18;
  v29 = v41;
  v49 = v41;
  v30 = v39;
  v48 = v39;
  v31 = *(_QWORD *)(a1 + 16);
  v32 = v47;
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v32;
  *(_BYTE *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v46;
  *(_BYTE *)(a2 + 32) = v28;
  *(_QWORD *)(a2 + 40) = v44;
  *(_BYTE *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v43;
  *(_BYTE *)(a2 + 64) = v18;
  *(_QWORD *)(a2 + 72) = v42;
  *(_BYTE *)(a2 + 80) = v29;
  *(_QWORD *)(a2 + 88) = v40;
  *(_BYTE *)(a2 + 96) = v30;
  v33 = v37;
  *(_QWORD *)(a2 + 104) = v38;
  *(_QWORD *)(a2 + 112) = v33;
  *(_QWORD *)(a2 + 120) = v26;
  *(_BYTE *)(a2 + 128) = result;
  *(_QWORD *)(a2 + 136) = 0x4014000000000000;
  *(_QWORD *)(a2 + 144) = v31;
  *(_WORD *)(a2 + 152) = 256;
  return result;
}

uint64_t protocol witness for ToggleStyle.makeBody(configuration:) in conformance FontToggleStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a2;
  v21 = type metadata accessor for PlainButtonStyle();
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ToggleStyleConfiguration();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  v20 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v13);
  v16 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v24 = v2;
  v25 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>, MEMORY[0x1E0CDFA58]);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  v18 = v21;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v15, v11);
}

uint64_t sub_1DDE0F370()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ToggleStyleConfiguration();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FontToggleStyle.makeBody(configuration:)()
{
  uint64_t (*v0)(uint64_t *, _QWORD);
  BOOL *v1;
  uint64_t v3;

  type metadata accessor for ToggleStyleConfiguration();
  v0 = (uint64_t (*)(uint64_t *, _QWORD))ToggleStyleConfiguration.isOn.modify();
  *v1 = !*v1;
  return v0(&v3, 0);
}

uint64_t partial apply for closure #2 in FontToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in FontToggleStyle.makeBody(configuration:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1DDE0F43C()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  type metadata accessor for PlainButtonStyle();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>, MEMORY[0x1E0CDFA58]);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for MiniMenu(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    swift_weakCopyInit();
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v7 = *(int *)(a3 + 24);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    swift_retain();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for MiniMenu(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_weakDestroy();
  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(swift_weakCopyInit() + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  swift_retain();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(swift_weakCopyAssign() + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = swift_weakTakeInit();
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
  v7 = *(int *)(a3 + 24);
  v8 = v6 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(swift_weakTakeAssign() + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniMenu()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE0F7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MiniMenu()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE0F844(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MiniMenu(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for MiniMenu);
}

void type metadata completion function for MiniMenu()
{
  unint64_t v0;

  type metadata accessor for Bindable<MiniMenuState>(319, (unint64_t *)&lazy cache variable for type metadata for Bindable<MiniMenuState>, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0058]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in MiniMenu()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t key path getter for MiniMenuState.popoverState : MiniMenuState@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_retain();
}

uint64_t key path setter for MiniMenuState.popoverState : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t key path getter for MiniMenuState.visible : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 32);
  return result;
}

uint64_t key path setter for MiniMenuState.visible : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t MiniMenuPalette.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  v2 = v1;
  v93 = a1;
  v3 = type metadata accessor for ColorScheme();
  v91 = *(_QWORD *)(v3 - 8);
  v92 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v90 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v89 = (uint64_t)&v77 - v8;
  v9 = type metadata accessor for Capsule();
  MEMORY[0x1E0C80A78](v9, v10);
  v87 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Material();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v12);
  v81 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v77, v18);
  v20 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
  MEMORY[0x1E0C80A78](v78, v25);
  v27 = (char *)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
  MEMORY[0x1E0C80A78](v79, v28);
  v30 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
  MEMORY[0x1E0C80A78](v80, v31);
  v33 = (char *)&v77 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>);
  MEMORY[0x1E0C80A78](v84, v34);
  v36 = (char *)&v77 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v85, v37);
  v86 = (uint64_t)&v77 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v24 = static VerticalAlignment.center.getter();
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v39 = (uint64_t)&v24[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>)
                             + 44)];
  v40 = static VerticalAlignment.firstTextBaseline.getter();
  if (one-time initialization token for buttonSpacing != -1)
    swift_once();
  v41 = static MiniMenuConstants.buttonSpacing;
  *(_QWORD *)v17 = v40;
  *((_QWORD *)v17 + 1) = v41;
  v17[16] = 0;
  v42 = (uint64_t)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>)
                             + 44)];
  v88 = v2;
  closure #1 in closure #1 in MiniMenuPalette.body.getter(v2, v42);
  v43 = static Edge.Set.horizontal.getter();
  if (one-time initialization token for paletteHorizontalPadding != -1)
    swift_once();
  EdgeInsets.init(_all:)();
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v51 = v50;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>);
  v52 = &v20[*(int *)(v77 + 36)];
  *v52 = v43;
  *((_QWORD *)v52 + 1) = v45;
  *((_QWORD *)v52 + 2) = v47;
  *((_QWORD *)v52 + 3) = v49;
  *((_QWORD *)v52 + 4) = v51;
  v52[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v20, v39, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>);
  if (one-time initialization token for paletteHeight != -1)
    swift_once();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v24, (uint64_t)v27, &demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>);
  v53 = &v27[*(int *)(v78 + 36)];
  v54 = v95;
  *(_OWORD *)v53 = v94;
  *((_OWORD *)v53 + 1) = v54;
  *((_OWORD *)v53 + 2) = v96;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>);
  v55 = v81;
  static Material.regular.getter();
  v56 = static Edge.Set.all.getter();
  v57 = &v30[*(int *)(v79 + 36)];
  v58 = v82;
  v59 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v57, v55, v83);
  v57[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackgroundStyleModifier<Material>)
             + 36)] = v56;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, (uint64_t)v30, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v59);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
  v60 = *MEMORY[0x1E0CDB0C0];
  v61 = type metadata accessor for RoundedCornerStyle();
  v62 = (uint64_t)v87;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v87, v60, v61);
  v63 = (uint64_t)&v33[*(int *)(v80 + 36)];
  v64 = MEMORY[0x1E0CDFE18];
  outlined init with copy of PKStrokeProperties(v62, v63, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDFE18]);
  *(_WORD *)(v63
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ClipEffect<Capsule>)
                    + 36)) = 256;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v30, (uint64_t)v33, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
  outlined destroy of PKStrokeProperties(v62, (uint64_t (*)(_QWORD))v64);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
  static Color.black.getter();
  v65 = Color.opacity(_:)();
  swift_release();
  v66 = v89;
  specialized Environment.wrappedValue.getter(v89);
  v68 = v90;
  v67 = v91;
  v69 = v92;
  (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v90, *MEMORY[0x1E0CD86D0], v92);
  LOBYTE(v64) = static ColorScheme.== infix(_:_:)();
  v70 = *(void (**)(char *, uint64_t))(v67 + 8);
  v70(v68, v69);
  v70((char *)v66, v69);
  v71 = 0;
  if ((v64 & 1) == 0)
  {
    if (one-time initialization token for paletteShadowRadius != -1)
      swift_once();
    v71 = static MiniMenuConstants.paletteShadowRadius;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v33, (uint64_t)v36, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
  v72 = (uint64_t *)&v36[*(int *)(v84 + 36)];
  *v72 = v65;
  v72[1] = v71;
  v72[2] = 0;
  v72[3] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
  v73 = static Edge.Set.all.getter();
  v74 = v86;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v36, v86, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>);
  v75 = v74 + *(int *)(v85 + 36);
  *(_BYTE *)v75 = v73;
  *(_OWORD *)(v75 + 8) = 0u;
  *(_OWORD *)(v75 + 24) = 0u;
  *(_BYTE *)(v75 + 40) = 1;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>);
  return outlined init with take of (key: Int, value: AnyCRValue)?(v74, v93, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout>);
}

uint64_t closure #1 in closure #1 in MiniMenuPalette.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73[8];
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  ValueMetadata *v82;
  unint64_t v83;

  v69 = a2;
  v60 = type metadata accessor for MiniMagicButtons();
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v3);
  v57 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniMagicButtons?);
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v5);
  v58 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MiniMenuPalette(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v71 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniMagicButtons??);
  MEMORY[0x1E0C80A78](v10, v11);
  v70 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v68 = (char *)&v56 - v15;
  v66 = type metadata accessor for MiniStyleButtons();
  v67 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniStyleButtons?);
  MEMORY[0x1E0C80A78](v19, v20);
  v64 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v56 - v24;
  v26 = a1;
  v27 = a1 + *(int *)(v7 + 24);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  v29 = v80;
  swift_getKeyPath();
  v80 = v29;
  v30 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v31 = *(_QWORD *)(v29 + 40);
  swift_release();
  v62 = v27;
  v61 = v30;
  if ((v31 & 0x1F) != 0)
  {
    Bindable.wrappedValue.getter();
    swift_weakLoadStrong();
    type metadata accessor for MiniMenuState();
    Bindable<A>.init(wrappedValue:)();
    swift_weakInit();
    swift_release();
    outlined init with take of PKStrokeStruct((uint64_t)v18, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for MiniStyleButtons);
  }
  v33 = (uint64_t)v68;
  v32 = v69;
  v34 = v71;
  (*(void (**)(void))(v67 + 56))();
  v82 = &type metadata for PencilAndPaperFeatureFlags;
  v83 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v80) = 2;
  v35 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
  outlined init with copy of PKStrokeProperties(v26, v34, type metadata accessor for MiniMenuPalette);
  if ((v35 & 1) == 0)
    goto LABEL_10;
  Bindable.wrappedValue.getter();
  v36 = (_QWORD *)MEMORY[0x1DF0E666C](v80 + 16);
  if (!v36
    || (v37 = v36,
        v38 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v36) + 0x320))(),
        v37,
        !v38))
  {
    swift_release();
    v34 = v71;
LABEL_10:
    outlined destroy of PKStrokeProperties(v34, type metadata accessor for MiniMenuPalette);
    goto LABEL_11;
  }
  v39 = objc_msgSend(v38, sel_isGenerationModelAvailable);
  swift_release();

  outlined destroy of PKStrokeProperties(v71, type metadata accessor for MiniMenuPalette);
  if ((v39 & 1) == 0)
  {
LABEL_11:
    v47 = 1;
    v48 = v65;
    v49 = v63;
    v50 = (uint64_t)v64;
    goto LABEL_12;
  }
  Bindable.wrappedValue.getter();
  v40 = v80;
  swift_getKeyPath();
  v80 = v40;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v41 = *(_QWORD *)(v40 + 40);
  swift_release();
  v56 = v28;
  if ((v41 & 0x20060) != 0)
  {
    Bindable.wrappedValue.getter();
    swift_weakLoadStrong();
    type metadata accessor for FeedbackManager();
    inited = swift_initStaticObject();
    type metadata accessor for MiniMenuState();
    v43 = (uint64_t)v57;
    Bindable<A>.init(wrappedValue:)();
    v44 = v60;
    swift_weakInit();
    swift_release();
    *(_QWORD *)(v43 + *(int *)(v44 + 24)) = inited;
    v45 = v58;
    outlined init with take of PKStrokeStruct(v43, v58, (uint64_t (*)(_QWORD))type metadata accessor for MiniMagicButtons);
    v46 = 0;
  }
  else
  {
    v46 = 1;
    v44 = v60;
    v45 = v58;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v45, v46, 1, v44);
  outlined init with take of (key: Int, value: AnyCRValue)?(v45, v33, &demangling cache variable for type metadata for MiniMagicButtons?);
  v47 = 0;
  v48 = v65;
  v49 = v63;
  v50 = (uint64_t)v64;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v33, v47, 1, v48);
  Bindable.wrappedValue.getter();
  swift_weakLoadStrong();
  type metadata accessor for FeedbackManager();
  v51 = swift_initStaticObject();
  v73[0] = 0;
  State.init(wrappedValue:)();
  v73[0] = v80;
  v74 = v81;
  v72 = 0;
  State.init(wrappedValue:)();
  v75 = v80;
  v76 = v81;
  type metadata accessor for MiniMenuState();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  v77 = ObservedObject.init(wrappedValue:)();
  v78 = v52;
  swift_weakInit();
  swift_release();
  v79 = v51;
  outlined init with take of MiniObjectButtons((uint64_t)v73, (uint64_t)&v80);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v25, v50, &demangling cache variable for type metadata for MiniStyleButtons?);
  v53 = v70;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v33, v70, &demangling cache variable for type metadata for MiniMagicButtons??);
  outlined init with copy of MiniObjectButtons((uint64_t)&v80, (uint64_t)v73);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v50, v32, &demangling cache variable for type metadata for MiniStyleButtons?);
  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v53, v32 + *(int *)(v54 + 48), &demangling cache variable for type metadata for MiniMagicButtons??);
  outlined init with copy of MiniObjectButtons((uint64_t)v73, v32 + *(int *)(v54 + 64));
  outlined destroy of MiniObjectButtons((uint64_t)&v80);
  outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for MiniMagicButtons??);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for MiniStyleButtons?);
  outlined destroy of MiniObjectButtons((uint64_t)v73);
  outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for MiniMagicButtons??);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for MiniStyleButtons?);
}

uint64_t MiniMenu.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t KeyPath;
  uint64_t Strong;
  uint64_t v48;
  uint64_t *v49;
  _QWORD v51[2];
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v2 = v1;
  v63 = a1;
  v3 = type metadata accessor for MiniMenu(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v55 = (uint64_t)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MiniMenuPalette(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (_QWORD *)((char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>);
  MEMORY[0x1E0C80A78](v52, v15);
  v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onChange<A>(of:initial:_:)>>.0);
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v18);
  v54 = (char *)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>);
  MEMORY[0x1E0C80A78](v59, v20);
  v53 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>>);
  MEMORY[0x1E0C80A78](v61, v22);
  v58 = (uint64_t)v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakLoadStrong();
  v51[1] = v2 + *(int *)(v3 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  *v10 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  swift_weakInit();
  swift_release();
  type metadata accessor for MiniMenuState();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  Bindable<A>.init(wrappedValue:)();
  v24 = *(_QWORD *)(v2 + 16);
  LOBYTE(v64) = *(_BYTE *)(v2 + 8);
  v65 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  if (v66)
    v25 = 1.0;
  else
    v25 = 0.75;
  static UnitPoint.center.getter();
  v27 = v26;
  v29 = v28;
  outlined init with copy of PKStrokeProperties((uint64_t)v10, (uint64_t)v14, type metadata accessor for MiniMenuPalette);
  v30 = &v14[*(int *)(v11 + 36)];
  *(double *)v30 = v25;
  *((double *)v30 + 1) = v25;
  *((_QWORD *)v30 + 2) = v27;
  *((_QWORD *)v30 + 3) = v29;
  outlined destroy of PKStrokeProperties((uint64_t)v10, type metadata accessor for MiniMenuPalette);
  v31 = *(_QWORD *)(v2 + 16);
  LOBYTE(v64) = *(_BYTE *)(v2 + 8);
  v65 = v31;
  State.wrappedValue.getter();
  if (v66)
    v32 = 1.0;
  else
    v32 = 0.0;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
  *(double *)&v17[*(int *)(v52 + 36)] = v32;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
  Bindable.wrappedValue.getter();
  v33 = v64;
  swift_getKeyPath();
  v64 = v33;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v34 = *(_BYTE *)(v33 + 32);
  swift_release();
  LOBYTE(v64) = v34;
  v35 = v55;
  outlined init with copy of PKStrokeProperties(v2, v55, type metadata accessor for MiniMenu);
  v36 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v37 = swift_allocObject();
  outlined init with take of PKStrokeStruct(v35, v37 + v36, type metadata accessor for MiniMenu);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CD9728]);
  v38 = v54;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>);
  Bindable.wrappedValue.getter();
  v39 = v64;
  swift_getKeyPath();
  v64 = v39;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v40 = *(_QWORD *)(v39 + 24);
  swift_retain();
  swift_release();
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, (uint64_t (*)(uint64_t))type metadata accessor for MiniPopoverState, (uint64_t)&protocol conformance descriptor for MiniPopoverState);
  v41 = static ObservableObject.environmentStore.getter();
  v42 = v60;
  v43 = (uint64_t)v53;
  v44 = v62;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v53, v38, v62);
  v45 = (uint64_t *)(v43 + *(int *)(v59 + 36));
  *v45 = v41;
  v45[1] = v40;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v44);
  KeyPath = swift_getKeyPath();
  Strong = swift_weakLoadStrong();
  v48 = v58;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v43, v58, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>);
  v49 = (uint64_t *)(v48 + *(int *)(v61 + 36));
  *v49 = KeyPath;
  v49[1] = Strong;
  outlined destroy of StocksKitCurrencyCache.Provider?(v43, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>);
  return outlined init with take of (key: Int, value: AnyCRValue)?(v48, v63, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>>);
}

uint64_t closure #1 in MiniMenu.body.getter()
{
  static Animation.easeInOut(duration:)();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in MiniMenu.body.getter()
{
  type metadata accessor for MiniMenu(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  return State.wrappedValue.setter();
}

uint64_t key path getter for EnvironmentValues.miniMenuController : EnvironmentValues@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  lazy protocol witness table accessor for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController();
  result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.miniMenuController : EnvironmentValues()
{
  lazy protocol witness table accessor for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController();
  swift_retain();
  return EnvironmentValues.subscript.setter();
}

uint64_t type metadata accessor for MiniMenuPalette(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for MiniMenuPalette);
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1DDE113D4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ColorScheme();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_1DDE1147C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for MiniMenu(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_weakDestroy();
  swift_release();
  v4 = v3 + *(int *)(v1 + 24);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MiniMenu.body.getter()
{
  type metadata accessor for MiniMenu(0);
  return closure #1 in MiniMenu.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
    v2[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MiniMenuPalette and conformance MiniMenuPalette, type metadata accessor for MiniMenuPalette, (uint64_t)&protocol conformance descriptor for MiniMenuPalette);
    v2[1] = MEMORY[0x1E0CD8DA8];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1DDE115CC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  lazy protocol witness table accessor for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController();
  result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EnvironmentValues.__Key_miniMenuController, &type metadata for EnvironmentValues.__Key_miniMenuController);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController);
  }
  return result;
}

uint64_t partial apply for closure #1 in MiniMenuState.popoverState.setter()
{
  uint64_t v0;

  return closure #1 in MiniMenuState.popoverState.setter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in MiniMenu.body.getter()
{
  return closure #1 in closure #1 in MiniMenu.body.getter();
}

uint64_t _s8PaperKit13MiniMenuStateC7visibleSbvsyyXEfU_TA_0()
{
  uint64_t v0;

  return closure #1 in MiniMenuState.visible.setter(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for MiniMenuPalette(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    swift_weakCopyInit();
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for MiniMenuPalette(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_weakDestroy();
  v5 = a1 + *(int *)(a2 + 24);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for MiniMenuPalette(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  swift_weakCopyInit();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

_QWORD *assignWithCopy for MiniMenuPalette(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_weakCopyAssign();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

char *initializeWithTake for MiniMenuPalette(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  swift_weakTakeInit();
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *assignWithTake for MiniMenuPalette(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  swift_weakTakeAssign();
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniMenuPalette()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE11C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MiniMenuPalette()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE11C8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for MiniMenuPalette()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Bindable<MiniMenuState>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Bindable<MiniMenuState>(319, (unint64_t *)&lazy cache variable for type metadata for Bindable<MiniMenuState>, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0058]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for Bindable<MiniMenuState>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MiniMenuController?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<MiniMenuController?>, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>);
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>);
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CD9728]);
    v4[2] = v2;
    v4[3] = MEMORY[0x1E0DEAFA0];
    v4[4] = v3;
    v4[5] = MEMORY[0x1E0DEAFB8];
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MiniPopoverState?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<MiniPopoverState?>, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MiniMenuPalette()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1DDE11FAC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CD9758]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CD9100]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Capsule>, MEMORY[0x1E0CD89F0]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Material>, MEMORY[0x1E0CDC6D0]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, MEMORY[0x1E0CDFB10]);
    v2[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons??, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized CanvasElementView.endLiveEdit(undoable:discard:)(int a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  void (*v54)(char *, char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  char v66;

  v3 = v2;
  v65 = a2;
  LODWORD(v61) = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v58 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v58 - v9;
  v60 = type metadata accessor for CapsuleUndoAction();
  v64 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v11);
  v63 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v58 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v62 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v58 - v27;
  v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v30 = (uint64_t)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x388);
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, (uint64_t)v20, &demangling cache variable for type metadata for Capsule<Shape>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Capsule<Shape>?);
  v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v59 = v28;
  v32(v28, v20, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v16, 1, 1, v21);
  swift_beginAccess();
  outlined assign with copy of Capsule<Image>?((uint64_t)v16, v30, &demangling cache variable for type metadata for Capsule<Shape>?);
  v33 = swift_endAccess();
  v34 = *(uint64_t (**)(void))((*v29 & *v3) + 0x88);
  v35 = ((uint64_t (*)(uint64_t))v34)(v33);
  v36 = v29;
  if (v35)
  {
    v37 = (void *)v35;
    specialized LiveEditable.didChangeLiveEditing()();

  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Capsule<Shape>?);
  v38 = *(_QWORD *)((*v29 & *v3) + 0x3A8);
  v39 = *(void **)((char *)v3 + v38);
  *(_QWORD *)((char *)v3 + v38) = 0;

  v42 = v63;
  v41 = v64;
  if ((v65 & 1) != 0 || (v61 & 1) != 0)
  {
    v40 = (_QWORD *)v34();
    if (v40)
    {
      v61 = v40;
      v43 = (char *)v3 + *(_QWORD *)((*v29 & *v3) + 0x380);
      swift_beginAccess();
      v44 = v62;
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v62, v43, v21);
      Capsule.actionUndoingDifference(from:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v44, v21);
      v45 = v60;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v10, 1, v60) == 1)
      {

        v40 = (_QWORD *)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
LABEL_12:
        v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        goto LABEL_14;
      }
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v42, v10, v45);
      if ((v65 & 1) != 0)
      {
        v46 = (uint64_t)v58;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v58, v42, v45);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v46, 0, 1, v45);
        swift_beginAccess();
        Capsule.apply(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v46, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
        swift_endAccess();

        v40 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v45);
        goto LABEL_12;
      }
      v47 = v61;
      v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      (*(void (**)(char *, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v61) + 0x458))(v42, 0, 0, 0, 0);

      v40 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v45);
    }
  }
LABEL_14:
  v48 = (*(uint64_t (**)(_QWORD *))((*v36 & *v3) + 0x288))(v40);
  v49 = ((uint64_t (*)(uint64_t))v34)(v48);
  if (!v49)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v59, v21);
  v50 = (_QWORD *)v49;
  v51 = (char *)v3 + *(_QWORD *)((*v36 & *v3) + 0x380);
  swift_beginAccess();
  v52 = v62;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v62, v51, v21);
  v66 = 4;
  v53 = v36;
  v54 = *(void (**)(char *, char *, uint64_t, uint64_t))((*v36 & *v50) + 0x538);
  v55 = type metadata accessor for Shape();
  v56 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v54(v52, &v66, v55, v56);
  v66 = 4;
  (*(void (**)(char *))((*v53 & *v50) + 0x518))(&v66);

  v57 = *(void (**)(char *, uint64_t))(v22 + 8);
  v57(v52, v21);
  return ((uint64_t (*)(char *, uint64_t))v57)(v59, v21);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  void (*v54)(char *, char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  char v66;

  v3 = v2;
  v65 = a2;
  LODWORD(v61) = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v58 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v58 - v9;
  v60 = type metadata accessor for CapsuleUndoAction();
  v64 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v11);
  v63 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v58 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v62 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v58 - v27;
  v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v30 = (uint64_t)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x388);
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, (uint64_t)v20, &demangling cache variable for type metadata for Capsule<TextBox>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Capsule<TextBox>?);
  v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v59 = v28;
  v32(v28, v20, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v16, 1, 1, v21);
  swift_beginAccess();
  outlined assign with copy of Capsule<Image>?((uint64_t)v16, v30, &demangling cache variable for type metadata for Capsule<TextBox>?);
  v33 = swift_endAccess();
  v34 = *(uint64_t (**)(void))((*v29 & *v3) + 0x88);
  v35 = ((uint64_t (*)(uint64_t))v34)(v33);
  v36 = v29;
  if (v35)
  {
    v37 = (void *)v35;
    specialized LiveEditable.didChangeLiveEditing()();

  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Capsule<TextBox>?);
  v38 = *(_QWORD *)((*v29 & *v3) + 0x3A8);
  v39 = *(void **)((char *)v3 + v38);
  *(_QWORD *)((char *)v3 + v38) = 0;

  v42 = v63;
  v41 = v64;
  if ((v65 & 1) != 0 || (v61 & 1) != 0)
  {
    v40 = (_QWORD *)v34();
    if (v40)
    {
      v61 = v40;
      v43 = (char *)v3 + *(_QWORD *)((*v29 & *v3) + 0x380);
      swift_beginAccess();
      v44 = v62;
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v62, v43, v21);
      Capsule.actionUndoingDifference(from:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v44, v21);
      v45 = v60;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v10, 1, v60) == 1)
      {

        v40 = (_QWORD *)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
LABEL_12:
        v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        goto LABEL_14;
      }
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v42, v10, v45);
      if ((v65 & 1) != 0)
      {
        v46 = (uint64_t)v58;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v58, v42, v45);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v46, 0, 1, v45);
        swift_beginAccess();
        Capsule.apply(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v46, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
        swift_endAccess();

        v40 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v45);
        goto LABEL_12;
      }
      v47 = v61;
      v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      (*(void (**)(char *, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v61) + 0x458))(v42, 0, 0, 0, 0);

      v40 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v45);
    }
  }
LABEL_14:
  v48 = (*(uint64_t (**)(_QWORD *))((*v36 & *v3) + 0x288))(v40);
  v49 = ((uint64_t (*)(uint64_t))v34)(v48);
  if (!v49)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v59, v21);
  v50 = (_QWORD *)v49;
  v51 = (char *)v3 + *(_QWORD *)((*v36 & *v3) + 0x380);
  swift_beginAccess();
  v52 = v62;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v62, v51, v21);
  v66 = 4;
  v53 = v36;
  v54 = *(void (**)(char *, char *, uint64_t, uint64_t))((*v36 & *v50) + 0x538);
  v55 = type metadata accessor for TextBox();
  v56 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v54(v52, &v66, v55, v56);
  v66 = 4;
  (*(void (**)(char *))((*v53 & *v50) + 0x518))(&v66);

  v57 = *(void (**)(char *, uint64_t))(v22 + 8);
  v57(v52, v21);
  return ((uint64_t (*)(char *, uint64_t))v57)(v59, v21);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  void (*v54)(char *, char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  char v66;

  v3 = v2;
  v65 = a2;
  LODWORD(v61) = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v58 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v58 - v9;
  v60 = type metadata accessor for CapsuleUndoAction();
  v64 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v11);
  v63 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v58 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v62 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v58 - v27;
  v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v30 = (uint64_t)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x388);
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, (uint64_t)v20, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Capsule<Image>?);
  v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v59 = v28;
  v32(v28, v20, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v16, 1, 1, v21);
  swift_beginAccess();
  outlined assign with copy of Capsule<Image>?((uint64_t)v16, v30, &demangling cache variable for type metadata for Capsule<Image>?);
  v33 = swift_endAccess();
  v34 = *(uint64_t (**)(void))((*v29 & *v3) + 0x88);
  v35 = ((uint64_t (*)(uint64_t))v34)(v33);
  v36 = v29;
  if (v35)
  {
    v37 = (void *)v35;
    specialized LiveEditable.didChangeLiveEditing()();

  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Capsule<Image>?);
  v38 = *(_QWORD *)((*v29 & *v3) + 0x3A8);
  v39 = *(void **)((char *)v3 + v38);
  *(_QWORD *)((char *)v3 + v38) = 0;

  v42 = v63;
  v41 = v64;
  if ((v65 & 1) != 0 || (v61 & 1) != 0)
  {
    v40 = (_QWORD *)v34();
    if (v40)
    {
      v61 = v40;
      v43 = (char *)v3 + *(_QWORD *)((*v29 & *v3) + 0x380);
      swift_beginAccess();
      v44 = v62;
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v62, v43, v21);
      Capsule.actionUndoingDifference(from:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v44, v21);
      v45 = v60;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v10, 1, v60) == 1)
      {

        v40 = (_QWORD *)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
LABEL_12:
        v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        goto LABEL_14;
      }
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v42, v10, v45);
      if ((v65 & 1) != 0)
      {
        v46 = (uint64_t)v58;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v58, v42, v45);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v46, 0, 1, v45);
        swift_beginAccess();
        Capsule.apply(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v46, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
        swift_endAccess();

        v40 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v45);
        goto LABEL_12;
      }
      v47 = v61;
      v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      (*(void (**)(char *, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v61) + 0x458))(v42, 0, 0, 0, 0);

      v40 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v45);
    }
  }
LABEL_14:
  v48 = (*(uint64_t (**)(_QWORD *))((*v36 & *v3) + 0x288))(v40);
  v49 = ((uint64_t (*)(uint64_t))v34)(v48);
  if (!v49)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v59, v21);
  v50 = (_QWORD *)v49;
  v51 = (char *)v3 + *(_QWORD *)((*v36 & *v3) + 0x380);
  swift_beginAccess();
  v52 = v62;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v62, v51, v21);
  v66 = 4;
  v53 = v36;
  v54 = *(void (**)(char *, char *, uint64_t, uint64_t))((*v36 & *v50) + 0x538);
  v55 = type metadata accessor for Image();
  v56 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v54(v52, &v66, v55, v56);
  v66 = 4;
  (*(void (**)(char *))((*v53 & *v50) + 0x518))(&v66);

  v57 = *(void (**)(char *, uint64_t))(v22 + 8);
  v57(v52, v21);
  return ((uint64_t (*)(char *, uint64_t))v57)(v59, v21);
}

uint64_t specialized LiveEditable.didChangeLiveEditing()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;

  v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing;
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing);
  result = AnyCanvas.isLiveEditing()();
  *(_BYTE *)(v0 + v1) = result & 1;
  if (v2 == 1 && (result & 1) == 0)
  {
    v4 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveEditingContinuations;
    swift_beginAccess();
    v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v5; ++i)
        swift_continuation_throwingResume();
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)v4 = MEMORY[0x1E0DEE9D8];
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized AsyncCache.cancel(for:uuid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v36 - v18;
  v20 = (uint64_t *)(v3 + 112);
  swift_beginAccess();
  v21 = *(_QWORD *)(v3 + 112);
  if (*(_QWORD *)(v21 + 16))
  {
    swift_bridgeObjectRetain();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v23 & 1) != 0)
    {
      v38 = a2;
      v39 = a3;
      v37 = a1;
      v24 = *(_QWORD *)(v21 + 56) + 24 * v22;
      v25 = *(_QWORD *)v24;
      v26 = *(void **)(v24 + 8);
      v27 = *(_BYTE *)(v24 + 16);
      outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(_QWORD *)v24, v26, v27);
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v25, v26, 1);
      }
      else
      {
        v42 = v25;
        if (*(_QWORD *)(v25 + 16))
        {
          swift_bridgeObjectRetain();
          v28 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
          if ((v29 & 1) != 0)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v19, *(_QWORD *)(v25 + 56) + *(_QWORD *)(v8 + 72) * v28, v7);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v19, 1, 1, v7);
          }
          outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v25, v26, 0);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v19, 1, 1, v7);
        }
        v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1, v7);
        v31 = v37;
        v32 = v39;
        if (v30)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v19, v7);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
          v41 = 0;
          CheckedContinuation.resume(returning:)();
          (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        }
        specialized Dictionary._Variant.removeValue(forKey:)(v32, (uint64_t)v15);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
        v33 = v42;
        swift_beginAccess();
        v34 = v38;
        outlined copy of Data._Representation(v31, v38);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v40 = *v20;
        *v20 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, 0, 0, v31, v34, isUniquelyReferenced_nonNull_native);
        *v20 = v40;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v31, v34);
        swift_endAccess();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t specialized AsyncCache.cached(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v6 = type metadata accessor for UUID();
  v3[12] = v6;
  v3[13] = *(_QWORD *)(v6 - 8);
  v3[14] = swift_task_alloc();
  v3[5] = a1;
  v3[6] = a2;
  return swift_task_switch();
}

uint64_t specialized AsyncCache.cached(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = *(_QWORD *)(v0 + 88) + 112;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v4 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v2 + 56) + 24 * v5;
      v9 = *(_QWORD *)v7;
      v8 = *(void **)(v7 + 8);
      v10 = *(_BYTE *)(v7 + 16);
      outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(_QWORD *)v7, v8, v10);
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
      {
        swift_task_dealloc();
        return (*(uint64_t (**)(void *))(v0 + 8))(v8);
      }
      outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v9, v8, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v12 = v0 + 40;
  v13 = *(_QWORD *)v1;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    goto LABEL_12;
  v15 = *(_QWORD *)(v0 + 72);
  v14 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v18 = *(_QWORD *)(v13 + 56) + 24 * v16;
  v19 = *(_QWORD *)v18;
  v20 = *(void **)(v18 + 8);
  v21 = *(_BYTE *)(v18 + 16);
  outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(_QWORD *)v18, v20, v21);
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v19, v20, 1);
LABEL_12:
    v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v22 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 64) = v19;
  UUID.init()();
  v24 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v24;
  v24[2] = v0 + 64;
  v24[3] = v22;
  v24[4] = v23;
  v24[5] = v12;
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v25;
  v25[2] = v23;
  v25[3] = v12;
  v25[4] = v22;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type AsyncCache<Data, CGImageRef> and conformance AsyncCache<A, B>, &demangling cache variable for type metadata for AsyncCache<Data, CGImageRef>, (uint64_t)&protocol conformance descriptor for AsyncCache<A, B>);
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGImageRef?);
  *v26 = v0;
  v26[1] = specialized AsyncCache.cached(for:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t specialized closure #1 in closure #1 in AsyncCache.cached(for:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  uint64_t v31;

  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID();
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v21 + 16))(v20, a3, v18);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v15, a1, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v15, 0, 1, v22);
  specialized Dictionary.subscript.setter((uint64_t)v15, (uint64_t)v20);
  v24 = *a2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31 = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a4 + 112) = 0x8000000000000000;
  v26 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v24, 0, 0, a5, a6, isUniquelyReferenced_nonNull_native);
  v28 = v27;
  LOBYTE(a5) = v29;
  *(_QWORD *)(a4 + 112) = v31;
  swift_bridgeObjectRelease();
  outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(v26, v28, a5);
  return swift_endAccess();
}

uint64_t ImageElementView.ImageState.init(asset:filter:crop:maxDimensionInPixels:canUseFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  LODWORD(v45) = a5;
  v42 = a4;
  v43 = a3;
  v44 = a1;
  v46 = (char *)a6;
  v7 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRAsset();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v42 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a2;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a2, (uint64_t)v27, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if ((v45 & 1) == 0)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v31 = v43;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v43, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    goto LABEL_7;
  }
  v45 = v12;
  v28 = (uint64_t)v10;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v27, 1, v29);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v31 = v43;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v43, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  if (v30 != 1)
  {
LABEL_7:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v34 = v44;
    goto LABEL_8;
  }
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v23, 1, v32);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v34 = v44;
  if (v33 == 1)
  {
    outlined init with copy of PKStrokeProperties(v44, v28, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
      v41(v15, v28, v11);
      outlined destroy of StocksKitCurrencyCache.Provider?(v31, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined destroy of PKStrokeProperties(v34, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v41(v19, (uint64_t)v15, v11);
      v41(v46, (uint64_t)v19, v11);
      goto LABEL_9;
    }
    outlined destroy of PKStrokeProperties(v28, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  }
LABEL_8:
  v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
  v36 = (uint64_t)v46;
  v37 = (uint64_t)&v46[v35[12]];
  v38 = (uint64_t)&v46[v35[16]];
  v39 = v35[20];
  outlined init with take of PKStrokeStruct(v34, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  outlined init with take of (key: Int, value: AnyCRValue)?(v47, v37, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with take of (key: Int, value: AnyCRValue)?(v31, v38, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(_QWORD *)(v36 + v39) = v42;
LABEL_9:
  type metadata accessor for ImageElementView.ImageState(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a4;
  v5 = type metadata accessor for ContinuousClock();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  v4[10] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[11] = v6;
  return swift_task_switch();
}

uint64_t closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:);
  return v3(200000000000000000, 0, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[7] + 8))(v2[8], v2[6]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2)
  {
    v3 = (void *)v2;
    ImageElementView.setMissingImage()();

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void @objc ImageElementView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized ImageElementView.init(coder:)();
}

void ImageElementView.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PKStrokeProperties(v0 + direct field offset for ImageElementView.state, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of PKStrokeProperties(v0 + direct field offset for ImageElementView.presentedState, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of PKStrokeProperties(v0 + direct field offset for ImageElementView.image, type metadata accessor for ImageElementView.ImageOrFile);
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for ImageElementView.imageAnalysisDelegate);

}

id ImageElementView.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  objc_super v3;

  if (*(_QWORD *)&v0[direct field offset for ImageElementView.getImageTask])
  {
    v1 = swift_retain();
    MEMORY[0x1DF0E453C](v1, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ImageElementView(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id @objc ImageElementView.__deallocating_deinit(char *a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  objc_super v6;

  if (*(_QWORD *)&a1[direct field offset for ImageElementView.getImageTask])
  {
    v2 = a1;
    v3 = swift_retain();
    MEMORY[0x1DF0E453C](v3, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  else
  {
    v4 = a1;
  }
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for ImageElementView(0);
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

void @objc ImageElementView.__ivar_destroyer(uint64_t a1)
{

  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PKStrokeProperties(a1 + direct field offset for ImageElementView.state, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of PKStrokeProperties(a1 + direct field offset for ImageElementView.presentedState, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of PKStrokeProperties(a1 + direct field offset for ImageElementView.image, type metadata accessor for ImageElementView.ImageOrFile);
  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for ImageElementView.imageAnalysisDelegate);

}

uint64_t ImageElementView.modifiableProperties.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v6, v1);
  v10[0] = type metadata accessor for Image();
  v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v10[2] = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = 9;
  if ((v11 & 0x80) == 0)
    v7 = 11;
  v8 = 3;
  if ((v11 & 0x80) != 0)
    v8 = 1;
  if ((v11 & 0x10) != 0)
    v7 = v8;
  if ((v11 & 4) != 0)
    return 0;
  else
    return v7;
}

Swift::Void __swiftcall ImageElementView.layoutSubviews()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  void (*v14)(char *, uint64_t);
  __n128 v15;
  double v16;
  double v17;
  CGFloat tx;
  CGFloat ty;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  CGAffineTransform v27;
  CGAffineTransform t2;
  CGAffineTransform t1;
  objc_super v30;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (objc_class *)type metadata accessor for ImageElementView(0);
  v30.receiver = v1;
  v30.super_class = v7;
  objc_msgSendSuper2(&v30, sel_layoutSubviews);
  v8 = direct field offset for ImageElementView.contentView;
  v9 = *(void **)((char *)v1 + direct field offset for ImageElementView.contentView);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  objc_msgSend(v9, sel_setTransform_, &t1);
  v10 = *(id *)((char *)v1 + v8);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v10, sel_setFrame_);

  v11 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v11)
  {

    v12 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v13 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v13(v6, v12, v2);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v6, v2);
    v15.n128_u64[0] = *(_QWORD *)&t1.c;
    if (t1.c >= 0.0)
      v16 = 1.0;
    else
      v16 = -1.0;
    ((void (*)(char *, char *, uint64_t, __n128))v13)(v6, v12, v2, v15);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v14(v6, v2);
    if (t1.d >= 0.0)
      v17 = 1.0;
    else
      v17 = -1.0;
    CGAffineTransformMakeScale(&t1, v16, v17);
    v26 = *(_OWORD *)&t1.a;
    v25 = *(_OWORD *)&t1.c;
    tx = t1.tx;
    ty = t1.ty;
    v20 = *(void **)((char *)v1 + v8);
    v13(v6, v12, v2);
    swift_getKeyPath();
    v21 = v20;
    Capsule<>.subscript.getter();
    swift_release();
    v14(v6, v2);
    CGAffineTransformMakeRotation(&t1, t2.a);
    v22 = *(_OWORD *)&t1.a;
    v23 = *(_OWORD *)&t1.c;
    v24 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v26;
    *(_OWORD *)&t1.c = v25;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v22;
    *(_OWORD *)&t2.c = v23;
    *(_OWORD *)&t2.tx = v24;
    CGAffineTransformConcat(&v27, &t1, &t2);
    t1 = v27;
    objc_msgSend(v21, sel_setTransform_, &t1);

  }
}

void @objc ImageElementView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  ImageElementView.layoutSubviews()();

}

void __swiftcall ImageElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  void *v3;
  Class isa;
  double y;
  double x;
  id v7;
  char *v8;
  id v9;
  char v10;
  void *v11;
  id v12;
  objc_super v13;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for ImageElementView(0);
  v7 = -[UIView_optional hitTest:withEvent:](&v13, sel_hitTest_withEvent_, isa, x, y);
  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v8 = v3;
    v9 = v7;
    v10 = static NSObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {
      v11 = *(void **)&v8[direct field offset for ImageElementView.mediaView];
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v8, sel_convertPoint_toCoordinateSpace_, v12, x, y);
        objc_msgSend(v12, sel_hitTest_withEvent_, isa);

      }
    }
  }
}

id @objc ImageElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  ImageElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

void ImageElementView.updateImage(_:state:counter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  int v31;
  uint64_t v32;
  char *v33;
  _QWORD v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v7 = type metadata accessor for ImageElementView.ImageState(0);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v34 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v34 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v24 = (char *)v34 - v23;
  v25 = direct field offset for ImageElementView.imageSetCounter;
  if (*(_QWORD *)(v3 + direct field offset for ImageElementView.imageSetCounter) < a3)
  {
    v36 = a1;
    v37 = a2;
    v34[1] = v22;
    v38 = v21;
    v26 = v3 + direct field offset for ImageElementView.presentedState;
    swift_beginAccess();
    outlined init with copy of PKStrokeProperties(v26, (uint64_t)v24, type metadata accessor for ImageElementView.ImageState);
    swift_storeEnumTagMultiPayload();
    specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v24, (uint64_t)v18);
    v28 = v27;
    outlined destroy of PKStrokeProperties((uint64_t)v18, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of PKStrokeProperties((uint64_t)v24, type metadata accessor for ImageElementView.ImageState);
    if ((v28 & 1) != 0
      || (outlined init with copy of PKStrokeProperties(v26, (uint64_t)v24, type metadata accessor for ImageElementView.ImageState), swift_storeEnumTagMultiPayload(), specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v24, (uint64_t)v18), v30 = v29, outlined destroy of PKStrokeProperties((uint64_t)v18, type metadata accessor for ImageElementView.ImageState), outlined destroy of PKStrokeProperties((uint64_t)v24, type metadata accessor for ImageElementView.ImageState), (v30 & 1) != 0))
    {
      v35 = 1;
    }
    else
    {
      outlined init with copy of PKStrokeProperties(v26, (uint64_t)v24, type metadata accessor for ImageElementView.ImageState);
      swift_storeEnumTagMultiPayload();
      specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v24, (uint64_t)v18);
      v35 = v31;
      outlined destroy of PKStrokeProperties((uint64_t)v18, type metadata accessor for ImageElementView.ImageState);
      outlined destroy of PKStrokeProperties((uint64_t)v24, type metadata accessor for ImageElementView.ImageState);
    }
    outlined init with copy of PKStrokeProperties(v26, v38, type metadata accessor for ImageElementView.ImageState);
    v32 = v37;
    outlined init with copy of PKStrokeProperties(v37, (uint64_t)v24, type metadata accessor for ImageElementView.ImageState);
    swift_beginAccess();
    outlined assign with take of ImageElementView.ImageState((uint64_t)v24, v26);
    swift_endAccess();
    *(_QWORD *)(v3 + v25) = a3;
    outlined init with copy of PKStrokeProperties(v32, (uint64_t)v12, type metadata accessor for ImageElementView.ImageState);
    v33 = (char *)&loc_1DDE14C94 + 4 * byte_1DDF43B70[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
}

void sub_1DDE14E0C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ImageElementView.setMissingImage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;

  v1 = type metadata accessor for ImageElementView.ImageState(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v29 - v7;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v29 - v11;
  v13 = v0 + direct field offset for ImageElementView.presentedState;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v13, (uint64_t)v12, type metadata accessor for ImageElementView.ImageState);
  swift_storeEnumTagMultiPayload();
  specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v12, (uint64_t)v8);
  LOBYTE(v13) = v14;
  outlined destroy of PKStrokeProperties((uint64_t)v8, type metadata accessor for ImageElementView.ImageState);
  outlined init with copy of PKStrokeProperties((uint64_t)v12, (uint64_t)v4, type metadata accessor for ImageElementView.ImageState);
  if ((v13 & 1) != 0)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v4, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of PKStrokeProperties((uint64_t)v12, type metadata accessor for ImageElementView.ImageState);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v4, (uint64_t)v8);
    v16 = v15;
    outlined destroy of PKStrokeProperties((uint64_t)v8, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of PKStrokeProperties((uint64_t)v4, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of PKStrokeProperties((uint64_t)v12, type metadata accessor for ImageElementView.ImageState);
    if ((v16 & 1) == 0)
      return;
  }
  v17 = direct field offset for ImageElementView.contentView;
  objc_msgSend(*(id *)(v0 + direct field offset for ImageElementView.contentView), sel_bounds);
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithFrame_, v18, v19, v20, v21);
  objc_msgSend(*(id *)(v0 + v17), sel_addSubview_, v22);
  v23 = one-time initialization token for imageMissingBackgroundColor;
  v24 = v22;
  if (v23 != -1)
    swift_once();
  objc_msgSend(v24, sel_setBackgroundColor_, static UIConstants.imageMissingBackgroundColor);

  v25 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_, 80.0);
  v26 = (void *)MEMORY[0x1DF0E41AC](0x6F746F6870, 0xE500000000000000);
  v27 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v26, v25);

  objc_msgSend(v24, sel_setImage_, v27);
  objc_msgSend(v24, sel_setContentMode_, 4);
  if (one-time initialization token for imageMissingIconColor != -1)
    swift_once();
  objc_msgSend(v24, sel_setTintColor_, static UIConstants.imageMissingIconColor);
  objc_msgSend(v24, sel_setAutoresizingMask_, 18);
  v28 = *(void **)(v0 + direct field offset for ImageElementView.missingImageView);
  *(_QWORD *)(v0 + direct field offset for ImageElementView.missingImageView) = v24;

}

Swift::Void __swiftcall ImageElementView.updateMediaViewImageAnalysis()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  v1 = *(void **)(v0 + direct field offset for ImageElementView.mediaView);
  if (!v1)
    return;
  v2 = direct field offset for ImageElementView.isImageAnalysisEnabled;
  v3 = *(unsigned __int8 *)(v0 + direct field offset for ImageElementView.isImageAnalysisEnabled);
  v14 = v1;
  objc_msgSend(v14, sel_setIsImageAnalysisEnabled_, v3);
  v4 = v14;
  if (*(_BYTE *)(v0 + v2) != 1)
  {
LABEL_19:

    return;
  }
  v5 = objc_msgSend(v14, sel_imageAnalysisContext);
  if (v5)
  {
    objc_msgSend(v5, sel_setDelegate_, MEMORY[0x1DF0E666C](v0 + direct field offset for ImageElementView.imageAnalysisDelegate));
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  v6 = ImageElementView.pendingImageAnalysisObservers.getter();
  v7 = objc_msgSend(v6, sel_allObjects);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PPKPhotosMediaViewImageAnalysisInteractionContextObserver);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_7;
LABEL_18:
    swift_bridgeObjectRelease();
    v13 = ImageElementView.pendingImageAnalysisObservers.getter();
    objc_msgSend(v13, sel_removeAllObjects);

    v4 = v14;
    goto LABEL_19;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_18;
LABEL_7:
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        v11 = MEMORY[0x1DF0E4D64](i, v8);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      v12 = objc_msgSend(v14, sel_imageAnalysisContext);
      if (v12)
      {
        objc_msgSend(v12, sel_addAnalysisObserver_, v11);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_18;
  }
  __break(1u);
}

void ImageElementView.setImage(_:canAnimate:)(uint64_t a1, char a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char *v15;
  _QWORD aBlock[6];

  v5 = type metadata accessor for ImageElementView.ImageOrFile(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  if (*(_QWORD *)&v2[direct field offset for ImageElementView.mediaView] && (a2 & 1) != 0)
  {
    v9 = (void *)objc_opt_self();
    v10 = *(void **)&v2[direct field offset for ImageElementView.contentView];
    outlined init with copy of PKStrokeProperties(a1, (uint64_t)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ImageElementView.ImageOrFile);
    v11 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v2;
    outlined init with take of PKStrokeStruct((uint64_t)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for ImageElementView.ImageOrFile);
    aBlock[4] = partial apply for closure #1 in ImageElementView.setImage(_:canAnimate:);
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_49_1;
    v13 = _Block_copy(aBlock);
    v14 = v10;
    v15 = v2;
    swift_release();
    objc_msgSend(v9, sel_transitionWithView_duration_options_animations_completion_, v14, 5242880, v13, 0, 0.3);
    _Block_release(v13);

  }
  else
  {
    perform #1 () in ImageElementView.setImage(_:canAnimate:)((uint64_t)v2, a1);
  }
}

uint64_t perform #1 () in ImageElementView.setImage(_:canAnimate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE v17[24];

  v4 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = &v17[-v11];
  v13 = direct field offset for ImageElementView.missingImageView;
  objc_msgSend(*(id *)(a1 + direct field offset for ImageElementView.missingImageView), sel_removeFromSuperview, v10);
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = 0;

  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v12, type metadata accessor for ImageElementView.ImageOrFile);
  v15 = a1 + direct field offset for ImageElementView.image;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v15, (uint64_t)v7, type metadata accessor for ImageElementView.ImageOrFile);
  swift_beginAccess();
  outlined assign with copy of ImageElementView.ImageOrFile((uint64_t)v12, v15);
  swift_endAccess();
  ImageElementView.image.didset((uint64_t)v7);
  outlined destroy of PKStrokeProperties((uint64_t)v12, type metadata accessor for ImageElementView.ImageOrFile);
  return outlined destroy of PKStrokeProperties((uint64_t)v7, type metadata accessor for ImageElementView.ImageOrFile);
}

void ImageElementView.image.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  void (*v24)(char *, void **, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  NSURL *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  char *v39;
  id v40;
  NSURL *v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a1;
  v53 = type metadata accessor for URL();
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v2);
  v52 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRStableAsset();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (void **)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v50 - v15;
  v17 = v1;
  v18 = v1 + direct field offset for ImageElementView.image;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v18, (uint64_t)v16, type metadata accessor for ImageElementView.ImageOrFile);
  v19 = specialized static ImageElementView.ImageOrFile.== infix(_:_:)((uint64_t)v16, v54);
  outlined destroy of PKStrokeProperties((uint64_t)v16, type metadata accessor for ImageElementView.ImageOrFile);
  if ((v19 & 1) == 0)
  {
    v20 = v52;
    v21 = v53;
    outlined init with copy of PKStrokeProperties(v18, (uint64_t)v12, type metadata accessor for ImageElementView.ImageOrFile);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      v23 = v17;
      if (EnumCaseMultiPayload == 1)
      {
        v54 = v5;
        v24 = *(void (**)(char *, void **, uint64_t))(v5 + 32);
        v25 = v8;
        v26 = v4;
        v24(v8, v12, v4);
        v27 = direct field offset for ImageElementView.mediaView;
        v28 = *(void **)(v23 + direct field offset for ImageElementView.mediaView);
        if (v28)
        {
          v29 = v28;
          v30 = v20;
          CRStableAsset.url.getter();
          URL._bridgeToObjectiveC()(v31);
          v33 = v32;
          (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v21);
          objc_msgSend(v29, sel_setURL_, v33);

        }
        else
        {
          v39 = v20;
          CRStableAsset.url.getter();
          v40 = objc_allocWithZone((Class)PPKPhotosMediaView);
          URL._bridgeToObjectiveC()(v41);
          v43 = v42;
          v44 = objc_msgSend(v40, sel_initWithImageURL_, v42);

          (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v21);
          v45 = direct field offset for ImageElementView.contentView;
          objc_msgSend(*(id *)(v23 + direct field offset for ImageElementView.contentView), sel_bounds);
          objc_msgSend(v44, sel_setFrame_);
          objc_msgSend(v44, sel_setAutoresizingMask_, 18);
          objc_msgSend(v44, sel_setContentMode_, 2);
          objc_msgSend(v44, sel_setBackgroundColor_, 0);
          v46 = *(void **)(v23 + v27);
          *(_QWORD *)(v23 + v27) = v44;
          v33 = v44;

          v25 = v8;
          objc_msgSend(*(id *)(v23 + v45), sel_addSubview_, v33);
        }

        (*(void (**)(char *, uint64_t))(v54 + 8))(v25, v26);
      }
    }
    else
    {
      v34 = *v12;
      v35 = direct field offset for ImageElementView.mediaView;
      v36 = v17;
      v37 = *(void **)(v17 + direct field offset for ImageElementView.mediaView);
      if (v37)
      {
        v38 = v37;
        objc_msgSend(v38, sel_setImage_orientation_, v34, 0);
      }
      else
      {
        v47 = objc_msgSend(objc_allocWithZone((Class)PPKPhotosMediaView), sel_initWithImage_orientation_, v34, 0);
        v48 = direct field offset for ImageElementView.contentView;
        objc_msgSend(*(id *)(v36 + direct field offset for ImageElementView.contentView), sel_bounds);
        objc_msgSend(v47, sel_setFrame_);
        objc_msgSend(v47, sel_setAutoresizingMask_, 18);
        objc_msgSend(v47, sel_setContentMode_, 2);
        objc_msgSend(v47, sel_setBackgroundColor_, 0);
        v49 = *(void **)(v36 + v35);
        *(_QWORD *)(v36 + v35) = v47;
        v38 = v47;

        objc_msgSend(*(id *)(v36 + v48), sel_addSubview_, v38);
      }

    }
    ImageElementView.updateMediaViewImageAnalysis()();
  }
}

id ImageElementView.imageAnalysisDelegate.didset(id a1)
{
  uint64_t v1;
  uint64_t v3;
  id result;
  id v5;

  v3 = v1 + direct field offset for ImageElementView.imageAnalysisDelegate;
  result = (id)MEMORY[0x1DF0E666C](v1 + direct field offset for ImageElementView.imageAnalysisDelegate);
  if (result)
  {
    v5 = result;
    result = (id)swift_unknownObjectRelease();
    if (a1 && v5 == a1)
      return result;
  }
  else if (!a1)
  {
    return result;
  }
  result = *(id *)(v1 + direct field offset for ImageElementView.mediaView);
  if (result)
  {
    result = objc_msgSend(result, sel_imageAnalysisContext);
    if (result)
    {
      objc_msgSend(result, sel_setDelegate_, MEMORY[0x1DF0E666C](v3));
      swift_unknownObjectRelease();
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

id ImageElementView.pendingImageAnalysisObservers.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers;
  v2 = *(void **)(v0 + direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers);
  if (v2)
  {
    v3 = *(id *)(v0 + direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

Swift::Void __swiftcall ImageElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE v20[4];
  _BOOL4 v21;

  v21 = discard;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v20[-v10];
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (uint64_t)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x388);
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v11, &demangling cache variable for type metadata for Capsule<Image>?);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
  v16 = v15(v11, 1, v14);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Capsule<Image>?);
  if (v16 != 1
    || (v17 = *(_QWORD *)((char *)v2 + *(_QWORD *)((*v12 & *v2) + 0x4C0))) != 0
    && *(_QWORD *)(v17 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v7, &demangling cache variable for type metadata for Capsule<Image>?);
    v18 = v15(v7, 1, v14);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<Image>?);
    if (v18 != 1
      || (v19 = *(_QWORD *)((char *)v2 + *(_QWORD *)((*v12 & *v2) + 0x4C0))) != 0
      && *(_QWORD *)(v19 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
    {
      specialized CanvasElementView.endLiveEdit(undoable:discard:)(undoable, v21);
      specialized ContainerCanvasElementView.transformDrawing()();
    }
    ImageElementView.updateUI()();
  }
}

void @objc ImageElementView.didMoveToWindow()(void *a1)
{
  id v1;
  id v2;
  objc_super v3;

  v3.receiver = a1;
  v3.super_class = (Class)type metadata accessor for ImageElementView(0);
  v1 = v3.receiver;
  objc_msgSendSuper2(&v3, sel_didMoveToWindow);
  v2 = objc_msgSend(v1, sel_window, v3.receiver, v3.super_class);

  if (v2)
  {
    specialized ContainerCanvasElementView.screenScaleDidChange()();
    ImageElementView.updateUI()();
  }

}

Swift::Void __swiftcall ImageElementView.screenScaleDidChange()()
{
  specialized ContainerCanvasElementView.screenScaleDidChange()();
  ImageElementView.updateUI()();
}

uint64_t specialized ContainerCanvasElementView.screenScaleDidChange()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v0 = specialized ContainerCanvasElementView.subelementViews.getter();
  v1 = v0;
  if (!(v0 >> 62))
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    return swift_bridgeObjectRelease_n();
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v6 = (_QWORD *)MEMORY[0x1DF0E4D64](v4, v1);
      else
        v6 = *(id *)(v1 + 8 * v4 + 32);
      v7 = v6;
      ++v4;
      (*(void (**)(void))((*v5 & *v6) + 0x270))();

    }
    while (v2 != v4);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t ImageElementView.alwaysUseMaxResolutionImage.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F0));
}

void ImageElementView.alwaysUseMaxResolutionImage.setter(char a1)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4F0)) = a1;
  ImageElementView.updateUI()();
}

unint64_t ImageElementView.didZoom(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v2 = v1;
  v32 = type metadata accessor for DispatchTime();
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v4);
  v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v31 = (char *)&v28 - v8;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  result = specialized ContainerCanvasElementView.subelementViews.getter(v11);
  v13 = result;
  if (result >> 62)
  {
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v14 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      goto LABEL_10;
  }
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v15 = 0;
  v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  do
  {
    if ((v13 & 0xC000000000000001) != 0)
      v17 = (_QWORD *)MEMORY[0x1DF0E4D64](v15, v13);
    else
      v17 = *(id *)(v13 + 8 * v15 + 32);
    v18 = v17;
    ++v15;
    (*(void (**)(uint64_t))((*v16 & *v17) + 0x280))(a1);

  }
  while (v14 != v15);
LABEL_10:
  swift_bridgeObjectRelease();
  v19 = direct field offset for ImageElementView.updateAfterZoomWorkItem;
  if (*(_QWORD *)(v2 + direct field offset for ImageElementView.updateAfterZoomWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in ImageElementView.didZoom(in:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_50;
  _Block_copy(aBlock);
  v33 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  v21 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(_QWORD *)(v2 + v19) = v21;
  swift_release();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v22 = (void *)static OS_dispatch_queue.main.getter();
  v23 = v29;
  static DispatchTime.now()();
  v24 = v31;
  MEMORY[0x1DF0E26A0](v23, 0.2);
  v25 = *(uint64_t (**)(char *, uint64_t))(v30 + 8);
  v26 = v32;
  result = v25(v23, v32);
  v27 = *(_QWORD *)(v2 + v19);
  if (v27)
  {
    swift_retain();
    MEMORY[0x1DF0E4890](v24, v27);

    swift_release();
    return v25(v24, v26);
  }
LABEL_15:
  __break(1u);
  return result;
}

void closure #1 in ImageElementView.didZoom(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    ImageElementView.updateUI()();

  }
}

Swift::Void __swiftcall ImageElementView.updateHDR()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  BOOL v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  id v22;
  void (*v23)(char *, uint64_t);
  BOOL v24;
  uint64_t v25;

  v1 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v25 - v13;
  v15 = *(void **)((char *)v0 + direct field offset for ImageElementView.mediaView);
  if (v15)
  {
    v16 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v12);
    if (v16)
    {
      v17 = (void *)v16;
      v18 = v15;

      v19 = 0;
    }
    else
    {
      v20 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
      swift_beginAccess();
      v21 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v21(v14, v20, v5);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v22 = v15;
      Capsule<>.root.getter();
      v23 = *(void (**)(char *, uint64_t))(v6 + 8);
      v23(v14, v5);
      v21(v9, v20, v5);
      v24 = specialized ContainerCanvasElement.hasMarkup(in:)((uint64_t)v9);
      outlined destroy of PKStrokeProperties((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      v23(v9, v5);
      v19 = !v24;
    }
    objc_msgSend(v15, sel_setIsHDRAllowed_, v19);

  }
}

Swift::Void __swiftcall ImageElementView.didBeginDrawing()()
{
  uint64_t v0;
  void *v1;

  specialized ContainerCanvasElementView.didBeginDrawing()();
  v1 = *(void **)(v0 + direct field offset for ImageElementView.mediaView);
  if (v1)
    objc_msgSend(v1, sel_setIsHDRAllowed_, 0);
}

void specialized ContainerCanvasElementView.didBeginDrawing()()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;

  v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas;
  v2 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v4)
    {
      __break(1u);
      return;
    }
    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v6 = *v5;
    v7 = v5[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    if (*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = 1;
    }
    else
    {
      v9 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v9 != 0;
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E8)) = v8;
  v11 = (_QWORD *)MEMORY[0x1DF0E666C](v1);
  if (v11)
  {
    v12 = v11;
    (*(void (**)(_QWORD *))((*v10 & *v11) + 0x5C0))(v0);

  }
}

Swift::Void __swiftcall ImageElementView.didEndDrawing()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  BOOL v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  void (*v26)(char *, uint64_t);
  BOOL v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v28 - v14;
  v16 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v13);
  if (v16)
  {
    v17 = (void *)v16;
    AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);

  }
  v18 = *(void **)((char *)v1 + direct field offset for ImageElementView.mediaView);
  if (v18)
  {
    v19 = MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v19)
    {
      v20 = (void *)v19;
      v21 = v18;

      v22 = 0;
    }
    else
    {
      v23 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v24(v15, v23, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v25 = v18;
      Capsule<>.root.getter();
      v26 = *(void (**)(char *, uint64_t))(v7 + 8);
      v26(v15, v6);
      v24(v10, v23, v6);
      v27 = specialized ContainerCanvasElement.hasMarkup(in:)((uint64_t)v10);
      outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      v26(v10, v6);
      v22 = !v27;
    }
    objc_msgSend(v18, sel_setIsHDRAllowed_, v22);

  }
}

Swift::Void __swiftcall ImageElementView.updateUI()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(_QWORD);
  uint64_t v97;
  _QWORD *v98;
  double v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  char v104;
  double v105;
  id v106;
  void *v107;
  id v108;
  double v109;
  id v110;
  void *v111;
  id v112;
  id v113;
  double v114;
  CGFloat v115;
  double v116;
  CGFloat v117;
  double v118;
  CGFloat v119;
  double v120;
  CGFloat v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  double Width;
  double Height;
  double v129;
  void *v130;
  char *v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  id v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  void (*v204)(char *, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  CGRect v227;
  CGRect v228;

  v1 = v0;
  v196 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x1E0C80A78](v196, v2);
  v197 = (char *)&v186 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v211 = (uint64_t)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for CRAsset();
  v189 = *(_QWORD *)(v190 - 8);
  MEMORY[0x1E0C80A78](v190, v7);
  v188 = (char *)&v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = (void (*)(char *, uint64_t))type metadata accessor for ImageElementView.ImageState(0);
  v194 = *((_QWORD *)v204 - 1);
  MEMORY[0x1E0C80A78](v204, v9);
  v203 = (char *)&v186 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v213 = (uint64_t)&v186 - v13;
  v195 = v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v209 = (uint64_t)&v186 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v192 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v207 = (uint64_t)&v186 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v200 = (uint64_t)&v186 - v23;
  v193 = v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v215 = (uint64_t)&v186 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v191 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v206 = (uint64_t)&v186 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v199 = (uint64_t)&v186 - v33;
  v202 = v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v222 = (uint64_t)&v186 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v38, v39);
  v212 = (uint64_t)&v186 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for CRAssetOrData();
  v41 = *(_QWORD *)(v221 - 8);
  MEMORY[0x1E0C80A78](v221, v42);
  v205 = (uint64_t)&v186 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v45);
  v198 = (uint64_t)&v186 - v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v210 = (uint64_t)&v186 - v49;
  v201 = v50;
  MEMORY[0x1E0C80A78](v51, v52);
  v223 = (uint64_t)&v186 - v53;
  v54 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v54, v55);
  v57 = (char *)&v186 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v219 = (char *)&v186 - v60;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v62 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v63);
  v65 = (char *)&v186 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v66, v67);
  v69 = (char *)&v186 - v68;
  specialized ContainerCanvasElementView.updateGestures()();
  v187 = (char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement;
  v70 = (void *)MEMORY[0x1DF0E666C]();
  v220 = v54;
  v208 = v69;
  v214 = v41;
  if (v70)
  {

    specialized CanvasElementView.updateFrame()();
  }
  else
  {
    v71 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
    swift_beginAccess();
    v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v62 + 16))(v69, v71, v61);
    MEMORY[0x1E0C80A78](v72, v73);
    *(&v186 - 4) = v54;
    *(&v186 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    *(&v186 - 2) = (uint64_t)&protocol witness table for Image;
    swift_getKeyPath();
    v69 = v208;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v69, v61);
    objc_msgSend(v1, sel_setFrame_, 0.0, 0.0, v225);
  }
  v74 = (char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas;
  v75 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  v76 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v75)
  {
    v77 = v75;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v75) + 0x668))();

  }
  v78 = (char *)v1 + *(_QWORD *)((*v76 & *v1) + 0x380);
  swift_beginAccess();
  v79 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  v218 = v78;
  v217 = (unint64_t)v79;
  v79(v69, v78, v61);
  v80 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v81 = v69;
  v82 = (uint64_t)v219;
  v216 = v80;
  Capsule<>.root.getter();
  v83 = *(void (**)(char *, uint64_t))(v62 + 8);
  v83(v81, v61);
  outlined destroy of PKStrokeProperties(v82, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  specialized ContainerCanvasElementView.updateDrawing()();
  specialized ContainerCanvasElementView.updateSubelements()();
  v84 = *(void **)((char *)v1 + *(_QWORD *)((*v76 & *v1) + 0x4D0));
  if (v84)
  {
    v85 = v84;
    FormFillingView.updateUI()();

  }
  ImageElementView.updateHDR()();
  ((void (*)(char *, char *, uint64_t))v217)(v65, v218, v61);
  Capsule<>.root.getter();
  v83(v65, v61);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v86 = v212;
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48))(v86, 1, v221) != 1)
  {
    v204 = v83;
    outlined init with take of PKStrokeStruct(v86, v223, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    v98 = (_QWORD *)MEMORY[0x1DF0E666C](v74);
    v99 = 1.0;
    if (v98)
    {
      v100 = v98;
      v101 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      *(double *)&v102 = COERCE_DOUBLE((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v98) + 0x278))());
      v103 = v208;
      if ((v104 & 1) != 0)
      {
        v106 = objc_msgSend(v100, sel_window);
        if (v106)
        {
          v107 = v106;
          v108 = objc_msgSend(v106, sel_screen);

          objc_msgSend(v108, sel_scale);
          v99 = v109;

          v103 = v208;
        }
        else
        {

        }
      }
      else
      {
        v105 = *(double *)&v102;

        v99 = v105;
      }
    }
    else
    {
      v103 = v208;
      v101 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    }
    v110 = objc_msgSend(v1, sel_window);
    if (v110
      && (v111 = v110,
          v112 = objc_msgSend(v110, sel_screen),
          v111,
          v113 = objc_msgSend(v112, sel_coordinateSpace),
          v112,
          v113))
    {
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v1, sel_convertRect_toCoordinateSpace_, v113);
      v115 = v114;
      v117 = v116;
      v119 = v118;
      v121 = v120;
      swift_unknownObjectRelease();
    }
    else
    {
      objc_msgSend(v1, sel_bounds);
      v115 = v122;
      v117 = v123;
      v119 = v124;
      v121 = v125;
    }
    if ((*((_BYTE *)v1 + *(_QWORD *)((*v101 & *v1) + 0x4F0)) & 1) != 0)
    {
      v126 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v227.origin.x = v115;
      v227.origin.y = v117;
      v227.size.width = v119;
      v227.size.height = v121;
      Width = CGRectGetWidth(v227);
      v228.origin.x = v115;
      v228.origin.y = v117;
      v228.size.width = v119;
      v228.size.height = v121;
      Height = CGRectGetHeight(v228);
      if (Width > Height)
        Height = Width;
      v129 = v99 * Height;
      if ((~*(_QWORD *)&v129 & 0x7FF0000000000000) == 0)
        goto LABEL_53;
      if (v129 <= -9.22337204e18)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v129 >= 9.22337204e18)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        return;
      }
      v126 = (uint64_t)v129;
    }
    v212 = v126;
    if (one-time initialization token for isLowJetsamLimitEnvironment != -1)
      swift_once();
    if (static NSBundle.isLowJetsamLimitEnvironment == 1)
    {
      v130 = (void *)MEMORY[0x1DF0E666C](v187);
      if (v130)

      else
        v212 = 2048;
    }
    v131 = v218;
    v132 = (void (*)(char *, char *, uint64_t))v217;
    ((void (*)(char *, char *, uint64_t))v217)(v103, v218, v61);
    v133 = (uint64_t)v219;
    Capsule<>.root.getter();
    v134 = v204;
    v204(v103, v61);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v133, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    v132(v103, v131, v61);
    Capsule<>.root.getter();
    v134(v103, v61);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    v135 = v215;
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v133, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    v136 = objc_msgSend(v1, sel_traitCollection);
    v137 = (char *)objc_msgSend(v136, sel_imageDynamicRange);

    v138 = v223;
    outlined init with copy of PKStrokeProperties(v223, v210, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    v139 = v200;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v135, v200, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v140 = v199;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v222, v199, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v141 = v198;
    outlined init with copy of PKStrokeProperties(v138, v198, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of PKStrokeProperties(v141, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v224 = 0u;
      v225 = 0u;
      v226 = 0;
      v142 = 1;
    }
    else
    {
      v143 = v189;
      v144 = v188;
      v145 = v190;
      (*(void (**)(char *, uint64_t, uint64_t))(v189 + 32))(v188, v141, v190);
      CRAsset.assetManager.getter();
      (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
      CRAssetManager.encryptionDelegate.getter();
      swift_release();
      v142 = *((_QWORD *)&v225 + 1) == 0;
    }
    v146 = v209;
    v147 = v213;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v224, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    ImageElementView.ImageState.init(asset:filter:crop:maxDimensionInPixels:canUseFile:)(v210, v139, v140, v212, v142, v146);
    v148 = (uint64_t)v1 + direct field offset for ImageElementView.state;
    swift_beginAccess();
    outlined init with copy of PKStrokeProperties(v148, v147, type metadata accessor for ImageElementView.ImageState);
    specialized static ImageElementView.ImageState.== infix(_:_:)(v147, v146);
    v150 = v149;
    outlined destroy of PKStrokeProperties(v147, type metadata accessor for ImageElementView.ImageState);
    if ((v150 & 1) == 0)
    {
      v219 = v137;
      outlined init with copy of PKStrokeProperties(v146, v147, type metadata accessor for ImageElementView.ImageState);
      swift_beginAccess();
      outlined assign with take of ImageElementView.ImageState(v147, v148);
      swift_endAccess();
      v200 = direct field offset for ImageElementView.getThumbnailTask;
      v151 = MEMORY[0x1E0DEE9C0];
      if (*(_QWORD *)((char *)v1 + direct field offset for ImageElementView.getThumbnailTask))
      {
        v152 = swift_retain();
        MEMORY[0x1DF0E453C](v152, v151 + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
        swift_release();
      }
      v153 = v211;
      static TaskPriority.userInitiated.getter();
      v154 = type metadata accessor for TaskPriority();
      v155 = *(char **)(*(_QWORD *)(v154 - 8) + 56);
      v220 = v154;
      v208 = v155;
      ((void (*)(uint64_t, _QWORD, uint64_t))v155)(v153, 0, 1);
      v199 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v221 = direct field offset for ImageElementView.imageGetCounter;
      v198 = *(_QWORD *)((char *)v1 + direct field offset for ImageElementView.imageGetCounter);
      v156 = v205;
      outlined init with copy of PKStrokeProperties(v223, v205, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v157 = v207;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v215, v207, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      v158 = v206;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v222, v206, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      v159 = *(unsigned __int8 *)(v214 + 80);
      v214 = ~v159;
      v160 = (v159 + 32) & ~v159;
      v161 = (char *)*(unsigned __int8 *)(v192 + 80);
      v217 = ~(unint64_t)v161;
      v162 = (unint64_t)&v161[v201 + v160] & ~(unint64_t)v161;
      v163 = *(unsigned __int8 *)(v191 + 80);
      v210 = ~v163;
      v204 = (void (*)(char *, uint64_t))(v193 + v163);
      v164 = (v193 + v163 + v162) & ~v163;
      v218 = v161;
      v216 = v159;
      v203 = (char *)(v159 | (unint64_t)v161 | v163);
      v165 = (v202 + v164 + 7) & 0xFFFFFFFFFFFFFFF8;
      v166 = swift_allocObject();
      *(_QWORD *)(v166 + 16) = 0;
      *(_QWORD *)(v166 + 24) = 0;
      outlined init with take of PKStrokeStruct(v156, v166 + v160, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      outlined init with take of (key: Int, value: AnyCRValue)?(v157, v166 + v162, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with take of (key: Int, value: AnyCRValue)?(v158, v166 + v164, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      *(_QWORD *)(v166 + v165) = v199;
      *(_QWORD *)(v166 + ((v165 + 15) & 0xFFFFFFFFFFFFFFF8)) = v198;
      v167 = v211;
      v168 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v211, (uint64_t)&async function pointer to partial apply for closure #1 in ImageElementView.updateUI(), v166);
      outlined destroy of StocksKitCurrencyCache.Provider?(v167, &demangling cache variable for type metadata for TaskPriority?);
      *(_QWORD *)((char *)v1 + v200) = v168;
      swift_release();
      v200 = direct field offset for ImageElementView.getImageTask;
      if (*(_QWORD *)((char *)v1 + direct field offset for ImageElementView.getImageTask))
      {
        v169 = swift_retain();
        MEMORY[0x1DF0E453C](v169, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
        swift_release();
      }
      LODWORD(v219) = v219 != 0;
      v170 = v211;
      static TaskPriority.userInitiated.getter();
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v208)(v170, 0, 1, v220);
      v220 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v208 = *(char **)((char *)v1 + v221);
      v171 = v213;
      outlined init with copy of PKStrokeProperties(v209, v213, type metadata accessor for ImageElementView.ImageState);
      outlined init with copy of PKStrokeProperties(v223, v205, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v215, v207, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v222, v206, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      v172 = (*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
      v173 = (v195 + v172 + 7) & 0xFFFFFFFFFFFFFFF8;
      v174 = (v173 + 15) & 0xFFFFFFFFFFFFFFF8;
      v175 = (v216 + v174 + 8) & v214;
      v176 = (v201 + v175 + 7) & 0xFFFFFFFFFFFFFFF8;
      v177 = (unint64_t)&v218[v176 + 9] & v217;
      v178 = ((unint64_t)v204 + v177) & v210;
      v179 = swift_allocObject();
      *(_QWORD *)(v179 + 16) = 0;
      *(_QWORD *)(v179 + 24) = 0;
      outlined init with take of PKStrokeStruct(v171, v179 + v172, type metadata accessor for ImageElementView.ImageState);
      *(_QWORD *)(v179 + v173) = v220;
      *(_QWORD *)(v179 + v174) = v208;
      outlined init with take of PKStrokeStruct(v205, v179 + v175, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v180 = v179 + v176;
      *(_QWORD *)v180 = v212;
      *(_BYTE *)(v180 + 8) = (_BYTE)v219;
      outlined init with take of (key: Int, value: AnyCRValue)?(v207, v179 + v177, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with take of (key: Int, value: AnyCRValue)?(v206, v179 + v178, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      v181 = v211;
      v182 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v211, (uint64_t)&async function pointer to partial apply for specialized closure #2 in ImageElementView.updateUI(), v179);
      outlined destroy of StocksKitCurrencyCache.Provider?(v181, &demangling cache variable for type metadata for TaskPriority?);
      *(_QWORD *)((char *)v1 + v200) = v182;
      swift_release();
      v183 = *(_QWORD *)((char *)v1 + v221);
      v184 = __OFADD__(v183, 2);
      v185 = v183 + 2;
      if (v184)
        goto LABEL_56;
      *(_QWORD *)((char *)v1 + v221) = v185;
      v146 = v209;
    }
    outlined destroy of PKStrokeProperties(v146, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of StocksKitCurrencyCache.Provider?(v215, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v222, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v96 = (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData;
    v97 = v223;
    goto LABEL_50;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for CRAssetOrData?);
  v87 = (uint64_t)v1 + direct field offset for ImageElementView.state;
  swift_beginAccess();
  v88 = v213;
  outlined init with copy of PKStrokeProperties(v87, v213, type metadata accessor for ImageElementView.ImageState);
  v89 = (uint64_t)v203;
  swift_storeEnumTagMultiPayload();
  specialized static ImageElementView.ImageState.== infix(_:_:)(v88, v89);
  v91 = v90;
  outlined destroy of PKStrokeProperties(v89, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of PKStrokeProperties(v88, type metadata accessor for ImageElementView.ImageState);
  if ((v91 & 1) != 0)
    return;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of ImageElementView.ImageState(v88, v87);
  swift_endAccess();
  if (*(_QWORD *)((char *)v1 + direct field offset for ImageElementView.getImageTask))
  {
    v92 = swift_retain();
    MEMORY[0x1DF0E453C](v92, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v93 = *(_QWORD *)((char *)v1 + direct field offset for ImageElementView.imageGetCounter);
  v94 = v93 + 1;
  if (__OFADD__(v93, 1))
  {
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  *(_QWORD *)((char *)v1 + direct field offset for ImageElementView.imageGetCounter) = v94;
  v95 = (uint64_t)v197;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  ImageElementView.updateImage(_:state:counter:)(v95, v88, v94);
  outlined destroy of PKStrokeProperties(v88, type metadata accessor for ImageElementView.ImageState);
  v96 = type metadata accessor for ImageElementView.ImageOrFile;
  v97 = v95;
LABEL_50:
  outlined destroy of PKStrokeProperties(v97, v96);
}

uint64_t closure #1 in ImageElementView.updateUI()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  v8[11] = type metadata accessor for ImageElementView.ImageState(0);
  v8[12] = swift_task_alloc();
  v8[13] = type metadata accessor for ImageElementView.ImageOrFile(0);
  v8[14] = swift_task_alloc();
  v9 = type metadata accessor for CRAsset();
  v8[15] = v9;
  v8[16] = *(_QWORD *)(v9 - 8);
  v8[17] = swift_task_alloc();
  v8[18] = type metadata accessor for CRAssetOrData();
  v8[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ImageElementView.updateUI()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = v0[19];
  v2 = v0[6];
  v0[20] = static ImageThumbnailManager.shared;
  outlined init with copy of PKStrokeProperties(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v4 = (uint64_t *)v0[19];
  if (EnumCaseMultiPayload == 1)
  {
    v5 = *v4;
    v6 = v4[1];
    v7 = v4[2];
    v8 = v4[3];
    outlined copy of Data._Representation(*v4, v6);
    outlined consume of Data._Representation(v5, v6);
    outlined consume of Data._Representation(v7, v8);
  }
  else
  {
    v10 = v0[16];
    v9 = v0[17];
    v11 = v0[15];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v10 + 32))(v9, v4, v11);
    v5 = CRAsset.digest.getter();
    v6 = v12;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  v0[21] = v5;
  v0[22] = v6;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncCache.cached(for:)
                                                + async function pointer to specialized AsyncCache.cached(for:));
  v1 = (_QWORD *)swift_task_alloc();
  v0[23] = v1;
  *v1 = v0;
  v1[1] = closure #1 in ImageElementView.updateUI();
  return v3(v0[21], v0[22]);
}

{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  id v11;

  v1 = *(void **)(v0 + 192);
  if (!v1)
    goto LABEL_8;
  if (one-time initialization token for defaultFilterQueue != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 72) + 16;
  v3 = (void *)defaultFilterQueue;
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  type metadata accessor for CGImageRef(0);
  v6 = v3;
  OS_dispatch_queue.sync<A>(execute:)();

  swift_task_dealloc();
  v7 = *(void **)(v0 + 40);
  *(_QWORD *)(v0 + 200) = v7;
  swift_beginAccess();
  v8 = MEMORY[0x1DF0E666C](v2);
  *(_QWORD *)(v0 + 208) = v8;
  if (!v8)
  {

LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = *(_QWORD *)(v0 + 80);
  **(_QWORD **)(v0 + 112) = v7;
  swift_storeEnumTagMultiPayload();
  result = swift_storeEnumTagMultiPayload();
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 216) = v9 + 1;
    type metadata accessor for MainActor();
    v11 = v7;
    *(_QWORD *)(v0 + 224) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[27];
  v2 = (void *)v0[26];
  v3 = v0[14];
  v4 = v0[12];
  swift_release();
  ImageElementView.updateImage(_:state:counter:)(v3, v4, v1);

  outlined destroy of PKStrokeProperties(v4, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of PKStrokeProperties(v3, type metadata accessor for ImageElementView.ImageOrFile);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 192);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ImageElementView.updateUI()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized closure #2 in ImageElementView.updateUI()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 112) = v13;
  *(_QWORD *)(v8 + 120) = v14;
  *(_BYTE *)(v8 + 296) = v12;
  *(_QWORD *)(v8 + 96) = a7;
  *(_QWORD *)(v8 + 104) = a8;
  *(_QWORD *)(v8 + 80) = a5;
  *(_QWORD *)(v8 + 88) = a6;
  *(_QWORD *)(v8 + 72) = a4;
  *(_QWORD *)(v8 + 128) = type metadata accessor for ImageElementView.ImageOrFile(0);
  *(_QWORD *)(v8 + 136) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRStableAsset?);
  *(_QWORD *)(v8 + 144) = swift_task_alloc();
  v9 = type metadata accessor for CRStableAsset();
  *(_QWORD *)(v8 + 152) = v9;
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  *(_QWORD *)(v8 + 176) = type metadata accessor for ImageElementView.ImageState(0);
  *(_QWORD *)(v8 + 184) = swift_task_alloc();
  v10 = type metadata accessor for CRAsset();
  *(_QWORD *)(v8 + 192) = v10;
  *(_QWORD *)(v8 + 200) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #2 in ImageElementView.updateUI()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;

  outlined init with copy of PKStrokeProperties(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 184), type metadata accessor for ImageElementView.ImageState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 32))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v1;
    *v1 = v0;
    v1[1] = specialized closure #2 in ImageElementView.updateUI();
    return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
  }
  else
  {
    outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 184), type metadata accessor for ImageElementView.ImageState);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v3;
    *v3 = v0;
    v3[1] = specialized closure #2 in ImageElementView.updateUI();
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(*(_QWORD *)(v0 + 104), 1, *(_BYTE *)(v0 + 296));
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
    outlined destroy of StocksKitCurrencyCache.Provider?(v3, &demangling cache variable for type metadata for CRStableAsset?);
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 80) + 16;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 168), v3, v1);
  swift_beginAccess();
  v5 = MEMORY[0x1DF0E666C](v4);
  *(_QWORD *)(v0 + 240) = v5;
  if (!v5)
  {
    v9 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  result = swift_storeEnumTagMultiPayload();
  if (__OFADD__(v6, 2))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 248) = v6 + 2;
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 256) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  id v11;

  v1 = *(void **)(v0 + 232);
  if (!v1)
    goto LABEL_8;
  if (one-time initialization token for defaultFilterQueue != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 80) + 16;
  v3 = (void *)defaultFilterQueue;
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 112);
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  type metadata accessor for CGImageRef(0);
  v6 = v3;
  OS_dispatch_queue.sync<A>(execute:)();

  swift_task_dealloc();
  v7 = *(void **)(v0 + 64);
  *(_QWORD *)(v0 + 264) = v7;
  swift_beginAccess();
  v8 = MEMORY[0x1DF0E666C](v2);
  *(_QWORD *)(v0 + 272) = v8;
  if (!v8)
  {

LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = *(_QWORD *)(v0 + 88);
  **(_QWORD **)(v0 + 136) = v7;
  result = swift_storeEnumTagMultiPayload();
  if (__OFADD__(v9, 2))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 280) = v9 + 2;
    type metadata accessor for MainActor();
    v11 = v7;
    *(_QWORD *)(v0 + 288) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[31];
  v2 = (void *)v0[30];
  v3 = v0[17];
  v4 = v0[9];
  swift_release();
  ImageElementView.updateImage(_:state:counter:)(v3, v4, v1);

  outlined destroy of PKStrokeProperties(v3, type metadata accessor for ImageElementView.ImageOrFile);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[35];
  v2 = (void *)v0[34];
  v3 = v0[17];
  v4 = v0[9];
  swift_release();
  ImageElementView.updateImage(_:state:counter:)(v3, v4, v1);

  outlined destroy of PKStrokeProperties(v3, type metadata accessor for ImageElementView.ImageOrFile);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 232);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #2 in ImageElementView.updateUI()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in ImageElementView.updateUI()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in ImageElementView.updateUI()()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  CRStableAsset.init(url:extension:)();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ImageElementView.drawingDidChange(newDrawing:)(char *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  BOOL v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  id v23;
  void (*v24)(char *, uint64_t);
  BOOL v25;
  uint64_t v26;

  v3 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v26 - v14;
  specialized ContainerCanvasElementView.drawingDidChange(newDrawing:)(a1);
  v16 = *(void **)((char *)v1 + direct field offset for ImageElementView.mediaView);
  if (v16)
  {
    v17 = MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v17)
    {
      v18 = (void *)v17;
      v19 = v16;

      v20 = 0;
    }
    else
    {
      v21 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v22 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v22(v15, v21, v7);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v23 = v16;
      Capsule<>.root.getter();
      v24 = *(void (**)(char *, uint64_t))(v8 + 8);
      v24(v15, v7);
      v22(v11, v21, v7);
      v25 = specialized ContainerCanvasElement.hasMarkup(in:)((uint64_t)v11);
      outlined destroy of PKStrokeProperties((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      v24(v11, v7);
      v20 = !v25;
    }
    objc_msgSend(v16, sel_setIsHDRAllowed_, v20);

  }
}

void specialized ContainerCanvasElementView.drawingDidChange(newDrawing:)(char *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ObjectType;
  void (*v47)(uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  _QWORD v60[4];

  v58 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v59 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v50 - v21;
  v23 = *MEMORY[0x1E0DEEDD8] & *v1;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v23 + 0x4F8)) & 1) != 0)
    return;
  v50 = v6;
  v51 = v3;
  v52 = v2;
  v56 = v20;
  v57 = v1;
  v24 = (char *)v1 + *(_QWORD *)(v23 + 896);
  swift_beginAccess();
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 16);
  v55 = v24;
  v53 = v25;
  v26 = ((uint64_t (*)(char *, char *, uint64_t))v25)(v22, v24, v15);
  MEMORY[0x1E0C80A78](v26, v27);
  v54 = type metadata accessor for Image();
  *(&v50 - 4) = (char *)v54;
  *(&v50 - 3) = (char *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  *(&v50 - 2) = (char *)&protocol witness table for Image;
  v28 = v15;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v29 = *(void (**)(char *, uint64_t))(v16 + 8);
  v29(v22, v15);
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v14, 1, v30);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v32 = v58;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v10, v58, v7);
  if (v31 == 1)
  {
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v33 = v50;
    Capsule<>.subscript.getter();
    swift_release();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC8]);
    v34 = v52;
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    v36 = v60[0];
    v35 = v60[1];
    (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v34);
    v37 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v10, v7);
    v40 = v55;
    v39 = v56;
    v41 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v35 != v36)
    {
      MEMORY[0x1E0C80A78](v37, v38);
      *(&v50 - 2) = v32;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      goto LABEL_7;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v7);
    v40 = v55;
    v39 = v56;
    v41 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  }
  swift_beginAccess();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule.merge<A>(_:)();
LABEL_7:
  swift_endAccess();
  v42 = MEMORY[0x1DF0E666C]((char *)v57 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v42)
  {
    v43 = (_QWORD *)v42;
    v44 = v42 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    if (MEMORY[0x1DF0E666C](v44))
    {
      v45 = *(_QWORD *)(v44 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v45 + 16))(v43, ObjectType, v45);
      swift_unknownObjectRelease();
    }
    v53(v39, v40, v28);
    LOBYTE(v60[0]) = 4;
    v47 = *(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))((*v41 & *v43) + 0x538);
    v48 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v47(v39, v60, v54, v48);
    LOBYTE(v60[0]) = 4;
    (*(void (**)(_QWORD *))((*v41 & *v43) + 0x518))(v60);
    v49 = ((uint64_t (*)(uint64_t, uint64_t))v29)(v39, v28);
    (*(void (**)(uint64_t))((*v41 & *v43) + 0x318))(v49);

  }
}

Swift::OpaquePointer_optional __swiftcall ImageElementView.pasteboardRepresentation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  Swift::Bool v17;
  unint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BYTE v30[80];
  Swift::OpaquePointer_optional result;

  v1 = type metadata accessor for CRStableAsset();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (uint64_t *)&v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = v0 + direct field offset for ImageElementView.image;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v15, (uint64_t)v14, type metadata accessor for ImageElementView.ImageOrFile);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v18 = 0;
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v2 + 32))(v5, v14, v1);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
      static UTType.url.getter();
      v20 = UTType.identifier.getter();
      v22 = v21;
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
      *(_QWORD *)(inited + 32) = v20;
      *(_QWORD *)(inited + 40) = v22;
      *(_QWORD *)(inited + 72) = type metadata accessor for URL();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
      CRStableAsset.url.getter();
      v18 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
    }
  }
  else
  {
    v23 = *v14;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v24 = swift_initStackObject();
    *(_OWORD *)(v24 + 16) = xmmword_1DDF32CF0;
    static UTType.png.getter();
    v25 = UTType.identifier.getter();
    v27 = v26;
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v27;
    type metadata accessor for CGImageRef(0);
    *(_QWORD *)(v24 + 72) = v28;
    *(_QWORD *)(v24 + 48) = v23;
    v18 = specialized Dictionary.init(dictionaryLiteral:)(v24);
  }
  v29 = (void *)v18;
  result.value._rawValue = v29;
  result.is_nil = v17;
  return result;
}

id @objc ImageElementView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_, *(_QWORD *)(a1 + direct field offset for ImageElementView.contentView));
}

uint64_t type metadata accessor for ImageElementView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for ImageElementView);
}

uint64_t type metadata completion function for ImageElementView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ImageElementView.ImageState(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ImageElementView.ImageOrFile(319);
    if (v2 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

id ImageElementView.dragInteractionPreviewForLifting(item:session:)()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_, *(_QWORD *)(v0 + direct field offset for ImageElementView.contentView));
}

void specialized ContainerCanvasElementView.updateGestures()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  Class isa;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;

  v1 = v0;
  specialized CanvasElementView.updateGestures()();
  v2 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x320))();

    if (v5)
    {
      v6 = objc_msgSend(v5, sel_canvasView);

      if (v6)
      {
        v7 = objc_msgSend(v6, sel_drawingGestureRecognizer);

        v20 = objc_msgSend(v7, sel_view);
        if (v20)
        {
          v8 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
          if (v8)
          {

            if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
              goto LABEL_15;
          }
          v9 = *(_QWORD *)((*v4 & *v1) + 0x4E0);
          if (*(_QWORD *)((char *)v1 + v9))
            goto LABEL_15;
          v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v1, sel_rootTapped_);
          v11 = *(void **)((char *)v1 + v9);
          *(_QWORD *)((char *)v1 + v9) = v10;

          v12 = *(void **)((char *)v1 + v9);
          if (v12)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_1DDF35440;
            v14 = v12;
            *(NSNumber *)(v13 + 32) = Int._bridgeToObjectiveC()();
            v21 = v13;
            specialized Array._endMutation()();
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v14, sel_setAllowedTouchTypes_, isa);

            v16 = *(void **)((char *)v1 + v9);
            if (v16)
            {
              v17 = one-time initialization token for selectionAllowableMovementForFingerDrawingTap;
              v18 = v16;
              if (v17 != -1)
                swift_once();
              objc_msgSend(v18, sel_setAllowableMovement_, *(double *)&static UIConstants.selectionAllowableMovementForFingerDrawingTap, v20, v21);

              v19 = *(void **)((char *)v1 + v9);
              if (v19)
              {
                objc_msgSend(v19, sel_setDelegate_, v1);
                if (*(_QWORD *)((char *)v1 + v9))
                {
                  objc_msgSend(v20, sel_addGestureRecognizer_);
LABEL_15:

                  return;
                }
              }
            }
          }
          __break(1u);
        }
      }
    }
  }
}

void specialized ContainerCanvasElementView.transformDrawing()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  double a;
  double b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  double v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  double height;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  Class isa;
  uint64_t v69;
  void *v70;
  char *v71;
  _UNKNOWN **v72;
  uint64_t v73;
  char *v74;
  CGAffineTransform aBlock;
  CGAffineTransform v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v73 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4C0);
  v17 = *(void **)((char *)v1 + v16);
  if (v17)
  {
    v74 = v17;
    objc_msgSend(v74, sel_frame);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v25 = v24;
    objc_msgSend(v1, sel_bounds);
    v80.origin.x = v26;
    v80.origin.y = v27;
    v80.size.width = v28;
    v80.size.height = v29;
    v77.origin.x = v19;
    v77.origin.y = v21;
    v77.size.width = v23;
    v77.size.height = v25;
    if (CGRectEqualToRect(v77, v80))
    {

      return;
    }
    v73 = v16;
    v76.a = 1.0;
    v76.b = 0.0;
    v76.c = 0.0;
    v76.d = 1.0;
    v76.tx = 0.0;
    v76.ty = 0.0;
    objc_msgSend(v74, sel_setTransform_, &v76);
    v30 = v74;
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v30, sel_setFrame_);

    v31 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v31)
    {

      v32 = (char *)v1 + *(_QWORD *)((*v15 & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v32, v10);
      v74 = v5;
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v73 - 4) = type metadata accessor for Image();
      *(&v73 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v72 = &protocol witness table for Image;
      v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      swift_getKeyPath();
      v35 = v30;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      CGAffineTransformMakeRotation(&v76, aBlock.a);
      objc_msgSend(v35, sel_setTransform_, &v76);

      v5 = v74;
    }
    resize #1 <A>() in ContainerCanvasElementView.transformDrawing()(v30, &v76.a);
    a = v76.a;
    b = v76.b;
    c = v76.c;
    d = v76.d;
    tx = v76.tx;
    ty = v76.ty;
    v42 = sqrt(a * a + b * b);
    v43 = (uint64_t)v1 + *(_QWORD *)((*v15 & *v1) + 0x388);
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v43, (uint64_t)v9, &demangling cache variable for type metadata for Capsule<Image>?);
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
    v45 = v44(v9, 1, v10);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<Image>?);
    v46 = v73;
    if (v45 != 1
      || (v47 = *(_QWORD *)((char *)v1 + v73)) != 0
      && *(_QWORD *)(v47 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
    {
      v48 = v42 < 0.5;
    }
    else
    {
      objc_msgSend(v1, sel_bounds);
      aBlock.a = a;
      aBlock.b = b;
      aBlock.c = c;
      aBlock.d = d;
      aBlock.tx = tx;
      aBlock.ty = ty;
      v79 = CGRectApplyAffineTransform(v78, &aBlock);
      x = v79.origin.x;
      y = v79.origin.y;
      width = v79.size.width;
      height = v79.size.height;
      objc_msgSend(v1, sel_bounds);
      if (!CGRect.almostEqual(_:threshold:)(v53, v54, v55, v56, 0.5, x, y, width, height))
        goto LABEL_22;
      v48 = v42 < 0.5;
    }
    if (!v48 && v42 <= 2.0)
    {
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v43, (uint64_t)v5, &demangling cache variable for type metadata for Capsule<Image>?);
      v58 = v44(v5, 1, v10);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Capsule<Image>?);
      if (v58 == 1)
      {
        v59 = *(_QWORD *)((char *)v1 + v46);
        if (!v59 || !*(_QWORD *)(v59 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
        {
          v60 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
          if (v60)
          {
            v61 = v60;
            v62 = (void *)(*(uint64_t (**)(void))((*v15 & *v60) + 0x320))();

            objc_msgSend(v62, sel_updateTilesForVisibleRect);
          }
        }
      }
LABEL_25:

      return;
    }
LABEL_22:
    v63 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v63)
    {
      v64 = v63;
      v65 = (void *)(*(uint64_t (**)(void))((*v15 & *v63) + 0x320))();

      if (v65)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_1DDF35440;
        *(_QWORD *)(v66 + 32) = v30;
        *(_QWORD *)&aBlock.a = v66;
        specialized Array._endMutation()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
        v67 = v30;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v69 = swift_allocObject();
        *(_QWORD *)(v69 + 16) = v67;
        *(_QWORD *)&aBlock.tx = partial apply for closure #1 in ContainerCanvasElementView.transformDrawing();
        *(_QWORD *)&aBlock.ty = v69;
        *(_QWORD *)&aBlock.a = MEMORY[0x1E0C809B0];
        *(_QWORD *)&aBlock.b = 1107296256;
        *(_QWORD *)&aBlock.c = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
        *(_QWORD *)&aBlock.d = &block_descriptor_33_1;
        v70 = _Block_copy(&aBlock);
        v71 = v67;
        swift_release();
        objc_msgSend(v65, sel_resizeTiles_completion_, isa, v70);

        _Block_release(v70);
        return;
      }
    }
    goto LABEL_25;
  }
}

uint64_t type metadata accessor for ImageElementView.ImageState(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for ImageElementView.ImageState);
}

uint64_t type metadata accessor for ImageElementView.ImageOrFile(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for ImageElementView.ImageOrFile);
}

uint64_t ObjC metadata update function for ImageElementView()
{
  return type metadata accessor for ImageElementView(0);
}

char *initializeBufferWithCopyOfBuffer for ImageElementView.ImageOrFile(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v10[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for CRStableAsset();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = *a2;
      *(_QWORD *)a1 = *a2;
      v9 = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for ImageElementView.ImageOrFile(id *a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v3 = type metadata accessor for CRStableAsset();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!EnumCaseMultiPayload)
  {

  }
}

void **initializeWithCopy for ImageElementView.ImageOrFile(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for CRStableAsset();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *a2;
    *a1 = *a2;
    v8 = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void **assignWithCopy for ImageElementView.ImageOrFile(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of PKStrokeProperties((uint64_t)a1, type metadata accessor for ImageElementView.ImageOrFile);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for CRStableAsset();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = *a2;
      *a1 = *a2;
      v8 = v7;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for ImageElementView.ImageOrFile(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for CRStableAsset();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ImageElementView.ImageOrFile(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of PKStrokeProperties((uint64_t)a1, type metadata accessor for ImageElementView.ImageOrFile);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for CRStableAsset();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ImageElementView.ImageOrFile()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CRStableAsset();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ImageElementView.ImageState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
LABEL_17:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for CRAssetOrData();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v8 = *a2;
        v9 = a2[1];
        outlined copy of Data._Representation(*a2, v9);
        *a1 = v8;
        a1[1] = v9;
        v10 = a2[2];
        v11 = a2[3];
        outlined copy of Data._Representation(v10, v11);
        a1[2] = v10;
        a1[3] = v11;
      }
      else
      {
        v14 = type metadata accessor for CRAsset();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      }
      swift_storeEnumTagMultiPayload();
      v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
      v16 = v15[12];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v22 = v15[16];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      *(uint64_t *)((char *)a1 + v15[20]) = *(uint64_t *)((char *)a2 + v15[20]);
      goto LABEL_17;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for ImageElementView.ImageState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for CRAsset();
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v5 = a1;
    return v4(v5, v3);
  }
  if (!(_DWORD)result)
  {
    type metadata accessor for CRAssetOrData();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    }
    else
    {
      v6 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    }
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    v8 = a1 + *(int *)(v7 + 48);
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = a1 + *(int *)(v7 + 64);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v13 = *(_QWORD *)(v12 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
    if (!(_DWORD)result)
    {
      v4 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
      v5 = v11;
      v3 = v12;
      return v4(v5, v3);
    }
  }
  return result;
}

uint64_t *initializeWithCopy for ImageElementView.ImageState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for CRAssetOrData();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = *a2;
      v8 = a2[1];
      outlined copy of Data._Representation(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      v9 = a2[2];
      v10 = a2[3];
      outlined copy of Data._Representation(v9, v10);
      a1[2] = v9;
      a1[3] = v10;
    }
    else
    {
      v12 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    }
    swift_storeEnumTagMultiPayload();
    v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    v14 = v13[12];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = v13[16];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(uint64_t *)((char *)a1 + v13[20]) = *(uint64_t *)((char *)a2 + v13[20]);
    goto LABEL_15;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for ImageElementView.ImageState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    outlined destroy of PKStrokeProperties((uint64_t)a1, type metadata accessor for ImageElementView.ImageState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for CRAssetOrData();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v7 = *a2;
        v8 = a2[1];
        outlined copy of Data._Representation(*a2, v8);
        *a1 = v7;
        a1[1] = v8;
        v9 = a2[2];
        v10 = a2[3];
        outlined copy of Data._Representation(v9, v10);
        a1[2] = v9;
        a1[3] = v10;
      }
      else
      {
        v12 = type metadata accessor for CRAsset();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      }
      swift_storeEnumTagMultiPayload();
      v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
      v14 = v13[12];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = v13[16];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(uint64_t *)((char *)a1 + v13[20]) = *(uint64_t *)((char *)a2 + v13[20]);
      goto LABEL_16;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for ImageElementView.ImageState(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for CRAssetOrData();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    v11 = v10[12];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = v10[16];
    v18 = &a1[v17];
    v19 = &a2[v17];
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    *(_QWORD *)&a1[v10[20]] = *(_QWORD *)&a2[v10[20]];
    goto LABEL_15;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ImageElementView.ImageState(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    outlined destroy of PKStrokeProperties((uint64_t)a1, type metadata accessor for ImageElementView.ImageState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for CRAssetOrData();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v9 = type metadata accessor for CRAsset();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
      v11 = v10[12];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v17 = v10[16];
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      *(_QWORD *)&a1[v10[20]] = *(_QWORD *)&a2[v10[20]];
      goto LABEL_16;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void type metadata completion function for ImageElementView.ImageState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;

  type metadata accessor for CRAssetOrData();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TaggedValue_1<CRExtensible<BasicImageFilter>>?(319, &lazy cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TaggedValue_1<CRExtensible<BasicImageFilter>>?(319, &lazy cache variable for type metadata for TaggedValue_2<CGRect, Quad>?, &demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      if (v2 <= 0x3F)
      {
        swift_getTupleTypeLayout();
        v6 = &v5;
        v3 = type metadata accessor for CRAsset();
        if (v4 <= 0x3F)
        {
          v7 = *(_QWORD *)(v3 - 8) + 64;
          swift_initEnumMetadataMultiPayload();
        }
      }
    }
  }
}

void type metadata accessor for TaggedValue_1<CRExtensible<BasicImageFilter>>?(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t specialized closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[4];

  v0 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule.Ref.import<A>(_:)();
  v8[0] = type metadata accessor for Image();
  v8[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v8[2] = &protocol witness table for Image;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule<>.rootID.getter();
  Ref.init(id:)();
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t result;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_13;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
    goto LABEL_9;
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v20 & 1) != (v23 & 1))
  {
LABEL_13:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v22;
LABEL_9:
  v24 = a3 & 1;
  v25 = *v7;
  if ((v20 & 1) != 0)
  {
    v26 = v25[7] + 24 * v16;
    result = *(_QWORD *)v26;
    *(_QWORD *)v26 = a1;
    *(_QWORD *)(v26 + 8) = a2;
    *(_BYTE *)(v26 + 16) = v24 != 0;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a4, a5, a1, a2, v24, v25);
    outlined copy of Data._Representation(a4, a5);
    return 0;
  }
  return result;
}

BOOL specialized ContainerCanvasElement.hasMarkup(in:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v2);
  v34 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v36, v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v12 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  v38 = v12;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v20, a1, v16, v18);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v41 == v40)
  {
    v22 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    v23 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v10, 1, v37) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v24 = 0;
    }
    else
    {
      v25 = v38;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v15, v10, v23);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Capsule<Image> and conformance Capsule<A>, &demangling cache variable for type metadata for Capsule<Image>, MEMORY[0x1E0D12B28]);
      v26 = (uint64_t)v6;
      Ref.subscript.getter();
      v27 = &v6[*(int *)(v22 + 20)];
      v29 = v33;
      v28 = v34;
      v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v34, v27, v35);
      outlined destroy of PKStrokeProperties(v26, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC8]);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      v24 = v41 != v40;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v23);
    }
  }
  else
  {
    v24 = 1;
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v16);
  return v24;
}

void specialized ImageElementView.addImageAnalysisObserver(_:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a2 + direct field offset for ImageElementView.mediaView);
  if (v3)
  {
    v5 = v3;
    v4 = objc_msgSend(v5, sel_imageAnalysisContext);
    if (v4)
    {
      objc_msgSend(v4, sel_addAnalysisObserver_, a1);

      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    v5 = ImageElementView.pendingImageAnalysisObservers.getter();
    objc_msgSend(v5, sel_addObject_, a1);
  }

}

uint64_t specialized closure #1 in AsyncCache.cached(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 56) = a3;
  *(_QWORD *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  *(_OWORD *)(v5 + 16) = *a5;
  return swift_task_switch();
}

uint64_t specialized closure #1 in AsyncCache.cached(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 64);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type AsyncCache<Data, CGImageRef> and conformance AsyncCache<A, B>, &demangling cache variable for type metadata for AsyncCache<Data, CGImageRef>, (uint64_t)&protocol conformance descriptor for AsyncCache<A, B>);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v2 + 32) = v1;
  *(_QWORD *)(v2 + 40) = v0 + 16;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGImageRef?);
  *v3 = v0;
  v3[1] = specialized closure #1 in AsyncCache.cached(for:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 40) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #2 in AsyncCache.cached(for:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v20;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a2;
  v14 = a2[1];
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  v17 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = a1;
  *((_QWORD *)v18 + 5) = v15;
  *((_QWORD *)v18 + 6) = v14;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v18[v17], (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  outlined copy of Data._Representation(v15, v14);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #2 in AsyncCache.cached(for:), (uint64_t)v18);
  return swift_release();
}

uint64_t specialized closure #1 in closure #2 in AsyncCache.cached(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = a6;
  *(_OWORD *)(v6 + 32) = *a5;
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #2 in AsyncCache.cached(for:)()
{
  uint64_t v0;

  specialized AsyncCache.cancel(for:uuid:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static ImageElementView.ImageOrFile.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void **v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void *v42;
  void *v43;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for URL();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v46 = (char *)&v45 - v9;
  v10 = type metadata accessor for CRStableAsset();
  v50 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v45 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v45 - v15;
  v17 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (void **)((char *)&v45 - v23);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageElementView.ImageOrFile, ImageElementView.ImageOrFile));
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (void **)&v28[*(int *)(v29 + 48)];
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v28, type metadata accessor for ImageElementView.ImageOrFile);
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v30, type metadata accessor for ImageElementView.ImageOrFile);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of PKStrokeProperties((uint64_t)v28, (uint64_t)v24, type metadata accessor for ImageElementView.ImageOrFile);
    v42 = *v24;
    if (!swift_getEnumCaseMultiPayload())
    {
      v43 = *v30;

      v37 = v42 == v43;
      goto LABEL_12;
    }

    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of PKStrokeProperties((uint64_t)v28, (uint64_t)v20, type metadata accessor for ImageElementView.ImageOrFile);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v32 = v50;
      v33 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
      v33(v16, v20, v10);
      v34 = v45;
      v33(v45, (char *)v30, v10);
      v35 = v46;
      CRStableAsset.url.getter();
      v36 = v47;
      CRStableAsset.url.getter();
      v37 = MEMORY[0x1DF0E117C](v35, v36);
      v38 = *(void (**)(char *, uint64_t))(v48 + 8);
      v39 = v36;
      v40 = v49;
      v38(v39, v49);
      v38(v35, v40);
      v41 = *(void (**)(char *, uint64_t))(v32 + 8);
      v41(v34, v10);
      v41(v16, v10);
LABEL_12:
      outlined destroy of PKStrokeProperties((uint64_t)v28, type metadata accessor for ImageElementView.ImageOrFile);
      return v37 & 1;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v10);
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for (ImageElementView.ImageOrFile, ImageElementView.ImageOrFile));
    v37 = 0;
    return v37 & 1;
  }
  outlined destroy of PKStrokeProperties((uint64_t)v28, type metadata accessor for ImageElementView.ImageOrFile);
  v37 = 1;
  return v37 & 1;
}

void specialized static ImageElementView.ImageState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _QWORD v46[6];
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for CRAsset();
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v6);
  v46[3] = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
  MEMORY[0x1E0C80A78](v47, v8);
  v49 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v11 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  v55 = v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v46[5] = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  MEMORY[0x1E0C80A78](v52, v14);
  v53 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v46[4] = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v57 = (char *)v46 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v56 = (char *)v46 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v51 = (char *)v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v58 = (char *)v46 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v59 = (char *)v46 - v33;
  v34 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v34, v35);
  v36 = type metadata accessor for ImageElementView.ImageState(0);
  MEMORY[0x1E0C80A78](v36, v37);
  MEMORY[0x1E0C80A78](v38, v39);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageElementView.ImageState, ImageElementView.ImageState));
  MEMORY[0x1E0C80A78](v40, v41);
  v44 = (char *)v46 + *(int *)(v43 + 48) - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v46 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ImageElementView.ImageState);
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v44, type metadata accessor for ImageElementView.ImageState);
  v45 = (char *)sub_1DDE1C558 + 4 * byte_1DDF43B75[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_1DDE1C558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(uint64_t, uint64_t);

  outlined init with copy of PKStrokeProperties(v0, v1, type metadata accessor for ImageElementView.ImageState);
  v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
  v6 = v5[12];
  *(_QWORD *)(v4 - 96) = v1 + v6;
  v7 = v5[16];
  v8 = v5[20];
  v9 = *(_QWORD *)(v1 + v8);
  if (!swift_getEnumCaseMultiPayload())
  {
    v12 = v2 + v6;
    *(_QWORD *)(v4 - 104) = v2 + v7;
    *(_QWORD *)(v4 - 248) = *(_QWORD *)(v2 + v8);
    *(_QWORD *)(v4 - 240) = v9;
    v13 = v2;
    v14 = v3;
    outlined init with take of PKStrokeStruct(v13, v3, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    v15 = *(_QWORD *)(v4 - 112);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v4 - 96), v15, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v16 = *(_QWORD *)(v4 - 136);
    outlined init with take of (key: Int, value: AnyCRValue)?(v1 + v7, v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v17 = *(_QWORD *)(v4 - 120);
    outlined init with take of (key: Int, value: AnyCRValue)?(v12, v17, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v18 = *(_QWORD *)(v4 - 128);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v4 - 104), v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    v19 = specialized static CRAssetOrData.== infix(_:_:)(v1, v14);
    outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(v4 - 160);
      v21 = v20 + *(int *)(*(_QWORD *)(v4 - 168) + 48);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v15, v20, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v17, v21, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      v22 = *(_QWORD *)(v4 - 152);
      v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 48);
      if (v23(v20, 1, v22) == 1)
      {
        if (v23(v21, 1, v22) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_15:
          v31 = v15;
          v32 = *(_QWORD *)(v4 - 192);
          v33 = v32 + *(int *)(*(_QWORD *)(v4 - 208) + 48);
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v16, v32, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v18, v33, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          v34 = *(_QWORD *)(v4 - 200);
          v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
          v36 = *(_QWORD *)(v4 - 184);
          if (v35(v32, 1, v36) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
            outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 120), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v31, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
            outlined destroy of PKStrokeProperties(v14, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
            if (v35(v33, 1, v36) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v32, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
LABEL_22:
              v10 = *(_QWORD *)(v4 - 240) == *(_QWORD *)(v4 - 248);
              outlined destroy of PKStrokeProperties(v0, type metadata accessor for ImageElementView.ImageState);
              return v10;
            }
            goto LABEL_20;
          }
          v37 = *(_QWORD *)(v4 - 224);
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v32, v37, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          if (v35(v33, 1, v36) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 128), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
            outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 120), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
            outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 112), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
            outlined destroy of PKStrokeProperties(v14, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
            (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v37, v36);
LABEL_20:
            outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
            goto LABEL_13;
          }
          v38 = *(_QWORD *)(v4 - 232);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v38, v33, v36);
          lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>();
          v39 = dispatch thunk of static Equatable.== infix(_:_:)();
          v40 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
          v40(v38, v36);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 128), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 120), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 112), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
          outlined destroy of PKStrokeProperties(v14, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
          v40(v37, v36);
          outlined destroy of StocksKitCurrencyCache.Provider?(v32, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          if ((v39 & 1) != 0)
            goto LABEL_22;
LABEL_13:
          outlined destroy of PKStrokeProperties(v0, type metadata accessor for ImageElementView.ImageState);
          return 0;
        }
        goto LABEL_11;
      }
      v24 = *(_QWORD *)(v4 - 176);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v20, v24, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      if (v23(v21, 1, v22) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 8))(v24, v22);
        v15 = *(_QWORD *)(v4 - 112);
LABEL_11:
        outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
        goto LABEL_12;
      }
      v25 = *(_QWORD *)(v4 - 144);
      v26 = v24;
      v27 = *(_QWORD *)(v4 - 216);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v27, v21, v22);
      lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
      v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      v29 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v29(v27, v22);
      v30 = v26;
      v17 = *(_QWORD *)(v4 - 120);
      v29(v30, v22);
      outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      v15 = *(_QWORD *)(v4 - 112);
      if ((v28 & 1) != 0)
        goto LABEL_15;
    }
LABEL_12:
    outlined destroy of StocksKitCurrencyCache.Provider?(v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v17, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v15, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    outlined destroy of PKStrokeProperties(v14, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    goto LABEL_13;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v1 + v7, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v4 - 96), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0, &demangling cache variable for type metadata for (ImageElementView.ImageState, ImageElementView.ImageState));
  return 0;
}

uint64_t sub_1DDE1CBAC()
{
  return 24;
}

__n128 sub_1DDE1CBB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)()
{
  return specialized closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)();
}

uint64_t sub_1DDE1CBEC()
{
  return 24;
}

__n128 sub_1DDE1CBF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined assign with take of ImageElementView.ImageState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageElementView.ImageState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDE1CC50()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDE1CC74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?)
                                      - 8)
                          + 80);
  swift_unknownObjectRelease();
  v8 = v0 + v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
  }
  else
  {
    v9 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  v10 = (v5 + v6 + v7) & ~v7;
  v11 = v0 + v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))(v0 + v10, 1, v14))
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v0 + v10, v14);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ImageElementView.updateUI()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?)
                  - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v1 + 16);
  v14 = *(_QWORD *)(v1 + 24);
  v15 = v1 + v5;
  v16 = v1 + v8;
  v17 = v1 + v11;
  v18 = *(_QWORD *)(v1 + v12);
  v19 = *(_QWORD *)(v1 + ((v12 + 15) & 0xFFFFFFFFFFFFF8));
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v20;
  *v20 = v2;
  v20[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ImageElementView.updateUI()(a1, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_1DDE1CF30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;

  v1 = *(_QWORD *)(type metadata accessor for ImageElementView.ImageState(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  v30 = (*(unsigned __int8 *)(v7 + 80) + v6 + 9) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?)
                                      - 8)
                          + 80);
  v29 = v8 + v9;
  swift_unknownObjectRelease();
  v10 = v0 + v2;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v12 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else if (!EnumCaseMultiPayload)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined consume of Data._Representation(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
    }
    else
    {
      v13 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10, v13);
    }
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    v15 = v10 + *(int *)(v14 + 48);
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    v18 = v10 + *(int *)(v14 + 64);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  swift_release();
  v21 = v0 + v5;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v21 + 16), *(_QWORD *)(v21 + 24));
  }
  else
  {
    v22 = type metadata accessor for CRAsset();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v0 + v5, v22);
  }
  v23 = (v29 + v30) & ~v9;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v25 = *(_QWORD *)(v24 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v25 + 48))(v0 + v30, 1, v24))
    (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v0 + v30, v24);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v27 = *(_QWORD *)(v26 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v27 + 48))(v0 + v23, 1, v26))
    (*(void (**)(unint64_t, uint64_t))(v27 + 8))(v0 + v23, v26);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in ImageElementView.updateUI()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v3 = *(_QWORD *)(type metadata accessor for ImageElementView.ImageState(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v6 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v10 = *(_QWORD *)(v1 + 24);
  v16 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + v5);
  v12 = *(_QWORD *)(v1 + v6);
  v13 = *(_QWORD *)(v1 + v9);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return specialized closure #2 in ImageElementView.updateUI()(a1, v16, v10, v1 + v4, v11, v12, v1 + v8, v13);
}

CGImageRef _s8PaperKit5ImageV13filterAndCrop_0D04crop5queueSo10CGImageRefaAI_9Coherence13TaggedValue_1VyAJ12CRExtensibleOyAA05BasicC6FilterOGGSgAJ0lM2_2VySo6CGRectVAA4QuadVAwJ7CRValueAAyHCg_GSgSo012OS_dispatch_H0CSgtFZAIyXEfU_TA_0@<X0>(CGImageRef *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)(*(CGImage **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t partial apply for specialized closure #1 in AsyncCache.cached(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = (_OWORD *)v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&async function pointer to specialized closure #1 in AsyncCache.cached(for:)
                                                                               + async function pointer to specialized closure #1 in AsyncCache.cached(for:)))(a1, v4, v5, v7, v6);
}

uint64_t partial apply for specialized closure #2 in AsyncCache.cached(for:)()
{
  uint64_t v0;

  return specialized closure #2 in AsyncCache.cached(for:)(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1DDE1D44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #2 in AsyncCache.cached(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1 + 5;
  v9 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #2 in AsyncCache.cached(for:)
                                                                                        + async function pointer to specialized closure #1 in closure #2 in AsyncCache.cached(for:)))(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for specialized closure #1 in closure #1 in AsyncCache.cached(for:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in closure #1 in AsyncCache.cached(for:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), **(_QWORD **)(v1 + 40), *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8));
}

void outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 255)
    outlined consume of AsyncCache<Data, CGImageRef>.CacheState(a1, a2, a3 & 1);
}

void partial apply for closure #1 in ImageElementView.didZoom(in:)()
{
  uint64_t v0;

  closure #1 in ImageElementView.didZoom(in:)(v0);
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t sub_1DDE1D5C8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ContainerCanvasElementView.transformDrawing()(char a1)
{
  uint64_t v1;

  closure #1 in ContainerCanvasElementView.transformDrawing()(a1, *(void **)(v1 + 16));
}

uint64_t sub_1DDE1D5FC()
{
  return 24;
}

__n128 sub_1DDE1D608(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDE1D624()
{
  return 24;
}

__n128 sub_1DDE1D630(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDE1D644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageElementView.ImageOrFile(0) - 8) + 80);
  v2 = (v1 + 24) & ~v1;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v4 = type metadata accessor for CRStableAsset();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + v2, v4);
  }
  else if (!EnumCaseMultiPayload)
  {

  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ImageElementView.setImage(_:canAnimate:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageElementView.ImageOrFile(0) - 8) + 80);
  return perform #1 () in ImageElementView.setImage(_:canAnimate:)(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t outlined assign with copy of ImageElementView.ImageOrFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageElementView.ImageOrFile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

_QWORD *specialized ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  id v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;

  v36 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[direct field offset for ImageElementView.mediaView] = 0;
  *(_QWORD *)&v3[direct field offset for ImageElementView.missingImageView] = 0;
  *(_QWORD *)&v3[direct field offset for ImageElementView.getImageTask] = 0;
  *(_QWORD *)&v3[direct field offset for ImageElementView.getThumbnailTask] = 0;
  *(_QWORD *)&v3[direct field offset for ImageElementView.imageGetCounter] = 0;
  *(_QWORD *)&v3[direct field offset for ImageElementView.imageSetCounter] = 0;
  *(_QWORD *)&v3[direct field offset for ImageElementView.updateAfterZoomWorkItem] = 0;
  type metadata accessor for ImageElementView.ImageState(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v3[direct field offset for ImageElementView.isImageAnalysisEnabled] = 0;
  type metadata accessor for ImageElementView.ImageOrFile(0);
  swift_storeEnumTagMultiPayload();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers] = 0;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v14 = v3;
  Capsule<>.subscript.getter();
  swift_release();
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, v40, v41, v42, v43);
  *(_QWORD *)&v14[direct field offset for ImageElementView.contentView] = v15;
  v16 = v15;
  objc_msgSend(v16, sel_setContentMode_, 2);

  v38 = v10;
  v39 = a1;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18 = v9;
  v17(v13, a1, v9);
  v19 = a3;
  v20 = v36;
  v21 = v36;
  v22 = specialized ContainerCanvasElementView.init(canvasElement:canvas:parentCanvasElement:)((uint64_t)v13, v20, a3);

  v23 = direct field offset for ImageElementView.contentView;
  v24 = *(_QWORD *)((char *)v22 + direct field offset for ImageElementView.contentView);
  v25 = v22;
  objc_msgSend(v25, sel_insertSubview_atIndex_, v24, 0);
  objc_msgSend(*(id *)((char *)v22 + v23), sel_setClipsToBounds_, 1);
  if (a3)
  {
    v26 = objc_msgSend(*(id *)((char *)v22 + v23), sel_layer);
    if (one-time initialization token for imageCornerRadius != -1)
      swift_once();
    objc_msgSend(v26, sel_setCornerRadius_, *(double *)&static UIConstants.imageCornerRadius, v36);

  }
  v27 = v25;
  v28 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000026, 0x80000001DDF591F0);
  objc_msgSend(v27, sel_setAccessibilityIdentifier_, v28);

  v29 = type metadata accessor for TaskPriority();
  v30 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v37, 1, 1, v29);
  v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  v32 = static MainActor.shared.getter();
  v33 = (_QWORD *)swift_allocObject();
  v34 = MEMORY[0x1E0DF06E8];
  v33[2] = v32;
  v33[3] = v34;
  v33[4] = v31;
  swift_release();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v30, (uint64_t)&async function pointer to partial apply for closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:), (uint64_t)v33);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v18);
  return v27;
}

void specialized ImageElementView.init(coder:)()
{
  _BYTE *v0;

  *(_QWORD *)&v0[direct field offset for ImageElementView.mediaView] = 0;
  *(_QWORD *)&v0[direct field offset for ImageElementView.missingImageView] = 0;
  *(_QWORD *)&v0[direct field offset for ImageElementView.getImageTask] = 0;
  *(_QWORD *)&v0[direct field offset for ImageElementView.getThumbnailTask] = 0;
  *(_QWORD *)&v0[direct field offset for ImageElementView.imageGetCounter] = 0;
  *(_QWORD *)&v0[direct field offset for ImageElementView.imageSetCounter] = 0;
  *(_QWORD *)&v0[direct field offset for ImageElementView.updateAfterZoomWorkItem] = 0;
  type metadata accessor for ImageElementView.ImageState(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v0[direct field offset for ImageElementView.isImageAnalysisEnabled] = 0;
  type metadata accessor for ImageElementView.ImageOrFile(0);
  swift_storeEnumTagMultiPayload();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined assign with copy of Capsule<Image>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_1DDE1DD58()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(a1, v4, v5, v6);
}

CGImageRef closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)partial apply@<X0>(CGImageRef *a1@<X8>)
{
  return _s8PaperKit5ImageV13filterAndCrop_0D04crop5queueSo10CGImageRefaAI_9Coherence13TaggedValue_1VyAJ12CRExtensibleOyAA05BasicC6FilterOGGSgAJ0lM2_2VySo6CGRectVAA4QuadVAwJ7CRValueAAyHCg_GSgSo012OS_dispatch_H0CSgtFZAIyXEfU_TA_0(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for UnknownLayout(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CRKeyPath();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE1E020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UnknownLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE1E068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UnknownLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UnknownLayout;
  if (!type metadata singleton initialization cache for UnknownLayout)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for UnknownLayout()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement;
  if (!lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement)
  {
    v1 = type metadata accessor for UnknownCanvasElement();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for UnknownCanvasElement, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in UnknownLayout()
{
  return &protocol witness table for UnknownCanvasElement;
}

_QWORD *UnknownLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  _QWORD v28[4];

  v6 = v5;
  v28[1] = a4;
  v28[2] = a5;
  v28[3] = a1;
  v9 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v6, v9, v21);
  type metadata accessor for UnknownCanvasElement();
  lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement();
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<UnknownCanvasElement> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v24 = *(_QWORD *)(v6 + *(int *)(type metadata accessor for UnknownLayout() + 20));
  objc_allocWithZone((Class)type metadata accessor for UnknownCanvasElementView());
  v25 = a3;
  v26 = a2;
  return UnknownCanvasElementView.init(canvasElement:tag:canvas:parentCanvasElement:)((uint64_t)v23, v24, a2, a3);
}

unint64_t lazy protocol witness table accessor for type Ref<UnknownCanvasElement> and conformance Ref<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Ref<UnknownCanvasElement> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<UnknownCanvasElement> and conformance Ref<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12878], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<UnknownCanvasElement> and conformance Ref<A>);
  }
  return result;
}

double UnknownPage.bounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t UnknownPage.bounds.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownPage.bounds.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownPage.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t UnknownPage.$bounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnknownPage.$bounds.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double UnknownPage.frame.getter()
{
  double v1;

  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for UnknownPage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UnknownPage;
  if (!type metadata singleton initialization cache for UnknownPage)
    return swift_getSingletonMetadata();
  return result;
}

double key path getter for UnknownPage.frame : UnknownPage@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for UnknownPage.frame : UnknownPage()
{
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownPage.frame.setter()
{
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownPage.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownPage.$frame.getter()
{
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownPage.$frame : UnknownPage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for UnknownPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t UnknownPage.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for UnknownPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnknownPage.$frame.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownPage() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t UnknownPage.additionalFields.getter()
{
  type metadata accessor for UnknownPage();
  return swift_bridgeObjectRetain();
}

uint64_t UnknownPage.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for UnknownPage() + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*UnknownPage.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for UnknownPage();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static UnknownPage.fields.getter()
{
  uint64_t v0;

  if (one-time initialization token for fields != -1)
    swift_once();
  v0 = static UnknownPage.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t UnknownPage.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  v2 = type metadata accessor for UnknownPage();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v2 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.minEncodingVersion.getter();
}

uint64_t protocol witness for static CRStruct_Base_1.fields.getter in conformance UnknownPage()
{
  uint64_t v0;

  if (one-time initialization token for fields != -1)
    swift_once();
  v0 = static UnknownPage.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return static CRStruct_1.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.init() in conformance UnknownPage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a2 + *(int *)(a1 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRStruct_1.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance UnknownPage()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
  return CRDT.init(serializedData:)();
}

uint64_t UnknownPage.pdfPageID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for PDFPageID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void UnknownPage.shared(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double UnknownPage.pdfContentsBounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t UnknownPage.importAnnotations<A>(from:scale:mediaBox:in:)()
{
  return 0;
}

uint64_t UnknownPage.indexableTextContent<A>(in:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t UnknownPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)()
{
  uint64_t v0;

  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x1E0DEE9D8]);
}

void UnknownPage.update<A>(pdfPage:id:use:in:options:)(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  type metadata accessor for PaperKitPDFPage(0);
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = a1;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v3, 0);

  }
}

id UnknownPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(int a1, int a2, id a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  objc_msgSend(a3, sel_bounds);
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UnknownPageView()), sel_initWithFrame_, v3, v4, v5, v6);
}

uint64_t UnknownPage.finishDecode(from:pageID:assetManager:)()
{
  return 1;
}

uint64_t UnknownPage.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;

  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t base witness table accessor for CRStruct_Base_1 in UnknownPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
}

uint64_t base witness table accessor for CRStruct_Base in UnknownPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
}

uint64_t base witness table accessor for CRDT in UnknownPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
}

uint64_t base witness table accessor for CRMergeable in UnknownPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
}

uint64_t base witness table accessor for CRType in UnknownPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in UnknownPage()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_1<UnknownPage> and conformance CRStructMergeableDelta_1<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_1<UnknownPage>, MEMORY[0x1E0D12728]);
}

uint64_t base witness table accessor for CRCodable in UnknownPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (uint64_t (*)(uint64_t))type metadata accessor for UnknownPage, (uint64_t)&protocol conformance descriptor for UnknownPage);
}

id protocol witness for PaperPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:) in conformance UnknownPage(int a1, int a2, id a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  objc_msgSend(a3, sel_bounds);
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UnknownPageView()), sel_initWithFrame_, v3, v4, v5, v6);
}

void protocol witness for PaperPage.update<A>(pdfPage:id:use:in:options:) in conformance UnknownPage(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  type metadata accessor for PaperKitPDFPage(0);
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = a1;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v3, 0);

  }
}

void protocol witness for PaperPage.shared(_:) in conformance UnknownPage()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance UnknownPage()
{
  uint64_t v0;

  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1DDE1F810()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE1F850()
{
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for UnknownPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownPage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE1FBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for UnknownPage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE1FC68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void type metadata completion function for UnknownPage()
{
  unint64_t v0;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void AnyCanvas.performSelectionAction(_:_:at:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  unsigned int v31;
  _QWORD v32[4];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];
  ValueMetadata *v49;
  unint64_t v50;

  v45 = a4;
  v46 = a2;
  v47 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9, v10);
  v37 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v42 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS();
  v40 = *(_QWORD *)(v15 - 8);
  v41 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v39 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String)?);
  MEMORY[0x1E0C80A78](v18, v19);
  v38 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
  MEMORY[0x1E0C80A78](v33, v21);
  v32[3] = (char *)v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for URL();
  v35 = *(_QWORD *)(v23 - 8);
  v36 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v34 = (char *)v32 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = &type metadata for PencilAndPaperFeatureFlags;
  v50 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v48[0] = 0;
  v26 = isFeatureEnabled(_:)();
  v27 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  if ((v26 & 1) == 0)
  {
    v28 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x320))(v27);
    if (v28)
    {
      v29 = v28;
      v32[2] = a6;
      v30 = objc_msgSend(v28, sel_selectionInteraction);
      v31 = objc_msgSend(v30, sel_currentSelectionHasStrokes);

      if (v31)
        __asm { BR              X10 }

    }
  }
  __asm { BR              X10 }
}

void sub_1DDE20000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 - 152);
  v2 = *(_QWORD *)(v1 - 144);
  v4 = *(_QWORD *)(v1 - 160);
  AnyCanvas.performSelectionAction(_:_:at:)(1, v3, v2, v4, v0, 0);
  AnyCanvas.performSelectionAction(_:_:at:)(4, v3, v2, v4, v0, 0);
  JUMPOUT(0x1DDE20A64);
}

void sub_1DDE20054()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Class v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  Class isa;

  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = v1;
  *(_BYTE *)(v4 - 136) = 0;
  v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1(v4 - 136);
  v7 = *(_QWORD *)(v4 - 152);
  v6 = *(_QWORD *)(v4 - 144);
  v8 = *(_QWORD *)(v4 - 160);
  if ((v5 & 1) != 0
    || !(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x630))(*(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 160), v3))
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
    v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x628))(v7, v6, v8, v3);
    v13 = v12;
    *(_QWORD *)(v4 - 136) = MEMORY[0x1E0DEE9D8];
    if (v12)
    {
      v14 = v12;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((*(_QWORD *)(v4 - 136) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v4 - 136) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setItemProviders_, isa);

  }
  else
  {
    v9 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setItems_, v10);

  }
  JUMPOUT(0x1DDE20A64);
}

void sub_1DDE20A2C()
{
  void *v0;

  objc_msgSend(v0, sel_copy_);

}

void sub_1DDE20A38()
{
  void *v0;

  objc_msgSend(v0, sel_paste_);

}

void sub_1DDE20A44()
{
  void *v0;

  objc_msgSend(v0, sel_duplicate_);

}

void sub_1DDE20A50()
{
  JUMPOUT(0x1DDE20A58);
}

void AnyCanvas.contextMenuInteraction(_:members:configurationForMenuAtLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  _BYTE *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  id v48;
  double v49;
  double v50;
  double v51;
  double v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, unint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;

  v71 = a4;
  v14 = type metadata accessor for CRKeyPath();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v63 - v21;
  if ((v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] & 1) != 0 || !*(_QWORD *)(a2 + 16) && !*(_QWORD *)(a3 + 16))
    return;
  v23 = v7;
  v24 = swift_bridgeObjectRetain();
  v25 = specialized Sequence.compactMap<A>(_:)(v24, v23);
  swift_bridgeObjectRelease();
  v68 = v23;

  v70 = v25 >> 62;
  if (!(v25 >> 62))
  {
    if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v62 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v62)
    goto LABEL_11;
LABEL_6:
  v65 = a1;
  v69 = v22;
  v67 = v25 & 0xC000000000000001;
  if ((v25 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v26 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v26 = *(id *)(v25 + 32);
  }
  v27 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v28 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x2D0))();

  if (v28)
  {
    v29 = (*(uint64_t (**)(void))((*v27 & *v28) + 0x98))();

    if ((v29 & 1) != 0)
      goto LABEL_11;
  }
  v30 = a2;
  v31 = v68;
  v71 = AnyCanvas.actions(canvasElementViews:members:)(v25, v30, a3, v71, a5 & 1);
  if (v70)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v34 = v67;
  if (v32 != 1)
    goto LABEL_45;
  AnyCanvas.selectedCanvasElementIds.getter();
  v36 = v35;
  if (v34)
  {
    swift_bridgeObjectRetain();
    v37 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v25);
    v38 = (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_55:
      __break(1u);
      return;
    }
    v38 = *(id *)(v25 + 32);
    v37 = v38;
  }
  (*(void (**)(_QWORD *))((*v33 & *v37) + 0xE0))(v38);

  v66 = *(_QWORD *)(v36 + 16);
  if (!v66)
  {
    v41 = *(void (**)(char *, uint64_t))(v15 + 8);
LABEL_30:
    v41(v69, v14);
    swift_bridgeObjectRelease();
    v47 = v67;
    if (v67)
    {
      swift_bridgeObjectRetain();
      v48 = (id)MEMORY[0x1DF0E4D64](0, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = *(id *)(v25 + 32);
    }
    v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    objc_msgSend(v31, sel_convertPoint_fromCoordinateSpace_, v48, a6, a7, v63);
    v50 = v49;
    v52 = v51;

    v53 = (void *)(*(uint64_t (**)(void))((*v33 & *v31) + 0x2F8))();
    v55 = v54;
    ObjectType = swift_getObjectType();
    v57 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, double, double))(v55 + 136))(0, ObjectType, v55, v50, v52);

    if (v57)
    {
      type metadata accessor for LinkCanvasElementView();
      if (swift_dynamicCastClass())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

    }
    goto LABEL_38;
  }
  v39 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v64 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  v64(v18, v36 + v39, v14);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
  swift_bridgeObjectRetain();
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41 = *(void (**)(char *, uint64_t))(v15 + 8);
  v41(v18, v14);
  if ((v40 & 1) == 0)
  {
    v63 = v36;
    if (v66 != 1)
    {
      v42 = *(_QWORD *)(v15 + 72);
      v43 = v63 + v42 + v39;
      v44 = 1;
      do
      {
        v64(v18, v43, v14);
        v45 = v44 + 1;
        if (__OFADD__(v44, 1))
          goto LABEL_54;
        v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        v41(v18, v14);
        if ((v46 & 1) != 0)
          goto LABEL_37;
        ++v44;
        v43 += v42;
      }
      while (v45 != v66);
    }
    swift_bridgeObjectRelease();
    v31 = v68;
    goto LABEL_30;
  }
LABEL_37:
  swift_bridgeObjectRelease();
  v47 = v67;
  v41(v69, v14);
  swift_bridgeObjectRelease();
  v31 = v68;
  v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_38:
  if (v47)
  {
    swift_bridgeObjectRetain();
    v58 = (id)MEMORY[0x1DF0E4D64](0, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v58 = *(id *)(v25 + 32);
  }
  type metadata accessor for LinkCanvasElementView();
  v59 = swift_dynamicCastClass();
  if (v59)
  {
    v60 = (void *)v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    objc_msgSend(v60, sel_contextMenuInteraction_configurationForMenuAtLocation_, v65, a6, a7);

    return;
  }

  if (v47)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x1DF0E4D64](0, v25);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_45:
  if (v70)
  {
    v61 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v61 = v25 & 0xFFFFFFFFFFFFFF8;
  }
  (*(void (**)(uint64_t, uint64_t))((*v33 & *v31) + 0x6D8))(v61, v71);
  swift_release();
  swift_bridgeObjectRelease();
}

UITargetedPreview_optional __swiftcall AnyCanvas.contextMenuInteraction(_:canvasElementViews:previewForHighlightingMenuWithConfiguration:)(UIContextMenuInteraction _, Swift::OpaquePointer canvasElementViews, UIContextMenuConfiguration previewForHighlightingMenuWithConfiguration)
{
  _QWORD *v3;
  void *v7;
  Swift::Bool v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  _OWORD v27[2];
  char v28;
  UITargetedPreview_optional result;
  CGRect v30;
  CGRect v31;

  if ((unint64_t)canvasElementViews._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v26 == 1)
    {
      swift_bridgeObjectRetain();
      v7 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (v7)
        goto LABEL_4;
      swift_bridgeObjectRelease();
    }
LABEL_10:
    memset(v27, 0, sizeof(v27));
    v28 = 1;
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v14 = (*(uint64_t (**)(void *, _OWORD *))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x660))(canvasElementViews._rawValue, v27);
    if (v14)
    {
      v15 = (void *)v14;
      v16 = (*(uint64_t (**)(void))((*v13 & *v3) + 0x308))();
      if (v16)
      {
        v17 = (void *)v16;
        v7 = *(void **)((char *)v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        if (v7)
        {
          objc_msgSend(v7, sel_frame);
          x = v30.origin.x;
          y = v30.origin.y;
          width = v30.size.width;
          height = v30.size.height;
          MidX = CGRectGetMidX(v30);
          v31.origin.x = x;
          v31.origin.y = y;
          v31.size.width = width;
          v31.size.height = height;
          v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3770]), sel_initWithContainer_center_, v17, MidX, CGRectGetMidY(v31));
          v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3768]), sel_init);
          v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v15);
          objc_msgSend(v25, sel__setContinuousCornerRadius_, 13.0);
          v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_parameters_target_, v25, v24, v23);

          goto LABEL_16;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }

    }
    v12 = 0;
    goto LABEL_16;
  }
  if (*(_QWORD *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
    goto LABEL_10;
  v7 = (void *)swift_bridgeObjectRetain();
LABEL_4:
  if (((unint64_t)canvasElementViews._rawValue & 0xC000000000000001) != 0)
  {
    v9 = (id)MEMORY[0x1DF0E4D64](0, canvasElementViews._rawValue);
  }
  else
  {
    if (!*(_QWORD *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    v9 = *((id *)canvasElementViews._rawValue + 4);
  }
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v10, sel_window);

  if (!v11)
  {

    goto LABEL_10;
  }
  v12 = objc_msgSend(v10, sel_contextMenuInteraction_previewForHighlightingMenuWithConfiguration_, _.super.isa, previewForHighlightingMenuWithConfiguration.super.isa);

LABEL_16:
  v7 = v12;
LABEL_23:
  result.value.super.isa = (Class)v7;
  result.is_nil = v8;
  return result;
}

void closure #1 in AnyCanvas.cutAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  AnyCanvas.performSelectionAction(_:_:at:)(0, a3, a4, a5, a6 & 1, 0);
}

void closure #1 in AnyCanvas.copyAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  AnyCanvas.performSelectionAction(_:_:at:)(1, a3, a4, a5, a6 & 1, 0);
}

void closure #1 in AnyCanvas.duplicateAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  AnyCanvas.performSelectionAction(_:_:at:)(3, a3, a4, a5, a6 & 1, 0);
}

void closure #1 in AnyCanvas.deleteAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  AnyCanvas.performSelectionAction(_:_:at:)(4, a3, a4, a5, a6 & 1, 0);
}

uint64_t AnyCanvas.createImageAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  void *v21;
  id v22;
  char v23[24];
  ValueMetadata *v24;
  unint64_t v25;
  Swift::String v26;

  v24 = &type metadata for PencilAndPaperFeatureFlags;
  v25 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v23[0] = 2;
  v9 = isFeatureEnabled(_:)();
  v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  if ((v9 & 1) == 0)
    return 0;
  v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x320))(v10);
  if (!v11)
    return 0;
  v12 = v11;
  if (!objc_msgSend(v11, sel_isGenerationModelAvailable) || *(_QWORD *)(a1 + 16) || *(_QWORD *)(a2 + 16))
  {

    return 0;
  }
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v4;
  *(_QWORD *)(v15 + 24) = a1;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  *(_BYTE *)(v15 + 48) = a4 & 1;
  v16 = one-time initialization token for paperKitBundle;
  v17 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16 != -1)
    swift_once();
  v26._countAndFlagsBits = 0xD00000000000003BLL;
  v26._object = (void *)0x80000001DDF592B0;
  v18._countAndFlagsBits = 0x4920657461657243;
  v18._object = (void *)0xEC0000006567616DLL;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v26);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  v21 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000016, 0x80000001DDF4E090);
  v22 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v21);

  v13 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  return v13;
}

uint64_t AnyCanvas.createImageActionWithDivider(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::OpaquePointer children;
  UIImage_optional v12;

  v4 = AnyCanvas.createImageAction(_:)(a1, a2, a3, a4 & 1);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  v5 = (void *)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1DDF33AB0;
  *(_QWORD *)(v6 + 32) = v5;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1DDF35440;
  *(_QWORD *)(v7 + 32) = v5;
  children._rawValue = (void *)v7;
  specialized Array._endMutation()();
  v8 = v5;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v12.value.super.isa = 0;
  v12.is_nil = 0;
  *(UIMenu *)(v6 + 40) = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v9, (Swift::String_optional)0, v12, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)children._rawValue, children);
  specialized Array._endMutation()();

  return v6;
}

uint64_t closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v11;

  *(_BYTE *)(v8 + 88) = v11;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for URL();
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 72) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 80) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  swift_release();
  ObjectType = swift_getObjectType();
  CRStableAsset.url.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 112))(v1, 1, v5, v4, v3 & 1, ObjectType, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;

  v57 = a7;
  v58 = a8;
  v61 = a6;
  v59 = a4;
  v60 = a5;
  v54 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for CRStableAsset();
  v13 = *(_QWORD *)(v56 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v56, v15);
  v55 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v50 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for URL();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v50 - v31;
  outlined init with copy of URL?(a1, (uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v32, v23, v24);
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v32, v24);
  v52 = v19;
  CRStableAsset.init(url:extension:)();
  v34 = type metadata accessor for TaskPriority();
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v53 = v12;
  v36 = v35(v12, 1, 1, v34);
  v54 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v54) + 0x2F8))(v36);
  v51 = v37;
  v38 = v55;
  v39 = v19;
  v40 = v56;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v55, v39, v56);
  type metadata accessor for MainActor();
  v41 = static MainActor.shared.getter();
  v42 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v43 = (v14 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = (char *)swift_allocObject();
  v45 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v44 + 2) = v41;
  *((_QWORD *)v44 + 3) = v45;
  v46 = v51;
  *((_QWORD *)v44 + 4) = v54;
  *((_QWORD *)v44 + 5) = v46;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v44[v42], v38, v40);
  v47 = &v44[v43];
  v48 = v58;
  v49 = v60;
  *(_QWORD *)v47 = v59;
  *((_QWORD *)v47 + 1) = v49;
  v47[16] = v61 & 1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v53, v48, (uint64_t)v44);
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v32, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v52, v40);
}

uint64_t closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v11;

  *(_BYTE *)(v8 + 88) = v11;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for URL();
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 72) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 80) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  swift_release();
  ObjectType = swift_getObjectType();
  CRStableAsset.url.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 104))(v1, v5, v4, v3 & 1, ObjectType, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #7 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v8 + 96) = a8;
  *(_QWORD *)(v8 + 40) = a6;
  *(_QWORD *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 56) = static MainActor.shared.getter();
  *(_QWORD *)(v8 + 64) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v8 + 72) = v9;
  return swift_task_switch();
}

uint64_t closure #7 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  uint64_t v0;
  void *v1;
  char v2;
  _QWORD *v3;

  v1 = *(void **)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool);
  *(_QWORD *)(v0 + 80) = v1;
  if (v1)
  {
    v2 = *(_BYTE *)(v0 + 96) & 1;
    v1;
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = closure #7 in AnyCanvas.performSelectionAction(_:_:at:);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(for:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), v2);
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 80) == 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 80);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 80) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnyCanvas.actions(canvasElementViews:members:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  void *v6;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  void *v40;
  id v41;
  uint64_t v42;
  Class isa;
  id v44;
  Swift::String v45;
  Swift::String_optional v46;
  Swift::String v47;
  void *v48;
  id v49;
  uint64_t v50;
  Class v51;
  _QWORD *v52;
  Swift::String v53;
  Swift::String_optional v54;
  Swift::String v55;
  void *v56;
  id v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  Class v61;
  _QWORD *v62;
  Swift::String v63;
  Swift::String_optional v64;
  Swift::String v65;
  void *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  Class v71;
  _QWORD *v72;
  Swift::String v73;
  Swift::String_optional v74;
  Swift::String v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v89;
  uint64_t v90;
  unsigned int v91;
  id v92;
  uint64_t v93;
  _QWORD v94[5];
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;

  v6 = v5;
  v11 = a5 & 1;
  v12 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x2F8))();
  v14 = v13;
  ObjectType = swift_getObjectType();
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 160))(ObjectType, v14);

  swift_bridgeObjectRetain();
  LOBYTE(v12) = specialized Sequence.contains(where:)(a1, v16);
  swift_bridgeObjectRelease_n();
  if ((v12 & 1) != 0)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v6;
    *(_QWORD *)(v17 + 24) = a2;
    *(_QWORD *)(v17 + 32) = a3;
    *(_QWORD *)(v17 + 40) = a4;
    *(_BYTE *)(v17 + 48) = v11 != 0;
    v18 = one-time initialization token for paperKitBundle;
    v19 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 != -1)
      swift_once();
    v95._countAndFlagsBits = 0xD000000000000020;
    v95._object = (void *)0x80000001DDF57430;
    v20._countAndFlagsBits = 0x6574656C6544;
    v20._object = (void *)0xE600000000000000;
    v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v21.value._object = (void *)0xEB00000000656C62;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v95);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    v23 = (void *)MEMORY[0x1DF0E41AC](0x6873617274, 0xE500000000000000);
    v24 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v23);

    MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF57460);
    v25 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v94[0] = MEMORY[0x1E0DEE9D8];
    v26 = v25;
    MEMORY[0x1DF0E4398](v26, v27, v28, v29, v30);
    if (*(_QWORD *)((v94[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v94[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v31 = v94[0];

  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF368C0;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v6;
    *(_QWORD *)(v33 + 24) = a2;
    *(_QWORD *)(v33 + 32) = a3;
    *(_QWORD *)(v33 + 40) = a4;
    *(_BYTE *)(v33 + 48) = v11 != 0;
    v34 = one-time initialization token for paperKitBundle;
    v89 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v90 = a4;
    v35 = a2;
    v36 = a3;
    if (v34 != -1)
      swift_once();
    v96._countAndFlagsBits = 0xD00000000000001DLL;
    v96._object = (void *)0x80000001DDF57360;
    v37._countAndFlagsBits = 7632195;
    v37._object = (void *)0xE300000000000000;
    v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v38.value._object = (void *)0xEB00000000656C62;
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v96);
    v91 = v11;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    v40 = (void *)MEMORY[0x1DF0E41AC](0x73726F7373696373, 0xE800000000000000);
    v92 = (id)objc_opt_self();
    v41 = objc_msgSend(v92, sel_systemImageNamed_, v40);

    MEMORY[0x1DF0E41AC](0xD000000000000012, 0x80000001DDF57380);
    *(_QWORD *)(inited + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = v89;
    *(_QWORD *)(v42 + 24) = v35;
    *(_QWORD *)(v42 + 32) = a3;
    *(_QWORD *)(v42 + 40) = v90;
    *(_BYTE *)(v42 + 48) = v11 != 0;
    isa = paperKitBundle.super.isa;
    v44 = v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v97._countAndFlagsBits = 0xD00000000000001ELL;
    v97._object = (void *)0x80000001DDF573A0;
    v45._countAndFlagsBits = 2037411651;
    v45._object = (void *)0xE400000000000000;
    v46.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v46.value._object = (void *)0xEB00000000656C62;
    v47._countAndFlagsBits = 0;
    v47._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v45, v46, (NSBundle)isa, v47, v97);
    v48 = (void *)MEMORY[0x1DF0E41AC](0x642E6E6F2E636F64, 0xEA0000000000636FLL);
    v49 = objc_msgSend(v92, sel_systemImageNamed_, v48);

    MEMORY[0x1DF0E41AC]();
    *(_QWORD *)(inited + 40) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    *(_QWORD *)(inited + 48) = 0;
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = v44;
    *(_QWORD *)(v50 + 24) = v35;
    *(_QWORD *)(v50 + 32) = v36;
    *(_QWORD *)(v50 + 40) = v90;
    *(_BYTE *)(v50 + 48) = v11 != 0;
    v51 = paperKitBundle.super.isa;
    v52 = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v98._countAndFlagsBits = 0xD000000000000023;
    v98._object = (void *)0x80000001DDF573E0;
    v53._countAndFlagsBits = 0x746163696C707544;
    v53._object = (void *)0xE900000000000065;
    v54.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v54.value._object = (void *)0xEB00000000656C62;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, (NSBundle)v51, v55, v98);
    v56 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF4DD80);
    v57 = objc_msgSend(v92, sel_systemImageNamed_, v56);

    MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF57410);
    v58 = v91;
    *(_QWORD *)(inited + 56) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v94[3] = &type metadata for PencilAndPaperFeatureFlags;
    v94[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    LOBYTE(v94[0]) = 6;
    LOBYTE(v50) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
    v59 = 0;
    if ((v50 & 1) != 0)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v52) + 0x4A8))(v35, v36, v90, v91) & 1) != 0)
      {
        v60 = swift_allocObject();
        *(_QWORD *)(v60 + 16) = v52;
        *(_QWORD *)(v60 + 24) = v35;
        *(_QWORD *)(v60 + 32) = v36;
        *(_QWORD *)(v60 + 40) = v90;
        *(_BYTE *)(v60 + 48) = v91 != 0;
        v61 = paperKitBundle.super.isa;
        v62 = v52;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v63._countAndFlagsBits = 0xD000000000000016;
        v99._countAndFlagsBits = 0xD00000000000002ALL;
        v99._object = (void *)0x80000001DDF59280;
        v63._object = (void *)0x80000001DDF4E100;
        v64.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v64.value._object = (void *)0xEB00000000656C62;
        v65._countAndFlagsBits = 0;
        v65._object = (void *)0xE000000000000000;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v63, v64, (NSBundle)v61, v65, v99);
        v66 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000013, 0x80000001DDF4E150);
        v67 = objc_msgSend(v92, sel_systemImageNamed_, v66);

        v58 = v91;
        v59 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      }
      else
      {
        v59 = 0;
      }
    }
    *(_QWORD *)(inited + 64) = v59;
    v94[0] = inited;
    specialized Array._endMutation()();
    v68 = AnyCanvas.createImageActionWithDivider(_:)(v35, v36, v90, v58);
    specialized Array.append<A>(contentsOf:)(v68);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v69 = swift_initStackObject();
    *(_OWORD *)(v69 + 16) = xmmword_1DDF35440;
    v70 = swift_allocObject();
    *(_QWORD *)(v70 + 16) = v52;
    *(_QWORD *)(v70 + 24) = v35;
    *(_QWORD *)(v70 + 32) = v36;
    *(_QWORD *)(v70 + 40) = v90;
    *(_BYTE *)(v70 + 48) = v58 != 0;
    v71 = paperKitBundle.super.isa;
    v72 = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v100._countAndFlagsBits = 0xD000000000000020;
    v100._object = (void *)0x80000001DDF57430;
    v73._countAndFlagsBits = 0x6574656C6544;
    v73._object = (void *)0xE600000000000000;
    v74.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v74.value._object = (void *)0xEB00000000656C62;
    v75._countAndFlagsBits = 0;
    v75._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v73, v74, (NSBundle)v71, v75, v100);
    v76 = (void *)MEMORY[0x1DF0E41AC](0x6873617274, 0xE500000000000000);
    v77 = objc_msgSend(v92, sel_systemImageNamed_, v76);

    MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF57460);
    *(_QWORD *)(v69 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    specialized Array._endMutation()();
    v78 = specialized _arrayForceCast<A, B>(_:)(v69);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v78);
    v79 = v94[0];
    v93 = MEMORY[0x1E0DEE9D8];
    v80 = *(_QWORD *)(v94[0] + 16);
    if (v80)
    {
      swift_bridgeObjectRetain_n();
      for (i = 0; i != v80; ++i)
      {
        v82 = *(void **)(v79 + 8 * i + 32);
        if (v82)
        {
          v83 = v82;
          MEMORY[0x1DF0E4398](v83, v84, v85, v86, v87);
          if (*(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v31 = v93;
    }
    else
    {
      swift_bridgeObjectRetain();
      v31 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease_n();
  }
  return v31;
}

void closure #1 in AnyCanvas.actions(canvasElementViews:members:)(_QWORD **a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;

  v3 = *a1;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_8;
  }
  if ((a2 & 0xC000000000000001) != 0)
    v5 = (id)MEMORY[0x1DF0E4D64](0, a2);
  else
    v5 = *(id *)(a2 + 32);
  v6 = v5;
  type metadata accessor for AnyCanvasElementView();
  v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
    goto LABEL_6;
  if (v4 == 1)
    goto LABEL_8;
  if ((a2 & 0xC000000000000001) == 0)
  {
    v13 = *(id *)(a2 + 40);
    v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) != 0)
      goto LABEL_6;
    if (v4 != 2)
    {
      v15 = 6;
      do
      {
        v16 = v15 - 3;
        if (__OFADD__(v15 - 4, 1))
          goto LABEL_28;
        v17 = *(id *)(a2 + 8 * v15);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_6;
        ++v15;
      }
      while (v16 != v4);
    }
LABEL_8:
    v8 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x200))(&v19, v8);
    return;
  }
  MEMORY[0x1DF0E4D64](1, a2);
  v9 = static NSObject.== infix(_:_:)();
  swift_unknownObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return;
  }
  if (v4 == 2)
    goto LABEL_8;
  v10 = 2;
  while (1)
  {
    MEMORY[0x1DF0E4D64](v10, a2);
    v11 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    v12 = static NSObject.== infix(_:_:)();
    swift_unknownObjectRelease();
    if ((v12 & 1) != 0)
      goto LABEL_6;
    ++v10;
    if (v11 == v4)
      goto LABEL_8;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  _QWORD *v14;

  if (a1 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    v6 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0
         ? (_QWORD *)MEMORY[0x1DF0E4D64](v6 - 4, a1)
         : *(id *)(a1 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v14 = v7;
      closure #1 in AnyCanvas.actions(canvasElementViews:members:)(&v14, a2);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return v12 & 1;
      }
      v11 = v10;

      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v12 = 1;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  v12 = 0;
  return v12 & 1;
}

void _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
  _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(a1, 0);
}

void _s8PaperKit9AnyCanvasC10copyActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
  _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(a1, 1);
}

void _s8PaperKit9AnyCanvasC15duplicateActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
  _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(a1, 3);
}

void _s8PaperKit9AnyCanvasC12deleteActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
  _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(a1, 4);
}

void partial apply for closure #1 in AnyCanvas.convertToHandwritingAction(_:)(uint64_t a1)
{
  _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(a1, 5);
}

void partial apply for closure #1 in AnyCanvas.createImageAction(_:)(uint64_t a1)
{
  _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(a1, 6);
}

void _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(uint64_t a1, char a2)
{
  uint64_t v2;

  AnyCanvas.performSelectionAction(_:_:at:)(a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), 0);
}

uint64_t sub_1DDE230F0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #7 in AnyCanvas.performSelectionAction(_:_:at:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #6 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x4A0))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_51()
{
  return swift_release();
}

uint64_t sub_1DDE2322C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(a1, a2, (uint64_t)&unk_1EA850098, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:));
}

uint64_t partial apply for closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(a1, a2, (uint64_t)&unk_1EA850070, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:));
}

uint64_t partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(a1, a2, *(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(unsigned __int8 *)(v4 + 40), a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for CRStableAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t objectdestroy_40Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for CRStableAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for CRStableAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(a1, v6, v7, v8, v9, v10, v12, v13);
}

_QWORD *initializeBufferWithCopyOfBuffer for GraphableExpressionView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v6 = *(int *)(a3 + 32);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    *(_QWORD *)(a1 + 48) = a2[6];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for EnvironmentValues();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for GraphableExpressionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = type metadata accessor for EnvironmentValues();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(int *)(a3 + 32);
  v6 = (_QWORD *)(a1 + v5);
  v7 = (_QWORD *)(a2 + v5);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for EnvironmentValues();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 32);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (_QWORD *)(a2 + v6);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v6, (uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for EnvironmentValues();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 32);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for EnvironmentValues();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 32);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v6, (uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = type metadata accessor for EnvironmentValues();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphableExpressionView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE23A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GraphableExpressionView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE23B0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for GraphableExpressionView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GraphableExpressionView;
  if (!type metadata singleton initialization cache for GraphableExpressionView)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for GraphableExpressionView()
{
  unint64_t v0;

  type metadata accessor for Environment<EnvironmentValues>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Environment<EnvironmentValues>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<EnvironmentValues>.Content)
  {
    type metadata accessor for EnvironmentValues();
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<EnvironmentValues>.Content);
  }
}

uint64_t associated type witness table accessor for View.Body : View in GraphableExpressionView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in GraphableExpressionView.swiftUIColor.getter@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  id v7;
  __int128 v8;
  uint64_t v9;

  v8 = *(_OWORD *)(a1 + 24);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x1DF0E24B4](&v9, v3);
  v4 = v9;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v5 = *(_QWORD *)(v4 + 32);
  swift_retain();
  result = swift_release();
  if (!v5)
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_clearColor, v4, v8);
    result = MEMORY[0x1DF0E22F8](v7);
    v5 = result;
  }
  *a2 = v5;
  return result;
}

uint64_t closure #2 in GraphableExpressionView.swiftUIColor.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x1DF0E24B4](&v2, v0);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  swift_retain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

void GraphableExpressionView.expressionColorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  char v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  CGColor *v13;
  double Alpha;
  double v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x1DF0E24B4](&v17, v0);
  v1 = v17;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v2 = *(_QWORD *)(v1 + 32);
  swift_retain();
  swift_release();
  if (!v2)
    static Color.clear.getter();
  type metadata accessor for UIColor();
  v3 = (void *)UIColor.init(_:)();
  v4 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {

    return;
  }
  v6 = objc_msgSend(v3, sel_accessibilityName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v18._object = (void *)0x80000001DDF59420;
  v8._countAndFlagsBits = 0x7974696361704FLL;
  v8._object = (void *)0xE700000000000000;
  v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v9.value._object = (void *)0xEB00000000656C62;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0xD000000000000030;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v18);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = (CGColor *)objc_msgSend(v3, sel_CGColor);
  Alpha = CGColorGetAlpha(v13);

  v15 = Alpha * 100.0;
  if ((~COERCE__INT64(Alpha * 100.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v15 < 9.22337204e18)
  {
    v17 = (uint64_t)v15;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t closure #1 in GraphableExpressionView.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t KeyPath;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  Swift::String v134;
  Swift::String_optional v135;
  Swift::String v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  Swift::String v172;
  Swift::String_optional v173;
  Swift::String v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _OWORD *v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  Swift::String v202;
  Swift::String_optional v203;
  Swift::String v204;
  Swift::String v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  Swift::String v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int *v224;
  uint64_t v225;
  unint64_t v227;
  _QWORD v228[4];
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t countAndFlagsBits;
  __int128 v297;
  uint64_t v298;
  _OWORD v299[3];
  _BYTE v300[32];
  __int128 v301;
  Swift::String v302;
  Swift::String v303;
  Swift::String v304;

  v287 = a2;
  v277 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>);
  v276 = *(_QWORD *)(v277 - 8);
  MEMORY[0x1E0C80A78](v277, v3);
  v275 = (char *)v228 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>);
  MEMORY[0x1E0C80A78](v273, v5);
  v279 = (char *)v228 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v274, v7);
  v278 = (uint64_t)v228 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
  MEMORY[0x1E0C80A78](v280, v9);
  v281 = (uint64_t)v228 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  MEMORY[0x1E0C80A78](v284, v11);
  v286 = (uint64_t)v228 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v283 = (char *)v228 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v282 = (char *)v228 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v285 = (uint64_t)v228 - v21;
  v272 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x1E0C80A78](v272, v22);
  v271 = (char *)v228 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = type metadata accessor for AttributedString();
  v268 = *(_QWORD *)(v269 - 8);
  MEMORY[0x1E0C80A78](v269, v24);
  v267 = (char *)v228 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = type metadata accessor for CalculateExpressionTypesetView();
  v256 = *(_QWORD *)(v257 - 8);
  MEMORY[0x1E0C80A78](v257, v26);
  v255 = (char *)v228 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v254, v28);
  v258 = (char *)v228 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v260, v30);
  v259 = (uint64_t)v228 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onTapGesture(count:perform:)>>.0);
  v262 = *(_QWORD *)(v263 - 8);
  MEMORY[0x1E0C80A78](v263, v32);
  v261 = (char *)v228 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  MEMORY[0x1E0C80A78](v265, v34);
  v266 = (char *)v228 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v293 = (uint64_t)v228 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v292 = (uint64_t)v228 - v41;
  v250 = type metadata accessor for DynamicTypeSize();
  v249 = *(_QWORD *)(v250 - 8);
  MEMORY[0x1E0C80A78](v250, v42);
  v248 = (char *)v228 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = type metadata accessor for ControlSize();
  v240 = *(_QWORD *)(v243 - 8);
  MEMORY[0x1E0C80A78](v243, v44);
  v237 = (char *)v228 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for GraphableExpressionView();
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v48);
  v264 = (uint64_t)v228 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v289 = v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v288 = (uint64_t)v228 - v52;
  v232 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColorPicker<Text>);
  v230 = *(_QWORD *)(v232 - 8);
  MEMORY[0x1E0C80A78](v232, v53);
  v229 = (char *)v228 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>>);
  MEMORY[0x1E0C80A78](v231, v55);
  v234 = (char *)v228 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.dynamicTypeSize(_:)>>.0);
  v238 = *(_QWORD *)(v239 - 8);
  MEMORY[0x1E0C80A78](v239, v57);
  v236 = (char *)v228 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>);
  MEMORY[0x1E0C80A78](v233, v59);
  v241 = (char *)v228 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v235, v61);
  v247 = (uint64_t)v228 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v246, v63);
  v242 = (uint64_t)v228 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>);
  MEMORY[0x1E0C80A78](v251, v65);
  v252 = (char *)v228 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v67, v68);
  v291 = (uint64_t)v228 - v69;
  MEMORY[0x1E0C80A78](v70, v71);
  v290 = (uint64_t)v228 - v72;
  v73 = a1[2];
  v74 = a1[3];
  v75 = a1[4];
  *(_QWORD *)v300 = v73;
  *(_QWORD *)&v300[8] = v74;
  *(_QWORD *)&v300[16] = v75;
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x1DF0E24B4](v299);
  v77 = *(_QWORD *)&v299[0];
  swift_getKeyPath();
  *(_QWORD *)v300 = v77;
  v295 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v78 = *(_QWORD *)(v77 + 32);
  swift_retain();
  swift_release();
  if (!v78)
  {
    v79 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    v78 = MEMORY[0x1DF0E23A0](v79);
  }
  v270 = v78;
  *(_QWORD *)v300 = v73;
  *(_QWORD *)&v300[8] = v74;
  *(_QWORD *)&v300[16] = v75;
  MEMORY[0x1DF0E24B4](v299, v76);
  v80 = *(_QWORD *)&v299[0];
  swift_getKeyPath();
  *(_QWORD *)v300 = v80;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  v228[3] = LocalizedStringKey.init(stringLiteral:)();
  v228[2] = v81;
  v228[1] = v82;
  v83 = v288;
  outlined init with copy of GraphableExpressionView((uint64_t)a1, v288);
  type metadata accessor for MainActor();
  v84 = static MainActor.shared.getter();
  v85 = *(unsigned __int8 *)(v47 + 80);
  v244 = ~v85;
  v86 = (uint64_t)a1;
  v87 = (v85 + 32) & ~v85;
  v245 = v85;
  v88 = v85 | 7;
  v89 = swift_allocObject();
  v294 = v76;
  v90 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v89 + 16) = v84;
  *(_QWORD *)(v89 + 24) = v90;
  outlined init with take of GraphableExpressionView(v83, v89 + v87);
  outlined init with copy of GraphableExpressionView(v86, v83);
  v91 = static MainActor.shared.getter();
  v253 = v88;
  v92 = swift_allocObject();
  *(_QWORD *)(v92 + 16) = v91;
  *(_QWORD *)(v92 + 24) = v90;
  v93 = v92 + v87;
  v94 = v86;
  outlined init with take of GraphableExpressionView(v83, v93);
  Binding.init(get:set:)();
  v95 = v229;
  ColorPicker<>.init(_:selection:supportsOpacity:)();
  v96 = v240;
  v97 = v237;
  v98 = v243;
  (*(void (**)(char *, _QWORD, uint64_t))(v240 + 104))(v237, *MEMORY[0x1E0CD8750], v243);
  KeyPath = swift_getKeyPath();
  v100 = (uint64_t)v234;
  v101 = (uint64_t *)&v234[*(int *)(v231 + 36)];
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v101 + *(int *)(v102 + 28), v97, v98);
  *v101 = KeyPath;
  v103 = v230;
  v104 = v232;
  (*(void (**)(uint64_t, char *, uint64_t))(v230 + 16))(v100, v95, v232);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v95, v104);
  v105 = v249;
  v106 = v248;
  v107 = v250;
  (*(void (**)(char *, _QWORD, uint64_t))(v249 + 104))(v248, *MEMORY[0x1E0CD9930], v250);
  lazy protocol witness table accessor for type ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>();
  v108 = v236;
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
  outlined destroy of StocksKitCurrencyCache.Provider?(v100, &demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v109 = v238;
  v110 = (uint64_t)v241;
  v111 = v239;
  (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v241, v108, v239);
  v112 = (_OWORD *)(v110 + *(int *)(v233 + 36));
  v113 = v299[1];
  *v112 = v299[0];
  v112[1] = v113;
  v112[2] = v299[2];
  (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v111);
  LOBYTE(v111) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  v115 = v114;
  v117 = v116;
  v119 = v118;
  v121 = v120;
  v122 = v247;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v110, v247, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>);
  v123 = v122 + *(int *)(v235 + 36);
  *(_BYTE *)v123 = v111;
  *(_QWORD *)(v123 + 8) = v115;
  *(_QWORD *)(v123 + 16) = v117;
  *(_QWORD *)(v123 + 24) = v119;
  *(_QWORD *)(v123 + 32) = v121;
  *(_BYTE *)(v123 + 40) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v110, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>);
  LOBYTE(v111) = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  v125 = v124;
  v127 = v126;
  v129 = v128;
  v131 = v130;
  v132 = v242;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v122, v242, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>);
  v133 = v132 + *(int *)(v246 + 36);
  *(_BYTE *)v133 = v111;
  *(_QWORD *)(v133 + 8) = v125;
  *(_QWORD *)(v133 + 16) = v127;
  *(_QWORD *)(v133 + 24) = v129;
  *(_QWORD *)(v133 + 32) = v131;
  *(_BYTE *)(v133 + 40) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v122, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v302._countAndFlagsBits = 0xD000000000000033;
  v302._object = (void *)0x80000001DDF592F0;
  v134._countAndFlagsBits = 0x726F6C6F43;
  v134._object = (void *)0xE500000000000000;
  v135.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v135.value._object = (void *)0xEB00000000656C62;
  v136._countAndFlagsBits = 0;
  v136._object = (void *)0xE000000000000000;
  *(Swift::String *)v300 = NSLocalizedString(_:tableName:bundle:value:comment:)(v134, v135, paperKitBundle, v136, v302);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  lazy protocol witness table accessor for type String and conformance String();
  v137 = (uint64_t)v252;
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v132, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
  GraphableExpressionView.expressionColorDescription.getter();
  *(_QWORD *)v300 = v138;
  *(_QWORD *)&v300[8] = v139;
  v140 = v291;
  ModifiedContent<>.accessibilityValue<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v137, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>);
  outlined init with take of (key: Int, value: AnyCRValue)?(v140, v290, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>);
  *(_QWORD *)v300 = *(_QWORD *)(v94 + 16);
  *(_OWORD *)&v300[8] = *(_OWORD *)(v94 + 24);
  MEMORY[0x1DF0E24B4](&countAndFlagsBits, v294);
  v141 = countAndFlagsBits;
  swift_getKeyPath();
  *(_QWORD *)v300 = v141;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  v142 = v255;
  CalculateExpressionTypesetView.init(expression:)();
  v143 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  v145 = v144;
  v147 = v146;
  v149 = v148;
  v151 = v150;
  v152 = v256;
  v153 = (uint64_t)v258;
  v154 = v257;
  (*(void (**)(char *, char *, uint64_t))(v256 + 16))(v258, v142, v257);
  v155 = v153 + *(int *)(v254 + 36);
  *(_BYTE *)v155 = v143;
  *(_QWORD *)(v155 + 8) = v145;
  *(_QWORD *)(v155 + 16) = v147;
  *(_QWORD *)(v155 + 24) = v149;
  *(_QWORD *)(v155 + 32) = v151;
  *(_BYTE *)(v155 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v152 + 8))(v142, v154);
  LOBYTE(v154) = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  v157 = v156;
  v159 = v158;
  v161 = v160;
  v163 = v162;
  v164 = v259;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v153, v259, &demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
  v165 = v260;
  v166 = v164 + *(int *)(v260 + 36);
  *(_BYTE *)v166 = v154;
  *(_QWORD *)(v166 + 8) = v157;
  *(_QWORD *)(v166 + 16) = v159;
  *(_QWORD *)(v166 + 24) = v161;
  *(_QWORD *)(v166 + 32) = v163;
  *(_BYTE *)(v166 + 40) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v153, &demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
  v167 = v288;
  outlined init with copy of GraphableExpressionView(v94, v288);
  v168 = (v245 + 16) & v244;
  v289 += v168;
  v169 = swift_allocObject();
  outlined init with take of GraphableExpressionView(v167, v169 + v168);
  v170 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  v171 = v261;
  View.onTapGesture(count:perform:)();
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v164, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout>);
  v303._object = (void *)0x80000001DDF59330;
  v172._countAndFlagsBits = 0x6E6F697461757145;
  v172._object = (void *)0xE800000000000000;
  v173.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v173.value._object = (void *)0xEB00000000656C62;
  v174._countAndFlagsBits = 0;
  v174._object = (void *)0xE000000000000000;
  v303._countAndFlagsBits = 0xD000000000000028;
  *(Swift::String *)v300 = NSLocalizedString(_:tableName:bundle:value:comment:)(v172, v173, paperKitBundle, v174, v303);
  countAndFlagsBits = v165;
  *(_QWORD *)&v297 = v170;
  swift_getOpaqueTypeConformance2();
  v175 = (uint64_t)v266;
  v176 = v263;
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v262 + 8))(v171, v176);
  *(_QWORD *)v300 = *(_QWORD *)(v94 + 16);
  *(_OWORD *)&v300[8] = *(_OWORD *)(v94 + 24);
  MEMORY[0x1DF0E24B4](&countAndFlagsBits, v294);
  v177 = countAndFlagsBits;
  swift_getKeyPath();
  *(_QWORD *)v300 = v177;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  v178 = v267;
  CalculateExpression.accessibilityMathEquationDescription.getter();
  swift_release();
  AttributedString.characters.getter();
  (*(void (**)(char *, uint64_t))(v268 + 8))(v178, v269);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF28]);
  *(_QWORD *)v300 = String.init<A>(_:)();
  *(_QWORD *)&v300[8] = v179;
  v180 = v293;
  ModifiedContent<>.accessibilityValue<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v175, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  outlined init with take of (key: Int, value: AnyCRValue)?(v180, v292, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  v181 = v264;
  outlined init with copy of GraphableExpressionView(v94, v264);
  v182 = swift_allocObject();
  v183 = outlined init with take of GraphableExpressionView(v181, v182 + v168);
  MEMORY[0x1E0C80A78](v183, v184);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>);
  lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>> and conformance <> _ConditionalContent<A, B>();
  v185 = v275;
  Button.init(action:label:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v186 = v276;
  v187 = (uint64_t)v279;
  v188 = v277;
  (*(void (**)(char *, char *, uint64_t))(v276 + 16))(v279, v185, v277);
  v189 = (_OWORD *)(v187 + *(int *)(v273 + 36));
  v190 = *(_OWORD *)&v300[16];
  *v189 = *(_OWORD *)v300;
  v189[1] = v190;
  v189[2] = v301;
  (*(void (**)(char *, uint64_t))(v186 + 8))(v185, v188);
  LOBYTE(v188) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  v192 = v191;
  v194 = v193;
  v196 = v195;
  v198 = v197;
  v199 = v278;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v187, v278, &demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>);
  v200 = v199 + *(int *)(v274 + 36);
  *(_BYTE *)v200 = v188;
  *(_QWORD *)(v200 + 8) = v192;
  *(_QWORD *)(v200 + 16) = v194;
  *(_QWORD *)(v200 + 24) = v196;
  *(_QWORD *)(v200 + 32) = v198;
  *(_BYTE *)(v200 + 40) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v187, &demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>);
  v201 = v281;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v199, v281, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>);
  *(_BYTE *)(v201 + *(int *)(v280 + 36)) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v199, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>);
  v304._countAndFlagsBits = 0xD000000000000035;
  v304._object = (void *)0x80000001DDF59360;
  v202._countAndFlagsBits = 0x696C696269736956;
  v202._object = (void *)0xEA00000000007974;
  v203.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v203.value._object = (void *)0xEB00000000656C62;
  v204._countAndFlagsBits = 0;
  v204._object = (void *)0xE000000000000000;
  v205 = NSLocalizedString(_:tableName:bundle:value:comment:)(v202, v203, paperKitBundle, v204, v304);
  countAndFlagsBits = v205._countAndFlagsBits;
  *(_QWORD *)&v297 = v205._object;
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
  v206 = (uint64_t)v283;
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v201, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
  countAndFlagsBits = *(_QWORD *)(v94 + 16);
  v297 = *(_OWORD *)(v94 + 24);
  MEMORY[0x1DF0E24B4](&v298, v294);
  v207 = v298;
  swift_getKeyPath();
  countAndFlagsBits = v207;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v201) = *(unsigned __int8 *)(v207 + 24);
  swift_release();
  if ((_DWORD)v201 == 1)
  {
    v208 = 0xD000000000000029;
    v227 = 0x80000001DDF593D0;
    v209 = 0x656C6269736956;
    v210 = 0xE700000000000000;
    v211 = 0x617A696C61636F4CLL;
    v212 = 0xEB00000000656C62;
    v213 = 0;
    v214 = 0xE000000000000000;
  }
  else
  {
    v227 = 0x80000001DDF593A0;
    v209 = 0x6E6564646948;
    v210 = 0xE600000000000000;
    v211 = 0x617A696C61636F4CLL;
    v212 = 0xEB00000000656C62;
    v213 = 0;
    v214 = 0xE000000000000000;
    v208 = 0xD000000000000028;
  }
  v215 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v209, *(Swift::String_optional *)&v211, paperKitBundle, *(Swift::String *)&v213, *(Swift::String *)&v208);
  countAndFlagsBits = v215._countAndFlagsBits;
  *(_QWORD *)&v297 = v215._object;
  v216 = (uint64_t)v282;
  ModifiedContent<>.accessibilityValue<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v206, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  v217 = v285;
  outlined init with take of (key: Int, value: AnyCRValue)?(v216, v285, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  v218 = v290;
  v219 = v291;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v290, v291, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>);
  v220 = v292;
  v221 = v293;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v292, v293, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  v222 = v286;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v217, v286, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  v223 = v287;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v219, v287, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>);
  v224 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v221, v223 + v224[12], &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  v225 = v223 + v224[16];
  *(_QWORD *)v225 = 0;
  *(_BYTE *)(v225 + 8) = 1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v222, v223 + v224[20], &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v217, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v220, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v218, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v222, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v221, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v219, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>);
}

uint64_t closure #1 in closure #1 in GraphableExpressionView.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x1DF0E24B4](&v3, v0);
  v1 = v3;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  *(_BYTE *)(v1 + 24) = (*(_BYTE *)(v1 + 24) & 1) == 0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return swift_release();
}

uint64_t closure #3 in closure #1 in GraphableExpressionView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v29 = a2;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>.Storage);
  MEMORY[0x1E0C80A78](v28, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DynamicTypeSize();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.dynamicTypeSize(_:)>>.0);
  v27 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - v17;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_OWORD *)(a1 + 24);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x1DF0E24B4](&v32, v19);
  v20 = v32;
  swift_getKeyPath();
  v30 = v20;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v21 = *(unsigned __int8 *)(v20 + 24);
  swift_release();
  if (v21 == 1)
  {
    v30 = Image.init(systemName:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0CD9928], v6);
    v22 = MEMORY[0x1E0CDF840];
    v23 = MEMORY[0x1E0CDF820];
    View.dynamicTypeSize(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_release();
    v24 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v18, v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v5, v18, v11);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ShapeView<Rectangle, Color>);
    v30 = v22;
    *(_QWORD *)&v31 = v23;
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, Color> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<Rectangle, Color>, MEMORY[0x1E0CD8668]);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v18, v11);
  }
  else
  {
    *(_QWORD *)v5 = static Color.clear.getter();
    *((_WORD *)v5 + 4) = 256;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ShapeView<Rectangle, Color>);
    v30 = MEMORY[0x1E0CDF840];
    *(_QWORD *)&v31 = MEMORY[0x1E0CDF820];
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, Color> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<Rectangle, Color>, MEMORY[0x1E0CD8668]);
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t protocol witness for View.body.getter in conformance GraphableExpressionView@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  *(_QWORD *)a1 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>);
  return closure #1 in GraphableExpressionView.body.getter(v1, a1 + *(int *)(v3 + 44));
}

uint64_t outlined init with take of GraphableExpressionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphableExpressionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in GraphableExpressionView.swiftUIColor.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GraphableExpressionView() - 8) + 80);
  return closure #1 in GraphableExpressionView.swiftUIColor.getter(v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for GraphableExpressionView();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v3 = v0 + ((v2 + 32) & ~v2) + *(int *)(v1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for EnvironmentValues();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in GraphableExpressionView.swiftUIColor.getter()
{
  type metadata accessor for GraphableExpressionView();
  return closure #2 in GraphableExpressionView.swiftUIColor.getter();
}

uint64_t sub_1DDE25FF4()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t key path setter for EnvironmentValues.controlSize : EnvironmentValues, serialized(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for ControlSize();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v7 + 16))(v6, a1, v4);
  return MEMORY[0x1DF0E1D88](v6);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>>);
    v2[0] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type ColorPicker<Text> and conformance ColorPicker<A>, &demangling cache variable for type metadata for ColorPicker<Text>, MEMORY[0x1E0CD86B0]);
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7[0] = a3();
    v7[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>>);
    v2[3] = lazy protocol witness table accessor for type ModifiedContent<ColorPicker<Text>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
    v2[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CalculateExpressionTypesetView and conformance CalculateExpressionTypesetView, (uint64_t (*)(uint64_t))MEMORY[0x1E0D09F30], MEMORY[0x1E0D09F20]);
    v2[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t objectdestroy_13Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for GraphableExpressionView();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v3 = v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for EnvironmentValues();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GraphableExpressionView.body.getter()
{
  type metadata accessor for GraphableExpressionView();
  return closure #1 in closure #1 in GraphableExpressionView.body.getter();
}

uint64_t partial apply for closure #3 in closure #1 in GraphableExpressionView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #3 in closure #1 in GraphableExpressionView.body.getter(*(_QWORD *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>> and conformance <> _ConditionalContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>);
    v2[2] = MEMORY[0x1E0CDF840];
    v2[3] = MEMORY[0x1E0CDF820];
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, Color> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<Rectangle, Color>, MEMORY[0x1E0CD8668]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>, &demangling cache variable for type metadata for _ContentShapeModifier<Rectangle>, MEMORY[0x1E0CDBE48]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, MEMORY[0x1E0CDFA58]);
    v2[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

uint64_t sub_1DDE265F0()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, AccessibilityAttachmentModifier>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _ShapeView<Rectangle, Color>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, MEMORY[0x1E0CDFB10]);
}

uint64_t closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t ObjectType;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, double, double);

  v6[2] = type metadata accessor for MainActor();
  v6[3] = static MainActor.shared.getter();
  ObjectType = swift_getObjectType();
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, double, double))(**(int **)(a4 + 32)
                                                                                   + *(_QWORD *)(a4 + 32));
  v13 = (_QWORD *)swift_task_alloc();
  v6[4] = v13;
  *v13 = v6;
  v13[1] = closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:);
  return v15(a5, a6, ObjectType, a4, a1, a2);
}

uint64_t closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

Swift::Void __swiftcall CanvasCollaborationStateView.CollaborationCursor.position(for:)(CGAffineTransform *a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  uint64_t v12;
  id v13;
  void *v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGPoint v21;
  id v22;
  void *v23;
  id v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  int64_t v30;
  uint64_t v31;
  CGFloat *v32;
  CGFloat v33;
  CGFloat v34;
  CGPoint v35;
  unint64_t v36;
  unint64_t v37;
  CGPoint *v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CGPoint v49;
  unint64_t v50;
  float64x2_t v51;
  double v52;
  CGFloat ty;
  CGFloat tx;
  CGFloat d;
  CGFloat c;
  CGFloat b;
  CGFloat a;
  id v59;
  double v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  CGAffineTransform v65;
  CGPoint v66;
  CGPoint v67;
  CGPoint v68;

  v5 = v4;
  v6 = v3;
  v59 = v2;
  v7 = v1;
  b = a1->b;
  a = a1->a;
  d = a1->d;
  c = a1->c;
  ty = a1->ty;
  tx = a1->tx;
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v65, 0.0);
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v52 = v65.tx;
    v10 = *(double *)(v6 + 32);
    v9 = *(double *)(v6 + 40);
    v11 = *(double *)(v6 + 48);
    if (v7 >> 62)
      goto LABEL_16;
    v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12)
    {
      while (1)
      {
        v50 = v5;
        v5 = 0;
        v6 += 72;
        --v8;
        v51 = (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL);
        while ((v7 & 0xC000000000000001) != 0)
        {
          v13 = (id)MEMORY[0x1DF0E4D64](v5, v7);
LABEL_9:
          v14 = v13;
          CGAffineTransformMakeRotation(&v65, v52 + v10);
          v15 = v65.a;
          v16 = v65.b;
          v17 = v65.c;
          v18 = v65.d;
          v20 = v65.tx;
          v19 = v65.ty;
          v65.a = a;
          v65.b = b;
          v65.c = c;
          v65.d = d;
          v65.tx = tx;
          v65.ty = ty;
          v66.x = v9;
          v66.y = v11;
          v21 = CGPointApplyAffineTransform(v66, &v65);
          v22 = objc_msgSend(v59, sel_window);
          if (v22)
          {
            v23 = v22;
            v24 = objc_msgSend(v22, sel_screen);

            objc_msgSend(v24, sel_scale);
            v60 = v25;

            v26 = v60;
          }
          else
          {
            v26 = 1.0;
          }
          v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26, 0);
          v28 = vmulq_n_f64((float64x2_t)v21, v26);
          v29 = vrndmq_f64(v28);
          objc_msgSend(v14, sel_setPosition_, vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v28, v29), v51), (int8x16_t)vrndpq_f64(v28), (int8x16_t)v29), v27));
          v65.a = v15;
          v65.b = v16;
          v65.c = v17;
          v65.d = v18;
          v65.tx = v20;
          v65.ty = v19;
          objc_msgSend(v14, sel_setAffineTransform_, &v65);

          if (v8 != v5)
          {
            v9 = *(double *)(v6 - 8);
            v11 = *(double *)v6;
            v10 = *(double *)(v6 - 16);
            ++v5;
            v6 += 24;
            if (v12 != v5)
              continue;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v5 = v50;
          goto LABEL_18;
        }
        if (v5 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          break;
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12 = _CocoaArrayWrapper.endIndex.getter();
        if (!v12)
          goto LABEL_17;
      }
      v13 = *(id *)(v7 + 8 * v5 + 32);
      goto LABEL_9;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_18:
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v65, 0.0);
  CGAffineTransformMakeRotation(&v65, v65.tx);
  v30 = *(_QWORD *)(v5 + 16);
  v31 = MEMORY[0x1E0DEE9D8];
  if (v30)
  {
    v62 = *(_OWORD *)&v65.c;
    v63 = *(_OWORD *)&v65.a;
    v61 = *(_OWORD *)&v65.tx;
    v64 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
    v31 = v64;
    v32 = (CGFloat *)(v5 + 40);
    do
    {
      v33 = *(v32 - 1);
      v34 = *v32;
      *(_OWORD *)&v65.a = v63;
      *(_OWORD *)&v65.c = v62;
      *(_OWORD *)&v65.tx = v61;
      v67.x = v33;
      v67.y = v34;
      v35 = CGPointApplyAffineTransform(v67, &v65);
      v37 = *(_QWORD *)(v64 + 16);
      v36 = *(_QWORD *)(v64 + 24);
      if (v37 >= v36 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
      *(_QWORD *)(v64 + 16) = v37 + 1;
      v38 = (CGPoint *)(v64 + 32 * v37);
      v38[2].x = v33;
      v38[2].y = v34;
      v38[3] = v35;
      v32 += 2;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
  }
  v39 = *(_QWORD *)(v31 + 16);
  if (v39)
  {
    v40 = *(double *)(v31 + 32);
    v41 = *(double *)(v31 + 40);
    v42 = v39 - 1;
    if (v42)
    {
      v43 = *(double *)(v31 + 56);
      v44 = (double *)(v31 + 88);
      do
      {
        v45 = *(v44 - 3);
        v46 = *(v44 - 2);
        v47 = *v44;
        v44 += 4;
        v48 = v47;
        if (v47 < v43)
        {
          v40 = v45;
          v41 = v46;
          v43 = v48;
        }
        --v42;
      }
      while (v42);
    }
    swift_bridgeObjectRelease();
    v65.a = a;
    v65.b = b;
    v65.c = c;
    v65.d = d;
    v65.tx = tx;
    v65.ty = ty;
    v68.x = v40;
    v68.y = v41;
    v49 = CGPointApplyAffineTransform(v68, &v65);
    CanvasCollaborationAvatarView.frameAnchorPoint.setter(v49.x, v49.y + -12.0);
  }
  else
  {
    swift_bridgeObjectRelease();
    __break(1u);
  }
}

void __swiftcall CanvasCollaborationStateView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  void *v3;
  Class isa;
  double y;
  double x;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v11;
  void *v12;
  id v13;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v7 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for UIView();
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
    goto LABEL_16;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    do
    {
      while (__OFSUB__(v9--, 1))
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v9)
          goto LABEL_11;
      }
      if ((v8 & 0xC000000000000001) != 0)
      {
        v11 = (id)MEMORY[0x1DF0E4D64](v9, v8);
        goto LABEL_9;
      }
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_14;
      if (v9 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_15;
      v11 = *(id *)(v8 + 32 + 8 * v9);
LABEL_9:
      v12 = v11;
      objc_msgSend(v11, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      v13 = objc_msgSend(v12, sel_hitTest_withEvent_, isa);

    }
    while (!v13 && v9);
  }
LABEL_11:
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CanvasCollaborationStateView.removeAllHandles()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t i;
  id v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int64_t v50;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v42 - v7;
  v9 = (unint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_selectionCursors);
  swift_beginAccess();
  v10 = *v9;
  v12 = (_QWORD *)(*v9 + 64);
  v11 = *v12;
  v44 = v9;
  v45 = v12;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v11;
  v46 = (unint64_t)(v13 + 63) >> 6;
  v47 = v10;
  v43 = v46 - 1;
  swift_bridgeObjectRetain();
  v49 = v4;
  v50 = 0;
  v48 = v8;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v50 << 6);
LABEL_7:
      v19 = v47;
      v20 = *(_QWORD *)(v47 + 48);
      v21 = type metadata accessor for UUID();
      (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v4, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v21);
      v22 = (_QWORD *)(*(_QWORD *)(v19 + 56) + 32 * v18);
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
      v24 = &v4[*(int *)(v23 + 48)];
      v25 = (void *)v22[1];
      v26 = v22[2];
      v27 = v22[3];
      *(_QWORD *)v24 = *v22;
      *((_QWORD *)v24 + 1) = v25;
      *((_QWORD *)v24 + 2) = v26;
      *((_QWORD *)v24 + 3) = v27;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v4, 0, 1, v23);
      swift_bridgeObjectRetain();
      v28 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    v29 = v50 + 1;
    if (__OFADD__(v50, 1))
      goto LABEL_39;
    if (v29 < v46)
    {
      v30 = v45[v29];
      if (v30)
        goto LABEL_11;
      v31 = v50 + 2;
      ++v50;
      if (v29 + 1 < v46)
      {
        v30 = v45[v31];
        if (v30)
          goto LABEL_14;
        v50 = v29 + 1;
        if (v29 + 2 < v46)
        {
          v30 = v45[v29 + 2];
          if (v30)
          {
            v29 += 2;
            goto LABEL_11;
          }
          v31 = v29 + 3;
          v50 = v29 + 2;
          if (v29 + 3 < v46)
            break;
        }
      }
    }
LABEL_25:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v4, 1, 1, v32);
    v15 = 0;
LABEL_26:
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v4, (uint64_t)v8, &demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v8, 1, v33) == 1)
    {
      swift_release();
      v41 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      *v44 = v41;
      swift_bridgeObjectRelease();
      return;
    }
    v34 = &v8[*(int *)(v33 + 48)];
    v35 = *(_QWORD *)v34;
    v36 = (void *)*((_QWORD *)v34 + 1);
    if (*(_QWORD *)v34 >> 62)
    {
      swift_bridgeObjectRetain();
      v37 = _CocoaArrayWrapper.endIndex.getter();
      if (!v37)
        goto LABEL_4;
    }
    else
    {
      v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v37)
        goto LABEL_4;
    }
    if (v37 < 1)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    for (i = 0; i != v37; ++i)
    {
      if ((v35 & 0xC000000000000001) != 0)
        v39 = (id)MEMORY[0x1DF0E4D64](i, v35);
      else
        v39 = *(id *)(v35 + 8 * i + 32);
      v40 = v39;
      objc_msgSend(v39, sel_removeFromSuperlayer);

    }
LABEL_4:
    swift_bridgeObjectRelease();
    objc_msgSend(v36, sel_removeFromSuperview);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID();
    v8 = v48;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v48, v16);
    v4 = v49;
  }
  v30 = v45[v31];
  if (v30)
  {
LABEL_14:
    v29 = v31;
LABEL_11:
    v15 = (v30 - 1) & v30;
    v18 = __clz(__rbit64(v30)) + (v29 << 6);
    v50 = v29;
    goto LABEL_7;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v46)
    {
      v50 = v43;
      goto LABEL_25;
    }
    v30 = v45[v29];
    ++v31;
    if (v30)
      goto LABEL_11;
  }
LABEL_40:
  __break(1u);
}

Swift::Void __swiftcall CanvasCollaborationStateView.removeOldHandles()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t ObjectType;
  char v62;
  uint64_t v63;
  uint64_t i;
  id v65;
  void *v66;
  unint64_t v67;
  char v68;
  char v69;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  id v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v1);
  v87 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CanvasState>);
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86, v3);
  v84 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v97 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v72 - v16;
  v18 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_canvas, v15);
  if (!v18)
    return;
  v19 = (char *)v18;
  v20 = v18 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  if (!MEMORY[0x1DF0E666C](v20))
  {

    return;
  }
  v77 = *(_QWORD *)(v20 + 8);
  v21 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_selectionCursors);
  swift_beginAccess();
  v22 = *v21;
  v23 = *(_QWORD *)(*v21 + 64);
  v75 = *v21 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v95 = v25 & v23;
  v74 = v19;
  v26 = &v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState];
  v79 = v22;
  swift_bridgeObjectRetain();
  v83 = v26;
  swift_beginAccess();
  v90 = 0;
  v76 = (unint64_t)(v24 + 63) >> 6;
  v73 = v76 - 1;
  v27 = v5;
  v80 = v5;
  v91 = v6;
  v81 = v12;
  v92 = v17;
  v82 = v21;
  v28 = v95;
  if (!v95)
    goto LABEL_11;
LABEL_9:
  v95 = (v28 - 1) & v28;
  v32 = __clz(__rbit64(v28)) | (v90 << 6);
LABEL_10:
  v33 = v79;
  v34 = v27;
  (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v12, *(_QWORD *)(v79 + 48) + *(_QWORD *)(v6 + 72) * v32, v27);
  v35 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 32 * v32);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
  v37 = &v12[*(int *)(v36 + 48)];
  v38 = *v35;
  v39 = (void *)v35[1];
  v40 = v35[2];
  v41 = v35[3];
  *(_QWORD *)v37 = v38;
  *((_QWORD *)v37 + 1) = v39;
  *((_QWORD *)v37 + 2) = v40;
  *((_QWORD *)v37 + 3) = v41;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v12, 0, 1, v36);
  swift_bridgeObjectRetain();
  v42 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v12, (uint64_t)v17, &demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v17, 1, v47) == 1)
    {

      swift_unknownObjectRelease();
      swift_release();
      return;
    }
    v48 = &v17[*(int *)(v47 + 48)];
    v49 = *(_QWORD *)v48;
    v96 = (id)*((_QWORD *)v48 + 1);
    v50 = *((_QWORD *)v48 + 2);
    v93 = *((_QWORD *)v48 + 3);
    v94 = v50;
    v27 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v97, v17, v34);
    v51 = v85;
    v52 = v84;
    v53 = v86;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v84, v83, v86);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
    v54 = v87;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
    v55 = v89;
    CRDictionary.subscript.getter();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v54, v55);
    v56 = v101;
    v57 = v82;
    if (v101)
    {
      v58 = v82;
      v60 = v99;
      v59 = v100;
      if (*(_QWORD *)(v102 + 16) || *(_QWORD *)(v103 + 16))
      {
        ObjectType = swift_getObjectType();
        swift_bridgeObjectRetain();
        outlined consume of TimestampedSelection?(v60, v59, v56);
        v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 40))(v59, v56, ObjectType);
        swift_bridgeObjectRelease();
        v57 = v58;
        v27 = v80;
        if ((v62 & 1) != 0)
        {
          v6 = v91;
          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v97, v80);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          v12 = v81;
          v17 = v92;
          v28 = v95;
          if (v95)
            goto LABEL_9;
          goto LABEL_11;
        }
      }
      else
      {
        outlined consume of TimestampedSelection?(v99, v100, v101);
        v57 = v58;
        v27 = v80;
      }
    }
    if (v49 >> 62)
    {
      swift_bridgeObjectRetain();
      v63 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v63 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v17 = v92;
    if (v63)
      break;
LABEL_46:
    swift_bridgeObjectRelease();
    v31 = v96;
    objc_msgSend(v96, sel_removeFromSuperview);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v67 = specialized __RawDictionaryStorage.find<A>(_:)(v97);
    v69 = v68;
    swift_bridgeObjectRelease();
    if ((v69 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v71 = *v57;
      v98 = *v57;
      *v57 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v71 = v98;
      }
      (*(void (**)(unint64_t, uint64_t))(v91 + 8))(*(_QWORD *)(v71 + 48) + *(_QWORD *)(v91 + 72) * v67, v27);
      v29 = v98;
      v30 = *(void **)(*(_QWORD *)(v98 + 56) + 32 * v67 + 8);
      specialized _NativeDictionary._delete(at:)(v67, v98);
      *v57 = v29;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v27 = v80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v92;
      v31 = v96;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v6 = v91;
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v97, v27);
    v12 = v81;
    v28 = v95;
    if (v95)
      goto LABEL_9;
LABEL_11:
    v43 = v90 + 1;
    if (__OFADD__(v90, 1))
      goto LABEL_54;
    if (v43 < v76)
    {
      v44 = *(_QWORD *)(v75 + 8 * v43);
      if (v44)
        goto LABEL_14;
      v45 = v90 + 2;
      ++v90;
      if (v43 + 1 < v76)
      {
        v44 = *(_QWORD *)(v75 + 8 * v45);
        if (v44)
          goto LABEL_17;
        v90 = v43 + 1;
        if (v43 + 2 < v76)
        {
          v44 = *(_QWORD *)(v75 + 8 * (v43 + 2));
          if (v44)
          {
            v43 += 2;
            goto LABEL_14;
          }
          v45 = v43 + 3;
          v90 = v43 + 2;
          if (v43 + 3 < v76)
          {
            v44 = *(_QWORD *)(v75 + 8 * v45);
            if (!v44)
            {
              while (1)
              {
                v43 = v45 + 1;
                if (__OFADD__(v45, 1))
                  goto LABEL_55;
                if (v43 >= v76)
                {
                  v90 = v73;
                  goto LABEL_28;
                }
                v44 = *(_QWORD *)(v75 + 8 * v43);
                ++v45;
                if (v44)
                  goto LABEL_14;
              }
            }
LABEL_17:
            v43 = v45;
LABEL_14:
            v95 = (v44 - 1) & v44;
            v32 = __clz(__rbit64(v44)) + (v43 << 6);
            v90 = v43;
            goto LABEL_10;
          }
        }
      }
    }
LABEL_28:
    v34 = v27;
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v12, 1, 1, v46);
    v95 = 0;
  }
  if (v63 >= 1)
  {
    for (i = 0; i != v63; ++i)
    {
      if ((v49 & 0xC000000000000001) != 0)
        v65 = (id)MEMORY[0x1DF0E4D64](i, v49);
      else
        v65 = *(id *)(v49 + 8 * i + 32);
      v66 = v65;
      objc_msgSend(v65, sel_removeFromSuperlayer);

    }
    goto LABEL_46;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

Swift::Void __swiftcall CanvasCollaborationStateView.layoutSubviews()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  char *v36;
  void *v37;
  char *v38;
  CGFloat v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  char *v53;
  void (**v54)(char *, uint64_t);
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  id v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  CGFloat a;
  unint64_t v73;
  unint64_t v74;
  id v75;
  double (*v76)(CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  double v82;
  CGFloat v83;
  double v84;
  CGFloat v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  id v99;
  void *v100;
  void *v101;
  double v102;
  double v103;
  unint64_t v104;
  void *v105;
  double v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  id v115;
  void (**v116)(char *, uint64_t);
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  CGFloat *v125;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v127;
  id v128;
  void *v129;
  unint64_t v130;
  char v131;
  char v132;
  CGFloat *v133;
  char v134;
  CGFloat v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  CGFloat *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  unint64_t v151;
  void *v152;
  char *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  void (**v164)(char *, uint64_t);
  char *v165;
  CGAffineTransform v166;
  CGAffineTransform v167;
  CGAffineTransform v168;
  objc_super v169;
  __int128 v170;
  double v171;
  double v172;
  double v173;
  double v174;
  _QWORD v175[7];
  double v176;
  double v177;
  char v178;
  CGAffineTransform fora;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v161 = *(_QWORD *)(v1 - 8);
  v162 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v155 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v160 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v165 = (char *)&v136 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v157 = (uint64_t)&v136 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TimestampedSelection)?);
  MEMORY[0x1E0C80A78](v14, v15);
  v149 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v143 = (char *)&v136 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  v164 = *(void (***)(char *, uint64_t))(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CanvasState>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v136 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>.Iterator);
  v139 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v153 = (char *)&v136 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = (objc_class *)type metadata accessor for CanvasCollaborationStateView();
  v169.receiver = v0;
  v169.super_class = v32;
  objc_msgSendSuper2(&v169, sel_layoutSubviews);
  v141 = v0;
  v33 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_canvas]);
  if (!v33)
    goto LABEL_53;
  v34 = (char *)v33;
  v148 = v29;
  v35 = (_BYTE *)(v33 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  if (*v35 != 1
    || (v36 = &v34[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource],
        swift_beginAccess(),
        (v140 = MEMORY[0x1DF0E666C](v36)) == 0))
  {

LABEL_53:
    CanvasCollaborationStateView.removeAllHandles()();
    return;
  }
  v138 = *((_QWORD *)v36 + 1);
  v37 = (void *)objc_opt_self();
  objc_msgSend(v37, sel_begin);
  v137 = v37;
  objc_msgSend(v37, sel_setDisableActions_, 1);
  v154 = v34;
  v38 = &v34[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v38, v24);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  CRDictionary.makeIterator()();
  v164[1](v23, v20);
  v144 = (CGFloat *)&v141[OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_selectionCursors];
  swift_beginAccess();
  v145 = 0;
  v159 = v4;
  while (1)
  {
    while (1)
    {
      v43 = (uint64_t)v149;
      v44 = (uint64_t)v143;
      while (1)
      {
        CRDictionary.Iterator.next()();
        outlined init with take of (key: Int, value: AnyCRValue)?(v43, v44, &demangling cache variable for type metadata for (key: UUID, value: TimestampedSelection)?);
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TimestampedSelection));
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v44, 1, v45) == 1)
        {
          (*(void (**)(char *, uint64_t))(v139 + 8))(v153, v148);
          CanvasCollaborationStateView.removeOldHandles()();
          objc_msgSend(v137, sel_commit);

          swift_unknownObjectRelease();
          return;
        }
        v46 = (_QWORD *)(v44 + *(int *)(v45 + 48));
        v147 = v46[1];
        v47 = v46[3];
        v156 = v46[2];
        v48 = v46[4];
        v49 = v155;
        v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 32))(v157, v44, v5);
        v51 = v165;
        (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v154) + 0x3D8))(v50);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v52 = dispatch thunk of static Equatable.== infix(_:_:)();
        v53 = v51;
        v54 = *(void (***)(char *, uint64_t))(v49 + 8);
        ((void (*)(char *, uint64_t))v54)(v53, v5);
        if ((v52 & 1) == 0)
        {
          v146 = v47;
          if (*(_QWORD *)(v47 + 16))
            break;
          if (*(_QWORD *)(v48 + 16))
            break;
          ObjectType = swift_getObjectType();
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v138 + 40))(v147, v156, ObjectType) & 1) == 0)
            break;
        }
        ((void (*)(uint64_t, uint64_t))v54)(v157, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = (uint64_t)v149;
      }
      v56 = *(_QWORD *)v144;
      v57 = *(_QWORD *)(*(_QWORD *)v144 + 16);
      v164 = v54;
      if (v57)
      {
        swift_bridgeObjectRetain();
        v58 = specialized __RawDictionaryStorage.find<A>(_:)(v157);
        if ((v59 & 1) != 0)
        {
          v60 = (unint64_t *)(*(_QWORD *)(v56 + 56) + 32 * v58);
          v61 = *v60;
          v62 = (void *)v60[1];
          v63 = v48;
          v65 = v60[2];
          v64 = v60[3];
          swift_bridgeObjectRetain();
          v152 = v62;
          v66 = v62;
          v151 = v65;
          v48 = v63;
          swift_bridgeObjectRetain();
          v150 = v64;
          swift_bridgeObjectRetain();
        }
        else
        {
          v61 = 0;
          v151 = 0;
          v152 = 0;
          v150 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v61 = 0;
        v151 = 0;
        v152 = 0;
        v150 = 0;
      }
      v158 = v61;
      v67 = *(_QWORD *)(v48 + 16);
      if (v67)
      {
        *(_QWORD *)&v168.a = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67, 0);
        v68 = *(unsigned __int8 *)(v155 + 80);
        v142 = v48;
        v69 = v48 + ((v68 + 32) & ~v68);
        v163 = *(id *)(v155 + 72);
        v70 = *(void (**)(char *, uint64_t, uint64_t))(v155 + 16);
        do
        {
          v71 = v165;
          v70(v165, v69, v5);
          v70(v160, (uint64_t)v71, v5);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
          WeakRef.init(id:)();
          ((void (*)(char *, uint64_t))v164)(v71, v5);
          a = v168.a;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&a + 16) + 1, 1);
            a = v168.a;
          }
          v74 = *(_QWORD *)(*(_QWORD *)&a + 16);
          v73 = *(_QWORD *)(*(_QWORD *)&a + 24);
          if (v74 >= v73 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
            a = v168.a;
          }
          *(_QWORD *)(*(_QWORD *)&a + 16) = v74 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v161 + 32))(*(_QWORD *)&a+ ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80))+ *(_QWORD *)(v161 + 72) * v74, v159, v162);
          v69 += (uint64_t)v163;
          --v67;
        }
        while (v67);
        v48 = v142;
        swift_bridgeObjectRelease();
      }
      else
      {
        a = MEMORY[0x1E0DEE9D8];
      }
      v75 = v154;
      v168.a = a;
      v76 = *(double (**)(CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v154) + 0x3D0);
      v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>]);
      v78 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], &demangling cache variable for type metadata for [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>], MEMORY[0x1E0DEAF38]);
      v79 = v76(&v168, v77, v78);
      v81 = v80;
      v83 = v82;
      v85 = v84;
      swift_bridgeObjectRelease();
      v86 = v75;
      v87 = swift_bridgeObjectRetain();
      v88 = v145;
      v89 = specialized Sequence.compactMap<A>(_:)(v87, v86);
      v145 = v88;
      swift_bridgeObjectRelease();

      specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(v89, *(_QWORD *)(v48 + 16) == 0, &v170, v79, v81, v83, v85, 0.0);
      v90 = v170;
      v91 = v171;
      v92 = v172;
      v93 = v173;
      v94 = v174;
      swift_bridgeObjectRelease();
      *(_OWORD *)&v168.a = v90;
      v168.c = v91;
      v168.d = v92;
      v168.tx = v93;
      v168.ty = v94;
      if (CGAffineTransformIsIdentity(&v168))
        break;
      v101 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v86) + 0x308))();
      v102 = 1.0;
      v103 = 1.0;
      v104 = v158;
      if (v101)
      {
        v105 = v101;
        objc_msgSend(v101, sel_zoomScale);
        v103 = v106;

      }
      (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v86) + 0x5B8))(v175);
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v175, (uint64_t)&v176, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
      if ((v178 & 1) == 0)
        v102 = sqrt(v176 * v176 + v177 * v177);
      CGAffineTransformMakeScale(&v168, v103 * v102, v103 * v102);
      v107 = *(_OWORD *)&v168.a;
      v108 = *(_OWORD *)&v168.c;
      v109 = *(_OWORD *)&v168.tx;
      *(_OWORD *)&v168.a = v90;
      v168.c = v91;
      v168.d = v92;
      v168.tx = v93;
      v168.ty = v94;
      *(_OWORD *)&v167.a = v107;
      *(_OWORD *)&v167.c = v108;
      *(_OWORD *)&v167.tx = v109;
      CGAffineTransformConcat(&v166, &v168, &v167);
      fora = v166;
      v110 = v156;
      if (v104)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v111 = v104;
        v112 = v152;
        v113 = v152;
        v114 = v104;
        v115 = v152;
        v116 = v164;
      }
      else
      {
        swift_bridgeObjectRetain();
        v117 = v140;
        swift_unknownObjectRetain();
        v163 = v141;
        v111 = specialized CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(v147, v110, v163, v117, v138);
        v119 = v118;
        v121 = v120;
        v123 = v122;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v124 = (uint64_t)v165;
        (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v165, v157, v5);
        v125 = v144;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        v113 = v119;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v167.a = *v125;
        *v125 = -0.0;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v111, (uint64_t)v113, v121, v123, v124, isUniquelyReferenced_nonNull_native);
        *v125 = v167.a;
        swift_bridgeObjectRelease();
        v127 = v124;
        v116 = v164;
        ((void (*)(uint64_t, uint64_t))v164)(v127, v5);
        swift_endAccess();
        specialized CanvasCollaborationStateView.CollaborationCursor.add(to:)(v163, v111, (uint64_t)v113);
        swift_bridgeObjectRetain();
        v115 = v113;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v114 = v158;
        v112 = v152;
      }
      outlined copy of CanvasCollaborationStateView.CollaborationCursor?(v114, v112);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v128 = v115;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CanvasCollaborationStateView.CollaborationCursor.position(for:)(&fora);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v116)(v157, v5);
      outlined consume of CanvasCollaborationStateView.CollaborationCursor?(v111, v113);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v95 = v158;
    if (v158)
      break;
LABEL_49:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v130 = specialized __RawDictionaryStorage.find<A>(_:)(v157);
    v132 = v131;
    swift_bridgeObjectRelease();
    v41 = 0;
    v42 = 0;
    if ((v132 & 1) != 0)
    {
      v133 = v144;
      v134 = swift_isUniquelyReferenced_nonNull_native();
      v135 = *v133;
      v167.a = *v133;
      *v133 = -0.0;
      if ((v134 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v135 = v167.a;
      }
      ((void (*)(unint64_t, uint64_t))v164)(*(_QWORD *)(*(_QWORD *)&v135 + 48) + *(_QWORD *)(v155 + 72) * v130, v5);
      v39 = v167.a;
      v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)&v167.a + 56) + 32 * v130);
      v41 = *v40;
      v42 = (void *)v40[1];
      specialized _NativeDictionary._delete(at:)(v130, *(uint64_t *)&v167.a);
      *v133 = v39;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    outlined consume of CanvasCollaborationStateView.CollaborationCursor?(v41, v42);
    ((void (*)(uint64_t, uint64_t))v164)(v157, v5);
    outlined consume of CanvasCollaborationStateView.CollaborationCursor?(v158, v152);
  }
  if (!(v158 >> 62))
  {
    v96 = *(_QWORD *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined copy of CanvasCollaborationStateView.CollaborationCursor?(v158, v152);
    swift_bridgeObjectRetain();
    if (v96)
      goto LABEL_33;
LABEL_48:
    swift_bridgeObjectRelease();
    v129 = v152;
    objc_msgSend(v152, sel_removeFromSuperview);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  outlined copy of CanvasCollaborationStateView.CollaborationCursor?(v158, v152);
  swift_bridgeObjectRetain();
  v96 = _CocoaArrayWrapper.endIndex.getter();
  if (!v96)
    goto LABEL_48;
LABEL_33:
  if (v96 >= 1)
  {
    v97 = 0;
    v98 = v95 & 0xC000000000000001;
    do
    {
      if (v98)
        v99 = (id)MEMORY[0x1DF0E4D64](v97, v95);
      else
        v99 = *(id *)(v95 + 8 * v97 + 32);
      v100 = v99;
      ++v97;
      objc_msgSend(v99, sel_removeFromSuperlayer);

      v95 = v158;
    }
    while (v96 != v97);
    goto LABEL_48;
  }
  __break(1u);
}

id CanvasCollaborationStateView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasCollaborationStateView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasCollaborationStateView()
{
  return objc_opt_self();
}

uint64_t destroy for CanvasCollaborationStateView.CollaborationCursor(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CanvasCollaborationStateView.CollaborationCursor(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CanvasCollaborationStateView.CollaborationCursor(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CanvasCollaborationStateView.CollaborationCursor(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasCollaborationStateView.CollaborationCursor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasCollaborationStateView.CollaborationCursor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasCollaborationStateView.CollaborationCursor()
{
  return &type metadata for CanvasCollaborationStateView.CollaborationCursor;
}

uint64_t outlined consume of TimestampedSelection?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7CALayerCs5NeverOTg50149_s8PaperKit28CanvasCollaborationStateViewC0D6CursorV3for17boundingSuperview28participantDetailsDataSourceAESS_So6UIViewCAA011ParticipantlmN0_ptcfcSo7D8CSiXEfU_So10CGColorRefaTf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v7;
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return result;
  v10 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if (a2 < v4 || v3 < 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  do
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD28C8]), sel_init);
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
    objc_msgSend(v8, sel_setFrame_, -6.0, -6.0, 4.0, 10.0);
    objc_msgSend(v9, sel_setFrame_, -6.0, -6.0, 10.0, 4.0);
    objc_msgSend(v7, sel_addSublayer_, v8);
    objc_msgSend(v7, sel_addSublayer_, v9);
    objc_msgSend(v7, sel_setAnchorPoint_, 0.0, 0.0);
    objc_msgSend(v9, sel_setBackgroundColor_, a3);
    objc_msgSend(v8, sel_setBackgroundColor_, a3);
    objc_msgSend(v9, sel_setAllowsEdgeAntialiasing_, 1);
    objc_msgSend(v8, sel_setAllowsEdgeAntialiasing_, 1);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    --v3;
  }
  while (v3);
  return v10;
}

uint64_t outlined copy of CanvasCollaborationStateView.CollaborationCursor?(uint64_t result, void *a2)
{
  id v3;

  if (result)
  {
    swift_bridgeObjectRetain();
    v3 = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of CanvasCollaborationStateView.CollaborationCursor?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t ObjectType;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  id v23;
  uint64_t v25;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CGFloat, CGPoint)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1DDF33640;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_OWORD *)(v9 + 56) = xmmword_1DDF441B0;
  *(_OWORD *)(v9 + 72) = xmmword_1DDF441C0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v9 + 88) = _Q0;
  *(_OWORD *)(v9 + 104) = xmmword_1DDF441D0;
  *(_QWORD *)(v9 + 120) = 0x3FF0000000000000;
  ObjectType = swift_getObjectType();
  v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, a2, ObjectType, a5);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(a1, a2, ObjectType, a5);
  v18 = v17;
  v19 = v16;
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7CALayerCs5NeverOTg50149_s8PaperKit28CanvasCollaborationStateViewC0D6CursorV3for17boundingSuperview28participantDetailsDataSourceAESS_So6UIViewCAA011ParticipantlmN0_ptcfcSo7D8CSiXEfU_So10CGColorRefaTf1cn_nTf4ng_n(0, 4, (uint64_t)v19);

  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v19);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a4;
  v22[3] = a5;
  v22[4] = a1;
  v22[5] = a2;
  v23 = objc_allocWithZone((Class)type metadata accessor for CanvasCollaborationAvatarView());
  CanvasCollaborationAvatarView.init(name:color:boundingSuperview:fetchImage:)(v25, v18, v21, a3, (uint64_t)&async function pointer to partial apply for closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:), (uint64_t)v22);

  return v20;
}

id specialized CanvasCollaborationStateView.CollaborationCursor.add(to:)(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id result;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;

  if (!(a2 >> 62))
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return objc_msgSend(a1, sel_addSubview_, a3);
  }
  swift_bridgeObjectRetain();
  result = (id)_CocoaArrayWrapper.endIndex.getter();
  v6 = (uint64_t)result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x1DF0E4D64](v8, a2);
      else
        v9 = *(id *)(a2 + 8 * v8 + 32);
      v10 = v9;
      ++v8;
      v11 = objc_msgSend(a1, sel_layer);
      objc_msgSend(v11, sel_addSublayer_, v10);

    }
    while (v6 != v8);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DDE294A8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(double a1, double a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(a1, a2, v6, v7, v9, v8);
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

id EmptyLinkView.init()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for EmptyLinkView();
  v1 = objc_msgSendSuper2(&v7, sel_init);
  v2 = (void *)objc_opt_self();
  v3 = v1;
  v4 = objc_msgSend(v2, sel_systemFillColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v4);

  v5 = objc_msgSend(v3, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1)
    swift_once();
  objc_msgSend(v5, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  return v3;
}

id EmptyLinkView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EmptyLinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for EmptyLinkView()
{
  return objc_opt_self();
}

void SignatureStyleEditingController.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  SEL *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  SEL *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void *v49;
  void *v50;
  char *v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  objc_class *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  id v73;
  id v74;
  char v75;
  objc_super v76;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v62 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v69 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v61 = (char *)&v58 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v0;
  v64 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_signatureStyleEditingView);
  v11 = SignatureStyleEditingView.strokeWidthControls.getter();
  v12 = v11;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    v14 = (SEL *)&selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
    if (!v13)
      goto LABEL_10;
  }
  else
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v14 = (SEL *)&selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
    if (!v13)
      goto LABEL_10;
  }
  if (v13 < 1)
    goto LABEL_50;
  v15 = 0;
  do
  {
    if ((v12 & 0xC000000000000001) != 0)
      v16 = (id)MEMORY[0x1DF0E4D64](v15, v12);
    else
      v16 = *(id *)(v12 + 8 * v15 + 32);
    v17 = v16;
    ++v15;
    objc_msgSend(v16, sel_setEnabled_, 0);
    objc_msgSend(v17, sel_setSelected_, 0);

  }
  while (v13 != v15);
LABEL_10:
  swift_bridgeObjectRelease_n();
  v18 = v63 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller;
  v19 = MEMORY[0x1DF0E666C](v63 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller);
  if (!v19)
    goto LABEL_41;
  v20 = (void *)v19;
  v21 = v19 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v19 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v22 = *(_QWORD *)(v21 + 8);
    ObjectType = swift_getObjectType();
    v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(ObjectType, v22);

    swift_unknownObjectRelease();
    if (!v24)
      goto LABEL_41;
    AnyCanvas.selectedSignatureElements.getter();
    v26 = v25;

    v65 = v26;
    v58 = v18;
    if (v26 >> 62)
      goto LABEL_51;
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_15:
    v28 = (uint64_t)v10;
    v30 = v61;
    v29 = v62;
    if (v27)
    {
      v31 = 0;
      v67 = v65 & 0xC000000000000001;
      v60 = v65 + 32;
      v59 = v10;
      v66 = v27;
      while (1)
      {
        if (v67)
          v33 = (id)MEMORY[0x1DF0E4D64](v31, v65);
        else
          v33 = *(id *)(v60 + 8 * v31);
        v73 = v33;
        v34 = __OFADD__(v31, 1);
        v35 = v31 + 1;
        if (v34)
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          swift_bridgeObjectRetain();
          v27 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_15;
        }
        v68 = v35;
        v72 = type metadata accessor for SignatureView();
        v36 = (_QWORD *)swift_dynamicCastClassUnconditional();
        v37 = (char *)v36 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v36) + 0x380);
        swift_beginAccess();
        v71 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
        v71(v30, v37, v1);
        swift_getKeyPath();
        v70 = lazy protocol witness table accessor for type Signature and conformance Signature();
        Capsule<>.subscript.getter();
        swift_release();
        v10 = *(char **)(v29 + 8);
        ((void (*)(char *, uint64_t))v10)(v30, v1);
        v38 = v74;
        if (!v74)
          break;
        outlined init with copy of PKDrawing?((uint64_t)v74 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, v28);

        v39 = type metadata accessor for PKDrawing();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v28, 1, v39) == 1)
          goto LABEL_18;
        outlined destroy of PKDrawing?(v28);
        v40 = SignatureStyleEditingView.strokeWidthControls.getter();
        v41 = v40;
        if (v40 >> 62)
        {
          swift_bridgeObjectRetain();
          v42 = _CocoaArrayWrapper.endIndex.getter();
          if (v42)
          {
LABEL_28:
            v43 = 4;
            v44 = 0;
            if ((v41 & 0xC000000000000001) != 0)
            {
LABEL_29:
              v45 = (SEL *)MEMORY[0x1DF0E4D64](v44, v41);
              goto LABEL_31;
            }
            while (1)
            {
              v45 = (SEL *)*(id *)(v41 + 8 * v43);
LABEL_31:
              v14 = v45;
              v46 = v44 + 1;
              if (__OFADD__(v44, 1))
                break;
              -[SEL setEnabled:](v45, sel_setEnabled_, 1);
              v47 = (char *)swift_dynamicCastClassUnconditional();
              v48 = v69;
              v71(v69, &v47[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v47) + 0x380)], v1);
              swift_getKeyPath();
              Capsule<>.subscript.getter();
              swift_release();
              ((void (*)(char *, uint64_t))v10)(v48, v1);
              if ((v75 & 1) == 0)
                -[SEL setSelected:](v14, sel_setSelected_, v74 == -[SEL width](v14, sel_width));

              if (v46 == v42)
                goto LABEL_38;
              v44 = ++v43 - 4;
              if ((v41 & 0xC000000000000001) != 0)
                goto LABEL_29;
            }
            __break(1u);
            goto LABEL_49;
          }
        }
        else
        {
          v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v42)
            goto LABEL_28;
        }
LABEL_38:
        swift_bridgeObjectRelease_n();
        v14 = (SEL *)&selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
        v30 = v61;
        v29 = v62;
        v28 = (uint64_t)v59;
LABEL_19:
        v31 = v68;

        if (v31 == v66)
          goto LABEL_40;
      }
      v32 = type metadata accessor for PKDrawing();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v28, 1, 1, v32);
LABEL_18:
      outlined destroy of PKDrawing?(v28);
      goto LABEL_19;
    }
LABEL_40:
    swift_bridgeObjectRelease_n();
    v18 = v58;
  }
  else
  {

  }
LABEL_41:
  v49 = *(void **)(v64 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_colorSwatch);
  if (v49)
  {
    v50 = (void *)MEMORY[0x1DF0E666C](v18);
    v51 = v49;
    if (!v50
      || (v52 = CanvasElementController.selectedSignatureColors()(), v50, !v52)
      || (v53 = (id)specialized Collection.first.getter(v52), swift_bridgeObjectRelease(), !v53))
    {
      v53 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    }
    v54 = *(void **)&v51[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor];
    *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor] = v53;
    v55 = v53;

    ColorSwatch.updateUI()();
    v56 = *(unsigned __int8 *)(v63 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_isColorPickerPresented);
    v57 = (objc_class *)type metadata accessor for ColorSwatch();
    v76.receiver = v51;
    v76.super_class = v57;
    objc_msgSendSuper2(&v76, v14[104], v56);
    ColorSwatch.updateUI()();

  }
}

uint64_t SignatureStyleEditingController.canvasUserInterfaceStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v1 = v0;
  v2 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      v5 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType();
      v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      swift_unknownObjectRelease();
      if (v7)
      {
LABEL_8:
        v10 = objc_msgSend(v7, sel_traitCollection);
        v11 = objc_msgSend(v10, sel_userInterfaceStyle);

        return (uint64_t)v11;
      }
    }
    else
    {

    }
  }
  v8 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_signatureStyleEditingView), sel_window);
  if (v8)
  {
    v9 = v8;
    v7 = objc_msgSend(v8, sel_rootViewController);

    if (v7)
      goto LABEL_8;
  }
  return 1;
}

void SignatureStyleEditingController.didTapColorSwatch(sender:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_signatureStyleEditingView), sel_window);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_rootViewController);

    if (v5)
    {
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3668]), sel_init);
      objc_msgSend(v15, sel_setModalPresentationStyle_, 7);
      v6 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor);
      if (v6)
      {
        v7 = v6;
        SignatureStyleEditingController.canvasUserInterfaceStyle.getter();
        v8 = (void *)static PKInkingTool.convertColor(_:from:to:)();
        objc_msgSend(v15, sel_setSelectedColor_, v8);

      }
      v9 = objc_msgSend(v15, sel_popoverPresentationController);
      if (v9)
      {
        v10 = v9;
        objc_msgSend(v9, sel_setSourceView_, a1);

      }
      v11 = objc_msgSend(v15, sel_popoverPresentationController);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setDelegate_, v1);

      }
      v13 = objc_msgSend(v15, sel_popoverPresentationController);
      if (v13)
      {
        v14 = v13;
        objc_msgSend(v13, sel__setIgnoresKeyboardNotifications_, 1);

      }
      objc_msgSend(v15, sel__setShouldUseDarkGridInDarkMode_, 1);
      objc_msgSend(v15, sel_setDelegate_, v1);
      objc_msgSend(v5, sel_presentViewController_animated_completion_, v15, 1, 0);
      *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_isColorPickerPresented) = 1;
      SignatureStyleEditingController.updateUI()();

    }
  }
}

uint64_t type metadata accessor for SignatureStyleEditingController()
{
  return objc_opt_self();
}

void specialized SignatureStyleEditingController.colorPickerViewController(_:didSelect:continuously:)(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  CGColor *v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  if ((a2 & 1) == 0)
  {
    SignatureStyleEditingController.canvasUserInterfaceStyle.getter();
    v3 = (void *)static PKInkingTool.convertColor(_:from:to:)();
    v4 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller);
    if (v4)
    {
      v5 = (_BYTE *)v4;
      v6 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      if (MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      {
        v7 = *(_QWORD *)(v6 + 8);
        ObjectType = swift_getObjectType();
        v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
        v10 = v3;
        v11 = (_QWORD *)v9(ObjectType, v7);
        swift_unknownObjectRelease();
        if (v11)
        {
          v12 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
          v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle] = 1;
          v13 = *(_QWORD *)((char *)v11 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
          if (!v13)
          {
            __break(1u);
            return;
          }
          (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v11)
                                                                                       + 0x430))(v18, *(_QWORD *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
          v14 = v19;
          v15 = v20;
          __swift_project_boxed_opaque_existential_1(v18, v19);
          v16 = v10;
          Color.init(cgColor:)((CGColor *)objc_msgSend(v16, sel_CGColor), &v17);

          (*(void (**)(CGColor **, uint64_t, uint64_t))(v15 + 112))(&v17, v14, v15);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
          v5[v12] = 0;

        }
        else
        {

        }
      }
      else
      {

      }
    }
    SignatureStyleEditingController.updateUI()();

  }
}

uint64_t type metadata completion function for ContainerCanvasElementView()
{
  return swift_initClassMetadata2();
}

void *protocol witness for AnyContainerCanvasElementView.drawingView.getter in conformance ContainerCanvasElementView<A>()
{
  void *v0;
  id v1;

  v0 = (void *)specialized ContainerCanvasElementView.drawingView.getter();
  v1 = v0;
  return v0;
}

uint64_t protocol witness for AnyContainerCanvasElementView.updateUI() in conformance ContainerCanvasElementView<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

void *protocol witness for AnyContainerCanvasElementView.formFillingView.getter in conformance ContainerCanvasElementView<A>()
{
  void *v0;
  id v1;

  v0 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  v1 = v0;
  return v0;
}

Swift::Void __swiftcall ContainerCanvasElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  if (ContainerCanvasElementView.isInLiveEdit.getter())
  {
    CanvasElementView.endLiveEdit(undoable:discard:)(undoable, discard);
    ContainerCanvasElementView.transformDrawing()();
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.screenScaleDidChange()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v0 = ContainerCanvasElementView.subelementViews.getter();
  v1 = v0;
  if (!(v0 >> 62))
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (_QWORD *)MEMORY[0x1DF0E4D64](v3, v1);
      else
        v5 = *(id *)(v1 + 8 * v3 + 32);
      v6 = v5;
      ++v3;
      (*(void (**)(void))((*v4 & *v5) + 0x270))();

    }
    while (v2 != v3);
    goto LABEL_10;
  }
  __break(1u);
}

unint64_t ContainerCanvasElementView.didZoom(in:)(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  result = ContainerCanvasElementView.subelementViews.getter();
  v3 = result;
  if (!(result >> 62))
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, v3);
      else
        v7 = *(id *)(v3 + 8 * v5 + 32);
      v8 = v7;
      ++v5;
      (*(void (**)(uint64_t))((*v6 & *v7) + 0x280))(a1);

    }
    while (v4 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ContainerCanvasElementView.didBeginDrawing()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;

  v1 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v3)
    {
      __break(1u);
      return;
    }
    v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v5 = *v4;
    v6 = v4[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = 1;
    }
    else
    {
      v8 = *(_QWORD *)(v6 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v8 != 0;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E8)) = v7;
  v10 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v10)
  {
    v11 = v10;
    (*(void (**)())((*v9 & *v10) + 0x5C0))();

  }
}

Swift::Void __swiftcall ContainerCanvasElementView.updateUI()()
{
  CanvasElementView.updateUI()();
  ContainerCanvasElementView.updateDrawing()();
  ContainerCanvasElementView.updateSubelements()();
  ContainerCanvasElementView.updateFormFillingView()();
}

void ContainerCanvasElementView.drawingDidChange(newDrawing:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[4];

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v63 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v9);
  v60 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v3[150];
  v16 = *(_QWORD *)(v15 + 16);
  v62 = v3[149];
  v59 = v16;
  v64 = type metadata accessor for Capsule();
  v17 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v52 - v21;
  if ((*((_BYTE *)v1 + v3[159]) & 1) != 0)
    return;
  v54 = v8;
  v55 = v5;
  v56 = v4;
  v57 = v22;
  v58 = v1;
  v24 = CanvasElementView.canvasElement.getter((uint64_t)&v52 - v21);
  MEMORY[0x1E0C80A78](v24, v25);
  *(&v52 - 4) = v62;
  *(&v52 - 3) = v15;
  v26 = a1;
  v27 = v3[151];
  *(&v52 - 2) = v27;
  swift_getKeyPath();
  v28 = v64;
  Capsule<>.subscript.getter();
  swift_release();
  v29 = *(void (**)(char *, uint64_t))(v17 + 8);
  v30 = v23;
  v31 = v26;
  v29(v30, v28);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v14, 1, v32);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v34 = v60;
  v35 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v60, v26, v61);
  if (v33 == 1)
  {
    v52 = v15;
    v53 = v27;
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v36 = v54;
    Capsule<>.subscript.getter();
    swift_release();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC8]);
    v37 = v56;
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    v38 = v34;
    v40 = v65[0];
    v39 = v65[1];
    (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v37);
    v41 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v38, v35);
    v43 = v57;
    if (v39 != v40)
    {
      MEMORY[0x1E0C80A78](v41, v42);
      v44 = v53;
      *(&v52 - 4) = v52;
      *(&v52 - 3) = v44;
      *(&v52 - 2) = v31;
      v45 = v58;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      goto LABEL_7;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v34, v35);
    v43 = v57;
  }
  v45 = v58;
  swift_beginAccess();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule.merge<A>(_:)();
LABEL_7:
  swift_endAccess();
  v46 = MEMORY[0x1DF0E666C]((char *)v45 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v46)
  {
    v47 = (_QWORD *)v46;
    v48 = v46 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    if (MEMORY[0x1DF0E666C](v48))
    {
      v49 = *(_QWORD *)(v48 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v49 + 16))(v47, ObjectType, v49);
      swift_unknownObjectRelease();
    }
    CanvasElementView.canvasElement.getter(v43);
    LOBYTE(v65[0]) = 4;
    AnyCanvas.merge<A>(_:from:)(v43, (unsigned __int8 *)v65, v62, v59);
    v51 = ((uint64_t (*)(uint64_t, uint64_t))v29)(v43, v64);
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v47) + 0x318))(v51);

  }
}

void ContainerCanvasElementView.canvas.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

double ContainerCanvasElementView.modelBounds.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[5];

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = v1[149];
  v3 = v1[150];
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v10 - v7;
  CanvasElementView.canvasElement.getter((uint64_t)v10 - v7);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v1[151];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return *(double *)&v10[4];
}

BOOL ContainerCanvasElementView.isInLiveEdit.getter()
{
  _QWORD *v0;
  uint64_t v2;

  if (CanvasElementView.isInLiveEdit.getter())
    return 1;
  v2 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0));
  return v2 && *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink) != 0;
}

unint64_t ContainerCanvasElementView.didScroll(in:)(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  result = ContainerCanvasElementView.subelementViews.getter();
  v3 = result;
  if (!(result >> 62))
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, v3);
      else
        v7 = *(id *)(v3 + 8 * v5 + 32);
      v8 = v7;
      ++v5;
      (*(void (**)(uint64_t))((*v6 & *v7) + 0x278))(a1);

    }
    while (v4 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ContainerCanvasElementView.updateFrame()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  double v14;
  double v15;

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = v1[149];
  v3 = v1[150];
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = &v13[-v8];
  v10 = (void *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v7);
  if (v10)
  {

    CanvasElementView.updateFrame()();
  }
  else
  {
    v11 = CanvasElementView.canvasElement.getter((uint64_t)v9);
    MEMORY[0x1E0C80A78](v11, v12);
    *(_QWORD *)&v13[-32] = v2;
    *(_QWORD *)&v13[-24] = v3;
    *(_QWORD *)&v13[-16] = v1[151];
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
    objc_msgSend(v0, sel_setFrame_, 0.0, 0.0, v14, v15);
  }
}

unint64_t ContainerCanvasElementView.pencilKitAttachmentViews()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;

  v1 = v0;
  v2 = type metadata accessor for IndexSet();
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v50 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v51 = (char *)&v46 - v11;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = *(void **)&v0[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x4C0)];
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v15 + 32) = v13;
    v53 = v15;
    v16 = v13;
    specialized Array._endMutation()();
    v17 = v53;
  }
  else
  {
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v53 = v17;
  v18 = (uint64_t)v1;
  v19 = ContainerCanvasElementView.subelementViews.getter();
  v20 = v19;
  v52 = v14;
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v18 = v19;
    else
      v18 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    if (v21)
      goto LABEL_6;
LABEL_17:
    swift_bridgeObjectRelease_n();
    v26 = MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v21)
    goto LABEL_17;
LABEL_6:
  if (v21 < 1)
    goto LABEL_40;
  v22 = 0;
  do
  {
    if ((v20 & 0xC000000000000001) != 0)
      v23 = (_QWORD *)MEMORY[0x1DF0E4D64](v22, v20);
    else
      v23 = *(id *)(v20 + 8 * v22 + 32);
    v24 = v23;
    ++v22;
    v25 = (*(uint64_t (**)(void))((*v12 & *v23) + 0x298))();

    specialized Array.append<A>(contentsOf:)(v25);
  }
  while (v21 != v22);
  swift_bridgeObjectRelease_n();
  v26 = v52;
LABEL_18:
  specialized Array.append<A>(contentsOf:)(v26);
  v27 = (void *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
  if (v27)
  {

  }
  else
  {
    v28 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
    if (v28)
    {
      v29 = v28;
      v30 = v50;
      (*(void (**)(void))((*v12 & *v28) + 0x300))();

      v31 = (uint64_t)v51;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v51, v30, v5);
      v32 = ContainerCanvasElementView.unorderedSubelementViews.getter();
      if (*(_QWORD *)(v32 + 16) && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v34 & 1) != 0))
      {
        v1 = (char *)*(id *)(*(_QWORD *)(v32 + 56) + 8 * v33);
        swift_bridgeObjectRelease();
        v18 = v53;
        if (v53 >> 62)
          goto LABEL_41;
        v35 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
        v36 = v1;
        swift_bridgeObjectRetain();
        for (; v35; v35 = _CocoaArrayWrapper.endIndex.getter())
        {
          v37 = 0;
          while (1)
          {
            v38 = (v18 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1DF0E4D64](v37, v18)
                : *(id *)(v18 + 8 * v37 + 32);
            v39 = v38;
            type metadata accessor for CanvasElementDrawingView();
            v40 = swift_dynamicCastClass();
            if (v40)
            {
              v41 = (char *)MEMORY[0x1DF0E666C](v40 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);

              if (v41)
              {

                if (v41 == v1)
                {
                  swift_bridgeObjectRelease();

                  v44 = v47;
                  IndexSet.init(integer:)();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKAttachmentView]);
                  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PKAttachmentView] and conformance [A], &demangling cache variable for type metadata for [PKAttachmentView], MEMORY[0x1E0DEAF28]);
                  MutableCollection.move(fromOffsets:toOffset:)();

                  (*(void (**)(char *, uint64_t))(v48 + 8))(v44, v49);
                  (*(void (**)(char *, uint64_t))(v6 + 8))(v51, v5);
                  return v53;
                }
              }
            }
            else
            {

            }
            v42 = v37 + 1;
            if (__OFADD__(v37, 1))
              break;
            ++v37;
            if (v42 == v35)
              goto LABEL_36;
          }
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          v45 = v1;
          swift_bridgeObjectRetain();
        }
LABEL_36:
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v6 + 8))(v51, v5);
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v31, v5);
      }
    }
  }
  return v53;
}

void __swiftcall ContainerCanvasElementView.boundsTransform()(CGAffineTransform *__return_ptr retstr)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v21;
  CGFloat MinY;
  __int128 v23;
  __int128 v24;
  CGAffineTransform v25;
  CGRect v26;
  CGRect v27;

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = v3[149];
  v5 = v3[150];
  v6 = type metadata accessor for Capsule();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v25 - v10;
  v12 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v9);
  if (v12)
  {

    CanvasElementView.modelFrame.getter();
    v14 = v13;
    v15 = CanvasElementView.canvasElement.getter((uint64_t)v11);
    MEMORY[0x1E0C80A78](v15, v16);
    *((_QWORD *)&v25 - 4) = v4;
    *((_QWORD *)&v25 - 3) = v5;
    *((_QWORD *)&v25 - 2) = v3[151];
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    CGAffineTransformMakeScale(&v25, v14 / v25.c, v14 / v25.c);
  }
  else
  {
    v26.origin.x = ContainerCanvasElementView.modelBounds.getter();
    x = v26.origin.x;
    y = v26.origin.y;
    width = v26.size.width;
    height = v26.size.height;
    v21 = -CGRectGetMinX(v26);
    v27.origin.x = x;
    v27.origin.y = y;
    v27.size.width = width;
    v27.size.height = height;
    MinY = CGRectGetMinY(v27);
    CGAffineTransformMakeTranslation(&v25, v21, -MinY);
  }
  v23 = *(_OWORD *)&v25.c;
  v24 = *(_OWORD *)&v25.tx;
  *(_OWORD *)&retstr->a = *(_OWORD *)&v25.a;
  *(_OWORD *)&retstr->c = v23;
  *(_OWORD *)&retstr->tx = v24;
}

Swift::Void __swiftcall ContainerCanvasElementView.drawingSelectionDidChange()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  PKDrawing *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v1 = type metadata accessor for PKDrawing();
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v4);
  if (v7)
  {

    return;
  }
  v8 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v8)
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v10 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x320);
    v24 = v8;
    v11 = v10();
    if (v11)
    {
      v12 = (void *)v11;
      v13 = *(void **)((char *)v0 + *(_QWORD *)((*v9 & *v0) + 0x4C0));
      if (v13)
      {
        v14 = objc_msgSend(v13, sel_drawing);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        PKDrawing._bridgeToObjectiveC()(v15);
        v17 = v16;
        v18 = objc_msgSend(v16, sel_uuid);

        (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
        v19 = objc_msgSend(v12, sel_selectedStrokeIdsForAttachment_, v18);
        type metadata accessor for UUID();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        MEMORY[0x1E0C80A78](v21, v22);
        *(&v23 - 2) = v20;
        AnyCanvas.updateCanvasState(_:)();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }

    }
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.updateGestures()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  Class isa;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  _QWORD *v25;

  v1 = v0;
  v2 = *v0;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *MEMORY[0x1E0DEEDD8];
  CanvasElementView.updateGestures()();
  v5 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v5)
  {
    v6 = v5;
    v7 = (void *)(*(uint64_t (**)(void))((*v3 & *v5) + 0x320))();

    if (v7)
    {
      v8 = objc_msgSend(v7, sel_canvasView);

      if (v8)
      {
        v9 = objc_msgSend(v8, sel_drawingGestureRecognizer);

        v24 = objc_msgSend(v9, sel_view);
        if (v24)
        {
          v10 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
          if (v10 && (v10, (AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
            || *(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x4E0)))
          {

          }
          else
          {
            v25 = v1;
            v11 = objc_allocWithZone(MEMORY[0x1E0DC3D80]);
            type metadata accessor for ContainerCanvasElementView(0, *(_QWORD *)((v4 & v2) + 0x4A8), *(_QWORD *)((v4 & v2) + 0x4B0), *(_QWORD *)((v4 & v2) + 0x4B8));
            v12 = objc_msgSend(v11, sel_initWithTarget_action_, _bridgeAnythingToObjectiveC<A>(_:)(), sel_rootTapped_);
            swift_unknownObjectRelease();
            v13 = *(_QWORD *)((*v3 & *v1) + 0x4E0);
            v14 = *(void **)((char *)v1 + v13);
            *(_QWORD *)((char *)v1 + v13) = v12;

            v15 = *v3 & *v1;
            v16 = *(void **)((char *)v1 + *(_QWORD *)(v15 + 0x4E0));
            if (v16)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              v17 = swift_allocObject();
              *(_OWORD *)(v17 + 16) = xmmword_1DDF35440;
              v18 = v16;
              *(NSNumber *)(v17 + 32) = Int._bridgeToObjectiveC()();
              v25 = (_QWORD *)v17;
              specialized Array._endMutation()();
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
              isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v18, sel_setAllowedTouchTypes_, isa);

              v15 = *v3 & *v1;
            }
            v20 = *(void **)((char *)v1 + *(_QWORD *)(v15 + 1248));
            if (v20)
            {
              v21 = one-time initialization token for selectionAllowableMovementForFingerDrawingTap;
              v22 = v20;
              if (v21 != -1)
                swift_once();
              objc_msgSend(v22, sel_setAllowableMovement_, *(double *)&static UIConstants.selectionAllowableMovementForFingerDrawingTap, v24, v25);

              v15 = *v3 & *v1;
            }
            v23 = *(void **)((char *)v1 + *(_QWORD *)(v15 + 1248));
            if (v23)
            {
              objc_msgSend(v23, sel_setDelegate_, v1);
              v15 = *v3 & *v1;
            }
            if (*(_QWORD *)((char *)v1 + *(_QWORD *)(v15 + 1248)))
            {
              objc_msgSend(v24, sel_addGestureRecognizer_);

            }
            else
            {
              __break(1u);
            }
          }
        }
      }
    }
  }
}

void ContainerCanvasElementView.drawingView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4C0);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

void ContainerCanvasElementView.subelementsContainerView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4C8);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

void ContainerCanvasElementView.formFillingView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4D0);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

uint64_t ContainerCanvasElementView.subelementViews.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  id v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8));
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    goto LABEL_19;
  v5 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = v4;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v7 = result;
    if (result)
      goto LABEL_4;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_4:
      if (v7 < 1)
      {
        __break(1u);
        return result;
      }
      for (i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0)
          v10 = (id)MEMORY[0x1DF0E4D64](i, v6);
        else
          v10 = *(id *)(v6 + 8 * i + 32);
        v11 = v10;
        type metadata accessor for AnyCanvasElementView();
        if (swift_dynamicCastClass())
        {
          MEMORY[0x1DF0E4398]();
          if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v4 = v15;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x1E0DEE9D8];
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  v12 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v12
    && (v13 = v12,
        (*(void (**)(uint64_t *__return_ptr))((*v2 & *v12) + 0x2C8))(&v15),
        v13,
        v15 == 1))
  {
    v14 = ContainerCanvasElementView.transientFormFields.getter();
  }
  else
  {
    v14 = MEMORY[0x1E0DEE9D8];
  }
  v15 = v4;
  specialized Array.append<A>(contentsOf:)(v14);
  return v15;
}

unint64_t ContainerCanvasElementView.subelementViewsForHitTesting.getter()
{
  unint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  unint64_t v7;

  result = ContainerCanvasElementView.subelementViews.getter();
  v1 = result;
  v7 = MEMORY[0x1E0DEE9D8];
  if (!(result >> 62))
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    return specialized Sequence.reversed()(MEMORY[0x1E0DEE9D8]);
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v3 = 0;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (_QWORD *)MEMORY[0x1DF0E4D64](v3, v1);
      else
        v5 = *(id *)(v1 + 8 * v3 + 32);
      v6 = v5;
      if (((*(uint64_t (**)(void))((*v4 & *v5) + 0x218))() & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
    return specialized Sequence.reversed()(v7);
  }
  return result;
}

uint64_t ContainerCanvasElementView.unorderedSubelementViews.getter()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D8));
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  v3 = ContainerCanvasElementView.unorderedTransientSubelementViews.getter();
  return specialized Dictionary.merging(_:uniquingKeysWith:)(v3, v2);
}

void ContainerCanvasElementView.rootTapGestureRecognizer.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4E0);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

uint64_t ContainerCanvasElementView.selectionExistedAtStartOfTap.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E8));
}

uint64_t ContainerCanvasElementView.selectionExistedAtStartOfTap.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4E8)) = result;
  return result;
}

unint64_t ContainerCanvasElementView.selectedSubelementViews.getter()
{
  unint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;

  result = ContainerCanvasElementView.subelementViews.getter();
  v1 = result;
  v7 = MEMORY[0x1E0DEE9D8];
  if (!(result >> 62))
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v3 = 0;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (_QWORD *)MEMORY[0x1DF0E4D64](v3, v1);
      else
        v5 = *(id *)(v1 + 8 * v3 + 32);
      v6 = v5;
      if (((*(uint64_t (**)(void))((*v4 & *v5) + 0x228))() & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

Swift::Void __swiftcall ContainerCanvasElementView.createSubelementsContainerViewIfNeeded()()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  void *v4;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (!*(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8)))
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v2, sel_setFrame_);
    objc_msgSend(v2, sel_setClipsToBounds_, 1);
    objc_msgSend(v2, sel_setUserInteractionEnabled_, 0);
    if (*(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4C0)))
      objc_msgSend(v0, sel_insertSubview_belowSubview_, v2);
    else
      objc_msgSend(v0, sel_addSubview_, v2);
    v3 = *(_QWORD *)((*v1 & *v0) + 0x4C8);
    v4 = *(void **)((char *)v0 + v3);
    *(_QWORD *)((char *)v0 + v3) = v2;

  }
}

Swift::Void __swiftcall ContainerCanvasElementView.updateSubelements()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  id v80;
  id v81;
  id v82;
  id v83;
  BOOL v84;
  uint64_t v85;
  id v86;
  unint64_t v87;
  char v88;
  char v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t i;
  id v103;
  void *v104;
  char *v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(char *, id, _QWORD *, unint64_t, uint64_t, uint64_t, uint64_t);
  id v120;
  id v121;
  void *v122;
  uint64_t v123;
  uint64_t *v124;
  _QWORD *v125;
  char isUniquelyReferenced_nonNull_native;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  void *v129;
  _QWORD *v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t *, _QWORD);
  uint64_t *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  id v165;
  uint64_t (*v166)(void);
  _QWORD *v167;
  void *v168;
  void *v169;
  id v170;
  id v171;
  uint64_t (*v172)(void);
  _QWORD *v173;
  uint64_t v174;
  void *v175;
  id v176;
  _QWORD *v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, uint64_t);
  id v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  uint64_t v196;
  char *v197;
  void (*v198)(char *, char *, uint64_t);
  uint64_t (*v199)(char *, uint64_t, uint64_t);
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(uint64_t, uint64_t);
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  _QWORD *v212;
  char *v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  MEMORY[0x1E0C80A78](v184, v2);
  v183 = (char *)&v179 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v190 = (uint64_t)&v179 - v6;
  v193 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
  v194 = *(_QWORD *)(v193 - 8);
  MEMORY[0x1E0C80A78](v193, v7);
  v192 = (char *)&v179 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v186 = (char *)&v179 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v12, v13);
  v202 = (uint64_t)&v179 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRKeyPath();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v209 = (uint64_t)&v179 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v215 = (char *)&v179 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v191 = (char *)&v179 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v179 - v27;
  v196 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v207 = *(_QWORD *)(v196 - 8);
  MEMORY[0x1E0C80A78](v196, v29);
  v211 = (char *)&v179 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v31, v32);
  v197 = (char *)&v179 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v212 = *(_QWORD **)(v187 - 8);
  MEMORY[0x1E0C80A78](v187, v34);
  v189 = (char *)&v179 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v1[149];
  v188 = v1[150];
  v37 = v36;
  v201 = *(_QWORD *)(v188 + 16);
  v208 = type metadata accessor for Capsule();
  v38 = *(_QWORD *)(v208 - 8);
  MEMORY[0x1E0C80A78](v208, v39);
  v41 = (char *)&v179 - v40;
  v206 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v185 = *(_QWORD *)(v206 - 8);
  v43 = MEMORY[0x1E0C80A78](v206, v42);
  v210 = (char *)&v179 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v0;
  v46 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v43);
  if (!v46)
    return;
  v47 = (char *)v46;
  v48 = (void *)objc_opt_self();
  objc_msgSend(v48, sel_begin);
  v182 = v48;
  objc_msgSend(v48, sel_setAnimationDuration_, 0.0);
  v49 = ContainerCanvasElementView.unorderedSubelementViews.getter();
  v220 = specialized Set.init<A>(_:)(v49);
  v50 = CanvasElementView.canvasElement.getter((uint64_t)v41);
  v213 = (char *)v38;
  MEMORY[0x1E0C80A78](v50, v51);
  v214 = v37;
  v52 = v188;
  *(&v179 - 4) = v37;
  *(&v179 - 3) = v52;
  v180 = v1[151];
  *(&v179 - 2) = v180;
  swift_getKeyPath();
  v53 = v47;
  v54 = v189;
  v55 = v208;
  Capsule<>.subscript.getter();
  v56 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  v57 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v213 + 1);
  v213 = v41;
  v203 = v57;
  v57((uint64_t)v41, v55);
  v58 = v187;
  CROrderedSet.makeIterator()();
  v181 = (void (*)(char *, uint64_t))v212[1];
  v181(v54, v58);
  v200 = (_QWORD *)((char *)v45 + *(_QWORD *)((*v56 & *v45) + 0x4D8));
  v195 = v53;
  v204 = &v53[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasViewController];
  v59 = v197;
  v60 = v206;
  CROrderedSet.Iterator.next()();
  v61 = v196;
  v199 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v207 + 48);
  v62 = v199(v59, 1, v196);
  v212 = v45;
  if (v62 != 1)
  {
    v198 = *(void (**)(char *, char *, uint64_t))(v207 + 32);
    v205 = v28;
    v198(v211, v59, v61);
    while (1)
    {
      MEMORY[0x1DF0E34A4](v61);
      v106 = v202;
      specialized Set._Variant.remove(_:)((uint64_t)v28, v202);
      outlined destroy of StocksKitCurrencyCache.Provider?(v106, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if (!*(_QWORD *)(ContainerCanvasElementView.unorderedSubelementViews.getter() + 16))
        break;
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28);
      v108 = v107;
      swift_bridgeObjectRelease();
      v109 = (uint64_t)v213;
      if ((v108 & 1) == 0)
        goto LABEL_65;
      v110 = ContainerCanvasElementView.unorderedSubelementViews.getter();
      if (!*(_QWORD *)(v110 + 16))
        goto LABEL_108;
      v111 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28);
      if ((v112 & 1) == 0)
        goto LABEL_108;
      v113 = *(id *)(*(_QWORD *)(v110 + 56) + 8 * v111);
      swift_bridgeObjectRelease();
      v114 = v212;
      CanvasElementView.canvasElement.getter(v109);
      v56 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      (*(void (**)(uint64_t, unint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v113) + 0x130))(v109, v214, v201);

      v45 = v114;
      v203(v109, v208);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v15);
      v105 = v211;
      (*(void (**)(char *, uint64_t))(v207 + 8))(v211, v61);
LABEL_57:
      v60 = v206;
      CROrderedSet.Iterator.next()();
      if (v199(v59, 1, v61) == 1)
        goto LABEL_3;
      v198(v105, v59, v61);
    }
    swift_bridgeObjectRelease();
    v109 = (uint64_t)v213;
LABEL_65:
    v115 = v15;
    ContainerCanvasElementView.createSubelementsContainerViewIfNeeded()();
    v116 = v211;
    SharedTagged_9<>.layout()(&v216);
    v117 = v217;
    v118 = v218;
    __swift_project_boxed_opaque_existential_1(&v216, v217);
    CanvasElementView.canvasElement.getter(v109);
    v119 = *(uint64_t (**)(char *, id, _QWORD *, unint64_t, uint64_t, uint64_t, uint64_t))(v118 + 8);
    v120 = v195;
    v121 = v195;
    v122 = (void *)v119(v213, v120, v45, v214, v201, v117, v118);

    v203((uint64_t)v213, v208);
    if (!v122)
    {
      v28 = v205;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v205, v115);
      v61 = v196;
      (*(void (**)(char *, uint64_t))(v207 + 8))(v116, v196);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v216);
      v56 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v105 = v116;
      v15 = v115;
      v59 = v197;
      goto LABEL_57;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v216);
    swift_unknownObjectWeakAssign();
    v123 = (uint64_t)v191;
    v15 = v115;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v191, v205, v115);
    v124 = v200;
    swift_beginAccess();
    v125 = v122;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v219 = *v124;
    *v124 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v125, v123, isUniquelyReferenced_nonNull_native);
    *v124 = v219;
    swift_bridgeObjectRelease();
    v127 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v127(v123, v115);
    swift_endAccess();
    v128 = MEMORY[0x1DF0E666C](v204);
    v59 = v197;
    if (v128)
    {
      v129 = (void *)v128;
      v130 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v131 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v125) + 0x360))();
      if (v131)
      {
        v132 = (void *)v131;
        objc_msgSend(v129, sel_addChildViewController_, v131);
        v133 = *(void **)((char *)v212 + *(_QWORD *)((*v130 & *v212) + 0x4C8));
        if (v133)
          objc_msgSend(v133, sel_addSubview_, v125);
        objc_msgSend(v132, sel_didMoveToParentViewController_, v129);

        v28 = v205;
        v127((uint64_t)v205, v15);
        v105 = v211;
        v61 = v196;
        (*(void (**)(char *, uint64_t))(v207 + 8))(v211, v196);
        v56 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_75:
        v45 = v212;
        goto LABEL_57;
      }

    }
    v56 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v134 = *(void **)((char *)v212 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v212) + 0x4C8));
    if (v134)
      objc_msgSend(v134, sel_addSubview_, v125);

    v28 = v205;
    v127((uint64_t)v205, v15);
    v105 = v211;
    v61 = v196;
    (*(void (**)(char *, uint64_t))(v207 + 8))(v211, v196);
    goto LABEL_75;
  }
LABEL_3:
  (*(void (**)(char *, uint64_t))(v185 + 8))(v210, v60);
  v63 = v220;
  v64 = *(_QWORD *)(v220 + 56);
  v210 = (char *)(v220 + 56);
  v65 = 1 << *(_BYTE *)(v220 + 32);
  v66 = -1;
  if (v65 < 64)
    v66 = ~(-1 << v65);
  v67 = v66 & v64;
  v211 = (char *)((unint64_t)(v65 + 63) >> 6);
  swift_bridgeObjectRetain();
  v68 = 0;
  v69 = v209;
  while (1)
  {
    if (v67)
    {
      v70 = __clz(__rbit64(v67));
      v67 &= v67 - 1;
      v71 = v70 | (v68 << 6);
      goto LABEL_23;
    }
    v72 = v68 + 1;
    if (__OFADD__(v68, 1))
    {
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    v67 = v214;
    if (v72 >= (uint64_t)v211)
      goto LABEL_40;
    v73 = *(_QWORD *)&v210[8 * v72];
    ++v68;
    if (!v73)
    {
      v68 = v72 + 1;
      if (v72 + 1 >= (uint64_t)v211)
        goto LABEL_40;
      v73 = *(_QWORD *)&v210[8 * v68];
      if (!v73)
      {
        v68 = v72 + 2;
        if (v72 + 2 >= (uint64_t)v211)
          goto LABEL_40;
        v73 = *(_QWORD *)&v210[8 * v68];
        if (!v73)
          break;
      }
    }
LABEL_22:
    v67 = (v73 - 1) & v73;
    v71 = __clz(__rbit64(v73)) + (v68 << 6);
LABEL_23:
    v75 = *(_QWORD *)(v16 + 72);
    v76 = v215;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v215, *(_QWORD *)(v63 + 48) + v75 * v71, v15);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v69, v76, v15);
    v77 = ContainerCanvasElementView.unorderedSubelementViews.getter();
    if (*(_QWORD *)(v77 + 16) && (v78 = specialized __RawDictionaryStorage.find<A>(_:)(v69), (v79 & 1) != 0))
    {
      v80 = *(id *)(*(_QWORD *)(v77 + 56) + 8 * v78);
      swift_bridgeObjectRelease();
      v81 = objc_msgSend(v80, sel_superview);
      v82 = *(id *)((char *)v45 + *(_QWORD *)((*v56 & *v45) + 0x4C8));
      if (v81)
      {
        v83 = v81;

        if (v82)
          v84 = v83 == v82;
        else
          v84 = 0;
        if (v84)
          goto LABEL_35;
LABEL_33:
        v85 = v209;
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v209, v15);

        v69 = v85;
        v45 = v212;
      }
      else
      {
        if (v82)
          goto LABEL_33;
        v86 = 0;
LABEL_35:
        swift_beginAccess();
        swift_bridgeObjectRetain();
        v87 = specialized __RawDictionaryStorage.find<A>(_:)(v209);
        v89 = v88;
        swift_bridgeObjectRelease();
        if ((v89 & 1) != 0)
        {
          v90 = v200;
          v91 = swift_isUniquelyReferenced_nonNull_native();
          v92 = *v90;
          v219 = *v90;
          *v90 = 0x8000000000000000;
          if (!v91)
          {
            specialized _NativeDictionary.copy()();
            v92 = v219;
          }
          (*(void (**)(unint64_t, uint64_t))(v16 + 8))(*(_QWORD *)(v92 + 48) + v87 * v75, v15);
          v93 = v219;
          v94 = *(void **)(*(_QWORD *)(v219 + 56) + 8 * v87);
          specialized _NativeDictionary._delete(at:)(v87, v219);
          *v90 = v93;

          swift_bridgeObjectRelease();
        }
        swift_endAccess();

        v69 = v209;
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v209, v15);
        v56 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v45 = v212;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v69, v15);
    }
  }
  v74 = v72 + 3;
  if (v74 < (uint64_t)v211)
  {
    v73 = *(_QWORD *)&v210[8 * v74];
    if (!v73)
    {
      while (1)
      {
        v68 = v74 + 1;
        if (__OFADD__(v74, 1))
          goto LABEL_105;
        if (v68 >= (uint64_t)v211)
          goto LABEL_40;
        v73 = *(_QWORD *)&v210[8 * v68];
        ++v74;
        if (v73)
          goto LABEL_22;
      }
    }
    v68 = v74;
    goto LABEL_22;
  }
LABEL_40:
  swift_release();
  v95 = *(void **)((char *)v45 + *(_QWORD *)((*v56 & *v45) + 0x4C8));
  if (!v95)
  {
    swift_bridgeObjectRelease();
    goto LABEL_102;
  }
  v212 = v95;
  v96 = objc_msgSend(v212, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v216 = MEMORY[0x1E0DEE9D8];
  if (!(v63 >> 62))
  {
    v97 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_43;
  }
LABEL_106:
  swift_bridgeObjectRetain();
  v97 = _CocoaArrayWrapper.endIndex.getter();
LABEL_43:
  v98 = v193;
  v99 = v187;
  v100 = v189;
  v101 = v188;
  if (!v97)
  {
    swift_bridgeObjectRelease();
    v135 = MEMORY[0x1E0DEE9D8];
    goto LABEL_79;
  }
  if (v97 < 1)
  {
    __break(1u);
LABEL_108:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  for (i = 0; i != v97; ++i)
  {
    if ((v63 & 0xC000000000000001) != 0)
      v103 = (id)MEMORY[0x1DF0E4D64](i, v63);
    else
      v103 = *(id *)(v63 + 8 * i + 32);
    v104 = v103;
    type metadata accessor for AnyCanvasElementView();
    if (swift_dynamicCastClass())
    {
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v216 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v216 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v67 = v214;
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  v135 = v216;
  v100 = v189;
  v101 = v188;
LABEL_79:
  swift_bridgeObjectRelease();
  v136 = (uint64_t)v213;
  v137 = CanvasElementView.canvasElement.getter((uint64_t)v213);
  MEMORY[0x1E0C80A78](v137, v138);
  *(&v179 - 4) = v67;
  *(&v179 - 3) = v101;
  *(&v179 - 2) = v180;
  swift_getKeyPath();
  v139 = v208;
  Capsule<>.subscript.getter();
  swift_release();
  v140 = ((uint64_t (*)(uint64_t, uint64_t))v203)(v136, v139);
  MEMORY[0x1E0C80A78](v140, v141);
  *(&v179 - 2) = v142;
  v143 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #2 in ContainerCanvasElementView.updateSubelements(), (uint64_t)(&v179 - 4));
  v181(v100, v99);
  swift_bridgeObjectRelease();
  v216 = v143;
  v219 = v135;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCanvasElementView]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView], MEMORY[0x1E0DEAF20]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AnyCanvasElementView, MEMORY[0x1E0DEFD00]);
  v144 = v186;
  BidirectionalCollection<>.difference<A>(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v145 = (uint64_t)v183;
  v215 = *(char **)(v194 + 16);
  ((void (*)(char *, char *, uint64_t))v215)(v183, v144, v98);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<AnyCanvasElementView> and conformance CollectionDifference<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>, MEMORY[0x1E0DECE10]);
  dispatch thunk of Collection.startIndex.getter();
  v146 = v184;
  *(_QWORD *)(v145 + *(int *)(v184 + 36)) = v216;
  v147 = v190;
  outlined init with take of IndexingIterator<CollectionDifference<AnyCanvasElementView>>(v145, v190);
  v148 = (uint64_t *)(v147 + *(int *)(v146 + 36));
  while (2)
  {
    v155 = *v148;
    dispatch thunk of Collection.endIndex.getter();
    if (v155 != v216)
    {
      v156 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v159 = *v157;
      v158 = (_QWORD *)v157[1];
      v160 = v157[2];
      v161 = *((unsigned __int8 *)v157 + 24);
      v162 = *((unsigned __int8 *)v157 + 25);
      outlined copy of CollectionDifference<PDFPage>.Change(*v157, v158, v160, v161, v162);
      v156(&v216, 0);
      v163 = v192;
      ((void (*)(char *, uint64_t, uint64_t))v215)(v192, v147, v98);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v194 + 8))(v163, v98);
      v164 = MEMORY[0x1DF0E666C](v204);
      v165 = (id)v164;
      if ((_DWORD)v162 == 1)
      {
        if (v164)
        {
          v166 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v158) + 0x360);
          v167 = v158;
          v168 = (void *)v166();
          if (v168)
          {
            v169 = v168;
            objc_msgSend(v168, sel_willMoveToParentViewController_, 0);
            objc_msgSend(v167, sel_removeFromSuperview);
            v170 = objc_msgSend(v169, sel_parentViewController);
            v147 = v190;
            if (v170 && (v171 = v170, v170, v171 == v165))
              objc_msgSend(v165, sel_removeChildViewController_, v169);
            else
              objc_msgSend(v169, sel_removeFromParentViewController);

LABEL_82:
            outlined consume of CollectionDifference<PDFPage>.Change(v159, v158, v160, v161, 1);
            v150 = v159;
            v151 = v158;
            v152 = v160;
            v153 = v161;
            v154 = 1;
LABEL_83:
            outlined consume of CollectionDifference<PDFPage>.Change(v150, v151, v152, v153, v154);
LABEL_84:
            v98 = v193;
            continue;
          }

          v147 = v190;
        }
        else
        {
          v149 = v158;
        }
        objc_msgSend(v158, sel_removeFromSuperview);
        goto LABEL_82;
      }
      if (v164)
      {
        v172 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v158) + 0x360);
        v173 = v158;
        v174 = v172();
        if (v174)
        {
          v175 = (void *)v174;
          objc_msgSend(v165, sel_addChildViewController_, v174);
          objc_msgSend(v212, sel_insertSubview_atIndex_, v173, v159);
          v176 = v165;
          objc_msgSend(v175, sel_didMoveToParentViewController_, v176);
          outlined consume of CollectionDifference<PDFPage>.Change(v159, v158, v160, v161, 0);
          outlined consume of CollectionDifference<PDFPage>.Change(v159, v158, v160, v161, 0);

          v147 = v190;
          goto LABEL_84;
        }

        v147 = v190;
      }
      else
      {
        v177 = v158;
      }
      objc_msgSend(v212, sel_insertSubview_atIndex_, v158, v159);
      outlined consume of CollectionDifference<PDFPage>.Change(v159, v158, v160, v161, 0);
      v150 = v159;
      v151 = v158;
      v152 = v160;
      v153 = v161;
      v154 = 0;
      goto LABEL_83;
    }
    break;
  }

  outlined destroy of StocksKitCurrencyCache.Provider?(v147, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  (*(void (**)(char *, uint64_t))(v194 + 8))(v186, v98);
LABEL_102:
  v178 = v195;
  objc_msgSend(v182, sel_commit);

}

Swift::Void __swiftcall ContainerCanvasElementView.updateFormFillingView()()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0));
  if (v1)
  {
    v2 = v1;
    FormFillingView.updateUI()();

  }
}

Swift::Void __swiftcall ContainerCanvasElementView.createFormFillingViewIfNeeded()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;

  v1 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v1)
  {
    v15 = (id)v1;
    v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (*(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0)))
    {
LABEL_5:
      ContainerCanvasElementView.updateFormFillingView()();

      return;
    }
    objc_msgSend(v0, sel_bounds);
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v11 = objc_allocWithZone((Class)type metadata accessor for FormFillingView());
    FormFillingView.init(frame:canvas:)(v15, v4, v6, v8, v10);
    v12 = *(_QWORD *)((*v2 & *v0) + 0x4D0);
    v13 = *(void **)((char *)v0 + v12);
    *(_QWORD *)((char *)v0 + v12) = v14;

    if (*(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x4D0)))
    {
      objc_msgSend(v0, sel_addSubview_);
      goto LABEL_5;
    }
    __break(1u);
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.rootTapped(_:)(UITapGestureRecognizer *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  id v13;
  id v14;
  _QWORD *v15;
  id v16;
  id v17;
  uint64_t v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v4)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v23 = v4;
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2C8))(&v24);
    if (!(_BYTE)v24)
      goto LABEL_11;
    v6 = *(uint64_t (**)(void))((*v5 & *v23) + 0x2F8);
    v7 = (void *)v6();
    -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v7);
    v9 = v8;
    v11 = v10;

    v12 = (void *)v6();
    v13 = objc_msgSend(v12, sel_hitTest_withEvent_, 0, v9, v11);

    if (v13)
    {
      type metadata accessor for AnyCanvasElementView();
      v14 = v13;
      v15 = (_QWORD *)swift_dynamicCastClass();
      v16 = v14;
      if (v15)
      {
LABEL_9:

        v14 = v16;
        -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v15);
        (*(void (**)(id, _QWORD, BOOL, double, double))((*v15 & *v5) + 0x1C8))(-[UITapGestureRecognizer modifierFlags](a1, sel_modifierFlags), 0, (*((_BYTE *)v2 + *(_QWORD *)((*v5 & *v2) + 0x4E8)) & 1) == 0, v19, v20);

        v21 = v14;
      }
      else
      {
        v16 = v14;
        while (1)
        {
          v17 = objc_msgSend(v16, sel_superview);

          if (!v17)
            break;
          v16 = v17;
          v18 = swift_dynamicCastClass();
          if (v18)
          {
            v15 = (_QWORD *)v18;
            goto LABEL_9;
          }
        }
        v21 = v23;
      }

      v22 = v14;
    }
    else
    {
LABEL_11:
      v22 = v23;
    }

  }
}

uint64_t ContainerCanvasElementView.isUpdatingDrawing.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F8));
}

uint64_t ContainerCanvasElementView.isUpdatingDrawing.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4F8)) = result;
  return result;
}

Swift::Void __swiftcall ContainerCanvasElementView.transformDrawing()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  Class isa;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  double a;
  double b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  double v33;
  BOOL v34;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  double height;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  _QWORD *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  objc_class *v50;
  uint64_t v51;
  void *v52;
  objc_class *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  CGAffineTransform aBlock;
  CGAffineTransform v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = v1[149];
  v3 = v1[150];
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v55 - v7;
  v9 = *(void **)((char *)v0 + v1[152]);
  if (v9)
  {
    v56 = v9;
    objc_msgSend(v56, sel_frame);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
    objc_msgSend(v0, sel_bounds);
    v62.origin.x = v18;
    v62.origin.y = v19;
    v62.size.width = v20;
    v62.size.height = v21;
    v59.origin.x = v11;
    v59.origin.y = v13;
    v59.size.width = v15;
    v59.size.height = v17;
    if (CGRectEqualToRect(v59, v62))
    {

      return;
    }
    v58.a = 1.0;
    v58.b = 0.0;
    v58.c = 0.0;
    v58.d = 1.0;
    v58.tx = 0.0;
    v58.ty = 0.0;
    objc_msgSend(v56, sel_setTransform_, &v58);
    isa = (Class)v56;
    objc_msgSend(v0, sel_bounds);
    -[objc_class setFrame:](isa, sel_setFrame_);

    v23 = (void *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v23)
    {

      v24 = CanvasElementView.canvasElement.getter((uint64_t)v8);
      MEMORY[0x1E0C80A78](v24, v25);
      *(&v55 - 4) = v2;
      *(&v55 - 3) = v3;
      v54 = v1[151];
      swift_getKeyPath();
      v26 = isa;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      CGAffineTransformMakeRotation(&v58, aBlock.a);
      -[objc_class setTransform:](v26, sel_setTransform_, &v58);

    }
    resize #1 <A>() in ContainerCanvasElementView.transformDrawing()(isa, &v58.a);
    a = v58.a;
    b = v58.b;
    c = v58.c;
    d = v58.d;
    tx = v58.tx;
    ty = v58.ty;
    v33 = sqrt(a * a + b * b);
    if (ContainerCanvasElementView.isInLiveEdit.getter())
    {
      v34 = v33 < 0.5;
    }
    else
    {
      objc_msgSend(v0, sel_bounds);
      aBlock.a = a;
      aBlock.b = b;
      aBlock.c = c;
      aBlock.d = d;
      aBlock.tx = tx;
      aBlock.ty = ty;
      v61 = CGRectApplyAffineTransform(v60, &aBlock);
      x = v61.origin.x;
      y = v61.origin.y;
      width = v61.size.width;
      height = v61.size.height;
      objc_msgSend(v0, sel_bounds);
      if (!CGRect.almostEqual(_:threshold:)(v39, v40, v41, v42, 0.5, x, y, width, height))
        goto LABEL_18;
      v34 = v33 < 0.5;
    }
    if (!v34 && v33 <= 2.0)
    {
      if (ContainerCanvasElementView.isInLiveEdit.getter())
        goto LABEL_22;
      v44 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (!v44)
        goto LABEL_22;
      v45 = v44;
      v46 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v44) + 0x320))();

      objc_msgSend(v46, sel_updateTilesForVisibleRect);
      goto LABEL_21;
    }
LABEL_18:
    v47 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (!v47)
      goto LABEL_22;
    v48 = v47;
    v46 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v47) + 0x320))();

    if (!v46)
      goto LABEL_22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v49 + 32) = isa;
    *(_QWORD *)&aBlock.a = v49;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
    v50 = isa;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = v50;
    *(_QWORD *)&aBlock.tx = partial apply for closure #1 in ContainerCanvasElementView.transformDrawing();
    *(_QWORD *)&aBlock.ty = v51;
    *(_QWORD *)&aBlock.a = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
    *(_QWORD *)&aBlock.d = &block_descriptor_15_1;
    v52 = _Block_copy(&aBlock);
    v53 = v50;
    swift_release();
    objc_msgSend(v46, sel_resizeTiles_completion_, isa, v52);

    _Block_release(v52);
LABEL_21:

LABEL_22:
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.updateDrawing()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  _QWORD *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  id v77;
  id v78;
  int v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  char *v135;
  uint64_t v136;
  objc_class *v137;
  char *v138;
  id v139;
  void (*v140)(char *, uint64_t);
  id v141;
  char v142;
  char *v143;
  objc_class *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  __int128 v153;
  id v154;
  char *v155;
  id v156;
  PKDrawing *v157;
  void *v158;
  void *v159;
  id v160;
  uint64_t v161;
  void *v162;
  _QWORD *v163;
  void *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  void (*v171)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  objc_super v200;
  objc_super v201;
  __int128 v202;
  __int128 v203;

  v1 = v0;
  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v197 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v3 = *(_QWORD *)(v197 - 8);
  MEMORY[0x1E0C80A78](v197, v4);
  v181 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for CRKeyPath();
  v193 = *(_QWORD *)(v188 - 8);
  MEMORY[0x1E0C80A78](v188, v6);
  v170 = (char *)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v174, v8);
  v184 = (char *)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v186 = *(_QWORD *)(v187 - 8);
  MEMORY[0x1E0C80A78](v187, v10);
  v169 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v185 = (char *)&v165 - v14;
  v190 = type metadata accessor for PKDrawing();
  v178 = *(_QWORD *)(v190 - 8);
  MEMORY[0x1E0C80A78](v190, v15);
  v177 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v171 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v165 - v19);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v20, v21);
  v166 = (uint64_t)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v183 = (uint64_t)&v165 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v192 = (char *)&v165 - v28;
  v168 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v167 = *(_QWORD *)(v168 - 8);
  MEMORY[0x1E0C80A78](v168, v29);
  v31 = (char *)&v165 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v180, v32);
  v179 = (char *)&v165 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v2[150];
  v35 = *(_QWORD *)(v34 + 16);
  v199 = (char *)v2[149];
  v182 = v35;
  v36 = type metadata accessor for Capsule();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v176 = (uint64_t)&v165 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v173 = (uint64_t)&v165 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v196 = (uint64_t)&v165 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v49 = (char *)&v165 - v48;
  v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v50, v51);
  v175 = (char *)&v165 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v53, v54);
  v172 = (char *)&v165 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v59 = (char *)&v165 - v58;
  *((_BYTE *)v0 + v2[159]) = 1;
  v60 = AnyCanvasElementView.isEditingCanvasElement.getter();
  v189 = v3;
  v195 = (char *)v34;
  v191 = v2;
  v194 = v37;
  v198 = v36;
  if ((v60 & 1) == 0)
  {
    v165 = v31;
    v64 = CanvasElementView.canvasElement.getter((uint64_t)v49);
    MEMORY[0x1E0C80A78](v64, v65);
    *(&v165 - 4) = v199;
    *(&v165 - 3) = (char *)v34;
    *(&v165 - 2) = (char *)v2[151];
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v66 = *(void (**)(char *, uint64_t))(v37 + 8);
    v66(v49, v36);
    v67 = v197;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v59, 1, v197) == 1)
    {
      v63 = v199;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v61 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v62 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0));
      if (!v62)
      {
        v76 = 0;
        goto LABEL_24;
      }
      v68 = v196;
    }
    else
    {
      v69 = v196;
      CanvasElementView.canvasElement.getter(v196);
      v70 = (uint64_t)v179;
      v71 = v199;
      Ref.subscript.getter();
      v66((char *)v69, v198);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v59, v67);
      v72 = v167;
      v73 = v165;
      v74 = v168;
      (*(void (**)(char *, uint64_t, uint64_t))(v167 + 16))(v165, v70 + *(int *)(v180 + 20), v168);
      outlined destroy of PKDrawingStruct(v70);
      v75 = CROrderedSet.count.getter();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
      v76 = v75 > 0;
      v61 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v62 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4C0));
      v63 = v71;
      if (!v62)
        goto LABEL_24;
      v68 = v196;
      if (v75 > 0)
        goto LABEL_9;
    }
    v89 = v62;
    v76 = 0;
    v90 = v197;
    v91 = v194;
    goto LABEL_26;
  }
  v61 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v62 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0));
  if (v62)
  {
    v63 = v199;
LABEL_9:
    v77 = v62;
    v78 = objc_msgSend(v77, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for PKDrawingCoherence(0);
    v79 = swift_dynamicCast();
    v168 = (uint64_t)v77;
    if (v79)
    {
      v80 = (void *)v202;
      v81 = v202 + OBJC_IVAR___PKDrawingCoherence_model;
      swift_beginAccess();
      v82 = v186;
      v83 = v185;
      v84 = v187;
      (*(void (**)(char *, uint64_t, uint64_t))(v186 + 16))(v185, v81, v187);

      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      v85 = (uint64_t)v192;
      Capsule<>.rootID.getter();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v193 + 56);
      v87 = v85;
      v88 = 0;
    }
    else
    {
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v193 + 56);
      v87 = (uint64_t)v192;
      v88 = 1;
    }
    v171 = v86;
    v86(v87, v88, 1, v188);
    v92 = v191;
    v93 = (uint64_t)v184;
    v94 = v173;
    v95 = CanvasElementView.canvasElement.getter(v173);
    MEMORY[0x1E0C80A78](v95, v96);
    v97 = v195;
    *(&v165 - 4) = v63;
    *(&v165 - 3) = v97;
    *(&v165 - 2) = (char *)v92[151];
    swift_getKeyPath();
    v98 = (uint64_t)v172;
    v99 = v198;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v94, v99);
    v100 = v189;
    v101 = v197;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v98, 1, v197) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v98, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v102 = 1;
      v103 = v183;
    }
    else
    {
      v103 = v183;
      Ref.id.getter();
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v101);
      v102 = 0;
    }
    v104 = v188;
    v171(v103, v102, 1, v188);
    v105 = v93 + *(int *)(v174 + 48);
    v106 = (uint64_t)v192;
    outlined init with copy of CRKeyPath?((uint64_t)v192, v93);
    outlined init with copy of CRKeyPath?(v103, v105);
    v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 48);
    if (v107(v93, 1, v104) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v103, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v93 = (uint64_t)v184;
      outlined destroy of StocksKitCurrencyCache.Provider?(v106, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v108 = v107(v105, 1, v104);
      v68 = v196;
      v89 = (id)v168;
      v91 = v194;
      if (v108 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v93, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v76 = 1;
        v63 = v199;
        v90 = v197;
LABEL_27:

        goto LABEL_28;
      }
      goto LABEL_21;
    }
    v109 = v166;
    outlined init with copy of CRKeyPath?(v93, v166);
    if (v107(v105, 1, v104) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v183, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v192, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v109, v104);
      v68 = v196;
      v89 = (id)v168;
      v91 = v194;
LABEL_21:
      outlined destroy of StocksKitCurrencyCache.Provider?(v93, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
      v76 = 1;
      v63 = v199;
      v90 = v197;
      goto LABEL_26;
    }
    v110 = v193;
    v111 = v93;
    v112 = v104;
    v113 = v170;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 32))(v170, v105, v112);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
    v114 = dispatch thunk of static Equatable.== infix(_:_:)();
    v115 = *(void (**)(char *, uint64_t))(v110 + 8);
    v115(v113, v112);
    outlined destroy of StocksKitCurrencyCache.Provider?(v183, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v192, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v115((char *)v109, v112);
    outlined destroy of StocksKitCurrencyCache.Provider?(v111, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v76 = 1;
    v68 = v196;
    v90 = v197;
    v63 = v199;
    v89 = (id)v168;
    v91 = v194;
    if ((v114 & 1) != 0)
      goto LABEL_27;
LABEL_26:
    objc_msgSend(v89, sel_removeFromSuperview);
    v116 = *(_QWORD *)((*v61 & *v1) + 0x4C0);
    v117 = *(void **)((char *)v1 + v116);
    *(_QWORD *)((char *)v1 + v116) = 0;

    v89 = v117;
    goto LABEL_27;
  }
  v76 = 1;
  v63 = v199;
LABEL_24:
  v68 = v196;
  v90 = v197;
  v91 = v194;
LABEL_28:
  v118 = *(void **)((char *)v1 + *(_QWORD *)((*v61 & *v1) + 0x4C0));
  if (v118 || !v76)
  {
    if (!v118)
      goto LABEL_39;
    CanvasElementView.canvasElement.getter(v68);
    v141 = v118;
    v142 = CanvasElementDrawingView.merge<A>(_:)();

    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v68, v198);
    if ((v142 & 1) == 0)
      goto LABEL_39;
  }
  else
  {
    v119 = v176;
    v120 = CanvasElementView.canvasElement.getter(v176);
    MEMORY[0x1E0C80A78](v120, v121);
    *(&v165 - 4) = v63;
    v192 = (char *)v191[151];
    v122 = (uint64_t)v192;
    *(&v165 - 3) = v195;
    *(&v165 - 2) = (char *)v122;
    swift_getKeyPath();
    v123 = (uint64_t)v175;
    v124 = v198;
    Capsule<>.subscript.getter();
    swift_release();
    v194 = *(_QWORD *)(v91 + 8);
    ((void (*)(uint64_t, uint64_t))v194)(v119, v124);
    v125 = v189;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v123, 1, v90) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v123, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v126 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      v202 = *MEMORY[0x1E0C9D628];
      v203 = v126;
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
      v127 = v179;
      CRRegister.init(wrappedValue:)();
      v128 = v180;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
      CROrderedSet.init()();
      *(_QWORD *)&v127[*(int *)(v128 + 24)] = MEMORY[0x1E0DEE9E0];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
      v129 = swift_allocObject();
      *(_OWORD *)(v129 + 16) = xmmword_1DDF33AB0;
      CanvasElementView.canvasElement.getter(v68);
      v130 = v198;
      Capsule<>.rootID.getter();
      ((void (*)(uint64_t, uint64_t))v194)(v68, v130);
      CRKeyPath.init(_:)();
      *(_QWORD *)&v202 = v129;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath], MEMORY[0x1E0DEAF38]);
      CRKeyPath.init<A>(_:)();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      v131 = v185;
      Capsule<>.init(_:id:)();
      v132 = v130;
      v133 = v186;
      v134 = *(void (**)(char *, char *, uint64_t))(v186 + 16);
      v135 = v169;
      v136 = v187;
      v134(v169, v131, v187);
      v137 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v138 = (char *)objc_allocWithZone(v137);
      v134(&v138[OBJC_IVAR___PKDrawingCoherence_model], v135, v136);
      v201.receiver = v138;
      v201.super_class = v137;
      v139 = objc_msgSendSuper2(&v201, sel_init);
      v140 = *(void (**)(char *, uint64_t))(v133 + 8);
      v140(v135, v136);
      v68 = v196;
      v140(v131, v136);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v181, v123, v90);
      CanvasElementView.canvasElement.getter(v68);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      v132 = v198;
      v143 = v185;
      Capsule.encapsulate<A>(_:)();
      ((void (*)(uint64_t, uint64_t))v194)(v68, v132);
      v144 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v145 = objc_allocWithZone(v144);
      v146 = v186;
      v147 = v90;
      v148 = v125;
      v149 = v187;
      (*(void (**)(uint64_t, char *, uint64_t))(v186 + 16))((uint64_t)v145 + OBJC_IVAR___PKDrawingCoherence_model, v143, v187);
      v200.receiver = v145;
      v200.super_class = v144;
      v139 = objc_msgSendSuper2(&v200, sel_init);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v143, v149);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v181, v147);
    }
    v150 = CanvasElementView.canvasElement.getter(v68);
    MEMORY[0x1E0C80A78](v150, v151);
    v152 = v195;
    *(&v165 - 4) = v199;
    *(&v165 - 3) = v152;
    *(&v165 - 2) = v192;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v194)(v68, v132);
    v153 = v203;
    v154 = v139;
    v155 = v177;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    v156 = objc_allocWithZone((Class)type metadata accessor for CanvasElementDrawingView());
    PKDrawing._bridgeToObjectiveC()(v157);
    v159 = v158;
    v160 = objc_msgSend(v156, sel_initWithFrame_drawing_, v158, 0.0, 0.0, v153);

    (*(void (**)(char *, uint64_t))(v178 + 8))(v155, v190);
    objc_msgSend(v160, sel_setUserInteractionEnabled_, 0);
    swift_unknownObjectWeakAssign();
    objc_msgSend(v1, sel_addSubview_, v160);
    v61 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v161 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4C0);
    v162 = *(void **)((char *)v1 + v161);
    *(_QWORD *)((char *)v1 + v161) = v160;

  }
  v163 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v163)
  {
    v164 = v163;
    (*(void (**)(void))((*v61 & *v163) + 0x560))();

  }
LABEL_39:
  *((_BYTE *)v1 + *(_QWORD *)((*v61 & *v1) + 0x4F8)) = 0;
}

void @objc ContainerCanvasElementView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized ContainerCanvasElementView.init(coder:)();
}

uint64_t ContainerCanvasElementView.alwaysUseMaxResolutionImage.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4F0)) = result;
  return result;
}

void __swiftcall ContainerCanvasElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  void **v3;
  Class isa;
  double y;
  double x;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  objc_class *v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t i;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  objc_super v22;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (unint64_t)*v3;
  v9 = *MEMORY[0x1E0DEEDD8];
  v10 = (void *)MEMORY[0x1DF0E666C]((char *)v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, *(_QWORD *)&with.is_nil);
  if (v10)
  {

LABEL_3:
    v11 = (objc_class *)type metadata accessor for ContainerCanvasElementView(0, *(_QWORD *)((v9 & v8) + 0x4A8), *(_QWORD *)((v9 & v8) + 0x4B0), *(_QWORD *)((v9 & v8) + 0x4B8));
    v22.receiver = v3;
    v22.super_class = v11;
    -[UIView_optional hitTest:withEvent:](&v22, sel_hitTest_withEvent_, isa, x, y);
    return;
  }
  v12 = *(void **)((char *)v3 + *(_QWORD *)((*v7 & (unint64_t)*v3) + 0x4D0));
  if (!v12)
  {
LABEL_7:
    v14 = ContainerCanvasElementView.subelementViewsForHitTesting.getter();
    if (v14 >> 62)
      goto LABEL_22;
    for (i = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
    {
      v20 = v9;
      v21 = v8;
      v16 = 4;
      while (1)
      {
        v9 = v16 - 4;
        v17 = (v14 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1DF0E4D64](v16 - 4, v14)
            : *(id *)(v14 + 8 * v16);
        v8 = (unint64_t)v17;
        v18 = v16 - 3;
        if (__OFADD__(v9, 1))
          break;
        if (objc_msgSend(v17, sel_isHidden))
        {

        }
        else
        {
          objc_msgSend((id)v8, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
          v19 = objc_msgSend((id)v8, sel_hitTest_withEvent_, isa);

          if (v19)
          {
            swift_bridgeObjectRelease();
            return;
          }
        }
        ++v16;
        if (v18 == i)
        {
          swift_bridgeObjectRelease();
          v9 = v20;
          v8 = v21;
          goto LABEL_3;
        }
      }
      __break(1u);
LABEL_22:
      ;
    }
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  v13 = v12;
  if ((objc_msgSend(v13, sel_isHidden) & 1) != 0)
  {

    goto LABEL_7;
  }
  objc_msgSend(v13, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
  objc_msgSend(v13, sel_hitTest_withEvent_, isa);

}

id @objc ContainerCanvasElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  ContainerCanvasElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

Swift::Void __swiftcall ContainerCanvasElementView.layoutSubviews()()
{
  _QWORD *v0;
  _QWORD *v1;
  objc_class *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  void *v12;
  objc_super v13;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (objc_class *)type metadata accessor for ContainerCanvasElementView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B8));
  v13.receiver = v0;
  v13.super_class = v2;
  objc_msgSendSuper2(&v13, sel_layoutSubviews);
  v3 = *v1 & *v0;
  v4 = *(void **)((char *)v0 + *(_QWORD *)(v3 + 0x4C8));
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v5, sel_setFrame_);

    v3 = *v1 & *v0;
  }
  v6 = *(void **)((char *)v0 + *(_QWORD *)(v3 + 1232));
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v7, sel_setFrame_);

  }
  ContainerCanvasElementView.transformDrawing()();
  v8 = ContainerCanvasElementView.subelementViews.getter();
  if (!(v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_7;
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  v9 = _CocoaArrayWrapper.endIndex.getter();
  if (!v9)
    goto LABEL_14;
LABEL_7:
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0)
        v11 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v8);
      else
        v11 = *(id *)(v8 + 8 * i + 32);
      v12 = v11;
      (*(void (**)(void))((*v1 & *v11) + 0x288))();

    }
    goto LABEL_14;
  }
  __break(1u);
}

void @objc ContainerCanvasElementView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  ContainerCanvasElementView.layoutSubviews()();

}

uint64_t closure #2 in ContainerCanvasElementView.updateSubelements()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  id v12;
  uint64_t v14;

  v2 = type metadata accessor for CRKeyPath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x1DF0E34A4](v7);
  v8 = ContainerCanvasElementView.unorderedSubelementViews.getter();
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v10 & 1) != 0))
  {
    v11 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
    v12 = v11;
  }
  else
  {
    v11 = 0;
  }
  swift_bridgeObjectRelease();
  *a1 = v11;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void @objc ContainerCanvasElementView.rootTapped(_:)(void *a1, uint64_t a2, void *a3)
{
  UITapGestureRecognizer *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  ContainerCanvasElementView.rootTapped(_:)(v4);

}

Swift::Bool __swiftcall ContainerCanvasElementView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  UIGestureRecognizer *v11;
  char v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD *v22;
  char v23;
  unsigned __int8 v24;
  objc_class *v25;
  objc_super v27;
  uint64_t v28;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *v1;
  v6 = *MEMORY[0x1E0DEEDD8];
  v7 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v7)
    return 0;
  v8 = v7;
  (*(void (**)(uint64_t *__return_ptr))((*v4 & *v7) + 0x2C8))(&v28);
  if (!(_BYTE)v28)
    goto LABEL_14;
  v9 = *(void **)((char *)v1 + *(_QWORD *)((*v4 & *v1) + 0x4E0));
  if (!v9
    || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v10 = v9, v11 = a1, v12 = static NSObject.== infix(_:_:)(), v11, v10, (v12 & 1) == 0))
  {
    v25 = (objc_class *)type metadata accessor for ContainerCanvasElementView(0, *(_QWORD *)((v6 & v5) + 0x4A8), *(_QWORD *)((v6 & v5) + 0x4B0), *(_QWORD *)((v6 & v5) + 0x4B8));
    v27.receiver = v2;
    v27.super_class = v25;
    v24 = -[UIGestureRecognizer gestureRecognizerShouldBegin:](&v27, sel_gestureRecognizerShouldBegin_, a1);

    return v24;
  }
  v13 = (void *)(*(uint64_t (**)(void))((*v4 & *v8) + 0x320))();
  if (!v13
    || (v14 = v13, v15 = objc_msgSend(v13, sel_allowsFingerDrawing), v14, (v15 & 1) == 0))
  {
LABEL_14:

    return 0;
  }
  -[UIGestureRecognizer locationInView:](v11, sel_locationInView_, v2);
  v16 = objc_msgSend(v2, sel_hitTest_withEvent_, 0);
  if (!v16)
  {
    v18 = v8;
LABEL_20:

    return *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x4E8));
  }
  v17 = v16;
  type metadata accessor for AnyCanvasElementView();
  v18 = v17;
  v19 = v18;
  if (!swift_dynamicCastClass())
  {
    v19 = v18;
    while (1)
    {
      v20 = objc_msgSend(v19, sel_superview);

      if (!v20)
        break;
      v19 = v20;
      if (swift_dynamicCastClass())
        goto LABEL_12;
    }

    goto LABEL_20;
  }
LABEL_12:

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v21 = v19;
  v22 = v2;
  v23 = static NSObject.== infix(_:_:)();

  if ((v23 & 1) != 0)
    return *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x4E8));
  return 1;
}

uint64_t @objc ContainerCanvasElementView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, void *a3)
{
  UIGestureRecognizer *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  LOBYTE(a1) = ContainerCanvasElementView.gestureRecognizerShouldBegin(_:)(v4);

  return a1 & 1;
}

uint64_t closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a4;
  v5 = *a1;
  v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule.Ref.import<A>(_:)();
  v16 = *(_QWORD *)(v5 + *MEMORY[0x1E0D12A70]);
  v17 = a3;
  v18 = v15;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule<>.rootID.getter();
  Ref.init(id:)();
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in ContainerCanvasElementView.drawingSelectionDidChange()(_QWORD *a1, uint64_t a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRetain();
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)(a2);
  swift_bridgeObjectRelease();
  static Date.timeIntervalSinceReferenceDate.getter();
  *a1 = v5;
  result = swift_bridgeObjectRelease();
  a1[4] = v4;
  return result;
}

void key path getter for CanvasElement.rotation : <A>A(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 32))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t key path setter for CanvasElement.rotation : <A>A(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8) + 40))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8), *a1);
}

double resize #1 <A>() in ContainerCanvasElementView.transformDrawing()@<D0>(void *a1@<X0>, CGFloat *a2@<X8>)
{
  CGFloat m21;
  CGFloat m22;
  CGFloat a;
  CGFloat b;
  CGFloat MidX;
  CGFloat MidY;
  CGFloat m11;
  CGFloat m12;
  CGFloat m13;
  CGFloat m14;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  id v20;
  id v21;
  double result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  CGFloat v27;
  CGFloat v28;
  double ty;
  CGFloat tx;
  __int128 v31;
  __int128 v32;
  CATransform3D t1;
  CGAffineTransform v34;
  CGAffineTransform t2;
  CGRect v36;
  CGRect v37;

  objc_msgSend(a1, sel_drawingTransform);
  v31 = *(_OWORD *)&t1.m13;
  v32 = *(_OWORD *)&t1.m11;
  m21 = t1.m21;
  m22 = t1.m22;
  objc_msgSend(a1, sel_tileDrawingTransform);
  CGAffineTransformInvert(&t2, (CGAffineTransform *)&t1);
  *(_OWORD *)&t1.m11 = v32;
  *(_OWORD *)&t1.m13 = v31;
  t1.m21 = m21;
  t1.m22 = m22;
  CGAffineTransformConcat(&v34, (CGAffineTransform *)&t1, &t2);
  a = v34.a;
  b = v34.b;
  v27 = v34.b;
  v28 = v34.a;
  *(CGFloat *)&v32 = v34.c;
  tx = v34.tx;
  *(CGFloat *)&v31 = v34.d;
  ty = v34.ty;
  objc_msgSend(a1, sel_bounds);
  MidX = CGRectGetMidX(v36);
  objc_msgSend(a1, sel_bounds);
  MidY = CGRectGetMidY(v37);
  CGAffineTransformMakeTranslation((CGAffineTransform *)&t1, MidX, MidY);
  m11 = t1.m11;
  m12 = t1.m12;
  m13 = t1.m13;
  m14 = t1.m14;
  v14 = t1.m21;
  v15 = t1.m22;
  t2.a = a;
  t2.b = b;
  *(_QWORD *)&t2.c = v32;
  *(_QWORD *)&t2.d = v31;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v34, (CGAffineTransform *)&t1, &t2);
  v23 = *(_OWORD *)&v34.c;
  v25 = *(_OWORD *)&v34.a;
  v16 = v34.tx;
  v17 = v34.ty;
  t1.m11 = m11;
  t1.m12 = m12;
  t1.m13 = m13;
  t1.m14 = m14;
  t1.m21 = v14;
  t1.m22 = v15;
  CGAffineTransformInvert(&t2, (CGAffineTransform *)&t1);
  *(_OWORD *)&t1.m11 = v25;
  *(_OWORD *)&t1.m13 = v23;
  t1.m21 = v16;
  t1.m22 = v17;
  CGAffineTransformConcat(&v34, (CGAffineTransform *)&t1, &t2);
  v24 = *(_OWORD *)&v34.c;
  v26 = *(_OWORD *)&v34.a;
  v18 = v34.tx;
  v19 = v34.ty;
  v20 = objc_msgSend(a1, sel_tileContainerView);
  v21 = objc_msgSend(v20, sel_layer);

  *(_OWORD *)&t2.a = v26;
  *(_OWORD *)&t2.c = v24;
  t2.tx = v18;
  t2.ty = v19;
  CATransform3DMakeAffineTransform(&t1, &t2);
  objc_msgSend(v21, sel_setSublayerTransform_, &t1);

  *a2 = v28;
  a2[1] = v27;
  *((_QWORD *)a2 + 2) = v32;
  *((_QWORD *)a2 + 3) = v31;
  a2[4] = tx;
  result = ty;
  a2[5] = ty;
  return result;
}

void closure #1 in ContainerCanvasElementView.transformDrawing()(char a1, void *a2)
{
  id v2;
  id v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[8];
  CGFloat v9[6];

  if ((a1 & 1) != 0)
  {
    v2 = objc_msgSend(a2, sel_tileContainerView, resize #1 <A>() in ContainerCanvasElementView.transformDrawing()(a2, v9));
    v3 = objc_msgSend(v2, sel_layer);

    v4 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
    v8[0] = *MEMORY[0x1E0CD2610];
    v8[1] = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
    v8[2] = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
    v8[3] = v5;
    v6 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
    v8[4] = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
    v8[5] = v6;
    v7 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
    v8[6] = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
    v8[7] = v7;
    objc_msgSend(v3, sel_setSublayerTransform_, v8);

  }
}

void ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD v13[6];
  objc_super v14;

  v7 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x4A8);
  v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x4B0);
  v9 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x4B8);
  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for ContainerCanvasElementView(0, v7, v8, v9);
  objc_msgSendSuper2(&v14, sel_contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator_, a1, a2, a3);
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v7;
  v11[3] = v8;
  v11[4] = v9;
  v11[5] = v10;
  v13[4] = partial apply for closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:);
  v13[5] = v11;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v13[3] = &block_descriptor_52;
  v12 = _Block_copy(v13);
  swift_release();
  objc_msgSend(a3, sel_addAnimations_, v12);
  _Block_release(v12);
}

void closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (_QWORD *)MEMORY[0x1DF0E666C](v6 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);

    if (v8)
    {
      swift_beginAccess();
      v9 = MEMORY[0x1DF0E666C](v5);
      if (v9)
      {
        v10 = (void *)v9;
        (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x620))(v9, a4);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

void @objc ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)((uint64_t)v8, (uint64_t)v9, a5);

  swift_unknownObjectRelease();
}

void ContainerCanvasElementView.__ivar_destroyer()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];

  swift_bridgeObjectRelease();
}

id ContainerCanvasElementView.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for ContainerCanvasElementView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B8));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void @objc ContainerCanvasElementView.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];

  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ContainerCanvasElementView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerCanvasElementView);
}

uint64_t specialized ContainerCanvasElementView.drawingView.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0));
}

uint64_t specialized ContainerCanvasElementView.subelementsContainerView.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8));
}

uint64_t specialized ContainerCanvasElementView.formFillingView.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0));
}

uint64_t sub_1DDE3088C()
{
  return 24;
}

__n128 sub_1DDE30898(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1DDE308C8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDE308EC()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)()
{
  uint64_t *v0;

  closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(v0[5], v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_52()
{
  return swift_release();
}

uint64_t specialized ContainerCanvasElementView.canvas.setter()
{
  _QWORD *v0;

  swift_unknownObjectWeakAssign();
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

void specialized ContainerCanvasElementView.init(coder:)()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4C8)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4D0)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4D8)) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4E0)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4E8)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4F0)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0x4F8)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1DDE30A88()
{
  return 24;
}

__n128 sub_1DDE30A94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDE30AA8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1DDE30ACC(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 32))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1DDE30B0C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8) + 40))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8), *a1);
}

uint64_t sub_1DDE30B4C()
{
  return 24;
}

__n128 sub_1DDE30B58(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDE30B74()
{
  return 24;
}

__n128 sub_1DDE30B80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #2 in ContainerCanvasElementView.updateSubelements()@<X0>(_QWORD *a1@<X8>)
{
  return closure #2 in ContainerCanvasElementView.updateSubelements()(a1);
}

uint64_t outlined init with take of IndexingIterator<CollectionDifference<AnyCanvasElementView>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.drawingSelectionDidChange()(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in ContainerCanvasElementView.drawingSelectionDidChange()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ()(uint64_t a1, void *aBlock)
{
  void (*v2)(void (*)(uint64_t), uint64_t);
  void *v3;
  uint64_t v4;

  v2 = *(void (**)(void (*)(uint64_t), uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v2(partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (), v4);
  swift_release();
  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1, uint64_t a2)
{
  Class isa;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

id PKPaperTextViewLinkingController.addLinkClient.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DB06F0]), sel_init);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t PKPaperTextViewLinkingController.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

uint64_t PKPaperTextViewLinkingController.delegate.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PKPaperTextViewLinkingController.delegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return PKPaperTextViewLinkingController.delegate.modify;
}

void PKPaperTextViewLinkingController.delegate.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

char *PKPaperTextViewLinkingController.__allocating_init(textView:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;
  char *v5;

  v3 = objc_allocWithZone(v1);
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SynapseLinkingEngine()), sel_init);
  v5 = specialized PKPaperTextViewLinkingController.init(textView:linkingEngine:)(a1, v4, (char *)objc_allocWithZone(v1));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

char *PKPaperTextViewLinkingController.init(textView:)(void *a1)
{
  objc_class *ObjectType;
  id v3;
  char *v4;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SynapseLinkingEngine()), sel_init);
  v4 = specialized PKPaperTextViewLinkingController.init(textView:linkingEngine:)(a1, v3, (char *)objc_allocWithZone(ObjectType));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

UIMenu PKPaperTextViewLinkingController.linkItemsMenu.getter()
{
  UIMenuElementSize v0;
  UIMenuElementSize v1;
  void *v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::OpaquePointer v7;
  UIMenuElementSize aBlock[6];
  UIImage_optional v9;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF35440;
  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = (UIMenuElementSize)partial apply for closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (UIMenuElementSize)thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ();
  aBlock[3] = (UIMenuElementSize)&block_descriptor_53;
  v2 = _Block_copy(aBlock);
  v3 = (void *)objc_opt_self();
  swift_retain();
  v4 = objc_msgSend(v3, sel_elementWithProvider_, v2);
  _Block_release(v2);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  aBlock[0] = v0;
  specialized Array._endMutation()();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v9.value.super.isa = 0;
  v9.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v5, (Swift::String_optional)0, v9, 0, 0xFFFFFFFFFFFFFFFFLL, aBlock[0], v7);
}

uint64_t closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  void (*v17)(_QWORD, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  char *v18;

  v5 = a3 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v5);
  if (result)
  {
    v7 = (char *)result;
    v8 = result + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
    swift_beginAccess();
    v9 = (void *)MEMORY[0x1DF0E666C](v8);
    if (v9)
    {
      v10 = v9;
      if ((objc_msgSend(v9, sel_respondsToSelector_, sel_linkingControllerLinksMenuExcludedUserActivities_) & 1) != 0)
      {
        v11 = objc_msgSend(v10, sel_linkingControllerLinksMenuExcludedUserActivities_, v7);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
        v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        swift_unknownObjectRelease();

LABEL_7:
        v13 = (_QWORD *)swift_allocObject();
        v13[2] = v7;
        v13[3] = a1;
        v13[4] = a2;
        v14 = *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8];
        ObjectType = swift_getObjectType();
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter;
        *(_QWORD *)(v16 + 24) = v13;
        v17 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v14 + 32);
        v18 = v7;
        swift_retain();
        swift_retain();
        v17(0, 1, v12, partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:), v16, ObjectType, v14);

        swift_bridgeObjectRelease();
        swift_release();
        return swift_release();
      }
      swift_unknownObjectRelease();
    }
    v12 = MEMORY[0x1E0DEE9D8];
    goto LABEL_7;
  }
  return result;
}

uint64_t closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v15 = (void *)static OS_dispatch_queue.main.getter();
  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a3;
  v17[5] = a4;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_55_0;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v14, v10, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v20);
}

void closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  void *v6;
  id v7;
  unint64_t v8;
  UIMenuElementSize preferredElementSize;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  Swift::OpaquePointer aBlock[6];
  UIImage_optional v18;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = (void *)MEMORY[0x1DF0E666C](v5);
  if (v6)
  {
    v7 = v6;
    v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit8LinkItem_pG_So016UICustomViewMenuB0Cs5NeverOTg503_s8d16Kit32PKPaperTexti25LinkingControllerC18buildfj59Items33_35037C7173BEC9E8EC270B903D7A81233forSaySo13UIMenub10CGSayAA0I4G33_pG_tFSo08UICustomejU0CAaJ_pXEfU_AF0noipQ0CTf1cn_nTf4ng_n(a2, v7);

    if (v8 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
      preferredElementSize = _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
      preferredElementSize = v8;
    }
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1DDF35440;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v18.value.super.isa = 0;
    v18.is_nil = 0;
    *(UIMenu *)(v10 + 32) = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v11, (Swift::String_optional)0, v18, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, aBlock[0]);
    aBlock[0]._rawValue = (void *)v10;
    specialized Array._endMutation()();
    a3(v10);
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(a2 + 16);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    swift_retain();
    v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4AFE0);
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = partial apply for implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:);
    v15[3] = v13;
    aBlock[4]._rawValue = partial apply for closure #1 in Analytics.sendEventLazy(key:payload:);
    aBlock[5]._rawValue = v15;
    aBlock[0]._rawValue = (void *)MEMORY[0x1E0C809B0];
    aBlock[1]._rawValue = (void *)1107296256;
    aBlock[2]._rawValue = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3]._rawValue = &block_descriptor_64;
    v16 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v16);

    swift_release();
    swift_release();

  }
}

uint64_t PKPaperTextViewLinkingController.fetchLinkableItems(excluding:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8);
  ObjectType = swift_getObjectType();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v7 + 32);
  swift_retain();
  v10(0, 1, a1, _sIg_Ieg_TRTA_0, v9, ObjectType, v7);
  return swift_release();
}

char *closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  id v6;
  uint64_t ObjectType;
  void (*v8)(id, _UNKNOWN **, uint64_t, uint64_t);
  char *v9;

  v4 = objc_allocWithZone((Class)type metadata accessor for LinkMenuItemView());
  v5 = swift_unknownObjectRetain();
  v6 = LinkMenuItemView.init(linkItem:)(v5, a3);
  ObjectType = swift_getObjectType();
  v8 = *(void (**)(id, _UNKNOWN **, uint64_t, uint64_t))(a3 + 16);
  v9 = (char *)v6;
  v8(v6, &protocol witness table for LinkMenuItemView, ObjectType, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(ObjectType, a3);
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_delegate + 8] = &protocol witness table for PKPaperTextViewLinkingController;
  swift_unknownObjectWeakAssign();
  return v9;
}

uint64_t PKPaperTextViewLinkingController.fetchLinkableItems(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  void (*v8)(_QWORD, uint64_t, _QWORD, uint64_t (*)(), uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8);
  ObjectType = swift_getObjectType();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = *(void (**)(_QWORD, uint64_t, _QWORD, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v5 + 32);
  swift_retain();
  v8(0, 1, MEMORY[0x1E0DEE9D8], partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:), v7, ObjectType, v5);
  return swift_release();
}

void PKPaperTextViewLinkingController.insertSynapseLink(_:)(void *a1)
{
  id v2;
  id v3;

  v2 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  v3 = SynapseLinkItem.init(synapseItem:)(a1);
  specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(v3, 0, 0);

}

void PKPaperTextViewLinkingController.insertSynapseLink(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;

  v6 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  v7 = SynapseLinkItem.init(synapseItem:)(a1);
  specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(v7, a2, a3);

}

uint64_t PKPaperTextViewLinkingController.paperViewCanvas.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD v12[5];
  uint64_t v13;

  v1 = (void *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_textView);
  if (v1)
  {
    v2 = v1;
    v13 = 0;
    v3 = objc_msgSend(v1, sel_textStorage);
    v4 = objc_msgSend(v3, sel_length);

    MEMORY[0x1E0C80A78](v5, v6);
    v12[2] = &v13;
    UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v4, 1, 2, (uint64_t)partial apply for closure #1 in PKPaperTextViewLinkingController.paperViewCanvas.getter, (uint64_t)v12);

    return v13;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1DDB0F000, v9, v10, "Text view backpointer is nil", v11, 2u);
      MEMORY[0x1DF0E6558](v11, -1, -1);
    }

    return 0;
  }
}

void PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  type metadata accessor for SynapseLinkItem();
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = (void *)v0;
    v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
    swift_unknownObjectRetain();
    v3 = objc_msgSend(v2, sel_userActivity);
    if (v3)
    {
      v4 = v3;
      v5 = PKPaperTextViewLinkingController.addLinkClient.getter();
      v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      *(_QWORD *)(v7 + 24) = v1;
      v9[4] = partial apply for closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:);
      v9[5] = v7;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIImage?) -> ();
      v9[3] = &block_descriptor_14_2;
      v8 = _Block_copy(v9);
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v5, sel_userWillAddLinkWithActivity_completion_, v4, v8);
      swift_unknownObjectRelease();
      _Block_release(v8);

    }
    else
    {
      PKPaperTextViewLinkingController.insertLinkItem(_:)(v1);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const void *v23;
  id v24;
  id v25;
  const void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t aBlock;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void *v36;
  void (*v37)();
  uint64_t v38;

  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](a2 + 16);
  if (result)
  {
    v17 = (void *)result;
    v32 = v11;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    if (a1)
    {
      v18 = a1;
      v19 = (void *)static OS_dispatch_queue.main.getter();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v17;
      *(_QWORD *)(v20 + 24) = v18;
      v37 = partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:);
      v38 = v20;
      aBlock = MEMORY[0x1E0C809B0];
      v34 = 1107296256;
      v35 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v36 = &block_descriptor_26_2;
      v21 = _Block_copy(&aBlock);
      v31 = v12;
      v22 = v7;
      v23 = v21;
      v24 = v17;
      v25 = v18;
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1DF0E48C0](0, v15, v10, v23);
      v26 = v23;
      v7 = v22;
      v12 = v31;
      _Block_release(v26);

    }
    else
    {
      v19 = (void *)static OS_dispatch_queue.main.getter();
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v17;
      *(_QWORD *)(v27 + 24) = a3;
      v37 = partial apply for closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:);
      v38 = v27;
      aBlock = MEMORY[0x1E0C809B0];
      v34 = 1107296256;
      v35 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v36 = &block_descriptor_20_0;
      v28 = _Block_copy(&aBlock);
      v25 = v17;
      v29 = a3;
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1DF0E48C0](0, v15, v10, v28);
      _Block_release(v28);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v32);
  }
  return result;
}

void closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  v4 = SynapseLinkItem.init(synapseItem:)(a2);
  PKPaperTextViewLinkingController.insertLinkItem(_:)(v4);

}

void PKPaperTextViewLinkingController.insertLinkItem(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  _QWORD aBlock[6];

  v3 = v1 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x1DF0E666C](v3);
  if (!v4)
    goto LABEL_6;
  v5 = v4;
  if ((objc_msgSend(v4, sel_respondsToSelector_, sel_linkingController_shouldAddSynapseLinkItem_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  v6 = objc_msgSend(v5, sel_linkingController_shouldAddSynapseLinkItem_, v1, a1);
  swift_unknownObjectRelease();
  if (v6)
  {
LABEL_6:
    specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(a1, 0, 0);
    v7 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000020, 0x80000001DDF4AFA0);
    aBlock[4] = specialized closure #1 in Analytics.sendEventLazy(key:payload:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_32_5;
    v8 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v8);

  }
}

void closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  _QWORD aBlock[6];

  v4 = a1 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  v5 = (void *)MEMORY[0x1DF0E666C](v4);
  if (!v5)
    goto LABEL_6;
  v6 = v5;
  if ((objc_msgSend(v5, sel_respondsToSelector_, sel_linkingController_shouldAddSynapseLinkItem_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  v7 = objc_msgSend(v6, sel_linkingController_shouldAddSynapseLinkItem_, a1, a2);
  swift_unknownObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_6:
    specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(a2, 0, 0);
    v8 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000020, 0x80000001DDF4AFA0);
    aBlock[4] = specialized closure #1 in Analytics.sendEventLazy(key:payload:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_29_1;
    v9 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v9);

  }
}

uint64_t PKPaperTextViewLinkingController.synapseLinkItems.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD v12[5];
  uint64_t v13;

  v1 = (void *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_textView);
  if (v1)
  {
    v2 = v1;
    v13 = MEMORY[0x1E0DEE9D8];
    v3 = objc_msgSend(v1, sel_textStorage);
    v4 = objc_msgSend(v3, sel_length);

    MEMORY[0x1E0C80A78](v5, v6);
    v12[2] = &v13;
    UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v4, 1, 0, (uint64_t)partial apply for closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter, (uint64_t)v12);

    return v13;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1DDB0F000, v9, v10, "Text view backpointer is nil", v11, 2u);
      MEMORY[0x1DF0E6558](v11, -1, -1);
    }

    return MEMORY[0x1E0DEE9D8];
  }
}

uint64_t closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  objc_class *v21;
  char *v22;
  id v23;
  id v24;
  id v25;
  unint64_t v26;
  _QWORD v27[2];
  objc_super v28;
  unint64_t v29;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = Capsule<>.links.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if (!(v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x1E0DEE9D8];
    return specialized Array.append<A>(contentsOf:)(v26);
  }
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_11;
LABEL_3:
  v29 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v14 & 0x8000000000000000) == 0)
  {
    v27[1] = a5;
    v16 = (void *)objc_opt_self();
    v17 = 0;
    v18 = *MEMORY[0x1E0DB0760];
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v19 = (id)MEMORY[0x1DF0E4D64](v17, v13);
      else
        v19 = *(id *)(v13 + 8 * v17 + 32);
      v20 = v19;
      ++v17;
      v21 = (objc_class *)type metadata accessor for SynapseLinkItem();
      v22 = (char *)objc_allocWithZone(v21);
      *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate + 8] = 0;
      swift_unknownObjectWeakInit();
      *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem] = v20;
      v28.receiver = v22;
      v28.super_class = v21;
      v23 = v20;
      v24 = objc_msgSendSuper2(&v28, sel_init);
      v25 = objc_msgSend(v16, sel_defaultCenter);
      objc_msgSend(v25, sel_addObserver_selector_name_object_, v24, sel_linkPreviewDidFinishLoadingWithNotification_, v18, v23);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v14 != v17);
    v26 = v29;
    swift_bridgeObjectRelease();
    return specialized Array.append<A>(contentsOf:)(v26);
  }
  __break(1u);
  return result;
}

id PKPaperTextViewLinkingController.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PKPaperTextViewLinkingController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PKPaperTextViewLinkingController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *specialized PKPaperTextViewLinkingController.init(textView:linkingEngine:)(void *a1, void *a2, char *a3)
{
  objc_class *ObjectType;
  uint64_t v7;
  char *v8;
  char *v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v15;
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a3[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient] = 0;
  v7 = OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_analytics;
  type metadata accessor for Analytics();
  v8 = a3;
  *(_QWORD *)&a3[v7] = swift_initStaticObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v9 = &v8[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine];
  *(_QWORD *)v9 = a2;
  *((_QWORD *)v9 + 1) = &protocol witness table for SynapseLinkingEngine;
  v10 = a2;

  v17.receiver = v8;
  v17.super_class = ObjectType;
  v11 = (char *)objc_msgSendSuper2(&v17, sel_init);
  v12 = *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8];
  v13 = swift_getObjectType();
  v14 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v12 + 16);
  v15 = v11;
  swift_unknownObjectRetain();
  v14(v11, &protocol witness table for PKPaperTextViewLinkingController, v13, v12);
  swift_unknownObjectRelease();

  return v15;
}

uint64_t sub_1DDE32B38()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(a1, a2, v2);
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_53()
{
  return swift_release();
}

uint64_t sub_1DDE32B7C()
{
  swift_release();
  return swift_deallocObject();
}

void specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;

  v5 = (void *)PKPaperTextViewLinkingController.paperViewCanvas.getter();
  if (v5)
  {
    v13 = v5;
    specialized static LinkLayout.addLinkItem(_:in:completion:)((uint64_t)a1, v5, a2, a3);

  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_unknownObjectRetain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      *(_DWORD *)v9 = 136315138;
      v15 = v10;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkItem);
      v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v7, v8, "Unable to insert link %s because there isn't a paper canvas on the textView", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v10, -1, -1);
      MEMORY[0x1DF0E6558](v9, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t partial apply for closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1DDE32DB8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1DDE32E0C()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for PKPaperTextViewLinkingController()
{
  return objc_opt_self();
}

uint64_t method lookup function for PKPaperTextViewLinkingController()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1DDE32E8C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(void *a1)
{
  uint64_t v1;

  return closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1DDE32EC0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)()
{
  uint64_t v0;

  closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)()
{
  uint64_t v0;

  closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t specialized static LinkLayout.addLinkItem(_:in:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[6];
  _OWORD v47[2];
  char v48;

  v39 = a3;
  v40 = a4;
  v42 = type metadata accessor for DispatchWorkItemFlags();
  v45 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v5);
  v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v38 - v18;
  v20 = SynapseLinkItem.dataRepresentation.getter();
  v22 = v21;
  objc_msgSend(a2, sel_frame);
  memset(v47, 0, sizeof(v47));
  v48 = 0;
  LOBYTE(aBlock[0]) = 9;
  static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v20, v22, (uint64_t)v47, (unsigned __int8 *)aBlock, 0.0, 0.0, 1, (uint64_t)v19, v23, v24, v25, v26, 0.0);
  outlined consume of Data._Representation(v20, v22);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v27 = (void *)static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
  v28 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v29 + v28, v15, v11);
  v30 = (uint64_t *)(v29 + ((v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  v32 = v39;
  v31 = v40;
  *v30 = v39;
  v30[1] = v31;
  aBlock[4] = partial apply for closure #1 in static LinkLayout.addLinkItem(_:in:completion:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_38_2;
  v33 = _Block_copy(aBlock);
  v34 = a2;
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v32);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v35 = v41;
  v36 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v10, v35, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
}

uint64_t sub_1DDE33214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static LinkLayout.addLinkItem(_:in:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in static LinkLayout.addLinkItem(_:in:completion:)(*(_QWORD **)(v0 + 16), v0 + v2, *(uint64_t (**)(uint64_t))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

void partial apply for closure #1 in PKPaperTextViewLinkingController.paperViewCanvas.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  void **v6;
  uint64_t v7;
  void *v8;

  v6 = *(void ***)(v4 + 16);
  v7 = MEMORY[0x1DF0E666C](*(_QWORD *)(a1 + direct field offset for Canvas.paperView)+ OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  v8 = *v6;
  *v6 = (void *)v7;

  *a4 = 1;
}

uint64_t sub_1DDE33348()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1DDE33374()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1DDE333AC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit8LinkItem_pG_So016UICustomViewMenuB0Cs5NeverOTg503_s8d16Kit32PKPaperTexti25LinkingControllerC18buildfj59Items33_35037C7173BEC9E8EC270B903D7A8123LL3forSaySo13UIMenub10CGSayAA0I4G33_pG_tFSo08UICustomejU0CAaJ_pXEfU_AF0noipQ0CTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  __int128 *v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  id v12;
  _QWORD aBlock[6];
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v6 = (__int128 *)(a1 + 32);
    v7 = (void *)objc_opt_self();
    do
    {
      v8 = swift_allocObject();
      v9 = *v6++;
      *(_OWORD *)(v8 + 16) = v9;
      *(_QWORD *)(v8 + 32) = a2;
      aBlock[4] = partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:);
      aBlock[5] = v8;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewController) -> (@owned UIViewController);
      aBlock[3] = &block_descriptor_70;
      v10 = _Block_copy(aBlock);
      swift_unknownObjectRetain_n();
      v11 = a2;
      v12 = objc_msgSend(v7, sel_elementWithViewProvider_, v10);
      _Block_release(v10);
      swift_unknownObjectRelease();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
    return v14;
  }
  return result;
}

uint64_t sub_1DDE33574()
{
  return swift_deallocObject();
}

unint64_t partial apply for implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:)()
{
  return implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:)();
}

uint64_t sub_1DDE3358C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

char *partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t KeyPathWrapper.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _BYTE v40[24];
  uint64_t v41;

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v38 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v36 - v16;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v36 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v23((char *)&v36 - v21, v1 + OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path, v3, v20);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v24(v22, 0, 1, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v40, &demangling cache variable for type metadata for Any?);
  if (v41)
  {
    type metadata accessor for KeyPathWrapper();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v25 = v39;
      ((void (*)(char *, char *, uint64_t))v23)(v17, &v39[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v3);

      v26 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, &demangling cache variable for type metadata for Any?);
  }
  v26 = 1;
LABEL_6:
  v24(v17, v26, 1, v3);
  v27 = (uint64_t)&v10[*(int *)(v7 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, v27, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v28((uint64_t)v10, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v29 = v28(v27, 1, v3);
    if (v29 == 1)
      v30 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    else
      v30 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    if (v29 == 1)
      v31 = -1;
    else
      v31 = 0;
  }
  else
  {
    v32 = v38;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, v38, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v28(v27, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v32, v3);
      v31 = 0;
      v30 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      v33 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v37, v27, v3);
      lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C90]);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v34 = *(void (**)(char *, uint64_t))(v4 + 8);
      v34(v33, v3);
      v30 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v34((char *)v32, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, v30);
  return v31 & 1;
}

id KeyPathWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KeyPathWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for KeyPathWrapper()
{
  return type metadata accessor for KeyPathWrapper();
}

uint64_t type metadata accessor for KeyPathWrapper()
{
  uint64_t result;

  result = type metadata singleton initialization cache for KeyPathWrapper;
  if (!type metadata singleton initialization cache for KeyPathWrapper)
    return swift_getSingletonMetadata();
  return result;
}

id one-time initialization function for shared()
{
  uint64_t v0;
  id v1;
  id result;

  type metadata accessor for GraphCanvasElementRenderedImageCache();
  v0 = swift_allocObject();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  *(_QWORD *)(v0 + 16) = v1;
  result = objc_msgSend(v1, sel_setCountLimit_, 3);
  static GraphCanvasElementRenderedImageCache.shared = v0;
  return result;
}

uint64_t type metadata accessor for GraphCanvasElementRenderedImageCache()
{
  return objc_opt_self();
}

uint64_t lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CRKeyPath();
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

double UnknownCanvasElement.frame.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t UnknownCanvasElement.frame.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownCanvasElement.thumbnail.getter()
{
  return UnknownCanvasElement.thumbnail.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t type metadata accessor for UnknownCanvasElement()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UnknownCanvasElement;
  if (!type metadata singleton initialization cache for UnknownCanvasElement)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for UnknownCanvasElement.thumbnail : UnknownCanvasElement()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for UnknownCanvasElement.thumbnail : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
}

uint64_t UnknownCanvasElement.thumbnail.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
}

uint64_t UnknownCanvasElement.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _OWORD v13[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v13 - v8;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  memset(v13, 0, sizeof(v13));
  CRRegister.init(wrappedValue:)();
  v10 = type metadata accessor for UnknownCanvasElement();
  *(_QWORD *)&v13[0] = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v11 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)&v13[0] = 0;
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v10 + 32)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t (*UnknownCanvasElement.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t UnknownCanvasElement.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnknownCanvasElement.$frame.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double UnknownCanvasElement.rotation.getter()
{
  double v1;

  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for UnknownCanvasElement.rotation : UnknownCanvasElement@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for UnknownCanvasElement.rotation : UnknownCanvasElement()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownCanvasElement.rotation.setter()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownCanvasElement.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$rotation.getter()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownCanvasElement.$rotation : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t UnknownCanvasElement.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*UnknownCanvasElement.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownCanvasElement() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*UnknownCanvasElement.thumbnail.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$thumbnail.getter()
{
  return UnknownCanvasElement.thumbnail.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t UnknownCanvasElement.thumbnail.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for UnknownCanvasElement();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a1(v2);
}

uint64_t key path setter for UnknownCanvasElement.$thumbnail : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t UnknownCanvasElement.$thumbnail.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*UnknownCanvasElement.$thumbnail.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownCanvasElement() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t UnknownCanvasElement.minAppVersion.getter()
{
  uint64_t v1;

  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for UnknownCanvasElement.minAppVersion : UnknownCanvasElement@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for UnknownCanvasElement.minAppVersion : UnknownCanvasElement()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownCanvasElement.minAppVersion.setter()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownCanvasElement.minAppVersion.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$minAppVersion.getter()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownCanvasElement.$minAppVersion : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t UnknownCanvasElement.$minAppVersion.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*UnknownCanvasElement.$minAppVersion.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownCanvasElement() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t UnknownCanvasElement.additionalFields.getter()
{
  type metadata accessor for UnknownCanvasElement();
  return swift_bridgeObjectRetain();
}

uint64_t UnknownCanvasElement.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for UnknownCanvasElement() + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*UnknownCanvasElement.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for UnknownCanvasElement();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static UnknownCanvasElement.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F04142E8;
  v4 = qword_1F04142F0;
  v3 = unk_1F04142F8;
  v5 = qword_1F0414300;
  v6 = qword_1F0414308;
  v7 = qword_1F0414310;
  v8 = qword_1F0414318;
  v10 = qword_1F0414320;
  v9 = *(_QWORD *)byte_1F0414328;
  v11 = qword_1F0414330;
  v12 = qword_1F0414338;
  *a1 = static UnknownCanvasElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.minEncodingVersion.getter();
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance UnknownCanvasElement()
{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  result = v1;
  if (v1 < -32768)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (v1 >= 0x8000)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t UnknownCanvasElement.minAppFormatVersion.getter()
{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  result = v1;
  if (v1 < -32768)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (v1 >= 0x8000)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t protocol witness for static CRStruct_Base_4.fields.getter in conformance UnknownCanvasElement@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F04142E8;
  v4 = qword_1F04142F0;
  v3 = unk_1F04142F8;
  v5 = qword_1F0414300;
  v6 = qword_1F0414308;
  v7 = qword_1F0414310;
  v8 = qword_1F0414318;
  v10 = qword_1F0414320;
  v9 = *(_QWORD *)byte_1F0414328;
  v11 = qword_1F0414330;
  v12 = qword_1F0414338;
  *a1 = static UnknownCanvasElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return static CRStruct_4.fieldKeys.getter();
}

uint64_t protocol witness for CRDT.context.getter in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRStruct_4.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance UnknownCanvasElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  return CRDT.init(serializedData:)();
}

void UnknownCanvasElement.shared(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t UnknownCanvasElement.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized CanvasElement.renderThumbnail(in:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[11] = a1;
  v2[12] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v2[13] = swift_task_alloc();
  v3 = type metadata accessor for CRAsset();
  v2[14] = v3;
  v2[15] = *(_QWORD *)(v3 - 8);
  v2[16] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized CanvasElement.renderThumbnail(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 136) = type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 104), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    *(_QWORD *)(v0 + 144) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v6 = specialized CanvasElement.maxDimensionInPixels(_:in:)(v5, *(double *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v7;
    *v7 = v0;
    v7[1] = specialized CanvasElement.renderThumbnail(in:);
    return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v6, 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = v1;
    CRRegister.wrappedValue.getter();
    v4 = *(double *)(v0 + 48);
    v5 = *(double *)(v0 + 56);
    v6 = *(double *)(v0 + 64);
    v7 = *(double *)(v0 + 72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(v3, 0, 1, v2, v4, v5, v6, v7, *(double *)(v0 + 80));

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void UnknownCanvasElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  int v25;
  double v26;
  int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  id v40;
  uint64_t v41;
  double v42;
  double v43;
  double Height;
  double v45;
  id v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGFloat MinX;
  double v53;
  CGFloat Width;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  id v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  char v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;

  v83 = a8;
  v82 = a7;
  v81 = a5;
  v80 = a4;
  v71 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = *a1;
  v20 = *(double *)(a6 + 8);
  v79 = *(double *)a6;
  v78 = *(double *)(a6 + 16);
  v77 = *(double *)(a6 + 24);
  v76 = *(_QWORD *)(a6 + 32);
  v75 = *(_QWORD *)(a6 + 40);
  v74 = *(_QWORD *)(a6 + 48);
  v73 = *(_QWORD *)(a6 + 56);
  v72 = *(_QWORD *)(a6 + 64);
  v21 = *(unsigned __int8 *)(a6 + 74);
  v22 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  v23 = swift_dynamicCastClass();
  if (!v23)
    return;
  v24 = (char *)v23;
  if (*(_QWORD *)&v20 == 1 || (v25 = v22 | (v21 << 16), (v25 & 0x100) == 0))
  {
    *(_BYTE *)(v23 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 0;
    return;
  }
  v26 = v20;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v71, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  v69 = a3;
  if (v27 == 1)
  {
    v28 = a3;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v29 = v82;
    v30 = v83;
    v31 = v81;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
    v32 = v70;
    v33 = (void *)v70;
    v34 = a3;
    v30 = v83;
    v31 = v81;
    if (v70 >> 62)
    {
      if (v70 >> 62 != 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v16 + 8);
        v40 = v34;
        v39(v19, v15);
        v29 = v82;
        goto LABEL_12;
      }
      v33 = (void *)(v70 & 0x3FFFFFFFFFFFFFFFLL);
    }
    v35 = v34;
    outlined copy of PaperDocument.PDFDocumentUse(v32);
    v36 = type metadata accessor for UnknownCanvasElement();
    v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
    v38 = v36;
    v29 = v82;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v33, (uint64_t)v19, 1, v31, v38, v82, v37, (char *)&protocol witness table for UnknownCanvasElement, v30);
    outlined consume of PaperDocument.PDFDocumentUse(v70);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
LABEL_12:
  v85 = v79;
  v86 = v26;
  v87 = v78;
  v88 = v77;
  v89 = v76;
  v90 = v75;
  v91 = v74;
  v92 = v73;
  v93 = v72;
  v94 = v25;
  v95 = BYTE2(v25);
  v41 = type metadata accessor for UnknownCanvasElement();
  CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(v80, v84, v31, (uint64_t)&v85, v29, v41, v30, (uint64_t)&protocol witness table for UnknownCanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v42 = v85;
  v43 = v86;
  v45 = v87;
  Height = v88;
  v46 = objc_msgSend(v24, sel_page);
  if (v46)
  {
    v47 = v46;
    objc_msgSend(v46, sel_boundsForBox_, 0);
    v49 = v48;
    v51 = v50;

    v96.origin.x = v42;
    v96.origin.y = v43;
    v96.size.width = v45;
    v96.size.height = Height;
    MinX = CGRectGetMinX(v96);
    v97.origin.x = v42;
    v97.origin.y = v43;
    v97.size.width = v45;
    v97.size.height = Height;
    v53 = v51 + v49 + v49 - CGRectGetMaxY(v97);
    v98.origin.x = v42;
    v98.origin.y = v43;
    v98.size.width = v45;
    v98.size.height = Height;
    Width = CGRectGetWidth(v98);
    v99.origin.x = v42;
    v99.origin.y = v43;
    v99.size.width = v45;
    v99.size.height = Height;
    Height = CGRectGetHeight(v99);
    v45 = Width;
    v42 = MinX;
    v43 = v53;
  }
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v57 = v56;
  v58 = v69;
  v59 = (void *)MEMORY[0x1DF0E41AC](v55, v57);
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setType_, v59);

  v60 = (void *)objc_opt_self();
  v61 = v58;
  v62 = objc_msgSend(v60, sel_redColor);
  objc_msgSend(v24, sel_setColor_, v62);

  objc_msgSend(v24, sel_setBounds_, v42, v43, v45, Height);
  v63 = objc_msgSend(v24, sel_createAKAnnotation);
  if (v63)
  {
    v64 = v63;
    objc_opt_self();
    v65 = swift_dynamicCastObjCClass();
    if (v65)
    {
      v66 = (void *)v65;
      v67 = v61;
      objc_msgSend(v66, sel_drawingBounds);
      objc_msgSend(v24, sel_setBounds_);

      v64 = *(void **)&v24[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
      *(_QWORD *)&v24[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = v66;
    }

  }
  v24[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;

}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance UnknownCanvasElement()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return CRRegister.wrappedValue.getter();
}

void protocol witness for CanvasElement.shared(_:) in conformance UnknownCanvasElement()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 392) = a1;
  *(_QWORD *)(v4 + 400) = a2;
  v5 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(v4 + 408) = v3;
  *(_QWORD *)(v4 + 416) = v5;
  *(_BYTE *)(v4 + 432) = *(_BYTE *)(a3 + 73);
  return swift_task_switch();
}

uint64_t specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  CGContext *v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  CGFloat MaxY;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGContext *v21;
  _OWORD *v22;
  __int128 v23;
  id v24;
  uint64_t inited;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  Class isa;
  id v32;
  _QWORD *v34;
  uint64_t (*v35)(uint64_t);
  CGAffineTransform v36;
  CGRect v37;
  CGRect v38;

  v1 = *(void **)(v0 + 416);
  if (!v1)
    goto LABEL_9;
  v2 = *(_QWORD *)(v0 + 400);
  v3 = v1;
  v4 = objc_msgSend(v3, sel_annotations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v2;
  v7 = specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), v6, v5);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (!v7)
  {
LABEL_8:

LABEL_9:
    v35 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CanvasElement.renderThumbnail(in:)
                                          + async function pointer to specialized CanvasElement.renderThumbnail(in:));
    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v34;
    *v34 = v0;
    v34[1] = specialized UnknownCanvasElement.render<A>(in:id:capsule:options:);
    return v35(*(_QWORD *)(v0 + 392));
  }
  if (!objc_msgSend(v7, sel_hasAppearanceStream))
  {

    v3 = v7;
    goto LABEL_8;
  }
  v8 = *(CGContext **)(v0 + 392);
  CGContextSaveGState(v8);
  objc_msgSend(v3, sel_boundsForBox_, 0);
  x = v37.origin.x;
  y = v37.origin.y;
  width = v37.size.width;
  height = v37.size.height;
  MinY = CGRectGetMinY(v37);
  v38.origin.x = x;
  v38.origin.y = y;
  v38.size.width = width;
  v38.size.height = height;
  MaxY = CGRectGetMaxY(v38);
  *(_QWORD *)(v0 + 136) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 88) = 0x3FF0000000000000;
  *(_OWORD *)(v0 + 112) = xmmword_1DDF325E0;
  *(double *)(v0 + 128) = MinY + MaxY;
  CGAffineTransformConcat(&v36, (CGAffineTransform *)(v0 + 136), (CGAffineTransform *)(v0 + 88));
  v15 = *(_OWORD *)&v36.c;
  v16 = *(_OWORD *)&v36.tx;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)&v36.a;
  *(_OWORD *)(v0 + 248) = v15;
  *(_OWORD *)(v0 + 264) = v16;
  CGContextConcatCTM(v8, (CGAffineTransform *)(v0 + 232));
  objc_msgSend(v3, sel_transformForBox_, 1);
  v17 = *(_OWORD *)&v36.c;
  v18 = *(_OWORD *)&v36.tx;
  *(_OWORD *)(v0 + 280) = *(_OWORD *)&v36.a;
  *(_OWORD *)(v0 + 296) = v17;
  *(_OWORD *)(v0 + 312) = v18;
  CGAffineTransformInvert(&v36, (CGAffineTransform *)(v0 + 280));
  v19 = *(_OWORD *)&v36.c;
  v20 = *(_OWORD *)&v36.tx;
  *(_OWORD *)(v0 + 184) = *(_OWORD *)&v36.a;
  *(_OWORD *)(v0 + 200) = v19;
  *(_OWORD *)(v0 + 216) = v20;
  CGContextConcatCTM(v8, (CGAffineTransform *)(v0 + 184));
  objc_msgSend(v7, sel_drawWithBox_inContext_, 1, v8);
  CGContextRestoreGState(v8);

  if ((*(_BYTE *)(v0 + 432) & 1) != 0)
  {
    v21 = *(CGContext **)(v0 + 392);
    CGContextSetRGBFillColor(v21, 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    v22 = (_OWORD *)swift_allocObject();
    v22[1] = xmmword_1DDF32CF0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v23 = *(_OWORD *)(v0 + 376);
    v22[2] = *(_OWORD *)(v0 + 360);
    v22[3] = v23;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v22);
    swift_bridgeObjectRelease();
    UIGraphicsPushContext(v21);
    v24 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 30.0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
    v26 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    *(_QWORD *)(inited + 40) = v24;
    v27 = v26;
    v28 = v24;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v29 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v30 = (void *)MEMORY[0x1DF0E41AC](0x6E776F6E6B6E55, 0xE700000000000000);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v29, sel_initWithString_attributes_, v30, isa);

    CRRegister.wrappedValue.getter();
    objc_msgSend(v32, sel_drawInRect_, *(double *)(v0 + 328), *(double *)(v0 + 336), *(double *)(v0 + 344), *(double *)(v0 + 352));
    UIGraphicsPopContext();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  CGContext *v1;
  _OWORD *v2;
  __int128 v3;
  id v4;
  uint64_t inited;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  Class isa;
  id v12;

  if (*(_BYTE *)(v0 + 432) == 1)
  {
    v1 = *(CGContext **)(v0 + 392);
    CGContextSetRGBFillColor(v1, 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    v2 = (_OWORD *)swift_allocObject();
    v2[1] = xmmword_1DDF32CF0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v3 = *(_OWORD *)(v0 + 376);
    v2[2] = *(_OWORD *)(v0 + 360);
    v2[3] = v3;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v2);
    swift_bridgeObjectRelease();
    UIGraphicsPushContext(v1);
    v4 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 30.0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
    v6 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    *(_QWORD *)(inited + 40) = v4;
    v7 = v6;
    v8 = v4;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v9 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v10 = (void *)MEMORY[0x1DF0E41AC](0x6E776F6E6B6E55, 0xE700000000000000);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v9, sel_initWithString_attributes_, v10, isa);

    CRRegister.wrappedValue.getter();
    objc_msgSend(v12, sel_drawInRect_, *(double *)(v0 + 328), *(double *)(v0 + 336), *(double *)(v0 + 344), *(double *)(v0 + 352));
    UIGraphicsPopContext();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t base witness table accessor for CRStruct_Base_4 in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

uint64_t base witness table accessor for CRStruct_Base in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_4 : CRDT in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Int> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

uint64_t base witness table accessor for CRMergeable in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

uint64_t base witness table accessor for CRType in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_4<UnknownCanvasElement> and conformance CRStructMergeableDelta_4<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_4<UnknownCanvasElement>, MEMORY[0x1E0D12758]);
}

uint64_t base witness table accessor for CRCodable in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

uint64_t sub_1DDE36B84()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE36BC4()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE36C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_8Tm_0(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDE36C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_8Tm_0(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_8Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for UnknownCanvasElement();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a4(v5);
}

uint64_t sub_1DDE36C8C()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for UnknownCanvasElement(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UnknownCanvasElement(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownCanvasElement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE372D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[8]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for UnknownCanvasElement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE373E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

void type metadata completion function for UnknownCanvasElement()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<CRAsset?>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Int>();
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CRRegister<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<Int>)
  {
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Int>);
  }
}

void __swiftcall CanvasElementContainerView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  void *v3;
  Class isa;
  double y;
  double x;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v11;
  void *v12;
  id v13;
  id v14;
  CGPoint v15;
  CGRect v16;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v7 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for UIView();
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    while (__OFSUB__(v9--, 1))
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v9)
        goto LABEL_19;
    }
    if ((v8 & 0xC000000000000001) != 0)
    {
      v11 = (id)MEMORY[0x1DF0E4D64](v9, v8);
      goto LABEL_12;
    }
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_16;
    if (v9 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_17;
    v11 = *(id *)(v8 + 32 + 8 * v9);
LABEL_12:
    v12 = v11;
    if ((objc_msgSend(v11, sel_isHidden) & 1) != 0)
    {

    }
    else
    {
      objc_msgSend(v12, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      v13 = objc_msgSend(v12, sel_hitTest_withEvent_, isa);

      if (v13)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
LABEL_19:
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_bounds);
  v15.x = x;
  v15.y = y;
  if (CGRectContainsPoint(v16, v15))
    v14 = v3;
}

id CanvasElementContainerView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementContainerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementContainerView()
{
  return objc_opt_self();
}

PaperKit::CanvasContentMode_optional __swiftcall CanvasContentMode.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (PaperKit::CanvasContentMode_optional)rawValue;
}

uint64_t CanvasContentMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t lazy protocol witness table accessor for type CanvasContentMode and conformance CanvasContentMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasContentMode and conformance CanvasContentMode;
  if (!lazy protocol witness table cache variable for type CanvasContentMode and conformance CanvasContentMode)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasContentMode, &type metadata for CanvasContentMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasContentMode and conformance CanvasContentMode);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CanvasContentMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDE379DC + 4 * byte_1DDF44865[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDE37A10 + 4 * asc_1DDF44860[v4]))();
}

uint64_t sub_1DDE37A10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE37A18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDE37A20);
  return result;
}

uint64_t sub_1DDE37A2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDE37A34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDE37A38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE37A40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasContentMode()
{
  return &type metadata for CanvasContentMode;
}

Swift::Void __swiftcall FormPlusButtonView.setConstraintsBasedOn(_:)(UIView *a1)
{
  void *v1;
  void *v2;
  void *v4;
  uint64_t v5;
  id v6;
  NSLayoutXAxisAnchor *v7;
  id v8;
  id v9;
  UILayoutGuide *v10;
  NSLayoutYAxisAnchor *v11;
  id v12;
  Class isa;

  v2 = v1;
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v4 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF329E0;
  v6 = objc_msgSend(v2, sel_trailingAnchor);
  v7 = -[UIView trailingAnchor](a1, sel_trailingAnchor);
  v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v7, -25.0);

  *(_QWORD *)(v5 + 32) = v8;
  v9 = objc_msgSend(v2, sel_bottomAnchor);
  v10 = -[UIView safeAreaLayoutGuide](a1, sel_safeAreaLayoutGuide);
  v11 = -[UILayoutGuide bottomAnchor](v10, sel_bottomAnchor);

  v12 = objc_msgSend(v9, sel_constraintEqualToAnchor_constant_, v11, -25.0);
  *(_QWORD *)(v5 + 40) = v12;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, isa);

}

void FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)()
{
  void *v0;
  void *v1;
  Class isa;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  Class v17;
  id v18;
  UIMenuElementSize preferredElementSize;
  UIImage_optional v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;

  v1 = v0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  isa = paperKitBundle.super.isa;
  v21._countAndFlagsBits = 0xD000000000000025;
  v21._object = (void *)0x80000001DDF599C0;
  v3._object = (void *)0x80000001DDF599A0;
  v3._countAndFlagsBits = 0xD000000000000011;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v21);
  swift_retain();
  v6 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v22._countAndFlagsBits = 0xD000000000000026;
  v22._object = (void *)0x80000001DDF599F0;
  v7._countAndFlagsBits = 0x6E67695320646441;
  v7._object = (void *)0xED00006572757461;
  v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v8.value._object = (void *)0xEB00000000656C62;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)isa, v9, v22);
  swift_retain();
  v10 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v11._countAndFlagsBits = 0xD000000000000014;
  v23._countAndFlagsBits = 0xD000000000000039;
  v23._object = (void *)0x80000001DDF59A40;
  v11._object = (void *)0x80000001DDF59A20;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)isa, v13, v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1DDF329E0;
  *(_QWORD *)(v15 + 32) = v6;
  *(_QWORD *)(v15 + 40) = v10;
  preferredElementSize = v15;
  specialized Array._endMutation()();
  v16 = v6;
  v18 = v10;
  v20.value.super.isa = 0;
  v20.is_nil = 0;
  v17 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, (Swift::String_optional)0, v20, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0).super.super.isa;
  objc_msgSend(v1, sel_setMenu_, v17);

  objc_msgSend(v1, sel_setShowsMenuAsPrimaryAction_, 1);
}

objc_class *FormPlusButtonView.init(frame:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  char *v30;
  objc_class *v31;
  objc_class *ObjectType;
  char *v34;
  objc_super v35;

  ObjectType = (objc_class *)swift_getObjectType();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  MEMORY[0x1E0C80A78](v9, v10);
  v34 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UIButton.Configuration.CornerStyle();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&ObjectType - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UIButton.Configuration.Size();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&ObjectType - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UIButton.Configuration();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&ObjectType - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35.receiver = v4;
  v35.super_class = ObjectType;
  ObjectType = (objc_class *)objc_msgSendSuper2(&v35, sel_initWithFrame_, a1, a2, a3, a4);
  static UIButton.Configuration.filled()();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, *MEMORY[0x1E0DC3188], v17);
  UIButton.Configuration.buttonSize.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E0DC3060], v12);
  UIButton.Configuration.cornerStyle.setter();
  v27 = (void *)MEMORY[0x1DF0E41AC](1937075312, 0xE400000000000000);
  v28 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v27);

  UIButton.Configuration.image.setter();
  v29 = objc_msgSend((id)objc_opt_self(), sel_configurationWithScale_, 2);
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  v30 = v34;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v34, v26, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
  v31 = ObjectType;
  UIButton.configuration.setter();

  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  return v31;
}

uint64_t type metadata accessor for FormPlusButtonView()
{
  return objc_opt_self();
}

uint64_t specialized CanvasElementResizeView.dragInteraction(_:previewForLifting:session:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  id v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  UIEvent_optional v12;
  UIView_optional *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  double x;
  double y;
  double width;
  double height;
  double MidX;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  UIEvent_optional v41;
  UIView_optional *v42;
  Class isa;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  char v52;
  CGRect v53;
  CGRect v54;

  v5 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (!v5)
    return 0;
  v6 = (_QWORD *)v5;
  v7 = (unint64_t *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  if ((v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation + 16] & 1) != 0)
    goto LABEL_3;
  v11 = *v7;
  v10 = v7[1];
  if ((objc_msgSend(v2, sel_isHidden) & 1) == 0)
  {
    v12.value.super.isa = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v13, (CGPoint)__PAIR128__(v10, v11), v12);
    if (v41.value.super.isa)
    {
      isa = v41.value.super.isa;

      return 0;
    }
    ResizeView.hitTestChrome(_:with:)(v42, (CGPoint)__PAIR128__(v10, v11), v41);
    v45 = v44;

    if (v45)
    {
LABEL_3:

      return 0;
    }
  }
  v14 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v15 = v2;
  v16 = swift_bridgeObjectRetain();
  v17 = specialized Sequence.compactMap<A>(_:)(v16, (uint64_t)v15);
  swift_bridgeObjectRelease();

  if ((v17 & 0x8000000000000000) != 0 || (v17 & 0x4000000000000000) != 0)
  {
    v18 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v17 & 0xFFFFFFFFFFFFFF8;
  }
  v19 = v18 < 0 || (v18 & 0x4000000000000000) != 0;
  if (v19)
  {
    swift_bridgeObjectRetain();
    v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v50 != 1)
    {
LABEL_16:
      v20 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView];
      objc_msgSend(v20, sel_bounds);
      objc_msgSend(v6, sel_convertRect_fromCoordinateSpace_, v20);
      v51[0] = v21;
      v51[1] = v22;
      v51[2] = v23;
      v51[3] = v24;
      v52 = 0;
      v25 = (*(uint64_t (**)(uint64_t, _QWORD *))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x660))(v18, v51);
      swift_release();
      v26 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage;
      v27 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage];
      *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage] = v25;

      v28 = *(void **)&v15[v26];
      if (v28)
      {
        v29 = v28;
        objc_msgSend(v20, sel_bounds);
        objc_msgSend(v15, sel_convertRect_fromCoordinateSpace_, v20);
        x = v53.origin.x;
        y = v53.origin.y;
        width = v53.size.width;
        height = v53.size.height;
        MidX = CGRectGetMidX(v53);
        v54.origin.x = x;
        v54.origin.y = y;
        v54.size.width = width;
        v54.size.height = height;
        v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3770]), sel_initWithContainer_center_, v15, MidX, CGRectGetMidY(v54));
        v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3768]), sel_init);
        v37 = (void *)objc_opt_self();
        v38 = v36;
        v39 = objc_msgSend(v37, sel_clearColor);
        objc_msgSend(v38, sel_setBackgroundColor_, v39);

        v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v29);
        objc_msgSend(v40, sel_setFrame_, x, y, width, height);
        objc_msgSend(v40, sel__setContinuousCornerRadius_, 13.0);
        v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_parameters_target_, v40, v38, v35);

        return (uint64_t)v8;
      }
      goto LABEL_3;
    }
  }
  else if (*(_QWORD *)(v18 + 16) != 1)
  {
    goto LABEL_16;
  }
  if (*(_QWORD *)(*((_QWORD *)v14 + 1) + 16))
    goto LABEL_16;
  if (v19)
  {
    swift_bridgeObjectRetain();
    v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    v46 = *(_QWORD *)(v18 + 16);
  }
  if (v46)
  {
    if ((v18 & 0xC000000000000001) != 0)
    {
      v47 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v18);
      goto LABEL_29;
    }
    if (*(_QWORD *)(v18 + 16))
    {
      v47 = *(id *)(v18 + 32);
LABEL_29:
      v48 = v47;
      swift_release();
      v49 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v48) + 0x338))(a1, a2);

      return v49;
    }
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized CanvasElementResizeView.dragInteraction(_:itemsForBeginning:)(void *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  UIEvent_optional v23;
  UIView_optional *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  UIEvent_optional v28;
  UIView_optional *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  char v38[48];
  _QWORD v39[3];
  char v40;
  uint64_t v41;

  v2 = v1;
  objc_msgSend(a1, sel_locationInView_, v1);
  v4 = &v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  *(_QWORD *)v4 = v5;
  *((_QWORD *)v4 + 1) = v6;
  v4[16] = 0;
  v7 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v7)
  {
    v8 = v7;
    v9 = &v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    v11 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    v12 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    v13 = v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x628);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = (void *)v14(v10, v11, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
      v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3758]), sel_initWithItemProvider_, v15);
      v17 = *(_QWORD *)v9;
      v18 = *((_QWORD *)v9 + 1);
      v37 = *((_QWORD *)v9 + 2);
      v36 = v9[24];
      if ((v4[16] & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v19 = 0;
LABEL_14:
        v39[0] = v17;
        v39[1] = v18;
        v39[2] = v37;
        v40 = v36;
        v41 = v19;
        swift_unknownObjectWeakInit();
        outlined init with copy of CanvasDragInformation((uint64_t)v39, (uint64_t)v38);
        v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        outlined destroy of CanvasDragInformation((uint64_t)v39);
        objc_msgSend(v16, sel_setLocalObject_, v32);
        swift_unknownObjectRelease();
        objc_msgSend(a1, sel_setLocalContext_, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_1DDF35440;
        *(_QWORD *)(v33 + 32) = v16;
        v39[0] = v33;
        specialized Array._endMutation()();
        v20 = v39[0];

        return v20;
      }
      v22 = *(_QWORD *)v4;
      v21 = *((_QWORD *)v4 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((objc_msgSend(v2, sel_isHidden) & 1) == 0)
      {
        v23.value.super.isa = 0;
        CanvasElementResizeView.hitTestMiniMenu(_:with:)(v24, (CGPoint)__PAIR128__(v21, v22), v23);
        if (v28.value.super.isa)
        {

          v19 = 0;
          goto LABEL_14;
        }
        ResizeView.hitTestChrome(_:with:)(v29, (CGPoint)__PAIR128__(v21, v22), v28);
        v31 = v30;

        v19 = 0;
        if (v31)
          goto LABEL_14;
      }
      v25 = v2;
      v26 = swift_bridgeObjectRetain();
      v27 = specialized Sequence.compactMap<A>(_:)(v26, (uint64_t)v25);
      swift_bridgeObjectRelease();

      if ((v27 & 0x8000000000000000) != 0 || (v27 & 0x4000000000000000) != 0)
      {
        v35 = specialized _copyCollectionToContiguousArray<A>(_:)(v27);
        swift_bridgeObjectRelease();
        v19 = (uint64_t)v35;
      }
      else
      {
        v19 = v27 & 0xFFFFFFFFFFFFFF8;
      }
      goto LABEL_14;
    }

  }
  return MEMORY[0x1E0DEE9D8];
}

void specialized CanvasElementResizeView.dragInteraction(_:sessionWillBegin:)()
{
  char *v0;
  void *v1;
  char *v2;
  double *v3;
  unint64_t v4;
  unint64_t v5;
  UIEvent_optional v6;
  UIView_optional *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  UIEvent_optional v22;
  UIView_optional *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t i;
  id v31;
  void *v32;
  void *v33;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  v3 = (double *)&unk_1DDF31000;
  if ((v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation + 16] & 1) == 0)
  {
    v5 = *(_QWORD *)v2;
    v4 = *((_QWORD *)v2 + 1);
    if ((objc_msgSend(v0, sel_isHidden) & 1) != 0)
      goto LABEL_3;
    v6.value.super.isa = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v7, (CGPoint)__PAIR128__(v4, v5), v6);
    if (v22.value.super.isa)
    {

      goto LABEL_28;
    }
    ResizeView.hitTestChrome(_:with:)(v23, (CGPoint)__PAIR128__(v4, v5), v22);
    v25 = v24;

    if (!v25)
    {
LABEL_3:
      v8 = v1;
      v9 = swift_bridgeObjectRetain();
      v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
      swift_bridgeObjectRelease();

      if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0)
        goto LABEL_25;
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_6:
      if ((v11 & 0x4000000000000000) != 0)
      {
        while (1)
        {
          swift_bridgeObjectRetain();
          v12 = _CocoaArrayWrapper.endIndex.getter();
          if (!v12)
            break;
LABEL_8:
          v33 = v1;
          v13 = 4;
          v14 = v3[179];
          v15 = 0;
          if ((v11 & 0xC000000000000001) != 0)
          {
LABEL_9:
            v16 = (id)MEMORY[0x1DF0E4D64](v15, v11);
            goto LABEL_11;
          }
          while (1)
          {
            v16 = *(id *)(v11 + 8 * v13);
LABEL_11:
            v10 = (unint64_t)v16;
            v17 = v15 + 1;
            if (__OFADD__(v15, 1))
              break;
            v18 = objc_msgSend(v16, sel_setAlpha_, v14);
            v19 = OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging;
            *(_BYTE *)(v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging) = 1;
            v20 = (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v10) + 0x88))(v18);
            if (v20)
            {
              v3 = (double *)v20;
              v1 = *(void **)(v20 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
              v21 = v1;

              if (!v1)
                goto LABEL_41;
              v21[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *(_BYTE *)(v10 + v19);
              objc_msgSend(v21, sel_setHidden_);

              if (v17 == v12)
              {
LABEL_21:
                swift_release_n();
                v1 = v33;
                v3 = (double *)&unk_1DDF31000;
                goto LABEL_28;
              }
            }
            else
            {

              if (v17 == v12)
                goto LABEL_21;
            }
            v15 = ++v13 - 4;
            if ((v11 & 0xC000000000000001) != 0)
              goto LABEL_9;
          }
          __break(1u);
LABEL_25:
          v11 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v10);
          swift_bridgeObjectRelease();
          if ((v11 & 0x8000000000000000) == 0)
            goto LABEL_6;
        }
      }
      else
      {
        v12 = *(_QWORD *)(v11 + 16);
        swift_bridgeObjectRetain();
        if (v12)
          goto LABEL_8;
      }
      swift_release_n();
    }
  }
LABEL_28:
  objc_msgSend(v1, sel_setAlpha_, v3[179], v33);
  *((_BYTE *)v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement) = 1;
  objc_msgSend(v1, sel_setHidden_, 1);
  v26 = objc_msgSend(v1, sel_gestureRecognizers);
  if (!v26)
    return;
  v27 = v26;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v28 >> 62))
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v29)
      goto LABEL_31;
LABEL_38:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  v29 = _CocoaArrayWrapper.endIndex.getter();
  if (!v29)
    goto LABEL_38;
LABEL_31:
  if (v29 >= 1)
  {
    for (i = 0; i != v29; ++i)
    {
      if ((v28 & 0xC000000000000001) != 0)
        v31 = (id)MEMORY[0x1DF0E4D64](i, v28);
      else
        v31 = *(id *)(v28 + 8 * i + 32);
      v32 = v31;
      objc_msgSend(v31, sel_setEnabled_, 0);

    }
    goto LABEL_38;
  }
  __break(1u);
LABEL_41:
  __break(1u);
}

void specialized CanvasElementResizeView.dragInteraction(_:previewForCancelling:withDefault:)(void *a1)
{
  _BYTE *v1;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  UIEvent_optional v6;
  UIView_optional *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  UIEvent_optional v24;
  UIView_optional *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double MidX;
  id v36;
  id v37;
  CGRect v38;
  CGRect v39;

  v3 = (unint64_t *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  if ((v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation + 16] & 1) != 0)
    goto LABEL_24;
  v5 = *v3;
  v4 = v3[1];
  if ((objc_msgSend(v1, sel_isHidden) & 1) == 0)
  {
    v6.value.super.isa = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v7, (CGPoint)__PAIR128__(v4, v5), v6);
    if (v24.value.super.isa)
    {

    }
    else
    {
      ResizeView.hitTestChrome(_:with:)(v25, (CGPoint)__PAIR128__(v4, v5), v24);
      v27 = v26;

      if (!v27)
        goto LABEL_3;
    }
LABEL_24:
    a1;
    return;
  }
LABEL_3:
  v8 = v1;
  v9 = swift_bridgeObjectRetain();
  v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
  swift_bridgeObjectRelease();

  if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0)
  {
    v11 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v10);
    swift_bridgeObjectRelease();
    if (v11 < 0)
      goto LABEL_16;
  }
  else
  {
    v11 = v10 & 0xFFFFFFFFFFFFFF8;
  }
  if ((v11 & 0x4000000000000000) == 0)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      if (v12 >= 2)
        goto LABEL_9;
      goto LABEL_18;
    }
    goto LABEL_23;
  }
LABEL_16:
  swift_retain();
  v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v28)
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v29 >= 2)
  {
LABEL_9:
    v13 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage];
    if (v13)
    {
      v14 = v13;
      swift_release();
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v14);
      objc_msgSend(v8, sel_frame);
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v23 = v22;

LABEL_22:
      v38.origin.x = v17;
      v38.origin.y = v19;
      v38.size.width = v21;
      v38.size.height = v23;
      MidX = CGRectGetMidX(v38);
      v39.origin.x = v17;
      v39.origin.y = v19;
      v39.size.width = v21;
      v39.size.height = v23;
      v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3770]), sel_initWithContainer_center_, v8, MidX, CGRectGetMidY(v39));
      v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B78]), sel_init);
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_parameters_target_, v15, v37, v36);

      return;
    }
  }
LABEL_18:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v30 = (id)MEMORY[0x1DF0E4D64](0, v11);
    goto LABEL_21;
  }
  if (*(_QWORD *)(v11 + 16))
  {
    v30 = *(id *)(v11 + 32);
LABEL_21:
    v15 = v30;
    swift_release();
    objc_msgSend(v15, sel_frame);
    v17 = v31;
    v19 = v32;
    v21 = v33;
    v23 = v34;
    goto LABEL_22;
  }
  __break(1u);
}

void specialized CanvasElementResizeView.dragInteraction(_:session:didEndWith:)(void *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[3];
  unsigned __int8 v46;
  unint64_t v47;

  v3 = v2;
  v6 = MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v6)
    return;
  v7 = (_QWORD *)v6;
  v8 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
    goto LABEL_29;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    v40 = 0u;
    v41 = 0u;
LABEL_31:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
LABEL_32:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v42, (uint64_t *)&demangling cache variable for type metadata for CanvasDragInformation?);
    return;
  }
  while ((v9 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x1DF0E4D64](0, v9);
LABEL_7:
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v12, sel_localObject);

    if (v13)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v39, 0, sizeof(v39));
    }
    outlined init with take of Any?((uint64_t)v39, (uint64_t)&v40);
    if (!*((_QWORD *)&v41 + 1))
      goto LABEL_31;
    if ((swift_dynamicCast() & 1) == 0)
    {
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      goto LABEL_32;
    }
    if (!(_QWORD)v42)
      goto LABEL_32;
    outlined init with take of CanvasDragInformation(&v42, (uint64_t)v45);
    v10 = v47;
    if (!v47)
      goto LABEL_38;
    v37 = v3;
    v38 = v7;
    v36 = a2;
    if (v47 >> 62)
      goto LABEL_36;
    v14 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v14)
      goto LABEL_37;
LABEL_16:
    v3 = 4;
    v15 = 0;
    if ((v10 & 0xC000000000000001) != 0)
    {
LABEL_17:
      v16 = (id *)MEMORY[0x1DF0E4D64](v15, v10);
      goto LABEL_19;
    }
    while (1)
    {
      v16 = (id *)*(id *)(v10 + 8 * v3);
LABEL_19:
      v9 = (unint64_t)v16;
      v17 = v15 + 1;
      if (__OFADD__(v15, 1))
        break;
      v18 = objc_msgSend(v16, sel_setAlpha_, 1.0);
      v7 = (_QWORD *)OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging;
      *(_BYTE *)(v9 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging) = 0;
      v19 = (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x88))(v18);
      if (v19)
      {
        v20 = (void *)v19;
        a2 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        v21 = (id)a2;

        if (!a2)
          goto LABEL_53;
        v21[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *((_BYTE *)v7 + v9);
        objc_msgSend(v21, sel_setHidden_);

        if (v17 == v14)
          goto LABEL_37;
      }
      else
      {

        if (v17 == v14)
          goto LABEL_37;
      }
      v15 = ++v3 - 4;
      if ((v10 & 0xC000000000000001) != 0)
        goto LABEL_17;
    }
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10)
      goto LABEL_30;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v9 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_36:
  swift_bridgeObjectRetain_n();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  if (v14)
    goto LABEL_16;
LABEL_37:
  swift_bridgeObjectRelease_n();
  v3 = v37;
  v7 = v38;
  a2 = v36;
LABEL_38:
  if ((a2 | 2) != 2)
  {
    v22 = v45[0];
    v23 = v45[1];
    v24 = v45[2];
    v25 = v46;
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x498);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v22, v23, v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  objc_msgSend((id)v3, sel_setAlpha_, 1.0);
  v27 = objc_msgSend((id)v3, sel_gestureRecognizers);
  if (!v27)
    goto LABEL_51;
  v28 = v27;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
    if (!v30)
      goto LABEL_50;
LABEL_43:
    if (v30 >= 1)
    {
      for (i = 0; i != v30; ++i)
      {
        if ((v29 & 0xC000000000000001) != 0)
          v32 = (id)MEMORY[0x1DF0E4D64](i, v29);
        else
          v32 = *(id *)(v29 + 8 * i + 32);
        v33 = v32;
        objc_msgSend(v32, sel_setEnabled_, 1);

      }
      goto LABEL_50;
    }
    __break(1u);
LABEL_53:
    __break(1u);
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v30)
      goto LABEL_43;
LABEL_50:
    swift_bridgeObjectRelease_n();
LABEL_51:
    *(_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement) = 0;
    objc_msgSend((id)v3, sel_setHidden_, 0);
    v34 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation;
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 1;
    v35 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage) = 0;

    outlined destroy of CanvasDragInformation((uint64_t)v45);
  }
}

uint64_t outlined init with take of CanvasDragInformation(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  *(_OWORD *)(a2 + 9) = *(__int128 *)((char *)a1 + 9);
  *(_OWORD *)a2 = v3;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  swift_unknownObjectWeakTakeInit();
  return a2;
}

uint64_t outlined destroy of CanvasDragInformation(uint64_t a1)
{
  destroy for CanvasDragInformation();
  return a1;
}

uint64_t outlined init with copy of CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CanvasDragInformation(a2, a1);
  return a2;
}

uint64_t destroy for CanvasDragInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasDragInformation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasDragInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasDragInformation()
{
  return &type metadata for CanvasDragInformation;
}

uint64_t dispatch thunk of PaperDocumentOverlayViewProvider.paperDocumentView(_:overlayViewFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PaperDocumentOverlayViewProvider.paperDocumentView(_:willDisplayOverlayView:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PaperDocumentOverlayViewProvider.paperDocumentView(_:willEndDisplayingOverlayView:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized _finalizeUninitializedArray<A>(_:)()
{
  specialized Array._endMutation()();
}

id *specialized Zip2Sequence.Iterator.next()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id *result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PKDrawing();
  v8 = *(_QWORD *)(v7 - 8);
  v10.n128_f64[0] = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 56) == 1)
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
    return (id *)(*(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
    goto LABEL_15;
  v15 = *(_QWORD *)v1;
  v16 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16 == v17)
      goto LABEL_14;
  }
  else
  {
    v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16 == v17)
    {
LABEL_14:
      *(_BYTE *)(v1 + 32) = 1;
LABEL_15:
      *(_BYTE *)(v1 + 56) = 1;
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
      return (id *)(*(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
    }
  }
  if ((v15 & 0xC000000000000001) == 0)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v16 < *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      result = (id *)*(id *)(v15 + 8 * v16 + 32);
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_21;
  }
  result = (id *)MEMORY[0x1DF0E4D64](v16, v15, v10);
LABEL_10:
  v15 = (unint64_t)result;
  if (__OFADD__(v16, 1))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    v29 = v8;
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    result = (id *)swift_bridgeObjectRelease();
    v20 = v19;
    v8 = v29;
    if (v17 == v20)
      goto LABEL_13;
    goto LABEL_23;
  }
  *(_QWORD *)(v1 + 8) = v16 + 1;
  v16 = *(_QWORD *)(v1 + 16);
  v17 = *(_QWORD *)(v1 + 24);
  if (v16 >> 62)
    goto LABEL_22;
  if (v17 == *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_13:

    goto LABEL_14;
  }
LABEL_23:
  if ((v16 & 0xC000000000000001) == 0)
  {
    if ((v17 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v17 < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      result = (id *)*(id *)(v16 + 8 * v17 + 32);
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_37;
  }
  result = (id *)MEMORY[0x1DF0E4D64](v17, v16);
LABEL_27:
  v21 = result;
  if (__OFADD__(v17, 1))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v17 + 1;
  v22 = *(_QWORD *)(v1 + 40);
  v23 = *(_QWORD *)(v1 + 48);
  v24 = *(_QWORD *)(v22 + 16);
  if (v23 == v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
LABEL_32:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PKDrawing?);
    goto LABEL_15;
  }
  if (v23 >= v24)
    goto LABEL_38;
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, v22+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v23, v7);
  *(_QWORD *)(v1 + 48) = v23 + 1;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    goto LABEL_32;
  v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v25(v12, v6, v7);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
  v27 = (char *)a1 + *(int *)(v26 + 48);
  *a1 = v15;
  a1[1] = (unint64_t)v21;
  v25(v27, v12, v7);
  return (id *)(*(uint64_t (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a1, 0, 1, v26);
}

id HandwritingReflowView.isInReflowMode.didset(id result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v2 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode;
  if (v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] != (result & 1))
  {
    v3 = v1;
    v4 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v4)
    {
      v5 = v4;
      v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x320))();

      if (v6)
      {
        objc_msgSend(v6, sel_setSelectionHidden_, v3[v2]);

      }
    }
    v7 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_layer);
    if (v3[v2] == 1)
    {
      v8 = objc_msgSend(v3, sel_window);
      v9 = v8;
      if (!v8 || (v10 = objc_msgSend(v8, sel_tintColor)) == 0)
      {
        if (one-time initialization token for resizeHandleColor != -1)
          swift_once();
        v10 = (id)static UIConstants.resizeHandleColor;
      }

      v11 = objc_msgSend(v10, sel_CGColor);
    }
    else
    {
      if (one-time initialization token for handwritingReflowNonActiveBorderColor != -1)
        swift_once();
      v11 = objc_msgSend((id)static UIConstants.handwritingReflowNonActiveBorderColor, sel_CGColor);
    }
    objc_msgSend(v7, sel_setBorderColor_, v11);

    return objc_msgSend(v3, sel_setNeedsLayout);
  }
  return result;
}

Swift::Void __swiftcall HandwritingReflowView.updateForNewSelection()()
{
  unsigned __int8 *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(v0, sel_setNeedsLayout);
  v1 = (void *)v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode];
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] = 0;
  HandwritingReflowView.isInReflowMode.didset(v1);
  v2 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox;
  v3 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
  if (v3)
  {
    v4 = (void *)MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit14ReflowTextView_wrapperView]);
    v5 = v3;
    objc_msgSend(v4, sel_removeFromSuperview);

    objc_msgSend(v5, sel_removeFromSuperview);
    v6 = *(void **)&v0[v2];
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)&v0[v2] = 0;

  v7 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v9)
    {
      __break(1u);
      return;
    }
    v10 = (uint64_t *)(v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    if (*(_QWORD *)(v11 + 16))
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 1;
      HandwritingReflowView.startReflowForSelection(completion:)(0, 0);
      return;
    }
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9E8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9E8] + 16))
      goto LABEL_7;
  }
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
    goto LABEL_10;
}

char *HandwritingReflowView.init(frame:canvas:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  id v19;
  id v20;
  _BYTE *v21;
  objc_class *v22;
  _BYTE *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  char *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v49;
  objc_super v50;
  objc_super v51;
  objc_super v52;
  objc_super v53;
  objc_super v54;
  objc_super v55;

  swift_getObjectType();
  v10 = &v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v10[48] = 1;
  v11 = &v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  v11[48] = 1;
  v12 = &v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds];
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = 0;
  v13 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret;
  type metadata accessor for ReflowCursor();
  v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v15 = v5;
  *(_QWORD *)&v5[v13] = objc_msgSend(v14, sel_init);
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 0;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction] = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes] = 0;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] = 1;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 1;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing] = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask] = 0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1DDF39360;
  v17 = (objc_class *)type metadata accessor for CanvasElementResizeHandle();
  v18 = objc_allocWithZone(v17);
  *(_QWORD *)(v16 + 32) = CanvasElementResizeHandle.init(_:category:enabled:)(3, 0, 1);
  v19 = objc_allocWithZone(v17);
  *(_QWORD *)(v16 + 40) = CanvasElementResizeHandle.init(_:category:enabled:)(4, 1, 1);
  v20 = objc_allocWithZone(v17);
  *(_QWORD *)(v16 + 48) = CanvasElementResizeHandle.init(_:category:enabled:)(7, 0, 1);
  v21 = objc_allocWithZone(v17);
  v21[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = 3;
  v21[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = 0;
  v21[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = 0;
  v22 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
  v23 = objc_allocWithZone(v22);
  *(_QWORD *)&v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v55.receiver = v23;
  v55.super_class = v22;
  v24 = v21;
  v25 = objc_msgSendSuper2(&v55, sel_initWithTarget_action_, 0, 0);
  v25[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v24[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v25;

  if (one-time initialization token for resizeHandleSize != -1)
    swift_once();
  v54.receiver = v24;
  v54.super_class = v17;
  *(_QWORD *)(v16 + 56) = objc_msgSendSuper2(&v54, sel_initWithFrame_, 0.0, 0.0, *(double *)&static UIConstants.resizeHandleSize, *(double *)&static UIConstants.resizeHandleSize, a1);
  v26 = objc_allocWithZone(v17);
  v26[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = 4;
  v26[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = 1;
  v26[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = 0;
  v27 = objc_allocWithZone(v22);
  *(_QWORD *)&v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(_QWORD *)&v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v53.receiver = v27;
  v53.super_class = v22;
  v28 = v26;
  v29 = objc_msgSendSuper2(&v53, sel_initWithTarget_action_, 0, 0);
  v29[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v28[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v29;

  v52.receiver = v28;
  v52.super_class = v17;
  *(_QWORD *)(v16 + 64) = objc_msgSendSuper2(&v52, sel_initWithFrame_, 0.0, 0.0, *(double *)&static UIConstants.resizeHandleSize, *(double *)&static UIConstants.resizeHandleSize);
  v30 = objc_allocWithZone(v17);
  v30[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = 7;
  v30[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = 0;
  v30[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = 0;
  v31 = objc_allocWithZone(v22);
  *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v51.receiver = v31;
  v51.super_class = v22;
  v32 = v30;
  v33 = objc_msgSendSuper2(&v51, sel_initWithTarget_action_, 0, 0);
  v33[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v33;

  v50.receiver = v32;
  v50.super_class = v17;
  *(_QWORD *)(v16 + 72) = objc_msgSendSuper2(&v50, sel_initWithFrame_, 0.0, 0.0, *(double *)&static UIConstants.resizeHandleSize, *(double *)&static UIConstants.resizeHandleSize);
  specialized Array._endMutation()();
  v34 = v49;
  ResizeView.init(frame:canvas:resizeHandles:)(v34, v16, a2, a3, a4, a5);
  v36 = v35;
  v37 = objc_allocWithZone(MEMORY[0x1E0DC37A0]);
  v38 = v36;
  v39 = objc_msgSend(v37, sel_initWithDelegate_, v38);
  objc_msgSend(v38, sel_addInteraction_, v39);
  v40 = *(void **)&v38[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction];
  *(_QWORD *)&v38[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction] = v39;
  v41 = v39;

  v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v38, &sel_tap);
  objc_msgSend(v38, sel_addGestureRecognizer_, v42);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1DDF32CF0;
  v44 = type metadata accessor for UITraitUserInterfaceStyle();
  v45 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v43 + 32) = v44;
  *(_QWORD *)(v43 + 40) = v45;
  v46 = v38;
  UIView.registerForTraitChanges<A>(_:handler:)();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v46;
}

Swift::Void __swiftcall HandwritingReflowView.didMoveToWindow()()
{
  char *v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  id v11;
  objc_super v12;

  v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for HandwritingReflowView();
  objc_msgSendSuper2(&v12, sel_didMoveToWindow);
  v2 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  v3 = (_QWORD *)MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v3)
  {
    v5 = v3;
    v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x320))();

    if (v6)
    {
      v7 = objc_msgSend(v6, sel_pencilLongPressGestureRecognizer);

      objc_msgSend(v7, sel_addTarget_action_, v1, sel_longPress_);
    }
  }
  v8 = (_QWORD *)MEMORY[0x1DF0E666C](v2);
  if (v8)
  {
    v9 = v8;
    v10 = (void *)(*(uint64_t (**)(void))((*v4 & *v8) + 0x320))();

    if (v10)
    {
      v11 = objc_msgSend(v10, sel_simultaneousDrawingGestureRecognizer);

      objc_msgSend(v11, sel_addTarget_action_, v1, sel_drawingContinuation_);
    }
  }
}

uint64_t HandwritingReflowView.canDrag.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode);
}

uint64_t closure #1 in HandwritingReflowView.endOfDrawing()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing) != 1)
    return CheckedContinuation.resume(returning:)();
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, a1, v4, v7);
  v10 = (unint64_t *)(a2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations);
  swift_beginAccess();
  v11 = *v10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
    *v10 = v11;
  }
  v14 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v11);
    *v10 = v11;
  }
  *(_QWORD *)(v11 + 16) = v14 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v14, v9, v4);
  return swift_endAccess();
}

Swift::Void __swiftcall HandwritingReflowView.adjustCaret(_:)(CGPoint a1)
{
  char *v1;
  char *v2;
  char *v3;
  double y;
  double x;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  char *v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(_OWORD **, char);
  uint64_t v21;
  void (*v22)(_OWORD **, char);
  double v23;
  double v24;
  double v25;
  double height;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  _QWORD v31[4];
  CGRect v32;
  CGRect v33;

  v2 = *(char **)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
  if (v2)
  {
    v3 = v1;
    y = a1.y;
    x = a1.x;
    v6 = *(double **)&v2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    v7 = *((_QWORD *)v6 + 20);
    if (v7)
    {
      v9 = v6[22];
      v8 = v6[23];
      v10 = v2;
      swift_retain();
      objc_msgSend(v3, sel_convertPoint_fromCoordinateSpace_, v10, v9, v8);
      v13 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace;
      if ((v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] & 1) == 0)
      {
        v14 = sqrt((x - v11) * (x - v11) + (y - v12) * (y - v12));
        if (one-time initialization token for handwritingReflowInsertSpaceMinDistanceForAdjustment != -1)
        {
          v29 = v11;
          v28 = v12;
          swift_once();
          v12 = v28;
          v11 = v29;
        }
        if (*(double *)&static UIConstants.handwritingReflowInsertSpaceMinDistanceForAdjustment >= v14)
        {
          if (v3[v13] != 1)
          {
            x = (v11 + x) * 0.5;
            v27 = (v12 + y) * 0.5;
            swift_retain();
            objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v3, x, v27, *(_QWORD *)&v29);
LABEL_16:
            ReflowLayoutManager.caretRect(for:point:)(v7, v23, v24);
            objc_msgSend(v10, sel_convertRect_toCoordinateSpace_, v3);
            v33 = CGRectInset(v32, 0.0, -2.0);
            v25 = v33.origin.y;
            height = v33.size.height;
            swift_release();
            objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret], sel_setFrame_, x + -2.0, v25, 4.0, height);

            swift_release();
            return;
          }
        }
        else
        {
          v3[v13] = 1;
        }
      }
      objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v3, x, y, *(_QWORD *)&v29);
      v16 = v15;
      v18 = v17;
      v20 = ReflowTextView.spacingAdjustment.modify(v31);
      if (*v19)
      {
        v19[4] = v16;
        v19[5] = v18;
      }
      v20((_OWORD **)v31, 0);
      v22 = ReflowTextView.spacingAdjustment.modify(v31);
      if (*(_QWORD *)v21)
        *(_BYTE *)(v21 + 57) = 1;
      v22((_OWORD **)v31, 0);
      if (one-time initialization token for handwritingReflowAnimationDuration != -1)
        swift_once();
      ReflowTextView.startAnimating(endingIn:smoothstep:)(*(Swift::Double *)&static UIConstants.handwritingReflowAnimationDuration, 0);
      swift_retain();
      ReflowLayoutManager.scaleTextToFit()();
      swift_release();
      swift_retain();
      objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v3, x, y, v30);
      goto LABEL_16;
    }
  }
}

Swift::Void __swiftcall HandwritingReflowView.drawingContinuation(_:)(UILongPressGestureRecognizer *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)-[UILongPressGestureRecognizer state](a1, sel_state, v6);
  if ((unint64_t)(v9 - 3) >= 3)
  {
    if (v9 == (char *)2)
    {
      if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace) & 1) == 0)
      {
        v17 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                    + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret), sel_superview));

        if (v17)
        {
          -[UILongPressGestureRecognizer locationInView:](a1, sel_locationInView_, v1);
          HandwritingReflowView.adjustCaret(_:)((CGPoint)__PAIR128__(v19, v18));
        }
      }
    }
    else if (v9 == (char *)1)
    {
      *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace) = 0;
      *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing) = 1;
      v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
      if (v15)
      {
        v16 = *(_OWORD **)(v15 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
        swift_beginAccess();
        v16[11] = 0u;
        v16[12] = 0u;
        *(_OWORD *)((char *)v16 + 202) = 0u;
        v16[10] = 0u;
        swift_release();
      }
    }
  }
  else
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing) = 0;
    v10 = v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations;
    swift_beginAccess();
    v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
    if (v11)
    {
      v12 = *(_QWORD *)v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v13 = *(_QWORD *)(v4 + 72);
      v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      swift_bridgeObjectRetain();
      do
      {
        v14(v8, v12, v3);
        CheckedContinuation.resume(returning:)();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
        v12 += v13;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)v10 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall HandwritingReflowView.longPress(_:)(UILongPressGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  id v5;
  void *v6;
  unsigned int v7;
  char *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  void *v33;
  void *v34;
  char *v35;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  _QWORD *v48;
  __int128 aBlock;
  __int128 v50;
  uint64_t (*v51)();
  uint64_t v52;
  CGPoint v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  v2 = v1;
  v4 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    v48 = (_QWORD *)v4;
    v5 = objc_msgSend(v2, sel_superview);
    if (!v5)
      goto LABEL_4;
    v6 = v5;
    v7 = objc_msgSend(v5, sel_isHidden);

    if (v7)
      goto LABEL_4;
    v8 = (char *)-[UILongPressGestureRecognizer state](a1, sel_state);
    if ((unint64_t)(v8 - 3) >= 2)
    {
      if (v8 == (char *)2)
      {
        if (v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] == 1)
        {
          -[UILongPressGestureRecognizer locationInView:](a1, sel_locationInView_, v2);
          HandwritingReflowView.adjustCaret(_:)((CGPoint)__PAIR128__(v26, v25));
        }
        goto LABEL_4;
      }
      if (v8 == (char *)1)
      {
        objc_msgSend(v48, sel_bounds);
        v10 = v9;
        v12 = v11;
        v14 = v13;
        v16 = v15;
        -[UILongPressGestureRecognizer locationInView:](a1, sel_locationInView_, v48);
        v53.x = v17;
        v53.y = v18;
        v54.origin.x = v10;
        v54.origin.y = v12;
        v54.size.width = v14;
        v54.size.height = v16;
        if (CGRectContainsPoint(v54, v53))
        {
          -[UILongPressGestureRecognizer locationInView:](a1, sel_locationInView_, v2);
          v20 = v19;
          v22 = v21;
          AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
          *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask] = HandwritingReflowView.startInsertSpaceReflow(at:)(v20, v22);

          swift_release();
          v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] = 0;
          v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 1;
          return;
        }
      }
LABEL_4:

      return;
    }
    if (v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] != 1)
      goto LABEL_4;
    v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 0;
    v23 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask;
    if (*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask])
    {
      v24 = swift_retain();
      MEMORY[0x1DF0E453C](v24, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
      swift_release();
    }
    *(_QWORD *)&v2[v23] = 0;
    swift_release();
    v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v48) + 0x320))();
    if (v27)
    {
      v28 = v27;
      objc_msgSend(v27, sel__pauseHoverPreviewForTimeInterval_, 0.3);

    }
    v29 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox;
    v30 = *(char **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
    if (v30)
    {
      if ((v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] & 1) != 0)
      {
        v31 = *(_OWORD **)&v30[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
        swift_beginAccess();
        v31[11] = 0u;
        v31[12] = 0u;
        *(_OWORD *)((char *)v31 + 202) = 0u;
        v31[10] = 0u;
        v32 = v30;
        swift_release();
        HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(v32, 1, 0, 0);
        v33 = *(void **)&v2[v29];
        *(_QWORD *)&v2[v29] = 0;

      }
      else
      {
        v34 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
        v35 = v30;
        objc_msgSend(v34, sel_bounds);
        x = v55.origin.x;
        y = v55.origin.y;
        width = v55.size.width;
        height = v55.size.height;
        MidX = CGRectGetMidX(v55);
        v56.origin.x = x;
        v56.origin.y = y;
        v56.size.width = width;
        v56.size.height = height;
        objc_msgSend(v2, sel_convertPoint_fromCoordinateSpace_, v34, MidX, CGRectGetMidY(v56));
        if ((specialized HandwritingReflowView.canPasteAsHandwriting.getter() & 1) != 0)
        {
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
          v51 = 0;
          aBlock = 0u;
          v50 = 0u;
          v41 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
          v42 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction];
          objc_msgSend(v42, sel_presentEditMenuWithConfiguration_, v41);

        }
        HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(v35, 1, 0, 0);

      }
    }
    v43 = (void *)objc_opt_self();
    v44 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v44;
    v51 = closure #1 in HandwritingReflowView.hideCaret()partial apply;
    v52 = v45;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v50 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)&v50 + 1) = &block_descriptor_109_0;
    v46 = _Block_copy(&aBlock);
    v47 = v44;
    swift_release();
    objc_msgSend(v43, sel_animateWithDuration_animations_, v46, 0.2);
    _Block_release(v46);

  }
}

uint64_t HandwritingReflowView.showRectangularSelection.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI) == 1
    && *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox)
    && !CGRectIsEmpty(*(CGRect *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds)))
  {
    v1 = v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
    result = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    if (!result)
      goto LABEL_7;
    v3 = (void *)result;
    v4 = *(_QWORD *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v4)
    {
      __break(1u);
      goto LABEL_19;
    }
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    swift_bridgeObjectRetain();

    v6 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease();
    if (!v6)
    {
LABEL_7:
      result = MEMORY[0x1DF0E666C](v1);
      if (!result)
        return result;
      v7 = (void *)result;
      v8 = *(_QWORD *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
        swift_bridgeObjectRetain();

        v10 = *(_QWORD *)(v9 + 16);
        swift_bridgeObjectRelease();
        if (v10)
        {
          result = MEMORY[0x1DF0E666C](v1);
          if (!result)
          {
            v13 = 6;
            return v13 != 6;
          }
          v11 = *(_QWORD *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
          if (v11)
          {
            v12 = v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
            v13 = *(_QWORD *)(v12 + 16);
            v14 = *(_BYTE *)(v12 + 24);

            if ((v14 & 1) != 0)
              return 1;
            return v13 != 6;
          }
          goto LABEL_20;
        }
        return 0;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      return result;
    }
  }
  return 0;
}

void HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  double v8;
  __int128 v9;
  double v10;
  __int128 v11;
  double v12;
  char *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  char *v20;
  double MaxY;
  double v22;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  __int128 v31;
  double v32;
  __int128 v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace + 48) & 1) != 0)
  {
    v4 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds);
    v5 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds + 8);
    v6 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds + 16);
    v7 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds + 24);
    if (one-time initialization token for handwritingReflowInset != -1)
      swift_once();
    v34.origin.x = v4;
    v34.origin.y = v5;
    v34.size.width = v6;
    v34.size.height = v7;
    v35 = CGRectInset(v34, -*(double *)&static UIConstants.handwritingReflowInset, -*(double *)&static UIConstants.handwritingReflowInset);
    specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(MEMORY[0x1E0DEE9D8], 1, (__int128 *)&v30, v35.origin.x, v35.origin.y, v35.size.width, v35.size.height, 0.0);
    v8 = v30;
    v9 = v31;
    v10 = v32;
    v11 = v33;
  }
  else
  {
    v11 = *(_OWORD *)(v3 + 32);
    v10 = *(double *)(v3 + 24);
    v9 = *(_OWORD *)(v3 + 8);
    v12 = *(double *)v3;
    v13 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
    if (v13)
    {
      v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
      if ((*(_BYTE *)(v14 + 218) & 1) == 0)
      {
        v15 = *(double *)(v14 + 120);
        v16 = *(double *)(v14 + 128);
        v17 = *(double *)(v14 + 136);
        v18 = *(double *)(v14 + 144);
        v24 = v9;
        v27 = v11;
        v19 = CGRect.isFinite.getter(v15, v16, v17, v18);
        v9 = v24;
        v11 = v27;
        if (v19)
        {
          v20 = v13;
          v36.origin.x = v15;
          v36.origin.y = v16;
          v36.size.width = v17;
          v36.size.height = v18;
          MaxY = CGRectGetMaxY(v36);
          if (one-time initialization token for handwritingReflowInset != -1)
            swift_once();
          v22 = *(double *)&static UIConstants.handwritingReflowInset;

          v10 = MaxY + v22 + v22;
          v9 = v24;
          v11 = v27;
        }
      }
    }
    if (one-time initialization token for handwritingReflowMinimumWidth != -1)
    {
      v25 = v9;
      v28 = v11;
      swift_once();
      v9 = v25;
      v11 = v28;
    }
    v23 = *(double *)&static UIConstants.handwritingReflowMinimumWidth;
    if (one-time initialization token for handwritingReflowInset != -1)
    {
      v26 = v9;
      v29 = v11;
      swift_once();
      v9 = v26;
      v11 = v29;
    }
    v8 = v23
       + *(double *)&static UIConstants.handwritingReflowInset
       + *(double *)&static UIConstants.handwritingReflowInset;
    if (v12 > v8)
      v8 = v12;
  }
  *(double *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v9;
  *(double *)(a1 + 24) = v10;
  *(_OWORD *)(a1 + 32) = v11;
}

uint64_t HandwritingReflowView.availableSelectionHandles(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  if ((HandwritingReflowView.showRectangularSelection.getter() & 1) == 0)
    return MEMORY[0x1E0DEE9D8];
  v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles);
  if (v4 == 1)
  {
    v6 = v5 >> 62;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0)
      {
        __break(1u);
        goto LABEL_52;
      }
      swift_bridgeObjectRetain();
      v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v27 >= 3)
      {
LABEL_5:
        if ((v5 & 0xC000000000000001) != 0)
        {
          type metadata accessor for CanvasElementResizeHandle();
          _ArrayBuffer._typeCheckSlowPath(_:)(0);
          _ArrayBuffer._typeCheckSlowPath(_:)(1);
          _ArrayBuffer._typeCheckSlowPath(_:)(2);
        }
        if (v6)
        {
          swift_bridgeObjectRetain();
          v0 = _CocoaArrayWrapper.subscript.getter();
          v2 = v12;
          v6 = v13;
          v3 = v14;
          swift_bridgeObjectRelease_n();
          if ((v3 & 1) == 0)
          {
LABEL_23:
            v15 = v0;
            v16 = v2;
            v17 = v6;
            v18 = v3;
LABEL_31:
            v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v15, v16, v17, v18);
LABEL_38:
            swift_unknownObjectRelease();
            return v8;
          }
        }
        else
        {
          v0 = v5 & 0xFFFFFFFFFFFFFF8;
          v2 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
          v3 = 7;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v19 = swift_dynamicCastClass();
        if (!v19)
        {
          swift_unknownObjectRelease();
          v19 = MEMORY[0x1E0DEE9D8];
        }
        v20 = *(_QWORD *)(v19 + 16);
        swift_release();
        if (!__OFSUB__(v3 >> 1, v6))
        {
          if (v20 != (v3 >> 1) - v6)
          {
            swift_unknownObjectRelease();
            goto LABEL_23;
          }
          goto LABEL_36;
        }
        goto LABEL_48;
      }
    }
    else
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7 >= 3)
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
    v3 = v5 >> 62;
    if (!(v5 >> 62))
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v6 < 3)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      swift_bridgeObjectRetain();
LABEL_13:
      if ((v5 & 0xC000000000000001) != 0 && v6 != 3)
      {
        type metadata accessor for CanvasElementResizeHandle();
        v10 = 3;
        do
        {
          v11 = v10 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v10);
          v10 = v11;
        }
        while (v6 != v11);
      }
      if (v3)
      {
        swift_bridgeObjectRetain();
        v0 = _CocoaArrayWrapper.subscript.getter();
        v2 = v21;
        v3 = v22;
        v6 = v23;
        swift_bridgeObjectRelease_n();
        if ((v6 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v0 = v5 & 0xFFFFFFFFFFFFFF8;
        v2 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
        v6 = (2 * v6) | 1;
        v3 = 3;
        if ((v6 & 1) != 0)
        {
LABEL_32:
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain_n();
          v24 = swift_dynamicCastClass();
          if (!v24)
          {
            swift_unknownObjectRelease();
            v24 = MEMORY[0x1E0DEE9D8];
          }
          v25 = *(_QWORD *)(v24 + 16);
          swift_release();
          if (!__OFSUB__((unint64_t)v6 >> 1, v3))
          {
            if (v25 == ((unint64_t)v6 >> 1) - v3)
            {
LABEL_36:
              v8 = swift_dynamicCastClass();
              swift_unknownObjectRelease();
              if (!v8)
              {
                v8 = MEMORY[0x1E0DEE9D8];
                goto LABEL_38;
              }
              return v8;
            }
            goto LABEL_50;
          }
LABEL_49:
          __break(1u);
LABEL_50:
          swift_unknownObjectRelease();
        }
      }
      v15 = v0;
      v16 = v2;
      v17 = v3;
      v18 = v6;
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain_n();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v6 < 3)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v2 >= 3)
  {
    swift_bridgeObjectRetain();
    v0 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v0 < v6)
    {
      __break(1u);
      goto LABEL_47;
    }
    goto LABEL_13;
  }
LABEL_53:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall HandwritingReflowView.checkStrokesAreValid()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(void);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  char *v18;
  void *v19;
  id v20;
  char **v21;
  id v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  char v32;
  char *v33;
  id v34;
  char v35;
  BOOL v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v55;
  id v56;
  id v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;

  v1 = v0;
  v2 = type metadata accessor for PKStroke();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PKDrawing();
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (!v10)
    goto LABEL_84;
  v11 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v9);
  if (!v11)
    goto LABEL_84;
  v64 = v3;
  v12 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x2F8);
  v61 = v11;
  v13 = (void *)v12();
  v15 = v14;
  ObjectType = swift_getObjectType();
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 16);
  v18 = v10;
  v19 = (void *)v17(ObjectType, v15);

  if (!v19)
  {

    goto LABEL_83;
  }
  v59 = v18;
  v20 = objc_msgSend(v19, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
  {

    v37 = v59;
    goto LABEL_82;
  }
  v21 = &selRef_setCanvasWidth_;
  v56 = v72;
  v57 = v19;
  v22 = objc_msgSend(v72, sel_strokes);
  v23 = (unint64_t *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v24 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v23);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes);
  v68 = v24;
  if (!v25)
  {
    v38 = *(_QWORD *)&v59[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    v29 = *(_QWORD *)(v38 + 80);
    v71 = MEMORY[0x1E0DEE9D8];
    if (v29 >> 62)
      goto LABEL_59;
    v39 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    LOBYTE(v40) = swift_bridgeObjectRetain_n();
    if (!v39)
      goto LABEL_60;
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  if (v25 >> 62)
    goto LABEL_80;
  do
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v26)
      goto LABEL_81;
LABEL_8:
    v69 = v25 & 0xC000000000000001;
    if ((v25 & 0xC000000000000001) != 0)
    {
LABEL_54:
      v27 = (char *)MEMORY[0x1DF0E4D64](0, v25);
    }
    else
    {
      if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_56:
        swift_bridgeObjectRetain();
        v21 = (char **)_CocoaArrayWrapper.endIndex.getter();
        if (!v21)
        {
LABEL_50:
          swift_bridgeObjectRelease_n();

          swift_bridgeObjectRelease();
          LOBYTE(v40) = 0;
          return v40;
        }
        goto LABEL_13;
      }
      v27 = (char *)*(id *)(v25 + 32);
    }
    v6 = v27;
    v23 = (unint64_t *)v59;
    if (v24 >> 62)
      goto LABEL_56;
    v21 = *(char ***)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v21)
      goto LABEL_50;
LABEL_13:
    v23 = (unint64_t *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v28 = v24 & 0xC000000000000001;
    v65 = v25 + 32;
    v66 = v25 & 0xFFFFFFFFFFFFFF8;
    v29 = 1;
    v67 = v26;
    if ((v24 & 0xC000000000000001) != 0)
    {
LABEL_14:
      v30 = (id)MEMORY[0x1DF0E4D64](0, v24);
      goto LABEL_16;
    }
    while (1)
    {
      v30 = *(id *)(v24 + 32);
LABEL_16:
      v31 = v30;
      v32 = static NSObject.== infix(_:_:)();

      if ((v32 & 1) == 0)
      {
        if (v21 == (char **)1)
        {
LABEL_49:
          v23 = (unint64_t *)v59;
          goto LABEL_50;
        }
        v26 = 5;
        while (1)
        {
          v34 = v28 ? (id)MEMORY[0x1DF0E4D64](v26 - 4, v68) : *(id *)(v68 + 8 * v26);
          v24 = (unint64_t)v34;
          v2 = v26 - 3;
          if (__OFADD__(v26 - 4, 1))
            break;
          v35 = static NSObject.== infix(_:_:)();

          if ((v35 & 1) != 0)
            goto LABEL_17;
          ++v26;
          if ((char **)v2 == v21)
            goto LABEL_49;
        }
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
LABEL_17:

      v24 = v68;
      swift_bridgeObjectRelease();
      v26 = v67;
      if (v29 == v67)
        goto LABEL_81;
      if (!v69)
        break;
      v33 = (char *)MEMORY[0x1DF0E4D64](v29, v25);
LABEL_31:
      v6 = v33;
      v36 = __OFADD__(v29++, 1);
      if (v36)
        goto LABEL_53;
      swift_bridgeObjectRetain();
      if (v28)
        goto LABEL_14;
    }
    if (v29 < *(_QWORD *)(v66 + 16))
    {
      v33 = (char *)*(id *)(v65 + 8 * v29);
      goto LABEL_31;
    }
    __break(1u);
LABEL_59:
    swift_bridgeObjectRetain_n();
    v40 = _CocoaArrayWrapper.endIndex.getter();
    v39 = v40;
    if (!v40)
    {
LABEL_60:
      swift_bridgeObjectRelease();
      v42 = MEMORY[0x1E0DEE9D8];
      goto LABEL_61;
    }
LABEL_38:
    if (v39 < 1)
    {
      __break(1u);
      return v40;
    }
    for (i = 0; i != v39; ++i)
    {
      if ((v29 & 0xC000000000000001) != 0)
      {
        v23 = (unint64_t *)MEMORY[0x1DF0E4D64](i, v29);
      }
      else
      {
        v23 = *(unint64_t **)(v29 + 8 * i + 32);
        swift_retain();
      }
      type metadata accessor for ReflowWord();
      if (swift_dynamicCastClass())
      {
        v23 = &v71;
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    v42 = v71;
    v24 = v68;
LABEL_61:
    swift_bridgeObjectRelease();
    v71 = MEMORY[0x1E0DEE9D8];
    if (v42 >> 62)
      goto LABEL_77;
    v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v63 = v43;
    if (v43)
    {
LABEL_63:
      v44 = 0;
      v62 = v42 & 0xC000000000000001;
      v58 = v42 + 32;
      v24 = 0x1E0CD1220uLL;
      v60 = v42;
      while (1)
      {
        if (v62)
        {
          v46 = MEMORY[0x1DF0E4D64](v44, v42);
          v36 = __OFADD__(v44++, 1);
          if (v36)
            goto LABEL_76;
        }
        else
        {
          v46 = *(_QWORD *)(v58 + 8 * v44);
          swift_retain();
          v36 = __OFADD__(v44++, 1);
          if (v36)
          {
LABEL_76:
            __break(1u);
LABEL_77:
            swift_bridgeObjectRetain();
            v63 = _CocoaArrayWrapper.endIndex.getter();
            if (!v63)
              break;
            goto LABEL_63;
          }
        }
        v47 = objc_msgSend(*(id *)(v46 + 272), v21[345]);
        v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v49 = v48;
        v50 = *(_QWORD *)(v48 + 16);
        if (v50)
        {
          v66 = v46;
          v67 = v44;
          v70 = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray.reserveCapacity(_:)();
          v51 = *(unsigned __int8 *)(v64 + 80);
          v65 = v49;
          v52 = v49 + ((v51 + 32) & ~v51);
          v69 = *(_QWORD *)(v64 + 72);
          v53 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
          do
          {
            v53(v6, v52, v2);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
            swift_dynamicCast();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v52 += v69;
            --v50;
          }
          while (v50);
          v45 = v70;
          swift_release();
          swift_bridgeObjectRelease();
          v21 = &selRef_setCanvasWidth_;
          v42 = v60;
          v44 = v67;
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          v45 = MEMORY[0x1E0DEE9D8];
        }
        v23 = &v71;
        specialized Array.append<A>(contentsOf:)(v45);
        if (v44 == v63)
        {
          swift_bridgeObjectRelease_n();
          v25 = v71;
          v24 = v68;
          goto LABEL_79;
        }
      }
    }
    swift_bridgeObjectRelease_n();
    v25 = MEMORY[0x1E0DEE9D8];
LABEL_79:
    swift_bridgeObjectRelease();
  }
  while (!(v25 >> 62));
LABEL_80:
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v26)
    goto LABEL_8;
LABEL_81:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v37 = v57;
LABEL_82:

LABEL_83:
LABEL_84:
  LOBYTE(v40) = 1;
  return v40;
}

void specialized HandwritingReflowView.updateCurrentReflowingStrokes<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v2 = v1;
  v4 = type metadata accessor for PKDrawing();
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v7 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v6);
  if (v7)
  {
    v16 = v7;
    v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x2F8))();
    v10 = v9;
    ObjectType = swift_getObjectType();
    v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);

    if (v12)
    {
      v13 = objc_msgSend(v12, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for PKDrawingCoherence(0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v14 = v17;
        v15 = specialized Sequence.compactMap<A>(_:)(a1, (uint64_t)v14);

        *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes) = v15;
        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

Swift::Void __swiftcall HandwritingReflowView.layoutSubviews()()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_super v14;
  CGRect v15;

  v1 = v0;
  if (v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] == 1)
  {
    v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(v3, sel_superview);
      if (v4)
      {
        v5 = v4;
        if (*(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle])
        {
          if (one-time initialization token for handwritingReflowAnimationDuration != -1)
            swift_once();
          ReflowTextView.startAnimating(endingIn:smoothstep:)(*(Swift::Double *)&static UIConstants.handwritingReflowAnimationDuration, 0);
          objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
          objc_msgSend(v5, sel_convertRect_fromCoordinateSpace_, v1);
          if (one-time initialization token for handwritingReflowInset != -1)
          {
            v12 = v8;
            v13 = v6;
            v10 = v9;
            v11 = v7;
            swift_once();
            v9 = v10;
            v7 = v11;
            v8 = v12;
            v6 = v13;
          }
          v15 = CGRectInset(*(CGRect *)&v6, *(CGFloat *)&static UIConstants.handwritingReflowInset, *(CGFloat *)&static UIConstants.handwritingReflowInset);
          objc_msgSend(v3, sel_setFrame_, v15.origin.x, v15.origin.y, v15.size.width, v15.size.height);

          goto LABEL_15;
        }

      }
      else
      {
        v5 = v3;
      }

    }
  }
  if (!HandwritingReflowView.checkStrokesAreValid()())
    HandwritingReflowView.updateForNewSelection()();
LABEL_15:
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox])
  {
    *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes] = 0;
    swift_bridgeObjectRelease();
  }
  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for HandwritingReflowView();
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
}

uint64_t HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  Swift::Int v41;
  Swift::Int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::Int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  double v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  double *v92;
  void *v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  double v99;
  char *v100;
  double v101;
  uint64_t v102;
  double v103;
  char *v104;
  double v105;
  void *v106;
  uint64_t v107;
  _QWORD aBlock[6];
  _OWORD v109[4];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;

  v12 = v11;
  LOBYTE(v13) = a5;
  v23 = a1;
  v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  v25 = (char *)(v24 + 80);
  result = swift_beginAccess();
  v27 = *(_QWORD *)(v24 + 80);
  if (v27 >> 62)
    goto LABEL_87;
  if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
    return result;
LABEL_3:
  v106 = (void *)v23;
  objc_msgSend((id)v23, sel_convertPoint_fromCoordinateSpace_, v12, a6, a7);
  v29 = v28;
  v31 = v30;
  v23 = *(_QWORD *)(a2 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index);
  v32 = *(_QWORD *)v25;
  if (!(*(_QWORD *)v25 >> 62))
  {
    v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    v34 = v33 - 1;
    if (!__OFSUB__(v33, 1))
      goto LABEL_5;
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  swift_bridgeObjectRetain();
  v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v34 = v33 - 1;
  if (__OFSUB__(v33, 1))
    goto LABEL_91;
LABEL_5:
  if (v34 >= v23)
    v34 = v23;
  if (v23 >= 0)
    v23 = v34;
  else
    v23 = 0;
  v32 = *(_QWORD *)v25;
  if ((*(_QWORD *)v25 & 0xC000000000000001) != 0)
  {
LABEL_92:
    swift_bridgeObjectRetain();
    v33 = MEMORY[0x1DF0E4D64](v23, v32);
    swift_bridgeObjectRelease();
    v35 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity);
    type metadata accessor for ReflowWord();
    if (swift_dynamicCastClass())
      goto LABEL_70;
    if (v23 < 0)
    {
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    goto LABEL_14;
  }
  if (v23 < 0)
    goto LABEL_95;
  if ((unint64_t)v23 >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_96;
  v33 = *(_QWORD *)(v32 + 8 * v23 + 32);
  v35 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity);
  type metadata accessor for ReflowWord();
  v36 = swift_dynamicCastClass();
  swift_retain();
  if (v36)
    goto LABEL_70;
LABEL_14:
  v96 = v35;
  v100 = v12;
  v102 = v33;
  v37 = 0;
  a2 = v13 & 1;
  v13 = v23 + 1;
  v98 = v24;
  v104 = v25;
  do
  {
    v38 = *(_QWORD *)v25;
    v97 = v37;
    if (v38 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v39 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v39 < v23)
        goto LABEL_104;
      swift_bridgeObjectRetain();
      v63 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v63 < v23)
        goto LABEL_105;
      swift_bridgeObjectRetain();
      v33 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v33 < v39)
        goto LABEL_101;
    }
    else
    {
      v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v39 < v23)
        goto LABEL_100;
      result = swift_bridgeObjectRetain();
    }
    if ((v38 & 0xC000000000000001) != 0 && v23 != v39)
    {
      if (v23 >= v39)
      {
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        return result;
      }
      type metadata accessor for ReflowElement();
      v41 = v23;
      do
      {
        v42 = v41 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v41);
        v41 = v42;
      }
      while (v39 != v42);
    }
    if (v38 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      v43 = v45;
      v24 = v46;
      v44 = v47;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v43 = (v38 & 0xFFFFFFFFFFFFFF8) + 32;
      v44 = (2 * v39) | 1;
      v24 = v23;
    }
    v12 = (char *)(v44 >> 1);
    v25 = v104;
    if (v24 != v44 >> 1)
    {
      while (1)
      {
        if (v24 >= (uint64_t)v12)
          goto LABEL_86;
        v48 = *(_QWORD *)(v43 + 8 * v24);
        type metadata accessor for ReflowWord();
        if (swift_dynamicCastClass())
        {
          if ((a2 & 1) != 0)
            break;
          v55 = *(_QWORD *)(v48 + 120);
          if (v55 >= a3 && a4 >= v55)
            break;
        }
        if (v12 == (char *)++v24)
          goto LABEL_29;
      }
      v35 = 0;
LABEL_69:
      swift_retain();
      swift_release();
      swift_unknownObjectRelease();
      v33 = v48;
      v24 = v98;
      v12 = v100;
      goto LABEL_70;
    }
LABEL_29:
    swift_unknownObjectRelease();
    v48 = *(_QWORD *)v104;
    v49 = *(_QWORD *)v104 >> 62;
    if (v49)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0)
        goto LABEL_106;
      swift_bridgeObjectRetain();
      v64 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v64 <= v23)
      {
LABEL_66:
        __break(1u);
LABEL_67:
        v35 = 1;
        goto LABEL_69;
      }
    }
    else
    {
      v50 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v50 <= v23)
        goto LABEL_66;
    }
    if ((v48 & 0xC000000000000001) != 0)
    {
      type metadata accessor for ReflowElement();
      v51 = 0;
      do
      {
        v52 = v51 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v51);
        v51 = v52;
      }
      while (v13 != v52);
    }
    if (v49)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      v53 = v57;
      v25 = v58;
      v54 = v59;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v25 = 0;
      v53 = (v48 & 0xFFFFFFFFFFFFFF8) + 32;
      v54 = (2 * (v23 + 1)) | 1;
    }
    v12 = (char *)(v54 >> 1);
    v24 = (uint64_t)v12;
    if (v12 != v25)
    {
      while (!__OFSUB__(v24--, 1))
      {
        if (v24 < (uint64_t)v25 || v24 >= (uint64_t)v12)
          goto LABEL_85;
        v48 = *(_QWORD *)(v53 + 8 * v24);
        type metadata accessor for ReflowWord();
        if (swift_dynamicCastClass())
        {
          if ((a2 & 1) != 0)
            goto LABEL_67;
          v61 = *(_QWORD *)(v48 + 120);
          if (v61 >= a3 && a4 >= v61)
            goto LABEL_67;
        }
        if ((char *)v24 == v25)
          goto LABEL_47;
      }
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      swift_bridgeObjectRetain();
      v95 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v95)
        return result;
      goto LABEL_3;
    }
LABEL_47:
    swift_unknownObjectRelease();
    a3 = 0;
    a4 = 0;
    v37 = 1;
    a2 = 1;
    v33 = v102;
    v25 = v104;
  }
  while ((v97 & 1) == 0);
  while (1)
  {
    v24 = v98;
    v12 = v100;
    v35 = v96;
LABEL_70:
    v65 = round(*(double *)(v33 + 80));
    if ((~*(_QWORD *)&v65 & 0x7FF0000000000000) == 0)
    {
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    if (v65 <= -9.22337204e18)
      goto LABEL_98;
    if (v65 < 9.22337204e18)
      break;
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
  }
  v66 = (uint64_t)v65;
  if (((uint64_t)v65 & 0x8000000000000000) == 0)
  {
    swift_beginAccess();
    v67 = *(_QWORD *)(v24 + 96);
    if (*(_QWORD *)(v67 + 16) > v66)
    {
      v68 = (_OWORD *)(v67 + 160 * v66);
      v69 = v68[2];
      v109[1] = v68[3];
      v109[0] = v69;
      v70 = v68[4];
      v71 = v68[5];
      v72 = v68[7];
      v110 = v68[6];
      v111 = v72;
      v109[2] = v70;
      v109[3] = v71;
      v73 = v68[8];
      v74 = v68[9];
      v75 = v68[11];
      v114 = v68[10];
      v115 = v75;
      v112 = v73;
      v113 = v74;
      v101 = *((double *)&v111 + 1);
      v103 = *((double *)&v110 + 1);
      *(_QWORD *)&v73 = v29;
      v76 = v31;
      v77 = a11;
      v78 = *((double *)&v112 + 1);
      v107 = v73;
      v105 = a6;
      v79 = a7;
      v80 = a8;
      v81 = a9;
      v82 = a10;
      v83 = *((double *)&v74 + 1);
      outlined retain of ReflowTextLine((uint64_t)v109);
      ReflowTextLine.textSize.getter();
      v99 = v84;
      if (v78 > v83)
        v83 = v78;
      ReflowTextLine.textSize.getter();
      v86 = v85;
      outlined release of ReflowTextLine((uint64_t)v109);
      if (v76 <= v83 + v86 * 0.5)
      {
        v87 = v103;
        if (v101 < v103)
          v87 = v101;
        if (v87 + v99 * -0.5 <= v76)
        {
          v88 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
          *(_QWORD *)&v12[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = v106;
          v89 = v106;

          v90 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
          objc_msgSend(v90, sel_setAlpha_, 1.0);
          objc_msgSend(v90, sel_setFrame_, v105, v79, 0.0, 0.0);
          objc_msgSend(v12, sel_addSubview_, v90);
          swift_beginAccess();
          *(_QWORD *)(v24 + 160) = v33;
          *(_QWORD *)(v24 + 168) = v35;
          *(_QWORD *)(v24 + 176) = v107;
          *(double *)(v24 + 184) = v76;
          *(_QWORD *)(v24 + 192) = v107;
          *(double *)(v24 + 200) = v76;
          *(_QWORD *)(v24 + 208) = 0;
          *(_WORD *)(v24 + 216) = 1;
          swift_retain();
          swift_release();
          v91 = (void *)objc_opt_self();
          v92 = (double *)swift_allocObject();
          *((_QWORD *)v92 + 2) = v12;
          v92[3] = v80;
          v92[4] = v81;
          v92[5] = v82;
          v92[6] = v77;
          aBlock[4] = partial apply for closure #3 in HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:);
          aBlock[5] = v92;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          aBlock[3] = &block_descriptor_102_0;
          v93 = _Block_copy(aBlock);
          v94 = v12;
          swift_release();
          objc_msgSend(v91, sel_animateWithDuration_animations_, v93, 0.2);
          _Block_release(v93);
        }
      }
    }
  }
  return swift_release();
}

uint64_t HandwritingReflowView.startInsertSpaceReflow(at:)(double a1, double a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  void *v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[7];
  double v37;
  double v38;
  char v39;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v8);
  if (!v11)
    return 0;
  v12 = v11;
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x2F8))();
  v16 = v15;
  ObjectType = swift_getObjectType();
  v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);

  if (!v18)
  {

    return 0;
  }
  v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 0;
  v19 = objc_msgSend(v12, sel_convertPoint_fromCoordinateSpace_, v3, a1, a2);
  v21 = v20;
  v23 = v22;
  (*(void (**)(_QWORD *__return_ptr, id))((*v13 & *v12) + 0x5B8))(v36, v19);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v36, (uint64_t)&v37, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  v24 = 1.0;
  if ((v39 & 1) == 0)
    v24 = sqrt(v37 * v37 + v38 * v38);
  v25 = v21 / v24;
  v26 = v23 / v24;
  v27 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v10, 1, 1, v27);
  type metadata accessor for MainActor();
  v28 = v18;
  v29 = v12;
  v30 = v3;
  v31 = static MainActor.shared.getter();
  v32 = swift_allocObject();
  v33 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v32 + 16) = v31;
  *(_QWORD *)(v32 + 24) = v33;
  *(double *)(v32 + 32) = v25;
  *(double *)(v32 + 40) = v26;
  *(_QWORD *)(v32 + 48) = v28;
  *(_QWORD *)(v32 + 56) = v29;
  *(_QWORD *)(v32 + 64) = v30;
  *(double *)(v32 + 72) = a1;
  *(double *)(v32 + 80) = a2;
  v34 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:), v32);

  return v34;
}

uint64_t closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, double, double);

  *(double *)(v10 + 208) = a3;
  *(double *)(v10 + 216) = a4;
  *(_QWORD *)(v10 + 192) = a9;
  *(_QWORD *)(v10 + 200) = a10;
  *(_QWORD *)(v10 + 224) = type metadata accessor for MainActor();
  *(_QWORD *)(v10 + 232) = static MainActor.shared.getter();
  v16 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                 + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 240) = v14;
  *v14 = v10;
  v14[1] = closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:);
  return v16(MEMORY[0x1E0DEE9D8], a8, a1, a2);
}

uint64_t closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 248) = a1;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 256) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v2 + 264) = v3;
  return swift_task_switch();
}

uint64_t closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)()
{
  uint64_t v0;
  char *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  CGRect v19;
  CGRect v20;

  v1 = *(char **)(v0 + 248);
  if (!v1)
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    swift_release();

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager;
  *(_QWORD *)(v0 + 272) = OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager;
  v4 = *(_QWORD *)&v1[v3];
  *(_BYTE *)(v4 + 218) = 0;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v4 + 88) + 16) == 1)
  {
    v5 = *(_QWORD **)(v0 + 192);
    v6 = objc_msgSend(v1, sel_frame);
    v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v8 = (_QWORD *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x2F8))(v6);
    v9 = (*(double (**)(void))((*v7 & *v8) + 0x138))();
    v11 = v10;
    v13 = v12;
    v15 = v14;

    v19.origin.x = v9;
    v19.origin.y = v11;
    v19.size.width = v13;
    v19.size.height = v15;
    CGRectGetMaxX(v19);
    objc_msgSend(v1, sel_frame);
    CGRectGetMinX(v20);
    objc_msgSend(v1, sel_frame);
    objc_msgSend(v1, sel_setFrame_);
  }
  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(void **)(v16 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  *(_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox) = *(_QWORD *)(v0 + 248);
  v1;

  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v18;
  *v18 = v0;
  v18[1] = closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:);
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(*(_QWORD *)(v0 + 192), 0, 0);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::OpaquePointer v5;
  Swift::OpaquePointer v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  swift_release();
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = *(void **)(v0 + 248);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 248);
    v4 = *(_QWORD *)(v3 + v2);
    swift_beginAccess();
    v5._rawValue = *(void **)(v4 + 80);
    swift_beginAccess();
    v6._rawValue = *(void **)(v4 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ReflowLayoutManager.layoutText(contents:lines:)(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v3 + v2);
    swift_beginAccess();
    v8 = *(_QWORD *)(v7 + 80);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v1 = *(void **)(v0 + 248);
      if (!v11)
        goto LABEL_7;
    }
    else
    {
      v1 = *(void **)(v0 + 248);
      if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_7;
    }
    ReflowTextView.caretRect(for:in:)(*(_QWORD *)(v0 + 200), v0 + 56, *(double *)(v0 + 208));
    outlined init with take of (key: Int, value: AnyCRValue)?(v0 + 56, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for (ReflowLayoutManager.TextPosition, CGRect)?);
    v9 = *(_QWORD *)(v0 + 16);
    v1 = *(void **)(v0 + 248);
    if (v9)
    {
      HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)(*(_QWORD *)(v0 + 248), v9, 0, 0, 1, *(double *)(v0 + 208), *(double *)(v0 + 216), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
      outlined release of (ReflowLayoutManager.TextPosition, CGRect)?((id *)(v0 + 56));
    }
  }
LABEL_7:

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void HandwritingReflowView.startReflowForSelection(completion:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(void);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  double (*v27)(void **, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKDrawing();
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = &v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  v13 = (_QWORD *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v13)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v15 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x2F8);
    v51 = v13;
    v16 = (void *)v15();
    v18 = v17;
    ObjectType = swift_getObjectType();
    v20 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(ObjectType, v18);

    if (!v20)
    {

      return;
    }
    v21 = objc_msgSend(v20, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for PKDrawingCoherence(0);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_14;
    v50 = a2;
    v22 = v52;
    v23 = MEMORY[0x1DF0E666C](v12);
    if (v23)
    {
      v24 = (void *)v23;
      v25 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (!v25)
      {
        __break(1u);
        goto LABEL_17;
      }
      v26 = *(void **)(v25 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
      swift_bridgeObjectRetain();

    }
    else
    {
      v26 = (void *)MEMORY[0x1E0DEE9E8];
    }
    v52 = v26;
    v27 = *(double (**)(void **, uint64_t, uint64_t))((*v14 & *v51) + 0x3D0);
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    v29 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0DEB3D0]);
    v30 = v27(&v52, v28, v29);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    swift_bridgeObjectRelease();
    v37 = MEMORY[0x1DF0E666C](v12);
    if (!v37)
    {
      v41 = MEMORY[0x1E0DEE9E8];
      v40 = v22;
      goto LABEL_13;
    }
    v38 = (void *)v37;
    v39 = *(_QWORD *)(v37 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v39)
    {
      v40 = v22;
      v41 = *(_QWORD *)(v39 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();

LABEL_13:
      v42 = v50;
      v43 = specialized CanvasMembers.leafStrokes(in:)((uint64_t)v40, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v9, 1, 1, v44);
      type metadata accessor for MainActor();
      v20 = v20;
      v45 = v3;
      outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(a1);
      v46 = static MainActor.shared.getter();
      v47 = (double *)swift_allocObject();
      v48 = MEMORY[0x1E0DF06E8];
      *((_QWORD *)v47 + 2) = v46;
      *((_QWORD *)v47 + 3) = v48;
      v47[4] = v30;
      *((_QWORD *)v47 + 5) = v32;
      *((_QWORD *)v47 + 6) = v34;
      *((_QWORD *)v47 + 7) = v36;
      *((_QWORD *)v47 + 8) = v43;
      *((_QWORD *)v47 + 9) = v20;
      *((_QWORD *)v47 + 10) = v45;
      *((_QWORD *)v47 + 11) = a1;
      *((_QWORD *)v47 + 12) = v42;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.startReflowForSelection(completion:), (uint64_t)v47);

      swift_release();
LABEL_14:

      return;
    }
LABEL_17:
    __break(1u);
  }
}

uint64_t closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, double, double);

  v10[3] = a9;
  v10[4] = a10;
  v10[2] = a8;
  v10[5] = type metadata accessor for MainActor();
  v10[6] = static MainActor.shared.getter();
  v17 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                 + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
  v15 = (_QWORD *)swift_task_alloc();
  v10[7] = v15;
  *v15 = v10;
  v15[1] = closure #1 in HandwritingReflowView.startReflowForSelection(completion:);
  return v17(a6, a7, a1, a2);
}

uint64_t closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in HandwritingReflowView.startReflowForSelection(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  void *v8;
  char *v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release();
  if (v1)
  {
    v2 = *(char **)(v0 + 64);
    v3 = *(char **)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    v6 = &v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds];
    v7 = *(_OWORD *)(v5 + 64);
    *(_OWORD *)v6 = *(_OWORD *)(v5 + 48);
    *((_OWORD *)v6 + 1) = v7;
    v8 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = v2;
    v9 = v2;

    v10 = objc_msgSend(v3, sel_setNeedsLayout);
    if (v4)
      (*(void (**)(id))(v0 + 24))(v10);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  void *v33;
  id v34;
  void (*v35)(char *, char *, uint64_t);
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  PKDrawing *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  Class isa;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PKDrawing();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v56 - v22;
  v24 = (_QWORD *)MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v21);
  if (!v24)
    return;
  LODWORD(isa) = a2;
  v59 = a1;
  v60 = a3;
  v25 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v26 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v24) + 0x320);
  v61 = v24;
  v27 = v26();
  if (!v27)
  {

    return;
  }
  v28 = (void *)v27;
  v57 = a4;
  v29 = (void *)(*(uint64_t (**)(void))((*v25 & *v61) + 0x2F8))();
  v31 = v30;
  ObjectType = swift_getObjectType();
  v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(ObjectType, v31);

  if (!v33)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    goto LABEL_10;
  }
  v34 = objc_msgSend(v33, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v35(v13, v18, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_10:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for PKDrawing?);
    return;
  }
  v35(v23, v13, v14);
  v36 = v59;
  *((_BYTE *)v59 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled) = 0;
  if ((isa & 1) != 0)
  {
    v37 = ReflowLayoutManager.strokeTransforms()();
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v61) + 0x5A8))();
    objc_msgSend(v36, sel_frame);
    v38 = (_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds);
    *v38 = v39;
    v38[1] = v40;
    v38[2] = v41;
    v38[3] = v42;
    specialized HandwritingReflowView.updateCurrentReflowingStrokes<A>(_:)(v37);
    swift_bridgeObjectRelease();
  }
  v43 = v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace;
  *(_OWORD *)(v43 + 16) = 0u;
  *(_OWORD *)(v43 + 32) = 0u;
  *(_OWORD *)v43 = 0u;
  *(_BYTE *)(v43 + 48) = 1;
  v44 = v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  *(_BYTE *)(v44 + 48) = 1;
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  PKDrawing._bridgeToObjectiveC()(v45);
  v47 = v46;
  v48 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v49 = (_QWORD *)swift_allocObject();
  v49[2] = v36;
  v49[3] = v48;
  v50 = v36;
  v51 = v60;
  v52 = v57;
  v49[4] = v60;
  v49[5] = v52;
  aBlock[4] = partial apply for closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:);
  aBlock[5] = v49;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_78_0;
  v53 = _Block_copy(aBlock);
  v54 = v50;
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v51);
  swift_release();
  v55 = isa;
  objc_msgSend(v28, sel__setAdditionalStrokes_inDrawing_completion_, isa, v47, v53);

  _Block_release(v53);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
}

void closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(char *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD aBlock[6];

  v5 = a2 + 16;
  v6 = (void *)MEMORY[0x1DF0E666C](&a1[OBJC_IVAR____TtC8PaperKit14ReflowTextView_wrapperView]);
  objc_msgSend(v6, sel_removeFromSuperview);

  objc_msgSend(a1, sel_removeFromSuperview);
  a1[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled] = 1;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v5);
  if (v7)
  {
    v8 = (char *)v7;
    v9 = (void *)objc_opt_self();
    v10 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v10;
    aBlock[4] = closure #1 in HandwritingReflowView.hideCaret()partial apply;
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_85_1;
    v12 = _Block_copy(aBlock);
    v13 = v10;
    swift_release();
    objc_msgSend(v9, sel_animateWithDuration_animations_, v12, 0.2);
    _Block_release(v12);

  }
  if (a3)
    a3();
}

void HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t (*v29)(void);
  void *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Class isa;
  id v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  char *v80;
  void *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  id v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;

  v73 = a7;
  v74 = a3;
  v77 = a5;
  v81 = a4;
  v82 = a1;
  v10 = type metadata accessor for PKDrawing();
  v76 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v75 = v12;
  v80 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v17, v18);
  v19 = type metadata accessor for PKStroke();
  v86 = *(_QWORD **)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v23 = *(v85 - 1);
  v25 = MEMORY[0x1E0C80A78](v85, v24);
  v27 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v7;
  v28 = (_QWORD *)MEMORY[0x1DF0E666C](&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v25);
  if (v28)
  {
    v72 = a6;
    v29 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v28) + 0x320);
    v78 = v28;
    v30 = (void *)v29();
    if (v30)
    {
      v69 = v30;
      v70 = a2;
      v71 = v10;
      v31 = v82;
      v32 = *(_QWORD *)(v82 + 16);
      v33 = MEMORY[0x1E0DEE9D8];
      if (v32)
      {
        v68 = v16;
        v87 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
        v34 = v31 + ((*((unsigned __int8 *)v86 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v86 + 80));
        v35 = (void *)v86[9];
        v83 = (void (*)(char *, uint64_t, uint64_t))v86[2];
        v84 = v35;
        do
        {
          v83(v22, v34, v19);
          isa = PKStroke._bridgeToObjectiveC()().super.isa;
          v37 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
          WeakRef.init(id:)();
          ((void (*)(char *, uint64_t))v86[1])(v22, v19);
          v33 = v87;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
            v33 = v87;
          }
          v39 = *(_QWORD *)(v33 + 16);
          v38 = *(_QWORD *)(v33 + 24);
          if (v39 >= v38 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
            v33 = v87;
          }
          *(_QWORD *)(v33 + 16) = v39 + 1;
          (*(void (**)(unint64_t, char *, _QWORD *))(v23 + 32))(v33+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v39, v27, v85);
          v34 += (uint64_t)v84;
          --v32;
        }
        while (v32);
        v16 = v68;
      }
      v40 = specialized Set.init<A>(_:)(v33);
      swift_bridgeObjectRelease();
      v41 = v81;
      v42 = ReflowLayoutManager.canReplaceStrokesAtomically(_:)(v40);
      v44 = v70;
      v43 = v71;
      if (v42)
      {
        swift_bridgeObjectRelease();
        v45 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v16, 1, 1, v45);
        v46 = v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v80, v73, v43);
        type metadata accessor for MainActor();
        v86 = v79;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47 = v72;
        swift_bridgeObjectRetain();
        v85 = v41;
        v83 = (void (*)(char *, uint64_t, uint64_t))v69;
        v48 = v77;
        swift_bridgeObjectRetain();
        v84 = v78;
        v49 = static MainActor.shared.getter();
        v50 = (*(unsigned __int8 *)(v46 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
        v51 = v43;
        v52 = v44;
        v53 = (v75 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
        v54 = (char *)swift_allocObject();
        v55 = MEMORY[0x1E0DF06E8];
        *((_QWORD *)v54 + 2) = v49;
        *((_QWORD *)v54 + 3) = v55;
        v56 = v82;
        *((_QWORD *)v54 + 4) = v86;
        *((_QWORD *)v54 + 5) = v56;
        *((_QWORD *)v54 + 6) = v52;
        *((_QWORD *)v54 + 7) = v47;
        v57 = v83;
        *((_QWORD *)v54 + 8) = v85;
        *((_QWORD *)v54 + 9) = v57;
        *((_QWORD *)v54 + 10) = v48;
        (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v54[v50], v80, v51);
        v58 = v84;
        *(_QWORD *)&v54[v53] = v84;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), (uint64_t)v54);
        swift_release();

      }
      else
      {
        v59 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v16, 1, 1, v59);
        type metadata accessor for MainActor();
        v60 = v79;
        v61 = v41;
        v62 = v78;
        v63 = v74;
        swift_bridgeObjectRetain();
        v64 = static MainActor.shared.getter();
        v65 = (_QWORD *)swift_allocObject();
        v66 = MEMORY[0x1E0DF06E8];
        v65[2] = v64;
        v65[3] = v66;
        v65[4] = v60;
        v65[5] = v61;
        v65[6] = v62;
        v65[7] = v63;
        v65[8] = v40;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #2 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), (uint64_t)v65);
        swift_release();

      }
    }
    else
    {

    }
  }
}

uint64_t closure #2 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v8[7] = type metadata accessor for MainActor();
  v8[8] = static MainActor.shared.getter();
  v8[9] = dispatch thunk of Actor.unownedExecutor.getter();
  v8[10] = v9;
  return swift_task_switch();
}

uint64_t closure #2 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  v0[11] = static MainActor.shared.getter();
  v0[12] = dispatch thunk of Actor.unownedExecutor.getter();
  v0[13] = v1;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v8 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 112) = static MainActor.shared.getter();
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v4;
  *(_OWORD *)(v4 + 16) = v8;
  v5 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = v1;
  *(_QWORD *)(v4 + 56) = 6;
  *(_BYTE *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = v3;
  *(_BYTE *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v6;
  *v6 = v0;
  v6[1] = closure #2 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v8 + 232) = v14;
  *(_QWORD *)(v8 + 240) = v15;
  *(_OWORD *)(v8 + 216) = v13;
  *(_QWORD *)(v8 + 200) = a7;
  *(_QWORD *)(v8 + 208) = a8;
  *(_QWORD *)(v8 + 184) = a5;
  *(_QWORD *)(v8 + 192) = a6;
  *(_QWORD *)(v8 + 176) = a4;
  type metadata accessor for UUID();
  *(_QWORD *)(v8 + 248) = swift_task_alloc();
  v9 = type metadata accessor for PKStroke();
  *(_QWORD *)(v8 + 256) = v9;
  *(_QWORD *)(v8 + 264) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 272) = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  *(_QWORD *)(v8 + 280) = v10;
  *(_QWORD *)(v8 + 288) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 296) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 304) = static MainActor.shared.getter();
  *(_QWORD *)(v8 + 312) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v8 + 320) = v11;
  return swift_task_switch();
}

uint64_t closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::OpaquePointer v20;
  Swift::OpaquePointer v21;
  uint64_t v22;
  Class v23;
  Class v24;
  PKDrawing *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (**v34)(unint64_t, uint64_t, uint64_t);
  id v35;
  uint64_t v36;

  v1 = v0[23];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v34 = (void (**)(unint64_t, uint64_t, uint64_t))v0[36];
    v36 = MEMORY[0x1E0DEE9D8];
    v4 = v0[33];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v32 = *(_QWORD *)(v4 + 72);
    v33 = v4;
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v3 = v36;
    do
    {
      v6 = v0[34];
      v7 = v0[32];
      v31(v6, v5, v7);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v9 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      WeakRef.init(id:)();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v6, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v36;
      }
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v3 = v36;
      }
      v12 = v0[37];
      v13 = v0[35];
      *(_QWORD *)(v3 + 16) = v11 + 1;
      v34[4](v3+ ((*((unsigned __int8 *)v34 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v34 + 80))+ (_QWORD)v34[9] * v11, v12, v13);
      v5 += v32;
      --v2;
    }
    while (v2);
  }
  v35 = (id)v0[27];
  v14 = v0[24];
  v15 = v0[25];
  v16 = specialized Set.init<A>(_:)(v3);
  swift_bridgeObjectRelease();
  v17 = ReflowLayoutManager.copy()();
  ReflowLayoutManager.replaceStrokes(_:with:)(v16, v14);
  v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_BYTE *)(v17 + 218) = 0;
  swift_beginAccess();
  v20._rawValue = *(void **)(v17 + 80);
  swift_beginAccess();
  v21._rawValue = *(void **)(v17 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = ReflowLayoutManager.strokeTransforms()();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5095_s8PaperKit21HandwritingReflowViewC19transformsReplacing_4with11animatingTo13reflowTextboxSay06d3B08f39VGShy9Coherence7WeakRefVyAL10CRRegistery18AL14SharedTagged_2y25AA0T6StrokeVGGGG_SayAA0D7B25CGAkA0d4TextE0CtFA2JXEfU_SDy9Coherence0X0VyAM10CRRegisterVyAM14SharedTagged_2Vy0iE012TaggedStrokeVGGGSo17CGAffineTransformVGTf1cn_nTf4ng_n(v15, v22);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v23 = Array._bridgeToObjectiveC()().super.isa;
  v0[41] = v23;
  v24 = Array._bridgeToObjectiveC()().super.isa;
  v0[42] = v24;
  swift_bridgeObjectRelease();
  PKDrawing._bridgeToObjectiveC()(v25);
  v27 = v26;
  v0[43] = v26;
  v0[2] = v0;
  v0[3] = closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:);
  v28 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v29 = v0 + 10;
  v29[1] = 0x40000000;
  v29[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
  v29[3] = &block_descriptor_61_0;
  v29[4] = v28;
  objc_msgSend(v35, sel_setupRefineAnimationFrom_to_inDrawing_completionHandler_, v23, v24, v27, v29);
  return swift_continuation_await();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 336);
  v2 = *(void **)(v0 + 328);
  v3 = *(void **)(v0 + 216);

  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 352) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = 0x3FE0000000000000;
  v5 = v3;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v6;
  *v6 = v0;
  v6[1] = closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:);
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(*(_QWORD *)(v0 + 240), (uint64_t)partial apply for closure #2 in closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v4);
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;

  v1 = (void *)v0[27];
  v2 = swift_allocObject();
  v0[46] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[47] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:);
  return HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(v0[23], v0[24], v0[26], v0[30], 0, (uint64_t)partial apply for closure #3 in closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v2, 0.5);
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(uint64_t a1, void *a2, uint64_t a3)
{
  char *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v4 = v3;
  v8 = type metadata accessor for PKDrawing();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v12 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v15);
  if (v18)
  {
    v19 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x320);
    v35 = v18;
    v20 = v19();
    if (v20)
    {
      v21 = (void *)v20;
      v22 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v17, 1, 1, v22);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
      type metadata accessor for MainActor();
      swift_bridgeObjectRetain();
      v34 = v4;
      v33 = a2;
      v32 = v21;
      v23 = v35;
      v24 = static MainActor.shared.getter();
      v25 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v26 = a1;
      v27 = (v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
      v28 = (char *)swift_allocObject();
      v29 = MEMORY[0x1E0DF06E8];
      *((_QWORD *)v28 + 2) = v24;
      *((_QWORD *)v28 + 3) = v29;
      v30 = v34;
      *((_QWORD *)v28 + 4) = v26;
      *((_QWORD *)v28 + 5) = v30;
      v31 = v32;
      *((_QWORD *)v28 + 6) = v33;
      *((_QWORD *)v28 + 7) = v31;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v28[v25], v12, v8);
      *(_QWORD *)&v28[v27] = v23;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), (uint64_t)v28);
      swift_release();

    }
    else
    {

    }
  }
}

uint64_t closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v8[26] = a8;
  v8[27] = v11;
  v8[24] = a6;
  v8[25] = a7;
  v8[22] = a4;
  v8[23] = a5;
  type metadata accessor for MainActor();
  v8[28] = static MainActor.shared.getter();
  v8[29] = dispatch thunk of Actor.unownedExecutor.getter();
  v8[30] = v9;
  return swift_task_switch();
}

uint64_t closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::OpaquePointer v14;
  Swift::OpaquePointer v15;
  uint64_t v16;
  void *v17;
  Class isa;
  PKDrawing *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v1 = v0[22];
  v24 = MEMORY[0x1E0DEE9D8];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
    goto LABEL_15;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_14;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  v4 = 0;
  v5 = MEMORY[0x1E0DEE9D8];
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      MEMORY[0x1DF0E4D64](v4, v0[22]);
    else
      swift_retain();
    type metadata accessor for ReflowWord();
    v8 = swift_dynamicCastClass();
    if (v8)
    {
      v6 = objc_msgSend(*(id *)(v8 + 272), sel_strokes);
      type metadata accessor for PKStroke();
      v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v7 = v5;
    }
    swift_release();
    ++v4;
    specialized Array.append<A>(contentsOf:)(v7);
  }
  while (v2 != v4);
  swift_bridgeObjectRelease();
  v9 = v24;
LABEL_15:
  v0[31] = v9;
  v10 = v0[22];
  v11 = ReflowLayoutManager.copy()();
  ReflowLayoutManager.replaceStrokes(_:with:)(MEMORY[0x1E0DEE9E8], v10);
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_BYTE *)(v11 + 218) = 0;
  swift_beginAccess();
  v14._rawValue = *(void **)(v11 + 80);
  swift_beginAccess();
  v15._rawValue = *(void **)(v11 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = ReflowLayoutManager.strokeTransforms()();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5095_s8PaperKit21HandwritingReflowViewC19transformsReplacing_4with11animatingTo13reflowTextboxSay06d3B08f39VGShy9Coherence7WeakRefVyAL10CRRegistery18AL14SharedTagged_2y25AA0T6StrokeVGGGG_SayAA0D7B25CGAkA0d4TextE0CtFA2JXEfU_SDy9Coherence0X0VyAM10CRRegisterVyAM14SharedTagged_2Vy0iE012TaggedStrokeVGGGSo17CGAffineTransformVGTf1cn_nTf4ng_n(v9, v16);
  swift_bridgeObjectRelease();
  swift_release();
  if (one-time initialization token for handwritingReflowPasteAnimationDuration != -1)
    swift_once();
  v17 = (void *)v0[25];
  v0[32] = static UIConstants.handwritingReflowPasteAnimationDuration;
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[33] = isa;
  swift_bridgeObjectRelease();
  PKDrawing._bridgeToObjectiveC()(v19);
  v21 = v20;
  v0[34] = v20;
  v0[2] = v0;
  v0[3] = closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:);
  v22 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v23 = v0 + 10;
  v23[1] = 0x40000000;
  v23[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
  v23[3] = &block_descriptor_44_1;
  v23[4] = v22;
  objc_msgSend(v17, sel_setupStrokeInAnimationTo_inDrawing_completionHandler_, isa, v21, v23);
  return swift_continuation_await();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(void **)(v0 + 200);

  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 280) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = v3;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v6;
  *v6 = v0;
  v6[1] = closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:);
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(*(_QWORD *)(v0 + 216), (uint64_t)partial apply for closure #2 in closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v4);
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;

  v1 = *(void **)(v0 + 200);
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 296) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v4;
  *v4 = v0;
  v4[1] = closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:);
  return HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 216), 0, (uint64_t)partial apply for closure #3 in closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v2, *(double *)(v0 + 256));
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void one-time initialization function for autoCloseAfterScratchToDelete()
{
  id v0;
  void *v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000002ELL, 0x80000001DDF59C80);
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  static HandwritingReflowView.autoCloseAfterScratchToDelete = v2;
}

uint64_t closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = a8;
  v31 = a6;
  v32 = a3;
  v34 = a9;
  v33 = a11;
  v29 = a5;
  v30 = a12;
  v16 = a7 & 1;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v21 = MEMORY[0x1E0C80A78](v17, v20);
  v22 = *(_QWORD *)&a3[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t, uint64_t, double))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x4B8))(a2, v22, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*v23 & *a1) + 0x498))(a4, v29, v31, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a12, v17);
  v24 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v25 = swift_allocObject();
  v26 = v33;
  *(_QWORD *)(v25 + 16) = a10;
  *(_QWORD *)(v25 + 24) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v25 + v24, (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(a10);
  HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(v32, v34, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:), v25);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(void (*a1)(void))
{
  if (a1)
    a1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v9 + 208) = a7;
  *(_QWORD *)(v9 + 216) = v8;
  *(_QWORD *)(v9 + 200) = a6;
  *(_BYTE *)(v9 + 488) = a5;
  *(double *)(v9 + 192) = a8;
  *(_QWORD *)(v9 + 176) = a3;
  *(_QWORD *)(v9 + 184) = a4;
  *(_QWORD *)(v9 + 160) = a1;
  *(_QWORD *)(v9 + 168) = a2;
  type metadata accessor for UUID();
  *(_QWORD *)(v9 + 224) = swift_task_alloc();
  v10 = type metadata accessor for PKStroke();
  *(_QWORD *)(v9 + 232) = v10;
  *(_QWORD *)(v9 + 240) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 248) = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  *(_QWORD *)(v9 + 256) = v11;
  *(_QWORD *)(v9 + 264) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 272) = swift_task_alloc();
  *(_QWORD *)(v9 + 280) = type metadata accessor for MainActor();
  *(_QWORD *)(v9 + 288) = static MainActor.shared.getter();
  *(_QWORD *)(v9 + 296) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v9 + 304) = v12;
  return swift_task_switch();
}

uint64_t HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::OpaquePointer v3;
  Swift::OpaquePointer v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 176) + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  *(_QWORD *)(v0 + 312) = v2;
  *(_BYTE *)(v2 + 218) = 0;
  swift_beginAccess();
  v3._rawValue = *(void **)(v2 + 80);
  swift_beginAccess();
  v4._rawValue = *(void **)(v2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  v67 = v0;
  if (v5)
  {
    v61 = v2;
    v66 = *(_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 160);
    v68 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v9 = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v63 = *(_QWORD *)(v7 + 72);
    v64 = v7;
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v6 = v68;
    do
    {
      v10 = *(_QWORD *)(v0 + 248);
      v11 = *(_QWORD *)(v0 + 232);
      v62(v10, v9, v11);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v13 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      WeakRef.init(id:)();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v10, v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v68;
      }
      v15 = *(_QWORD *)(v6 + 16);
      v14 = *(_QWORD *)(v6 + 24);
      v0 = v67;
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v6 = v68;
      }
      v16 = *(_QWORD *)(v67 + 272);
      v17 = *(_QWORD *)(v67 + 256);
      *(_QWORD *)(v6 + 16) = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 32))(v6+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v15, v16, v17);
      v9 += v63;
      --v5;
    }
    while (v5);
    v2 = v61;
  }
  v18 = *(_QWORD *)(v0 + 168);
  v19 = specialized Set.init<A>(_:)(v6);
  swift_bridgeObjectRelease();
  v20 = ReflowLayoutManager.replaceStrokes(_:with:)(v19, v18);
  v22 = v21;
  *(_QWORD *)(v0 + 136) = v20;
  *(_QWORD *)(v0 + 144) = v21;
  *(_QWORD *)(v0 + 152) = v23;
  v65 = v23;
  *(_QWORD *)(v0 + 320) = v23;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v2 = v21;
    else
      v2 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    if (!v24)
      goto LABEL_21;
  }
  else
  {
    v24 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v24)
      goto LABEL_21;
  }
  if (v24 < 1)
  {
    __break(1u);
    goto LABEL_37;
  }
  v25 = 0;
  do
  {
    if ((v22 & 0xC000000000000001) != 0)
    {
      v26 = MEMORY[0x1DF0E4D64](v25, v22);
    }
    else
    {
      v26 = *(_QWORD *)(v22 + 8 * v25 + 32);
      swift_retain();
    }
    ++v25;
    v27 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v26 + 296))();
    objc_msgSend(v27, sel_removeFromSuperlayer);
    swift_release();

  }
  while (v24 != v25);
LABEL_21:
  v28 = *(unsigned __int8 *)(v0 + 488);
  result = swift_bridgeObjectRelease();
  if (v28 != 1)
    goto LABEL_39;
  v2 = *(_QWORD *)(v0 + 168);
  if (v2 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v30 = result;
    if (result)
      goto LABEL_24;
    goto LABEL_38;
  }
  v30 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v30)
  {
LABEL_24:
    if (v30 < 1)
      goto LABEL_59;
    v31 = 0;
    v32 = v2 & 0xC000000000000001;
    v33 = *(_QWORD *)(v0 + 168) + 32;
    do
    {
      if (v32)
      {
        v34 = MEMORY[0x1DF0E4D64](v31, *(_QWORD *)(v0 + 168));
      }
      else
      {
        v34 = *(_QWORD *)(v33 + 8 * v31);
        swift_retain();
      }
      v35 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 296))();
      if (v35)
      {
        v36 = (void *)v35;
        v37 = objc_msgSend(*(id *)(v67 + 176), sel_layer);
        objc_msgSend(v37, sel_addSublayer_, v36);

        if (one-time initialization token for showDebugUI != -1)
          swift_once();
        if (static ReflowTextView.showDebugUI == 1)
          objc_msgSend(v36, sel_setBorderWidth_, 1.0);

      }
      ++v31;
      swift_release();
      v0 = v67;
    }
    while (v30 != v31);
  }
LABEL_38:
  result = swift_bridgeObjectRelease();
LABEL_39:
  if (v24)
  {
    if (v24 >= 1)
    {
      swift_bridgeObjectRetain();
      v38 = 0;
      v39 = 0;
      do
      {
        if ((v22 & 0xC000000000000001) != 0)
          v40 = MEMORY[0x1DF0E4D64](v38, v22);
        else
          v40 = swift_retain();
        v41 = *(_QWORD *)(v40 + 120);
        swift_release();
        if (v41 <= v39)
          v42 = v39;
        else
          v42 = v41;
        if (v41 >= 0)
          v39 = v42;
        ++v38;
      }
      while (v24 != v38);
      swift_bridgeObjectRelease();
      goto LABEL_53;
    }
    __break(1u);
LABEL_59:
    __break(1u);
    return result;
  }
  v39 = 0;
LABEL_53:
  v43 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRelease();
  v44 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v43 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing) & 1) != 0)
  {
    v45 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 184)) + 0x320))(v44);
    if (v45)
    {
      v46 = v45;
      v47 = objc_msgSend(v45, sel_simultaneousDrawingGestureRecognizer);

      if (v47)
      {
        v48 = *(_QWORD *)(v0 + 216);
        v49 = *(_QWORD *)(v0 + 176);
        objc_msgSend(v47, sel_locationInView_, v48);
        v51 = v50;
        v53 = v52;
        ReflowTextView.caretRect(for:lines:in:)(0, v39, v48);
        HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)(v49, v65, 0, v39, 0, v51, v53, v54, v55, v56, v57);

      }
    }
  }
  v58 = *(_QWORD *)(v0 + 216);
  v59 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace;
  *(_QWORD *)(v0 + 328) = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace;
  *(_BYTE *)(v58 + v59) = 0;
  *(_QWORD *)(v0 + 336) = static MainActor.shared.getter();
  *(_QWORD *)(v0 + 344) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v0 + 352) = v60;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[27];
  v0[45] = static MainActor.shared.getter();
  v2 = swift_task_alloc();
  v0[46] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[47] = v3;
  *v3 = v0;
  v3[1] = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  double *v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Double v6;
  _QWORD *v7;
  void *v8;
  Swift::OpaquePointer v9;
  Swift::OpaquePointer v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(_BYTE *)(*((_QWORD *)v0 + 27) + *((_QWORD *)v0 + 41));
  if ((v1 & 1) == 0)
  {
    v3 = *((_QWORD *)v0 + 21);
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v18)
        goto LABEL_8;
    }
    else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_8;
    }
    if (one-time initialization token for autoCloseAfterScratchToDelete != -1)
      swift_once();
    if (static HandwritingReflowView.autoCloseAfterScratchToDelete != 1)
      goto LABEL_2;
LABEL_8:
    v4 = *((_QWORD *)v0 + 39);
    v5 = *((_QWORD *)v0 + 27);
    v6 = v0[24];
    v7 = (_QWORD *)*((_QWORD *)v0 + 23);
    ReflowTextView.startAnimating(endingIn:smoothstep:)(v6, 1);
    v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x320))();
    objc_msgSend(v8, sel__pauseHoverPreviewForTimeInterval_, v6);

    swift_beginAccess();
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 202) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    swift_release();
    v9._rawValue = *(void **)(v4 + 80);
    v10._rawValue = *(void **)(v4 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ReflowLayoutManager.layoutText(contents:lines:)(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = (void *)objc_opt_self();
    v12 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    *((_QWORD *)v0 + 6) = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
    *((_QWORD *)v0 + 7) = v13;
    *((_QWORD *)v0 + 2) = MEMORY[0x1E0C809B0];
    *((_QWORD *)v0 + 3) = 1107296256;
    *((_QWORD *)v0 + 4) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)v0 + 5) = &block_descriptor_33_2;
    v14 = _Block_copy(v0 + 2);
    v15 = v12;
    swift_release();
    objc_msgSend(v11, sel_animateWithDuration_animations_, v14, 0.2);
    _Block_release(v14);
    *((_QWORD *)v0 + 48) = static MainActor.shared.getter();
    *((_QWORD *)v0 + 49) = dispatch thunk of Actor.unownedExecutor.getter();
    *((_QWORD *)v0 + 50) = v16;
    return swift_task_switch();
  }
LABEL_2:
  *((_BYTE *)v0 + 489) = v1;
  v0[54] = v0[17];
  *((_QWORD *)v0 + 55) = static MainActor.shared.getter();
  *((_QWORD *)v0 + 56) = dispatch thunk of Actor.unownedExecutor.getter();
  *((_QWORD *)v0 + 57) = v2;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  v0[51] = static MainActor.shared.getter();
  v2 = swift_task_alloc();
  v0[52] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[53] = v3;
  *v3 = v0;
  v3[1] = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 489) = 1;
  *(_QWORD *)(v0 + 432) = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 440) = static MainActor.shared.getter();
  *(_QWORD *)(v0 + 448) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v0 + 456) = v1;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_BYTE *)(v0 + 489);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v10 = *(_OWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 464) = static MainActor.shared.getter();
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 472) = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_OWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 40) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v7 + 48) = v1;
  *(_QWORD *)(v7 + 56) = 6;
  *(_BYTE *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = v3;
  *(_BYTE *)(v7 + 80) = v2;
  *(_QWORD *)(v7 + 88) = v5;
  *(_QWORD *)(v7 + 96) = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v8;
  *v8 = v0;
  v8[1] = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v1 = *(void **)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 216);
  swift_release();
  v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox) = 0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  id v29;
  _QWORD *v30;
  _QWORD *v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  void *v43;
  id v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  int v59;
  char *v60;
  CGRect v61;
  CGRect v62;

  v59 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v60 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PKDrawing();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v56 - v23;
  result = MEMORY[0x1DF0E666C](&v4[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v22);
  if (result)
  {
    v26 = (_QWORD *)result;
    v57 = v4;
    v58 = a2;
    v27 = *(_QWORD *)&a4[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    v28 = (id)swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v27 + 88) + 16) == 1)
    {
      v29 = objc_msgSend(a4, sel_frame);
      v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v31 = (_QWORD *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x2F8))(v29);
      v32 = (*(double (**)(void))((*v30 & *v31) + 0x138))();
      v34 = v33;
      v36 = v35;
      v38 = v37;

      v61.origin.x = v32;
      v61.origin.y = v34;
      v61.size.width = v36;
      v61.size.height = v38;
      CGRectGetMaxX(v61);
      objc_msgSend(a4, sel_frame);
      CGRectGetMinX(v62);
      objc_msgSend(a4, sel_frame);
      v28 = objc_msgSend(a4, sel_setFrame_);
    }
    v56 = a1;
    if (!*(_QWORD *)(a1 + 16) && (v59 & 1) != 0)
    {
      v39 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x2F8))(v28);
      v41 = v40;
      ObjectType = swift_getObjectType();
      v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(ObjectType, v41);

      if (v43)
      {
        v44 = objc_msgSend(v43, sel_drawing);

        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
        v45 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
        v45(v14, v19, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
        {
          v45(v24, v14, v15);
          HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(v58, a4, (uint64_t)v24);

          return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v24, v15);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PKDrawing?);
    }
    v46 = type metadata accessor for TaskPriority();
    v47 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v60, 1, 1, v46);
    type metadata accessor for MainActor();
    v48 = a4;
    v49 = v26;
    v50 = v57;
    v51 = v56;
    swift_bridgeObjectRetain();
    v52 = v58;
    swift_bridgeObjectRetain();
    v53 = static MainActor.shared.getter();
    v54 = (_QWORD *)swift_allocObject();
    v55 = MEMORY[0x1E0DF06E8];
    v54[2] = v53;
    v54[3] = v55;
    v54[4] = v48;
    v54[5] = v49;
    v54[6] = v50;
    v54[7] = v51;
    v54[8] = v52;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v47, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:), (uint64_t)v54);

    return swift_release();
  }
  return result;
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v10;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v8[7] = type metadata accessor for MainActor();
  v8[8] = static MainActor.shared.getter();
  v10 = (_QWORD *)swift_task_alloc();
  v8[9] = v10;
  *v10 = v8;
  v10[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:);
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(a5, 0, 0);
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[10] = (uint64_t)v3;
  *v3 = v2;
  v3[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:);
  return HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(v1[5], v1[6], v1[2], v1[3], 1, 0, 0, 0.3);
}

{
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

Swift::Void __swiftcall HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(Swift::OpaquePointer _, Swift::OpaquePointer with, Swift::Bool strokeIn)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  char *v44;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (v16)
  {
    v44 = v16;
    v17 = Array<A>.strokeRefs.getter((uint64_t)_._rawValue);
    v18 = swift_bridgeObjectRetain();
    v19 = Array<A>.strokeRefs.getter(v18);
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(specialized _NativeSet.intersection(_:)(v17, v19) + 16);
    swift_release();
    if ((double)v20 / (double)*(uint64_t *)(v17 + 16) < 0.7)
    {
      swift_bridgeObjectRelease();
      HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)((uint64_t)_._rawValue, (uint64_t)with._rawValue, strokeIn, v44);
LABEL_11:

      return;
    }
    v41 = (_QWORD *)MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    if (v41)
    {
      v42 = v41;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v41) + 0x498))(MEMORY[0x1E0DEE9E8], v17, 6, 0);

      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = (_QWORD *)MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v13);
    if (v21)
    {
      v22 = v21;
      v23 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0x2F8))();
      v25 = v24;

      ObjectType = swift_getObjectType();
      v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(ObjectType, v25);

      if (v27)
      {
        v28 = *((_QWORD *)_._rawValue + 2);
        v29 = type metadata accessor for PKStroke();
        v30 = *(_QWORD *)(v29 - 8);
        if (v28)
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v15, (char *)_._rawValue+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)), v29);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v15, 1, v29) != 1)
          {
            PKStroke.renderBounds.getter();
            v32 = v31;
            v34 = v33;
            (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v29);
            v35 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v10, 1, 1, v35);
            v36 = swift_allocObject();
            swift_unknownObjectWeakInit();
            type metadata accessor for MainActor();
            swift_bridgeObjectRetain();
            swift_retain();
            v37 = v27;
            swift_bridgeObjectRetain();
            v38 = static MainActor.shared.getter();
            v39 = swift_allocObject();
            v40 = MEMORY[0x1E0DF06E8];
            *(_QWORD *)(v39 + 16) = v38;
            *(_QWORD *)(v39 + 24) = v40;
            *(_QWORD *)(v39 + 32) = v36;
            *(_QWORD *)(v39 + 40) = v32;
            *(_QWORD *)(v39 + 48) = v34;
            *(Swift::OpaquePointer *)(v39 + 56) = _;
            *(_QWORD *)(v39 + 64) = v37;
            *(Swift::OpaquePointer *)(v39 + 72) = with;
            *(_BYTE *)(v39 + 80) = strokeIn;
            swift_release();
            _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:), v39);
            swift_release();

            return;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v15, 1, 1, v29);
        }

        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
      }
    }
  }
}

uint64_t Array<A>.strokeRefs.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = type metadata accessor for PKStroke();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v9 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v28 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v16 = *(_QWORD *)(v5 + 72);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v25 = v16;
    v26 = v5;
    do
    {
      v24(v8, v15, v4);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v18 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v28;
      }
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v14 = v28;
      }
      *(_QWORD *)(v14 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v20, v12, v27);
      v5 = v26;
      v15 += v25;
      --v13;
    }
    while (v13);
  }
  v21 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v10 + 184) = a10;
  *(_QWORD *)(v10 + 120) = a8;
  *(_QWORD *)(v10 + 128) = a9;
  *(_QWORD *)(v10 + 112) = a7;
  *(double *)(v10 + 96) = a1;
  *(double *)(v10 + 104) = a2;
  *(_QWORD *)(v10 + 88) = a6;
  type metadata accessor for MainActor();
  *(_QWORD *)(v10 + 136) = static MainActor.shared.getter();
  *(_QWORD *)(v10 + 144) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v10 + 152) = v11;
  return swift_task_switch();
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, double, double);

  v1 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  *(_QWORD *)(v0 + 160) = v2;
  if (v2)
  {
    v5 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                  + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v3;
    *v3 = v0;
    v3[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:);
    return v5(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(double *)(v0 + 96), *(double *)(v0 + 104));
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::OpaquePointer v8;
  Swift::OpaquePointer v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 176);
  swift_release();
  if (v1)
  {
    v2 = *(char **)(v0 + 176);
    v3 = *(void **)(v0 + 160);
    v4 = *(unsigned __int8 *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    *(_BYTE *)(v7 + 218) = 0;
    swift_beginAccess();
    v8._rawValue = *(void **)(v7 + 80);
    swift_beginAccess();
    v9._rawValue = *(void **)(v7 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ReflowLayoutManager.layoutText(contents:lines:)(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(v6, v5, v4, v2);

  }
  else
  {
    v10 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    v3 = *(void **)(v0 + 160);
    if (v10)
    {
      v11 = (_QWORD *)v10;
      v12 = Array<A>.strokeRefs.getter(*(_QWORD *)(v0 + 112));
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x498))(MEMORY[0x1E0DEE9E8], v12, 6, 0);

      swift_bridgeObjectRelease();
      v3 = v11;
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  void **v30;
  void *v31;
  char *v32;
  PKDrawing *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  void *v55;
  id v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PKDrawing();
  v87 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v76 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v75 = (char *)&v75 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (void **)((char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = a1;
  v82 = a3;
  v25.n128_f64[0] = ReflowLayoutManager.textSize(for:)(a1);
  v26 = v5;
  v90 = MEMORY[0x1E0DEE9D8];
  v91 = MEMORY[0x1E0DEE9D8];
  v27 = *(_QWORD *)(a2 + 16);
  if (v27)
  {
    v28 = v25.n128_f64[0];
    v78 = a4;
    v79 = v13;
    v80 = v26;
    v86 = (char *)v24 + *(int *)(v20 + 48);
    v29 = a2 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v85 = *(_QWORD *)(v21 + 72);
    v77 = a2;
    swift_bridgeObjectRetain();
    v30 = v24;
    v83 = v24;
    v84 = v14;
    do
    {
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v29, (uint64_t)v30, &demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
      v31 = *v30;
      v32 = v86;
      PKDrawing._bridgeToObjectiveC()(v33);
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v32, v14);
      type metadata accessor for PKDrawingCoherence(0);
      v36 = (void *)swift_dynamicCastClass();
      if (v36)
      {
        v37 = v36;
        objc_msgSend(v36, sel_set_canvasBounds_, 0.0, 0.0, 0.0, 0.0);
        CHReflowableTextToken.overestimatedTextSize.getter();
        v39 = v28 / v38;
        if (v39 <= 1.25)
          v40 = v39;
        else
          v40 = 1.25;
        if (v39 >= 0.75)
          v41 = v40;
        else
          v41 = 0.75;
        type metadata accessor for ReflowWord();
        swift_allocObject();
        v88 = v31;
        v42 = v31;
        v43 = v35;
        ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v42, v37, 0, v41);
        v44 = swift_retain();
        MEMORY[0x1DF0E4398](v44);
        if (*(_QWORD *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_allocObject();
        v45 = v42;
        v46 = v43;
        ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v45, v37, 0, 1.0);
        v47 = swift_retain();
        MEMORY[0x1DF0E4398](v47);
        if (*(_QWORD *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
        swift_release();
        v30 = v83;
        v14 = v84;
        v31 = v88;
      }

      v29 += v85;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    v13 = v79;
    v26 = v80;
    LOBYTE(a4) = v78;
  }
  v48 = v26;
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_36:
    v71 = v91;
    if (v91 >> 62)
    {
      type metadata accessor for ReflowElement();
      swift_bridgeObjectRetain();
      v72 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for ReflowElement();
      v72 = v71;
    }
    swift_bridgeObjectRelease();
    HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(v81, v72, 0, v82);
    return swift_bridgeObjectRelease();
  }
  v49 = (_QWORD *)MEMORY[0x1DF0E666C](v26 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v25);
  if (!v49
    || (v50 = v49,
        v51 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v49) + 0x2F8))(),
        v53 = v52,
        v50,
        ObjectType = swift_getObjectType(),
        v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(ObjectType, v53),
        v51,
        !v55))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v13, 1, 1, v14);
    goto LABEL_35;
  }
  v56 = objc_msgSend(v55, sel_drawing);

  v57 = v76;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  v58 = v87;
  v59 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
  v59(v13, v57, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v13, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v13, 1, v14) == 1)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for PKDrawing?);
    goto LABEL_36;
  }
  v59(v75, v13, v14);
  v60 = v91;
  if (v91 >> 62)
  {
    type metadata accessor for ReflowElement();
    swift_bridgeObjectRetain();
    v61 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for ReflowElement();
    v61 = v60;
  }
  swift_bridgeObjectRelease();
  v62 = v90;
  if (v90 >> 62)
  {
    type metadata accessor for ReflowElement();
    swift_bridgeObjectRetain();
    v63 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for ReflowElement();
    v63 = v62;
  }
  swift_bridgeObjectRelease();
  v64 = v91;
  v89 = MEMORY[0x1E0DEE9D8];
  if (v91 >> 62)
  {
    swift_bridgeObjectRetain_n();
    result = _CocoaArrayWrapper.endIndex.getter();
    v65 = result;
    if (result)
      goto LABEL_27;
LABEL_44:
    swift_bridgeObjectRelease_n();
    v73 = MEMORY[0x1E0DEE9D8];
LABEL_45:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v74 = (uint64_t)v75;
    HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(v81, v61, v63, v82, v81, v73, (uint64_t)v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 8))(v74, v14);
  }
  v65 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n();
  if (!v65)
    goto LABEL_44;
LABEL_27:
  v84 = v14;
  v80 = v48;
  if (v65 >= 1)
  {
    v67 = 0;
    do
    {
      if ((v64 & 0xC000000000000001) != 0)
      {
        v68 = MEMORY[0x1DF0E4D64](v67, v64);
      }
      else
      {
        v68 = *(_QWORD *)(v64 + 8 * v67 + 32);
        swift_retain();
      }
      ++v67;
      v69 = objc_msgSend(*(id *)(v68 + 272), sel_strokes);
      type metadata accessor for PKStroke();
      v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      swift_release();

      specialized Array.append<A>(contentsOf:)(v70);
    }
    while (v65 != v67);
    swift_bridgeObjectRelease_n();
    v73 = v89;
    v14 = v84;
    goto LABEL_45;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(Swift::OpaquePointer _, Swift::OpaquePointer with, Swift::Bool animateRefinement)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (v16)
  {
    v38 = v16;
    HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)((uint64_t)_._rawValue, (uint64_t)with._rawValue, v38, animateRefinement);

    return;
  }
  v17 = (_QWORD *)MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v13);
  if (v17)
  {
    v18 = v17;
    v19 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x2F8))();
    v21 = v20;

    ObjectType = swift_getObjectType();
    v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(ObjectType, v21);

    if (v23)
    {
      v24 = *((_QWORD *)_._rawValue + 2);
      v25 = type metadata accessor for PKStroke();
      v26 = *(_QWORD *)(v25 - 8);
      if (v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v15, (char *)_._rawValue+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)), v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v15, 0, 1, v25);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v15, 1, v25) != 1)
        {
          PKStroke.renderBounds.getter();
          v28 = v27;
          v30 = v29;
          (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v25);
          v31 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v10, 1, 1, v31);
          v32 = swift_allocObject();
          swift_unknownObjectWeakInit();
          type metadata accessor for MainActor();
          swift_bridgeObjectRetain();
          swift_retain();
          v33 = v23;
          swift_bridgeObjectRetain();
          v34 = static MainActor.shared.getter();
          v35 = swift_allocObject();
          v36 = MEMORY[0x1E0DF06E8];
          *(_QWORD *)(v35 + 16) = v34;
          *(_QWORD *)(v35 + 24) = v36;
          *(_QWORD *)(v35 + 32) = v32;
          *(_QWORD *)(v35 + 40) = v28;
          *(_QWORD *)(v35 + 48) = v30;
          *(Swift::OpaquePointer *)(v35 + 56) = _;
          *(_QWORD *)(v35 + 64) = v33;
          *(Swift::OpaquePointer *)(v35 + 72) = with;
          *(_BYTE *)(v35 + 80) = animateRefinement;
          swift_release();
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:), v35);
          swift_release();

          return;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v15, 1, 1, v25);
      }

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
    }
  }
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v10 + 184) = a10;
  *(_QWORD *)(v10 + 120) = a8;
  *(_QWORD *)(v10 + 128) = a9;
  *(_QWORD *)(v10 + 112) = a7;
  *(double *)(v10 + 96) = a1;
  *(double *)(v10 + 104) = a2;
  *(_QWORD *)(v10 + 88) = a6;
  type metadata accessor for MainActor();
  *(_QWORD *)(v10 + 136) = static MainActor.shared.getter();
  *(_QWORD *)(v10 + 144) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v10 + 152) = v11;
  return swift_task_switch();
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, double, double);

  v1 = *(_QWORD *)(v0 + 88) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  *(_QWORD *)(v0 + 160) = v2;
  if (v2)
  {
    v5 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                  + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v3;
    *v3 = v0;
    v3[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:);
    return v5(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(double *)(v0 + 96), *(double *)(v0 + 104));
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::OpaquePointer v8;
  Swift::OpaquePointer v9;

  v1 = *(_QWORD *)(v0 + 176);
  swift_release();
  if (v1)
  {
    v2 = *(char **)(v0 + 176);
    v3 = *(void **)(v0 + 160);
    v4 = *(unsigned __int8 *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    v8._rawValue = *(void **)(v7 + 80);
    swift_beginAccess();
    v9._rawValue = *(void **)(v7 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ReflowLayoutManager.layoutText(contents:lines:)(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)(v6, v5, v2, v4);

  }
  else
  {
    v3 = *(void **)(v0 + 160);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

Swift::Void __swiftcall HandwritingReflowView.beginTransform()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  __int128 v11;
  CGFloat v12;
  CGFloat v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  _OWORD v34[3];
  _OWORD v35[2];
  double v36;
  double v37;
  CGAffineTransform v38;
  CGAffineTransform t1;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 1;
  v7 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  v8 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v4);
  if (v8)
  {
    v9 = (void *)v8;
    AnyCanvas.isResizingChanged()();

  }
  HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)v34);
  v10 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  v11 = v34[1];
  *(_OWORD *)v10 = v34[0];
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = v34[2];
  HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)v35);
  v30 = v35[1];
  v31 = v35[0];
  v12 = v36;
  v13 = v37;
  ResizeView.modelToViewTransform.getter((__int128 *)&v38);
  *(_OWORD *)&t1.a = v31;
  *(_OWORD *)&t1.c = v30;
  t1.tx = v12;
  t1.ty = v13;
  v33 = v38;
  CGAffineTransformConcat(&v32, &t1, &v33);
  v14 = *(_OWORD *)&v32.c;
  v15 = *(_OWORD *)&v32.tx;
  v16 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  *(_OWORD *)v16 = *(_OWORD *)&v32.a;
  *((_OWORD *)v16 + 1) = v14;
  *((_OWORD *)v16 + 2) = v15;
  v17 = MEMORY[0x1DF0E666C](v7);
  if (v17)
  {
    v18 = (void *)v17;
    HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)&t1);
    v19 = &v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
    v20 = *(_OWORD *)&t1.c;
    *(_OWORD *)v19 = *(_OWORD *)&t1.a;
    *((_OWORD *)v19 + 1) = v20;
    *((_OWORD *)v19 + 2) = *(_OWORD *)&t1.tx;
    v19[48] = 0;
    v21 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
    if (v21 < 2 || *(_BYTE *)(v21 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category) == 1)
    {
      v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
      if (v22)
      {
        v23 = 1;
LABEL_10:
        *(_BYTE *)(*(_QWORD *)(v22 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager) + 218) = v23;
      }
    }
    else
    {
      v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
      if (v22)
      {
        v23 = 0;
        goto LABEL_10;
      }
    }
    v24 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
    type metadata accessor for MainActor();
    v25 = v1;
    v26 = v18;
    v27 = static MainActor.shared.getter();
    v28 = (_QWORD *)swift_allocObject();
    v29 = MEMORY[0x1E0DF06E8];
    v28[2] = v27;
    v28[3] = v29;
    v28[4] = v25;
    v28[5] = v26;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.beginTransform(), (uint64_t)v28);
    swift_release();

  }
}

uint64_t closure #1 in HandwritingReflowView.beginTransform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  v5[6] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[7] = v6;
  return swift_task_switch();
}

uint64_t closure #1 in HandwritingReflowView.beginTransform()()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  *(_QWORD *)(v0 + 64) = v1;
  if (v1)
  {
    v1;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = closure #1 in HandwritingReflowView.beginTransform();
    return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(*(_QWORD *)(v0 + 32), 0, 0);
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 64) == 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 64);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 64) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall HandwritingReflowView.updateTransform(with:)(CGAffineTransform *with)
{
  _BYTE *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  CGFloat v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGAffineTransform v15;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _BYTE v18[8];
  __int128 v19;
  __int128 v20;
  double v21;

  v2 = *(_OWORD *)&with->a;
  v3 = *(_OWORD *)&with->c;
  v4 = *(_OWORD *)&with->tx;
  v5 = &v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
  if ((v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace + 48] & 1) != 0)
  {
    v5 = v18;
    v13 = *(_OWORD *)&with->c;
    v14 = *(_OWORD *)&with->a;
    v12 = *(_OWORD *)&with->tx;
    HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)v18);
    v4 = v12;
    v3 = v13;
    v2 = v14;
    v6 = v19;
    v7 = v20;
    v8 = v21;
  }
  else
  {
    v8 = *((double *)v5 + 5);
    v7 = *(_OWORD *)(v5 + 24);
    v6 = *(_OWORD *)(v5 + 8);
  }
  t1.a = *(CGFloat *)v5;
  *(_OWORD *)&t1.b = v6;
  *(_OWORD *)&t1.d = v7;
  t1.ty = v8;
  *(_OWORD *)&t2.a = v2;
  *(_OWORD *)&t2.c = v3;
  *(_OWORD *)&t2.tx = v4;
  CGAffineTransformConcat(&v15, &t1, &t2);
  v9 = *(_OWORD *)&v15.c;
  v10 = *(_OWORD *)&v15.tx;
  v11 = &v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace];
  *(_OWORD *)v11 = *(_OWORD *)&v15.a;
  *((_OWORD *)v11 + 1) = v9;
  *((_OWORD *)v11 + 2) = v10;
  v11[48] = 0;
  objc_msgSend(v1, sel_setNeedsLayout);
}

Swift::Void __swiftcall HandwritingReflowView.endTransform(cancel:)(Swift::Bool cancel)
{
  char *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v2 = v1;
  v3 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  outlined consume of ResizeView.ActiveHandle(v3);
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  v4 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    v5 = (void *)v4;
    AnyCanvas.isResizingChanged()();

  }
  objc_msgSend(v2, sel_setNeedsLayout);
  v6 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
  if (v6)
  {
    v7 = v6;
    HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(v7, 1, 0, 0);

  }
}

void __swiftcall HandwritingReflowView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  objc_class *isa;
  CGFloat y;
  CGFloat x;
  UIEvent_optional v7;
  UIView_optional *v8;
  uint64_t v9;
  CGFloat v10;
  CGFloat v11;
  void *v12;
  char *v13;
  CGPoint v14;
  CGPoint v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0)
  {
    v7.value.super.isa = isa;
    ResizeView.hitTestChrome(_:with:)(v8, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v7);
    if (!v9 && (HandwritingReflowView.showRectangularSelection.getter() & 1) != 0)
    {
      if (one-time initialization token for handwritingReflowFrameHitTestOutset != -1)
        swift_once();
      v10 = *(double *)&static UIConstants.handwritingReflowFrameHitTestOutset;
      v11 = -*(double *)&static UIConstants.handwritingReflowFrameHitTestOutset;
      v12 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView];
      objc_msgSend(v12, sel_frame);
      v17 = CGRectInset(v16, v11, v11);
      v14.x = x;
      v14.y = y;
      if (CGRectContainsPoint(v17, v14))
      {
        objc_msgSend(v12, sel_frame);
        v19 = CGRectInset(v18, v10, v10);
        v15.x = x;
        v15.y = y;
        if (!CGRectContainsPoint(v19, v15))
          v13 = v3;
      }
    }
  }
}

Swift::Void __swiftcall HandwritingReflowView.paste()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char **v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  PKDrawing *v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  double *v60;
  void *v61;
  id v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  id v71;
  uint64_t v72;
  __int128 v73;
  uint64_t aBlock[6];
  __int128 v75;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v2, v3);
  v70 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v69 = (uint64_t)&v69 - v7;
  v8 = (id)objc_opt_self();
  v9 = &selRef_setCanvasWidth_;
  v10 = objc_msgSend(v8, sel_generalPasteboard);
  v11 = objc_msgSend(v10, sel_items);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v71 = v8;
    v72 = v1;
    swift_bridgeObjectRetain();
    v14 = 0;
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v73 = xmmword_1DDF33630;
    do
    {
      v17 = *(_QWORD *)(v12 + 8 * v14 + 32);
      v18 = *(_QWORD *)(v17 + 16);
      swift_bridgeObjectRetain();
      if (!v18
        || (v19 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, 0x80000001DDF59BF0),
            (v20 & 1) == 0)
        || (outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v19, (uint64_t)aBlock),
            (swift_dynamicCast() & 1) == 0))
      {
        v75 = v73;
      }
      swift_bridgeObjectRelease();
      v21 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) >> 60 != 15)
      {
        v22 = v75;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        v24 = v15[2];
        v23 = v15[3];
        if (v24 >= v23 >> 1)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v15);
        v15[2] = v24 + 1;
        v16 = &v15[2 * v24];
        v16[4] = v22;
        v16[5] = v21;
      }
      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease_n();
    v8 = v71;
    v1 = v72;
    v9 = &selRef_setCanvasWidth_;
    if (v15[2])
    {
LABEL_15:
      v25 = v15[4];
      v26 = v15[5];
      outlined copy of Data._Representation(v25, v26);
      swift_bridgeObjectRelease();
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReflowEnum]);
      lazy protocol witness table accessor for type [ReflowEnum] and conformance <A> [A]();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      v63 = specialized static ReflowEnum.untypeArray(_:)(aBlock[0]);
      swift_bridgeObjectRelease();
      if (v63 >> 62)
      {
        swift_bridgeObjectRetain();
        v67 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v67)
          goto LABEL_36;
      }
      else if (!*(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_36;
      }
      v64 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
      if (v64)
      {
        v65 = *(_QWORD *)&v64[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
        swift_beginAccess();
        if (*(_QWORD *)(v65 + 160))
        {
          v66 = v64;
          HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(MEMORY[0x1E0DEE9D8], (Swift::OpaquePointer)v63, 1);
          swift_release();

LABEL_37:
          outlined consume of Data._Representation(v25, v26);
LABEL_38:
          swift_bridgeObjectRelease();
          return;
        }
      }
LABEL_36:
      swift_release();
      goto LABEL_37;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v8, v9[272]);
  v28 = objc_msgSend(v27, sel_string);

  if (!v28)
    return;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;
  v32 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (!v32
    || (v33 = v29,
        v34 = *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager],
        swift_beginAccess(),
        (v35 = *(_QWORD *)(v34 + 160)) == 0)
    || (v36 = *(double *)(v34 + 176),
        v37 = *(double *)(v34 + 184),
        (v38 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas)) == 0))
  {
    swift_bridgeObjectRelease();

    return;
  }
  v39 = v38;
  v72 = v1;
  v40 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v41 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v38) + 0x2F8))();
  v42 = *(uint64_t (**)(uint64_t))((*v40 & *v41) + 0x298);
  *(_QWORD *)&v73 = v32;
  v43 = swift_retain();
  v44 = v42(v43);

  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    v68 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v68)
      goto LABEL_23;
LABEL_41:

    swift_release();
    swift_bridgeObjectRelease();

    goto LABEL_38;
  }
  if (!*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_41;
LABEL_23:
  if ((v44 & 0xC000000000000001) != 0)
  {
    v71 = (id)MEMORY[0x1DF0E4D64](0, v44);
    v45 = (uint64_t)v70;
  }
  else
  {
    v45 = (uint64_t)v70;
    if (!*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v71 = *(id *)(v44 + 32);
  }
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  v46 = v69;
  ReflowLayoutManager.textSize(for:)(v69, v35);
  v48 = v47;
  swift_release();
  swift_release();
  objc_msgSend((id)v73, sel_frame);
  v50 = v36 + v49;
  v52 = v37 + v51;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v46, v45, &demangling cache variable for type metadata for PKDrawing?);
  v53 = type metadata accessor for PKDrawing();
  v54 = *(_QWORD *)(v53 - 8);
  v56 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v45, 1, v53) != 1)
  {
    PKDrawing._bridgeToObjectiveC()(v55);
    v56 = v57;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v45, v53);
  }
  v58 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  v59 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v60 = (double *)swift_allocObject();
  *((_QWORD *)v60 + 2) = v33;
  *((_QWORD *)v60 + 3) = v31;
  v60[4] = v48;
  *((_QWORD *)v60 + 5) = v59;
  aBlock[4] = (uint64_t)partial apply for closure #2 in HandwritingReflowView.paste();
  aBlock[5] = (uint64_t)v60;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [NSValue], @guaranteed [CHReflowableTextToken], @guaranteed [PKDrawing]) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_54;
  v61 = _Block_copy(aBlock);
  swift_release();
  v62 = v71;
  objc_msgSend(v71, sel_convertTextToHandwriting_bounds_suggestedHeight_suggestedDrawing_inkColor_completion_, v28, v56, v58, v61, v50, v52, 0.0, 0.0, v48);

  _Block_release(v61);
  swift_release();

  outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for PKDrawing?);
}

void closure #2 in HandwritingReflowView.paste()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v11 = a6 + 16;
  v12 = (void *)MEMORY[0x1DF0E41AC](a4, a5);
  v13 = specialized static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(v12, a1, a2, a3, a7);

  swift_beginAccess();
  v14 = MEMORY[0x1DF0E666C](v11);
  if (!v14)
    goto LABEL_9;
  v15 = (char *)v14;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_4;
  }
  else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    v16 = *(char **)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
    if (v16)
    {
      v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
      swift_beginAccess();
      if (*(_QWORD *)(v17 + 160))
      {
        v18 = v16;
        HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(MEMORY[0x1E0DEE9D8], (Swift::OpaquePointer)v13, 1);

        swift_bridgeObjectRelease();
        return;
      }
    }
  }

LABEL_9:
  swift_bridgeObjectRelease();
}

void closure #1 in HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (void *)v3;
    HandwritingReflowView.paste()();

  }
}

uint64_t HandwritingReflowView.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

id HandwritingReflowView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandwritingReflowView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for HandwritingReflowView()
{
  return objc_opt_self();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = (2 * a2) | 1;
  return result;
}

uint64_t specialized Array._checkIndex(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  if (!(a2 >> 62))
  {
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) >= result)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v3 < v2)
    goto LABEL_6;
LABEL_3:
  if (v2 < 0)
LABEL_7:
    __break(1u);
  return result;
}

Swift::Int specialized _ArrayBuffer.subscript.getter(Swift::Int result, Swift::Int a2, unint64_t a3)
{
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;

  v5 = result;
  if ((a3 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (a2 < result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result == a2)
  {
LABEL_7:
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
    if ((a2 & 0x8000000000000000) == 0)
    {
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      return v7;
    }
    __break(1u);
    goto LABEL_13;
  }
  if (result < a2)
  {
    type metadata accessor for ReflowElement();
    result = v5;
    do
    {
      v6 = result + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(result);
      result = v6;
    }
    while (a2 != v6);
    goto LABEL_7;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v12[2];

  v3 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    specialized closure #1 in _NativeSet.intersection(_:)((_QWORD *)((char *)v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, a2, v3);
    v8 = v7;
    swift_release();
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v6);
    specialized closure #1 in _NativeSet.intersection(_:)((unint64_t *)v9, v5, a2, v3);
    v8 = v10;
    swift_release();
    MEMORY[0x1DF0E6558](v9, -1, -1);
  }
  return v8;
}

Swift::Int specialized closure #1 in _NativeSet.intersection(_:)(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  unint64_t v25;
  BOOL v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  Swift::UInt v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t *v46;

  v46 = (unint64_t *)result;
  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = 0;
    v8 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v44 = (unint64_t)(v9 + 63) >> 6;
    v12 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v14 = v13 | (v7 << 6);
      }
      else
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        if (v15 >= v44)
          goto LABEL_56;
        v16 = *(_QWORD *)(v8 + 8 * v15);
        ++v7;
        if (!v16)
        {
          v7 = v15 + 1;
          if (v15 + 1 >= v44)
            goto LABEL_56;
          v16 = *(_QWORD *)(v8 + 8 * v7);
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v44)
            {
LABEL_56:
              swift_retain();
              return specialized _NativeSet.extractSubset(using:count:)(v46, a2, v6, a3);
            }
            v16 = *(_QWORD *)(v8 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                v7 = v17 + 1;
                if (__OFADD__(v17, 1))
                  break;
                if (v7 >= v44)
                  goto LABEL_56;
                v16 = *(_QWORD *)(v8 + 8 * v7);
                ++v17;
                if (v16)
                  goto LABEL_19;
              }
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }
            v7 = v17;
          }
        }
LABEL_19:
        v11 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      v18 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(a3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      v22 = 1 << v20;
      if (((1 << v20) & *(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        v23 = *(_QWORD *)(a3 + 48);
        if (*(unsigned __int8 *)(v23 + v20) != (_DWORD)v18)
        {
          for (i = v20 + 1; ; i = v25 + 1)
          {
            v25 = i & ~v19;
            if (((*(_QWORD *)(v12 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
              goto LABEL_6;
            if (*(unsigned __int8 *)(v23 + v25) == (_DWORD)v18)
              break;
          }
          v21 = v25 >> 6;
          v22 = 1 << v25;
        }
        v46[v21] |= v22;
        v26 = __OFADD__(v6++, 1);
        if (v26)
          break;
      }
    }
    __break(1u);
  }
  v27 = 0;
  v43 = a3 + 56;
  v28 = 1 << *(_BYTE *)(a3 + 32);
  if (v28 < 64)
    v29 = ~(-1 << v28);
  else
    v29 = -1;
  v30 = v29 & *(_QWORD *)(a3 + 56);
  v45 = (unint64_t)(v28 + 63) >> 6;
  v31 = a4 + 56;
  while (v30)
  {
    v32 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    v33 = v32 | (v27 << 6);
LABEL_48:
    v37 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 48) + v33);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v37);
    result = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(a4 + 32);
    v39 = result & ~v38;
    if (((*(_QWORD *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
    {
      v40 = *(_QWORD *)(a4 + 48);
      if (*(unsigned __int8 *)(v40 + v39) == (_DWORD)v37)
      {
LABEL_53:
        *(unint64_t *)((char *)v46 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        v26 = __OFADD__(v6++, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_56;
        }
      }
      else
      {
        v41 = ~v38;
        while (1)
        {
          v39 = (v39 + 1) & v41;
          if (((*(_QWORD *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
            break;
          if (*(unsigned __int8 *)(v40 + v39) == (_DWORD)v37)
            goto LABEL_53;
        }
      }
    }
  }
  v34 = v27 + 1;
  if (__OFADD__(v27, 1))
    goto LABEL_58;
  if (v34 >= v45)
    goto LABEL_56;
  v35 = *(_QWORD *)(v43 + 8 * v34);
  ++v27;
  if (v35)
    goto LABEL_47;
  v27 = v34 + 1;
  if (v34 + 1 >= v45)
    goto LABEL_56;
  v35 = *(_QWORD *)(v43 + 8 * v27);
  if (v35)
  {
LABEL_47:
    v30 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v27 << 6);
    goto LABEL_48;
  }
  v36 = v34 + 2;
  if (v36 >= v45)
    goto LABEL_56;
  v35 = *(_QWORD *)(v43 + 8 * v36);
  if (v35)
  {
    v27 = v36;
    goto LABEL_47;
  }
  while (1)
  {
    v27 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v27 >= v45)
      goto LABEL_56;
    v35 = *(_QWORD *)(v43 + 8 * v27);
    ++v36;
    if (v35)
      goto LABEL_47;
  }
LABEL_60:
  __break(1u);
  return result;
}

void specialized closure #1 in _NativeSet.intersection(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(unint64_t, unint64_t, uint64_t, __n128);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t i;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, unint64_t, uint64_t, __n128);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v70 = a2;
  v73 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v70 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v70 - v17;
  v22.n128_f64[0] = MEMORY[0x1E0C80A78](v19, v20);
  v23 = *(_QWORD *)(a3 + 16);
  v24 = *(_QWORD *)(a4 + 16);
  v79 = a4;
  v80 = a3;
  v81 = v7;
  if (v24 >= v23)
  {
    v75 = 0;
    v47 = 0;
    v48 = *(_QWORD *)(a3 + 56);
    v71 = a3 + 56;
    v49 = 1 << *(_BYTE *)(a3 + 32);
    if (v49 < 64)
      v50 = ~(-1 << v49);
    else
      v50 = -1;
    v51 = v50 & v48;
    v72 = (unint64_t)(v49 + 63) >> 6;
    v78 = a4 + 56;
    if (v51)
      goto LABEL_38;
LABEL_39:
    v53 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v53 < v72)
    {
      v54 = *(_QWORD *)(v71 + 8 * v53);
      v55 = v47 + 1;
      if (v54)
        goto LABEL_52;
      v55 = v47 + 2;
      if (v47 + 2 < v72)
      {
        v54 = *(_QWORD *)(v71 + 8 * v55);
        if (v54)
          goto LABEL_52;
        v55 = v47 + 3;
        if (v47 + 3 < v72)
        {
          v54 = *(_QWORD *)(v71 + 8 * v55);
          if (v54)
            goto LABEL_52;
          v56 = v47 + 4;
          if (v47 + 4 < v72)
          {
            v54 = *(_QWORD *)(v71 + 8 * v56);
            if (!v54)
            {
              while (1)
              {
                v55 = v56 + 1;
                if (__OFADD__(v56, 1))
                  goto LABEL_67;
                if (v55 >= v72)
                  goto LABEL_61;
                v54 = *(_QWORD *)(v71 + 8 * v55);
                ++v56;
                if (v54)
                  goto LABEL_52;
              }
            }
            v55 = v47 + 4;
LABEL_52:
            v76 = (v54 - 1) & v54;
            v77 = v55;
            for (i = __clz(__rbit64(v54)) + (v55 << 6); ; i = __clz(__rbit64(v51)) | (v47 << 6))
            {
              v57 = *(_QWORD *)(a3 + 48);
              v58 = *(_QWORD *)(v7 + 72);
              v74 = i;
              v59 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
              v59(v10, v57 + v58 * i, v6, v22);
              lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]);
              v60 = v7;
              v61 = v10;
              v62 = dispatch thunk of Hashable._rawHashValue(seed:)();
              v63 = -1 << *(_BYTE *)(a4 + 32);
              v64 = v62 & ~v63;
              if (((*(_QWORD *)(v78 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) != 0)
              {
                v65 = ~v63;
                while (1)
                {
                  ((void (*)(char *, unint64_t, uint64_t))v59)(v14, *(_QWORD *)(v79 + 48) + v64 * v58, v6);
                  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
                  v66 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v67 = *(void (**)(char *, uint64_t))(v81 + 8);
                  v67(v14, v6);
                  if ((v66 & 1) != 0)
                    break;
                  v64 = (v64 + 1) & v65;
                  if (((*(_QWORD *)(v78 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) == 0)
                    goto LABEL_59;
                }
                v10 = v61;
                v67(v61, v6);
                *(unint64_t *)((char *)v73 + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v74;
                v51 = v76;
                v30 = __OFADD__(v75++, 1);
                a4 = v79;
                a3 = v80;
                v7 = v81;
                v47 = v77;
                if (v30)
                  goto LABEL_65;
                if (!v76)
                  goto LABEL_39;
              }
              else
              {
                v67 = *(void (**)(char *, uint64_t))(v60 + 8);
LABEL_59:
                v10 = v61;
                v67(v61, v6);
                a4 = v79;
                a3 = v80;
                v7 = v81;
                v51 = v76;
                v47 = v77;
                if (!v76)
                  goto LABEL_39;
              }
LABEL_38:
              v76 = (v51 - 1) & v51;
              v77 = v47;
            }
          }
        }
      }
    }
LABEL_61:
    v68 = v70;
    v69 = v75;
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v73, v68, v69, a3);
    return;
  }
  v74 = (unint64_t)&v70 - v21;
  v75 = 0;
  v25 = 0;
  v26 = *(_QWORD *)(a4 + 56);
  v71 = a4 + 56;
  v27 = 1 << *(_BYTE *)(a4 + 32);
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v29 = v28 & v26;
  v72 = (unint64_t)(v27 + 63) >> 6;
  v78 = a3 + 56;
  do
  {
    v31 = v74;
    if (v29)
    {
LABEL_8:
      v76 = (v29 - 1) & v29;
      v77 = v25;
      v32 = __clz(__rbit64(v29)) | (v25 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v33 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
        goto LABEL_63;
      }
      if (v33 >= v72)
        goto LABEL_61;
      v34 = *(_QWORD *)(v71 + 8 * v33);
      v35 = v25 + 1;
      if (!v34)
      {
        v35 = v25 + 2;
        if (v25 + 2 >= v72)
          goto LABEL_61;
        v34 = *(_QWORD *)(v71 + 8 * v35);
        if (!v34)
        {
          v35 = v25 + 3;
          if (v25 + 3 >= v72)
            goto LABEL_61;
          v34 = *(_QWORD *)(v71 + 8 * v35);
          if (!v34)
          {
            v36 = v25 + 4;
            if (v25 + 4 >= v72)
              goto LABEL_61;
            v34 = *(_QWORD *)(v71 + 8 * v36);
            if (!v34)
            {
              while (1)
              {
                v35 = v36 + 1;
                if (__OFADD__(v36, 1))
                  goto LABEL_66;
                if (v35 >= v72)
                  goto LABEL_61;
                v34 = *(_QWORD *)(v71 + 8 * v35);
                ++v36;
                if (v34)
                  goto LABEL_22;
              }
            }
            v35 = v25 + 4;
          }
        }
      }
LABEL_22:
      v76 = (v34 - 1) & v34;
      v77 = v35;
      v32 = __clz(__rbit64(v34)) + (v35 << 6);
LABEL_23:
      v37 = *(_QWORD *)(v7 + 72);
      v38 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v7 + 16);
      v38(v31, *(_QWORD *)(a4 + 48) + v37 * v32, v6, v22);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v18, v31, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]);
      v39 = v7;
      v40 = v18;
      v41 = dispatch thunk of Hashable._rawHashValue(seed:)();
      a3 = v80;
      v42 = -1 << *(_BYTE *)(v80 + 32);
      v43 = v41 & ~v42;
      if (((*(_QWORD *)(v78 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) != 0)
        break;
      v46 = *(void (**)(char *, uint64_t))(v39 + 8);
LABEL_29:
      v18 = v40;
      v46(v40, v6);
      a4 = v79;
      v7 = v81;
      v31 = v74;
      v29 = v76;
      v25 = v77;
      if (v76)
        goto LABEL_8;
    }
    v44 = ~v42;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v38)(v14, *(_QWORD *)(a3 + 48) + v43 * v37, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      v46 = *(void (**)(char *, uint64_t))(v81 + 8);
      v46(v14, v6);
      if ((v45 & 1) != 0)
        break;
      v43 = (v43 + 1) & v44;
      a3 = v80;
      if (((*(_QWORD *)(v78 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
        goto LABEL_29;
    }
    v18 = v40;
    v46(v40, v6);
    *(unint64_t *)((char *)v73 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
    v29 = v76;
    v30 = __OFADD__(v75++, 1);
    a4 = v79;
    a3 = v80;
    v7 = v81;
    v25 = v77;
  }
  while (!v30);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5095_s8PaperKit21HandwritingReflowViewC19transformsReplacing_4with11animatingTo13reflowTextboxSay06d3B08f39VGShy9Coherence7WeakRefVyAL10CRRegistery18AL14SharedTagged_2y25AA0T6StrokeVGGGG_SayAA0D7B25CGAkA0d4TextE0CtFA2JXEfU_SDy9Coherence0X0VyAM10CRRegisterVyAM14SharedTagged_2Vy0iE012TaggedStrokeVGGGSo17CGAffineTransformVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  id v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  char v27;
  __int128 *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v5 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v5, v6);
  v42 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v9 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  v41 = v9;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PKStroke();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = MEMORY[0x1E0DEE9D8];
  if (v18)
  {
    v38 = v12;
    v34[1] = v2;
    v46 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    v37 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v20 = a1 + v37;
    v21 = *(_QWORD *)(v14 + 72);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v36 = v21;
    v39 = a2;
    while (1)
    {
      v35(v17, v20, v13);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v23 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      v24 = (uint64_t)v38;
      Ref.init(id:)();
      if (!*(_QWORD *)(a2 + 16))
        break;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
      v26 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      if ((v27 & 1) == 0)
        goto LABEL_7;
      v28 = (__int128 *)(*(_QWORD *)(a2 + 56) + 48 * v25);
      v29 = v28[1];
      v43 = *v28;
      v44 = v29;
      v45 = v28[2];
      v26(v24, v40);
      PKStroke.transform.setter();
LABEL_8:
      v19 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v19 = v46;
      }
      v31 = *(_QWORD *)(v19 + 16);
      v30 = *(_QWORD *)(v19 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v19 = v46;
      }
      *(_QWORD *)(v19 + 16) = v31 + 1;
      v32 = v36;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v37 + v31 * v36, v17, v13);
      v46 = v19;
      v20 += v32;
      --v18;
      a2 = v39;
      if (!v18)
        return v19;
    }
    v26 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
LABEL_7:
    v26(v24, v40);
    goto LABEL_8;
  }
  return v19;
}

uint64_t specialized static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t result;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  double v50;
  CGFloat v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  _QWORD v66[3];
  id v67;
  __int128 v68;
  uint64_t v69;
  uint64_t (*v70)(unint64_t *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;

  v67 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (void **)((char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing)?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (_QWORD *)((char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = a2;
  v72 = 0;
  v73 = a3;
  v74 = 0;
  v75 = 0;
  v76 = a4;
  v77 = 0;
  v78 = 0;
  v66[2] = a2;
  swift_bridgeObjectRetain_n();
  v66[1] = a3;
  swift_bridgeObjectRetain_n();
  v66[0] = a4;
  swift_bridgeObjectRetain_n();
  specialized Zip2Sequence.Iterator.next()(v17);
  v18 = v9;
  v70 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v10 + 48);
  v19 = v70(v17, 1, v9);
  v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v19 == 1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v20[2];
    if (v21)
    {
      v22 = objc_msgSend(v67, sel_paragraphRangeForRange_, v20[4], v20[5]);
      if (v20[2] < v21)
        goto LABEL_51;
      v24 = v21 - 1;
      if (v24)
      {
        v25 = v22;
        v26 = v23;
        swift_bridgeObjectRetain();
        v27 = 0;
        v28 = v20 + 8;
        while (!__OFADD__(v25, v26))
        {
          if (*(v28 - 1) >= (uint64_t)v25 + v26)
          {
            if (v27 >= v20[2])
              goto LABEL_50;
            *(_BYTE *)(*(v28 - 2) + 136) = 1;
            v25 = objc_msgSend(v67, sel_paragraphRangeForRange_);
            v26 = v29;
          }
          if (v27 == 0x7FFFFFFFFFFFFFFDLL)
            goto LABEL_48;
          ++v27;
          v28 += 3;
          if (v24 == v27)
          {
            swift_bridgeObjectRelease();
            goto LABEL_13;
          }
        }
        goto LABEL_47;
      }
LABEL_13:
      v71 = MEMORY[0x1E0DEE9D8];
      v30 = v20[2];
      if (v30)
      {
        swift_bridgeObjectRetain();
        v31 = 0;
        v32 = 6;
        do
        {
          v33 = v31 + 1;
          v34 = v20[v32];
          swift_retain();
          v35 = specialized closure #2 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(v31, v34, (uint64_t)v20);
          swift_release();
          specialized Array.append<A>(contentsOf:)(v35);
          v32 += 3;
          v31 = v33;
        }
        while (v30 != v33);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      return v71;
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
  }
  v37 = &demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing);
  v68 = xmmword_1DDF32CF0;
  v69 = v9;
  while (1)
  {
    v38 = v37;
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v17, (uint64_t)v13, v37);
    v39 = *v13;
    v40 = v13[1];
    PKDrawing._bridgeToObjectiveC()((PKDrawing *)*(int *)(v18 + 48));
    v42 = v41;
    type metadata accessor for PKDrawingCoherence(0);
    v43 = (void *)swift_dynamicCastClass();
    if (!v43)
      goto LABEL_24;
    v44 = v43;
    v45 = objc_msgSend(v43, sel_strokes);
    type metadata accessor for PKStroke();
    v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v47 = *(_QWORD *)(v46 + 16);
    swift_bridgeObjectRelease();
    if (v47)
    {
      v48 = v40;
      v49 = v42;
      CHReflowableTextToken.overestimatedTextSize.getter();
      v51 = a5 / v50;
      type metadata accessor for ReflowWord();
      swift_allocObject();
      v52 = ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v48, v44, 0, v51);
      *(_BYTE *)(v52 + 296) = 1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(_NSRange, ReflowWord)>);
      v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v68;
      *(_QWORD *)(v53 + 32) = objc_msgSend(v39, sel_rangeValue);
      *(_QWORD *)(v53 + 40) = v54;
      *(_QWORD *)(v53 + 48) = v52;
    }
    else
    {
LABEL_24:
      v53 = MEMORY[0x1E0DEE9D8];
    }

    v37 = v38;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, v38);
    v55 = *(_QWORD *)(v53 + 16);
    v56 = v20[2];
    v57 = v56 + v55;
    if (__OFADD__(v56, v55))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v57 <= v20[3] >> 1)
    {
      if (*(_QWORD *)(v53 + 16))
        goto LABEL_34;
    }
    else
    {
      if (v56 <= v57)
        v59 = v56 + v55;
      else
        v59 = v56;
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v59, 1, v20);
      if (*(_QWORD *)(v53 + 16))
      {
LABEL_34:
        v60 = v20[2];
        if ((v20[3] >> 1) - v60 < v55)
          goto LABEL_46;
        v61 = (unint64_t)&v20[3 * v60 + 4];
        if (v53 + 32 < v61 + 24 * v55 && v61 < v53 + 32 + 24 * v55)
          goto LABEL_52;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_NSRange, ReflowWord));
        swift_arrayInitWithCopy();
        if (v55)
        {
          v63 = v20[2];
          v64 = __OFADD__(v63, v55);
          v65 = v63 + v55;
          if (v64)
            goto LABEL_49;
          v20[2] = v65;
        }
        goto LABEL_20;
      }
    }
    if (v55)
      goto LABEL_45;
LABEL_20:
    swift_bridgeObjectRelease();
    specialized Zip2Sequence.Iterator.next()(v17);
    v18 = v69;
    if (v70(v17, 1, v69) == 1)
      goto LABEL_2;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized closure #1 in HandwritingReflowView.init(frame:canvas:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(char **)(a1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (v6)
  {
    v7 = *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    v8 = *(_QWORD *)(v7 + 80);
    v28 = v6;
    if (v8 >> 62)
    {
      v27 = v6;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      if (v9)
        goto LABEL_4;
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      v10 = v6;
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_4:
        if (v9 < 1)
        {
          __break(1u);
          return;
        }
        v11 = 0;
        v29 = v8 & 0xC000000000000001;
        do
        {
          if (v29)
            MEMORY[0x1DF0E4D64](v11, v8);
          else
            swift_retain();
          type metadata accessor for ReflowWord();
          v12 = swift_dynamicCastClass();
          if (v12)
          {
            v13 = v12;
            v14 = *(void **)(v12 + 272);
            swift_retain();
            v15 = v14;
            objc_msgSend(v15, sel__canvasBounds, v28);
            v16 = objc_msgSend(v15, sel_imageFromRect_scale_);

            v17 = *(void **)(v13 + 288);
            *(_QWORD *)(v13 + 288) = v16;

            v18 = type metadata accessor for TaskPriority();
            v19 = *(_QWORD *)(v18 - 8);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v5, 1, 1, v18);
            type metadata accessor for MainActor();
            swift_retain();
            v20 = static MainActor.shared.getter();
            v21 = (_QWORD *)swift_allocObject();
            v21[2] = v20;
            v21[3] = MEMORY[0x1E0DF06E8];
            v21[4] = v13;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v5, 1, v18) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for TaskPriority?);
              v30 = 0;
            }
            else
            {
              v22 = TaskPriority.rawValue.getter();
              (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v18);
              v30 = v22;
            }
            if (v21[2])
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              v23 = dispatch thunk of Actor.unownedExecutor.getter();
              v25 = v24;
              swift_unknownObjectRelease();
            }
            else
            {
              v23 = 0;
              v25 = 0;
            }
            v26 = swift_allocObject();
            *(_QWORD *)(v26 + 16) = &async function pointer to partial apply for closure #1 in ReflowWord.generateImage();
            *(_QWORD *)(v26 + 24) = v21;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
            if (v25 | v23)
            {
              v31 = 0;
              v32 = 0;
              v33 = v23;
              v34 = v25;
            }
            swift_task_create();
            swift_release_n();
          }
          ++v11;
          swift_release();
        }
        while (v9 != v11);
      }
    }

    swift_bridgeObjectRelease();
  }
}

void specialized HandwritingReflowView.init(coder:)()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  _OWORD *v3;
  uint64_t v4;

  v1 = &v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *(_OWORD *)v1 = 0u;
  v1[48] = 1;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  v2[48] = 1;
  v3 = &v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds];
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = 0;
  v4 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret;
  type metadata accessor for ReflowCursor();
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 0;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes] = 0;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] = 1;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 1;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized HandwritingReflowView.canPasteAsHandwriting.getter()
{
  void *v0;
  id v1;
  id v2;
  _QWORD *v3;
  id v4;
  id v5;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_generalPasteboard);
  v2 = objc_msgSend(v1, sel_pasteboardTypes);

  v3 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v2) = specialized Sequence<>.contains(_:)(0xD00000000000001DLL, 0x80000001DDF59BF0, v3);
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    return 1;
  if (CHGetPersonalizedSynthesisSupportState() < 2)
    return 0;
  v5 = objc_msgSend(v0, sel_generalPasteboard);
  v4 = objc_msgSend(v5, sel_hasStrings);

  return (uint64_t)v4;
}

uint64_t specialized closure #2 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if ((*(_BYTE *)(a2 + 136) & 1) != 0 || *(_QWORD *)(a3 + 16) - 1 == a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v4 + 32) = a2;
    v10 = v4;
    specialized Array._endMutation()();
    v5 = v10;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1DDF329E0;
    *(_QWORD *)(v5 + 32) = a2;
    v6 = one-time initialization token for handwritingReflowMinimumSpaceWidth;
    swift_retain();
    if (v6 != -1)
      swift_once();
    v7 = static UIConstants.handwritingReflowMinimumSpaceWidth;
    type metadata accessor for ReflowSpace();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 144) = 1;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_QWORD *)(v8 + 96) = 0;
    *(_OWORD *)(v8 + 104) = xmmword_1DDF33970;
    *(_QWORD *)(v8 + 120) = -1;
    *(_QWORD *)(v8 + 128) = 0;
    *(_WORD *)(v8 + 136) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = v7;
    *(_QWORD *)(v8 + 40) = 0x4000000000000000;
    *(_QWORD *)(v5 + 40) = v8;
    specialized Array._endMutation()();
  }
  return v5;
}

uint64_t sub_1DDE46348()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandwritingReflowView.beginTransform()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.beginTransform()(a1, v4, v5, v7, v6);
}

unint64_t lazy protocol witness table accessor for type [ReflowEnum] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ReflowEnum]);
    v2 = lazy protocol witness table accessor for type ReflowEnum and conformance ReflowEnum();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReflowEnum and conformance ReflowEnum()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum;
  if (!lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowEnum, &type metadata for ReflowEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum;
  if (!lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowEnum, &type metadata for ReflowEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum);
  }
  return result;
}

uint64_t sub_1DDE4649C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDE464C0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in HandwritingReflowView.paste()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #2 in HandwritingReflowView.paste()(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 40), *(double *)(v3 + 32));
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_54()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(double *)(v1 + 40);
  v8 = *(double *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_BYTE *)(v1 + 80);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(v7, v8, a1, v4, v5, v6, v9, v10, v11, v12);
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(double *)(v1 + 40);
  v8 = *(double *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_BYTE *)(v1 + 80);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(v7, v8, a1, v4, v5, v6, v9, v10, v11, v12);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.endOfDrawing()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in HandwritingReflowView.endOfDrawing()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ReflowTextView.endOfAnimation()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ReflowTextView.endOfAnimation()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t sub_1DDE467AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  if (*(_QWORD *)(v0 + 16))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 32) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return closure #1 in closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1DDE46860()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for PKDrawing();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for PKDrawing() - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1DDE469DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t objectdestroy_23Tm()
{
  id *v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1DDE46AE4()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for PKDrawing();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for PKDrawing();
  v3 = v1[4];
  v10 = v1[3];
  v11 = v1[2];
  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(a1, v11, v10, v3, v4, v5, v6, v7);
}

id partial apply for closure #2 in closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_startRefineAnimationWithDuration_, *(double *)(v0 + 24));
}

id partial apply for closure #3 in closure #3 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_stopRefineAnimation);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_BYTE *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_OWORD *)(v1 + 32);
  v10 = *(_OWORD *)(v1 + 16);
  v11 = v7;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = *(_OWORD *)(v1 + 88);
  v18 = a1;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(), uint64_t *))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v10)
                                                                              + 0x468))(1, 0, partial apply for closure #1 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:), &v9);
}

uint64_t sub_1DDE46D30()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)()
{
  uint64_t v0;

  closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_1DDE46D78()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 88))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v7 = v1[5];
  v8 = *((_QWORD *)v1 + 8);
  v9 = *((_QWORD *)v1 + 9);
  v10 = *((_QWORD *)v1 + 10);
  v11 = *((_QWORD *)v1 + 11);
  v12 = *((_QWORD *)v1 + 12);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(v6, v7, a1, v4, v5, v8, v9, v10, v11, v12);
}

uint64_t sub_1DDE46E80()
{
  id *v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  _QWORD *v13;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v7 = v1[5];
  v8 = *((_QWORD *)v1 + 6);
  v9 = *((_QWORD *)v1 + 7);
  v10 = *((_QWORD *)v1 + 8);
  v11 = v1[9];
  v12 = v1[10];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(v6, v7, v11, v12, a1, v4, v5, v8, v9, v10);
}

id *outlined release of (ReflowLayoutManager.TextPosition, CGRect)?(id *a1)
{

  return a1;
}

uint64_t sub_1DDE46F94()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #3 in HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret), sel_setFrame_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_1DDE46FDC()
{
  uint64_t v0;

  return swift_deallocObject();
}

UIMenu specialized HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)()
{
  UIMenuElementSize preferredElementSize;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::OpaquePointer v5;
  UIImage_optional v6;

  if ((specialized HandwritingReflowView.canPasteAsHandwriting.getter() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    preferredElementSize = swift_allocObject();
    *(_OWORD *)(preferredElementSize + 16) = xmmword_1DDF35440;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    v1 = (void *)*MEMORY[0x1E0DC46F8];
    swift_allocObject();
    swift_unknownObjectWeakInit();
    v2 = v1;
    v5._rawValue = 0;
    *(_QWORD *)(preferredElementSize + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    specialized Array._endMutation()();
  }
  else
  {
    preferredElementSize = MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6.value.super.isa = 0;
  v6.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v6, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v5);
}

void partial apply for closure #1 in HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1);
}

uint64_t sub_1DDE47158()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1DDE47184()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AnyCanvasElementViewController.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

uint64_t AnyCanvasElementViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*AnyCanvasElementViewController.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

id AnyCanvasElementViewController.toolPicker.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);
}

id AnyCanvasElementViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id AnyCanvasElementViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v7;
  id v8;
  char *v9;
  void *v10;
  id v11;
  objc_super v13;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v7 = OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker;
  v8 = objc_allocWithZone(MEMORY[0x1E0CD1278]);
  v9 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, sel_init);

  if (a2)
  {
    v10 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  v13.receiver = v9;
  v13.super_class = (Class)type metadata accessor for AnyCanvasElementViewController();
  v11 = objc_msgSendSuper2(&v13, sel_initWithNibName_bundle_, v10, a3);

  return v11;
}

uint64_t type metadata accessor for AnyCanvasElementViewController()
{
  return objc_opt_self();
}

id AnyCanvasElementViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id AnyCanvasElementViewController.init(coder:)(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  objc_super v8;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v3 = OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker;
  v4 = objc_allocWithZone(MEMORY[0x1E0CD1278]);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, sel_init);

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for AnyCanvasElementViewController();
  v6 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);

  return v6;
}

id AnyCanvasElementViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyCanvasElementViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DDE47648@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x60))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1DDE47688(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x68);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t method lookup function for AnyCanvasElementViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyCanvasElementViewController.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AnyCanvasElementViewController.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AnyCanvasElementViewController.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t CanvasState.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  CRDictionary.init()();
  result = type metadata accessor for CanvasState();
  *(_QWORD *)(a1 + *(int *)(result + 20)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t type metadata accessor for CanvasState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CanvasState;
  if (!type metadata singleton initialization cache for CanvasState)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CanvasState.selections.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CanvasState.selections.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*CanvasState.selections.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t CanvasState.additionalFields.getter()
{
  type metadata accessor for CanvasState();
  return swift_bridgeObjectRetain();
}

uint64_t CanvasState.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CanvasState() + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*CanvasState.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for CanvasState();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static CanvasState.fields.getter()
{
  uint64_t v0;

  if (one-time initialization token for fields != -1)
    swift_once();
  v0 = static CanvasState.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t protocol witness for static CRStruct_Base_1.fields.getter in conformance CanvasState()
{
  uint64_t v0;

  if (one-time initialization token for fields != -1)
    swift_once();
  v0 = static CanvasState.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return static CRStruct_1.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance CanvasState()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance CanvasState())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRStruct_Base.init() in conformance CanvasState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  result = CRDictionary.init()();
  *(_QWORD *)(a2 + *(int *)(a1 + 20)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRDT.init(serializedData:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CanvasState()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  return CRStruct_1.minEncodingVersion.getter();
}

PaperKit::TimestampedSelection::CodingKeys_optional __swiftcall TimestampedSelection.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::TimestampedSelection::CodingKeys_optional)rawValue;
}

PaperKit::TimestampedSelection::CodingKeys_optional __swiftcall TimestampedSelection.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::TimestampedSelection::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x6D617473656D6974 && stringValue._object == (void *)0xE900000000000070;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x7069636974726170 && object == (void *)0xEB00000000746E61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x6C457361766E6163 && object == (void *)0xEE0073746E656D65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 0x73656B6F727473 && object == (void *)0xE700000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 3;
    else
      v7 = 4;
  }
  *v2 = v7;
  return result;
}

PaperKit::TimestampedSelection::CodingKeys_optional __swiftcall TimestampedSelection.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)intValue < 4)
    v2 = intValue;
  *v1 = v2;
  return (PaperKit::TimestampedSelection::CodingKeys_optional)intValue;
}

void *static TimestampedSelection.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static TimestampedSelection.CodingKeys.allCases.getter;
}

uint64_t TimestampedSelection.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TimestampedSelection.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TimestampedSelection.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDE48460 + 4 * byte_1DDF44A10[*v0]))(0x6D617473656D6974, 0xE900000000000070);
}

uint64_t sub_1DDE48460()
{
  return 0x7069636974726170;
}

uint64_t sub_1DDE48480()
{
  return 0x6C457361766E6163;
}

uint64_t sub_1DDE484A4()
{
  return 0x73656B6F727473;
}

PaperKit::TimestampedSelection::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TimestampedSelection.CodingKeys(Swift::Int *a1)
{
  return TimestampedSelection.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimestampedSelection.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDE484F8 + 4 * byte_1DDF44A14[*v0]))(0x6D617473656D6974, 0xE900000000000070);
}

uint64_t sub_1DDE484F8()
{
  return 0x7069636974726170;
}

uint64_t sub_1DDE48518()
{
  return 0x6C457361766E6163;
}

uint64_t sub_1DDE4853C()
{
  return 0x73656B6F727473;
}

void protocol witness for static CaseIterable.allCases.getter in conformance TimestampedSelection.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance TimestampedSelection.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance TimestampedSelection.CodingKeys()
{
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  return static CodingKey<>.intCases.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimestampedSelection.CodingKeys()
{
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimestampedSelection.CodingKeys()
{
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TimestampedSelection.hash(into:)(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v3;
  uint64_t v4;
  Swift::UInt64 v5;
  Swift::UInt v6;
  uint64_t v7;
  Swift::UInt64 v8;
  uint64_t v9;

  v3 = v1[3];
  v4 = v1[4];
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v3 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    v7 = *(_QWORD *)(type metadata accessor for CRKeyPath() - 8);
    v8 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v8 += v9;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t TimestampedSelection.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TimestampedSelection.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1[1];
  v15 = v1[2];
  v16 = v9;
  v10 = v1[4];
  v14 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = v14;
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v18 = v11;
    v17 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
    lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A](&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C80], MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = v10;
    v17 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
    lazy protocol witness table accessor for type [UUID] and conformance <A> [A](&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A], &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09B8], MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int TimestampedSelection.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  uint64_t v3;
  Swift::UInt64 v4;
  Swift::UInt v5;
  uint64_t v6;
  Swift::UInt64 v7;
  uint64_t v8;
  char v10[72];

  v1 = *v0;
  v2 = v0[3];
  v3 = v0[4];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = *(_QWORD *)(type metadata accessor for CRKeyPath() - 8);
    v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v7 += v8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v10, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t TimestampedSelection.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TimestampedSelection.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.timeIntervalSinceReferenceDate.getter();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v21) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    LOBYTE(v21) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
    v20 = 2;
    lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A](&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C98], MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v19 = v13;
    v16 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
    v20 = 3;
    lazy protocol witness table accessor for type [UUID] and conformance <A> [A](&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A], &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09E0], MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v17 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v11;
    a2[1] = v19;
    a2[2] = v15;
    a2[3] = v16;
    a2[4] = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimestampedSelection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return TimestampedSelection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimestampedSelection(_QWORD *a1)
{
  return TimestampedSelection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimestampedSelection()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[11];
  __int128 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  v4[9] = *(_QWORD *)v0;
  v4[10] = v1;
  v5 = *(_OWORD *)(v0 + 16);
  v6 = v2;
  Hasher.init(_seed:)();
  TimestampedSelection.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance TimestampedSelection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v4 = v1[1];
  v3 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  *a1 = v2;
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v5;
  a1[4] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance TimestampedSelection()
{
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance TimestampedSelection()
{
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance TimestampedSelection()
{
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance TimestampedSelection()
{
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t specialized static TimestampedSelection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (*(double *)a1 == *(double *)a2
    && ((v2 = *(_QWORD *)(a1 + 24),
         v3 = *(_QWORD *)(a1 + 32),
         v5 = *(_QWORD *)(a2 + 24),
         v4 = *(_QWORD *)(a2 + 32),
         *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
      ? (v6 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
      : (v6 = 0),
        (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
     && (specialized static Array<A>.== infix(_:_:)(v2, v5) & 1) != 0))
  {
    return specialized static Array<A>.== infix(_:_:)(v3, v4);
  }
  else
  {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection.CodingKeys, &type metadata for TimestampedSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection.CodingKeys, &type metadata for TimestampedSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection.CodingKeys, &type metadata for TimestampedSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection.CodingKeys, &type metadata for TimestampedSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection.CodingKeys, &type metadata for TimestampedSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection.CodingKeys, &type metadata for TimestampedSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection.CodingKeys, &type metadata for TimestampedSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CRKeyPath]);
    v10 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], a3);
    result = MEMORY[0x1DF0E6450](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [UUID] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UUID]);
    v10 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], a3);
    result = MEMORY[0x1DF0E6450](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CRStruct_Base_1 in CanvasState()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
}

uint64_t base witness table accessor for CRStruct_Base in CanvasState()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
}

uint64_t associated type witness table accessor for CRStruct_Base_1.Type_1 : CRDT in CanvasState()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRDictionary<UUID, TimestampedSelection> and conformance CRDictionary<A, B>, &demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>, MEMORY[0x1E0D11C90]);
}

uint64_t base witness table accessor for CRDT in CanvasState()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
}

uint64_t base witness table accessor for CRMergeable in CanvasState()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
}

uint64_t base witness table accessor for CRType in CanvasState()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in CanvasState()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_1<CanvasState> and conformance CRStructMergeableDelta_1<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_1<CanvasState>, MEMORY[0x1E0D12728]);
}

uint64_t base witness table accessor for CRCodable in CanvasState()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TimestampedSelection.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [TimestampedSelection.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [TimestampedSelection.CodingKeys], MEMORY[0x1E0DEAF50]);
}

uint64_t *initializeBufferWithCopyOfBuffer for CanvasState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CanvasState(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE497F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE49884(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void type metadata completion function for CanvasState()
{
  unint64_t v0;

  type metadata accessor for CRDictionary<UUID, TimestampedSelection>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for CRDictionary<UUID, TimestampedSelection>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>)
  {
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
    lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
    v0 = type metadata accessor for CRDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  }
}

uint64_t destroy for TimestampedSelection()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimestampedSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TimestampedSelection(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimestampedSelection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimestampedSelection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimestampedSelection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimestampedSelection()
{
  return &type metadata for TimestampedSelection;
}

uint64_t storeEnumTagSinglePayload for TimestampedSelection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDE49C74 + 4 * byte_1DDF44A1D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDE49CA8 + 4 * byte_1DDF44A18[v4]))();
}

uint64_t sub_1DDE49CA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE49CB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDE49CB8);
  return result;
}

uint64_t sub_1DDE49CC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDE49CCCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDE49CD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE49CD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimestampedSelection.CodingKeys()
{
  return &type metadata for TimestampedSelection.CodingKeys;
}

void specialized ToolPickerControllerDelegate.addNewCanvasElement(_:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = v1;
  v51 = v2;
  v39[2] = swift_getObjectType();
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v40 = *(_QWORD *)(v41 - 8);
  v4 = *(_QWORD *)(v40 + 64);
  MEMORY[0x1E0C80A78](v41, v5);
  v39[1] = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v42 = (char *)v39 - v8;
  v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v9, v10);
  v45 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  MEMORY[0x1E0C80A78](v12, v13);
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v20);
  v43 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v22, v23);
  v39[3] = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v47 = (char *)v39 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v28, v29);
  v44 = (char *)v39 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v46 = (char *)v39 - v33;
  v34 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v34, v35);
  MEMORY[0x1E0C80A78](v36, v37);
  v48 = (char *)v39 - v38;
  __asm { BR              X10 }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v39[2] = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v2);
  v39[1] = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v43, v4);
  v41 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v42 = (char *)v39 - v8;
  v45 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v45, v9);
  v44 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v11);
  v46 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v13, v14);
  v50 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  MEMORY[0x1E0C80A78](v16, v17);
  v18 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v18, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v22);
  v49 = (char *)v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v24, v25);
  MEMORY[0x1E0C80A78](v26, v27);
  v52 = (char *)v39 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v29, v30);
  MEMORY[0x1E0C80A78](v31, v32);
  v51 = (char *)v39 - v33;
  v34 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v34, v35);
  MEMORY[0x1E0C80A78](v36, v37);
  v53 = (char *)v39 - v38;
  __asm { BR              X10 }
}

uint64_t sub_1DDE4A068()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t v4;
  __n128 v5;

  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v1 = *(char **)(v0 - 304);
  TaggedValue_9.init(_:)();
  *(_QWORD *)(v0 - 256) = 0;
  *(_QWORD *)(v0 - 192) = 0;
  v2 = *(_QWORD *)(v0 - 296);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 - 280) + 56))(v2, 1, 1, *(_QWORD *)(v0 - 272));
  *(_QWORD *)(v0 - 200) = 0;
  v3 = *(_QWORD *)(v0 - 288);
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v1, (uint64_t *)(v0 - 256), (uint64_t *)(v0 - 192), v2, (uint64_t *)(v0 - 200), v3, 0.0, 0.0, 0.0, 0.0, 5.0);
  if (one-time initialization token for defaultRectangleShapeSize != -1)
    swift_once();
  v5.n128_u64[0] = *((_QWORD *)&static UIConstants.defaultRectangleShapeSize + 1);
  *(_QWORD *)&v4.f64[0] = static UIConstants.defaultRectangleShapeSize;
  specialized ToolPickerControllerDelegate.addShape(_:size:)(v3, v4, v5);
  return outlined destroy of PKStrokeProperties(v3, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
}

uint64_t sub_1DDE4BB58()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;

  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v1 = *(char **)(v0 - 304);
  TaggedValue_9.init(_:)();
  *(_QWORD *)(v0 - 256) = 0;
  *(_QWORD *)(v0 - 200) = 0;
  v2 = *(_QWORD *)(v0 - 296);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 - 280) + 56))(v2, 1, 1, *(_QWORD *)(v0 - 272));
  *(_QWORD *)(v0 - 208) = 0;
  v3 = *(_QWORD *)(v0 - 288);
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v1, (uint64_t *)(v0 - 256), (uint64_t *)(v0 - 200), v2, (uint64_t *)(v0 - 208), v3, 0.0, 0.0, 0.0, 0.0, 5.0);
  if (one-time initialization token for defaultRectangleShapeSize != -1)
    swift_once();
  specialized ToolPickerControllerDelegate.addShape(_:size:)(v3, *(double *)&static UIConstants.defaultRectangleShapeSize, *((CGFloat *)&static UIConstants.defaultRectangleShapeSize + 1));
  return outlined destroy of PKStrokeProperties(v3, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
}

void ToolPickerControllerDelegate.addNewSignatureItem(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  void *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  id v57;
  void *v58;
  char v59;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v51 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v51 - v20;
  if (a1)
  {
    v54 = v19;
    v55 = v9;
    v22 = a1;
    v57 = v22;
    v23 = SignatureItem.size.getter();
    v25 = 400.0 / v23;
    if (400.0 / v23 > 1.0)
      v25 = 1.0;
    v26 = v23 * v25;
    v27 = v24 * v25;
    v28 = 72.0 / v27;
    if (72.0 / v27 > 1.0)
      v28 = 1.0;
    v29 = (*(double (**)(uint64_t, uint64_t, double, double))(a3 + 96))(a2, a3, v26 * v28, v27 * v28);
    v31 = v30;
    v32 = (*(double (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
    v34 = v33;
    v36 = v35;
    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    v37 = SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v22, 0, 1, 0, 1, v32, v34);
    v56 = a2;
    MEMORY[0x1E0C80A78](v37, v38);
    *((double *)&v51 - 6) = v32 - v29 * 0.5;
    *((double *)&v51 - 5) = v34 - v31 * 0.5;
    *((double *)&v51 - 4) = v29;
    *((double *)&v51 - 3) = v31;
    *(&v51 - 2) = v36;
    Capsule.callAsFunction<A>(_:)();
    v53 = 0;
    v39 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v39(v16, v21, v10);
    swift_getKeyPath();
    v40 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
    Capsule<>.subscript.getter();
    swift_release();
    v41 = *(void (**)(char *, uint64_t))(v11 + 8);
    v42 = v16;
    v43 = v57;
    v41(v42, v10);
    if (v59 != 1)
      goto LABEL_13;
    v44 = v54;
    v52 = a3;
    v39(v54, v21, v10);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v41(v44, v10);
    v45 = v58;
    if (v58)
    {
      v46 = (uint64_t)v55;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v58 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v55, &demangling cache variable for type metadata for PKDrawing?);

      v47 = type metadata accessor for PKDrawing();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v46, 1, v47) != 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for PKDrawing?);
        Capsule.callAsFunction<A>(_:)();
LABEL_12:
        a3 = v52;
        v43 = v57;
LABEL_13:
        v49 = *(void (**)(char *, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a3 + 64);
        v50 = type metadata accessor for Signature();
        v49(v21, v50, v40, &protocol witness table for Signature, v56, a3);

        v41(v21, v10);
        return;
      }
    }
    else
    {
      v48 = type metadata accessor for PKDrawing();
      v46 = (uint64_t)v55;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v55, 1, 1, v48);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for PKDrawing?);
    goto LABEL_12;
  }
}

void specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t)&protocol conformance descriptor for Signature, (uint64_t)&protocol witness table for Signature);
}

void specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7)
{
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (a1)
  {
    v15 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v15);
    v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v15)
                                                                                             + 0x480);
    v13 = a4(0);
    v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a5, a4, a6);
    v12(a2, 1, 0, 0, v13, v14, a7);

  }
}

void specialized ToolPickerControllerDelegate.addLine(_:size:)(uint64_t a1, __n128 a2, float64x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  __int128 v31;
  void *v32;
  id v33;
  __int128 v34;
  __int128 v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  float64x2_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  CGColorSpace *v54;
  CGColorSpace *v55;
  CGColorRef v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  uint64_t ObjectType;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  float64x2_t v74;
  CGFloat v75[4];
  float64x2_t v76;
  float64x2_t v77;

  v4 = v3;
  v73 = a2;
  v74 = a3;
  ObjectType = swift_getObjectType();
  v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v71 = *(_QWORD *)(v8 - 8);
  v72 = v8;
  v9 = *(_QWORD *)(v71 + 64);
  MEMORY[0x1E0C80A78](v8, v10);
  v68 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v66 - v13;
  v15 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v66 - v21;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v66 - v21, v23);
  v70 = v4;
  v24 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  v25 = MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  *(_QWORD *)&v26.f64[0] = v73.n128_u64[0];
  v26.f64[1] = v74.f64[0];
  v74 = v26;
  if (v25)
  {
    v27 = *(_QWORD *)(v24 + 8);
    v28 = swift_getObjectType();
    v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(v28, v27);
    swift_unknownObjectRelease();
    if (v29)
    {
      v30 = objc_msgSend(v29, sel_window);
      if (v30)
      {
        v32 = v30;
        v33 = objc_msgSend(v30, sel_screen);

        objc_msgSend(v33, sel_scale);
        v66 = v34;

      }
      else
      {
        *(_QWORD *)&v31 = 1.0;
        v66 = v31;
      }
      *(double *)&v35 = AnyCanvas.scaleFactorForNewElements.getter();
      v67 = v35;

      v36 = vmulq_n_f64(vmulq_n_f64(v74, *(double *)&v67), *(double *)&v66);
      v37 = vrndmq_f64(v36);
      v74 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v36, v37), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v36), (int8x16_t)v37), (float64x2_t)vdupq_lane_s64(v66, 0));
    }
  }
  v38 = MEMORY[0x1DF0E666C](v24);
  v39 = 0uLL;
  v40 = 0.0;
  if (v38)
  {
    v41 = *(_QWORD *)(v24 + 8);
    v42 = swift_getObjectType();
    v43 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v42, v41);
    v44 = swift_unknownObjectRelease();
    v39 = 0uLL;
    if (v43)
    {
      *(double *)&v45 = (*(double (**)(uint64_t, float64x2_t, float64_t, __n128))((*MEMORY[0x1E0DEEDD8] & *v43)
                                                                                          + 0x6B8))(v44, v74, v74.f64[1], (__n128)0);
      v66 = v45;
      v67 = v46;
      v40 = v47;

      *(_QWORD *)&v39.f64[0] = v66;
      *(_QWORD *)&v39.f64[1] = v67;
    }
  }
  v48 = v74.f64[0] / v73.n128_f64[0];
  __asm { FMOV            V0.2D, #-0.5 }
  v76 = vaddq_f64(v39, vmulq_f64(v74, _Q0));
  v77 = v74;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(v76.f64[0], v40) > 0.01)
  {
    v76.f64[0] = v40;
    CRRegister.value.setter();
  }
  CRRegister.wrappedValue.getter();
  v76.f64[0] = fmax(round(v48 * v76.f64[0]), 1.0);
  CRRegister.wrappedValue.setter();
  memset(v75, 0, 24);
  v75[3] = 1.0;
  v54 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (!v54)
  {
    __break(1u);
    goto LABEL_19;
  }
  v55 = v54;
  v56 = CGColorCreate(v54, v75);

  if (!v56)
  {
LABEL_19:
    __break(1u);
    return;
  }
  *(_QWORD *)&v76.f64[0] = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  outlined init with copy of PKStrokeProperties((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.init(_:id:)();
  v57 = MEMORY[0x1DF0E666C](v24);
  v59 = v71;
  v58 = v72;
  if (v57)
  {
    v60 = *(_QWORD *)(v24 + 8);
    v61 = swift_getObjectType();
    v62 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v60 + 16))(v61, v60);
    swift_unknownObjectRelease();
    if (v62)
    {
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
      v63 = v68;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v68, v14, v58);
      v64 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
      v65 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v65 + v64, v63, v58);
      *(_QWORD *)(v65 + ((v9 + v64 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
      CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v65);
      swift_release();

    }
  }
  (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v58);
  outlined destroy of PKStrokeProperties((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
}

void specialized ToolPickerControllerDelegate.addLine(_:size:)(uint64_t a1, double a2, CGFloat a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(_QWORD);
  double v34;
  double v35;
  double v36;
  double v37;
  CGColorSpace *v38;
  CGColorSpace *v39;
  CGColorRef v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CGFloat v55[4];
  __int128 v56;
  __int128 v57;

  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v48, v7);
  v47 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v46 - v11;
  v13 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v52 = *(_QWORD *)(v17 - 8);
  v53 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v21, v22);
  v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v23);
  v49 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v46 - v31;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v46 - v31, v33);
  v54 = v3;
  v34 = InlineDrawingCanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(a2, a3);
  v36 = v35;
  *(double *)&v56 = v34 - a2 * 0.5;
  *((double *)&v56 + 1) = v37 - a3 * 0.5;
  *(double *)&v57 = a2;
  *((CGFloat *)&v57 + 1) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(*(double *)&v56, v36) > 0.01)
  {
    *(double *)&v56 = v36;
    CRRegister.value.setter();
  }
  CRRegister.wrappedValue.getter();
  *(_QWORD *)&v56 = fmax(round(a2 / a2 * *(double *)&v56), 1.0);
  CRRegister.wrappedValue.setter();
  memset(v55, 0, 24);
  v55[3] = 1.0;
  v38 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v38)
  {
    v39 = v38;
    v40 = CGColorCreate(v38, v55);

    if (v40)
    {
      *(_QWORD *)&v56 = v40;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.setter();
      outlined init with copy of PKStrokeProperties((uint64_t)v32, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      v41 = v49;
      Capsule<>.init(_:id:)();
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
      v56 = 0u;
      v57 = 0u;
      CRRegister.init(wrappedValue:)();
      v56 = 0u;
      v57 = 0u;
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v56 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v12, 1, 1, v42);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, v47, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(_QWORD *)&v56 = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
      lazy protocol witness table accessor for type Color? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v56 = 0;
      *((_QWORD *)&v56 + 1) = 0xE000000000000000;
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v56 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
      CROrderedSet.init()();
      *(_QWORD *)&v16[*(int *)(v13 + 48)] = MEMORY[0x1E0DEE9E0];
      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v43 = Capsule<>.init(_:id:)();
      MEMORY[0x1E0C80A78](v43, v44);
      *(&v46 - 2) = (uint64_t)v41;
      v45 = v53;
      Capsule.mutate<A>(_:)();
      InlineDrawingCanvasElementController.upgradePaper(_:)((uint64_t)v20);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v45);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v41, v51);
      outlined destroy of PKStrokeProperties((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void specialized ToolPickerControllerDelegate.addShape(_:size:)(uint64_t a1, float64x2_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  __int128 v31;
  void *v32;
  id v33;
  __int128 v34;
  __n128 v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  float64x2_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  __n128 v46;
  double v47;
  CGColorSpace *v53;
  CGColorSpace *v54;
  CGColorRef v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  uint64_t ObjectType;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;

  v4 = v3;
  v71 = a3;
  v72 = a2;
  ObjectType = swift_getObjectType();
  v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  v9 = *(_QWORD *)(v69 + 64);
  MEMORY[0x1E0C80A78](v8, v10);
  v66 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v65 - v13;
  v15 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v65 - v21;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v65 - v21, v23);
  v68 = v4;
  v24 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  v25 = MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  v26.f64[0] = v72.f64[0];
  *(_QWORD *)&v26.f64[1] = v71.n128_u64[0];
  v72 = v26;
  if (v25)
  {
    v27 = *(_QWORD *)(v24 + 8);
    v28 = swift_getObjectType();
    v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(v28, v27);
    swift_unknownObjectRelease();
    if (v29)
    {
      v30 = objc_msgSend(v29, sel_window);
      if (v30)
      {
        v32 = v30;
        v33 = objc_msgSend(v30, sel_screen);

        objc_msgSend(v33, sel_scale);
        v65 = v34;

      }
      else
      {
        *(_QWORD *)&v31 = 1.0;
        v65 = v31;
      }
      v35.n128_f64[0] = AnyCanvas.scaleFactorForNewElements.getter();
      v71 = v35;

      v36 = vmulq_n_f64(vmulq_n_f64(v72, v71.n128_f64[0]), *(double *)&v65);
      v37 = vrndmq_f64(v36);
      v72 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v36, v37), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v36), (int8x16_t)v37), (float64x2_t)vdupq_lane_s64(v65, 0));
    }
  }
  v38 = MEMORY[0x1DF0E666C](v24);
  v39 = 0uLL;
  v40 = 0.0;
  if (v38)
  {
    v41 = *(_QWORD *)(v24 + 8);
    v42 = swift_getObjectType();
    v43 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v42, v41);
    v44 = swift_unknownObjectRelease();
    v39 = 0uLL;
    if (v43)
    {
      *(double *)&v45 = (*(double (**)(uint64_t, float64x2_t, float64_t, __n128))((*MEMORY[0x1E0DEEDD8] & *v43)
                                                                                          + 0x6B8))(v44, v72, v72.f64[1], (__n128)0);
      v65 = v45;
      v71 = v46;
      v40 = v47;

      *(_QWORD *)&v39.f64[0] = v65;
      *(_QWORD *)&v39.f64[1] = v71.n128_u64[0];
    }
  }
  __asm { FMOV            V0.2D, #-0.5 }
  v73 = vaddq_f64(v39, vmulq_f64(v72, _Q0));
  v74 = v72;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(v73.f64[0], v40) > 0.01)
  {
    v73.f64[0] = v40;
    CRRegister.value.setter();
  }
  v53 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (!v53)
  {
    __break(1u);
    goto LABEL_19;
  }
  v54 = v53;
  v55 = CGColorCreate(v53, dbl_1EA83A190);

  if (!v55)
  {
LABEL_19:
    __break(1u);
    return;
  }
  *(_QWORD *)&v73.f64[0] = v55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  outlined init with copy of PKStrokeProperties((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.init(_:id:)();
  v56 = MEMORY[0x1DF0E666C](v24);
  v58 = v69;
  v57 = v70;
  if (v56)
  {
    v59 = *(_QWORD *)(v24 + 8);
    v60 = swift_getObjectType();
    v61 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 16))(v60, v59);
    swift_unknownObjectRelease();
    if (v61)
    {
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
      v62 = v66;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v66, v14, v57);
      v63 = (*(unsigned __int8 *)(v58 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      v64 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v64 + v63, v62, v57);
      *(_QWORD *)(v64 + ((v9 + v63 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
      CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v64);
      swift_release();

    }
  }
  (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v57);
  outlined destroy of PKStrokeProperties((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
}

void specialized ToolPickerControllerDelegate.addShape(_:size:)(uint64_t a1, double a2, CGFloat a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t (*v34)(_QWORD);
  double v35;
  double v36;
  double v37;
  double v38;
  CGColorSpace *v39;
  CGColorSpace *v40;
  CGColorRef v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v49, v7);
  v48 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v47 - v11;
  v13 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v53 = *(_QWORD *)(v17 - 8);
  v54 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v21, v22);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v51 = *(_QWORD *)(v23 - 8);
  v52 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v50 = (char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v47 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v47 - v32;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v47 - v32, v34);
  v55 = v3;
  v35 = InlineDrawingCanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(a2, a3);
  v37 = v36;
  *(double *)&v56 = v35 - a2 * 0.5;
  *((double *)&v56 + 1) = v38 - a3 * 0.5;
  *(double *)&v57 = a2;
  *((CGFloat *)&v57 + 1) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(*(double *)&v56, v37) > 0.01)
  {
    *(double *)&v56 = v37;
    CRRegister.value.setter();
  }
  v39 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v39)
  {
    v40 = v39;
    v41 = CGColorCreate(v39, dbl_1EA83A200);

    if (v41)
    {
      *(_QWORD *)&v56 = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.setter();
      outlined init with copy of PKStrokeProperties((uint64_t)v33, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      v42 = v50;
      Capsule<>.init(_:id:)();
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
      v56 = 0u;
      v57 = 0u;
      CRRegister.init(wrappedValue:)();
      v56 = 0u;
      v57 = 0u;
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v56 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v12, 1, 1, v43);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, v48, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(_QWORD *)&v56 = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
      lazy protocol witness table accessor for type Color? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v56 = 0;
      *((_QWORD *)&v56 + 1) = 0xE000000000000000;
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v56 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
      CROrderedSet.init()();
      *(_QWORD *)&v16[*(int *)(v13 + 48)] = MEMORY[0x1E0DEE9E0];
      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v44 = Capsule<>.init(_:id:)();
      MEMORY[0x1E0C80A78](v44, v45);
      *(&v47 - 2) = (uint64_t)v42;
      v46 = v54;
      Capsule.mutate<A>(_:)();
      InlineDrawingCanvasElementController.upgradePaper(_:)((uint64_t)v20);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v46);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v52);
      outlined destroy of PKStrokeProperties((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in ToolPickerControllerDelegate.addNewSignatureItem(_:)()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #2 in ToolPickerControllerDelegate.addNewSignatureItem(_:)()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t *, _QWORD);
  uint64_t KeyPath;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = a1;
  v3 = type metadata accessor for CRKeyPath();
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&KeyPath - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&KeyPath - v8;
  v10 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&KeyPath - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v15 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  v43 = v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&KeyPath - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v46 = (char *)&KeyPath - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&KeyPath - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>);
  v47 = *(_QWORD *)(v40 - 8);
  v28 = MEMORY[0x1E0C80A78](v40, v27);
  v30 = (char *)&KeyPath - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, a2, v22, v28);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  swift_retain();
  Ref.init<A>(_:_:)();
  KeyPath = swift_getKeyPath();
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v48) = 5;
  v32 = v44;
  v31 = v45;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v9, v45);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v31);
  outlined destroy of PKStrokeProperties((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v33 = v42;
  SharedTagged_9.tag.getter();
  v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v18, v33);
  v50 = v48;
  v51 = v49;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<Shape>, MEMORY[0x1E0D12878]);
  v35 = v40;
  Reference.identity.getter();
  v36 = v46;
  SharedTagged_9.init(_:id:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v37 = (void (*)(uint64_t *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  v34(v36, v33);
  v37(&v48, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v30, v35);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t *, _QWORD);
  uint64_t KeyPath;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = a1;
  v3 = type metadata accessor for CRKeyPath();
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&KeyPath - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&KeyPath - v8;
  v10 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&KeyPath - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v15 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  v43 = v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&KeyPath - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v46 = (char *)&KeyPath - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&KeyPath - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v47 = *(_QWORD *)(v40 - 8);
  v28 = MEMORY[0x1E0C80A78](v40, v27);
  v30 = (char *)&KeyPath - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, a2, v22, v28);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  swift_retain();
  Ref.init<A>(_:_:)();
  KeyPath = swift_getKeyPath();
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v48) = 2;
  v32 = v44;
  v31 = v45;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v9, v45);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v31);
  outlined destroy of PKStrokeProperties((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
  v33 = v42;
  SharedTagged_9.tag.getter();
  v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v18, v33);
  v50 = v48;
  v51 = v49;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>, MEMORY[0x1E0D12878]);
  v35 = v40;
  Reference.identity.getter();
  v36 = v46;
  SharedTagged_9.init(_:id:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v37 = (void (*)(uint64_t *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  v34(v36, v33);
  v37(&v48, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v30, v35);
}

uint64_t sub_1DDE4FA58()
{
  return objectdestroyTm_8((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t sub_1DDE4FADC()
{
  return objectdestroyTm_8((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t sub_1DDE4FAEC()
{
  return objectdestroyTm_8((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
}

void closure #1 in CanvasElementController.addCanvasElement<A>(_:)specialized partial apply(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), (uint64_t (*)(uint64_t))type metadata accessor for Shape, (unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t)&protocol conformance descriptor for Shape, (uint64_t)&protocol witness table for Shape);
}

uint64_t sub_1DDE4FB70()
{
  return objectdestroyTm_8((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t objectdestroyTm_8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)specialized partial apply(uint64_t a1)
{
  return partial apply for specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(a1);
}

void CanvasGenerationTool.magicGenerativeState.setter(unsigned __int8 a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  _BYTE *v26;
  id v27;
  _BYTE *v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  v5 = v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState];
  if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(v5, a1) & 1) != 0)
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)generativeLogger);
    v7 = v1;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v42 = v4;
      v10 = swift_slowAlloc();
      v41 = swift_slowAlloc();
      v43[0] = v41;
      *(_DWORD *)v10 = 136315650;
      v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      v13 = MagicGenerativePlaygroundState.rawValue.getter(v5);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 22) = 2080;
      v15 = MagicGenerativePlaygroundState.rawValue.getter(a1);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v8, v9, "%s state transition from '%s' to '%s'", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v41, -1, -1);
      v17 = v10;
      v4 = v42;
      MEMORY[0x1DF0E6558](v17, -1, -1);

    }
    else
    {

    }
    v1[v4] = a1;
    if (MagicGenerativePlaygroundState.rawValue.getter(a1) == 0x656C6553646E6177 && v18 == 0xED00006E6F697463)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0 && v2[v4] - 3 > 3)
        return;
    }
    v20 = (_QWORD *)MEMORY[0x1DF0E666C](&v7[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
    if (v20)
    {
      v21 = v20;
      v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x320))();

      if (v22)
      {
        objc_msgSend(v22, sel_setRulerEnabled_, 0);

      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError();
    v23 = (void *)swift_allocError();
    *v24 = v5;
    v24[1] = a1;
    swift_willThrow();
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)generativeLogger);
    v26 = v1;
    v27 = v23;
    v28 = v26;
    v29 = v23;
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v43[0] = v33;
      *(_DWORD *)v32 = 136315394;
      v34 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      swift_getErrorValue();
      v36 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v30, v31, "%s: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v33, -1, -1);
      MEMORY[0x1DF0E6558](v32, -1, -1);
    }
    else
    {

    }
    v43[0] = 0;
    v43[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    v38._countAndFlagsBits = 0xD000000000000017;
    v38._object = (void *)0x80000001DDF59F60;
    String.append(_:)(v38);
    _print_unlocked<A, B>(_:_:)();
    v39._countAndFlagsBits = 0x74617473206F7420;
    v39._object = (void *)0xEB00000000203A65;
    String.append(_:)(v39);
    _print_unlocked<A, B>(_:_:)();
    v40._object = (void *)0x80000001DDF59F80;
    v40._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v40);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void CanvasGenerationTool.continuation.didset()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t)v0 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v5, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  LODWORD(v5) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  if ((_DWORD)v5 == 1)
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)generativeLogger);
    v8 = v0;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v16 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v9, v10, "%s continuation is set to nil", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v12, -1, -1);
      MEMORY[0x1DF0E6558](v11, -1, -1);

    }
    else
    {

    }
  }
}

id CanvasGenerationTool.init(canvas:gesture:)(void *a1, void *a2)
{
  _BYTE *v2;
  _OWORD *v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  objc_super v16;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack] = 0;
  v5 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance];
  v6 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *v5 = *MEMORY[0x1E0C9D628];
  v5[1] = v6;
  v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC] = 0;
  v7 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  swift_unknownObjectWeakAssign();
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for CanvasGenerationTool();
  v9 = objc_msgSendSuper2(&v16, sel_initWithFrame_, 0.0, 0.0, 1.0, 1.0);
  objc_msgSend(a2, sel_addTarget_action_, v9, sel_generationTool_);
  objc_msgSend(v9, sel_setUserInteractionEnabled_, 1);
  v10 = (void *)objc_opt_self();
  v11 = objc_msgSend(v10, sel_defaultCenter);
  objc_msgSend(v11, sel_addObserver_selector_name_object_, v9, sel_keyboardWillShowNotification_, *MEMORY[0x1E0DC4FE8], 0);

  v12 = objc_msgSend(v10, sel_defaultCenter);
  v13 = *MEMORY[0x1E0DC4FE0];
  v14 = v9;
  objc_msgSend(v12, sel_addObserver_selector_name_object_, v14, sel_keyboardWillHideNotification_, v13, 0);

  return v14;
}

Swift::Void __swiftcall CanvasGenerationTool.prewarm()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x286D726177657270, 0xE900000000000029, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v6, -1, -1);
    MEMORY[0x1DF0E6558](v5, -1, -1);

  }
  else
  {

  }
  v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC])
  {
    v10 = objc_msgSend(objc_allocWithZone((Class)PPKGPInProcessMagicPaperViewController), sel_initWithTokenProvider_, v2);
    CanvasGenerationTool.magicGenerativeState.setter(1u);
    v11 = *(void **)&v2[v9];
    *(_QWORD *)&v2[v9] = v10;

  }
}

uint64_t CanvasGenerationTool.sendFeedback(action:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[45] = a1;
  v2[46] = v1;
  v2[47] = type metadata accessor for FeedbackInput();
  v2[48] = swift_task_alloc();
  v3 = type metadata accessor for FBKSInteraction.StructuredValue();
  v2[49] = v3;
  v2[50] = *(_QWORD *)(v3 - 8);
  v2[51] = swift_task_alloc();
  v4 = type metadata accessor for FBKSInteraction.Content();
  v2[52] = v4;
  v2[53] = *(_QWORD *)(v4 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = type metadata accessor for Image();
  v2[56] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v2[57] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v2[58] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2[59] = v5;
  v2[60] = *(_QWORD *)(v5 - 8);
  v2[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  v2[62] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  v2[63] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v2[64] = v6;
  v2[65] = *(_QWORD *)(v6 - 8);
  v2[66] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[67] = static MainActor.shared.getter();
  v2[68] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[69] = v7;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 592) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.sendFeedback(action:)()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  void *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;

  result = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 368) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(_QWORD *)(v0 + 560) = result;
  if (!result)
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v13 = *(void **)(v0 + 368);
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)generativeLogger);
    v15 = v13;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void **)(v0 + 368);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v107 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v16, v17, "%s: returning (canvas is nil)", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v21, -1, -1);
      MEMORY[0x1DF0E6558](v20, -1, -1);
    }
    else
    {

    }
    goto LABEL_21;
  }
  v2 = (_QWORD *)result;
  v3 = *(_QWORD *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    if (*(_QWORD *)(v4 + 16) != 1)
    {
      swift_release();
LABEL_15:
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v25 = *(void **)(v0 + 368);
      v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)generativeLogger);
      v27 = v25;
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      v30 = os_log_type_enabled(v28, v29);
      v31 = *(void **)(v0 + 368);
      if (v30)
      {
        v32 = (uint8_t *)swift_slowAlloc();
        v33 = swift_slowAlloc();
        v107 = v33;
        *(_DWORD *)v32 = 136315138;
        v34 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v28, v29, "%s: returning (no selected image)", v32, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v33, -1, -1);
        MEMORY[0x1DF0E6558](v32, -1, -1);

      }
      else
      {

      }
LABEL_21:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v5 = *(_QWORD *)(v0 + 496);
    specialized Collection.first.getter(v4, v5);
    v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
    v9 = *(_QWORD *)(v0 + 520);
    v11 = *(_QWORD *)(v0 + 504);
    v10 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 496);
    if (v8 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 496), (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, 1, 1, v10);
LABEL_14:
      v24 = *(_QWORD *)(v0 + 504);
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v24, &demangling cache variable for type metadata for WeakRef<Image>?);
      goto LABEL_15;
    }
    WeakTagged_9.tagged2.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10) == 1)
      goto LABEL_14;
    v36 = *(_QWORD *)(v0 + 528);
    v38 = *(_QWORD *)(v0 + 472);
    v37 = *(_QWORD *)(v0 + 480);
    v39 = *(_QWORD *)(v0 + 464);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 32))(v36, *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512));
    v40 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x790))(v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) == 1)
    {
      v41 = *(_QWORD *)(v0 + 464);
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v41, &demangling cache variable for type metadata for Capsule<Image>?);
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v42 = *(void **)(v0 + 368);
      v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)generativeLogger);
      v44 = v42;
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.error.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v0 + 528);
      v49 = *(_QWORD *)(v0 + 520);
      v50 = *(_QWORD *)(v0 + 512);
      v51 = *(void **)(v0 + 368);
      if (v47)
      {
        v100 = *(_QWORD *)(v0 + 528);
        v52 = (uint8_t *)swift_slowAlloc();
        v53 = swift_slowAlloc();
        v107 = v53;
        *(_DWORD *)v52 = 136315138;
        v54 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v45, v46, "%s: returning (selected image does not have an ImageElement)", v52, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v53, -1, -1);
        MEMORY[0x1DF0E6558](v52, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v100, v50);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      }
      goto LABEL_21;
    }
    v56 = *(_QWORD *)(v0 + 528);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 480) + 32))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472));
    *(_QWORD *)(v0 + 568) = (*(uint64_t (**)(uint64_t))((*v40 & *v2) + 0x798))(v56);
    *(_QWORD *)(v0 + 576) = v57;
    if (v57 >> 60 == 15)
    {
      v104 = v2;
      swift_release();
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v58 = *(void **)(v0 + 368);
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)generativeLogger);
      v60 = v58;
      v61 = Logger.logObject.getter();
      v62 = static os_log_type_t.error.getter();
      v63 = os_log_type_enabled(v61, v62);
      v64 = *(_QWORD *)(v0 + 528);
      v65 = *(_QWORD *)(v0 + 520);
      v66 = *(_QWORD *)(v0 + 512);
      v67 = *(_QWORD *)(v0 + 480);
      v68 = *(_QWORD *)(v0 + 488);
      v69 = *(_QWORD *)(v0 + 472);
      v70 = *(void **)(v0 + 368);
      if (v63)
      {
        v103 = *(_QWORD *)(v0 + 528);
        v101 = *(_QWORD *)(v0 + 488);
        v71 = (uint8_t *)swift_slowAlloc();
        v98 = v65;
        v72 = swift_slowAlloc();
        v107 = v72;
        *(_DWORD *)v71 = 136315138;
        v73 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v61, v62, "%s: returning (selected image does not have image generation recipe)", v71, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v72, -1, -1);
        MEMORY[0x1DF0E6558](v71, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v101, v69);
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v103, v66);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      }
      goto LABEL_21;
    }
    v76 = *(_QWORD *)(v0 + 448);
    v75 = *(_QWORD *)(v0 + 456);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.root.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v76, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    v77 = type metadata accessor for CRAssetOrData();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v75, 1, v77) == 1)
    {
      v78 = *(_QWORD *)(v0 + 456);
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for CRAssetOrData?);
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v79 = *(void **)(v0 + 368);
      v80 = type metadata accessor for Logger();
      __swift_project_value_buffer(v80, (uint64_t)generativeLogger);
      v81 = v79;
      v82 = Logger.logObject.getter();
      v83 = static os_log_type_t.error.getter();
      v84 = os_log_type_enabled(v82, v83);
      v85 = *(_QWORD *)(v0 + 528);
      v86 = *(_QWORD *)(v0 + 520);
      v87 = *(_QWORD *)(v0 + 512);
      v88 = *(_QWORD *)(v0 + 488);
      v105 = *(void **)(v0 + 560);
      v106 = *(_QWORD *)(v0 + 480);
      v89 = *(_QWORD *)(v0 + 472);
      v90 = *(void **)(v0 + 368);
      if (v84)
      {
        v96 = *(_QWORD *)(v0 + 568);
        v97 = *(_QWORD *)(v0 + 576);
        v102 = *(_QWORD *)(v0 + 488);
        v91 = (uint8_t *)swift_slowAlloc();
        v99 = v86;
        v92 = swift_slowAlloc();
        v107 = v92;
        *(_DWORD *)v91 = 136315138;
        v93 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v82, v83, "%s: returning (image is nil)", v91, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v92, -1, -1);
        MEMORY[0x1DF0E6558](v91, -1, -1);
        outlined consume of Data?(v96, v97);

        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v102, v89);
        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v85, v87);
      }
      else
      {
        outlined consume of Data?(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));

        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v88, v89);
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
      }
      goto LABEL_21;
    }
    v95 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 584) = v95;
    *v95 = v0;
    v95[1] = CanvasGenerationTool.sendFeedback(action:);
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;
  UIImage *v6;
  NSData *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  unint64_t v57;
  unsigned int *v58;
  uint64_t *v59;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t v81[5];

  v1 = *(void **)(v0 + 592);
  if (!v1)
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v15 = *(void **)(v0 + 368);
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)generativeLogger);
    v17 = v15;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 528);
    v22 = *(_QWORD *)(v0 + 520);
    v23 = *(_QWORD *)(v0 + 512);
    v24 = *(_QWORD *)(v0 + 488);
    v76 = *(void **)(v0 + 560);
    v79 = *(_QWORD *)(v0 + 480);
    v25 = *(_QWORD *)(v0 + 472);
    v26 = *(void **)(v0 + 368);
    if (v20)
    {
      v70 = *(_QWORD *)(v0 + 568);
      v71 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 520);
      v27 = (uint8_t *)swift_slowAlloc();
      v72 = v23;
      v28 = swift_slowAlloc();
      v81[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v18, v19, "%s: returning (image is nil)", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v28, -1, -1);
      MEMORY[0x1DF0E6558](v27, -1, -1);
      outlined consume of Data?(v70, v71);

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v24, v25);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v21, v72);
    }
    else
    {
      outlined consume of Data?(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v24, v25);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    }
    goto LABEL_45;
  }
  v2 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, sel_decodeRecipeData_, isa);

  v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = (UIImage *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v1);
  v7 = UIImagePNGRepresentation(v6);

  if (!v7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)generativeLogger);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1DDB0F000, v32, v33, "Output image data is nil", v34, 2u);
      MEMORY[0x1DF0E6558](v34, -1, -1);
    }
    v35 = *(void **)(v0 + 560);
    v36 = *(_QWORD *)(v0 + 528);
    v37 = *(_QWORD *)(v0 + 520);
    v38 = *(_QWORD *)(v0 + 512);
    v40 = *(_QWORD *)(v0 + 480);
    v39 = *(_QWORD *)(v0 + 488);
    v41 = *(_QWORD *)(v0 + 472);
    outlined consume of Data?(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
LABEL_45:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = (_OWORD *)(v0 + 200);
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  *(_QWORD *)(v0 + 600) = v9;
  *(_QWORD *)(v0 + 608) = v11;
  *(_QWORD *)(v0 + 248) = 0x6369447475706E69;
  *(_QWORD *)(v0 + 256) = 0xE900000000000074;
  v78 = v11;
  outlined copy of Data._Representation(v9, v11);
  AnyHashable.init<A>(_:)();
  v75 = v9;
  if (*(_QWORD *)(v5 + 16))
  {
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v0 + 96);
    v14 = v0 + 200;
    if ((v13 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v12, v0 + 200);
    }
    else
    {
      *v8 = 0u;
      *(_OWORD *)(v0 + 216) = 0u;
    }
  }
  else
  {
    *v8 = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
    v14 = v0 + 200;
  }
  outlined destroy of AnyHashable(v0 + 96);
  *(_QWORD *)(v0 + 296) = 0x6D49656372756F73;
  *(_QWORD *)(v0 + 304) = 0xEB00000000656761;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v5 + 16) && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(v0 + 56), (v43 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v42, v0 + 136);
  }
  else
  {
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
  }
  outlined destroy of AnyHashable(v0 + 56);
  if (*(_QWORD *)(v0 + 160))
  {
    v44 = swift_dynamicCast();
    if (v44)
      v45 = *(_QWORD *)(v0 + 232);
    else
      v45 = 0;
    v46 = 0xF000000000000000;
    if (v44)
      v46 = *(_QWORD *)(v0 + 240);
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 136, &demangling cache variable for type metadata for Any?);
    v45 = 0;
    v46 = 0xF000000000000000;
  }
  v77 = v46;
  *(_QWORD *)(v0 + 624) = v46;
  *(_QWORD *)(v0 + 616) = v45;
  *(_QWORD *)(v0 + 280) = 0x6D49686374656B73;
  *(_QWORD *)(v0 + 288) = 0xEB00000000656761;
  AnyHashable.init<A>(_:)();
  v47 = v11;
  if (*(_QWORD *)(v5 + 16) && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(v0 + 16), (v49 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v48, v0 + 168);
  }
  else
  {
    *(_OWORD *)(v0 + 168) = 0u;
    *(_OWORD *)(v0 + 184) = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable(v0 + 16);
  if (*(_QWORD *)(v0 + 192))
  {
    v50 = swift_dynamicCast();
    if (v50)
      v51 = *(_QWORD *)(v0 + 264);
    else
      v51 = 0;
    if (v50)
      v52 = *(_QWORD *)(v0 + 272);
    else
      v52 = 0xF000000000000000;
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 168, &demangling cache variable for type metadata for Any?);
    v51 = 0;
    v52 = 0xF000000000000000;
  }
  *(_QWORD *)(v0 + 640) = v52;
  *(_QWORD *)(v0 + 632) = v51;
  v81[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v81[0] = swift_allocObject();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v14, v81[0] + 16, &demangling cache variable for type metadata for Any?);
  FBKSInteraction.StructuredValue.init(_:)();
  v54 = *(_QWORD *)(v0 + 424);
  v53 = *(char **)(v0 + 432);
  v55 = *(_QWORD *)(v0 + 416);
  v74 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 400) + 16);
  v74(v53, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 392));
  v56 = *(void (**)(void))(v54 + 104);
  ((void (*)(char *, _QWORD, uint64_t))v56)(v53, *MEMORY[0x1E0D21110], v55);
  v57 = v77;
  if (v77 >> 60 != 15)
  {
    outlined copy of Data._Representation(v45, v77);
    v58 = (unsigned int *)MEMORY[0x1E0D21118];
    v59 = (uint64_t *)&demangling cache variable for type metadata for (image: Data, structured: FBKSInteraction.StructuredValue);
    goto LABEL_47;
  }
  if (v52 >> 60 != 15)
  {
    v57 = v52;
    outlined copy of Data._Representation(v51, v52);
    v58 = (unsigned int *)MEMORY[0x1E0D21120];
    v45 = v51;
    v59 = (uint64_t *)&demangling cache variable for type metadata for (sketch: Data, structured: FBKSInteraction.StructuredValue);
LABEL_47:
    v61 = *(uint64_t **)(v0 + 432);
    v63 = *(_QWORD *)(v0 + 408);
    v62 = *(_QWORD *)(v0 + 416);
    v64 = *(_QWORD *)(v0 + 392);
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v0 + 424) + 8))(v61, v62);
    v65 = (char *)v61 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v59) + 48);
    *v61 = v45;
    v61[1] = v57;
    v74(v65, v63, v64);
    ((void (*)(uint64_t *, _QWORD, uint64_t))v56)(v61, *v58, v62);
    v47 = v78;
  }
  v67 = *(_QWORD *)(v0 + 376);
  v66 = *(_QWORD *)(v0 + 384);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 16))(v66, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416));
  v68 = (uint64_t *)(v66 + *(int *)(v67 + 20));
  *v68 = v75;
  v68[1] = v47;
  v56();
  outlined copy of Data._Representation(v75, v47);
  if (one-time initialization token for shared != -1)
    swift_once();
  v80 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized FeedbackManager.sendFeedback(action:feedbackInput:)
                                                 + async function pointer to specialized FeedbackManager.sendFeedback(action:feedbackInput:));
  v69 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 648) = v69;
  *v69 = v0;
  v69[1] = CanvasGenerationTool.sendFeedback(action:);
  return v80(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 384));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 632);
  v12 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 600);
  v15 = *(void **)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(void **)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 472);
  v21 = *(_QWORD *)(v0 + 488);
  v18 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 424);
  v17 = *(_QWORD *)(v0 + 416);
  v11 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 408);
  swift_release();
  outlined consume of Data?(v7, v6);

  outlined consume of Data._Representation(v5, v4);
  outlined consume of Data?(v2, v1);
  outlined consume of Data?(v3, v12);
  outlined consume of Data._Representation(v5, v4);

  outlined destroy of PKStrokeProperties(v9, (uint64_t (*)(_QWORD))type metadata accessor for FeedbackInput);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 200, &demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 33) = a4;
  *(_QWORD *)(v5 + 136) = a3;
  *(_QWORD *)(v5 + 144) = v4;
  *(_QWORD *)(v5 + 120) = a1;
  *(_QWORD *)(v5 + 128) = a2;
  *(_QWORD *)(v5 + 152) = type metadata accessor for Image();
  *(_QWORD *)(v5 + 160) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  *(_QWORD *)(v5 + 168) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  *(_QWORD *)(v5 + 176) = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  *(_QWORD *)(v5 + 184) = v6;
  *(_QWORD *)(v5 + 192) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  *(_QWORD *)(v5 + 208) = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  *(_QWORD *)(v5 + 216) = v7;
  *(_QWORD *)(v5 + 224) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 232) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 240) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 248) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 256) = v8;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(for:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  void *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  void *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  double (*v48)(uint64_t, uint64_t, unint64_t);
  uint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  _QWORD *v58;
  void *v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  void *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  void *v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  void *v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  NSObject *log;
  os_log_t loga;
  uint64_t v103;
  os_log_type_t type;
  uint64_t v105;
  uint64_t v106;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 144);
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  if (v6)
  {
    type = v5;
    v10 = swift_slowAlloc();
    v103 = swift_slowAlloc();
    v106 = v103;
    *(_DWORD *)v10 = 136315906;
    v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
    log = v4;
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x80000001DDF5A240, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2048;
    v13 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 104) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 32) = 2048;
    v14 = *(_QWORD *)(v9 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 112) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, log, type, "%s - %s: (elementMembers = %ld, strokeMembers = %ld)", (uint8_t *)v10, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v103, -1, -1);
    MEMORY[0x1DF0E6558](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v15 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(_QWORD *)(v0 + 272) = v15;
  if (!v15)
  {
    v22 = *(void **)(v0 + 144);
    swift_release();
    v23 = v22;
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(void **)(v0 + 144);
    if (v26)
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v106 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v24, v25, "%s: returning (canvas is nil)", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v29, -1, -1);
      MEMORY[0x1DF0E6558](v28, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v16 = (_QWORD *)v15;
  v18 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 208);
  CanvasMembers.singleImageSelected()(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), v19);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v18);
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v20 != 1)
  {
    v32 = *(_QWORD *)(v0 + 232);
    v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v35 = *(_QWORD *)(v0 + 184);
    v34 = *(_QWORD *)(v0 + 192);
    v36 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 32))(v32, *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
    (*(void (**)(uint64_t))((*v33 & *v16) + 0x790))(v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) == 1)
    {
      v37 = *(_QWORD *)(v0 + 176);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
      outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Capsule<Image>?);
      v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      goto LABEL_13;
    }
    v60 = *(void **)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 32))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
    v61 = v60;
    v62 = Logger.logObject.getter();
    v63 = static os_log_type_t.default.getter();
    v64 = os_log_type_enabled(v62, v63);
    v65 = *(void **)(v0 + 144);
    if (v64)
    {
      v66 = (uint8_t *)swift_slowAlloc();
      v67 = swift_slowAlloc();
      v106 = v67;
      *(_DWORD *)v66 = 136315138;
      v68 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v62, v63, "%s: Initiating magic generative playground from single image.", v66, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v67, -1, -1);
      MEMORY[0x1DF0E6558](v66, -1, -1);

    }
    else
    {

    }
    v71 = *(_QWORD *)(v0 + 160);
    v70 = *(_QWORD *)(v0 + 168);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.root.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v71, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    v72 = type metadata accessor for CRAssetOrData();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48))(v70, 1, v72) != 1)
    {
      v89 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 280) = v89;
      *v89 = v0;
      v89[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(for:);
      return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
    }
    v73 = *(_QWORD *)(v0 + 168);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for CRAssetOrData?);
    v74 = *(id *)(v0 + 144);
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.error.getter();
    v77 = os_log_type_enabled(v75, v76);
    v78 = *(void **)(v0 + 272);
    v80 = *(_QWORD *)(v0 + 224);
    v79 = *(_QWORD *)(v0 + 232);
    v81 = *(_QWORD *)(v0 + 216);
    v83 = *(_QWORD *)(v0 + 192);
    v82 = *(_QWORD *)(v0 + 200);
    v105 = *(_QWORD *)(v0 + 184);
    v84 = *(void **)(v0 + 144);
    if (v77)
    {
      loga = *(os_log_t *)(v0 + 224);
      v85 = (uint8_t *)swift_slowAlloc();
      v100 = v78;
      v86 = swift_slowAlloc();
      v106 = v86;
      *(_DWORD *)v85 = 136315138;
      v87 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v75, v76, "%s: returning (image is nil)", v85, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v86, -1, -1);
      MEMORY[0x1DF0E6558](v85, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v105);
      ((void (*)(uint64_t, uint64_t))loga[1].isa)(v79, v81);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v105);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
    }
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 208), &demangling cache variable for type metadata for WeakRef<Image>?);
LABEL_13:
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 128) + 16) && !*(_QWORD *)(*(_QWORD *)(v0 + 120) + 16))
  {
    v90 = *(void **)(v0 + 144);
    swift_release();
    v91 = v90;
    v92 = Logger.logObject.getter();
    v93 = static os_log_type_t.error.getter();
    v94 = os_log_type_enabled(v92, v93);
    v95 = *(void **)(v0 + 144);
    if (v94)
    {
      v96 = (uint8_t *)swift_slowAlloc();
      v97 = swift_slowAlloc();
      v106 = v97;
      *(_DWORD *)v96 = 136315138;
      v98 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v92, v93, "%s : returning (method called with incorrect parameters)", v96, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v97, -1, -1);
      MEMORY[0x1DF0E6558](v96, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v38 = *(id *)(v0 + 144);
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.default.getter();
  v41 = os_log_type_enabled(v39, v40);
  v42 = *(void **)(v0 + 144);
  if (v41)
  {
    v43 = (uint8_t *)swift_slowAlloc();
    v44 = swift_slowAlloc();
    v106 = v44;
    *(_DWORD *)v43 = 136315138;
    v45 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v39, v40, "%s: Initiating magic generative playground from selection.", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v44, -1, -1);
    v47 = v43;
    v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    MEMORY[0x1DF0E6558](v47, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 128);
  v48 = *(double (**)(uint64_t, uint64_t, unint64_t))((*v21 & *v16) + 0x3D0);
  swift_bridgeObjectRetain();
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v50 = lazy protocol witness table accessor for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>();
  v51 = v48(v0 + 48, v49, v50);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  swift_bridgeObjectRelease();
  v58 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v58;
  *v58 = v0;
  v58[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(for:);
  return CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), v51, v53, v55, v57);
}

{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  double (*v4)(uint64_t);
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _QWORD *v13;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 288);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 16) = v1;
    *(_QWORD *)(v0 + 24) = 0;
    *(_BYTE *)(v0 + 32) = 1;
    v4 = *(double (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x658);
    v5 = v1;
    v6 = v4(v3);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v13;
    *v13 = v0;
    v13[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(for:);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:)(v0 + 16, v6, v8, v10, v12);
  }
  else
  {
    swift_release();
    v15 = *(id *)(v0 + 144);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void **)(v0 + 272);
    v21 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 232);
    v22 = *(_QWORD *)(v0 + 216);
    v23 = *(_QWORD *)(v0 + 200);
    v32 = *(_QWORD *)(v0 + 192);
    v24 = *(_QWORD *)(v0 + 184);
    v25 = *(void **)(v0 + 144);
    if (v18)
    {
      v31 = *(_QWORD *)(v0 + 216);
      v26 = (uint8_t *)swift_slowAlloc();
      v30 = v24;
      v27 = swift_slowAlloc();
      v33 = v27;
      *(_DWORD *)v26 = 136315138;
      v28 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v16, v17, "%s: returning (image is nil)", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v27, -1, -1);
      MEMORY[0x1DF0E6558](v26, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v23, v30);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v31);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v23, v24);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 288);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 184);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  return swift_task_switch();
}

__C::CGRect __swiftcall CanvasGenerationTool.allocateGenerationFrame(for:with:)(CGSize a1, CGPoint with)
{
  void *v2;
  double y;
  double x;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  char *v24;
  void *v25;
  void *v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  double v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  id v43;
  double v44;
  double v45;
  double v46;
  double v47;
  id v48;
  double v49;
  UIView_optional *v50;
  CGSize v51;
  BOOL v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat width;
  CGFloat height;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  CGFloat rect2;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  __n128 v74;
  CGFloat v75;
  __n128 v76;
  float64x2_t v77;
  double v78;
  uint64_t v79[2];
  CGRect v80;
  CGRect v81;
  __C::CGRect v82;
  CGRect v83;
  CGRect v84;
  UIEdgeInsets v85;
  __C::CGRect v86;
  __C::CGRect result;
  CGRect v88;
  __C::CGRect v89;

  y = with.y;
  x = with.x;
  v74 = (__n128)__PAIR128__(v5, *(unint64_t *)&a1.width);
  v76 = (__n128)__PAIR128__(v6, *(unint64_t *)&a1.height);
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)generativeLogger);
  v8 = v2;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v79[0] = v12;
    *(_DWORD *)v11 = 136315906;
    v13 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x80000001DDF5A210, v79);
    v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2080;
    v16 = MEMORY[0x1DF0E49D4](v15, v74, v76);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v18 = swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 32) = 2080;
    v19 = MEMORY[0x1DF0E4A10](v18, x, y);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v9, v10, "%s - %s: (imageSize = %s, preferredCenter = %s", (uint8_t *)v11, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v12, -1, -1);
    MEMORY[0x1DF0E6558](v11, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)&v21.f64[0] = v74.n128_u64[0];
  if ((v74.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) != 0 || (v76.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (one-time initialization token for maxGeneratedImageSize != -1)
    {
      swift_once();
      *(_QWORD *)&v21.f64[0] = v74.n128_u64[0];
    }
    *(_QWORD *)&v21.f64[1] = v76.n128_u64[0];
    v22 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v21, static UIConstants.maxGeneratedImageSize), static UIConstants.maxGeneratedImageSize, (int8x16_t)v21);
    if (one-time initialization token for minGeneratedImageSize != -1)
    {
      v77 = v22;
      swift_once();
      v22 = v77;
    }
    v23 = vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)static UIConstants.minGeneratedImageSize, v22), (int8x16_t)static UIConstants.minGeneratedImageSize, (int8x16_t)v22);
  }
  else
  {
    if (one-time initialization token for defaultGeneratedImageSize != -1)
      swift_once();
    v23.i64[1] = *((_QWORD *)&static UIConstants.defaultGeneratedImageSize + 1);
  }
  v78 = *(double *)&v23.i64[1];
  v24 = &v8[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas];
  v25 = (void *)MEMORY[0x1DF0E666C](&v8[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (v25)
  {
    v26 = v25;
    objc_msgSend(v25, sel_bounds);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;

  }
  else
  {
    v34 = 0.0;
    v32 = 0.0;
    v28 = 0.0;
    v30 = 0.0;
  }
  v35 = MEMORY[0x1DF0E666C](v24);
  if (v35)
  {
    v36 = (void *)v35;
    type metadata accessor for PaperTextAttachmentView();
    v37 = swift_dynamicCastClass();
    if (v37)
    {
      v38 = (void *)v37;
      v39 = v36;
      objc_msgSend(v38, sel_frame);
      if (CGRectGetHeight(v80) < v78 + 80.0 + 80.0)
      {
        v40 = swift_dynamicCastClass();
        if (v40)
        {
          v41 = (_QWORD *)v40;
          v42 = *(unsigned __int8 *)(v40
                                   + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode);
          *(_BYTE *)(v40 + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode) = 1;
          if (v42 != 1)
          {
            v43 = v39;
            objc_msgSend(v41, sel_frame);
            v72 = v45;
            v73 = v44;
            rect2 = v47;
            v71 = v46;
            v48 = objc_msgSend(v41, sel_frame);
            v75 = v49;
            v50 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v41) + 0x1150))(v48);
            if (!v50)
              v50 = (UIView_optional *)objc_msgSend(v41, sel_superview);
            v51 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v50);

            v81.origin.x = 0.0;
            v88.origin.x = v73;
            v81.origin.y = v75;
            v81.size.width = v51.width;
            v81.size.height = v51.height;
            v88.size.width = v71;
            v88.origin.y = v72;
            v88.size.height = rect2;
            v52 = CGRectEqualToRect(v81, v88);
            v82.origin.x = 0.0;
            v82.origin.y = v75;
            v82.size.width = v51.width;
            v82.size.height = v51.height;
            PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v82, 0, !v52, 0);

          }
        }
        v34 = v78 + 80.0 + 80.0;
      }

    }
  }
  if (x == 0.0 && y == 0.0)
  {
    v83.origin.x = v28;
    v83.origin.y = v30;
    v83.size.width = v32;
    v83.size.height = v34;
    CGRectGetMidX(v83);
    v84.origin.x = v28;
    v84.origin.y = v30;
    v84.size.width = v32;
    v84.size.height = v34;
    CGRectGetMidY(v84);
  }
  v85.top = 80.0;
  v85.left = 80.0;
  v85.bottom = 80.0;
  v85.right = 80.0;
  v89.origin.x = v28;
  v89.origin.y = v30;
  v89.size.width = v32;
  v89.size.height = v34;
  v86 = CGRect.withSafeArea(insets:in:)(v85, v89);
  v53 = v86.origin.x;
  v54 = v86.origin.y;
  width = v86.size.width;
  height = v86.size.height;
  *(__C::CGRect *)&v8[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance] = v86;
  v57 = v8;
  v58 = Logger.logObject.getter();
  v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = swift_slowAlloc();
    v61 = swift_slowAlloc();
    v79[0] = v61;
    *(_DWORD *)v60 = 136315394;
    v62 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 12) = 2080;
    v64 = CGRect.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v58, v59, "%s Calculated generationFrame = %s", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v61, -1, -1);
    MEMORY[0x1DF0E6558](v60, -1, -1);

  }
  else
  {

  }
  v66 = v53;
  v67 = v54;
  v68 = width;
  v69 = height;
  result.size.height = v69;
  result.size.width = v68;
  result.origin.y = v67;
  result.origin.x = v66;
  return result;
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v7 + 256) = v6;
  *(double *)(v7 + 240) = a5;
  *(double *)(v7 + 248) = a6;
  *(double *)(v7 + 224) = a3;
  *(double *)(v7 + 232) = a4;
  *(_QWORD *)(v7 + 208) = a1;
  *(_QWORD *)(v7 + 216) = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(_QWORD *)(v7 + 264) = v8;
  *(_QWORD *)(v7 + 272) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 280) = swift_task_alloc();
  *(_QWORD *)(v7 + 288) = type metadata accessor for PKDrawing();
  *(_QWORD *)(v7 + 296) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v7 + 304) = static MainActor.shared.getter();
  *(_QWORD *)(v7 + 312) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v7 + 320) = v9;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  void *v23;
  id v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  void *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type;
  uint64_t typea;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __C::CGRect v69;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 256);
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 328) = __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 256);
  if (v6)
  {
    type = v5;
    v8 = *(_QWORD *)(v0 + 208);
    v9 = *(_QWORD *)(v0 + 216);
    v10 = swift_slowAlloc();
    log = (os_log_t)swift_slowAlloc();
    *(_QWORD *)&v65 = log;
    *(_DWORD *)v10 = 136316162;
    v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001DDF5A1D0, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2048;
    v13 = *(_QWORD *)(v9 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 184) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 32) = 2048;
    v14 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 192) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 42) = 2080;
    v15 = CGRect.debugDescription.getter();
    *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v4, type, "%s - %s: (selectedStrokes.count = %ld, selectedElements.count = %ld, bounds = %s", (uint8_t *)v10, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](log, -1, -1);
    MEMORY[0x1DF0E6558](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v17 = (_QWORD *)MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 256) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(_QWORD *)(v0 + 336) = v17;
  if (!v17)
    goto LABEL_15;
  v18 = v17;
  v19 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x2F8))();
  v21 = v20;
  ObjectType = swift_getObjectType();
  v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(ObjectType, v21);
  *(_QWORD *)(v0 + 344) = v23;

  if (!v23)
  {

LABEL_15:
    swift_release();
    goto LABEL_17;
  }
  v24 = objc_msgSend(v23, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();

LABEL_17:
    v41 = *(id *)(v0 + 256);
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    v44 = os_log_type_enabled(v42, v43);
    v45 = *(void **)(v0 + 256);
    if (v44)
    {
      v46 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      *(_QWORD *)&v65 = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v42, v43, "%s: returning (canvas/modelSpacePath is nil)", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v47, -1, -1);
      MEMORY[0x1DF0E6558](v46, -1, -1);

    }
    else
    {

    }
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v25 = *(_QWORD *)(v0 + 256);
  v26 = *(char **)(v0 + 136);
  *(_QWORD *)(v0 + 352) = v26;
  AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
  v27 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(*(_BYTE *)(v25 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState), 1u) & 1) == 0)
  {
    v50 = *(void **)(v0 + 256);
    swift_release();
    v51 = v50;
    v52 = Logger.logObject.getter();
    v53 = static os_log_type_t.error.getter();
    v54 = os_log_type_enabled(v52, v53);
    v55 = *(void **)(v0 + 256);
    if (v54)
    {
      loga = v52;
      v56 = swift_slowAlloc();
      typea = swift_slowAlloc();
      *(_DWORD *)v56 = 136315394;
      *(_QWORD *)&v65 = typea;
      v57 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 12) = 2080;
      v59 = MagicGenerativePlaygroundState.rawValue.getter(*(_BYTE *)(v25 + v27));
      *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, loga, v53, "%s Unsupported state transition from %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](typea, -1, -1);
      MEMORY[0x1DF0E6558](v56, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v28 = v26;
  if (one-time initialization token for defaultGeneratedImageSize != -1)
    swift_once();
  v30 = *(_QWORD *)(v0 + 272);
  v29 = *(_QWORD *)(v0 + 280);
  v31 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 264);
  v33 = *(_QWORD *)(v0 + 216);
  v69 = CanvasGenerationTool.allocateGenerationFrame(for:with:)((CGSize)static UIConstants.defaultGeneratedImageSize, (CGPoint)0);
  *(__C::CGRect *)(v0 + 360) = v69;
  *(__C::CGRect *)(v31 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance) = v69;
  CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(PaperKit_MagicGenerativePlaygroundState_composingProvidedContext, v69);
  v34 = swift_bridgeObjectRetain();
  AnyCanvas.textPromptsFromElementCanvasMembers(_:)(v34, MEMORY[0x1E0DEE9E8], 6, 0, (unint64_t *)&v65);
  *(_OWORD *)(v0 + 392) = v65;
  v35 = v67;
  *(_QWORD *)(v0 + 408) = v66;
  *(_QWORD *)(v0 + 416) = v35;
  *(_BYTE *)(v0 + 89) = v68;
  swift_bridgeObjectRelease();
  v36 = &v28[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v29, v36, v32);
  v37 = swift_task_alloc();
  *(_QWORD *)(v37 + 16) = v29;
  swift_bridgeObjectRetain();
  v38 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in CanvasMembers.strokeArray(in:), v37, v33);
  *(_QWORD *)(v0 + 424) = v38;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v32);
  v39 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 432) = v39;
  *v39 = v0;
  v39[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:);
  return AnyCanvas.textPromptLookupFor(_:)(v0 + 16, v38);
}

{
  uint64_t *v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;

  v1 = *v0;
  v2 = (_OWORD *)(*v0 + 440);
  v3 = *(_QWORD *)(*v0 + 32);
  v4 = *(_OWORD *)(*v0 + 64);
  *v2 = *(_OWORD *)(*v0 + 16);
  v2[1] = v4;
  *(_QWORD *)(v1 + 472) = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(v1 + 90) = *(_BYTE *)(v1 + 88);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined consume of CanvasMembers?(v3);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  int *v16;

  v1 = *(_QWORD *)(v0 + 448);
  if (v1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3 = *(_QWORD **)(v0 + 392);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v5 = v3[2];
    v4 = v3[3];
    if (v5 >= v4 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
    v6 = *(_QWORD *)(v0 + 440);
    v3[2] = v5 + 1;
    v7 = &v3[2 * v5];
    v7[4] = v6;
    v7[5] = v1;
  }
  else
  {
    v3 = *(_QWORD **)(v0 + 392);
  }
  *(_QWORD *)(v0 + 480) = v3;
  v8 = *(_QWORD *)(v0 + 456);
  if (v8)
  {
    v9 = *(_BYTE *)(v0 + 90) & 1;
    v10 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 472);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 216);
    swift_bridgeObjectRetain();
    v9 = 0;
    v8 = MEMORY[0x1E0DEE9E8];
    v11 = 6;
  }
  *(_QWORD *)(v0 + 488) = v8;
  *(_QWORD *)(v0 + 496) = v10;
  v12 = *(unsigned __int8 *)(v0 + 89);
  v13 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 336)) + 0x648);
  v16 = (int *)((char *)v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 504) = v14;
  *v14 = v0;
  v14[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16)(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), v12, v8, v10, v11, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  NSData *v2;
  NSData *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  void *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 536);
  if (v1)
  {
    v2 = UIImagePNGRepresentation(*(UIImage **)(v0 + 536));
    if (v2)
    {
      v3 = v2;
      v4 = *(void **)(v0 + 256);
      v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      *(_QWORD *)(v0 + 560) = v5;
      *(_QWORD *)(v0 + 568) = v7;
      v8 = v4;
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.default.getter();
      v11 = os_log_type_enabled(v9, v10);
      v12 = *(void **)(v0 + 256);
      if (v11)
      {
        v39 = v5;
        v13 = (uint8_t *)swift_slowAlloc();
        v14 = swift_slowAlloc();
        v40 = v14;
        *(_DWORD *)v13 = 136315138;
        v15 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v9, v10, "%s: Image generation completed", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v14, -1, -1);
        v17 = v13;
        v5 = v39;
        MEMORY[0x1DF0E6558](v17, -1, -1);
      }
      else
      {

      }
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 576) = v35;
      *v35 = v0;
      v35[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:);
      return CanvasGenerationTool.addCanvasElement(for:with:in:)(v1, *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 552), v5, v7, *(double *)(v0 + 360), *(double *)(v0 + 368), *(double *)(v0 + 376), *(double *)(v0 + 384));
    }
    v18 = *(_QWORD *)(v0 + 552);
    v19 = *(_QWORD *)(v0 + 544);
    v20 = *(void **)(v0 + 536);
    swift_release();
    outlined consume of ImageWithEncodedRecipe?(v20, v19, v18);
  }
  else
  {
    swift_release();
  }
  v21 = *(id *)(v0 + 256);
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.error.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(void **)(v0 + 520);
  v26 = *(void **)(v0 + 512);
  v27 = *(void **)(v0 + 344);
  v28 = *(void **)(v0 + 352);
  v29 = *(void **)(v0 + 256);
  if (v24)
  {
    v38 = *(void **)(v0 + 352);
    v36 = *(void **)(v0 + 336);
    v30 = (uint8_t *)swift_slowAlloc();
    v37 = v25;
    v31 = swift_slowAlloc();
    v40 = v31;
    *(_DWORD *)v30 = 136315138;
    v32 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v22, v23, "%s returning (generated image/data is nil)", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v31, -1, -1);
    MEMORY[0x1DF0E6558](v30, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 544);
  v5 = *(void **)(v0 + 536);
  v6 = *(void **)(v0 + 520);
  v10 = *(void **)(v0 + 512);
  v7 = *(void **)(v0 + 344);
  v8 = *(void **)(v0 + 336);

  swift_release();
  outlined consume of Data._Representation(v2, v1);
  outlined consume of ImageWithEncodedRecipe?(v5, v4, v3);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v7;

  v7 = *v2;
  *(_QWORD *)(v7 + 512) = a1;
  *(_QWORD *)(v7 + 520) = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 528) = v5;
  *v5 = v7;
  v5[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:);
  return CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)(a1, a2, *(_QWORD *)(v7 + 480), 1.0, *(double *)(v7 + 360), *(double *)(v7 + 368), *(double *)(v7 + 376), *(double *)(v7 + 384));
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[67] = a1;
  v4[68] = a2;
  v4[69] = a3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 144) = v5;
  *(double *)(v6 + 128) = a4;
  *(double *)(v6 + 136) = a5;
  *(double *)(v6 + 112) = a2;
  *(double *)(v6 + 120) = a3;
  *(_OWORD *)(v6 + 152) = *(_OWORD *)a1;
  *(_BYTE *)(v6 + 33) = *(_BYTE *)(a1 + 16);
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 168) = static MainActor.shared.getter();
  *(_QWORD *)(v6 + 176) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v6 + 184) = v7;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double x;
  double y;
  double width;
  double height;
  _QWORD *v40;
  void *v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  void *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  os_log_type_t v63;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v66;
  uint64_t v67;
  __C::CGRect v68;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 152);
  v2 = *(void **)(v0 + 160);
  v3 = *(void **)(v0 + 144);
  v4 = *(_BYTE *)(v0 + 33);
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 192) = __swift_project_value_buffer(v5, (uint64_t)generativeLogger);
  v6 = v3;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  v7 = v6;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(unsigned __int8 *)(v0 + 33);
  if (v10)
  {
    v63 = v9;
    v12 = *(void **)(v0 + 144);
    v13 = swift_slowAlloc();
    type = swift_slowAlloc();
    v67 = type;
    *(_DWORD *)v13 = 136315906;
    v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x80000001DDF5A290, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    v16 = 0xE500000000000000;
    v17 = 0x6567616D69;
    if (v11 != 1)
    {
      v17 = 0x6974616D6F747561;
      v16 = 0xE900000000000063;
    }
    if (v11)
      v18 = v17;
    else
      v18 = 1954047348;
    if (v11)
      v19 = v16;
    else
      v19 = 0xE400000000000000;
    v21 = *(void **)(v0 + 152);
    v20 = *(void **)(v0 + 160);
    v22 = *(_BYTE *)(v0 + 33);
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    *(_WORD *)(v13 + 32) = 2080;
    v23 = CGRect.debugDescription.getter();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v8, v63, "%s - %s: (context = %s, bounds = %s)", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](type, -1, -1);
    MEMORY[0x1DF0E6558](v13, -1, -1);

  }
  else
  {
    v25 = *(void **)(v0 + 152);
    v26 = *(void **)(v0 + 160);
    v27 = *(void **)(v0 + 144);

    outlined consume of MagicGenerativePlaygroundContext(v25, v26, v11);
    outlined consume of MagicGenerativePlaygroundContext(v25, v26, v11);

  }
  v28 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(_QWORD *)(v0 + 200) = v28;
  if (!v28)
  {
    v42 = *(void **)(v0 + 144);
    swift_release();
    v43 = v42;
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    v46 = os_log_type_enabled(v44, v45);
    v47 = *(void **)(v0 + 144);
    if (v46)
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v67 = v49;
      *(_DWORD *)v48 = 136315138;
      v50 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v44, v45, "%s: returning (canvas is nil)", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v49, -1, -1);
      MEMORY[0x1DF0E6558](v48, -1, -1);

    }
    else
    {

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v29 = (void *)v28;
  v30 = *(_QWORD *)(v0 + 144);
  AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
  v31 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(*(_BYTE *)(v30 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState), 1u) & 1) == 0)
  {
    v52 = *(void **)(v0 + 144);
    swift_release();
    v53 = v52;
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    v56 = os_log_type_enabled(v54, v55);
    v57 = *(void **)(v0 + 144);
    if (v56)
    {
      typea = v55;
      v58 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v67 = v66;
      *(_DWORD *)v58 = 136315394;
      v59 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      v61 = MagicGenerativePlaygroundState.rawValue.getter(*(_BYTE *)(v30 + v31));
      *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v54, typea, "%s Unsupported state transition from %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v66, -1, -1);
      MEMORY[0x1DF0E6558](v58, -1, -1);

    }
    else
    {

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (one-time initialization token for defaultGeneratedImageSize != -1)
    swift_once();
  v32 = *(_BYTE *)(v0 + 33);
  v34 = *(_QWORD *)(v0 + 152);
  v33 = *(_QWORD *)(v0 + 160);
  v35 = *(_QWORD *)(v0 + 144);
  v68 = CanvasGenerationTool.allocateGenerationFrame(for:with:)((CGSize)static UIConstants.defaultGeneratedImageSize, (CGPoint)0);
  x = v68.origin.x;
  y = v68.origin.y;
  width = v68.size.width;
  height = v68.size.height;
  *(__C::CGRect *)(v0 + 208) = v68;
  *(__C::CGRect *)(v35 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance) = v68;
  *(_QWORD *)(v0 + 16) = v34;
  *(_QWORD *)(v0 + 24) = v33;
  *(_BYTE *)(v0 + 32) = v32;
  v40 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v40;
  *v40 = v0;
  v40[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:);
  return CanvasGenerationTool.generateImage(context:in:)(v0 + 16, x, y, width, height);
}

{
  uint64_t v0;
  uint64_t v1;
  NSData *v2;
  NSData *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  void *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  void *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 248);
  if (v1)
  {
    v2 = UIImagePNGRepresentation(*(UIImage **)(v0 + 248));
    if (v2)
    {
      v3 = v2;
      v4 = *(void **)(v0 + 144);
      v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      *(_QWORD *)(v0 + 272) = v5;
      *(_QWORD *)(v0 + 280) = v7;
      v8 = v4;
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.default.getter();
      v11 = os_log_type_enabled(v9, v10);
      v12 = *(void **)(v0 + 144);
      if (v11)
      {
        v32 = v5;
        v13 = (uint8_t *)swift_slowAlloc();
        v14 = swift_slowAlloc();
        v34 = v14;
        *(_DWORD *)v13 = 136315138;
        v15 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v9, v10, "%s: Image generation completed", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v14, -1, -1);
        v17 = v13;
        v5 = v32;
        MEMORY[0x1DF0E6558](v17, -1, -1);
      }
      else
      {

      }
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 288) = v31;
      *v31 = v0;
      v31[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:);
      return CanvasGenerationTool.addCanvasElement(for:with:in:)(v1, *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v5, v7, *(double *)(v0 + 208), *(double *)(v0 + 216), *(double *)(v0 + 224), *(double *)(v0 + 232));
    }
    v19 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 264);
    v20 = *(void **)(v0 + 248);
    swift_release();
    outlined consume of ImageWithEncodedRecipe?(v20, v19, v18);
  }
  else
  {
    swift_release();
  }
  v21 = *(id *)(v0 + 144);
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(void **)(v0 + 144);
  if (v24)
  {
    v33 = *(void **)(v0 + 200);
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v34 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v22, v23, "%s: returning (no image returned)", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v27, -1, -1);
    MEMORY[0x1DF0E6558](v26, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v5 = *(void **)(v0 + 248);
  v6 = *(void **)(v0 + 200);
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined consume of ImageWithEncodedRecipe?(v5, v4, v3);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[31] = a1;
  v4[32] = a2;
  v4[33] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.addCanvasElement(for:with:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 472) = v9;
  *(double *)(v10 + 456) = a8;
  *(double *)(v10 + 464) = a9;
  *(double *)(v10 + 440) = a6;
  *(double *)(v10 + 448) = a7;
  *(_QWORD *)(v10 + 424) = a4;
  *(_QWORD *)(v10 + 432) = a5;
  *(_QWORD *)(v10 + 408) = a2;
  *(_QWORD *)(v10 + 416) = a3;
  *(_QWORD *)(v10 + 400) = a1;
  type metadata accessor for CRKeyPath();
  *(_QWORD *)(v10 + 480) = swift_task_alloc();
  *(_QWORD *)(v10 + 488) = type metadata accessor for Image();
  *(_QWORD *)(v10 + 496) = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  *(_QWORD *)(v10 + 504) = v11;
  *(_QWORD *)(v10 + 512) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v10 + 520) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v10 + 528) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.addCanvasElement(for:with:in:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  void *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  CGAffineTransform v67;
  CGRect v68;

  swift_release();
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 472);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 472);
  if (v6)
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_QWORD *)&v67.a = v9;
    *(_DWORD *)v8 = 136315650;
    v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001DDF5A1B0, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2080;
    v12 = CGRect.debugDescription.getter();
    *(_QWORD *)(v0 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v4, v5, "%s - %s: generationFrame = %s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v9, -1, -1);
    MEMORY[0x1DF0E6558](v8, -1, -1);
  }
  else
  {

  }
  v14 = (_QWORD *)MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 472) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  if (v14)
  {
    v15 = v14;
    v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v17 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x2F8))();
    (*(void (**)(void))((*v16 & *v17) + 0x2A0))();
    v18 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 136);
    v61 = *(_QWORD *)(v0 + 152);
    v62 = *(_QWORD *)(v0 + 144);
    v59 = *(_QWORD *)(v0 + 168);
    v60 = *(_QWORD *)(v0 + 160);

    (*(void (**)(void))((*v16 & *v15) + 0x5B8))();
    v21 = *(double *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 80);
    v23 = *(_QWORD *)(v0 + 88);
    v22 = *(double *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 112);
    outlined init with take of CGAffineTransform?(v0 + 72, v0 + 16);
    v26 = v19;
    v27 = v18;
    if ((*(_BYTE *)(v0 + 64) & 1) != 0)
    {
      v22 = 1.0;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      v20 = 0;
      v21 = 1.0;
    }
    v37 = *(_QWORD *)(v0 + 520);
    v38 = *(_QWORD *)(v0 + 504);
    v66 = *(_QWORD *)(v0 + 512);
    v40 = *(_QWORD *)(v0 + 488);
    v39 = *(_QWORD *)(v0 + 496);
    v41 = *(_QWORD *)(v0 + 448);
    v57 = *(_QWORD *)(v0 + 456);
    v58 = *(_QWORD *)(v0 + 464);
    v42 = *(_QWORD *)(v0 + 440);
    v43 = *(_QWORD *)(v0 + 424);
    v64 = *(_QWORD *)(v0 + 432);
    v65 = *(_QWORD *)(v0 + 416);
    v63 = *(_OWORD *)(v0 + 400);
    *(_QWORD *)(v0 + 176) = v27;
    *(_QWORD *)(v0 + 184) = v26;
    *(_QWORD *)(v0 + 192) = v62;
    *(_QWORD *)(v0 + 200) = v61;
    *(_QWORD *)(v0 + 208) = v60;
    *(_QWORD *)(v0 + 216) = v59;
    *(double *)(v0 + 224) = v21;
    *(_QWORD *)(v0 + 232) = v20;
    *(_QWORD *)(v0 + 240) = v23;
    *(double *)(v0 + 248) = v22;
    *(_QWORD *)(v0 + 256) = v25;
    *(_QWORD *)(v0 + 264) = v24;
    CGAffineTransformConcat(&v67, (CGAffineTransform *)(v0 + 176), (CGAffineTransform *)(v0 + 224));
    v44 = *(_OWORD *)&v67.c;
    v45 = *(_OWORD *)&v67.tx;
    *(_OWORD *)(v0 + 272) = *(_OWORD *)&v67.a;
    *(_OWORD *)(v0 + 288) = v44;
    *(_OWORD *)(v0 + 304) = v45;
    CGAffineTransformInvert(&v67, (CGAffineTransform *)(v0 + 272));
    v46 = *(_OWORD *)&v67.c;
    v47 = *(_OWORD *)&v67.tx;
    *(_OWORD *)(v0 + 320) = *(_OWORD *)&v67.a;
    *(_OWORD *)(v0 + 336) = v46;
    *(_OWORD *)(v0 + 352) = v47;
    v48 = v42;
    *(_QWORD *)&v46 = v41;
    *(_QWORD *)&v47 = v57;
    v49 = v58;
    v68 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v46 - 8), (CGAffineTransform *)(v0 + 320));
    x = v68.origin.x;
    y = v68.origin.y;
    width = v68.size.width;
    height = v68.size.height;
    Image.init()(v39);
    static CRKeyPath.unique.getter();
    v54 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.init(_:id:)();
    v55 = swift_task_alloc();
    *(CGFloat *)(v55 + 16) = x;
    *(CGFloat *)(v55 + 24) = y;
    *(CGFloat *)(v55 + 32) = width;
    *(CGFloat *)(v55 + 40) = height;
    *(_QWORD *)(v55 + 48) = v43;
    *(_QWORD *)(v55 + 56) = v64;
    *(_QWORD *)(v55 + 64) = v15;
    *(_OWORD *)(v55 + 72) = v63;
    *(_QWORD *)(v55 + 88) = v65;
    Capsule.callAsFunction<A>(_:)();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *v15)
                                                                                            + 0x480))(v37, 1, 0, 0, v40, v54, &protocol witness table for Image);

    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v37, v38);
  }
  else
  {
    v28 = *(id *)(v0 + 472);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(void **)(v0 + 472);
    if (v31)
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      *(_QWORD *)&v67.a = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v29, v30, "%s: returning (canvas is nil)", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v34, -1, -1);
      MEMORY[0x1DF0E6558](v33, -1, -1);
    }
    else
    {

    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CanvasGenerationTool.addCanvasElement(for:with:in:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v25 = *(double *)&a11;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v26 = a1;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  v26 = 0.0;
  v27 = 0.0;
  v28 = a3;
  v29 = a4;
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  outlined copy of Data._Representation(a6, a7);
  CRContext.assetManager.getter();
  CRAsset.init(data:assetManager:)();
  v22 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 0, 1, v22);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  v26 = *(double *)&a10;
  v27 = v25;
  outlined copy of Data._Representation(a10, *(unint64_t *)&v25);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t CanvasGenerationTool.recreateMagicGenerativePlayground()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[28] = v0;
  v2 = type metadata accessor for CRKeyPath();
  v1[29] = v2;
  v1[30] = *(_QWORD *)(v2 - 8);
  v1[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v1[32] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v1[33] = v3;
  v1[34] = *(_QWORD *)(v3 - 8);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  v1[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  v1[38] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v1[39] = v4;
  v1[40] = *(_QWORD *)(v4 - 8);
  v1[41] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[42] = static MainActor.shared.getter();
  v1[43] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[44] = v5;
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  void *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t (*v93)(void);
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t ObjectType;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  id v109;
  double v110;
  CGFloat v111;
  double v112;
  CGFloat v113;
  double v114;
  CGFloat v115;
  double v116;
  CGFloat v117;
  id v118;
  double v119;
  CGFloat v120;
  UIView_optional *v121;
  CGSize v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  double x;
  double y;
  double width;
  double height;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  id v141;
  NSObject *v142;
  os_log_type_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint8_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  CGRect v173;
  __C::CGRect v174;
  CGRect v175;
  CGRect v176;
  CGRect v177;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v2 = (id *)(v0 + 224);
  v1 = *(void **)(v0 + 224);
  v3 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 360) = __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 224);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v164 = swift_slowAlloc();
    v172 = v164;
    *(_DWORD *)v9 = 136315394;
    v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v172);
    v2 = (id *)(v0 + 224);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x80000001DDF5A180, &v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v5, v6, "%s - %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v164, -1, -1);
    MEMORY[0x1DF0E6558](v9, -1, -1);

  }
  else
  {

  }
  v12 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(_QWORD *)(v0 + 368) = v12;
  if (!v12)
  {
    v27 = *(void **)(v0 + 224);
    swift_release();
    v28 = v27;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(void **)(v0 + 224);
    if (v31)
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v172 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v29, v30, "%s: returning (canvas is nil)", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v34, -1, -1);
      MEMORY[0x1DF0E6558](v33, -1, -1);

    }
    else
    {

    }
    goto LABEL_26;
  }
  v13 = (char *)v12;
  v14 = *v2;
  v15 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  result = specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(*((_BYTE *)*v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState), 1u);
  if ((result & 1) == 0)
  {
    v37 = *(void **)(v0 + 224);
    swift_release();
    v38 = v37;
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    v41 = os_log_type_enabled(v39, v40);
    v42 = *(id *)(v0 + 224);
    if (v41)
    {
      v166 = v13;
      v43 = swift_slowAlloc();
      v161 = swift_slowAlloc();
      v172 = v161;
      *(_DWORD *)v43 = 136315394;
      v44 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      v46 = MagicGenerativePlaygroundState.rawValue.getter(v14[v15]);
      *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v39, v40, "%s Unsupported state transition from %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      v48 = v161;
LABEL_23:
      MEMORY[0x1DF0E6558](v48, -1, -1);
      MEMORY[0x1DF0E6558](v43, -1, -1);

LABEL_26:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

LABEL_25:
    goto LABEL_26;
  }
  v17 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    if (*(_QWORD *)(v18 + 16) != 1)
    {
      swift_release();
LABEL_21:
      v50 = *v2;
      v39 = Logger.logObject.getter();
      v51 = static os_log_type_t.error.getter();
      v52 = os_log_type_enabled(v39, v51);
      v42 = *v2;
      if (v52)
      {
        v166 = v13;
        v43 = swift_slowAlloc();
        v53 = swift_slowAlloc();
        v172 = v53;
        *(_DWORD *)v43 = 136315138;
        v54 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v39, v51, "%s: returning (no selected image)", (uint8_t *)v43, 0xCu);
        swift_arrayDestroy();
        v48 = v53;
        goto LABEL_23;
      }

      goto LABEL_25;
    }
    v19 = *(_QWORD *)(v0 + 296);
    specialized Collection.first.getter(v18, v19);
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
    v24 = *(_QWORD *)(v0 + 312);
    v23 = *(_QWORD *)(v0 + 320);
    v25 = *(_QWORD *)(v0 + 296);
    v26 = *(_QWORD *)(v0 + 304);
    v165 = v0;
    if (v22 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v25, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v26, 1, 1, v24);
LABEL_20:
      v49 = *(_QWORD *)(v0 + 304);
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v49, &demangling cache variable for type metadata for WeakRef<Image>?);
      goto LABEL_21;
    }
    WeakTagged_9.tagged2.getter();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v26, 1, v24) == 1)
      goto LABEL_20;
    v56 = *(_QWORD *)(v0 + 328);
    v58 = *(_QWORD *)(v0 + 264);
    v57 = *(_QWORD *)(v0 + 272);
    v59 = v13;
    v60 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 32))(v56, *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
    AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
    v61 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v59) + 0x790))(v56);
    v167 = v59;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v60, 1, v58) == 1)
    {
      v62 = *(_QWORD *)(v0 + 256);
      v63 = *(void **)(v0 + 224);
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for Capsule<Image>?);
      v64 = v63;
      v65 = Logger.logObject.getter();
      v66 = static os_log_type_t.error.getter();
      v67 = os_log_type_enabled(v65, v66);
      v68 = *(_QWORD *)(v0 + 320);
      v69 = *(_QWORD *)(v0 + 328);
      v70 = *(_QWORD *)(v0 + 312);
      v71 = *(void **)(v0 + 224);
      if (v67)
      {
        v169 = *(_QWORD *)(v0 + 312);
        v72 = (uint8_t *)swift_slowAlloc();
        v73 = swift_slowAlloc();
        v172 = v73;
        *(_DWORD *)v72 = 136315138;
        v74 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v65, v66, "%s: returning (selected image does not have an ImageElement)", v72, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v73, -1, -1);
        MEMORY[0x1DF0E6558](v72, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v169);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
      }
      goto LABEL_26;
    }
    v76 = *(_QWORD *)(v0 + 328);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 32))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
    v77 = (*(uint64_t (**)(uint64_t))((*v61 & *v59) + 0x798))(v76);
    *(_QWORD *)(v0 + 376) = v77;
    *(_QWORD *)(v0 + 384) = v78;
    if (v78 >> 60 == 15)
    {
      v79 = *(void **)(v0 + 224);
      swift_release();
      v80 = v79;
      v81 = Logger.logObject.getter();
      v82 = static os_log_type_t.error.getter();
      v83 = os_log_type_enabled(v81, v82);
      v85 = *(_QWORD *)(v0 + 320);
      v84 = *(_QWORD *)(v0 + 328);
      v86 = *(_QWORD *)(v0 + 312);
      v87 = *(_QWORD *)(v0 + 288);
      v162 = *(_QWORD *)(v0 + 272);
      v170 = *(_QWORD *)(v0 + 264);
      v88 = *(void **)(v0 + 224);
      if (v83)
      {
        v89 = (uint8_t *)swift_slowAlloc();
        v158 = v84;
        v90 = swift_slowAlloc();
        v172 = v90;
        *(_DWORD *)v89 = 136315138;
        v91 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v81, v82, "%s: returning (selected image does not have image generation recipe)", v89, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v90, -1, -1);
        MEMORY[0x1DF0E6558](v89, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v87, v170);
        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v158, v86);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v87, v170);
        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
      }
LABEL_46:
      v0 = v165;
      goto LABEL_26;
    }
    v163 = v77;
    v171 = v78;
    v93 = *(uint64_t (**)(void))((*v61 & *v59) + 0x2F8);
    v94 = (void *)v93();
    v96 = v95;
    ObjectType = swift_getObjectType();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.rootID.getter();
    v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 32))(ObjectType, v96);

    if (!*(_QWORD *)(v98 + 16)
      || (v99 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 248)), (v100 & 1) == 0))
    {
      v137 = *(_QWORD *)(v0 + 240);
      v138 = *(_QWORD *)(v0 + 248);
      v139 = *(void **)(v0 + 224);
      v140 = *(_QWORD *)(v0 + 232);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v140);
      swift_release();
      v141 = v139;
      v142 = Logger.logObject.getter();
      v143 = static os_log_type_t.error.getter();
      v144 = os_log_type_enabled(v142, v143);
      v146 = *(_QWORD *)(v0 + 320);
      v145 = *(_QWORD *)(v0 + 328);
      v147 = *(_QWORD *)(v0 + 312);
      v148 = *(_QWORD *)(v165 + 288);
      v150 = *(_QWORD *)(v165 + 264);
      v149 = *(_QWORD *)(v165 + 272);
      v151 = *(void **)(v165 + 224);
      if (v144)
      {
        v159 = *(_QWORD *)(v165 + 320);
        v157 = *(_QWORD *)(v165 + 288);
        v152 = (uint8_t *)swift_slowAlloc();
        v156 = v150;
        v153 = swift_slowAlloc();
        v172 = v153;
        *(_DWORD *)v152 = 136315138;
        v154 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v165 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v155, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v142, v143, "%s returning (imageView is nil)", v152, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v153, -1, -1);
        MEMORY[0x1DF0E6558](v152, -1, -1);
        outlined consume of Data?(v163, v171);

        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v157, v156);
        (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v145, v147);
      }
      else
      {
        outlined consume of Data?(v163, v171);

        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v148, v150);
        (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v145, v147);
      }
      goto LABEL_46;
    }
    v101 = *(_QWORD *)(v0 + 240);
    v102 = *(_QWORD *)(v0 + 248);
    v103 = *(_QWORD *)(v165 + 232);
    v104 = *(void **)(*(_QWORD *)(v98 + 56) + 8 * v99);
    *(_QWORD *)(v165 + 392) = v104;
    v105 = v104;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v102, v103);
    objc_msgSend(v105, sel_setHidden_, 1);
    type metadata accessor for PaperTextAttachmentView();
    v106 = swift_dynamicCastClass();
    if (v106)
    {
      v107 = (_QWORD *)v106;
      v108 = *(unsigned __int8 *)(v106
                                + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode);
      *(_BYTE *)(v106 + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode) = 1;
      if (v108 != 1)
      {
        v109 = v167;
        objc_msgSend(v107, sel_frame);
        v111 = v110;
        v113 = v112;
        v115 = v114;
        v117 = v116;
        v118 = objc_msgSend(v107, sel_frame);
        v120 = v119;
        v121 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v107) + 0x1150))(v118);
        if (!v121)
          v121 = (UIView_optional *)objc_msgSend(v107, sel_superview);
        v122 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v121);

        v173.origin.x = 0.0;
        v173.origin.y = v120;
        v173.size.width = v122.width;
        v173.size.height = v122.height;
        v177.origin.x = v111;
        v177.origin.y = v113;
        v177.size.width = v115;
        v177.size.height = v117;
        v123 = CGRectEqualToRect(v173, v177);
        v174.origin.x = 0.0;
        v174.origin.y = v120;
        v174.size.width = v122.width;
        v174.size.height = v122.height;
        PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v174, 0, !v123, 0);

      }
    }
    v125 = *(_QWORD *)(v165 + 280);
    v124 = *(_QWORD *)(v165 + 288);
    v126 = *(_QWORD *)(v165 + 264);
    v127 = *(_QWORD *)(v165 + 272);
    v128 = (_QWORD *)v93();
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v128) + 0x2A8))();
    v168 = *(_OWORD *)(v165 + 16);
    v160 = *(_OWORD *)(v165 + 32);
    v129 = *(_QWORD *)(v165 + 48);
    v130 = *(_QWORD *)(v165 + 56);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v125, v124, v126);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v131 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    *(_QWORD *)(v165 + 400) = v131;
    v131(v125, v126);
    v175 = *(CGRect *)(v165 + 112);
    *(_OWORD *)(v165 + 64) = v168;
    *(_OWORD *)(v165 + 80) = v160;
    *(_QWORD *)(v165 + 96) = v129;
    *(_QWORD *)(v165 + 104) = v130;
    v176 = CGRectApplyAffineTransform(v175, (CGAffineTransform *)(v165 + 64));
    x = v176.origin.x;
    y = v176.origin.y;
    width = v176.size.width;
    height = v176.size.height;
    v136 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v165 + 408) = v136;
    *v136 = v165;
    v136[1] = CanvasGenerationTool.recreateMagicGenerativePlayground();
    return CanvasGenerationTool.recreateImage(with:in:)(v163, v171, x, y, width, height);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  UIImage *v2;
  NSData *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 416);
  swift_release();
  if (v1)
  {
    v2 = *(UIImage **)(v0 + 416);
    v3 = UIImagePNGRepresentation(v2);
    v4 = *(_QWORD *)(v0 + 424);
    v5 = *(_QWORD *)(v0 + 432);
    if (v3)
    {
      v6 = *(_QWORD **)(v0 + 368);
      v36 = *(id *)(v0 + 392);
      v37 = *(_QWORD *)(v0 + 376);
      v41 = *(_QWORD *)(v0 + 328);
      v42 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      v38 = *(_QWORD *)(v0 + 384);
      v39 = *(_QWORD *)(v0 + 320);
      v40 = *(_QWORD *)(v0 + 312);
      v33 = *(_QWORD *)(v0 + 288);
      v34 = *(_QWORD *)(v0 + 264);
      v35 = *(void **)(v0 + 416);
      v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;

      v10 = (_QWORD *)swift_task_alloc();
      v10[2] = v7;
      v10[3] = v9;
      v10[4] = v6;
      v10[5] = v2;
      v10[6] = v4;
      v10[7] = v5;
      Capsule.callAsFunction<A>(_:)();
      swift_task_dealloc();
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x558);
      v12 = type metadata accessor for Image();
      v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v11(v33, v12, v13);
      outlined consume of Data._Representation(v7, v9);
      outlined consume of ImageWithEncodedRecipe?(v35, v4, v5);
      objc_msgSend(v36, sel_setHidden_, 0);
      outlined consume of Data?(v37, v38);

      v42(v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
      goto LABEL_9;
    }
    outlined consume of ImageWithEncodedRecipe?(*(void **)(v0 + 416), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432));
  }
  v14 = *(id *)(v0 + 224);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(void **)(v0 + 224);
  if (v17)
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v44 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v15, v16, "%s: returning (Image generation has been cancelled or no recipe provided)", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v20, -1, -1);
    MEMORY[0x1DF0E6558](v19, -1, -1);
  }
  else
  {

  }
  v23 = *(void **)(v0 + 392);
  v43 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v25 = *(_QWORD *)(v0 + 376);
  v24 = *(_QWORD *)(v0 + 384);
  v26 = *(void **)(v0 + 368);
  v28 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 328);
  v29 = *(_QWORD *)(v0 + 312);
  v30 = *(_QWORD *)(v0 + 288);
  v31 = *(_QWORD *)(v0 + 264);
  objc_msgSend(v23, sel_setHidden_, 0);
  outlined consume of Data?(v25, v24);

  v43(v30, v31);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.recreateMagicGenerativePlayground()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[52] = a1;
  v4[53] = a2;
  v4[54] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.recreateMagicGenerativePlayground()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  unint64_t v20;
  uint64_t (*v21)(_BYTE *, _QWORD);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE v27[32];

  v24 = a7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v23 - v16;
  outlined copy of Data._Representation(a2, a3);
  CRContext.assetManager.getter();
  CRAsset.init(data:assetManager:)();
  v18 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1, v18);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v19 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, (uint64_t)v13, &demangling cache variable for type metadata for CRAssetOrData?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for CRAssetOrData?);
  v19(v27, 0);
  v20 = v24;
  outlined copy of Data._Representation(a6, v24);
  v21 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v25 = a6;
  v26 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.setter();
  return v21(v27, 0);
}

uint64_t CanvasGenerationTool.recreateImage(with:in:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 96) = v6;
  *(double *)(v7 + 80) = a5;
  *(double *)(v7 + 88) = a6;
  *(double *)(v7 + 64) = a3;
  *(double *)(v7 + 72) = a4;
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v7 + 104) = swift_task_alloc();
  *(_QWORD *)(v7 + 112) = type metadata accessor for MainActor();
  *(_QWORD *)(v7 + 120) = static MainActor.shared.getter();
  *(_QWORD *)(v7 + 128) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v7 + 136) = v8;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.recreateImage(with:in:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v25;
  uint64_t v26;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(void **)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)generativeLogger);
  v5 = v2;
  outlined copy of Data._Representation(v1, v3);
  v6 = v5;
  outlined copy of Data._Representation(v1, v3);
  v7 = Logger.logObject.getter();
  LOBYTE(v5) = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v7, (os_log_type_t)v5);
  v9 = *(void **)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 56);
  if (v8)
  {
    v25 = v10 >> 62;
    v11 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    *(_DWORD *)v11 = 136315906;
    v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001DDF5A160, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2048;
    __asm { BR              X9 }
  }
  v14 = *(_QWORD *)(v0 + 48);
  outlined consume of Data._Representation(v14, v10);

  outlined consume of Data._Representation(v14, v10);
  v15 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 56);
  CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(PaperKit_MagicGenerativePlaygroundState_composingProvidedRecipe, *(__C::CGRect *)(v0 + 64));
  v18 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
  v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined copy of Data._Representation(v17, v16);
  swift_retain();
  v20 = static MainActor.shared.getter();
  v21 = (_QWORD *)swift_allocObject();
  v22 = MEMORY[0x1E0DF06E8];
  v21[2] = v20;
  v21[3] = v22;
  v21[4] = v19;
  v21[5] = v17;
  v21[6] = v16;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v15, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.recreateImage(with:in:), (uint64_t)v21);
  swift_release();
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v23;
  *v23 = v0;
  v23[1] = CanvasGenerationTool.recreateImage(with:in:);
  return CanvasGenerationTool.generateImageWithCheckedThrowingContinuation()();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t CanvasGenerationTool.recreateImage(with:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[19] = a1;
  v4[20] = a2;
  v4[21] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.recreateImage(with:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  type metadata accessor for MainActor();
  v6[9] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.recreateImage(with:in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  Class isa;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = (uint64_t *)(v0 + 40);
  swift_release();
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
    if (v5)
    {
      v6 = v5;
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v6, sel_setEncodedRecipe_, isa);

    }
    else
    {
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)generativeLogger);
      v14 = v4;
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        *(_DWORD *)v17 = 136315138;
        v22 = v18;
        v19 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *v2 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v15, v16, "%s returning from the task (magicGenerativeVC is nil)", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v18, -1, -1);
        MEMORY[0x1DF0E6558](v17, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v22 = v12;
      *(_DWORD *)v11 = 136315138;
      *v2 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000001DDF45150, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v9, v10, "%s returning from the task (self is nil)", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v12, -1, -1);
      MEMORY[0x1DF0E6558](v11, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 136) = v8;
  *(double *)(v9 + 120) = a7;
  *(double *)(v9 + 128) = a8;
  *(double *)(v9 + 104) = a5;
  *(double *)(v9 + 112) = a6;
  *(_QWORD *)(v9 + 96) = a3;
  *(double *)(v9 + 88) = a4;
  *(_QWORD *)(v9 + 72) = a1;
  *(_QWORD *)(v9 + 80) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v9 + 144) = swift_task_alloc();
  *(_QWORD *)(v9 + 152) = type metadata accessor for MainActor();
  *(_QWORD *)(v9 + 160) = static MainActor.shared.getter();
  *(_QWORD *)(v9 + 168) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v9 + 176) = v10;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  __int128 v51;
  uint64_t v52;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 72);
  v2 = *(void **)(v0 + 136);
  v3 = *(void **)(v0 + 80);
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)generativeLogger);
  v5 = v3;
  swift_bridgeObjectRetain_n();
  v6 = v2;
  v7 = v1;
  v8 = v5;
  v9 = v6;
  v10 = v7;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void **)(v0 + 136);
  if (v13)
  {
    v50 = v12;
    v48 = *(_QWORD *)(v0 + 72);
    v15 = swift_slowAlloc();
    v49 = swift_slowAlloc();
    v52 = v49;
    *(_DWORD *)v15 = 136316674;
    v16 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000051, 0x80000001DDF5A100, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    if (v48)
    {
      v18 = MEMORY[0x1DF0E49D4](objc_msgSend(v10, sel_size));
      v20 = v19;
    }
    else
    {
      v20 = 0xE300000000000000;
      v18 = 7104878;
    }
    v21 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 32) = 2080;
    if (v21)
    {
      v22 = MEMORY[0x1DF0E49D4](objc_msgSend(v8, sel_size));
      v24 = v23;
    }
    else
    {
      v24 = 0xE300000000000000;
      v22 = 7104878;
    }
    v25 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 42) = 2080;
    v26 = Double.description.getter();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 52) = 2048;
    v28 = *(_QWORD *)(v25 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 62) = 2080;
    v29 = CGRect.debugDescription.getter();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v11, v50, "%s - %s: (elementsImage.size = %s, strokesImage.size = %s, sketchComplexityMeasure = %s, textPrompts.count = %ld, frame = %s)", (uint8_t *)v15, 0x48u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v49, -1, -1);
    MEMORY[0x1DF0E6558](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v31 = *(_QWORD *)(v0 + 144);
  v32 = *(void **)(v0 + 136);
  v34 = *(_QWORD *)(v0 + 120);
  v33 = *(_QWORD *)(v0 + 128);
  v51 = *(_OWORD *)(v0 + 104);
  v35 = *(_QWORD *)(v0 + 96);
  v36 = *(_QWORD *)(v0 + 88);
  v38 = *(_QWORD *)(v0 + 72);
  v37 = *(_QWORD *)(v0 + 80);
  v39 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v31, 1, 1, v39);
  v40 = v32;
  v41 = v10;
  v42 = v8;
  swift_bridgeObjectRetain();
  v43 = static MainActor.shared.getter();
  v44 = swift_allocObject();
  v45 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v44 + 16) = v43;
  *(_QWORD *)(v44 + 24) = v45;
  *(_QWORD *)(v44 + 32) = v40;
  *(_QWORD *)(v44 + 40) = v38;
  *(_QWORD *)(v44 + 48) = v37;
  *(_QWORD *)(v44 + 56) = v36;
  *(_QWORD *)(v44 + 64) = v35;
  *(_OWORD *)(v44 + 72) = v51;
  *(_QWORD *)(v44 + 88) = v34;
  *(_QWORD *)(v44 + 96) = v33;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v31, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:), v44);
  swift_release();
  v46 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v46;
  *v46 = v0;
  v46[1] = CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:);
  return CanvasGenerationTool.generateImageWithCheckedThrowingContinuation()();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
}

uint64_t CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[24] = a1;
  v4[25] = a2;
  v4[26] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  *(double *)(v10 + 64) = a2;
  *(double *)(v10 + 72) = a3;
  *(_QWORD *)(v10 + 56) = a10;
  *(double *)(v10 + 48) = a1;
  *(_QWORD *)(v10 + 32) = a8;
  *(_QWORD *)(v10 + 40) = a9;
  *(_QWORD *)(v10 + 24) = a7;
  type metadata accessor for MainActor();
  *(_QWORD *)(v10 + 80) = static MainActor.shared.getter();
  *(_QWORD *)(v10 + 88) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v10 + 96) = v11;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)()
{
  uint64_t v0;
  void **v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  Class isa;
  _QWORD *v27;
  uint64_t v29;

  v1 = (void **)(v0 + 24);
  v2 = *(void **)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
  *(_QWORD *)(v0 + 104) = v2;
  if (v2)
  {
    v3 = *(void **)(v0 + 32);
    if (v3)
    {
      v4 = one-time initialization token for imageGenerationParameterResolution;
      v5 = v2;
      v6 = v3;
      if (v4 != -1)
        swift_once();
      v7 = (void *)UIImage.padAndResizeImageToSquareOfLength(_:)(*(double *)&static UIConstants.imageGenerationParameterResolution);
      objc_msgSend(v5, sel_setSourceImage_, v7);

      v8 = *(void **)(v0 + 40);
      if (!v8)
        goto LABEL_15;
    }
    else
    {
      objc_msgSend(v2, sel_setSourceImage_, 0);
      v8 = *(void **)(v0 + 40);
      if (!v8)
      {
LABEL_15:
        v25 = *(_QWORD *)(v0 + 56);
        objc_msgSend(v2, sel_setSketchComplexityMeasure_, *(double *)(v0 + 48));
        if (*(_QWORD *)(v25 + 16))
        {
          isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v2, sel_addConcepts_, isa);

        }
        v27 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 112) = v27;
        *v27 = v0;
        v27[1] = closure #1 in CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:);
        return CanvasGenerationTool.addTitleAndSuggestions(at:)(*(double *)(v0 + 64), *(double *)(v0 + 72));
      }
    }
    v20 = one-time initialization token for imageGenerationParameterResolution;
    v21 = v8;
    if (v20 != -1)
      swift_once();
    v22 = (void *)UIImage.padAndResizeImageToSquareOfLength(_:)(*(double *)&static UIConstants.imageGenerationParameterResolution);
    v23 = (void *)UIImage.removeBackground()();
    objc_msgSend(v2, sel_setSketchImage_, v23);
    v24 = (void *)UIImage.alphaMaskForSketch()();
    objc_msgSend(v2, sel_setSketchMask_, v24);

    goto LABEL_15;
  }
  swift_release();
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v9 = *v1;
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)generativeLogger);
  v11 = v9;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *v1;
  if (v14)
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v29 = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v12, v13, "%s returning (magicGenerativeVC is nil)", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v17, -1, -1);
    MEMORY[0x1DF0E6558](v16, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.generateImage(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)(v6 + 80) = v5;
  *(double *)(v6 + 64) = a4;
  *(double *)(v6 + 72) = a5;
  *(double *)(v6 + 48) = a2;
  *(double *)(v6 + 56) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_OWORD *)(v6 + 96) = *(_OWORD *)a1;
  *(_BYTE *)(v6 + 176) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v6 + 112) = type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 120) = static MainActor.shared.getter();
  *(_QWORD *)(v6 + 128) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v6 + 136) = v8;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.generateImage(context:in:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  __C::CGRect v46;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 96);
  v2 = *(void **)(v0 + 104);
  v3 = *(void **)(v0 + 80);
  v4 = *(_BYTE *)(v0 + 176);
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)generativeLogger);
  v6 = v3;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  v7 = v6;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(unsigned __int8 *)(v0 + 176);
  if (v10)
  {
    v43 = v9;
    v12 = *(void **)(v0 + 80);
    v13 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v45 = v44;
    *(_DWORD *)v13 = 136315906;
    v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001DDF5A0E0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    v16 = 0xE500000000000000;
    v17 = 0x6567616D69;
    if (v11 != 1)
    {
      v17 = 0x6974616D6F747561;
      v16 = 0xE900000000000063;
    }
    if (v11)
      v18 = v17;
    else
      v18 = 1954047348;
    if (v11)
      v19 = v16;
    else
      v19 = 0xE400000000000000;
    v21 = *(void **)(v0 + 96);
    v20 = *(void **)(v0 + 104);
    v22 = *(_BYTE *)(v0 + 176);
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    *(_WORD *)(v13 + 32) = 2080;
    v23 = CGRect.debugDescription.getter();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v8, v43, "%s - %s: (context = %s, generationFrame: %s", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v44, -1, -1);
    MEMORY[0x1DF0E6558](v13, -1, -1);
  }
  else
  {
    v26 = *(void **)(v0 + 96);
    v25 = *(void **)(v0 + 104);
    v27 = *(void **)(v0 + 80);

    outlined consume of MagicGenerativePlaygroundContext(v26, v25, v11);
    outlined consume of MagicGenerativePlaygroundContext(v26, v25, v11);
  }

  v28 = *(void **)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 88);
  v30 = *(void **)(v0 + 96);
  v32 = *(double *)(v0 + 64);
  v31 = *(double *)(v0 + 72);
  v34 = *(double *)(v0 + 48);
  v33 = *(double *)(v0 + 56);
  v35 = *(_BYTE *)(v0 + 176);
  v46.origin.x = v34;
  v46.origin.y = v33;
  v46.size.width = v32;
  v46.size.height = v31;
  CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(PaperKit_MagicGenerativePlaygroundState_composingProvidedContext, v46);
  v36 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v29, 1, 1, v36);
  v37 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined copy of MagicGenerativePlaygroundContext(v30, v28, v35);
  swift_retain();
  v38 = static MainActor.shared.getter();
  v39 = swift_allocObject();
  v40 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v39 + 16) = v38;
  *(_QWORD *)(v39 + 24) = v40;
  *(_QWORD *)(v39 + 32) = v37;
  *(_QWORD *)(v39 + 40) = v30;
  *(_QWORD *)(v39 + 48) = v28;
  *(_BYTE *)(v39 + 56) = v35;
  *(CGFloat *)(v39 + 64) = v34;
  *(CGFloat *)(v39 + 72) = v33;
  *(CGFloat *)(v39 + 80) = v32;
  *(CGFloat *)(v39 + 88) = v31;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v29, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.generateImage(context:in:), v39);
  swift_release();
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v41;
  *v41 = v0;
  v41[1] = CanvasGenerationTool.generateImage(context:in:);
  return CanvasGenerationTool.generateImageWithCheckedThrowingContinuation()();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t CanvasGenerationTool.generateImage(context:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[19] = a1;
  v4[20] = a2;
  v4[21] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.generateImage(context:in:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;

  *(double *)(v9 + 80) = a1;
  *(double *)(v9 + 88) = a2;
  *(_BYTE *)(v9 + 144) = a9;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 72) = a8;
  *(_QWORD *)(v9 + 56) = a6;
  type metadata accessor for MainActor();
  *(_QWORD *)(v9 + 96) = static MainActor.shared.getter();
  *(_QWORD *)(v9 + 104) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v9 + 112) = v10;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.generateImage(context:in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  Class isa;
  id v31;
  _QWORD *v32;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  *(_QWORD *)(v0 + 120) = v2;
  if (!v2)
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)generativeLogger);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v34 = v17;
      *(_DWORD *)v16 = 136315138;
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000001DDF45150, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v14, v15, "%s returning from the task (self is nil)", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v17, -1, -1);
      MEMORY[0x1DF0E6558](v16, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = (void *)v2;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
  *(_QWORD *)(v0 + 128) = v4;
  if (!v4)
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)generativeLogger);
    v19 = v3;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      *(_DWORD *)v22 = 136315138;
      v34 = v23;
      v24 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v20, v21, "%s returning from the task (magicGenerativeVC is nil)", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v23, -1, -1);
      MEMORY[0x1DF0E6558](v22, -1, -1);

    }
    else
    {

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_BYTE *)(v0 + 144))
  {
    if (*(_BYTE *)(v0 + 144) == 1)
    {
      v6 = *(void **)(v0 + 64);
      v5 = *(void **)(v0 + 72);
      v7 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
      v8 = v4;
      outlined copy of MagicGenerativePlaygroundContext(v6, v5, 1);
      v9 = objc_msgSend(v7, sel_initWithCGImage_, v6);
      if (one-time initialization token for imageGenerationParameterResolution != -1)
        swift_once();
      v11 = *(void **)(v0 + 64);
      v10 = *(void **)(v0 + 72);
      v12 = (void *)UIImage.padAndResizeImageToSquareOfLength(_:)(*(double *)&static UIConstants.imageGenerationParameterResolution);

      objc_msgSend(v8, sel_setSourceImage_, v12);
      outlined consume of MagicGenerativePlaygroundContext(v11, v10, 1);
    }
    else
    {
      v31 = v4;
    }
  }
  else
  {
    v26 = *(void **)(v0 + 64);
    v27 = *(void **)(v0 + 72);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 32) = v26;
    *(_QWORD *)(v28 + 40) = v27;
    v29 = v4;
    outlined copy of MagicGenerativePlaygroundContext(v26, v27, 0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_addConcepts_, isa);

  }
  v32 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v32;
  *v32 = v0;
  v32[1] = closure #1 in CanvasGenerationTool.generateImage(context:in:);
  return CanvasGenerationTool.addTitleAndSuggestions(at:)(*(double *)(v0 + 80), *(double *)(v0 + 88));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 120);
  v2 = *(void **)(v0 + 128);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.generateImage(for:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 + 544) = v5;
  *(double *)(v6 + 536) = a5;
  *(double *)(v6 + 528) = a4;
  *(double *)(v6 + 520) = a3;
  *(double *)(v6 + 512) = a2;
  *(_QWORD *)(v6 + 504) = a1;
  type metadata accessor for CRKeyPath();
  *(_QWORD *)(v6 + 552) = swift_task_alloc();
  *(_QWORD *)(v6 + 560) = type metadata accessor for Image();
  *(_QWORD *)(v6 + 568) = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  *(_QWORD *)(v6 + 576) = v7;
  *(_QWORD *)(v6 + 584) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 592) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 600) = static MainActor.shared.getter();
  *(_QWORD *)(v6 + 608) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v6 + 616) = v8;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.generateImage(for:in:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  CGPathRef_optional v16;
  CGPathRef value;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  void *v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  void *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  void *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 544);
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 624) = __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 544);
  if (v6)
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_QWORD *)&v45 = v9;
    *(_DWORD *)v8 = 136315650;
    v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 480) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x80000001DDF5A0C0, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2080;
    v12 = CGRect.debugDescription.getter();
    *(_QWORD *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v4, v5, "%s - %s: (generationFrame = %s)", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v9, -1, -1);
    MEMORY[0x1DF0E6558](v8, -1, -1);

  }
  else
  {

  }
  v14 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 544) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(_QWORD *)(v0 + 632) = v14;
  if (!v14)
    goto LABEL_11;
  v15 = (void *)v14;
  v16.value = AnyCanvas.modelSpacePathForPath(_:)(*(CGPathRef *)(v0 + 504)).value;
  *(CGPathRef_optional *)(v0 + 640) = v16;
  if (!v16.value)
  {

LABEL_11:
    v25 = *(void **)(v0 + 544);
    swift_release();
    v26 = v25;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(void **)(v0 + 544);
    if (v29)
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      *(_QWORD *)&v45 = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v27, v28, "%s returning (canvas/modelSpacePath is nil)", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v32, -1, -1);
      MEMORY[0x1DF0E6558](v31, -1, -1);

    }
    else
    {

    }
    goto LABEL_18;
  }
  value = v16.value;
  v18 = AnyCanvas.elementCanvasMembersForModelPath(_:)(v16.value);
  *(_QWORD *)(v0 + 648) = v18;
  *(_QWORD *)(v0 + 656) = v20;
  if (v18)
  {
    *(_BYTE *)(v0 + 89) = v21;
    *(_QWORD *)(v0 + 664) = v19;
    AnyCanvas.textPromptsFromElementCanvasMembers(_:)(v18, v19, v20, v21 & 1, (unint64_t *)&v45);
    *(_OWORD *)(v0 + 672) = v45;
    v22 = v47;
    *(_QWORD *)(v0 + 688) = v46;
    *(_QWORD *)(v0 + 696) = v22;
    *(_BYTE *)(v0 + 90) = v48;
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 704) = v23;
    *v23 = v0;
    v23[1] = CanvasGenerationTool.generateImage(for:in:);
    return AnyCanvas.textPromptLookupFor(_:)(v0 + 16, (uint64_t)value);
  }
  v35 = *(void **)(v0 + 544);
  swift_release();
  v36 = v35;
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.error.getter();
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(void **)(v0 + 544);
  if (v39)
  {
    v41 = (uint8_t *)swift_slowAlloc();
    v42 = swift_slowAlloc();
    *(_QWORD *)&v45 = v42;
    *(_DWORD *)v41 = 136315138;
    v43 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v37, v38, "%s returning (elementMembers is nil)", v41, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v42, -1, -1);
    MEMORY[0x1DF0E6558](v41, -1, -1);

  }
  else
  {

  }
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;

  v2 = (_OWORD *)(*v0 + 712);
  v1 = *v0;
  v3 = *(_OWORD *)(*v0 + 32);
  *v2 = *(_OWORD *)(*v0 + 16);
  v2[1] = v3;
  *(_QWORD *)(v1 + 744) = *(_QWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 91) = *(_BYTE *)(v1 + 56);
  *(_OWORD *)(v1 + 752) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 768) = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(v1 + 92) = *(_BYTE *)(v1 + 88);
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  void *v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  void *v32;
  void *v33;
  void *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  int *v41;
  void *v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 720);
  v2 = *(_QWORD *)(v0 + 752);
  if (v1)
  {
    outlined copy of CanvasMembers?(v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4 = *(_QWORD **)(v0 + 672);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, *(_QWORD **)(v0 + 672));
    v6 = v4[2];
    v5 = v4[3];
    if (v6 >= v5 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
    v7 = *(_QWORD *)(v0 + 712);
    v4[2] = v6 + 1;
    v8 = &v4[2 * v6];
    v8[4] = v7;
    v8[5] = v1;
  }
  else
  {
    outlined copy of CanvasMembers?(v2);
    v4 = *(_QWORD **)(v0 + 672);
  }
  *(_QWORD *)(v0 + 776) = v4;
  v9 = *(_QWORD *)(v0 + 728);
  outlined consume of CanvasMembers?(*(_QWORD *)(v0 + 752));
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 752);
    if (v10)
    {
      v11 = *(_BYTE *)(v0 + 92);
      v12 = *(_QWORD *)(v0 + 760);
      v13 = *(_QWORD *)(v0 + 736);
      v14 = *(_QWORD *)(v0 + 728);
      v15 = *(_BYTE *)(v0 + 91) & 1;
      v16 = v11 & 1;
      v17 = *(_QWORD *)(v0 + 768);
      v18 = *(_QWORD *)(v0 + 744);
LABEL_14:
      *(_BYTE *)(v0 + 94) = v15;
      *(_QWORD *)(v0 + 840) = v18;
      *(_QWORD *)(v0 + 832) = v13;
      *(_QWORD *)(v0 + 824) = v14;
      *(_BYTE *)(v0 + 93) = v11;
      *(_QWORD *)(v0 + 816) = v17;
      *(_QWORD *)(v0 + 808) = v12;
      *(_QWORD *)(v0 + 800) = v10;
      *(_QWORD *)(v0 + 792) = v12;
      *(_QWORD *)(v0 + 784) = v10;
      v23 = *(unsigned __int8 *)(v0 + 90);
      v24 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 632)) + 0x648);
      v41 = (int *)((char *)v24 + *v24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 848) = v25;
      *v25 = v0;
      v25[1] = CanvasGenerationTool.generateImage(for:in:);
      return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v41)(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 688), *(_QWORD *)(v0 + 696), v23, v10, v12, v17, v16);
    }
    outlined consume of CanvasMembers?(*(_QWORD *)(v0 + 728));
  }
  v19 = *(_QWORD *)(v0 + 752);
  v10 = AnyCanvas.strokeCanvasMembersForModelPath(_:)(*(_QWORD *)(v0 + 640));
  v12 = v20;
  v40 = v21;
  v11 = v22;
  outlined consume of CanvasMembers?(v19);
  if (v10)
  {
    v15 = v11 & 1;
    v17 = v40;
    outlined copy of CanvasMembers?(v10);
    v14 = v10;
    v13 = v12;
    v18 = v40;
    v16 = v11 & 1;
    goto LABEL_14;
  }
  v27 = *(void **)(v0 + 544);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v27;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.error.getter();
  v31 = os_log_type_enabled(v29, v30);
  v32 = *(void **)(v0 + 640);
  v33 = *(void **)(v0 + 632);
  v34 = *(void **)(v0 + 544);
  if (v31)
  {
    v42 = *(void **)(v0 + 640);
    v35 = (uint8_t *)swift_slowAlloc();
    v39 = v33;
    v36 = swift_slowAlloc();
    v43 = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 472) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v29, v30, "%s returning (strokeMembers is nil)", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v36, -1, -1);
    MEMORY[0x1DF0E6558](v35, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGAffineTransform v38;

  v1 = *(id *)(v0 + 632);
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, v1);
  *(_QWORD *)(v0 + 872) = v3;
  *(_QWORD *)(v0 + 880) = 0;
  swift_bridgeObjectRelease();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_10;
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x1DF0E4D64](i, v3);
    else
      v7 = *(id *)(v3 + 8 * i + 32);
    v8 = v7;
    objc_msgSend(v7, sel_setHidden_, 1);

  }
LABEL_10:
  v9 = *(_QWORD **)(v0 + 632);
  swift_bridgeObjectRelease();
  v10 = swift_bridgeObjectRetain();
  v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v10);
  swift_bridgeObjectRelease();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(size_t))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x500))(v11);
  v13 = swift_release();
  v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v12 & *v9) + 0x2F8))(v13);
  (*(void (**)(void))((*v12 & *v14) + 0x2A0))();
  v34 = *(_QWORD *)(v0 + 312);
  v35 = *(_QWORD *)(v0 + 304);
  v32 = *(_QWORD *)(v0 + 328);
  v33 = *(_QWORD *)(v0 + 320);
  v36 = *(_QWORD *)(v0 + 344);
  v37 = *(_QWORD *)(v0 + 336);

  (*(void (**)(void))((*v12 & *v9) + 0x5B8))();
  v16 = *(double *)(v0 + 152);
  v15 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 168);
  v17 = *(double *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 192);
  outlined init with take of CGAffineTransform?(v0 + 152, v0 + 96);
  if ((*(_BYTE *)(v0 + 144) & 1) != 0)
  {
    v17 = 1.0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v15 = 0;
    v16 = 1.0;
  }
  v30 = *(_QWORD *)(v0 + 528);
  v31 = *(_QWORD *)(v0 + 536);
  v21 = *(_QWORD *)(v0 + 520);
  v22 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 352) = v35;
  *(_QWORD *)(v0 + 360) = v34;
  *(_QWORD *)(v0 + 368) = v33;
  *(_QWORD *)(v0 + 376) = v32;
  *(double *)(v0 + 208) = v16;
  *(_QWORD *)(v0 + 384) = v37;
  *(_QWORD *)(v0 + 392) = v36;
  *(_QWORD *)(v0 + 216) = v15;
  *(_QWORD *)(v0 + 224) = v18;
  *(double *)(v0 + 232) = v17;
  *(_QWORD *)(v0 + 240) = v20;
  *(_QWORD *)(v0 + 248) = v19;
  CGAffineTransformConcat(&v38, (CGAffineTransform *)(v0 + 352), (CGAffineTransform *)(v0 + 208));
  v23 = *(_OWORD *)&v38.c;
  v24 = *(_OWORD *)&v38.tx;
  *(_OWORD *)(v0 + 400) = *(_OWORD *)&v38.a;
  *(_OWORD *)(v0 + 416) = v23;
  *(_OWORD *)(v0 + 432) = v24;
  CGAffineTransformInvert(&v38, (CGAffineTransform *)(v0 + 400));
  v25 = *(_OWORD *)&v38.c;
  v26 = *(_OWORD *)&v38.tx;
  *(_OWORD *)(v0 + 256) = *(_OWORD *)&v38.a;
  *(_OWORD *)(v0 + 272) = v25;
  *(_OWORD *)(v0 + 288) = v26;
  v27 = v22;
  *(_QWORD *)&v25 = v21;
  *(_QWORD *)&v26 = v30;
  v28 = v31;
  *(CGRect *)(v0 + 888) = CGRectApplyAffineTransform(*(CGRect *)((char *)&v25 - 8), (CGAffineTransform *)(v0 + 256));
  swift_bridgeObjectRetain();
  v29 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 920) = v29;
  *v29 = v0;
  v29[1] = CanvasGenerationTool.generateImage(for:in:);
  return CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 776), 1.0, *(double *)(v0 + 512), *(double *)(v0 + 520), *(double *)(v0 + 528), *(double *)(v0 + 536));
}

{
  uint64_t v0;
  uint64_t v1;
  UIImage *v2;
  NSData *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  UIImage *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51[3];

  v1 = *(_QWORD *)(v0 + 928);
  swift_release();
  if (v1)
  {
    v2 = *(UIImage **)(v0 + 928);
    v3 = UIImagePNGRepresentation(v2);
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 912);
      v5 = *(_QWORD *)(v0 + 904);
      v41 = *(_OWORD *)(v0 + 888);
      v42 = *(_QWORD *)(v0 + 872);
      v45 = *(void **)(v0 + 864);
      v50 = *(void **)(v0 + 856);
      v33 = *(unsigned __int8 *)(v0 + 94);
      v32 = *(_QWORD *)(v0 + 840);
      v6 = *(_QWORD *)(v0 + 832);
      v7 = *(_QWORD *)(v0 + 824);
      v46 = *(_QWORD *)(v0 + 800);
      v8 = *(_QWORD *)(v0 + 664);
      v9 = *(_QWORD *)(v0 + 656);
      v39 = v2;
      v10 = *(_QWORD *)(v0 + 648);
      v49 = *(void **)(v0 + 640);
      v11 = *(_QWORD **)(v0 + 632);
      v43 = *(void **)(v0 + 928);
      v44 = *(_QWORD *)(v0 + 584);
      v40 = *(_QWORD *)(v0 + 576);
      v35 = *(_QWORD *)(v0 + 560);
      v36 = *(_QWORD *)(v0 + 592);
      v31 = *(_QWORD *)(v0 + 568);
      v12 = *(_BYTE *)(v0 + 89) & 1;
      v37 = *(_QWORD *)(v0 + 936);
      v38 = *(_QWORD *)(v0 + 944);
      v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v47 = v14;
      v48 = v13;

      v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x498);
      v15(v10, v8, v9, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15(v7, v6, v32, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Image.init()(v31);
      static CRKeyPath.unique.getter();
      v34 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      Capsule<>.init(_:id:)();
      v16 = swift_task_alloc();
      *(_OWORD *)(v16 + 16) = v41;
      *(_QWORD *)(v16 + 32) = v5;
      *(_QWORD *)(v16 + 40) = v4;
      *(_QWORD *)(v16 + 48) = v48;
      *(_QWORD *)(v16 + 56) = v47;
      *(_QWORD *)(v16 + 64) = v11;
      *(_QWORD *)(v16 + 72) = v39;
      *(_QWORD *)(v16 + 80) = v37;
      *(_QWORD *)(v16 + 88) = v38;
      Capsule.callAsFunction<A>(_:)();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      v17 = v45;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *v11)
                                                                                              + 0x480))(v36, 1, 0, 0, v35, v34, &protocol witness table for Image);
      outlined consume of Data._Representation(v48, v47);
      outlined consume of ImageWithEncodedRecipe?(v43, v37, v38);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v36, v40);
      $defer #1 () in CanvasGenerationTool.generateImage(for:in:)(v42, v11);
      v18 = v46;
      goto LABEL_10;
    }
    outlined consume of ImageWithEncodedRecipe?(*(void **)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = *(void **)(v0 + 544);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v19;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(void **)(v0 + 544);
  if (v23)
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v51[0] = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 464) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v21, v22, "%s returning (generated image/data is nil)", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v26, -1, -1);
    MEMORY[0x1DF0E6558](v25, -1, -1);
  }
  else
  {

  }
  v17 = *(void **)(v0 + 864);
  v29 = *(_QWORD *)(v0 + 800);
  v49 = *(void **)(v0 + 640);
  v50 = *(void **)(v0 + 856);
  v11 = *(_QWORD **)(v0 + 632);
  $defer #1 () in CanvasGenerationTool.generateImage(for:in:)(*(_QWORD *)(v0 + 872), v11);
  v18 = v29;
LABEL_10:
  outlined consume of CanvasMembers?(v18);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.generateImage(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 856) = a1;
  *(_QWORD *)(v3 + 864) = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.generateImage(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[116] = a1;
  v4[117] = a2;
  v4[118] = a3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t $defer #1 () in CanvasGenerationTool.generateImage(for:in:)(unint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x508))(MEMORY[0x1E0DEE9D8]);
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1DF0E4D64](i, a1);
      else
        v7 = *(id *)(a1 + 8 * i + 32);
      v8 = v7;
      objc_msgSend(v7, sel_setHidden_, 0);

    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in CanvasGenerationTool.generateImage(for:in:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v24 = a8;
  v25 = *(double *)&a11;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v26 = a1;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v26 = 0.0;
  v27 = 0.0;
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  outlined copy of Data._Representation(a6, a7);
  CRContext.assetManager.getter();
  CRAsset.init(data:assetManager:)();
  v22 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 0, 1, v22);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  v26 = *(double *)&a10;
  v27 = v25;
  outlined copy of Data._Representation(a10, *(unint64_t *)&v25);
  return Capsule.Ref<>.subscript.setter();
}

Swift::Void __swiftcall CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(PaperKit::MagicGenerativePlaygroundState a1, __C::CGRect in)
{
  void *v2;
  double height;
  double width;
  double y;
  double x;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  char *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  Class isa;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  id v75;
  int v76;
  uint64_t v77;
  uint64_t v78[5];

  height = in.size.height;
  width = in.size.width;
  y = in.origin.y;
  x = in.origin.x;
  v76 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)generativeLogger);
  v12 = v2;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v78[0] = v16;
    *(_DWORD *)v15 = 136315650;
    v17 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v15 + 12) = 2080;
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x80000001DDF5A090, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    v19 = MagicGenerativePlaygroundState.rawValue.getter(v76);
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v13, v14, "%s - %s: (state = %s)", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v16, -1, -1);
    MEMORY[0x1DF0E6558](v15, -1, -1);
  }
  else
  {

  }
  v78[3] = (uint64_t)&type metadata for PencilAndPaperFeatureFlags;
  v78[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v78[0]) = 2;
  v21 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  if ((v21 & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v22 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC;
  v23 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (!v23)
  {
    v24 = objc_msgSend(objc_allocWithZone((Class)PPKGPInProcessMagicPaperViewController), sel_initWithTokenProvider_, v12);
    CanvasGenerationTool.magicGenerativeState.setter(1u);
    v25 = *(void **)&v12[v22];
    *(_QWORD *)&v12[v22] = v24;

    v23 = *(void **)&v12[v22];
    if (!v23)
      goto LABEL_26;
  }
  v26 = v23;
  v27 = objc_msgSend(v26, sel_view);
  if (!v27)
  {

LABEL_26:
    v57 = v12;
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      v78[0] = v61;
      *(_DWORD *)v60 = 136315138;
      v62 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v58, v59, "%s returning (magicGenerativeVC is nil)", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v61, -1, -1);
      MEMORY[0x1DF0E6558](v60, -1, -1);
    }
    else
    {

    }
    return;
  }
  v28 = v27;
  v74 = v10;
  CanvasGenerationTool.magicGenerativeState.setter(v76);
  objc_msgSend(v26, sel_setDelegate_, v12);
  objc_msgSend(v28, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v12, sel_addSubview_, v28);
  v29 = objc_msgSend(v28, sel_topAnchor);
  v30 = &v12[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas];
  v31 = (void *)MEMORY[0x1DF0E666C](&v12[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (!v31
    || (v32 = v31, v33 = objc_msgSend(v31, sel_topAnchor), v32, !v33))
  {
    v33 = objc_msgSend(v12, sel_topAnchor);
  }
  v34 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v33);

  v35 = objc_msgSend(v28, sel_bottomAnchor);
  v36 = (void *)MEMORY[0x1DF0E666C](v30);
  if (!v36
    || (v37 = v36, v38 = objc_msgSend(v36, sel_bottomAnchor),
                   v37,
                   !v38))
  {
    v38 = objc_msgSend(v12, sel_bottomAnchor);
  }
  v39 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v38);

  v40 = objc_msgSend(v28, sel_leadingAnchor);
  v41 = (void *)MEMORY[0x1DF0E666C](v30);
  if (!v41
    || (v42 = v41,
        v43 = objc_msgSend(v41, sel_leadingAnchor),
        v42,
        !v43))
  {
    v43 = objc_msgSend(v12, sel_leadingAnchor);
  }
  v44 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v43);

  v45 = objc_msgSend(v28, sel_trailingAnchor);
  v46 = (void *)MEMORY[0x1DF0E666C](v30);
  if (!v46
    || (v47 = v46,
        v48 = objc_msgSend(v46, sel_trailingAnchor),
        v47,
        !v48))
  {
    v48 = objc_msgSend(v12, sel_trailingAnchor);
  }
  v49 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v48);

  v50 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_1DDF329D0;
  *(_QWORD *)(v51 + 32) = v34;
  *(_QWORD *)(v51 + 40) = v39;
  *(_QWORD *)(v51 + 48) = v44;
  *(_QWORD *)(v51 + 56) = v49;
  v78[0] = v51;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  v52 = v34;
  v53 = v39;
  v75 = v44;
  v54 = v49;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v50, sel_activateConstraints_, isa);

  if (MagicGenerativePlaygroundState.rawValue.getter(v76) == 0x656C6553646E6177 && v56 == 0xED00006E6F697463)
  {
    swift_bridgeObjectRelease();
LABEL_30:
    v65 = objc_msgSend(objc_allocWithZone((Class)PPKGPMagicPaperState), sel_initWithFrame_isEditing_, 0, x, y, width, height);
    objc_msgSend(v26, sel_setState_, v65);

    return;
  }
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v64 & 1) != 0)
    goto LABEL_30;
  v66 = type metadata accessor for TaskPriority();
  v67 = (uint64_t)v74;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v74, 1, 1, v66);
  type metadata accessor for MainActor();
  v68 = v12;
  v69 = v26;
  v70 = static MainActor.shared.getter();
  v71 = (double *)swift_allocObject();
  v72 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v71 + 2) = v70;
  *((_QWORD *)v71 + 3) = v72;
  *((_QWORD *)v71 + 4) = v68;
  v71[5] = x;
  v71[6] = y;
  v71[7] = width;
  v71[8] = height;
  *((_QWORD *)v71 + 9) = v69;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v67, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:in:), (uint64_t)v71);

  swift_release();
}

uint64_t closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 56) = a9;
  *(double *)(v9 + 40) = a3;
  *(double *)(v9 + 48) = a4;
  *(double *)(v9 + 24) = a1;
  *(double *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 16) = a8;
  type metadata accessor for MainActor();
  *(_QWORD *)(v9 + 64) = static MainActor.shared.getter();
  *(_QWORD *)(v9 + 72) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v9 + 80) = v10;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)()
{
  uint64_t v0;
  _QWORD *v1;

  CanvasGenerationTool.hideToolPickerIfNeeded()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:in:);
  return CanvasGenerationTool.addMagicBlob(for:)(*(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  id v7;

  v1 = *(void **)(v0 + 56);
  v3 = *(double *)(v0 + 40);
  v2 = *(double *)(v0 + 48);
  v5 = *(double *)(v0 + 24);
  v4 = *(double *)(v0 + 32);
  v6 = *(void **)(v0 + 16);
  swift_release();
  v7 = objc_msgSend(objc_allocWithZone((Class)PPKGPMagicPaperState), sel_initWithFrame_isEditing_, 1, v5, v4, v3, v2);
  objc_msgSend(v1, sel_setState_, v7);

  objc_msgSend(v6, sel_disableGestureRecognizer);
  CanvasGenerationTool.addMagicGenerativeBackgroundView()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall CanvasGenerationTool.addMagicGenerativeBackgroundView()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  Class isa;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v56 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x80000001DDF5A040, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v6, -1, -1);
    MEMORY[0x1DF0E6558](v5, -1, -1);

  }
  else
  {

  }
  v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView])
  {
    v10 = v2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v56 = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v17 = "%s returning (magicGenerativeBackgroundView is NOT nil)";
LABEL_15:
      _os_log_impl(&dword_1DDB0F000, v11, v12, v17, v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v14, -1, -1);
      MEMORY[0x1DF0E6558](v13, -1, -1);

      return;
    }
LABEL_16:

    return;
  }
  v18 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (!v18 || (v19 = objc_msgSend(v18, sel_view)) == 0)
  {
    v10 = v2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v56 = v14;
      *(_DWORD *)v13 = 136315138;
      v44 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v17 = "%s returning (magicGenerativeView is nil)";
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v20 = v19;
  v21 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
    objc_msgSend(v23, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v24 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    objc_msgSend(v23, sel_setBackgroundColor_, v24);

    objc_msgSend(v23, sel_setUserInteractionEnabled_, 1);
    objc_msgSend(v2, sel_insertSubview_belowSubview_, v23, v20);
    v25 = objc_msgSend(v23, sel_topAnchor);
    v26 = objc_msgSend(v22, sel_topAnchor);
    v55 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

    v27 = objc_msgSend(v23, sel_bottomAnchor);
    v28 = objc_msgSend(v22, sel_bottomAnchor);
    v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

    v30 = objc_msgSend(v23, sel_leadingAnchor);
    v53 = v22;
    v54 = v20;
    v31 = objc_msgSend(v22, sel_leadingAnchor);
    v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

    v33 = objc_msgSend(v23, sel_trailingAnchor);
    v34 = objc_msgSend(v22, sel_trailingAnchor);
    v35 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v34);

    v36 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_1DDF329D0;
    *(_QWORD *)(v37 + 32) = v55;
    *(_QWORD *)(v37 + 40) = v29;
    *(_QWORD *)(v37 + 48) = v32;
    *(_QWORD *)(v37 + 56) = v35;
    v56 = v37;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    v38 = v55;
    v39 = v29;
    v40 = v32;
    v41 = v35;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v36, sel_activateConstraints_, isa);

    v43 = *(void **)&v2[v9];
    *(_QWORD *)&v2[v9] = v23;

  }
  else
  {
    v46 = v2;
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      v50 = swift_slowAlloc();
      v56 = v50;
      *(_DWORD *)v49 = 136315138;
      v51 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v47, v48, "%s returning (canvas is nil)", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v50, -1, -1);
      MEMORY[0x1DF0E6558](v49, -1, -1);

    }
    else
    {

    }
  }
}

void CanvasGenerationTool.removeMagicGenerativeBackgroundViewIfNeeded()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v20 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002DLL, 0x80000001DDF5A010, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v6, -1, -1);
    MEMORY[0x1DF0E6558](v5, -1, -1);

  }
  else
  {

  }
  v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView;
  v10 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView];
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v11, sel_removeFromSuperview);
    v12 = *(void **)&v2[v9];
    *(_QWORD *)&v2[v9] = 0;

  }
  else
  {
    v13 = v2;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v20 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v14, v15, "%s returning (magicGenerativeBackgroundView is nil)", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v17, -1, -1);
      MEMORY[0x1DF0E6558](v16, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t CanvasGenerationTool.generateImageWithCheckedThrowingContinuation()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[12] = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  v1[13] = swift_task_alloc();
  v1[14] = type metadata accessor for MainActor();
  v1[15] = static MainActor.shared.getter();
  v1[16] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[17] = v2;
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = (void *)v0[12];
  v2 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[12];
  if (v6)
  {
    v8 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v16 = v15;
    *(_DWORD *)v8 = 136315394;
    v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 12) = 2080;
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x80000001DDF59FE0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v4, v5, "%s - %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v15, -1, -1);
    MEMORY[0x1DF0E6558](v8, -1, -1);
  }
  else
  {

  }
  v11 = v0[12];
  v0[19] = static MainActor.shared.getter();
  v12 = swift_task_alloc();
  v0[20] = v12;
  *(_QWORD *)(v12 + 16) = v11;
  v13 = (_QWORD *)swift_task_alloc();
  v0[21] = v13;
  *v13 = v0;
  v13[1] = CanvasGenerationTool.generateImageWithCheckedThrowingContinuation();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v5, v7);
  swift_endAccess();
  CanvasGenerationTool.continuation.didset();
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  CanvasGenerationTool.resetGenerativeTool()();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v1, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 176);
  v2 = *(void **)(v0 + 96);
  swift_release();
  swift_release();
  swift_task_dealloc();
  v3 = v2;
  v4 = v1;
  v5 = v3;
  v6 = v1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 176);
    v10 = *(void **)(v0 + 96);
    v11 = swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25 = v24;
    *(_DWORD *)v11 = 136315394;
    v13 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2112;
    v15 = v9;
    v16 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v16;

    _os_log_impl(&dword_1DDB0F000, v7, v8, "%s Catch error: %@", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v24, -1, -1);
    MEMORY[0x1DF0E6558](v11, -1, -1);

  }
  else
  {
    v17 = *(void **)(v0 + 176);
    v18 = *(void **)(v0 + 96);

  }
  v20 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 104);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 1, 1, v21);
  v22 = v20 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v19, v22);
  swift_endAccess();
  CanvasGenerationTool.continuation.didset();
  outlined destroy of StocksKitCurrencyCache.Provider?(v19, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  CanvasGenerationTool.resetGenerativeTool()();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(0, 0, 0);
}

uint64_t closure #1 in CanvasGenerationTool.generateImageWithCheckedThrowingContinuation()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v10 = a2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?((uint64_t)v7, v10);
  swift_endAccess();
  CanvasGenerationTool.continuation.didset();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
}

uint64_t CanvasGenerationTool.addMagicBlob(for:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 96) = v4;
  *(double *)(v5 + 80) = a3;
  *(double *)(v5 + 88) = a4;
  *(double *)(v5 + 64) = a1;
  *(double *)(v5 + 72) = a2;
  v6 = type metadata accessor for ContinuousClock();
  *(_QWORD *)(v5 + 104) = v6;
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 120) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 128) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 136) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 144) = v7;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.addMagicBlob(for:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  CGFloat v16;
  CGFloat v17;
  double v18;
  double v19;
  id v20;
  CGPathRef v21;
  id v22;
  _QWORD *v23;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  void *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v35;
  CGRect v36;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 96);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 96);
  if (v6)
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v35 = v9;
    *(_DWORD *)v8 = 136315650;
    v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001DDF59FC0, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2080;
    v12 = CGRect.debugDescription.getter();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v4, v5, "%s - %s: (blobFrame = %s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v9, -1, -1);
    MEMORY[0x1DF0E6558](v8, -1, -1);
  }
  else
  {

  }
  v14 = *(char **)(v0 + 96);
  v15 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  *(_QWORD *)(v0 + 152) = v15;
  if (v15)
  {
    v17 = *(double *)(v0 + 80);
    v16 = *(double *)(v0 + 88);
    v19 = *(double *)(v0 + 64);
    v18 = *(double *)(v0 + 72);
    v20 = v15;
    v36.origin.x = v19;
    v36.origin.y = v18;
    v36.size.width = v17;
    v36.size.height = v16;
    v21 = CGPathCreateWithRoundedRect(v36, 2.0, 2.0, 0);
    *(_QWORD *)(v0 + 160) = v21;
    v22 = objc_msgSend(objc_allocWithZone((Class)PPKGPMagicPaperState), sel_initWithFrame_isEditing_, 0, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v20, sel_setState_, v22);

    *(double *)(v0 + 16) = v19;
    *(double *)(v0 + 24) = v18;
    objc_msgSend(v20, sel_startSelectionWithPath_pencilLocation_, v21, v19, v18);
    objc_msgSend(v20, sel_updateSelectionWithPath_pencilLocation_, v21, v19, v18);
    ContinuousClock.init()();
    v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                           + async function pointer to specialized Clock.sleep(for:tolerance:));
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v23;
    *v23 = v0;
    v23[1] = CanvasGenerationTool.addMagicBlob(for:);
    return v34(1000000000000000000, 0, 0, 0, 1);
  }
  else
  {
    swift_release();
    v25 = v14;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = *(void **)(v0 + 96);
    if (v28)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v35 = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v26, v27, "%s returning (magicGenerativeVC is nil)", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v31, -1, -1);
      MEMORY[0x1DF0E6558](v30, -1, -1);
    }
    else
    {

    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[14];
  v3 = v2[15];
  v5 = v2[13];
  if (v0)
  {

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 8))(v2[15], v2[13]);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  double v1;
  double v2;
  void *v3;
  void *v4;

  v1 = *(double *)(v0 + 16);
  v2 = *(double *)(v0 + 24);
  v3 = *(void **)(v0 + 152);
  v4 = *(void **)(v0 + 160);
  swift_release();
  objc_msgSend(v3, sel_finishSelectionWithPath_pencilLocation_, v4, v1, v2);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.addTitleAndSuggestions(at:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 664) = v2;
  *(double *)(v3 + 656) = a2;
  *(double *)(v3 + 648) = a1;
  v4 = type metadata accessor for CharacterSet();
  *(_QWORD *)(v3 + 672) = v4;
  *(_QWORD *)(v3 + 680) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 688) = swift_task_alloc();
  *(_QWORD *)(v3 + 696) = type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 704) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 712) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 720) = v5;
  return swift_task_switch();
}

uint64_t CanvasGenerationTool.addTitleAndSuggestions(at:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  void *v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void *v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t inited;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  Class isa;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 664);
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 728) = __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 664);
  if (v6)
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v97 = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 632) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 640) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001DDF59FA0, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v4, v5, "%s - %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v9, -1, -1);
    MEMORY[0x1DF0E6558](v8, -1, -1);
  }
  else
  {

  }
  v12 = *(_QWORD *)(v0 + 664) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas;
  v13 = MEMORY[0x1DF0E666C](v12);
  *(_QWORD *)(v0 + 736) = v13;
  if (!v13)
    goto LABEL_19;
  v14 = (void *)v13;
  *(_QWORD *)(v0 + 592) = v13;
  type metadata accessor for AnyCanvas();
  v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitAttachment);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_QWORD *)(v0 + 152) = 0;
    swift_release();

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 120, &demangling cache variable for type metadata for PaperKitAttachment?);
LABEL_23:
    v39 = *(id *)(v0 + 664);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(void **)(v0 + 664);
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc();
      v94 = swift_slowAlloc();
      v97 = v94;
      *(_DWORD *)v44 = 136315138;
      v45 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)(v0 + 576) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v40, v41, "%s returning (paperKitAttachment/magicGenerativeVC/textualContext is nil)", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v94, -1, -1);
      MEMORY[0x1DF0E6558](v44, -1, -1);
    }
    else
    {

    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v16 = *(_QWORD *)(v0 + 664);
  outlined init with take of FindResult((__int128 *)(v0 + 120), v0 + 80);
  v17 = *(void **)(v16 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
  *(_QWORD *)(v0 + 744) = v17;
  if (!v17)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);

LABEL_19:
    swift_release();
    goto LABEL_23;
  }
  v18 = MEMORY[0x1DF0E666C](v12);
  if (!v18)
  {
    v23 = v15;
    goto LABEL_22;
  }
  v19 = (void *)v18;
  v20 = v18 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  swift_beginAccess();
  v21 = MEMORY[0x1DF0E666C](v20);
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v17;

  if (!v21
    || (ObjectType = swift_getObjectType(),
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v22 + 8))(&v97, v0 + 80, ObjectType, v22), swift_unknownObjectRelease(), (v25 = v98) == 0))
  {

LABEL_22:
    swift_release();

    __swift_destroy_boxed_opaque_existential_1(v0 + 80);
    goto LABEL_23;
  }
  v87 = v23;
  v83 = v100;
  v84 = v101;
  v85 = v99;
  v82 = v102;
  v26 = *(_QWORD *)(v0 + 688);
  v88 = *(_QWORD *)(v0 + 680);
  v90 = *(_QWORD *)(v0 + 672);
  v86 = v97;
  *(_QWORD *)(v0 + 240) = v97;
  *(_QWORD *)(v0 + 248) = v25;
  v93 = v25;
  *(_QWORD *)(v0 + 256) = 10;
  *(_QWORD *)(v0 + 264) = 0xE100000000000000;
  *(_QWORD *)(v0 + 272) = 32;
  *(_QWORD *)(v0 + 280) = 0xE100000000000000;
  v27 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v0 + 752) = v27;
  v28 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v0 + 288) = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  *(_QWORD *)(v0 + 296) = v29;
  *(_QWORD *)(v0 + 304) = 9;
  *(_QWORD *)(v0 + 312) = 0xE100000000000000;
  *(_QWORD *)(v0 + 320) = 32;
  *(_QWORD *)(v0 + 328) = 0xE100000000000000;
  v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v32 = v31;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 336) = v30;
  *(_QWORD *)(v0 + 344) = v32;
  static CharacterSet.whitespacesAndNewlines.getter();
  v33 = StringProtocol.trimmingCharacters(in:)();
  v35 = v34;
  v36 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
  *(_QWORD *)(v0 + 760) = v36;
  v89 = v36;
  v36(v26, v90);
  swift_bridgeObjectRelease();
  v37 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0)
    v37 = v33 & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    v38 = (void *)MEMORY[0x1DF0E41AC](v33, v35);
    swift_bridgeObjectRelease();
    objc_msgSend(v87, sel_setTitle_, v38, v28, v27, v27, v27);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 768) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF33AB0;
  *(_QWORD *)(inited + 32) = v85;
  v91 = inited + 32;
  *(_QWORD *)(inited + 40) = v83;
  *(_QWORD *)(inited + 48) = v84;
  *(_QWORD *)(inited + 56) = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of PaperAttachmentTextualContext?(v86, v93);
  swift_bridgeObjectRetain();
  v49 = 0;
  v50 = 0;
  v92 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v51 = MEMORY[0x1E0DEA968];
  do
  {
    v95 = v49;
    v52 = *(_QWORD *)(v0 + 688);
    v53 = *(_QWORD *)(v0 + 672);
    v54 = (_QWORD *)(v91 + 16 * v50);
    v55 = v54[1];
    *(_QWORD *)(v0 + 384) = *v54;
    *(_QWORD *)(v0 + 392) = v55;
    *(_QWORD *)(v0 + 400) = 10;
    *(_QWORD *)(v0 + 408) = 0xE100000000000000;
    *(_QWORD *)(v0 + 416) = 32;
    *(_QWORD *)(v0 + 424) = 0xE100000000000000;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 368) = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    *(_QWORD *)(v0 + 376) = v56;
    *(_QWORD *)(v0 + 448) = 9;
    *(_QWORD *)(v0 + 456) = 0xE100000000000000;
    *(_QWORD *)(v0 + 464) = 32;
    *(_QWORD *)(v0 + 472) = 0xE100000000000000;
    v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v59 = v58;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 480) = v57;
    *(_QWORD *)(v0 + 488) = v59;
    static CharacterSet.whitespacesAndNewlines.getter();
    v60 = StringProtocol.trimmingCharacters(in:)();
    v62 = v61;
    v89(v52, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = HIBYTE(v62) & 0xF;
    if ((v62 & 0x2000000000000000) == 0)
      v63 = v60 & 0xFFFFFFFFFFFFLL;
    if (v63)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92[2] + 1, 1, v92);
      v65 = v92[2];
      v64 = v92[3];
      if (v65 >= v64 >> 1)
        v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v64 > 1), v65 + 1, 1, v92);
      v92[2] = v65 + 1;
      v66 = &v92[2 * v65];
      v66[4] = v60;
      v66[5] = v62;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v49 = 1;
    v50 = 1;
  }
  while ((v95 & 1) == 0);
  v67 = *(void **)(v0 + 664);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 584) = v92;
  AnyCanvas.suggestionsFromOnScreenTextCanvasElements()();
  specialized Array.append<A>(contentsOf:)(v68);
  v69 = *(_QWORD *)(v0 + 584);
  v70 = v67;
  swift_bridgeObjectRetain_n();
  v71 = v70;
  v72 = Logger.logObject.getter();
  v73 = static os_log_type_t.default.getter();
  v74 = os_log_type_enabled(v72, v73);
  v75 = *(void **)(v0 + 664);
  if (v74)
  {
    v76 = swift_slowAlloc();
    v96 = swift_slowAlloc();
    v97 = v96;
    *(_DWORD *)v76 = 136315394;
    v77 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 616) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v76 + 12) = 2048;
    v79 = *(_QWORD *)(v69 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 624) = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v72, v73, "%s suggestions count is %ld", (uint8_t *)v76, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v96, -1, -1);
    MEMORY[0x1DF0E6558](v76, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 584) + 16))
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v87, sel_setSuggestions_, isa, v51, v27, v27, v27);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 776) = static MainActor.shared.getter();
  v81 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 784) = v81;
  *v81 = v0;
  v81[1] = CanvasGenerationTool.addTitleAndSuggestions(at:);
  return AnyCanvas.textStrokesCoveredAt(_:)(*(double *)(v0 + 648), *(double *)(v0 + 656));
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = v0[99];
  swift_release();
  if (v1)
  {
    v13 = (void (*)(uint64_t, uint64_t))v0[95];
    v14 = v0[99];
    v2 = v0[86];
    v12 = v0[84];
    v0[64] = v0[22];
    v0[65] = v14;
    v0[66] = 10;
    v0[67] = 0xE100000000000000;
    v0[68] = 32;
    v0[69] = 0xE100000000000000;
    v0[70] = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v0[71] = v3;
    v0[54] = 9;
    v0[55] = 0xE100000000000000;
    v0[44] = 32;
    v0[45] = 0xE100000000000000;
    v4 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v0[62] = v4;
    v0[63] = v6;
    static CharacterSet.whitespacesAndNewlines.getter();
    v7 = StringProtocol.trimmingCharacters(in:)();
    v9 = v8;
    v0[100] = v7;
    v0[101] = v8;
    v13(v2, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    if (!v10)
      swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 744);
  v2 = *(void **)(v0 + 736);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  Class isa;
  uint64_t v20;

  v1 = *(void **)(v0 + 664);
  swift_release();
  v2 = v1;
  swift_bridgeObjectRetain_n();
  v3 = v2;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 664);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v20 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)(v0 + 600) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v7 + 12) = 2048;
    v11 = String.count.getter();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 608) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v4, v5, "%s handwritten text length is %ld", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v8, -1, -1);
    MEMORY[0x1DF0E6558](v7, -1, -1);
  }
  else
  {
    v12 = *(void **)(v0 + 664);
    swift_bridgeObjectRelease_n();

  }
  v13 = *(_QWORD *)(v0 + 808);
  v14 = *(_QWORD *)(v0 + 800);
  v15 = *(void **)(v0 + 744);
  v16 = *(void **)(v0 + 736);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(v17 + 32) = v14;
  *(_QWORD *)(v17 + 40) = v13;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_addSuggestions_, isa);

  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.addTitleAndSuggestions(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[20] = v3;
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = a3;
  v4[99] = a3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

Swift::Void __swiftcall CanvasGenerationTool.resetGenerativeTool()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  id v33;
  double v34;
  CGFloat v35;
  UIView_optional *v36;
  CGSize v37;
  BOOL v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  char *v45;
  __int128 v46;
  id v47;
  uint64_t v48;
  CGRect v49;
  __C::CGRect v50;
  CGRect v51;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v48 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001DDF59F10, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v6, -1, -1);
    MEMORY[0x1DF0E6558](v5, -1, -1);

  }
  else
  {

  }
  v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC;
  v10 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (v10)
  {
    v11 = v2;
    v12 = v10;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v47 = v12;
      v16 = swift_slowAlloc();
      v48 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v13, v14, "%s magicGenerativeVC clean up", v15, 0xCu);
      swift_arrayDestroy();
      v19 = v16;
      v12 = v47;
      MEMORY[0x1DF0E6558](v19, -1, -1);
      MEMORY[0x1DF0E6558](v15, -1, -1);

    }
    else
    {

    }
    CanvasGenerationTool.magicGenerativeState.setter(0xAu);
    v20 = MEMORY[0x1DF0E666C](&v11[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
    if (v20)
    {
      v21 = (void *)v20;
      type metadata accessor for PaperTextAttachmentView();
      v22 = (_QWORD *)swift_dynamicCastClass();
      if (v22)
      {
        v23 = v22;
        v24 = *((unsigned __int8 *)v22
              + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode);
        *((_BYTE *)v22 + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode) = 2;
        if (v24 != 2)
        {
          objc_msgSend(v22, sel_frame);
          v26 = v25;
          v28 = v27;
          v30 = v29;
          v32 = v31;
          v33 = objc_msgSend(v23, sel_frame);
          v35 = v34;
          v36 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v23) + 0x1150))(v33);
          if (!v36)
            v36 = (UIView_optional *)objc_msgSend(v23, sel_superview);
          v37 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v36);

          v49.origin.x = 0.0;
          v49.origin.y = v35;
          v49.size.width = v37.width;
          v49.size.height = v37.height;
          v51.origin.x = v26;
          v51.origin.y = v28;
          v51.size.width = v30;
          v51.size.height = v32;
          v38 = CGRectEqualToRect(v49, v51);
          v50.origin.x = 0.0;
          v50.origin.y = v35;
          v50.size.width = v37.width;
          v50.size.height = v37.height;
          PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v50, 0, !v38, 0);
        }
      }

    }
    v39 = objc_msgSend(v12, sel_view);
    objc_msgSend(v39, sel_removeFromSuperview);

    objc_msgSend(v12, sel_removeFromParentViewController);
    CanvasGenerationTool.magicGenerativeState.setter(0);
    v40 = *(void **)&v2[v9];
    *(_QWORD *)&v2[v9] = 0;

  }
  CanvasGenerationTool.removeMagicGenerativeBackgroundViewIfNeeded()();
  v41 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath];
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = 0;

  v42 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack;
  v43 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack];
  if (v43)
  {
    objc_msgSend(v43, sel_setEnabled_, 1);
    v44 = *(void **)&v2[v42];
  }
  else
  {
    v44 = 0;
  }
  *(_QWORD *)&v2[v42] = 0;

  v45 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance];
  v46 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)v45 = *MEMORY[0x1E0C9D628];
  *((_OWORD *)v45 + 1) = v46;
  CanvasGenerationTool.showToolPickerIfNeeded()();
}

Swift::Void __swiftcall CanvasGenerationTool.hideToolPickerIfNeeded()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  id v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v15 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x80000001DDF59EF0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v6, -1, -1);
    MEMORY[0x1DF0E6558](v5, -1, -1);

  }
  else
  {

  }
  v9 = objc_msgSend(v2, sel_window, v14, v15);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, sel_firstResponder);

  }
  else
  {
    v11 = 0;
  }
  v12 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_lastFirstResponder];
  swift_unknownObjectWeakAssign();

  v13 = (void *)MEMORY[0x1DF0E666C](v12);
  objc_msgSend(v13, sel_resignFirstResponder);

}

Swift::Void __swiftcall CanvasGenerationTool.showToolPickerIfNeeded()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x80000001DDF59ED0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v6, -1, -1);
    MEMORY[0x1DF0E6558](v5, -1, -1);

  }
  else
  {

  }
  v9 = (void *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_lastFirstResponder]);
  if (v9)
  {
    v10 = v9;
    if (objc_msgSend(v9, sel_canBecomeFirstResponder))
    {
      objc_msgSend(v10, sel_becomeFirstResponder);
      swift_unknownObjectWeakAssign();
    }

  }
}

id CanvasGenerationTool.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasGenerationTool();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CanvasGenerationTool()
{
  return type metadata accessor for CanvasGenerationTool();
}

uint64_t type metadata accessor for CanvasGenerationTool()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CanvasGenerationTool;
  if (!type metadata singleton initialization cache for CanvasGenerationTool)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for CanvasGenerationTool()
{
  unint64_t v0;

  type metadata accessor for CheckedContinuation<ImageWithEncodedRecipe, Error>?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for CheckedContinuation<ImageWithEncodedRecipe, Error>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  }
}

uint64_t CanvasGenerationTool.authenticate()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[15] = v0;
  type metadata accessor for MainActor();
  v1[16] = static MainActor.shared.getter();
  v1[17] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[18] = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, v0 + 56, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);

    if (*(_QWORD *)(v0 + 80))
    {
      outlined init with take of FindResult((__int128 *)(v0 + 56), v0 + 16);
      v4 = *(_QWORD *)(v0 + 40);
      v5 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v4);
      v9 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v5 + 8) + *(_QWORD *)(v5 + 8));
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v6;
      *v6 = v0;
      v6[1] = CanvasGenerationTool.authenticate();
      return v9(v4, v5);
    }
  }
  else
  {
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_QWORD *)(v0 + 88) = 0;
  }
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
  swift_allocError();
  *(_QWORD *)v8 = 0xD000000000000025;
  *(_QWORD *)(v8 + 8) = 0x80000001DDF59EA0;
  *(_BYTE *)(v8 + 16) = 0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 168));
}

{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasGenerationTool.authenticate()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 160) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 168) = a2;
    *(_QWORD *)(v6 + 176) = a1;
  }
  return swift_task_switch();
}

uint64_t destroy for ImageWithEncodedRecipe(uint64_t a1)
{

  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageWithEncodedRecipe(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v3;
  outlined copy of Data._Representation(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t assignWithCopy for ImageWithEncodedRecipe(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v8 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v8, v7);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v9, v10);
  return a1;
}

uint64_t assignWithTake for ImageWithEncodedRecipe(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageWithEncodedRecipe(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageWithEncodedRecipe(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageWithEncodedRecipe()
{
  return &type metadata for ImageWithEncodedRecipe;
}

uint64_t @objc closure #1 in CanvasGenerationTool.authenticate()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(void **)(*v3 + 24);
  v9 = *v3;
  swift_task_dealloc();

  if (v4)
  {
    v10 = _convertErrorToNSError(_:)();

    v11 = 0;
    v12 = (void *)v10;
  }
  else
  {
    v11 = MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
    v10 = 0;
    v12 = (void *)v11;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 40);
  v13[2](v13, v11, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t @objc closure #1 in CanvasGenerationTool.authenticate()()
{
  _QWORD *v0;
  void *v1;
  const void *v2;
  id v3;
  _QWORD *v4;

  v1 = (void *)v0[3];
  v2 = (const void *)v0[2];
  swift_release();
  v0[5] = _Block_copy(v2);
  v3 = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  *v4 = v0;
  v4[1] = @objc closure #1 in CanvasGenerationTool.authenticate();
  return CanvasGenerationTool.authenticate()();
}

uint64_t sub_1DDE60150()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in CanvasGenerationTool.authenticate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in CanvasGenerationTool.authenticate()
                                                   + async function pointer to @objc closure #1 in CanvasGenerationTool.authenticate()))(v2, v3);
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  type metadata accessor for ContinuousClock();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  dispatch thunk of Clock.now.getter();
  v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  MEMORY[0x1DF0E4E48](v0 + 5, v2, v4);
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v5;
  v5(v1, v2);
  v6 = (_QWORD *)swift_task_alloc();
  v0[13] = v6;
  *v6 = v0;
  v6[1] = specialized Clock.sleep(for:tolerance:);
  return dispatch thunk of Clock.sleep(until:tolerance:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError;
  if (!lazy protocol witness table cache variable for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MagicGenerativePlaygroundState.TransitionError, &type metadata for MagicGenerativePlaygroundState.TransitionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError);
  }
  return result;
}

uint64_t outlined consume of PaperAttachmentTextualContext?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.generateImageWithCheckedThrowingContinuation()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CanvasGenerationTool.generateImageWithCheckedThrowingContinuation()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDE6055C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = *((_QWORD *)v1 + 9);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(v7, v8, v9, v10, a1, v4, v5, v6, v11);
}

uint64_t outlined consume of CanvasMembers?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *outlined consume of ImageWithEncodedRecipe?(void *result, uint64_t a2, unint64_t a3)
{
  if (result)
  {

    return (void *)outlined consume of Data._Representation(a2, a3);
  }
  return result;
}

uint64_t partial apply for closure #3 in CanvasGenerationTool.generateImage(for:in:)(uint64_t a1)
{
  return partial apply for closure #3 in CanvasGenerationTool.generateImage(for:in:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))closure #3 in CanvasGenerationTool.generateImage(for:in:));
}

uint64_t sub_1DDE606D0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDE606F4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 40), *(id *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.generateImage(context:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  char v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(double *)(v1 + 64);
  v10 = *(double *)(v1 + 72);
  v11 = *(_BYTE *)(v1 + 56);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.generateImage(context:in:)(v9, v10, a1, v4, v5, v6, v7, v8, v11);
}

uint64_t sub_1DDE607E4()
{
  id *v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  _QWORD *v13;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  v9 = v1[7];
  v10 = *((_QWORD *)v1 + 8);
  v11 = v1[9];
  v12 = v1[10];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.generateImage(elementsImage:strokesImage:sketchComplexityMeasure:textPrompts:in:)(v9, v11, v12, a1, v4, v5, v6, v7, v8, v10);
}

uint64_t sub_1DDE608F0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.recreateImage(with:in:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.recreateImage(with:in:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.recreateMagicGenerativePlayground()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CanvasGenerationTool.recreateMagicGenerativePlayground()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.addCanvasElement(for:with:in:)(uint64_t a1)
{
  return partial apply for closure #3 in CanvasGenerationTool.generateImage(for:in:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))closure #1 in CanvasGenerationTool.addCanvasElement(for:with:in:));
}

uint64_t partial apply for closure #3 in CanvasGenerationTool.generateImage(for:in:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(double *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40));
}

unint64_t lazy protocol witness table accessor for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEB3D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>);
  }
  return result;
}

uint64_t sub_1DDE60A58()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

id specialized static CanvasGenerationTool.preload()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)generativeLogger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6 = v4;
    *(_DWORD *)v3 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000001DDF45150, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2864616F6C657270, 0xE900000000000029, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v1, v2, "%s - %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v4, -1, -1);
    MEMORY[0x1DF0E6558](v3, -1, -1);
  }

  return objc_msgSend((id)objc_opt_self(), sel_preload);
}

void specialized CanvasGenerationTool.init(coder:)()
{
  _BYTE *v0;
  _OWORD *v1;
  __int128 v2;
  char *v3;
  uint64_t v4;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack] = 0;
  v1 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance];
  v2 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *v1 = *MEMORY[0x1E0C9D628];
  v1[1] = v2;
  v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC] = 0;
  v3 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation];
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined copy of CanvasGenerationToolError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for CanvasGenerationToolError(uint64_t a1)
{
  return outlined consume of CanvasGenerationToolError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of CanvasGenerationToolError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CanvasGenerationToolError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CanvasGenerationToolError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CanvasGenerationToolError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CanvasGenerationToolError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CanvasGenerationToolError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CanvasGenerationToolError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CanvasGenerationToolError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasGenerationToolError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasGenerationToolError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CanvasGenerationToolError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for CanvasGenerationToolError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CanvasGenerationToolError()
{
  return &type metadata for CanvasGenerationToolError;
}

void (*ReflowTextView.spacingAdjustment.modify(_QWORD *a1))(_OWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int128 v7;
  __int128 v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  v3[11] = v4;
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 208);
  v6 = *(_WORD *)(v4 + 216);
  v7 = *(_OWORD *)(v4 + 176);
  v8 = *(_OWORD *)(v4 + 192);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 160);
  *((_OWORD *)v3 + 1) = v7;
  *((_OWORD *)v3 + 2) = v8;
  v3[6] = v5;
  *((_WORD *)v3 + 28) = v6;
  swift_retain();
  return ReflowTextView.spacingAdjustment.modify;
}

void ReflowTextView.spacingAdjustment.modify(_OWORD **a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 11);
  v4 = *((_QWORD *)*a1 + 6);
  v5 = *((_WORD *)*a1 + 28);
  v6 = (*a1)[1];
  v7 = (*a1)[2];
  *(_OWORD *)(v3 + 160) = **a1;
  *(_OWORD *)(v3 + 176) = v6;
  *(_OWORD *)(v3 + 192) = v7;
  *(_QWORD *)(v3 + 208) = v4;
  *(_WORD *)(v3 + 216) = v5;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
  }
  swift_release();
  free(v2);
}

void one-time initialization function for showDebugUI()
{
  id v0;
  void *v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001FLL, 0x80000001DDF5A4A0);
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  static ReflowTextView.showDebugUI = v2;
}

uint64_t closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(unint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  id v19;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_8;
  if (!(a1 >> 62))
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
      goto LABEL_4;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    aBlock[0] = 0;
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)aBlock, *(_QWORD *)(*(_QWORD *)(a4 + 64) + 40), &demangling cache variable for type metadata for ReflowTextView?);
    return swift_continuation_resume();
  }
LABEL_4:
  v13 = swift_allocObject();
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v13 + 16) = MEMORY[0x1E0DEE9D8];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v13 + 16;
  v16[3] = v15 + 16;
  v16[4] = a1;
  v16[5] = a3;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:);
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_22_2;
  v18 = _Block_copy(aBlock);
  v19 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_performAsCurrentTraitCollection_, v18);
  _Block_release(v18);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v11, 1, 1, v22);
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    v23 = static MainActor.shared.getter();
    v24 = (_QWORD *)swift_allocObject();
    v25 = MEMORY[0x1E0DF06E8];
    v24[2] = v23;
    v24[3] = v25;
    v24[4] = v15;
    v24[5] = v13;
    v24[6] = a4;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:), (uint64_t)v24);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t *a1, _QWORD *a2, unint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = specialized static ReflowLayoutManager.process(lines:in:)(a3, a4);
  v8 = v7;
  *a1 = v6;
  swift_bridgeObjectRelease();
  *a2 = v8;
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  v7 = type metadata accessor for PKStroke();
  v6[15] = v7;
  v6[16] = *(_QWORD *)(v7 - 8);
  v6[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  v6[18] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[19] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v0 + 128);
  if (v7)
  {
    v9 = v2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v12 = *(_QWORD *)(v0 + 144);
      v13 = *(_QWORD *)(v0 + 120);
      v11(v12, v9, v13);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v14(v12, 0, 1, v13);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v13) == 1)
        break;
      v15 = *(_QWORD *)(v0 + 136);
      v16 = *(_QWORD *)(v0 + 120);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 32))(v15, *(_QWORD *)(v0 + 144), v16);
      PKStroke.renderBounds.getter();
      v29.origin.x = v17;
      v29.origin.y = v18;
      v29.size.width = v19;
      v29.size.height = v20;
      v27.origin.x = x;
      v27.origin.y = y;
      v27.size.width = width;
      v27.size.height = height;
      v28 = CGRectUnion(v27, v29);
      x = v28.origin.x;
      y = v28.origin.y;
      width = v28.size.width;
      height = v28.size.height;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v16);
      v9 += v10;
      if (!--v7)
        goto LABEL_7;
    }
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v14(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 120));
  }
  v22 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v24 = *(_QWORD *)(v22 + 16);
  swift_beginAccess();
  v25 = *(_QWORD *)(v23 + 16);
  objc_allocWithZone((Class)type metadata accessor for ReflowTextView());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 88) = ReflowTextView.init(contents:frame:strokesToReflow:)(v24, v25, x, y, width, height);
  outlined init with take of (key: Int, value: AnyCRValue)?(v0 + 88, *(_QWORD *)(*(_QWORD *)(v21 + 64) + 40), &demangling cache variable for type metadata for ReflowTextView?);
  swift_continuation_resume();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CHReflowableTextLine]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);

  v2 = a2;
  v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CHReflowableTextLine);
    v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

char *ReflowTextView.init(contents:frame:strokesToReflow:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t i;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  id v20;
  objc_class *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  char *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  char *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  _OWORD v53[10];
  objc_super v54;

  v7 = v6;
  i = OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled) = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer) = 0;
  v15 = (char *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime);
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime) = 0;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) = 0;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep) = 0;
  type metadata accessor for ReflowLayoutManager();
  swift_allocObject();
  v16 = (uint64_t)(id)v7;
  v17 = ReflowLayoutManager.init(contents:frame:strokesToReflow:)(a1, a2, a3, a4, a5, a6);
  v18 = &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>;
  *(_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager) = v17;
  if (one-time initialization token for showDebugUI != -1)
LABEL_32:
    swift_once();
  v19 = (void *)v16;
  if (static ReflowTextView.showDebugUI == 1)
  {
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
    v19 = *(void **)(v7 + i);
    *(_QWORD *)(v7 + i) = v20;

  }
  v21 = (objc_class *)type metadata accessor for ReflowTextView();
  v54.receiver = (id)v16;
  v54.super_class = v21;
  v22 = (char *)objc_msgSendSuper2(&v54, sel_initWithFrame_, a3, a4, a5, a6);
  v23 = *(_QWORD *)&v22[v18[298]];
  swift_beginAccess();
  v18 = *(uint64_t **)(v23 + 88);
  v52 = (void *)v18[2];
  if (v52)
  {
    v51 = v18 + 4;
    v49 = v22;
    v24 = v22;
    swift_bridgeObjectRetain();
    v7 = 0;
    v50 = v18;
    while (1)
    {
      v25 = &v51[20 * v7];
      v26 = *((_OWORD *)v25 + 1);
      v53[0] = *(_OWORD *)v25;
      v53[1] = v26;
      v27 = *((_OWORD *)v25 + 2);
      v28 = *((_OWORD *)v25 + 3);
      v29 = *((_OWORD *)v25 + 5);
      v53[4] = *((_OWORD *)v25 + 4);
      v53[5] = v29;
      v53[2] = v27;
      v53[3] = v28;
      v30 = *((_OWORD *)v25 + 6);
      v31 = *((_OWORD *)v25 + 7);
      v32 = *((_OWORD *)v25 + 9);
      v53[8] = *((_OWORD *)v25 + 8);
      v53[9] = v32;
      v53[6] = v30;
      v53[7] = v31;
      v33 = *(_QWORD *)&v53[0];
      if (*(_QWORD *)&v53[0] >> 62)
      {
        if (*(uint64_t *)&v53[0] < 0)
          v18 = *(uint64_t **)&v53[0];
        else
          v18 = (uint64_t *)(*(_QWORD *)&v53[0] & 0xFFFFFFFFFFFFFF8);
        outlined retain of ReflowTextLine((uint64_t)v53);
        swift_bridgeObjectRetain();
        v16 = _CocoaArrayWrapper.endIndex.getter();
        if (!v16)
          goto LABEL_23;
      }
      else
      {
        v16 = *(_QWORD *)((*(_QWORD *)&v53[0] & 0xFFFFFFFFFFFFF8) + 0x10);
        outlined retain of ReflowTextLine((uint64_t)v53);
        swift_bridgeObjectRetain();
        if (!v16)
          goto LABEL_23;
      }
      if (v16 < 1)
      {
        __break(1u);
        goto LABEL_32;
      }
      for (i = 0; i != v16; ++i)
      {
        if ((v33 & 0xC000000000000001) != 0)
        {
          v34 = MEMORY[0x1DF0E4D64](i, v33);
        }
        else
        {
          v34 = *(_QWORD *)(v33 + 8 * i + 32);
          swift_retain();
        }
        v35 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 296))();
        if (v35)
        {
          v36 = (void *)v35;
          v37 = objc_msgSend(v24, sel_layer);
          objc_msgSend(v37, sel_addSublayer_, v36);

          if ((static ReflowTextView.showDebugUI & 1) != 0)
            objc_msgSend(v36, sel_setBorderWidth_, 1.0);
          swift_release();

        }
        else
        {
          swift_release();
        }
      }
LABEL_23:
      ++v7;
      swift_bridgeObjectRelease();
      outlined release of ReflowTextLine((uint64_t)v53);
      if ((void *)v7 == v52)
        goto LABEL_26;
      v18 = v50;
      if (v7 >= v50[2])
      {
        __break(1u);
LABEL_26:
        swift_bridgeObjectRelease();
        v22 = v49;
        goto LABEL_28;
      }
    }
  }
  v38 = v22;
LABEL_28:
  v39 = *(void **)&v22[OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer];
  if (v39)
  {
    v40 = v39;
    v41 = objc_msgSend(v22, sel_layer);
    objc_msgSend(v41, sel_addSublayer_, v40);

    v42 = objc_msgSend(v22, sel_layer);
    v43 = v22;
    v44 = objc_msgSend((id)objc_opt_self(), sel_blueColor);
    v45 = objc_msgSend(v44, sel_colorWithAlphaComponent_, 0.2);

    v46 = objc_msgSend(v45, sel_CGColor);
    objc_msgSend(v42, sel_setBorderColor_, v46);

    v22 = v43;
    v47 = objc_msgSend(v43, sel_layer);
    objc_msgSend(v47, sel_setBorderWidth_, 0.5);

  }
  return v22;
}

uint64_t ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for PKStroke();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  v4[10] = type metadata accessor for MainActor();
  v4[11] = static MainActor.shared.getter();
  v4[12] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v6;
  return swift_task_switch();
}

void ReflowTextView.addToCanvas(_:hasHiddenStrokes:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(_QWORD, uint64_t, _QWORD);
  uint64_t v34;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x2F8))();
  v4 = v3;
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  *(_QWORD *)(v0 + 112) = v6;

  if (v6)
  {
    v7 = *(_QWORD *)(v0 + 40);
    v8 = (void *)(*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 16)) + 0x320))();
    v9 = objc_msgSend(v8, sel_canvasView);

    objc_msgSend(v9, sel_cancelCurrentStroke);
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager) + 104);
    v11 = *(_QWORD *)(v10 + 16);
    v12 = MEMORY[0x1E0DEE9D8];
    if (v11)
    {
      v31 = v6;
      v13 = *(_QWORD *)(v0 + 56);
      v34 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
      v32 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v14 = v10 + v32;
      v15 = *(_QWORD *)(v13 + 72);
      v33 = *(void (**)(_QWORD, uint64_t, _QWORD))(v13 + 16);
      while (1)
      {
        v33(*(_QWORD *)(v0 + 64), v14, *(_QWORD *)(v0 + 48));
        isa = PKStroke._bridgeToObjectiveC()().super.isa;
        v17 = -[objc_class copyForMutation](isa, sel_copyForMutation);

        if (!v17)
          break;
        v18 = *(_QWORD *)(v0 + 64);
        v19 = *(_QWORD *)(v0 + 48);
        objc_msgSend(v17, sel__setHidden_, 1);
        v20 = v17;
        static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v18, v19);
        v12 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
          v12 = v34;
        }
        v22 = *(_QWORD *)(v12 + 16);
        v21 = *(_QWORD *)(v12 + 24);
        if (v22 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          v12 = v34;
        }
        v23 = *(_QWORD *)(v0 + 72);
        v24 = *(_QWORD *)(v0 + 48);
        *(_QWORD *)(v12 + 16) = v22 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v12 + v32 + v22 * v15, v23, v24);
        v34 = v12;
        v14 += v15;
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          v6 = v31;
          goto LABEL_11;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_11:
      *(_QWORD *)(v0 + 120) = v12;
      v26 = *(_QWORD *)(v0 + 32);
      v25 = *(_QWORD *)(v0 + 40);
      v28 = *(_QWORD *)(v0 + 16);
      v27 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 128) = static MainActor.shared.getter();
      v29 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v29;
      v29[2] = v28;
      v29[3] = v12;
      v29[4] = v6;
      v29[5] = v25;
      v29[6] = v27;
      v29[7] = v26;
      v30 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 144) = v30;
      *v30 = v0;
      v30[1] = ReflowTextView.addToCanvas(_:hasHiddenStrokes:);
      withCheckedContinuation<A>(isolation:function:_:)();
    }
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t ReflowTextView.addToCanvas(_:hasHiddenStrokes:)()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 112);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #2 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(uint64_t a1, _QWORD *a2, objc_class *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  PKDrawing *v22;
  void *v23;
  unint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  id v31;
  Class v32;
  id v33;
  Class isa;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v38 = a6;
  v39 = a7;
  v36 = a1;
  v37 = a5;
  isa = a3;
  v35 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v12 = (char *)&isa - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PKDrawing();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&isa - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x320))(v16);
  if (v19)
  {
    v20 = (void *)v19;
    type metadata accessor for PKStroke();
    isa = Array._bridgeToObjectiveC()().super.isa;
    v21 = objc_msgSend(v35, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    PKDrawing._bridgeToObjectiveC()(v22);
    v35 = v23;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&isa - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v8);
    v24 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v25 = (char *)swift_allocObject();
    v26 = v37;
    v27 = v38;
    *((_QWORD *)v25 + 2) = a2;
    *((_QWORD *)v25 + 3) = v26;
    v28 = v39;
    *((_QWORD *)v25 + 4) = v27;
    *((_QWORD *)v25 + 5) = v28;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v25[v24], v12, v8);
    aBlock[4] = partial apply for closure #1 in closure #2 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:);
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_55;
    v29 = _Block_copy(aBlock);
    v30 = a2;
    v31 = v26;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v27);
    swift_release();
    v32 = isa;
    v33 = v35;
    objc_msgSend(v20, sel__setAdditionalStrokes_inDrawing_completion_, isa, v35, v29);
    _Block_release(v29);

  }
}

void closure #1 in closure #2 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  id v6;
  id v7;
  double v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  BOOL v15;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t j;
  uint64_t v28;
  uint64_t k;
  uint64_t v30;
  uint64_t v31;
  CGAffineTransform v34;
  _QWORD v35[7];
  double v36;
  double v37;
  char v38;

  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, 100.0, 100.0);
  v7 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v7, sel_setAnchorPoint_, 0.0, 0.0);

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x5B8))(v35);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v35, (uint64_t)&v36, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  v8 = 1.0;
  if ((v38 & 1) == 0)
    v8 = sqrt(v36 * v36 + v37 * v37);
  v9 = objc_msgSend(v6, sel_layer, a4);
  CGAffineTransformMakeScale(&v34, v8, v8);
  objc_msgSend(v9, sel_setAffineTransform_, &v34);

  objc_msgSend(v6, sel_setFrame_, 0.0, 0.0, 100.0, 100.0);
  objc_msgSend(v6, sel_addSubview_, a2);
  objc_msgSend(a1, sel_addSubview_, v6);
  swift_unknownObjectWeakAssign();
  v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 80);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
      goto LABEL_5;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_5:
      if (v12 < 1)
      {
LABEL_44:
        __break(1u);
        return;
      }
      for (i = 0; i != v12; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x1DF0E4D64](i, v11);
        }
        else
        {
          v14 = *(_QWORD *)(v11 + 8 * i + 32);
          swift_retain();
        }
        if ((~*(_QWORD *)(v14 + 48) & 0x7FF0000000000000) != 0)
        {
          v15 = (~*(_QWORD *)(v14 + 56) & 0x7FF0000000000000) == 0
             || (~*(_QWORD *)(v14 + 64) & 0x7FF0000000000000) == 0;
          if (!v15 && (*(_QWORD *)(v14 + 72) & 0x7FF0000000000000) != 0x7FF0000000000000)
          {
            v17 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 296))();
            if (v17)
            {
              v18 = v17;
              objc_msgSend(v17, sel_setFrame_, *(double *)(v14 + 48), *(double *)(v14 + 56), *(double *)(v14 + 64), *(double *)(v14 + 72));

            }
          }
        }
        swift_release();
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *(_QWORD *)(v10 + 88);
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v20;
    v20 = v21;
    v23 = *(_QWORD *)(v19 + 16);
    if (v22 == v23)
      break;
    if (v22 >= v23)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v24 = *(_QWORD *)(v19 + 32 + 160 * v22);
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      v25 = _CocoaArrayWrapper.endIndex.getter();
      if (!v25)
        goto LABEL_23;
    }
    else
    {
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v25)
        goto LABEL_23;
    }
    if (v25 < 1)
      goto LABEL_43;
    v26 = (double)v22;
    if ((v24 & 0xC000000000000001) != 0)
    {
      for (j = 0; j != v25; ++j)
      {
        v28 = MEMORY[0x1DF0E4D64](j, v24);
        *(double *)(v28 + 128) = v26;
        swift_unknownObjectRelease();
      }
    }
    else
    {
      for (k = 0; k != v25; ++k)
      {
        v30 = *(_QWORD *)(v24 + 8 * k + 32);
        *(double *)(v30 + 128) = v26;
      }
    }
LABEL_23:
    swift_bridgeObjectRelease();
    v21 = v20 + 1;
    if (__OFADD__(v20, 1))
      goto LABEL_42;
  }
  v31 = swift_bridgeObjectRelease();
  if (a3)
    a3(v31);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  CheckedContinuation.resume(returning:)();

}

uint64_t ReflowTextView.weakBackpointer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer);
  }
  else
  {
    type metadata accessor for ReflowTextView.WeakBackpointer();
    v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id ReflowTextView.displayLink.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink);
  }
  else
  {
    v4 = ReflowTextView.weakBackpointer.getter();
    v5 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v4, sel_stepAnimation);
    swift_release();
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

Swift::Void __swiftcall ReflowTextView.startAnimating(endingIn:smoothstep:)(Swift::Double endingIn, Swift::Bool smoothstep)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;

  v3 = v2;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) & 1) == 0)
  {
    v12 = ReflowTextView.displayLink.getter();
    v13 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    objc_msgSend(v12, sel_addToRunLoop_forMode_, v13, *MEMORY[0x1E0C99860]);

    *(_BYTE *)(v3 + v11) = 1;
    Date.init()();
    Date.timeIntervalSinceReferenceDate.getter();
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v16 = v3 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime;
    *(_QWORD *)v16 = v15;
    *(_BYTE *)(v16 + 8) = 0;
  }
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  *(double *)(v3 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime) = v18 + endingIn;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep) = smoothstep;
}

Swift::Void __swiftcall ReflowTextView.stopAnimating()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  double *v10;
  uint64_t (*v11)(void);
  void *v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v0;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 80);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8)
      goto LABEL_14;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8)
      goto LABEL_14;
  }
  if (v8 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      v10 = (double *)MEMORY[0x1DF0E4D64](i, v7);
    }
    else
    {
      v10 = *(double **)(v7 + 8 * i + 32);
      swift_retain();
    }
    v11 = *(uint64_t (**)(void))(*(_QWORD *)v10 + 296);
    v12 = (void *)v11();
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, sel_setFrame_, v10[6], v10[7], v10[8], v10[9]);

    }
    v14 = (void *)v11();
    if (v14)
    {
      v16 = v14;
      LODWORD(v15) = 1.0;
      objc_msgSend(v14, sel_setOpacity_, v15);

    }
    swift_release();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  v17 = v26;
  v18 = ReflowTextView.displayLink.getter();
  v19 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  objc_msgSend(v18, sel_removeFromRunLoop_forMode_, v19, *MEMORY[0x1E0C99860]);

  *(_BYTE *)(v17 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) = 0;
  v20 = v17 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations;
  swift_beginAccess();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (v21)
  {
    v22 = *(_QWORD *)v20 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v23 = *(_QWORD *)(v2 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v24(v5, v22, v1);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      v22 += v23;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)v20 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in ReflowTextView.endOfAnimation()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) != 1)
    return CheckedContinuation.resume(returning:)();
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, a1, v4, v7);
  v10 = (unint64_t *)(a2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations);
  swift_beginAccess();
  v11 = *v10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
    *v10 = v11;
  }
  v14 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v11);
    *v10 = v11;
  }
  *(_QWORD *)(v11 + 16) = v14 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v14, v9, v4);
  return swift_endAccess();
}

Swift::Void __swiftcall ReflowTextView.stepAnimation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  void *v25;
  void *v26;
  double v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  void *v37;
  double v38;
  CGRect v39;
  CGRect v40;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled) == 1)
  {
    Date.init()();
    Date.timeIntervalSinceReferenceDate.getter();
    v8 = v7;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v9 = v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime;
    v10 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime);
    v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime + 8);
    *(double *)v9 = v8;
    *(_BYTE *)(v9 + 8) = 0;
    v12 = (void *)objc_opt_self();
    objc_msgSend(v12, sel_begin);
    objc_msgSend(v12, sel_setDisableActions_, 1);
    v13 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime);
    if (v13 <= v8)
    {
      ReflowTextView.stopAnimating()();
LABEL_39:
      objc_msgSend(v12, sel_commit);
      return;
    }
    v14 = v8 - v10;
    v15 = 0.0;
    if (v11)
      v14 = 0.0;
    v16 = fmin(v14 / (v13 - v8), 1.0);
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep) == 1)
    {
      if (v16 >= 0.0)
        v15 = v16;
      v16 = v15 * (v15 * 3.0) - v15 * (v15 * (v15 + v15));
    }
    v37 = v12;
    v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
    swift_beginAccess();
    v18 = *(_QWORD *)(v17 + 80);
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      if (v19)
        goto LABEL_11;
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v19)
      {
LABEL_11:
        if (v19 < 1)
        {
          __break(1u);
          return;
        }
        v20 = v17 + 160;
        swift_beginAccess();
        v21 = 0;
        v38 = 0.01;
        do
        {
          if ((v18 & 0xC000000000000001) != 0)
          {
            v24 = (double *)MEMORY[0x1DF0E4D64](v21, v18);
          }
          else
          {
            v24 = *(double **)(v18 + 8 * v21 + 32);
            swift_retain();
          }
          v25 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v24 + 296))();
          if (v25)
          {
            v26 = v25;
            v27 = v24[16] + v16 * (v24[10] - v24[16]);
            v24[16] = v27;
            if (*(_QWORD *)v20
              && (*(_BYTE *)(v17 + 217) & 1) != 0
              && vabdd_f64(v27, *(double *)(*(_QWORD *)v20 + 80)) < v38)
            {
              objc_msgSend(v25, sel_setFrame_, v24[6], v24[7], v24[8], v24[9]);
            }
            else
            {
              objc_msgSend(v25, sel_frame);
              v40.origin.x = 0.0;
              v40.origin.y = 0.0;
              v40.size.width = 0.0;
              v40.size.height = 0.0;
              if (CGRectEqualToRect(v39, v40))
              {
                v28 = objc_msgSend(v26, sel_setFrame_, v24[6], v24[7], v24[8], v24[9]);
                v24[16] = v24[10];
              }
              else
              {
                objc_msgSend(v26, sel_frame);
                v28 = objc_msgSend(v26, sel_setFrame_, (1.0 - v16) * v29 + v16 * v24[6], (1.0 - v16) * v30 + v16 * v24[7], (1.0 - v16) * v31 + v16 * v24[8], (1.0 - v16) * v32 + v16 * v24[9]);
              }
              (*(void (**)(id))(*(_QWORD *)v24 + 352))(v28);
              v33 = v24[16];
              v34 = vabdd_f64(v33, v24[10]);
              if (v34 < 0.5)
              {
                v22 = fmin((v34 + -0.2) / -0.2, 1.0);
                if (v22 < 0.0)
                  v22 = 0.0;
                v23 = v22 * (v22 * 3.0) - v22 * (v22 * (v22 + v22));
                *(float *)&v23 = v23;
              }
              else
              {
                v35 = fmin((vabdd_f64(v33, round(v33)) + -0.2) / -0.2, 1.0);
                if (v35 < 0.0)
                  v35 = 0.0;
                v36 = v35 * (v35 * 3.0) - v35 * (v35 * (v35 + v35));
                objc_msgSend(v26, sel_opacity);
                if (*(float *)&v23 > v36)
                  *(float *)&v23 = v36;
              }
              objc_msgSend(v26, sel_setOpacity_, v23);
            }

          }
          ++v21;
          swift_release();
        }
        while (v19 != v21);
      }
    }
    swift_bridgeObjectRelease();
    v12 = v37;
    goto LABEL_39;
  }
}

void ReflowTextView.caretRect(for:in:)(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  void *v3;
  double v7;
  double v8;
  id v9;
  id v10;
  double v11;
  CGRect v17;
  CGRect v18;

  objc_msgSend(v3, sel_convertPoint_fromCoordinateSpace_, a1);
  v9 = ReflowLayoutManager.closestPosition(to:)(v7, v8);
  v10 = v9;
  if (v9)
  {
    ReflowLayoutManager.caretRect(for:)((uint64_t)v9);
    objc_msgSend(v3, sel_convertRect_toCoordinateSpace_, a1);
    v18 = CGRectInset(v17, 0.0, -2.0);
    v11 = a3 + -2.0;
    __asm { FMOV            V2.2D, #4.0 }
    *(CGFloat *)&_Q2 = v18.origin.y;
  }
  else
  {
    _Q2 = 0uLL;
    v11 = 0.0;
    v18.size.height = 0.0;
  }
  *(_QWORD *)a2 = v10;
  *(double *)(a2 + 8) = v11;
  *(_OWORD *)(a2 + 16) = _Q2;
  *(CGFloat *)(a2 + 32) = v18.size.height;
}

void ReflowTextView.caretRect(for:lines:in:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  void *v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  __C::CGRect v24;
  CGRect v25;

  v4 = v3;
  objc_msgSend(v3, sel_convertPoint_fromCoordinateSpace_);
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  v13 = v12 + 88;
  swift_beginAccess();
  v14 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  a2 = *(_QWORD *)(v12 + 88);
  v15 = *(_QWORD *)(a2 + 16);
  if (v15 < a1 || (uint64_t)v15 < v14)
    goto LABEL_21;
  if (v14 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRelease();
    v19 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a2 + 32, a1, (2 * v14) | 1);
    goto LABEL_13;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v17 = swift_dynamicCastClass();
  if (!v17)
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v18 = *(_QWORD *)(v17 + 16);
  swift_release();
  if (v18 != v14 - a1)
    goto LABEL_23;
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
  }
LABEL_13:
  swift_bridgeObjectRelease();
  v20 = specialized ReflowLayoutManager.closestLine(to:lines:)(v19, v9, v11);
  v22 = v21;
  swift_release();
  if ((v22 & 1) != 0)
    v23 = 0;
  else
    v23 = v20;
  if ((v23 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v23 < *(_QWORD *)(*(_QWORD *)v13 + 16))
  {
    v24 = ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&v11, *(unint64_t *)&v9));
    objc_msgSend(v4, sel_convertRect_toCoordinateSpace_, a3, v24.origin.x, v24.origin.y, v24.size.width, v24.size.height);
    CGRectInset(v25, 0.0, -2.0);
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall ReflowTextView.lineDebug()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  float64x2_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  CGMutablePathRef v25;
  id v26;
  float64x2_t v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
    v3 = *(_QWORD *)(v2 + 112);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    v4 = v1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, sel_setSublayers_, isa);

    swift_beginAccess();
    v6 = *(_QWORD *)(v2 + 96);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = (double)v3 / 100.0;
      v9 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v10 = 32;
      do
      {
        v11 = *(float64x2_t *)(v6 + v10 + 16);
        v27[0] = *(float64x2_t *)(v6 + v10);
        v27[1] = v11;
        v12 = *(_OWORD *)(v6 + v10 + 32);
        v13 = *(_OWORD *)(v6 + v10 + 48);
        v14 = *(_OWORD *)(v6 + v10 + 80);
        v30 = *(_OWORD *)(v6 + v10 + 64);
        v31 = v14;
        v28 = v12;
        v29 = v13;
        v15 = *(_OWORD *)(v6 + v10 + 96);
        v16 = *(_OWORD *)(v6 + v10 + 112);
        v17 = *(_OWORD *)(v6 + v10 + 144);
        v34 = *(_OWORD *)(v6 + v10 + 128);
        v35 = v17;
        v33 = v16;
        v32 = v15;
        v18 = v28;
        v19 = v29;
        v20 = objc_allocWithZone(MEMORY[0x1E0CD2840]);
        outlined retain of ReflowTextLine((uint64_t)v27);
        v21 = objc_msgSend(v20, sel_init);
        objc_msgSend(v21, sel_setLineWidth_, 2.0);
        v22 = objc_msgSend(v9, sel_systemMintColor);
        v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.2);

        v24 = objc_msgSend(v23, sel_CGColor);
        objc_msgSend(v21, sel_setStrokeColor_, v24);

        objc_msgSend(v21, sel_setFillColor_, 0);
        v25 = closure #1 in ReflowTextView.lineDebug()(v27, v8);
        objc_msgSend(v21, sel_setPath_, v25);

        objc_msgSend(v4, sel_addSublayer_, v21);
        v26 = objc_msgSend(v9, sel_systemLightGrayColor);
        addLine #1 (_:color:) in ReflowTextView.lineDebug()(v26, v4, *(double *)&v18, *((double *)&v18 + 1), *(double *)&v19, *((double *)&v19 + 1), v8);

        outlined release of ReflowTextLine((uint64_t)v27);
        v10 += 160;
        --v7;
      }
      while (v7);

      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

CGMutablePathRef closure #1 in ReflowTextView.lineDebug()(float64x2_t *a1, double a2)
{
  CGMutablePathRef Mutable;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  CGAffineTransform transform;

  Mutable = CGPathCreateMutable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  v4 = swift_allocObject();
  v6 = a1[2];
  v5 = a1[3];
  *(_OWORD *)(v4 + 16) = xmmword_1DDF33AB0;
  *(float64x2_t *)(v4 + 32) = vaddq_f64(vmulq_n_f64(v5, a2), (float64x2_t)xmmword_1DDF45370);
  v7 = vsubq_f64(v5, v6);
  *(float64x2_t *)(v4 + 48) = vaddq_f64(vmulq_n_f64(vsubq_f64(v5, vmulq_n_f64(vdivq_f64(v7, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(vaddvq_f64(vmulq_f64(v7, v7)))), 0)), a1[1].f64[1])), a2), (float64x2_t)xmmword_1DDF45370);
  transform.a = 1.0;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = 1.0;
  transform.tx = 0.0;
  transform.ty = 0.0;
  CGMutablePathRef.addLines(between:transform:)((Swift::OpaquePointer)v4, &transform);
  swift_bridgeObjectRelease();
  return Mutable;
}

void addLine #1 (_:color:) in ReflowTextView.lineDebug()(void *a1, void *a2, double a3, double a4, double a5, double a6, double a7)
{
  id v14;
  CGMutablePathRef Mutable;
  uint64_t v16;
  id v17;
  CGAffineTransform transform;

  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
  objc_msgSend(v17, sel_setLineWidth_, 1.0);
  v14 = objc_msgSend(a1, sel_CGColor);
  objc_msgSend(v17, sel_setStrokeColor_, v14);

  objc_msgSend(v17, sel_setFillColor_, 0);
  Mutable = CGPathCreateMutable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
  *(double *)(v16 + 32) = a3 * a7;
  *(double *)(v16 + 40) = a4 * a7;
  *(double *)(v16 + 48) = a5 * a7;
  *(double *)(v16 + 56) = a6 * a7;
  transform.a = 1.0;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = 1.0;
  transform.tx = 0.0;
  transform.ty = 0.0;
  CGMutablePathRef.addLines(between:transform:)((Swift::OpaquePointer)v16, &transform);
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setPath_, Mutable);

  objc_msgSend(a2, sel_addSublayer_, v17);
}

id ReflowTextView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReflowTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ReflowTextView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ReflowTextView.WeakBackpointer()
{
  return objc_opt_self();
}

void partial apply for closure #2 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(a1, *(_QWORD **)(v1 + 16), *(objc_class **)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1DDE63D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 48) & ~v3), v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  closure #1 in closure #2 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_55()
{
  return swift_release();
}

uint64_t specialized static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 200) = a1;
  *(_QWORD *)(v4 + 208) = a2;
  *(double *)(v4 + 184) = a3;
  *(double *)(v4 + 192) = a4;
  v5 = type metadata accessor for PKDrawing();
  *(_QWORD *)(v4 + 216) = v5;
  *(_QWORD *)(v4 + 224) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 232) = swift_task_alloc();
  *(_QWORD *)(v4 + 240) = swift_task_alloc();
  *(_QWORD *)(v4 + 248) = type metadata accessor for MainActor();
  *(_QWORD *)(v4 + 256) = static MainActor.shared.getter();
  *(_QWORD *)(v4 + 264) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v4 + 272) = v6;
  return swift_task_switch();
}

uint64_t specialized static ReflowTextView.reflowTextView(at:strokes:in:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;

  v1 = v0[30];
  v2 = v0[28];
  v3 = v0[29];
  v4 = (void *)v0[26];
  v5 = v0[27];
  v6 = objc_msgSend(v4, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v5);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  v7 = (void *)v0[20];
  objc_msgSend(v7, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  v0[35] = v0[21];
  v0[36] = objc_msgSend(v4, sel_traitCollection);
  v8 = static MainActor.shared.getter();
  v0[37] = v8;
  if (v8)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  double *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;
  id v9;
  Class isa;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;
  id v15;

  v1 = (double *)v0;
  v2 = v0 + 22;
  v3 = (void *)v0[35];
  v4 = (void *)v0[36];
  v5 = (void *)v0[26];
  v7 = v1[23];
  v6 = v1[24];
  *((_QWORD *)v1 + 7) = v2;
  *((_QWORD *)v1 + 2) = v1;
  *((_QWORD *)v1 + 3) = specialized static ReflowTextView.reflowTextView(at:strokes:in:);
  v8 = swift_continuation_init();
  v9 = objc_msgSend(v5, sel_recognitionController);
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v4;
  v11[3] = v3;
  *((_QWORD *)v1 + 10) = MEMORY[0x1E0C809B0];
  v1 += 10;
  v11[4] = v8;
  *((_QWORD *)v1 + 4) = partial apply for closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:);
  *((_QWORD *)v1 + 5) = v11;
  *((_QWORD *)v1 + 1) = 1107296256;
  *((_QWORD *)v1 + 2) = thunk for @escaping @callee_guaranteed (@guaranteed [CHReflowableTextLine]?) -> ();
  *((_QWORD *)v1 + 3) = &block_descriptor_7_2;
  v12 = _Block_copy(v1);
  v13 = v4;
  v14 = v3;
  swift_release();
  v15 = objc_msgSend(v9, sel_reflowableLinesInitialStrokes_atLocation_completion_, isa, v12, v7, v6);
  _Block_release(v12);

  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 304) = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 280);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 304));
}

void specialized ReflowTextView.init(coder:)()
{
  _BYTE *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer] = 0;
  v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled] = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer] = 0;
  v1 = &v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime];
  *(_QWORD *)v1 = 0;
  v1[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink] = 0;
  v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations] = MEMORY[0x1E0DEE9D8];
  v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1DDE64378()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(unint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1DDE643B0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1DDE643D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(*(uint64_t **)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1DDE6440C()
{
  return swift_deallocObject();
}

uint64_t sub_1DDE6441C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(a1, v4, v5, v6, v7, v8);
}

_QWORD *specialized TiledPaperKitView.endPaperAttachment()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;

  v0 = TiledTextView.paperAttachments.getter();
  v1 = v0;
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2)
      goto LABEL_7;
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  v3 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
    v4 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v1);
  else
    v4 = *(id *)(v1 + 32);
  v5 = v4;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x570))() & 1) != 0)
    goto LABEL_12;

  if (v2 == 1)
    goto LABEL_7;
  v7 = v3 ? (_QWORD *)MEMORY[0x1DF0E4D64](1, v1) : *(id *)(v1 + 40);
  v5 = v7;
  if (((*(uint64_t (**)(void))((*v6 & *v7) + 0x570))() & 1) != 0)
  {
LABEL_12:
    swift_bridgeObjectRelease_n();
    return v5;
  }

  if (v2 == 2)
    goto LABEL_7;
  v9 = 6;
  while (1)
  {
    result = v3 ? (_QWORD *)MEMORY[0x1DF0E4D64](v9 - 4, v1) : *(id *)(v1 + 8 * v9);
    v5 = result;
    v10 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
      break;
    if (((*(uint64_t (**)(void))((*v6 & *result) + 0x570))() & 1) != 0)
      goto LABEL_12;

    ++v9;
    if (v10 == v2)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall TiledTextView.didMoveToWindow()()
{
  char *v0;
  char *v1;
  id v2;
  objc_class *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  id v10;
  objc_super v11;
  objc_super v12;

  v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for TiledTextView();
  objc_msgSendSuper2(&v12, sel_didMoveToWindow);
  v2 = objc_msgSend(v0, sel_window);

  if (v2)
  {
    v3 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TiledSelectionInteractionDelegate<TiledTextView>);
    v4 = objc_allocWithZone(v3);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v11.receiver = v4;
    v11.super_class = v3;
    v5 = objc_msgSendSuper2(&v11, sel_init);
    v6 = OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate;
    v7 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate];
    *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate] = v5;

    v8 = objc_msgSend(v1, sel_selectionInteraction);
    objc_msgSend(v8, sel_setDelegate_, *(_QWORD *)&v1[v6]);

    *(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = &protocol witness table for TiledTextView;
    swift_unknownObjectWeakAssign();
    v9 = v1;
    CanvasElementController.delegate.didset();

  }
  else
  {
    v10 = objc_msgSend(v0, sel_selectionInteraction);
    objc_msgSend(v10, sel_setDelegate_, 0);

    *(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = 0;
    swift_unknownObjectWeakAssign();
    CanvasElementController.delegate.didset();
  }
}

uint64_t TiledTextView.paperAttachments.getter()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  id v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];
  unint64_t v24;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_scrollView);
  if (v2)
  {
    v3 = v2;
    objc_opt_self();
    v4 = (void *)swift_dynamicCastObjCClass();
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, sel_textContainer);
      v7 = objc_msgSend(v6, sel_textLayoutManager);

      if (v7)
      {
        v24 = MEMORY[0x1E0DEE9D8];
        v8 = objc_msgSend(v5, sel_textStorage);
        v9 = objc_msgSend(v8, sel_length);

        MEMORY[0x1E0C80A78](v10, v11);
        v23[2] = &v24;
        UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v9, 0, 0, (uint64_t)partial apply for closure #1 in TiledTextView.paperAttachments.getter, (uint64_t)v23);

        return v24;
      }
    }

  }
  v13 = objc_msgSend(v1, sel_attachmentContainerView);
  v12 = MEMORY[0x1E0DEE9D8];
  if (!v13)
    goto LABEL_24;
  v14 = v13;
  v15 = objc_msgSend(v13, sel_subviews);

  type metadata accessor for UIView();
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v24 = v12;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v17 = result;
    if (result)
      goto LABEL_9;
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v17)
    {
LABEL_9:
      if (v17 < 1)
      {
        __break(1u);
        return result;
      }
      for (i = 0; i != v17; ++i)
      {
        if ((v16 & 0xC000000000000001) != 0)
          v20 = (id)MEMORY[0x1DF0E4D64](i, v16);
        else
          v20 = *(id *)(v16 + 8 * i + 32);
        v21 = v20;
        type metadata accessor for PaperTextAttachmentView();
        if (swift_dynamicCastClass())
        {
          MEMORY[0x1DF0E4398]();
          if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v12 = v24;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  v12 = MEMORY[0x1E0DEE9D8];
LABEL_23:
  swift_bridgeObjectRelease();
LABEL_24:
  if (!(v12 >> 62))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for AnyCanvas();
    swift_bridgeObjectRelease();
    return v12;
  }
  type metadata accessor for AnyCanvas();
  swift_bridgeObjectRetain();
  v22 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease_n();
  return v22;
}

uint64_t closure #1 in TiledTextView.paperAttachments.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v6;

  v6 = a1;
  MEMORY[0x1DF0E4398]();
  if (*(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

char *TiledTextView.paperAttachmentsIncludingSubAttachments.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *result;
  void *v17;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t (*v28)(uint64_t, uint64_t);
  id v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v33 = TiledTextView.paperAttachments.getter();
  v1 = objc_msgSend(v0, sel_scrollView);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v3 = v1;
    objc_opt_self();
    v4 = (void *)swift_dynamicCastObjCClass();
    if (v4
      && (v5 = v4,
          v6 = objc_msgSend(v4, sel_textContainer),
          v7 = objc_msgSend(v6, sel_textLayoutManager),
          v7,
          v6,
          v7))
    {
      v39 = v2;
      v8 = objc_msgSend(v5, sel_textStorage);
      v9 = objc_msgSend(v8, sel_length);

      MEMORY[0x1E0C80A78](v10, v11);
      v32[2] = &v39;
      UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v9, 0, 0, (uint64_t)partial apply for closure #1 in TiledTextView.paperDocumentAttachments.getter, (uint64_t)v32);

      v12 = v39;
    }
    else
    {

      v12 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v40 = v2;
  if (!(v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_9;
LABEL_24:
    swift_bridgeObjectRelease_n();
    v31 = MEMORY[0x1E0DEE9D8];
LABEL_25:
    v40 = v33;
    specialized Array.append<A>(contentsOf:)(v31);
    return (char *)v40;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13)
    goto LABEL_24;
LABEL_9:
  v14 = 0;
  v36 = v12;
  v37 = v12 & 0xC000000000000001;
  v34 = v12 + 32;
  v35 = v13;
  while (1)
  {
    if (v37)
      result = (char *)MEMORY[0x1DF0E4D64](v14, v12);
    else
      result = (char *)*(id *)(v34 + 8 * v14);
    v17 = result;
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    v19 = *(char **)&result[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
    if (!v19)
      break;
    v20 = &v19[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments];
    swift_beginAccess();
    v21 = *(_QWORD *)v20;
    v38 = v2;
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v23 = v19;
      swift_bridgeObjectRetain();
      v24 = (uint64_t *)(v21 + 40);
      do
      {
        v25 = (void *)*(v24 - 1);
        v26 = *v24;
        ObjectType = swift_getObjectType();
        v28 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 104);
        v29 = v25;
        v30 = v28(ObjectType, v26);

        specialized Array.append<A>(contentsOf:)(v30);
        v24 += 2;
        --v22;
      }
      while (v22);

      swift_bridgeObjectRelease();
      v15 = v38;
      v2 = MEMORY[0x1E0DEE9D8];
      v13 = v35;
      v12 = v36;
    }
    else
    {

      v15 = v2;
    }
    specialized Array.append<A>(contentsOf:)(v15);
    if (v14 == v13)
    {
      swift_bridgeObjectRelease_n();
      v31 = v40;
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

void TiledTextView.linedPaper.setter(void *a1)
{
  char *v1;
  void *v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;

  v2 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper] = a1;
  v17 = a1;
  if (!v2)
    goto LABEL_5;
  v3 = v2;
  objc_msgSend(v3, sel_lineSpacing);
  if (v4 > 0.0)
  {

    goto LABEL_7;
  }
  objc_msgSend(v3, sel_lineSpacing);
  v6 = v5;

  if (v6 <= 0.0)
  {
LABEL_5:
    objc_msgSend(v17, sel_lineSpacing);
    if (v7 <= 0.0)
    {
      objc_msgSend(v17, sel_lineSpacing);
      if (v8 <= 0.0)
        goto LABEL_18;
    }
  }
LABEL_7:
  v9 = TiledTextView.paperAttachments.getter();
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_9;
LABEL_16:
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v1, sel_standInAttachmentView);
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, sel_attachmentContainerView);

      objc_msgSend(v16, sel_setNeedsLayout);
    }
LABEL_18:

    return;
  }
  v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10)
    goto LABEL_16;
LABEL_9:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1DF0E4D64](i, v9);
      else
        v12 = *(id *)(v9 + 8 * i + 32);
      v13 = v12;
      objc_msgSend(v12, sel_setNeedsLayout);

    }
    goto LABEL_16;
  }
  __break(1u);
}

id TiledTextView.init(coder:)(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  objc_super v8;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper] = 0;
  v3 = OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController;
  v4 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, sel_init);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate] = 0;

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for TiledTextView();
  v6 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);

  return v6;
}

id TiledTextView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TiledTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TiledTextView()
{
  return objc_opt_self();
}

uint64_t protocol witness for TiledPaperKitView.currentPaperView.getter in conformance TiledTextView()
{
  uint64_t v0;

  return MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView);
}

void protocol witness for TiledPaperKitView.currentPaperView.setter in conformance TiledTextView(void *a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView + 8) = a2;
  swift_unknownObjectWeakAssign();

}

id protocol witness for TiledPaperKitView.canvasElementController.getter in conformance TiledTextView()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController);
}

void *protocol witness for CanvasElementControllerDelegate.canvasElementControllerCanvasForInsertion.getter in conformance TiledTextView()
{
  void *result;

  result = specialized TiledPaperKitView.mostVisibleAttachment()();
  if (!result)
  {
    result = specialized TiledPaperKitView.endPaperAttachment()();
    if (!result)
      return (void *)specialized TiledPaperKitView.visibleStandInPaperAttachmentView()();
  }
  return result;
}

uint64_t partial apply for closure #1 in TiledTextView.paperAttachments.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in TiledTextView.paperAttachments.getter(a1, a2, a3, a4, *(_QWORD **)(v4 + 16));
}

id specialized TiledTextView.init(in:sixChannelBlending:defaultDrawing:readOnly:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char *v4;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t ObjCClassFromMetadata;
  objc_super v13;

  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper] = 0;
  v8 = OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController;
  v9 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  v10 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v9, sel_init);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate] = 0;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v13.receiver = v10;
  v13.super_class = (Class)type metadata accessor for TiledTextView();
  return objc_msgSendSuper2(&v13, sel_initInScrollView_sixChannelBlending_defaultDrawingClass_readOnly_, a1, a2 & 1, ObjCClassFromMetadata, a4 & 1);
}

uint64_t type metadata completion function for SecureHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t SecureHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = specialized SecureHostingController.__allocating_init(rootView:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + class metadata base offset for SecureHostingController)
                                              - 8)
                                  + 8))(a1);
  return v3;
}

uint64_t @objc SecureHostingController._canShowWhileLocked()()
{
  return 1;
}

void *SecureHostingController.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return SecureHostingController.init(coder:rootView:)(a1, a2);
}

void *SecureHostingController.init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  void *v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  uint64_t v12;

  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + class metadata base offset for SecureHostingController);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v12 - v7, v6);
  v8 = (void *)UIHostingController.init(coder:rootView:)();
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10 = v8;
  v9(a2, v4);
  if (v8)

  return v8;
}

id SecureHostingController.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc SecureHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return SecureHostingController.init(coder:)(a3);
}

uint64_t type metadata accessor for SecureHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureHostingController);
}

uint64_t specialized SecureHostingController.init(rootView:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v2 + 16))((char *)&v5 - v3, v1);
  return UIHostingController.init(rootView:)();
}

uint64_t specialized SecureHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return specialized SecureHostingController.init(rootView:)(a1);
}

uint64_t ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)(v8 + 728) = v7;
  *(_QWORD *)(v8 + 720) = a7;
  *(_QWORD *)(v8 + 712) = a6;
  *(_QWORD *)(v8 + 704) = a5;
  *(_QWORD *)(v8 + 696) = a4;
  *(_QWORD *)(v8 + 688) = a2;
  *(_QWORD *)(v8 + 680) = a1;
  v10 = type metadata accessor for PKDrawing();
  *(_QWORD *)(v8 + 736) = v10;
  *(_QWORD *)(v8 + 744) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 752) = swift_task_alloc();
  *(_QWORD *)(v8 + 760) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  *(_QWORD *)(v8 + 768) = swift_task_alloc();
  *(_QWORD *)(v8 + 776) = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(_QWORD *)(v8 + 784) = v11;
  *(_QWORD *)(v8 + 792) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 800) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)(v8 + 808) = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  *(_QWORD *)(v8 + 816) = v12;
  *(_QWORD *)(v8 + 824) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 832) = swift_task_alloc();
  v13 = type metadata accessor for CRKeyPath();
  *(_QWORD *)(v8 + 840) = v13;
  *(_QWORD *)(v8 + 848) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 856) = swift_task_alloc();
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  *(_QWORD *)(v8 + 864) = v14;
  *(_QWORD *)(v8 + 872) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 880) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  *(_QWORD *)(v8 + 888) = swift_task_alloc();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  *(_QWORD *)(v8 + 896) = v15;
  *(_QWORD *)(v8 + 904) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 912) = swift_task_alloc();
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  *(_QWORD *)(v8 + 920) = v16;
  *(_QWORD *)(v8 + 928) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v8 + 936) = swift_task_alloc();
  v17 = a3[3];
  *(_OWORD *)(v8 + 48) = a3[2];
  *(_OWORD *)(v8 + 64) = v17;
  *(_OWORD *)(v8 + 75) = *(_OWORD *)((char *)a3 + 59);
  v18 = a3[1];
  *(_OWORD *)(v8 + 16) = *a3;
  *(_OWORD *)(v8 + 32) = v18;
  return swift_task_switch();
}

uint64_t ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CGContext *v5;
  uint64_t v6;
  double (*v7)(uint64_t, uint64_t);
  double Width;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat MinX;
  CGFloat MinY;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CGContext *v19;
  CGAffineTransform *v20;
  uint64_t v21;
  uint64_t v22;
  CGContext *v23;
  CGFloat v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat x;
  CGFloat y;
  CGFloat v47;
  CGFloat height;
  void *v49;
  void *v50;
  double (*v51)(uint64_t, uint64_t);
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  double v72;
  CGFloat v73;
  double v74;
  CGFloat v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  objc_class *v92;
  id v93;
  id v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  id v108;
  _QWORD *v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 recta;
  CGFloat rectb;
  _QWORD *rect;
  char rectc;
  uint64_t (*rectd)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  __int128 v123;
  CGFloat v124;
  uint64_t v125;
  double (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  CGAffineTransform v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect ClipBoundingBox;
  CGRect v136;
  CGRect v137;

  v112 = v0 + 16;
  v1 = *(_QWORD *)(v0 + 712);
  CGContextSaveGState(*(CGContextRef *)(v0 + 680));
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v21 = *(_QWORD *)(v0 + 712);
    v22 = *(_QWORD *)(v0 + 696);
    v23 = *(CGContext **)(v0 + 680);
    v24 = (*(double (**)(uint64_t))(v2 + 32))(v22);
    v25 = (*(double (**)(uint64_t, uint64_t))(v21 + 40))(v22, v21);
    v27 = v26;
    v124 = v28;
    rectb = v29;
    CGAffineTransformMakeRotation(&v128, v24);
    a = v128.a;
    b = v128.b;
    c = v128.c;
    d = v128.d;
    tx = v128.tx;
    ty = v128.ty;
    *(CGFloat *)(v0 + 464) = v128.a;
    *(CGFloat *)(v0 + 472) = b;
    *(CGFloat *)(v0 + 480) = c;
    *(CGFloat *)(v0 + 488) = d;
    *(CGFloat *)(v0 + 496) = tx;
    *(CGFloat *)(v0 + 504) = ty;
    v133.origin.x = v25;
    v133.origin.y = v27;
    v133.size.width = v124;
    v133.size.height = rectb;
    v134 = CGRectApplyAffineTransform(v133, (CGAffineTransform *)(v0 + 464));
    CGAffineTransformMakeTranslation(&v128, v25 - v134.origin.x, v27 - v134.origin.y);
    v36 = *(_OWORD *)&v128.a;
    v37 = *(_OWORD *)&v128.c;
    v38 = *(_OWORD *)&v128.tx;
    *(CGFloat *)(v0 + 416) = a;
    *(CGFloat *)(v0 + 424) = b;
    *(CGFloat *)(v0 + 432) = c;
    *(CGFloat *)(v0 + 440) = d;
    *(CGFloat *)(v0 + 448) = tx;
    *(CGFloat *)(v0 + 456) = ty;
    *(_OWORD *)(v0 + 320) = v36;
    *(_OWORD *)(v0 + 336) = v37;
    *(_OWORD *)(v0 + 352) = v38;
    CGAffineTransformConcat(&v128, (CGAffineTransform *)(v0 + 416), (CGAffineTransform *)(v0 + 320));
    v39 = *(_OWORD *)&v128.c;
    v40 = *(_OWORD *)&v128.tx;
    *(_OWORD *)(v0 + 368) = *(_OWORD *)&v128.a;
    *(_OWORD *)(v0 + 384) = v39;
    *(_OWORD *)(v0 + 400) = v40;
    v19 = v23;
    v20 = (CGAffineTransform *)(v0 + 368);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 712);
    v4 = *(_QWORD *)(v0 + 696);
    v5 = *(CGContext **)(v0 + 680);
    v6 = *(_QWORD *)(v2 + 8);
    v7 = *(double (**)(uint64_t, uint64_t))(v6 + 8);
    v129.origin.x = v7(v4, v6);
    Width = CGRectGetWidth(v129);
    v130.origin.x = (*(double (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3);
    v9 = CGRectGetWidth(v130);
    CGAffineTransformMakeScale(&v128, Width / v9, Width / v9);
    recta = *(_OWORD *)&v128.c;
    v123 = *(_OWORD *)&v128.a;
    v10 = v128.tx;
    v11 = v128.ty;
    v131.origin.x = v7(v4, v6);
    MinX = CGRectGetMinX(v131);
    v132.origin.x = v7(v4, v6);
    MinY = CGRectGetMinY(v132);
    CGAffineTransformMakeTranslation(&v128, MinX, MinY);
    v14 = *(_OWORD *)&v128.a;
    v15 = *(_OWORD *)&v128.c;
    v16 = *(_OWORD *)&v128.tx;
    *(_OWORD *)(v0 + 176) = v123;
    *(_OWORD *)(v0 + 192) = recta;
    *(CGFloat *)(v0 + 208) = v10;
    *(CGFloat *)(v0 + 216) = v11;
    *(_OWORD *)(v0 + 224) = v14;
    *(_OWORD *)(v0 + 240) = v15;
    *(_OWORD *)(v0 + 256) = v16;
    CGAffineTransformConcat(&v128, (CGAffineTransform *)(v0 + 176), (CGAffineTransform *)(v0 + 224));
    v17 = *(_OWORD *)&v128.c;
    v18 = *(_OWORD *)&v128.tx;
    *(_OWORD *)(v0 + 272) = *(_OWORD *)&v128.a;
    *(_OWORD *)(v0 + 288) = v17;
    *(_OWORD *)(v0 + 304) = v18;
    v19 = v5;
    v20 = (CGAffineTransform *)(v0 + 272);
  }
  CGContextConcatCTM(v19, v20);
  v41 = *(_QWORD *)(v0 + 912);
  v110 = *(_QWORD *)(v0 + 904);
  v42 = *(_QWORD *)(v0 + 896);
  v114 = *(_QWORD *)(v0 + 888);
  v116 = *(_QWORD *)(v0 + 872);
  v125 = *(_QWORD *)(v0 + 864);
  v43 = *(_QWORD *)(v0 + 712);
  v44 = *(_QWORD *)(v0 + 696);
  ClipBoundingBox = CGContextGetClipBoundingBox((CGContextRef)*(_QWORD *)(v0 + 680));
  x = ClipBoundingBox.origin.x;
  y = ClipBoundingBox.origin.y;
  v47 = ClipBoundingBox.size.width;
  height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 944) = ClipBoundingBox;
  *(_BYTE *)(v0 + 91) = *(_BYTE *)(v0 + 16);
  *(_BYTE *)(v0 + 92) = *(_BYTE *)(v0 + 17);
  *(_BYTE *)(v0 + 93) = *(_BYTE *)(v0 + 18);
  v49 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 976) = v49;
  v50 = *(void **)(v0 + 80);
  *(_QWORD *)(v0 + 984) = v50;
  *(_BYTE *)(v0 + 94) = *(_BYTE *)(v0 + 88);
  *(_BYTE *)(v0 + 95) = *(_BYTE *)(v0 + 89);
  *(_BYTE *)(v0 + 171) = *(_BYTE *)(v0 + 90);
  v51 = *(double (**)(uint64_t, uint64_t))(v43 + 16);
  *(_QWORD *)(v0 + 992) = v51;
  outlined retain of PaperRenderableOptions(v112);
  v52 = v50;
  v53 = v49;
  *(double *)(v0 + 1000) = v51(v44, v43);
  *(_QWORD *)(v0 + 1008) = v54;
  *(_QWORD *)(v0 + 1016) = v55;
  *(_QWORD *)(v0 + 1024) = v56;
  (*(void (**)(uint64_t, uint64_t))(v43 + 72))(v44, v43);
  CROrderedSet.makeIterator()();
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v41, v42);
  CROrderedSet.Iterator.next()();
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  *(_QWORD *)(v0 + 1032) = v57;
  if (v57(v114, 1, v125) == 1)
  {
LABEL_8:
    v79 = *(void **)(v0 + 984);
    v80 = *(void **)(v0 + 976);
    v81 = *(_QWORD *)(v0 + 824);
    v82 = *(_QWORD *)(v0 + 816);
    v83 = *(_QWORD *)(v0 + 808);
    v84 = *(_QWORD *)(v0 + 712);
    v85 = *(_QWORD *)(v0 + 696);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 928) + 8))(*(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 920));

    (*(void (**)(uint64_t, uint64_t))(v84 + 48))(v85, v84);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v83, 1, v82) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 808), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v86 = *(void **)(v0 + 984);
      v87 = *(void **)(v0 + 976);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v89 = *(_QWORD *)(v0 + 800);
      v90 = *(_QWORD *)(v0 + 792);
      v91 = *(_QWORD *)(v0 + 784);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 824) + 32))(*(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 816));
      type metadata accessor for Capsule();
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v92 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v93 = objc_allocWithZone(v92);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))((uint64_t)v93 + OBJC_IVAR___PKDrawingCoherence_model, v89, v91);
      *(_QWORD *)(v0 + 664) = v93;
      *(_QWORD *)(v0 + 672) = v92;
      v94 = objc_msgSendSuper2((objc_super *)(v0 + 664), sel_init);
      *(_QWORD *)(v0 + 1056) = v94;
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
      v95 = swift_task_alloc();
      *(_QWORD *)(v0 + 1064) = v95;
      *(_QWORD *)v95 = v0;
      *(_QWORD *)(v95 + 8) = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v96 = *(_OWORD *)(v0 + 944);
      v97 = *(_OWORD *)(v0 + 960);
      *(_QWORD *)(v95 + 96) = *(_QWORD *)(v0 + 680);
      *(_QWORD *)(v95 + 104) = v112;
      *(_OWORD *)(v95 + 64) = v96;
      *(_OWORD *)(v95 + 80) = v97;
      *(_QWORD *)(v95 + 56) = v94;
      return swift_task_switch();
    }
  }
  else
  {
    rect = (_QWORD *)(v0 + 512);
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(*(_QWORD *)(v0 + 872) + 32);
    *(CGFloat *)(v0 + 632) = x;
    *(CGFloat *)(v0 + 640) = y;
    *(CGFloat *)(v0 + 648) = v47;
    *(CGFloat *)(v0 + 656) = height;
    while (1)
    {
      v58 = *(double *)(v0 + 632);
      v59 = *(double *)(v0 + 640);
      v60 = *(double *)(v0 + 648);
      v61 = *(double *)(v0 + 656);
      v126 = *(double (**)(uint64_t, uint64_t))(v0 + 992);
      v62 = *(_QWORD *)(v0 + 712);
      v63 = *(_QWORD *)(v0 + 696);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1040))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 864));
      SharedTagged_9.subscript.getter();
      v64 = *(_QWORD *)(v0 + 536);
      v65 = *(_QWORD *)(v0 + 544);
      __swift_project_boxed_opaque_existential_1(rect, v64);
      *(double *)(v0 + 592) = v126(v63, v62);
      *(_QWORD *)(v0 + 600) = v66;
      *(_QWORD *)(v0 + 608) = v67;
      *(_QWORD *)(v0 + 616) = v68;
      *(_BYTE *)(v0 + 624) = 0;
      v69 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v65 + 112))(v0 + 592, v64, v65);
      v71 = v70;
      v73 = v72;
      v75 = v74;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)rect);
      v136.origin.x = v69;
      v136.origin.y = v71;
      v136.size.width = v73;
      v136.size.height = v75;
      v137.origin.x = v58;
      v137.origin.y = v59;
      v137.size.width = v60;
      v137.size.height = v61;
      if (CGRectIntersectsRect(v136, v137))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 872) + 8))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 864));
      v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
      v77 = *(_QWORD *)(v0 + 888);
      v78 = *(_QWORD *)(v0 + 864);
      CROrderedSet.Iterator.next()();
      if (v76(v77, 1, v78) == 1)
        goto LABEL_8;
    }
    v98 = *(_QWORD *)(v0 + 1024);
    v99 = *(_QWORD *)(v0 + 1016);
    v113 = *(_OWORD *)(v0 + 1000);
    rectc = *(_BYTE *)(v0 + 171);
    v117 = *(_BYTE *)(v0 + 95);
    v115 = *(_BYTE *)(v0 + 94);
    v100 = *(void **)(v0 + 984);
    v101 = *(void **)(v0 + 976);
    v111 = *(_BYTE *)(v0 + 93);
    v102 = *(_BYTE *)(v0 + 92);
    v103 = *(_BYTE *)(v0 + 91);
    v104 = *(_QWORD *)(v0 + 864);
    SharedTagged_9.subscript.getter();
    v127 = *(_QWORD *)(v0 + 576);
    v105 = *(_QWORD *)(v0 + 584);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 552), v127);
    MEMORY[0x1DF0E3408](v104);
    *(_BYTE *)(v0 + 96) = v103;
    *(_BYTE *)(v0 + 97) = v102;
    *(_BYTE *)(v0 + 98) = v111;
    *(_QWORD *)(v0 + 104) = v101;
    *(_BYTE *)(v0 + 112) = 0;
    *(_OWORD *)(v0 + 120) = v113;
    *(_QWORD *)(v0 + 136) = v99;
    *(_QWORD *)(v0 + 144) = v98;
    *(_BYTE *)(v0 + 152) = 0;
    *(_QWORD *)(v0 + 160) = v100;
    *(_BYTE *)(v0 + 168) = v115;
    *(_BYTE *)(v0 + 169) = v117;
    *(_BYTE *)(v0 + 170) = rectc;
    v106 = *(_QWORD *)(v105 + 8);
    rectd = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v106 + 16) + *(_QWORD *)(v106 + 16));
    v107 = v101;
    v108 = v100;
    v109 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1048) = v109;
    *v109 = v0;
    v109[1] = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return rectd(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 688), v0 + 96, *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 720), v127, v106);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(*(_QWORD *)v0 + 984);
  v2 = *(void **)(*(_QWORD *)v0 + 976);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 856);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 848);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 840);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  objc_class *v38;
  id v39;
  id v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  _QWORD *v56;
  char v57;
  __int128 v58;
  char v59;
  char v60;
  _QWORD *v61;
  char v62;
  uint64_t (*v63)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  double (*v64)(uint64_t, uint64_t);
  CGRect v65;
  CGRect v66;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 872) + 8))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 864));
  __swift_destroy_boxed_opaque_existential_1(v0 + 552);
  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 864);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_5:
    v25 = *(void **)(v0 + 984);
    v26 = *(void **)(v0 + 976);
    v27 = *(_QWORD *)(v0 + 824);
    v28 = *(_QWORD *)(v0 + 816);
    v29 = *(_QWORD *)(v0 + 808);
    v30 = *(_QWORD *)(v0 + 712);
    v31 = *(_QWORD *)(v0 + 696);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 928) + 8))(*(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 920));

    (*(void (**)(uint64_t, uint64_t))(v30 + 48))(v31, v30);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v29, 1, v28) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 808), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v32 = *(void **)(v0 + 984);
      v33 = *(void **)(v0 + 976);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v35 = *(_QWORD *)(v0 + 800);
      v36 = *(_QWORD *)(v0 + 792);
      v37 = *(_QWORD *)(v0 + 784);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 824) + 32))(*(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 816));
      type metadata accessor for Capsule();
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v38 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v39 = objc_allocWithZone(v38);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))((uint64_t)v39 + OBJC_IVAR___PKDrawingCoherence_model, v35, v37);
      *(_QWORD *)(v0 + 664) = v39;
      *(_QWORD *)(v0 + 672) = v38;
      v40 = objc_msgSendSuper2((objc_super *)(v0 + 664), sel_init);
      *(_QWORD *)(v0 + 1056) = v40;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      v41 = swift_task_alloc();
      *(_QWORD *)(v0 + 1064) = v41;
      *(_QWORD *)v41 = v0;
      *(_QWORD *)(v41 + 8) = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v42 = *(_OWORD *)(v0 + 944);
      v43 = *(_OWORD *)(v0 + 960);
      *(_QWORD *)(v41 + 96) = *(_QWORD *)(v0 + 680);
      *(_QWORD *)(v41 + 104) = v0 + 16;
      *(_OWORD *)(v41 + 64) = v42;
      *(_OWORD *)(v41 + 80) = v43;
      *(_QWORD *)(v41 + 56) = v40;
      return swift_task_switch();
    }
  }
  else
  {
    v61 = (_QWORD *)(v0 + 512);
    while (1)
    {
      v4 = *(double *)(v0 + 632);
      v5 = *(double *)(v0 + 640);
      v6 = *(double *)(v0 + 648);
      v7 = *(double *)(v0 + 656);
      v64 = *(double (**)(uint64_t, uint64_t))(v0 + 992);
      v8 = *(_QWORD *)(v0 + 712);
      v9 = *(_QWORD *)(v0 + 696);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1040))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 864));
      SharedTagged_9.subscript.getter();
      v10 = *(_QWORD *)(v0 + 536);
      v11 = *(_QWORD *)(v0 + 544);
      __swift_project_boxed_opaque_existential_1(v61, v10);
      *(double *)(v0 + 592) = v64(v9, v8);
      *(_QWORD *)(v0 + 600) = v12;
      *(_QWORD *)(v0 + 608) = v13;
      *(_QWORD *)(v0 + 616) = v14;
      *(_BYTE *)(v0 + 624) = 0;
      v15 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v11 + 112))(v0 + 592, v10, v11);
      v17 = v16;
      v19 = v18;
      v21 = v20;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
      v65.origin.x = v15;
      v65.origin.y = v17;
      v65.size.width = v19;
      v65.size.height = v21;
      v66.origin.x = v4;
      v66.origin.y = v5;
      v66.size.width = v6;
      v66.size.height = v7;
      if (CGRectIntersectsRect(v65, v66))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 872) + 8))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 864));
      v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
      v23 = *(_QWORD *)(v0 + 888);
      v24 = *(_QWORD *)(v0 + 864);
      CROrderedSet.Iterator.next()();
      if (v22(v23, 1, v24) == 1)
        goto LABEL_5;
    }
    v44 = *(_QWORD *)(v0 + 1024);
    v45 = *(_QWORD *)(v0 + 1016);
    v58 = *(_OWORD *)(v0 + 1000);
    v62 = *(_BYTE *)(v0 + 171);
    v60 = *(_BYTE *)(v0 + 95);
    v59 = *(_BYTE *)(v0 + 94);
    v46 = *(void **)(v0 + 984);
    v47 = *(void **)(v0 + 976);
    v57 = *(_BYTE *)(v0 + 93);
    v48 = *(_BYTE *)(v0 + 92);
    v49 = *(_BYTE *)(v0 + 91);
    v50 = *(_QWORD *)(v0 + 864);
    SharedTagged_9.subscript.getter();
    v51 = *(_QWORD *)(v0 + 584);
    v52 = *(_QWORD *)(v0 + 576);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 552), v52);
    MEMORY[0x1DF0E3408](v50);
    *(_BYTE *)(v0 + 96) = v49;
    *(_BYTE *)(v0 + 97) = v48;
    *(_BYTE *)(v0 + 98) = v57;
    *(_QWORD *)(v0 + 104) = v47;
    *(_BYTE *)(v0 + 112) = 0;
    *(_OWORD *)(v0 + 120) = v58;
    *(_QWORD *)(v0 + 136) = v45;
    *(_QWORD *)(v0 + 144) = v44;
    *(_BYTE *)(v0 + 152) = 0;
    *(_QWORD *)(v0 + 160) = v46;
    *(_BYTE *)(v0 + 168) = v59;
    *(_BYTE *)(v0 + 169) = v60;
    *(_BYTE *)(v0 + 170) = v62;
    v53 = *(_QWORD *)(v51 + 8);
    v63 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v53 + 16) + *(_QWORD *)(v53 + 16));
    v54 = v47;
    v55 = v46;
    v56 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1048) = v56;
    *v56 = v0;
    v56[1] = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return v63(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 688), v0 + 96, *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 720), v52, v53);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[132];
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedCache);
  v0[134] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[135] = v3;
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[136] = v4;
  *v4 = v0;
  v4[1] = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  PKDrawing *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 744);
  v3 = *(_QWORD *)(v0 + 736);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 776), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(void **)(v0 + 1056);
    v5 = *(_QWORD *)(v0 + 832);
    v6 = *(_QWORD *)(v0 + 824);
    v7 = *(_QWORD *)(v0 + 816);
    v8 = *(_QWORD *)(v0 + 776);
    v9 = *(_QWORD *)(v0 + 768);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    v10 = *(void **)(v0 + 984);
    v11 = *(void **)(v0 + 976);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 744) + 32))(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 736));
    PKDrawing._bridgeToObjectiveC()(v13);
    v15 = v14;
    *(_QWORD *)(v0 + 1096) = v14;
    v16 = swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v16;
    *(_QWORD *)v16 = v0;
    *(_QWORD *)(v16 + 8) = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    v17 = *(_OWORD *)(v0 + 944);
    v18 = *(_OWORD *)(v0 + 960);
    *(_QWORD *)(v16 + 96) = *(_QWORD *)(v0 + 680);
    *(_QWORD *)(v16 + 104) = v0 + 16;
    *(_OWORD *)(v16 + 64) = v17;
    *(_OWORD *)(v16 + 80) = v18;
    *(_QWORD *)(v16 + 56) = v15;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 1096);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v1 = *(void **)(v0 + 1056);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 824);
  v4 = *(_QWORD *)(v0 + 816);
  v5 = *(_QWORD *)(v0 + 776);
  v6 = *(_QWORD *)(v0 + 752);
  v7 = *(_QWORD *)(v0 + 744);
  v8 = *(_QWORD *)(v0 + 736);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v9 = *(void **)(v0 + 984);
  v10 = *(void **)(v0 + 976);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = objc_msgSend(a3, sel_uuid, MEMORY[0x1E0C80A78](v8, v11));
  v13 = *(_QWORD *)(a4 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed PKDrawing?) -> ();
  aBlock[3] = &block_descriptor_56;
  v16 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_overlayDrawingForDrawingUUID_tintColor_completion_, v12, v13, v16);
  _Block_release(v16);
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PKDrawing?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1DDE670DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  return closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed PKDrawing?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *);
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v9 = a2;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = type metadata accessor for PKDrawing();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for PKDrawing();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
    swift_retain();
  }
  v8(v7);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PKDrawing?);
}

uint64_t block_copy_helper_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_56()
{
  return swift_release();
}

uint64_t ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v12 + 256) = a7;
  *(_QWORD *)(v12 + 264) = v11;
  *(_QWORD *)(v12 + 240) = a5;
  *(_QWORD *)(v12 + 248) = a6;
  *(_QWORD *)(v12 + 224) = a2;
  *(_QWORD *)(v12 + 232) = a4;
  *(double *)(v12 + 208) = a10;
  *(double *)(v12 + 216) = a11;
  *(double *)(v12 + 192) = a8;
  *(double *)(v12 + 200) = a9;
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                  - 8);
  *(_QWORD *)(v12 + 272) = v16;
  *(_QWORD *)(v12 + 280) = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v12 + 288) = swift_task_alloc();
  *(_QWORD *)(v12 + 296) = swift_task_alloc();
  v17 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?)
                  - 8);
  *(_QWORD *)(v12 + 304) = v17;
  *(_QWORD *)(v12 + 312) = *(_QWORD *)(v17 + 64);
  *(_QWORD *)(v12 + 320) = swift_task_alloc();
  *(_QWORD *)(v12 + 328) = swift_task_alloc();
  type metadata accessor for CRKeyPath();
  *(_QWORD *)(v12 + 336) = swift_task_alloc();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>);
  *(_QWORD *)(v12 + 344) = v18;
  *(_QWORD *)(v12 + 352) = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v12 + 360) = swift_task_alloc();
  type metadata accessor for PKDrawingStruct();
  *(_QWORD *)(v12 + 368) = swift_task_alloc();
  v19 = *(_QWORD *)(a4 - 8);
  *(_QWORD *)(v12 + 376) = v19;
  *(_QWORD *)(v12 + 384) = *(_QWORD *)(v19 + 64);
  *(_QWORD *)(v12 + 392) = swift_task_alloc();
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(_QWORD *)(v12 + 400) = v20;
  *(_QWORD *)(v12 + 408) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v12 + 416) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)(v12 + 424) = swift_task_alloc();
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  *(_QWORD *)(v12 + 432) = v21;
  *(_QWORD *)(v12 + 440) = *(_QWORD *)(v21 - 8);
  v22 = swift_task_alloc();
  v23 = *a1;
  *(_QWORD *)(v12 + 448) = v22;
  *(_QWORD *)(v12 + 456) = v23;
  outlined init with take of (key: Int, value: AnyCRValue)?(a3, v12 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
  return swift_task_switch();
}

uint64_t ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  id v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  double v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  char *v35;
  id v36;
  uint64_t v37;
  id v38;
  PKDrawing *v39;
  void *v40;
  double v41;
  double v42;
  void *v43;
  void *v44;
  id v45;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double v51;
  double v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (**v69)(void *);
  uint64_t v70;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  double v90;
  void *v91;
  char *v92;
  __int128 v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v1 + 424);
  v3 = *(_QWORD *)(v1 + 432);
  (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 248) + 48))(*(_QWORD *)(v1 + 232));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) != 1)
  {
    v5 = *(_QWORD *)(v1 + 408);
    v6 = *(_QWORD *)(v1 + 416);
    v7 = *(_QWORD *)(v1 + 400);
    v8 = *(_QWORD *)(v1 + 376);
    v77 = *(_QWORD *)(v1 + 392);
    v79 = *(_QWORD *)(v1 + 384);
    v86 = *(_QWORD *)(v1 + 368);
    v75 = *(_QWORD *)(v1 + 264);
    v89 = *(_QWORD *)(v1 + 256);
    v9 = *(_QWORD *)(v1 + 232);
    v83 = *(_QWORD *)(v1 + 224);
    v11 = *(_QWORD *)(v1 + 208);
    v10 = *(_QWORD *)(v1 + 216);
    v74 = *(_OWORD *)(v1 + 192);
    v93 = *(_OWORD *)(v1 + 240);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 440) + 32))(*(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 424), *(_QWORD *)(v1 + 432));
    type metadata accessor for Capsule();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
    Capsule.encapsulateTransient<A>(_:)();
    v12 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    v13 = objc_allocWithZone(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))((uint64_t)v13 + OBJC_IVAR___PKDrawingCoherence_model, v6, v7);
    *(_QWORD *)(v1 + 176) = v13;
    *(_QWORD *)(v1 + 184) = v12;
    v14 = objc_msgSendSuper2((objc_super *)(v1 + 176), sel_init);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
    objc_msgSend(v14, sel_bounds);
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v22 = v21;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    *(_BYTE *)(v1 + 168) = 1;
    *(_OWORD *)(v1 + 96) = v74;
    *(_QWORD *)(v1 + 112) = v11;
    *(_QWORD *)(v1 + 120) = v10;
    *(_BYTE *)(v1 + 128) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v77, v75, v9);
    v23 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v24 = (void *)*MEMORY[0x1E0CD0E58];
    v25 = (v79 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v9;
    *(_OWORD *)(v26 + 24) = v93;
    *(_QWORD *)(v26 + 40) = v89;
    *(CGFloat *)(v26 + 48) = v16;
    *(CGFloat *)(v26 + 56) = v18;
    *(CGFloat *)(v26 + 64) = v20;
    *(double *)(v26 + 72) = v22;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v26 + v23, v77, v9);
    *(_QWORD *)(v26 + v25) = v14;
    outlined init with take of (key: Int, value: AnyCRValue)?(v1 + 16, v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8), &demangling cache variable for type metadata for PaperRenderableOptions?);
    v27 = objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation());
    v28 = v24;
    v29 = v14;
    outlined retain of PaperRenderableOptions?(v1 + 16);
    v30 = specialized CanvasElementPDFAnnotation.init(bounds:forType:containerBounds:mediaBox:render:)((uint64_t)v28, v1 + 136, v1 + 96, (uint64_t)partial apply for closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), v26, v16, v18, v20, v22);
    swift_release();

    v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD0DB0]), sel_init);
    objc_msgSend(v31, sel_setLineWidth_, 0.0);
    v88 = v31;
    objc_msgSend(v30, sel_setBorder_, v31);
    v32 = (void *)objc_opt_self();
    v33 = v30;
    v34 = objc_msgSend(v32, sel_clearColor);
    objc_msgSend(v33, sel_setColor_, v34);

    v35 = (char *)v33;
    v36 = objc_msgSend(v32, sel_clearColor);
    objc_msgSend(v35, sel_setInteriorColor_, v36);

    objc_msgSend(v35, sel_setReadOnly_, 1);
    objc_msgSend(v35, sel_setLocked_, 1);
    objc_msgSend(v35, sel_setContentsLocked_, 1);
    Ref.subscript.getter();
    v37 = PKDrawingStruct.requiredContentVersion<A>(in:)(v83, v93, v89);
    outlined destroy of PKDrawingStruct(v86);
    if (v37 == 1)
    {
      v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF7978]), sel_init);
      if (v38)
      {
        v40 = v38;
        v41 = *(double *)(v1 + 216);
        v90 = *(double *)(v1 + 208);
        v42 = *(double *)(v1 + 200);
        PKDrawingCoherence.concreteDrawing()(v39);
        v44 = v43;
        objc_msgSend(v40, sel_setDrawing_, v43);
        v45 = v40;
        objc_msgSend(v44, sel_bounds);
        x = v94.origin.x;
        y = v94.origin.y;
        width = v94.size.width;
        height = v94.size.height;
        MinX = CGRectGetMinX(v94);
        v95.origin.x = x;
        v95.origin.y = y;
        v95.size.width = width;
        v95.size.height = height;
        v51 = v41 + v42 + v42 - CGRectGetMaxY(v95);
        v96.origin.x = x;
        v96.origin.y = y;
        v96.size.width = width;
        v96.size.height = height;
        v52 = CGRectGetWidth(v96);
        v97.origin.x = x;
        v97.origin.y = y;
        v97.size.width = width;
        v97.size.height = height;
        objc_msgSend(v45, sel_setRectangle_, MinX, v51, v52, CGRectGetHeight(v97));

        objc_msgSend(v45, sel_setDrawingSize_, v90, v41);
        objc_msgSend(v45, sel_setOriginalExifOrientation_, 1);
        v53 = *(void **)&v35[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
        *(_QWORD *)&v35[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = v40;

      }
    }
    v54 = *(_QWORD *)(v1 + 456);
    v55 = v54;
    v92 = v35;
    if (v54 >> 62)
    {
      if (v54 >> 62 != 1)
      {

        goto LABEL_11;
      }
      v55 = v54 & 0x3FFFFFFFFFFFFFFFLL;
    }
    v87 = v55;
    v56 = *(_QWORD *)(v1 + 448);
    v58 = *(_QWORD *)(v1 + 352);
    v57 = *(_QWORD *)(v1 + 360);
    v59 = *(_QWORD *)(v1 + 344);
    v60 = *(_QWORD *)(v1 + 328);
    v61 = *(_QWORD *)(v1 + 296);
    v80 = *(_QWORD *)(v1 + 304);
    v91 = v29;
    v76 = *(_QWORD *)(v1 + 320);
    v78 = *(_QWORD *)(v1 + 288);
    v85 = *(_QWORD *)(v1 + 280);
    v81 = *(_QWORD *)(v1 + 272);
    v82 = *(_QWORD *)(v1 + 312);
    v62 = *(_QWORD *)(v1 + 224);
    v72 = *(_OWORD *)(v1 + 248);
    v73 = *(_OWORD *)(v1 + 232);
    outlined copy of PaperDocument.PDFDocumentUse(v54);
    static CRKeyPath.unique.getter();
    v63 = swift_task_alloc();
    *(_OWORD *)(v63 + 16) = v73;
    *(_OWORD *)(v63 + 32) = v72;
    *(_QWORD *)(v63 + 48) = v62;
    *(_QWORD *)(v63 + 56) = v56;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, MEMORY[0x1E0D117A8]);
    Capsule<>.init(id:initClosure:)();
    swift_task_dealloc();
    v84 = v59;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v60, v57, v59);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v60, 0, 1, v59);
    v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v61, 1, 1, v64);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v60, v76, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v61, v78, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v65 = (*(unsigned __int8 *)(v80 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
    v66 = (v82 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = (*(unsigned __int8 *)(v81 + 80) + v66 + 8) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
    v68 = swift_allocObject();
    outlined init with take of (key: Int, value: AnyCRValue)?(v76, v68 + v65, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?);
    *(_QWORD *)(v68 + v66) = v87;
    outlined init with take of (key: Int, value: AnyCRValue)?(v78, v68 + v67, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    *(_BYTE *)(v68 + v67 + v85) = 0;
    *(_OWORD *)(((v67 + v85) & 0xFFFFFFFFFFFFFFF8) + v68 + 8) = xmmword_1DDF45420;
    v69 = (void (**)(void *))&v35[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    v70 = *(_QWORD *)&v35[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    *v69 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
    v69[1] = (void (*)(void *))v68;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v70);

    outlined destroy of StocksKitCurrencyCache.Provider?(v61, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v84);
LABEL_11:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 440) + 8))(*(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 432));
    goto LABEL_12;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v1 + 424), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v92 = 0;
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v1 + 8))(v92);
}

void closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(CGContext *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGFloat *v43;
  uint64_t v44;
  CGContext *v45;
  uint64_t v46;
  dispatch_semaphore_t v47;
  id v48;
  CGContext *v49;
  NSObject *v50;
  CGContext *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  dispatch_semaphore_t v56;
  uint64_t v57;
  uint64_t v58;
  CGRect v59;
  CGRect v60;
  CGRect ClipBoundingBox;

  v57 = a7;
  v58 = a8;
  v22 = *(_QWORD *)(a5 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClipBoundingBox = CGContextGetClipBoundingBox(a1);
  v59.origin.x = a9;
  v59.origin.y = a10;
  v59.size.width = a11;
  v59.size.height = a12;
  v60 = CGRectIntersection(v59, ClipBoundingBox);
  x = v60.origin.x;
  y = v60.origin.y;
  width = v60.size.width;
  height = v60.size.height;
  if (!CGRectIsEmpty(v60))
  {
    v56 = dispatch_semaphore_create(0);
    v32 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v27, 1, 1, v32);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    v53 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    v33(v53, a2, a5);
    v34 = *(unsigned __int8 *)(v22 + 80);
    v54 = a4;
    v55 = v27;
    v35 = (v34 + 96) & ~v34;
    v36 = (v23 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    v37 = a3;
    v38 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v51 = a1;
    v52 = (v38 + 39) & 0xFFFFFFFFFFFFFFF8;
    v39 = (v52 + 15) & 0xFFFFFFFFFFFFFFF8;
    v40 = (v39 + 82) & 0xFFFFFFFFFFFFFFF8;
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = 0;
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = a5;
    *(_QWORD *)(v41 + 40) = a6;
    v42 = v58;
    *(_QWORD *)(v41 + 48) = v57;
    *(_QWORD *)(v41 + 56) = v42;
    *(CGFloat *)(v41 + 64) = a9;
    *(CGFloat *)(v41 + 72) = a10;
    *(CGFloat *)(v41 + 80) = a11;
    *(CGFloat *)(v41 + 88) = a12;
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v41 + v35, v53, a5);
    *(_QWORD *)(v41 + v36) = v37;
    v43 = (CGFloat *)(v41 + v38);
    *v43 = x;
    v43[1] = y;
    v44 = v41 + v39;
    v43[2] = width;
    v43[3] = height;
    v45 = v51;
    *(_QWORD *)(v41 + v52) = v51;
    v46 = v54;
    outlined init with take of (key: Int, value: AnyCRValue)?(v54, v44, &demangling cache variable for type metadata for PaperRenderableOptions?);
    v47 = v56;
    *(_QWORD *)(v41 + v40) = v56;
    v48 = v37;
    v49 = v45;
    outlined retain of PaperRenderableOptions?(v46);
    v50 = v47;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v55, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), v41);
    swift_release();
    OS_dispatch_semaphore.wait()();

  }
}

uint64_t sub_1DDE67FFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);

  v5 = *(void **)(v0 + v4 + 8);
  if (v5 != (void *)1)
  {

  }
  return swift_deallocObject();
}

void partial apply for closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(CGContext *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(a1, v1 + v4, *(void **)(v1 + v5), v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8), v2, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64), *(CGFloat *)(v1 + 72));
}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 + 216) = a15;
  *(_QWORD *)(v16 + 224) = a16;
  *(_QWORD *)(v16 + 208) = a14;
  *(double *)(v16 + 192) = a7;
  *(double *)(v16 + 200) = a8;
  *(double *)(v16 + 176) = a5;
  *(double *)(v16 + 184) = a6;
  *(_QWORD *)(v16 + 168) = a13;
  *(double *)(v16 + 152) = a3;
  *(double *)(v16 + 160) = a4;
  *(double *)(v16 + 136) = a1;
  *(double *)(v16 + 144) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)()
{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  double Width;
  double Height;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  __int128 v15;
  CGRect v16;
  CGRect v17;

  v2 = *(double *)(v0 + 152);
  v1 = *(double *)(v0 + 160);
  v4 = *(double *)(v0 + 136);
  v3 = *(double *)(v0 + 144);
  v16.origin.x = v4;
  v16.origin.y = v3;
  v16.size.width = v2;
  v16.size.height = v1;
  Width = CGRectGetWidth(v16);
  v17.origin.x = v4;
  v17.origin.y = v3;
  v17.size.width = v2;
  v17.size.height = v1;
  Height = CGRectGetHeight(v17);
  if (Width > Height)
    Height = Width;
  v7 = Height + Height;
  if (one-time initialization token for maxTextureSize != -1)
    swift_once();
  v8 = 2.0;
  if (*(double *)&static UIConstants.maxTextureSize < v7)
    v8 = *(double *)&static UIConstants.maxTextureSize / v7 + *(double *)&static UIConstants.maxTextureSize / v7;
  v10 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 200);
  v15 = *(_OWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 168);
  outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 216), v0 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
  v12 = (*(_QWORD *)(v0 + 24) != 1) & *(_BYTE *)(v0 + 88);
  *(_OWORD *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 112) = v10;
  *(_QWORD *)(v0 + 120) = v9;
  *(_BYTE *)(v0 + 128) = 0;
  *(_QWORD *)&v15 = (char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                  + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v13;
  *v13 = v0;
  v13[1] = closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))v15)(v11, v0 + 96, *(_QWORD *)(v0 + 208), 1, 0, v12, v8);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[0] = a1;
  v16[1] = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Capsule();
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
  Capsule.encapsulate<A>(_:)();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct();
  Capsule.Ref.import<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v7, a2, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  return CRRegister.init(_:)();
}

uint64_t specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 96) = a2;
  *(_QWORD *)(v7 + 104) = a3;
  *(double *)(v7 + 80) = a6;
  *(double *)(v7 + 88) = a7;
  *(double *)(v7 + 64) = a4;
  *(double *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 56) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #2 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(a1, *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_1DDE68A84()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v0 + v5, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v5, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1DDE68CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  v7 = *(void **)(v0 + v6 + 8);
  if (v7 != (void *)1)
  {

  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;

  v2 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 39) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v0 + v2);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v16 = *(_OWORD *)(v0 + v3);
  v17 = *(_OWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + v4);
  v10 = *(_QWORD *)(v0 + v3 + 16);
  v11 = *(_QWORD *)(v0 + v3 + 24);
  v12 = v0 + v5;
  v13 = *(_QWORD *)(v0 + ((v5 + 82) & 0xFFFFFFFFFFFFF8));
  v14 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v14;
  *(_QWORD *)v14 = v1;
  *(_QWORD *)(v14 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_QWORD *)(v14 + 216) = v12;
  *(_QWORD *)(v14 + 224) = v13;
  *(_QWORD *)(v14 + 208) = v9;
  *(_QWORD *)(v14 + 192) = v10;
  *(_QWORD *)(v14 + 200) = v11;
  *(_OWORD *)(v14 + 176) = v16;
  *(_QWORD *)(v14 + 168) = v6;
  *(_QWORD *)(v14 + 152) = v7;
  *(_QWORD *)(v14 + 160) = v8;
  *(_OWORD *)(v14 + 136) = v17;
  return swift_task_switch();
}

uint64_t Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, double a11@<D4>)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(uint64_t, char *, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;

  v124 = a4;
  v133 = a1;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v123 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v122 = *(_QWORD *)(v125 - 8);
  MEMORY[0x1E0C80A78](v125, v23);
  v81 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for ShapeSecondaryProperties();
  MEMORY[0x1E0C80A78](v96, v25);
  v120 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119, v27);
  v117 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v115 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116, v29);
  v114 = (char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v31);
  v111 = (char *)&v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v109 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v33);
  v108 = (char *)&v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v134, v35);
  v131 = (uint64_t)&v80 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v98 = (char *)&v80 - v39;
  v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v132, v40);
  v128 = (uint64_t)&v80 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v127 = (char *)&v80 - v44;
  v135 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v107 = *(_QWORD *)(v135 - 8);
  MEMORY[0x1E0C80A78](v135, v45);
  v95 = (char *)&v80 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v126 = (char *)&v80 - v49;
  v105 = *a2;
  v106 = *a3;
  v121 = *a5;
  type metadata accessor for CGRect(0);
  v102 = v50;
  v101 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v136 = 0u;
  v137 = 0u;
  CRRegister.init(wrappedValue:)();
  v51 = (int *)type metadata accessor for Shape();
  *(_QWORD *)&v136 = 0;
  v130 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(_:)();
  v104 = a6 + v51[6];
  *(_QWORD *)&v136 = 0;
  v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  v99 = _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
  CRRegister.init(wrappedValue:)();
  v103 = a6 + v51[7];
  *(_QWORD *)&v136 = 0;
  CRRegister.init(wrappedValue:)();
  v97 = a6 + v51[8];
  *(_QWORD *)&v136 = 0x4014000000000000;
  CRRegister.init(wrappedValue:)();
  v129 = a6 + v51[9];
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v52 = v126;
  TaggedValue_9.init(_:)();
  v53 = v107;
  v94 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
  v54 = v135;
  v94(v95, v52, v135);
  v93 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape> and conformance TaggedValue_9<A, B, C, D, E, F, G, H, I>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>, MEMORY[0x1E0D12128]);
  CRRegister.init(wrappedValue:)();
  v107 = *(_QWORD *)(v53 + 8);
  ((void (*)(char *, uint64_t))v107)(v52, v54);
  *(_QWORD *)&v136 = 0x3FF0000000000000;
  CRRegister.init(wrappedValue:)();
  v55 = a6;
  *(_QWORD *)&v136 = 0;
  BYTE8(v136) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<LineEnd>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRExtensible<LineEnd> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<LineEnd>, MEMORY[0x1E0D11CB8]);
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v136 = 0;
  BYTE8(v136) = 0;
  CRRegister.init(wrappedValue:)();
  v56 = a6 + v51[13];
  v92 = lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  v57 = v96;
  v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
  v59 = (uint64_t)v127;
  v91(v127, 1, 1, v58);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v59, v128, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  v90 = lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  v60 = (char *)(v56 + *(int *)(v57 + 24));
  *(_QWORD *)&v136 = 0;
  v89 = lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  v95 = v60;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v136 = 0;
  v88 = lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  v87 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
  v62 = (uint64_t)v98;
  v87(v98, 1, 1, v61);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v62, v131, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v86 = lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v136 = 0u;
  v137 = 0u;
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shadow?);
  v84 = _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, &demangling cache variable for type metadata for Shadow?, (uint64_t (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
  CRRegister.init(wrappedValue:)();
  v137 = 0u;
  v138 = 0u;
  v136 = 0u;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeAuxiliaryInfo?);
  v82 = _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, (uint64_t (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  CRRegister.init(wrappedValue:)();
  v63 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v56 + *(int *)(v57 + 44)) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v55 + v51[14]) = v63;
  *(double *)&v136 = a7;
  *((double *)&v136 + 1) = a8;
  *(double *)&v137 = a9;
  *((double *)&v137 + 1) = a10;
  v64 = v108;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v109 + 40))(v55, v64, v110);
  v94(v126, v133, v135);
  v65 = v111;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v112 + 40))(v129, v65, v113);
  *(double *)&v136 = a11;
  v66 = v114;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v115 + 40))(v97, v66, v116);
  *(_QWORD *)&v136 = v105;
  v67 = v117;
  CRRegister.init(_:)();
  v68 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 40);
  v69 = v119;
  v68(v103, v67, v119);
  *(_QWORD *)&v136 = v106;
  CRRegister.init(_:)();
  v68(v104, v67, v69);
  v70 = v120;
  CRAttributedString.init(_:)();
  v71 = (uint64_t)v127;
  v91(v127, 1, 1, v58);
  v72 = v122;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v71, v128, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v71, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  *(_QWORD *)&v136 = 0;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v136 = 0;
  CRRegister.init(wrappedValue:)();
  v73 = v61;
  v74 = v124;
  v87((char *)v62, 1, 1, v73);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v62, v131, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v75 = (uint64_t)v123;
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v136 = 0u;
  v137 = 0u;
  CRRegister.init(wrappedValue:)();
  v137 = 0u;
  v138 = 0u;
  v136 = 0u;
  CRRegister.init(wrappedValue:)();
  v76 = (uint64_t)v70;
  *(_QWORD *)&v70[*(int *)(v57 + 44)] = MEMORY[0x1E0DEE9E0];
  v77 = v125;
  outlined assign with take of ShapeSecondaryProperties(v76, v56);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v74, v75, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v75, 1, v77) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v75, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  }
  else
  {
    v78 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v81, v75, v77);
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 40))(v56, v78, v77);
  }
  *(_QWORD *)&v136 = v121;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?(v74, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  return ((uint64_t (*)(char *, uint64_t))v107)(v133, v135);
}

uint64_t Shape.rotation.setter(double a1)
{
  uint64_t result;
  double v3;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  result = CRRegister.value.getter();
  if (vabdd_f64(v3, a1) > 0.01)
    return CRRegister.value.setter();
  return result;
}

uint64_t Shape.strokeColor.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.getter();
}

double Shape.strokeWidth.getter()
{
  double v1;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Shape.fillColor.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.getter();
}

double Shape.opacity.getter()
{
  double v1;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Shape.type.getter()
{
  return Shape.type.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t Shape.startLineEnd.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.endLineEnd.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD v30[2];
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v40, v2);
  v39 = (uint64_t)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v38 = (char *)v30 - v6;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v37, v7);
  v36 = (uint64_t)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v35 = (char *)v30 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v32 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v31 = (char *)v30 - v17;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v41 = 0u;
  v42 = 0u;
  CRRegister.init(wrappedValue:)();
  v18 = (int *)type metadata accessor for Shape();
  *(_QWORD *)&v41 = 0;
  v30[1] = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(_:)();
  *(_QWORD *)&v41 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v41 = 0;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v41 = 0x4014000000000000;
  CRRegister.init(wrappedValue:)();
  v30[0] = a1 + v18[9];
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v19 = v31;
  TaggedValue_9.init(_:)();
  v20 = v33;
  v21 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v19, v34);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape> and conformance TaggedValue_9<A, B, C, D, E, F, G, H, I>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>, MEMORY[0x1E0D12128]);
  CRRegister.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v21);
  *(_QWORD *)&v41 = 0x3FF0000000000000;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v41 = 0;
  BYTE8(v41) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<LineEnd>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRExtensible<LineEnd> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<LineEnd>, MEMORY[0x1E0D11CB8]);
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v41 = 0;
  BYTE8(v41) = 0;
  CRRegister.init(wrappedValue:)();
  v22 = a1 + v18[13];
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  v23 = type metadata accessor for ShapeSecondaryProperties();
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v25 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v35, 1, 1, v24);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v25, v36, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  *(_QWORD *)&v41 = 0;
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v41 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  v27 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v38, 1, 1, v26);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v27, v39, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v41 = 0u;
  v42 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shadow?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, &demangling cache variable for type metadata for Shadow?, (uint64_t (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
  CRRegister.init(wrappedValue:)();
  v42 = 0u;
  v43 = 0u;
  v41 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeAuxiliaryInfo?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, (uint64_t (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  result = CRRegister.init(wrappedValue:)();
  v29 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v22 + *(int *)(v23 + 44)) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(a1 + v18[14]) = v29;
  return result;
}

uint64_t Shape.frame.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.strokeColor.setter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.strokeWidth.setter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.fillColor.setter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

void Dictionary<>.scaleBy(_:)(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  double v9;
  id v10;
  void *v11;
  __int128 v12;
  __int128 v13;

  if (a1 != 1.0 && a1 != 0.0)
  {
    v3 = *v1;
    if (*(_QWORD *)(v3 + 16))
    {
      v4 = (id)*MEMORY[0x1E0DC1138];
      v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
      if ((v6 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v12);

        if (*((_QWORD *)&v13 + 1))
        {
          v7 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v8 = v4;
            objc_msgSend(v11, sel_pointSize);
            v10 = objc_msgSend(v11, sel_fontWithSize_, v9 * a1);
            *((_QWORD *)&v13 + 1) = v7;
            *(_QWORD *)&v12 = v10;
            specialized Dictionary.subscript.setter((uint64_t)&v12, v8);

          }
          return;
        }
      }
      else
      {
        v12 = 0u;
        v13 = 0u;

      }
    }
    else
    {
      v12 = 0u;
      v13 = 0u;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v12, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t Shape.emptyStringAttributes.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for Shape();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

double Shape.frame.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Shape.startLineEnd.setter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.endLineEnd.setter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.type.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

Swift::Void __swiftcall Shape.apply(_:)(CGAffineTransform *a1)
{
  double a;
  double b;
  CGFloat tx;
  CGFloat ty;
  void (*v6)(CGAffineTransform *, _QWORD);
  double *v7;
  __int128 v8;
  CGAffineTransform v9;
  CGAffineTransform t2;
  CGAffineTransform v11;
  CGAffineTransform t1;

  a = a1->a;
  b = a1->b;
  v8 = *(_OWORD *)&a1->c;
  tx = a1->tx;
  ty = a1->ty;
  specialized CanvasElement.coordinateSpace.getter(&v11);
  t1 = v11;
  t2.a = a;
  t2.b = b;
  *(_OWORD *)&t2.c = v8;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v9, &t1, &t2);
  t1 = v9;
  specialized CanvasElement.coordinateSpace.setter();
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v6 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
  *v7 = sqrt(a * a + b * b) * *v7;
  v6(&t2, 0);
  CRAttributedString<>.apply(_:)(&a1->a);
}

uint64_t (*Shape.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

double Shape.rotation.getter()
{
  double v1;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  return v1;
}

uint64_t Shape.flags.getter()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.flags.setter()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.type : Shape()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Shape.type : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

double key path getter for Shape.opacity : Shape@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.opacity : Shape()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.opacity.setter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

double key path getter for Shape.strokeWidth : Shape@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.strokeWidth : Shape()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

BOOL Shape.supportsStrokeColor.getter()
{
  uint64_t v1;

  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  return v1 == 0;
}

uint64_t key path getter for Shape.strokeColor : Shape@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.strokeColor : Shape(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for Shape();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.startLineEnd : Shape@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  result = CRRegister.wrappedValue.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for Shape.startLineEnd : Shape()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.endLineEnd : Shape@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  result = CRRegister.wrappedValue.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for Shape.endLineEnd : Shape()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.flags : Shape@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.flags : Shape()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.pathAndLineEnds(in:scale:)@<X0>(CGAffineTransform *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  CGPathRef v17;
  const CGPath *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v32;
  double v33;
  CGPathRef v34;
  double v35;
  double v36;
  double v37;
  double v38;
  const CGPath *v39;
  CGPathRef v40;
  double v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  const CGPath *v48;
  uint64_t result;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  id v58;
  char v59;
  CGRect v60;
  CGRect v61;

  v4 = v3;
  v8 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  v17 = TaggedValue_9<>.path(in:)(a1);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v18 = v17;
  CGPathRef.endPoints.getter();
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  v27 = v58;

  outlined init with copy of PKStrokeProperties(v4, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v27)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v28 = *(double *)&v58;
    outlined destroy of Shape((uint64_t)v11);
    v29 = 0.0;
    if (v28 > 0.0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
      CRRegister.wrappedValue.getter();
      if (v59 == 1)
      {
        CRRegister.wrappedValue.getter();
        v30 = *(double *)&v58;
        v31 = 1;
      }
      else
      {
        v31 = v58;
        if (!(_BYTE)v58)
        {

          v35 = 0.0;
          goto LABEL_20;
        }
        CRRegister.wrappedValue.getter();
        v30 = *(double *)&v58;
        if (v31 == 7)
        {
          v32 = 0.25;
          if (*(double *)&v58 < 1.0)
            goto LABEL_6;
          goto LABEL_15;
        }
        if (v31 == 8)
        {
          v36 = *(double *)&v58 * 5.0;
          v37 = 0.5;
LABEL_19:
          CRRegister.wrappedValue.getter();
          v35 = (v36 - v37 * *(double *)&v58) * a3;
          v60.size.width = v35 + v35;
          v38 = (v35 + v35) * 0.5;
          v60.origin.x = v20 - v38;
          v60.origin.y = v22 - v38;
          v60.size.height = v35 + v35;
          v39 = CGPathCreateWithEllipseInRect(v60, 0);
          v40 = CGPathRef.lineSubtractingFromStart(_:)(v39);

          v18 = v40;
LABEL_20:
          CRRegister.wrappedValue.getter();
          if (v59 == 1)
          {
            CRRegister.wrappedValue.getter();
            v41 = *(double *)&v58;
            v42 = 1;
          }
          else
          {
            v42 = v58;
            if (!(_BYTE)v58)
            {
              v29 = 0.0;
              goto LABEL_36;
            }
            CRRegister.wrappedValue.getter();
            v41 = *(double *)&v58;
            if (v42 == 7)
            {
              v43 = 0.25;
              if (*(double *)&v58 < 1.0)
                goto LABEL_23;
              goto LABEL_30;
            }
            if (v42 == 8)
            {
              v45 = *(double *)&v58 * 5.0;
              v46 = 0.5;
LABEL_34:
              CRRegister.wrappedValue.getter();
              v29 = (v45 - v46 * *(double *)&v58) * a3;
              v61.size.width = v29 + v29;
              v47 = (v29 + v29) * 0.5;
              v61.origin.x = v24 - v47;
              v61.origin.y = v26 - v47;
              v61.size.height = v29 + v29;
              v48 = CGPathCreateWithEllipseInRect(v61, 0);
              v34 = CGPathRef.lineSubtractingFromEnd(_:)(v48);

              goto LABEL_35;
            }
          }
          v43 = 1.0;
          if (v41 < 1.0)
          {
LABEL_23:
            v44 = v41 * 6.0;
            goto LABEL_31;
          }
LABEL_30:
          v44 = v41 * 3.6 + 2.4;
LABEL_31:
          v45 = v44 * v43;
          if (v42 == 2)
            v46 = 2.73606798;
          else
            v46 = 0.5;
          goto LABEL_34;
        }
      }
      v32 = 1.0;
      if (v30 < 1.0)
      {
LABEL_6:
        v33 = v30 * 6.0;
        goto LABEL_16;
      }
LABEL_15:
      v33 = v30 * 3.6 + 2.4;
LABEL_16:
      v36 = v33 * v32;
      if (v31 == 2)
        v37 = 2.73606798;
      else
        v37 = 0.5;
      goto LABEL_19;
    }
  }
  else
  {
    outlined destroy of Shape((uint64_t)v11);
    v29 = 0.0;
  }
  v34 = v18;
  v35 = 0.0;
LABEL_35:

  v18 = v34;
LABEL_36:
  result = CGPathIsEmpty(v18);
  if ((_DWORD)result)
  {
    v50 = sqrt((v24 - v20) * (v24 - v20) + (v26 - v22) * (v26 - v22));
    v51 = (v24 - v20) / v50;
    v52 = (v26 - v22) / v50;
    v53 = v20 + v51 * v35;
    v54 = v22 + v52 * v35;
    v55 = v52 * v29;
    v56 = v24 - v51 * v29;
    v57 = v26 - v55;
  }
  else
  {
    result = CGPathRef.endPoints.getter();
  }
  *(_QWORD *)a2 = v18;
  *(double *)(a2 + 8) = v20;
  *(double *)(a2 + 16) = v22;
  *(double *)(a2 + 24) = v24;
  *(double *)(a2 + 32) = v26;
  *(double *)(a2 + 40) = v53;
  *(double *)(a2 + 48) = v54;
  *(double *)(a2 + 56) = v56;
  *(double *)(a2 + 64) = v57;
  return result;
}

uint64_t key path getter for Shape.fillColor : Shape@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.fillColor : Shape(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for Shape();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

BOOL Shape.supportsFill.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  _BOOL8 v12;
  _QWORD v14[7];
  unsigned __int8 v15;

  v1 = v0;
  v2 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = v15;
  outlined init with copy of PKStrokeProperties(v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v11 == 1)
  {
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    v12 = v14[1] == 0;
    outlined destroy of Shape((uint64_t)v5);
  }
  else
  {
    outlined destroy of Shape((uint64_t)v5);
    return 0;
  }
  return v12;
}

double key path getter for Shape.rotation : Shape@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.rotation : Shape(double *a1)
{
  double v1;
  uint64_t result;
  double v3;

  v1 = *a1;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  result = CRRegister.value.getter();
  if (vabdd_f64(v3, v1) > 0.01)
    return CRRegister.value.setter();
  return result;
}

uint64_t Shape.emptyStringAttributes.getter()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Shape.emptyStringAttributes : Shape()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Shape.emptyStringAttributes : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v15 - v12;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v15 - v12, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for Shape();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

BOOL Shape.supportsLineEnds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE v6[64];

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v4, v0);
  return (v6[56] & 1) == 0;
}

uint64_t Shape.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t Shape.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Shape.$frame.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Shape.fillColor.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$fillColor.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$fillColor : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Shape.$fillColor.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$fillColor.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.strokeColor.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$strokeColor.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$strokeColor : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Shape.$strokeColor.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$strokeColor.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.strokeWidth.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$strokeWidth.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$strokeWidth : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Shape.$strokeWidth.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$strokeWidth.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.type.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$type.getter()
{
  return Shape.type.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t Shape.type.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for Shape();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  return a1(v2);
}

uint64_t key path setter for Shape.$type : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Shape.$type.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$type.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.opacity.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$opacity.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$opacity : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Shape.$opacity.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$opacity.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.startLineEnd.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$startLineEnd.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$startLineEnd : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Shape.$startLineEnd.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$startLineEnd.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 44);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.endLineEnd.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$endLineEnd.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$endLineEnd : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Shape.$endLineEnd.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$endLineEnd.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 48);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Shape.secondaryProperties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shape();
  return outlined init with copy of PKStrokeProperties(v1 + *(int *)(v3 + 52), a1, (uint64_t (*)(_QWORD))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t Shape.secondaryProperties.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Shape() + 52);
  return outlined assign with take of ShapeSecondaryProperties(a1, v3);
}

double (*Shape.secondaryProperties.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Shape();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Shape.additionalFields.getter()
{
  type metadata accessor for Shape();
  return swift_bridgeObjectRetain();
}

uint64_t Shape.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Shape() + 56);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*Shape.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Shape();
  return UnknownCanvasElementView.flags.modify;
}

double static Shape.fields.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  _BYTE v29[32];
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;

  if (one-time initialization token for fields != -1)
    swift_once();
  *(_OWORD *)v31 = *(_OWORD *)&qword_1EDB6FC48;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_1EDB6FC58;
  v32 = xmmword_1EDB6FC68;
  v28 = xmmword_1EDB6FC08;
  *(_OWORD *)v29 = *(_OWORD *)&qword_1EDB6FC18;
  *(_OWORD *)&v29[16] = xmmword_1EDB6FC28;
  v30 = *(_OWORD *)&qword_1EDB6FC38;
  *(_OWORD *)&v25[16] = xmmword_1EDB6FBC8;
  v26 = *(_OWORD *)&qword_1EDB6FBD8;
  *(_OWORD *)v27 = *(_OWORD *)&qword_1EDB6FBE8;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_1EDB6FBF8;
  *(_OWORD *)v23 = static Shape.fields;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1EDB6FB98;
  v24 = xmmword_1EDB6FBA8;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1EDB6FBB8;
  v2 = static Shape.fields;
  v3 = unk_1EDB6FBA0;
  v4 = qword_1EDB6FBB8;
  v5 = *((_QWORD *)&xmmword_1EDB6FBC8 + 1);
  v6 = qword_1EDB6FBE8;
  v7 = unk_1EDB6FC00;
  v8 = qword_1EDB6FC18;
  v9 = *((_QWORD *)&xmmword_1EDB6FC28 + 1);
  v10 = qword_1EDB6FC48;
  v22 = unk_1EDB6FC60;
  v12 = *(_OWORD *)&v23[8];
  v13 = xmmword_1EDB6FBA8;
  v14 = *(_OWORD *)&v25[8];
  v15 = *(_OWORD *)&qword_1EDB6FBD8;
  v16 = *(_OWORD *)&v27[8];
  v17 = xmmword_1EDB6FC08;
  v18 = *(_OWORD *)&v29[8];
  v19 = *(_OWORD *)&qword_1EDB6FC38;
  v20 = *(_OWORD *)&v31[8];
  v21 = xmmword_1EDB6FC68;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(_QWORD *)(a1 + 216) = v22;
  result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t Shape.minAppFormatVersion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Shape();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + *(int *)(v6 + 52), v1);
  v7 = (void *)CRAttributedString.attributedString.getter();
  v8 = objc_msgSend(v7, sel_string);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  if (v9)
    v12 = 0;
  else
    v12 = v11 == 0xE000000000000000;
  if (v12)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 2;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    if ((v13 & 1) != 0)
      return 2;
    else
      return 4;
  }
}

void (*Shape.flags.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(type metadata accessor for Shape() + 52);
  *((_DWORD *)v3 + 9) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 28);
  v3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  return Shape.flags.modify;
}

void Shape.flags.modify(_QWORD **a1)
{
  _QWORD *v1;

  v1 = *a1;
  (*a1)[1] = **a1;
  CRRegister.wrappedValue.setter();
  free(v1);
}

void (*Shape.emptyStringAttributes.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?)
                             - 8)
                 + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 52);
  *((_DWORD *)v3 + 13) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 20);
  v3[5] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.getter();
  return Shape.emptyStringAttributes.modify;
}

void Shape.emptyStringAttributes.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = *a1;
  v4 = (*a1)[3];
  v5 = (*a1)[2];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((*a1)[4], v4, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v4, v5, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  v6 = (void *)v3[4];
  v7 = (void *)v3[2];
  v8 = (void *)v3[3];
  v9 = (void *)v3[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3[2], v3[1], &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  }
  else
  {
    CRRegister.wrappedValue.setter();
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  free(v6);
  free(v8);
  free(v7);
  free(v9);
  free(v3);
}

void (*Shape.rotation.modify(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(type metadata accessor for Shape() + 20);
  v3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  return Shape.rotation.modify;
}

void Shape.rotation.modify(double **a1)
{
  double *v1;
  double v2;

  v1 = *a1;
  v2 = **a1;
  CRRegister.value.getter();
  if (vabdd_f64(v1[1], v2) > 0.01)
  {
    v1[1] = v2;
    CRRegister.value.setter();
  }
  free(v1);
}

uint64_t type metadata accessor for Shape()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Shape;
  if (!type metadata singleton initialization cache for Shape)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes and conformance CRAttributedString<A>.Attributes, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes, MEMORY[0x1E0D124A0]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.minEncodingVersion.getter();
}

double protocol witness for static CRStruct_Base_10.fields.getter in conformance Shape@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  _BYTE v29[32];
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;

  if (one-time initialization token for fields != -1)
    swift_once();
  *(_OWORD *)v31 = *(_OWORD *)&qword_1EDB6FC48;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_1EDB6FC58;
  v32 = xmmword_1EDB6FC68;
  v28 = xmmword_1EDB6FC08;
  *(_OWORD *)v29 = *(_OWORD *)&qword_1EDB6FC18;
  *(_OWORD *)&v29[16] = xmmword_1EDB6FC28;
  v30 = *(_OWORD *)&qword_1EDB6FC38;
  *(_OWORD *)&v25[16] = xmmword_1EDB6FBC8;
  v26 = *(_OWORD *)&qword_1EDB6FBD8;
  *(_OWORD *)v27 = *(_OWORD *)&qword_1EDB6FBE8;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_1EDB6FBF8;
  *(_OWORD *)v23 = static Shape.fields;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1EDB6FB98;
  v24 = xmmword_1EDB6FBA8;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1EDB6FBB8;
  v2 = static Shape.fields;
  v3 = unk_1EDB6FBA0;
  v4 = qword_1EDB6FBB8;
  v5 = *((_QWORD *)&xmmword_1EDB6FBC8 + 1);
  v6 = qword_1EDB6FBE8;
  v7 = unk_1EDB6FC00;
  v8 = qword_1EDB6FC18;
  v9 = *((_QWORD *)&xmmword_1EDB6FC28 + 1);
  v10 = qword_1EDB6FC48;
  v22 = unk_1EDB6FC60;
  v12 = *(_OWORD *)&v23[8];
  v13 = xmmword_1EDB6FBA8;
  v14 = *(_OWORD *)&v25[8];
  v15 = *(_OWORD *)&qword_1EDB6FBD8;
  v16 = *(_OWORD *)&v27[8];
  v17 = xmmword_1EDB6FC08;
  v18 = *(_OWORD *)&v29[8];
  v19 = *(_OWORD *)&qword_1EDB6FC38;
  v20 = *(_OWORD *)&v31[8];
  v21 = xmmword_1EDB6FC68;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(_QWORD *)(a1 + 216) = v22;
  result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return static CRStruct_10_Final.fieldKeys.getter();
}

uint64_t protocol witness for CRDT.context.getter in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRStruct_10_Final.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Shape()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return CRDT.init(serializedData:)();
}

uint64_t Shape.shared(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 5;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t Shape.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t Shape.indexableTextContent<A>(in:)()
{
  return specialized Shape.indexableTextContent<A>(in:)();
}

uint64_t Shape.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Shape.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Shape.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

double closure #1 in Shape.renderSync<A>(in:id:capsule:options:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v3;
  double result;
  double v5;

  v3 = *a1;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3 * v5;
  *a2 = v3 * v5;
  return result;
}

__C::CGRect __swiftcall Shape.renderFrame(in:)(__C::CGRect_optional *in)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat a;
  double MidX;
  double MidY;
  CGFloat v17;
  CGFloat tx;
  CGFloat ty;
  CGFloat v20;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  double v29;
  double v30;
  double v31;
  CGFloat v32;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  const CGPath *v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  char a_low;
  const CGPath *v59;
  const CGPath *v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  char v65;
  const CGPath *v66;
  const CGPath *v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  double v72;
  double v73;
  double v74;
  double v75;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  __int128 v80;
  __int128 v81;
  CGFloat v82;
  CGFloat v83;
  double v84;
  double v85;
  double v86;
  char v87;
  CGAffineTransform t1;
  double v89;
  CGFloat v90;
  CGFloat v91;
  CGAffineTransform v92;
  CGAffineTransform t2;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect PathBoundingBox;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  __C::CGRect result;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&height - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(t1.a) & 1) != 0)
  {
    v7 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v1, (uint64_t)in);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.value.getter();
    a = t1.a;
    v85 = v7 - v11 * 0.0;
    v84 = v9 - v13 * 0.0;
    v94.origin.x = v7;
    v94.origin.y = v9;
    v94.size.width = v11;
    v82 = v11;
    v94.size.height = v13;
    v83 = v13;
    MidX = CGRectGetMidX(v94);
    v95.origin.x = v7;
    v95.origin.y = v9;
    v95.size.width = v11;
    v95.size.height = v13;
    MidY = CGRectGetMidY(v95);
    CGAffineTransformMakeRotation(&t1, a);
    v81 = *(_OWORD *)&t1.a;
    v80 = *(_OWORD *)&t1.c;
    v17 = -MidY;
    tx = t1.tx;
    ty = t1.ty;
    CGAffineTransformMakeTranslation(&t1, -MidX, v17);
    v20 = t1.a;
    b = t1.b;
    c = t1.c;
    d = t1.d;
    v24 = t1.tx;
    v25 = t1.ty;
    *(_OWORD *)&t2.a = v81;
    *(_OWORD *)&t2.c = v80;
    t2.tx = tx;
    t2.ty = ty;
    CGAffineTransformConcat(&v92, &t1, &t2);
    v81 = *(_OWORD *)&v92.a;
    v80 = *(_OWORD *)&v92.c;
    v26 = v92.tx;
    v27 = v92.ty;
    t1.a = v20;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = v24;
    t1.ty = v25;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.a = v81;
    *(_OWORD *)&t1.c = v80;
    t1.tx = v26;
    t1.ty = v27;
    CGAffineTransformConcat(&v92, &t1, &t2);
    t1.a = v82;
    t1.c = 0.0;
    t1.b = 0.0;
    t1.d = v83;
    t1.tx = v85;
    t1.ty = v84;
    t2 = v92;
    CGAffineTransformConcat(&v92, &t1, &t2);
    t1 = v92;
    v96.origin.x = 0.0;
    v96.origin.y = 0.0;
    v96.size.width = 1.0;
    v96.size.height = 1.0;
    v97 = CGRectApplyAffineTransform(v96, &t1);
    x = v97.origin.x;
    y = v97.origin.y;
    width = v97.size.width;
    height = v97.size.height;
  }
  else
  {
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v28 = t1.a;
  v29 = t1.b;
  v30 = t1.c;
  v31 = t1.d;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  v32 = t1.a;
  v85 = v28 - v30 * 0.0;
  v84 = v29 - v31 * 0.0;
  v98.origin.x = v28;
  v98.origin.y = v29;
  v98.size.width = v30;
  v82 = v30;
  v98.size.height = v31;
  v83 = v31;
  v33 = CGRectGetMidX(v98);
  v99.origin.x = v28;
  v99.origin.y = v29;
  v99.size.width = v30;
  v99.size.height = v31;
  v34 = CGRectGetMidY(v99);
  CGAffineTransformMakeRotation(&t1, v32);
  v81 = *(_OWORD *)&t1.a;
  v80 = *(_OWORD *)&t1.c;
  v35 = -v34;
  v36 = t1.tx;
  v37 = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v33, v35);
  v38 = t1.a;
  v39 = t1.b;
  v40 = t1.c;
  v41 = t1.d;
  v42 = t1.tx;
  v43 = t1.ty;
  *(_OWORD *)&t2.a = v81;
  *(_OWORD *)&t2.c = v80;
  t2.tx = v36;
  t2.ty = v37;
  CGAffineTransformConcat(&v92, &t1, &t2);
  v81 = *(_OWORD *)&v92.a;
  v80 = *(_OWORD *)&v92.c;
  v44 = v92.tx;
  v45 = v92.ty;
  t1.a = v38;
  t1.b = v39;
  t1.c = v40;
  t1.d = v41;
  t1.tx = v42;
  t1.ty = v43;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v81;
  *(_OWORD *)&t1.c = v80;
  t1.tx = v44;
  t1.ty = v45;
  CGAffineTransformConcat(&v92, &t1, &t2);
  t1.a = v82;
  t1.c = 0.0;
  t1.b = 0.0;
  t1.d = v83;
  t1.tx = v85;
  t1.ty = v84;
  t2 = v92;
  CGAffineTransformConcat(&v92, &t1, &t2);
  t2 = v92;
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&t1, 1.0);
  v46 = t1.a;
  v47 = t1.b;
  v48 = t1.c;
  v85 = t1.d;
  v84 = t1.tx;
  v49 = t1.ty;
  v50 = v89;
  v83 = v90;
  v82 = v91;
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.getter();
  v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v6, 1, v51) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    if (*(_QWORD *)&t1.b)
      swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v6, v51);
  }
  if (one-time initialization token for defaultMiterLimit != -1)
    swift_once();
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.ty = 0.0;
  t1.tx = 0.0;
  v53 = (const CGPath *)CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
  PathBoundingBox = CGPathGetPathBoundingBox(v53);
  v54 = PathBoundingBox.origin.x;
  v55 = PathBoundingBox.origin.y;
  v56 = PathBoundingBox.size.width;
  v57 = PathBoundingBox.size.height;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v92.b) & 1) != 0)
  {
    a_low = 1;
  }
  else
  {
    a_low = LOBYTE(v92.a);
    if (!LOBYTE(v92.a))
      goto LABEL_16;
  }
  v87 = a_low;
  CRRegister.wrappedValue.getter();
  v59 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v47, v48, v49, v50, v86);
  if (v59)
  {
    v60 = v59;
    v108 = CGPathGetPathBoundingBox(v59);
    v101.origin.x = v54;
    v101.origin.y = v55;
    v101.size.width = v56;
    v101.size.height = v57;
    v102 = CGRectUnion(v101, v108);
    v54 = v102.origin.x;
    v55 = v102.origin.y;
    v56 = v102.size.width;
    v57 = v102.size.height;

  }
LABEL_16:
  v61 = x;
  v62 = y;
  v63 = width;
  v64 = height;
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v92.b) & 1) != 0)
  {
    v65 = 1;
  }
  else
  {
    v65 = LOBYTE(v92.a);
    if (!LOBYTE(v92.a))
      goto LABEL_21;
  }
  v87 = v65;
  CRRegister.wrappedValue.getter();
  v66 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v85, v84, v83, v82, v86);
  if (v66)
  {
    v67 = v66;
    v109 = CGPathGetPathBoundingBox(v66);
    v103.origin.x = v54;
    v103.origin.y = v55;
    v103.size.width = v56;
    v103.size.height = v57;
    v104 = CGRectUnion(v103, v109);
    v54 = v104.origin.x;
    v55 = v104.origin.y;
    v56 = v104.size.width;
    v57 = v104.size.height;

  }
LABEL_21:
  v105.origin.x = v54;
  v105.origin.y = v55;
  v105.size.width = v56;
  v105.size.height = v57;
  v110.origin.x = v61;
  v110.origin.y = v62;
  v110.size.width = v63;
  v110.size.height = v64;
  v106 = CGRectUnion(v105, v110);
  v68 = v106.origin.x;
  v69 = v106.origin.y;
  v70 = v106.size.width;
  v71 = v106.size.height;

  v72 = v68;
  v73 = v69;
  v74 = v70;
  v75 = v71;
  result.size.height = v75;
  result.size.width = v74;
  result.origin.y = v73;
  result.origin.x = v72;
  return result;
}

void Shape.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, __C::CGRect_optional *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  double v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  double v60;
  void *v61;
  id v62;
  id v63;
  unsigned int (**v64)(_QWORD, _QWORD, _QWORD);
  uint64_t v65;
  CGFloat x;
  double y;
  CGFloat width;
  CGFloat height;
  id v70;
  void *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  CGFloat MinX;
  double v77;
  CGFloat v78;
  id v79;
  id v80;
  Class isa;
  unsigned int (**v82)(_QWORD, _QWORD, _QWORD);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  id v95;
  uint64_t v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int v107;
  id *v108;
  CGFloat v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  void *v115;
  id v116;
  CGFloat v117;
  id v118;
  double v119;
  CGFloat v120;
  id v121;
  id v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Class v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  Class v132;
  void *v133;
  char *v134;
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int (**v141)(_QWORD, _QWORD, _QWORD);
  void *v142;
  id v143;
  uint64_t v144;
  void *v145;
  void *v146;
  char *v147;
  id v148;
  uint64_t v149;
  void *v150;
  unsigned int (**v151)(_QWORD, _QWORD, _QWORD);
  id v152;
  uint64_t v153;
  char v154;
  void (*v155)(char *, uint64_t);
  unsigned int (**v156)(_QWORD, _QWORD, _QWORD);
  CGFloat v157;
  void *v158;
  unsigned int (**v159)(_QWORD, _QWORD, _QWORD);
  id v160;
  uint64_t v161;
  char v162;
  unsigned int (**v163)(_QWORD, _QWORD, _QWORD);
  CGFloat v164;
  id v165;
  uint64_t v166;
  char v167;
  CGFloat v168;
  unsigned int (**v169)(_QWORD, _QWORD, _QWORD);
  char *v170;
  uint64_t v171;
  double v172;
  double v173;
  double v174;
  uint64_t v175;
  unsigned int (**v176)(_QWORD, _QWORD, _QWORD);
  CGFloat v177;
  CGFloat v178;
  CGSize size;
  double v180;
  double v181;
  double MinY;
  double v183;
  uint64_t v184;
  double v185;
  unsigned int (**v186)(_QWORD, _QWORD, _QWORD);
  CGFloat v187;
  CGFloat v188;
  CGFloat v189;
  CGFloat v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  uint64_t v196;
  char *v197;
  int v198;
  CGFloat v199;
  uint64_t v200;
  char *v201;
  double v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  double v214;
  double v215;
  CGFloat v216;
  CGFloat v217;
  CGFloat v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int (**v233)(_QWORD, _QWORD, _QWORD);
  uint64_t v234;
  __C::CGRect_optional *v235;
  uint64_t v236;
  double v237;
  unint64_t v238;
  double v239;
  CGRect v240;
  double v241;
  double v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int16 v246;
  char v247;
  char v248[8];
  double v249;
  CGRect v250;
  char v251;
  __C::CGRect v252;
  CGRect v253;
  CGRect v254;
  CGRect v255;
  CGRect v256;
  CGRect v257;
  CGRect v258;
  CGRect v259;
  CGRect v260;
  CGRect v261;
  CGRect v262;
  CGRect v263;
  CGRect v264;

  v9 = v8;
  v223 = a8;
  v225 = a7;
  v224 = a5;
  v230 = a2;
  v235 = a4;
  outlined init with take of CGRect?((uint64_t)a4, (uint64_t)v248);
  v202 = v249;
  v226 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v209 = *(_QWORD *)(v226 - 8);
  MEMORY[0x1E0C80A78](v226, v13);
  v219 = (char *)&v196 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v203 = (char *)&v196 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  v204 = *(_QWORD *)(v206 - 8);
  MEMORY[0x1E0C80A78](v206, v18);
  v205 = (char *)&v196 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v222 = *(_QWORD *)(v232 - 8);
  MEMORY[0x1E0C80A78](v232, v20);
  v208 = (char *)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v207 = (char *)&v196 - v24;
  v25 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v25, v26);
  v201 = (char *)&v196 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v196 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v220 = (uint64_t)&v196 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v196 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v196 - v41;
  v231 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v233 = *(unsigned int (***)(_QWORD, _QWORD, _QWORD))(v231 - 8);
  MEMORY[0x1E0C80A78](v231, v43);
  v45 = (char *)&v196 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46, v47);
  v229 = (uint64_t)&v196 - v48;
  v228 = type metadata accessor for Date();
  v227 = *(_QWORD *)(v228 - 8);
  MEMORY[0x1E0C80A78](v228, v49);
  v51 = (char *)&v196 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = *a1;
  v52 = *(double *)a6;
  v218 = *(double *)(a6 + 8);
  v217 = *(double *)(a6 + 16);
  v216 = *(double *)(a6 + 24);
  v215 = *(double *)(a6 + 32);
  v214 = *(double *)(a6 + 40);
  v213 = *(_QWORD *)(a6 + 48);
  v212 = *(_QWORD *)(a6 + 56);
  v211 = *(_QWORD *)(a6 + 64);
  v210 = *(unsigned __int8 *)(a6 + 74);
  v53 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  v237 = COERCE_DOUBLE(swift_dynamicCastClass());
  if (v237 == 0.0)
    return;
  v198 = v53;
  v199 = v52;
  v197 = v31;
  v236 = v25;
  v54 = v9;
  v55 = v9 + *(int *)(v25 + 52);
  v56 = type metadata accessor for ShapeSecondaryProperties();
  v57 = *(int *)(v56 + 28);
  v200 = v55;
  v58 = v55 + v57;
  v59 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v234 = v58;
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v240.origin.x) & 0x20) != 0)
  {
    v60 = v237;
    if ((LOBYTE(v240.origin.x) & 0x40) != 0)
    {
      *(_BYTE *)(*(_QWORD *)&v237 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 1;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v230, (uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      v64 = v233;
      v65 = v231;
      if (((unsigned int (**)(char *, uint64_t, uint64_t))v233)[6](v38, 1, v231) == 1)
      {

        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        return;
      }
      ((unsigned int (**)(char *, char *, uint64_t))v64)[4](v45, v38, v65);
      v90 = v221;
      v91 = (void *)v221;
      v92 = v236;
      if (v221 >> 62)
      {
        if (v221 >> 62 != 1)
        {
          ((void (*)(char *, uint64_t))v233[1])(v45, v65);

          return;
        }
        v91 = (void *)(v221 & 0x3FFFFFFFFFFFFFFFLL);
      }
      outlined copy of PaperDocument.PDFDocumentUse(v221);
      v93 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v91, (uint64_t)v45, 0, v224, v92, v225, v93, (char *)&protocol witness table for Shape, v223);
      outlined consume of PaperDocument.PDFDocumentUse(v90);

      ((void (*)(char *, uint64_t))v233[1])(v45, v65);
      return;
    }
  }
  else
  {
    v60 = v237;
  }
  *(_BYTE *)(*(_QWORD *)&v60 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
  Shape.setAKAnnotation(on:in:)(*(uint64_t *)&v60, (uint64_t)v235);
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v240.origin.x) & 0x40) == 0)
  {
    v61 = *(void **)(*(_QWORD *)&v60 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
    if (v61)
    {
      v62 = v59;
      v63 = v61;
      objc_msgSend(v63, sel_drawingBounds);
      objc_msgSend(*(id *)&v60, sel_setBounds_);

    }
    else
    {
      v252 = Shape.renderFrame(in:)(v235);
      x = v252.origin.x;
      y = v252.origin.y;
      width = v252.size.width;
      height = v252.size.height;
      v70 = objc_msgSend(*(id *)&v60, sel_page);
      if (v70)
      {
        v71 = v70;
        objc_msgSend(v70, sel_boundsForBox_, 0);
        v73 = v72;
        v75 = v74;

        v253.origin.x = x;
        v253.origin.y = y;
        v253.size.width = width;
        v253.size.height = height;
        MinX = CGRectGetMinX(v253);
        v254.origin.x = x;
        v254.origin.y = y;
        v254.size.width = width;
        v254.size.height = height;
        v77 = v75 + v73 + v73 - CGRectGetMaxY(v254);
        v255.origin.x = x;
        v255.origin.y = y;
        v255.size.width = width;
        v255.size.height = height;
        v78 = CGRectGetWidth(v255);
        v256.origin.x = x;
        v256.origin.y = y;
        v256.size.width = width;
        v256.size.height = height;
        height = CGRectGetHeight(v256);
        width = v78;
        x = MinX;
        y = v77;
      }
      v79 = v59;
      v257.origin.x = x;
      v257.origin.y = y;
      v257.size.width = width;
      v257.size.height = height;
      v258 = CGRectIntegral(v257);
      objc_msgSend(*(id *)&v60, sel_setBounds_, v258.origin.x, v258.origin.y, v258.size.width, v258.size.height);
    }

  }
  v196 = v56;
  v80 = v59;
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v227 + 8))(v51, v228);
  objc_msgSend(*(id *)&v60, sel_setModificationDate_, isa);

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v230, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v82 = v233;
  v83 = v231;
  if (((unsigned int (**)(char *, uint64_t, uint64_t))v233)[6](v42, 1, v231) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v84 = v54;
    v85 = v236;
    goto LABEL_25;
  }
  ((unsigned int (**)(uint64_t, char *, uint64_t))v82)[4](v229, v42, v83);
  v86 = (void *)v221;
  v84 = v54;
  v85 = v236;
  if (!(v221 >> 62))
    goto LABEL_19;
  if (v221 >> 62 == 1)
  {
    v86 = (void *)(v221 & 0x3FFFFFFFFFFFFFFFLL);
LABEL_19:
    v87 = v221;
    outlined copy of PaperDocument.PDFDocumentUse(v221);
    v88 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v89 = v229;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v86, v229, 1, v224, v85, v225, v88, (char *)&protocol witness table for Shape, v223);
    outlined consume of PaperDocument.PDFDocumentUse(v87);
    ((void (*)(uint64_t, uint64_t))v82[1])(v89, v83);
    goto LABEL_25;
  }
  ((void (*)(uint64_t, uint64_t))v82[1])(v229, v83);
LABEL_25:
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v240.origin.x) & 0x20) != 0)
  {

    return;
  }
  v94 = v198 | (v210 << 16);
  v95 = v80;
  v96 = v200;
  v97 = (void *)CRAttributedString.attributedString.getter();
  v98 = objc_msgSend(v97, sel_string);

  v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v101 = v100;

  if (!v99 && v101 == 0xE000000000000000)
  {
    swift_bridgeObjectRelease();
    v102 = v220;
    outlined init with copy of PKStrokeProperties(v84, v220, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
LABEL_31:
    outlined destroy of Shape(v102);
    goto LABEL_32;
  }
  v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v102 = v220;
  outlined init with copy of PKStrokeProperties(v84, v220, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if ((v103 & 1) != 0)
    goto LABEL_31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  v109 = v240.origin.x;
  outlined destroy of Shape(v102);
  if (v109 == 0.0)
  {
LABEL_32:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    v104 = v207;
    CRRegister.wrappedValue.getter();
    v105 = v205;
    TaggedValue_9.taggedEnum.getter();
    v106 = v204;
    v107 = (*(uint64_t (**)(char *, uint64_t))(v204 + 88))(v105, v206);
    if (v107 != *MEMORY[0x1E0D12028])
    {
      if (v107 == *MEMORY[0x1E0D12030])
      {
        v108 = (id *)MEMORY[0x1E0CD0E20];
        goto LABEL_40;
      }
      if (v107 == *MEMORY[0x1E0D12038])
      {
        v108 = (id *)MEMORY[0x1E0CD0E38];
        goto LABEL_40;
      }
      if (v107 != *MEMORY[0x1E0D12050])
      {
        v155 = *(void (**)(char *, uint64_t))(v106 + 8);
        v113 = (id)*MEMORY[0x1E0CD0E58];
        v155(v205, v206);
        v104 = v207;
        goto LABEL_41;
      }
    }
    v108 = (id *)MEMORY[0x1E0CD0E50];
LABEL_40:
    v113 = *v108;
LABEL_41:
    (*(void (**)(char *, uint64_t))(v222 + 8))(v104, v232);
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v112 = v114;

    goto LABEL_42;
  }
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v112 = v111;
LABEL_42:
  v115 = (void *)MEMORY[0x1DF0E41AC](v110, v112);
  swift_bridgeObjectRelease();
  objc_msgSend(*(id *)&v237, sel_setType_, v115);

  v240.origin.x = v199;
  v240.origin.y = v218;
  v240.size.width = v217;
  v240.size.height = v216;
  v241 = v215;
  v242 = v214;
  v243 = v213;
  v244 = v212;
  v245 = v211;
  v247 = BYTE2(v94);
  v246 = v94;
  CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)((uint64_t)v235, v84, v224, (uint64_t)&v240, v225, v85, v223, (uint64_t)&protocol witness table for Shape);
  v116 = v95;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  v117 = v240.origin.x;
  if (*(_QWORD *)&v240.origin.x)
  {
    v118 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v240.origin.x);

  }
  else
  {
    v118 = 0;
  }
  v119 = v237;
  objc_msgSend(*(id *)&v237, sel_setInteriorColor_, v118);
  v233 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))v116;

  CRRegister.wrappedValue.getter();
  v120 = v240.origin.x;
  if (*(_QWORD *)&v240.origin.x)
  {
    v121 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v240.origin.x);

    objc_msgSend(*(id *)&v119, sel_setColor_, v121);
    v122 = objc_msgSend(*(id *)&v119, sel_border);
    if (!v122)
      v122 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD0DB0]), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    objc_msgSend(v122, sel_setLineWidth_, v240.origin.x);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    v123 = v203;
    CRRegister.wrappedValue.getter();
    v124 = (uint64_t)v123;
    v125 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
    v126 = *(_QWORD *)(v125 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v124, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
      v127 = 0;
      v128 = v209;
      v129 = v226;
    }
    else
    {
      TaggedValue_2.tagged1.getter();
      v131 = *(_QWORD *)&v240.origin.y;
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v124, v125);
      v129 = v226;
      if (v131)
      {
        specialized _arrayForceCast<A, B>(_:)(v131);
        swift_bridgeObjectRelease();
        v127 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v127 = 0;
      }
      v128 = v209;
      v96 = v200;
    }
    objc_msgSend(v122, sel_setDashPattern_, v127);

    v130 = v237;
    objc_msgSend(*(id *)&v237, sel_setBorder_, v122);

  }
  else
  {
    objc_msgSend(*(id *)&v119, sel_removeValueForAnnotationKey_, *MEMORY[0x1E0CD0DE0]);
    objc_msgSend(*(id *)&v119, sel_setBorder_, 0);
    v128 = v209;
    v130 = v119;
    v129 = v226;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v132 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v133 = (void *)MEMORY[0x1DF0E41AC](4277039, 0xE300000000000000);
  objc_msgSend(*(id *)&v130, sel_setValue_forAnnotationKey_, v132, v133);

  v134 = v219;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v219, v96, v129);
  v135 = (void *)CRAttributedString.attributedString.getter();
  v136 = objc_msgSend(v135, sel_string);

  v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v139 = v138;

  if (v137 || v139 != 0xE000000000000000)
  {
    v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v140 & 1) == 0)
    {
      v141 = v233;
      v142 = (void *)CRAttributedString.attributedString.getter();
      v143 = objc_msgSend(v142, sel_string);

      if (!v143)
      {
        v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v143 = (id)MEMORY[0x1DF0E41AC](v144);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(*(id *)&v130, sel_setContents_, v143);

      v145 = (void *)CRAttributedString.attributedString.getter();
      v146 = (void *)CRAttributedString.attributedString.getter();
      v147 = (char *)objc_msgSend(v146, sel_length);

      if (__OFSUB__(v147, 1))
      {
        __break(1u);
        JUMPOUT(0x1DDE70A80);
      }
      v148 = objc_msgSend(v145, sel_attributesAtIndex_effectiveRange_, v147 - 1, 0);

      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      v149 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(_QWORD *)(v149 + 16))
      {
        v150 = (void *)*MEMORY[0x1E0DC1138];
        v151 = v141;
        v152 = v150;
        v153 = specialized __RawDictionaryStorage.find<A>(_:)(v152);
        v130 = v237;
        if ((v154 & 1) != 0)
          outlined init with copy of Any(*(_QWORD *)(v149 + 56) + 32 * v153, (uint64_t)&v240);
        else
          memset(&v240, 0, sizeof(v240));

      }
      else
      {
        memset(&v240, 0, sizeof(v240));
        v156 = v141;
        v130 = v237;
      }
      if (*(_QWORD *)&v240.size.height)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
        if (swift_dynamicCast())
          v157 = v250.origin.x;
        else
          v157 = 0.0;
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v240, &demangling cache variable for type metadata for Any?);
        v157 = 0.0;
      }
      objc_msgSend(*(id *)&v130, sel_setFont_, *(_QWORD *)&v157);

      if (*(_QWORD *)(v149 + 16))
      {
        v158 = (void *)*MEMORY[0x1E0DC1140];
        v159 = v141;
        v160 = v158;
        v161 = specialized __RawDictionaryStorage.find<A>(_:)(v160);
        if ((v162 & 1) != 0)
          outlined init with copy of Any(*(_QWORD *)(v149 + 56) + 32 * v161, (uint64_t)&v240);
        else
          memset(&v240, 0, sizeof(v240));

      }
      else
      {
        memset(&v240, 0, sizeof(v240));
        v163 = v141;
      }
      if (*(_QWORD *)&v240.size.height)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        if (swift_dynamicCast())
          v164 = v250.origin.x;
        else
          v164 = 0.0;
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v240, &demangling cache variable for type metadata for Any?);
        v164 = 0.0;
      }
      objc_msgSend(*(id *)&v130, sel_setFontColor_, *(_QWORD *)&v164);

      if (*(_QWORD *)(v149 + 16))
      {
        v165 = (id)*MEMORY[0x1E0DC1178];
        v166 = specialized __RawDictionaryStorage.find<A>(_:)(v165);
        if ((v167 & 1) != 0)
          outlined init with copy of Any(*(_QWORD *)(v149 + 56) + 32 * v166, (uint64_t)&v240);
        else
          memset(&v240, 0, sizeof(v240));

      }
      else
      {
        memset(&v240, 0, sizeof(v240));
      }
      swift_bridgeObjectRelease();
      if (*(_QWORD *)&v240.size.height)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v168 = v250.origin.x;
          v169 = v141;
          objc_msgSend(*(id *)&v130, sel_setAlignment_, objc_msgSend(*(id *)&v168, sel_alignment));

        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v240, &demangling cache variable for type metadata for Any?);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v170 = v208;
  CRRegister.wrappedValue.getter();
  v171 = v232;
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(v222 + 8))(v170, v171);
  if ((v243 & 1) == 0)
  {
    v237 = v242;
    v172 = v241;
    v173 = v240.origin.y;
    v174 = v240.origin.x;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
    CRRegister.wrappedValue.getter();
    if ((LOBYTE(v240.origin.y) & 1) == 0)
      __asm { BR              X10 }
    v175 = (uint64_t)v201;
    objc_msgSend(*(id *)&v130, sel_setStartLineStyle_, 5);
    CRRegister.wrappedValue.getter();
    if ((LOBYTE(v240.origin.y) & 1) == 0)
      __asm { BR              X10 }
    objc_msgSend(*(id *)&v130, sel_setEndLineStyle_, 5);
    v176 = v233;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v178 = v240.origin.y;
    v177 = v240.origin.x;
    size = v240.size;
    v180 = CGRectGetMinX(v240);
    v259.origin.x = v177;
    v259.origin.y = v178;
    v259.size = size;
    v181 = v180 + v174 * CGRectGetWidth(v259);
    v260.origin.x = v177;
    v260.origin.y = v178;
    v260.size = size;
    MinY = CGRectGetMinY(v260);
    v261.origin.x = v177;
    v261.origin.y = v178;
    v261.size = size;
    v183 = MinY + v173 * CGRectGetHeight(v261);
    v184 = (uint64_t)v197;
    outlined init with copy of PKStrokeProperties(v84, (uint64_t)v197, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    outlined init with take of CGRect?((uint64_t)v235, (uint64_t)&v240);
    if ((LOBYTE(v241) & 1) != 0)
    {
      CRRegister.wrappedValue.getter();
      v185 = v250.size.height;
      outlined destroy of Shape(v184);
    }
    else
    {
      outlined destroy of Shape(v184);
      v185 = v202;
    }
    objc_msgSend(*(id *)&v130, sel_setStartPoint_, v181, v185 - v183);

    v186 = v176;
    CRRegister.wrappedValue.getter();
    v187 = v250.origin.x;
    v188 = v250.origin.y;
    v189 = v250.size.width;
    v190 = v250.size.height;
    v191 = CGRectGetMinX(v250);
    v262.origin.x = v187;
    v262.origin.y = v188;
    v262.size.width = v189;
    v262.size.height = v190;
    v192 = v191 + v172 * CGRectGetWidth(v262);
    v263.origin.x = v187;
    v263.origin.y = v188;
    v263.size.width = v189;
    v263.size.height = v190;
    v193 = CGRectGetMinY(v263);
    v264.origin.x = v187;
    v264.origin.y = v188;
    v264.size.width = v189;
    v264.size.height = v190;
    v194 = v193 + v237 * CGRectGetHeight(v264);
    outlined init with copy of PKStrokeProperties(v84, v175, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    outlined init with take of CGRect?((uint64_t)v235, (uint64_t)&v250);
    if ((v251 & 1) != 0)
    {
      CRRegister.wrappedValue.getter();
      v195 = v239;
      outlined destroy of Shape(v175);
    }
    else
    {
      outlined destroy of Shape(v175);
      v195 = v202;
    }
    objc_msgSend(*(id *)&v130, sel_setEndPoint_, v192, v195 - v194);

  }
  CRRegister.wrappedValue.getter();
  objc_msgSend(*(id *)&v130, sel_setHidden_, v238 & 1);
  CRRegister.wrappedValue.getter();
  objc_msgSend(*(id *)&v130, sel_setReadOnlyAnnotation_, (v238 >> 1) & 1);
  CRRegister.wrappedValue.getter();
  objc_msgSend(*(id *)&v130, sel_setLocked_, (v238 >> 2) & 1);
  CRRegister.wrappedValue.getter();
  if ((v238 & 0x100) != 0)
  {
    objc_msgSend(*(id *)&v130, sel_setShouldBurnIn_, 1);

    (*(void (**)(char *, uint64_t))(v128 + 8))(v134, v129);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v128 + 8))(v134, v129);

  }
}

void Shape.setAKAnnotation(on:in:)(uint64_t a1, uint64_t a2)
{
  double v2;
  CGFloat v3;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  id v48;
  double v49;
  double v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  double v55;
  double v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  double v70;
  char *v71;
  CGFloat v72;
  double v73;
  double v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  CGFloat v78;
  double MinX;
  double v80;
  double v81;
  CGFloat v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  _BOOL8 v89;
  double x;
  double Width;
  double Height;
  CGFloat v93;
  double y;
  double v95;
  double v96;
  double v97;
  id v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  double v103;
  double v104;
  double MinY;
  double v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t x_low;
  CGFloat v112;
  id v113;
  double v114;
  double MaxY;
  double v116;
  CGFloat v117;
  uint64_t v118;
  void *v119;
  id v120;
  _QWORD v121[2];
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  double v129;
  CGFloat v130;
  uint64_t v131;
  double v132;
  CGRect v133;
  double v134;
  double v135;
  char v136[8];
  double v137;
  double v138;
  char v139[8];
  double v140;
  double v141;
  char v142;
  char v143[8];
  double v144;
  double v145;
  char v146;
  uint64_t v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;

  v3 = v2;
  v147 = *MEMORY[0x1E0C80C00];
  v131 = a2;
  outlined init with take of CGRect?(a2, (uint64_t)v136);
  v5 = v137;
  v6 = v138;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v123 = (char *)v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v127 = (char *)v121 - v12;
  v13 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v13, v14);
  v124 = (uint64_t)v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v128 = (char *)v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)&v129 = (char *)v121 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v121 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v121 - v29;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v121 - v33;
  v35 = Shape.akAnnotation(for:)(a1);
  if (v35)
  {
    v36 = v35;
    v37 = *(_QWORD *)&v2 + *(int *)(v13 + 52);
    v121[0] = type metadata accessor for ShapeSecondaryProperties();
    v38 = *(int *)(v121[0] + 28);
    v121[1] = v37;
    v39 = v37 + v38;
    v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    v126 = v39;
    CRRegister.wrappedValue.getter();
    if ((LOBYTE(v133.origin.x) & 0x20) != 0 && (LOBYTE(v133.origin.x) & 0x40) != 0)
      goto LABEL_48;
    objc_opt_self();
    v40 = swift_dynamicCastObjCClass();
    v122 = a1;
    if (v40)
    {
      v41 = (void *)v40;
      v42 = v36;
      Shape.addAKRectangularShapeAnnotationProperties(to:in:)(v41, v131);
    }
    else
    {
      objc_opt_self();
      v43 = swift_dynamicCastObjCClass();
      if (v43)
      {
        v44 = (void *)v43;
        v45 = v36;
        Shape.addAKArrowAnnotationProperties(to:in:)(v44, v131);
      }
      else
      {
        objc_opt_self();
        v46 = swift_dynamicCastObjCClass();
        if (!v46)
        {
          objc_opt_self();
          v46 = swift_dynamicCastObjCClass();
          if (!v46)
          {
LABEL_13:
            v130 = v3;
            objc_opt_self();
            v57 = swift_dynamicCastObjCClass();
            if (v57)
            {
              v58 = (void *)v57;
              v59 = v36;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              CRRegister.wrappedValue.getter();
              TaggedValue_9.tagged6.getter();
              (*(void (**)(char *, uint64_t))(v17 + 8))(v34, v16);
              if ((LOBYTE(v133.origin.y) & 1) == 0)
              {
                x = v133.origin.x;
                CRRegister.wrappedValue.getter();
                if ((LOBYTE(v133.origin.x) & 0x20) == 0)
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
                  CRRegister.wrappedValue.getter();
                  Width = CGRectGetWidth(v133);
                  CRRegister.wrappedValue.getter();
                  Height = CGRectGetHeight(v133);
                  if (Height >= Width)
                    Height = Width;
                  objc_msgSend(v58, sel_setCornerRadius_, x * Height);
                }
                goto LABEL_46;
              }

            }
            objc_opt_self();
            v60 = swift_dynamicCastObjCClass();
            if (v60)
            {
              v61 = (void *)v60;
              v59 = v36;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              CRRegister.wrappedValue.getter();
              TaggedValue_9.tagged7.getter();
              (*(void (**)(char *, uint64_t))(v17 + 8))(v30, v16);
              if (LOBYTE(v133.origin.y) != 1)
              {
                v93 = v133.origin.x;
                CRRegister.wrappedValue.getter();
                if ((LOBYTE(v133.origin.x) & 0x20) == 0)
                  objc_msgSend(v61, sel_setPointCount_, *(_QWORD *)&v93);
                goto LABEL_46;
              }

            }
            objc_opt_self();
            v62 = swift_dynamicCastObjCClass();
            if (v62)
            {
              v63 = (void *)v62;
              v59 = v36;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              CRRegister.wrappedValue.getter();
              TaggedValue_9.tagged8.getter();
              (*(void (**)(char *, uint64_t))(v17 + 8))(v26, v16);
              if ((LOBYTE(v133.size.width) & 1) == 0)
              {
                y = v133.origin.y;
                CRRegister.wrappedValue.getter();
                if ((LOBYTE(v133.origin.x) & 0x20) == 0)
                {
                  objc_msgSend(v63, sel_setPointCount_, 5);
                  objc_msgSend(v63, sel_setInnerRadiusFactor_, y);
                }
                goto LABEL_46;
              }

            }
            objc_opt_self();
            v64 = swift_dynamicCastObjCClass();
            v65 = *(_QWORD *)&v130;
            if (!v64)
              goto LABEL_25;
            v66 = (void *)v64;
            v59 = v36;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
            v67 = *(char **)&v129;
            CRRegister.wrappedValue.getter();
            TaggedValue_9.tagged5.getter();
            (*(void (**)(char *, uint64_t))(v17 + 8))(v67, v16);
            if ((LOBYTE(v133.size.height) & 1) != 0)
            {

LABEL_25:
              objc_opt_self();
              v68 = swift_dynamicCastObjCClass();
              a1 = v122;
              if (v68)
              {
                v69 = (void *)v68;
                v70 = COERCE_DOUBLE(v36);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
                v71 = v128;
                CRRegister.wrappedValue.getter();
                TaggedValue_9.tagged4.getter();
                (*(void (**)(char *, uint64_t))(v17 + 8))(v71, v16);
                v72 = v133.origin.x;
                if (*(_QWORD *)&v133.origin.x)
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
                  CRRegister.wrappedValue.getter();
                  objc_msgSend(v69, sel_setRectangle_, v133.origin.x, v133.origin.y, v133.size.width, v133.size.height);
                  outlined init with take of CGRect?(v131, (uint64_t)v139);
                  if ((v142 & 1) == 0)
                  {
                    v73 = v140;
                    v74 = v141;
                    objc_msgSend(v69, sel_rectangle);
                    v75 = v152.origin.x;
                    v76 = v152.origin.y;
                    v77 = v152.size.width;
                    v78 = v152.size.height;
                    MinX = CGRectGetMinX(v152);
                    v153.origin.x = v75;
                    v153.origin.y = v76;
                    v153.size.width = v77;
                    v153.size.height = v78;
                    v80 = v74 + v73 + v73 - CGRectGetMaxY(v153);
                    v154.origin.x = v75;
                    v154.origin.y = v76;
                    v154.size.width = v77;
                    v154.size.height = v78;
                    v81 = CGRectGetWidth(v154);
                    v155.origin.x = v75;
                    v155.origin.y = v76;
                    v155.size.width = v77;
                    v155.size.height = v78;
                    objc_msgSend(v69, sel_setRectangle_, MinX, v80, v81, CGRectGetHeight(v155));
                  }
                  CRRegister.wrappedValue.getter();
                  if ((LOBYTE(v133.origin.x) & 0x20) != 0)
                  {

                  }
                  else
                  {
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
                    CRRegister.value.getter();
                    objc_msgSend(v69, sel_setRotationAngle_, -v133.origin.x);
                    CRRegister.wrappedValue.getter();
                    objc_msgSend(v69, sel_setStrokeWidth_, v133.origin.x);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
                    CRRegister.wrappedValue.getter();
                    v82 = v133.origin.x;
                    v129 = v70;
                    if (*(_QWORD *)&v133.origin.x)
                    {
                      v83 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v133.origin.x);

                      CRRegister.wrappedValue.getter();
                      v82 = COERCE_DOUBLE(objc_msgSend(v83, sel_colorWithAlphaComponent_, v132));

                    }
                    objc_msgSend(v69, sel_setStrokeColor_, *(_QWORD *)&v82);

                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
                    v84 = v127;
                    CRRegister.wrappedValue.getter();
                    v85 = (uint64_t)v84;
                    v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
                    v87 = *(_QWORD *)(v86 - 8);
                    v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
                    if (v88(v85, 1, v86) == 1)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?(v85, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
                      v89 = 0;
                    }
                    else
                    {
                      TaggedValue_2.tagged1.getter();
                      if (*(_QWORD *)&v133.origin.y)
                      {
                        v109 = *(_QWORD *)(*(_QWORD *)&v133.origin.y + 16);
                        swift_bridgeObjectRelease();
                        v89 = v109 != 0;
                      }
                      else
                      {
                        v89 = 0;
                      }
                      (*(void (**)(char *, uint64_t))(v87 + 8))(v127, v86);
                    }
                    objc_msgSend(v69, sel_setDashed_, v89);
                    v110 = (uint64_t)v123;
                    CRRegister.wrappedValue.getter();
                    if (v88(v110, 1, v86) == 1)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?(v110, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
                      x_low = 0;
                      a1 = v122;
                      v70 = v129;
                    }
                    else
                    {
                      TaggedValue_2.tagged2.getter();
                      a1 = v122;
                      v70 = v129;
                      if ((LOBYTE(v133.origin.y) & 1) != 0)
                        x_low = 0;
                      else
                        x_low = LOBYTE(v133.origin.x);
                      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v110, v86);
                    }
                    objc_msgSend(v69, sel_setBrushStyle_, x_low);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
                    CRRegister.wrappedValue.getter();
                    v112 = v133.size.height;
                    if (*(_QWORD *)&v133.size.height)

                    objc_msgSend(v69, sel_setHasShadow_, *(_QWORD *)&v112 != 0);
                    v113 = *(id *)&v72;
                    CRRegister.wrappedValue.getter();
                    v114 = CGRectGetMinX(v133);
                    CRRegister.wrappedValue.getter();
                    MaxY = CGRectGetMaxY(v133);
                    CRRegister.wrappedValue.getter();
                    v116 = CGRectGetWidth(v133);
                    CRRegister.wrappedValue.getter();
                    v117 = CGRectGetHeight(v133);
                    v133.origin.x = v116;
                    v133.size.width = 0.0;
                    v133.origin.y = 0.0;
                    v133.size.height = -v117;
                    v134 = v114 - v116 * 0.0;
                    v135 = MaxY + v117 * 0.0;
                    v118 = MEMORY[0x1DF0E5880](v113, &v133);
                    if (!v118)
                    {
                      __break(1u);
                      return;
                    }
                    v119 = (void *)v118;
                    v120 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, v118);

                    objc_msgSend(v69, sel_setPath_, v120);
                  }
                }

              }
              goto LABEL_48;
            }
            v95 = v133.size.width;
            v96 = v133.origin.y;
            v97 = v133.origin.x;
            CRRegister.wrappedValue.getter();
            if ((LOBYTE(v133.origin.x) & 0x20) == 0)
            {
              objc_msgSend(v66, sel_setPointyBitBaseWidthAngle_, v95 * 180.0 / 3.14159265 + v95 * 180.0 / 3.14159265);
              v98 = v59;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
              CRRegister.wrappedValue.getter();
              v129 = v96;
              v99 = v133.origin.x;
              v100 = v133.origin.y;
              v101 = v133.size.width;
              v102 = v133.size.height;
              v103 = CGRectGetMinX(v133);
              v156.origin.x = v99;
              v156.origin.y = v100;
              v156.size.width = v101;
              v156.size.height = v102;
              v104 = v103 + v97 * CGRectGetWidth(v156);
              v157.origin.x = v99;
              v157.origin.y = v100;
              v157.size.width = v101;
              v157.size.height = v102;
              MinY = CGRectGetMinY(v157);
              v158.origin.x = v99;
              v158.origin.y = v100;
              v158.size.width = v101;
              v158.size.height = v102;
              v106 = MinY + v129 * CGRectGetHeight(v158);
              v107 = v124;
              outlined init with copy of PKStrokeProperties(v65, v124, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
              outlined init with take of CGRect?(v131, (uint64_t)&v133);
              if (LOBYTE(v134) == 1)
              {
                CRRegister.wrappedValue.getter();
                v5 = v140;
                v6 = v141;
              }
              outlined destroy of Shape(v107);
              objc_msgSend(v66, sel_setPointyBitPoint_, v104, v6 + v5 + v5 - v106);

              goto LABEL_47;
            }
LABEL_46:

LABEL_47:
            a1 = v122;
LABEL_48:
            v108 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
            *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation) = v36;

            return;
          }
        }
        v47 = (void *)v46;
        v48 = v36;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.getter();
        objc_msgSend(v47, sel_setRectangle_, v133.origin.x, v133.origin.y, v133.size.width, v133.size.height);
        outlined init with take of CGRect?(v131, (uint64_t)v143);
        if ((v146 & 1) == 0)
        {
          v49 = v144;
          v50 = v145;
          objc_msgSend(v47, sel_rectangle);
          v51 = v148.origin.x;
          v52 = v148.origin.y;
          v53 = v148.size.width;
          v54 = v148.size.height;
          v130 = CGRectGetMinX(v148);
          v149.origin.x = v51;
          v149.origin.y = v52;
          v149.size.width = v53;
          v149.size.height = v54;
          v55 = v50 + v49 + v49 - CGRectGetMaxY(v149);
          v150.origin.x = v51;
          v150.origin.y = v52;
          v150.size.width = v53;
          v150.size.height = v54;
          v56 = CGRectGetWidth(v150);
          v151.origin.x = v51;
          v151.origin.y = v52;
          v151.size.width = v53;
          v151.size.height = v54;
          objc_msgSend(v47, sel_setRectangle_, v130, v55, v56, CGRectGetHeight(v151));
        }
      }
    }

    goto LABEL_13;
  }
}

double protocol witness for CanvasElement.rotation.getter in conformance Shape()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance Shape(double a1)
{
  uint64_t result;
  double v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  result = CRRegister.value.getter();
  if (vabdd_f64(v3, a1) > 0.01)
    return CRRegister.value.setter();
  return result;
}

void (*protocol witness for CanvasElement.rotation.modify in conformance Shape(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Shape.rotation.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for CanvasElement.flags.getter in conformance Shape()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for CanvasElement.flags.setter in conformance Shape()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

void (*protocol witness for CanvasElement.flags.modify in conformance Shape(_QWORD *a1, uint64_t a2))(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[2] = v2;
  *((_DWORD *)v5 + 8) = *(_DWORD *)(a2 + 52);
  *((_DWORD *)v5 + 9) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 28);
  v5[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  return Shape.flags.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 5;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Shape()
{
  return specialized Shape.indexableTextContent<A>(in:)();
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Shape(uint64_t a1)
{
  double v2;
  double v3;
  CGFloat v4;
  CGFloat v5;
  double v6;
  void (*v7)(CGAffineTransform *, _QWORD);
  double *v8;
  __int128 v10;
  CGAffineTransform v11;
  CGAffineTransform t2;
  CGAffineTransform v13;
  CGAffineTransform t1;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v10 = *(_OWORD *)(a1 + 16);
  v4 = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  specialized CanvasElement.coordinateSpace.getter(&v13);
  t1 = v13;
  t2.a = v2;
  t2.b = v3;
  *(_OWORD *)&t2.c = v10;
  t2.tx = v4;
  t2.ty = v5;
  CGAffineTransformConcat(&v11, &t1, &t2);
  t1 = v11;
  specialized CanvasElement.coordinateSpace.setter();
  v6 = _stdlib_squareRoot(v2 * v2 + v3 * v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v7 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
  *v8 = v6 * *v8;
  v7(&t2, 0);
  return CRAttributedString<>.apply(_:)((double *)a1);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Shape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Shape.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Shape.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

id Shape.akAnnotation(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  objc_class *v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void *v44;
  char *v45;
  id v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;

  v2 = v1;
  v4 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v42 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(id *)(a1 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
  if (v17)
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass() || (objc_opt_self(), swift_dynamicCastObjCClass()))
    {
      v18 = v17;
      return v17;
    }
  }
  v45 = v7;
  type metadata accessor for ShapeSecondaryProperties();
  v19 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  if (v46)
  {
    if (v17)
    {
      objc_opt_self();
      v20 = swift_dynamicCastObjCClass();

      if (v20)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF79D0];
LABEL_25:
    v17 = objc_msgSend(objc_allocWithZone(v21), sel_init);

    if (v17)
      return v17;
    goto LABEL_26;
  }
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged1.getter();
  v42 = *(void (**)(char *, uint64_t))(v13 + 8);
  v42(v16, v12);
  v22 = (char)v46;
  v44 = (void *)v2;
  outlined init with copy of PKStrokeProperties(v2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if ((v22 & 1) == 0)
  {
    outlined destroy of Shape((uint64_t)v11);
LABEL_22:
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v25 = swift_dynamicCastObjCClass();

      if (v25)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF7998];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged6.getter();
  v42(v16, v12);
  outlined destroy of Shape((uint64_t)v11);
  if ((v47 & 1) == 0)
    goto LABEL_22;
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged2.getter();
  v42(v16, v12);
  if ((v46 & 1) == 0)
  {
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v36 = swift_dynamicCastObjCClass();

      if (v36)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF7988];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged7.getter();
  v42(v16, v12);
  if ((v47 & 1) == 0)
  {
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v37 = swift_dynamicCastObjCClass();

      if (v37)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF7990];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged8.getter();
  v42(v16, v12);
  if ((v48 & 1) == 0)
  {
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v38 = swift_dynamicCastObjCClass();

      if (v38)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF79C0];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged5.getter();
  v42(v16, v12);
  if ((v49 & 1) == 0)
  {
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v39 = swift_dynamicCastObjCClass();

      if (v39)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF79B8];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  v42(v16, v12);
  if ((v50 & 1) == 0)
  {
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v40 = swift_dynamicCastObjCClass();

      if (v40)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF7938];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged9.getter();
  v42(v16, v12);
  if ((v48 & 1) == 0)
  {
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v41 = swift_dynamicCastObjCClass();

      if (v41)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF7940];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged4.getter();
  v42(v16, v12);
  v23 = v46;

  if (v23)
  {
    v2 = (uint64_t)v44;
    if (v17)
    {
      objc_opt_self();
      v24 = swift_dynamicCastObjCClass();

      if (v24)
        return v17;
    }
    v21 = (objc_class *)MEMORY[0x1E0CF7958];
    goto LABEL_25;
  }

  v2 = (uint64_t)v44;
  if (v17)
    return v17;
LABEL_26:
  if (one-time initialization token for logger != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)logger);
  v27 = (uint64_t)v45;
  outlined init with copy of PKStrokeProperties(v2, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v44 = (void *)swift_slowAlloc();
    v46 = v44;
    *(_DWORD *)v30 = 136315138;
    v43 = (uint64_t)(v30 + 4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    CRRegister.wrappedValue.getter();
    v31 = TaggedValue_9<>.localizedName.getter();
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Shape(v27);
    _os_log_impl(&dword_1DDB0F000, v28, v29, "Did not create AKAnnotation for Shape with shapeType: %s", v30, 0xCu);
    v34 = v44;
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v34, -1, -1);
    MEMORY[0x1DF0E6558](v30, -1, -1);
  }
  else
  {
    outlined destroy of Shape(v27);
  }

  return 0;
}

id Shape.addAKRectangularShapeAnnotationProperties(to:in:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  id result;
  double v26;
  double v27;
  double v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Class isa;
  double v43;
  char v44;
  double v45;
  char v46;
  char v47;
  uint64_t v48;
  _QWORD v49[2];
  Swift::Int v50;
  char v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[8];
  double v59;
  double v60;
  char v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  objc_msgSend(a1, sel_setRectangle_, v52, v53, v54, v55);
  outlined init with take of CGRect?(a2, (uint64_t)v58);
  if ((v61 & 1) == 0)
  {
    v14 = v59;
    v15 = v60;
    objc_msgSend(a1, sel_rectangle);
    x = v62.origin.x;
    y = v62.origin.y;
    width = v62.size.width;
    height = v62.size.height;
    MinX = CGRectGetMinX(v62);
    v63.origin.x = x;
    v63.origin.y = y;
    v63.size.width = width;
    v63.size.height = height;
    v21 = v15 + v14 + v14 - CGRectGetMaxY(v63);
    v64.origin.x = x;
    v64.origin.y = y;
    v64.size.width = width;
    v64.size.height = height;
    v22 = CGRectGetWidth(v64);
    v65.origin.x = x;
    v65.origin.y = y;
    v65.size.width = width;
    v65.size.height = height;
    objc_msgSend(a1, sel_setRectangle_, MinX, v21, v22, CGRectGetHeight(v65));
  }
  v23 = type metadata accessor for Shape();
  v24 = v2 + *(int *)(v23 + 52);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  result = (id)CRRegister.wrappedValue.getter();
  if ((LOBYTE(v52) & 0x20) == 0)
  {
    v49[0] = v23;
    v49[1] = v2;
    Shape.addAKShapeAnnotationProperties(to:)(a1);
    objc_msgSend(a1, sel_originalModelBaseScaleFactor);
    v26 = 1.0;
    if (v27 != 0.0)
    {
      objc_msgSend(a1, sel_originalModelBaseScaleFactor);
      v26 = 1.0 / v28;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v24, v9);
    v29 = (void *)CRAttributedString.attributedString.getter();
    v30 = objc_msgSend(v29, sel_string);

    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    if (v31)
      v34 = 0;
    else
      v34 = v33 == 0xE000000000000000;
    if (v34)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      v36 = 0;
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      v36 = 0;
      if ((v35 & 1) == 0)
      {
        v37 = CRAttributedString<>.nsAttributedString.getter();
        v38 = NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(v26);

        v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1320]), sel_initWithAttributedString_, v38);
      }
    }
    objc_msgSend(a1, sel_setAnnotationText_, v36);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v8, 1, v39) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      if (one-time initialization token for defaultTextBoxAttributes != -1)
        swift_once();
      v41 = static UIConstants.defaultTextBoxAttributes;
      swift_bridgeObjectRetain();
    }
    else
    {
      v41 = CRAttributedString.Attributes<>.nsTypAttributesScaledBy(_:)(v26);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v39);
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v41);
    swift_bridgeObjectRelease();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setTypingAttributes_, isa);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    objc_msgSend(a1, sel_setTextIsFixedWidth_, (LOBYTE(v52) & 1) == 0);
    CRRegister.wrappedValue.getter();
    objc_msgSend(a1, sel_setTextIsFixedHeight_, (LOBYTE(v52) & 2) == 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
    CRRegister.wrappedValue.getter();
    if (v57)
    {
      v43 = v52;
      v44 = LOBYTE(v53) & 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = 0.0;
      v44 = 0;
    }
    v52 = v43;
    LOBYTE(v53) = v44;
    v50 = 0;
    v51 = 0;
    lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
    objc_msgSend(a1, sel_setIsFormField_, (static CRExtensible.== infix(_:_:)() & 1) == 0);
    CRRegister.wrappedValue.getter();
    if (v57)
    {
      v45 = v52;
      v46 = LOBYTE(v53) & 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = 0.0;
      v46 = 0;
    }
    v52 = v45;
    LOBYTE(v53) = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
    CRExtensible.rawValue.getter();
    FormContentType.init(rawValue:)(v50);
    v47 = LOBYTE(v52);
    if (LOBYTE(v52) == 66)
      v47 = 0;
    LOBYTE(v52) = v47;
    objc_msgSend(a1, sel_setFormContentType_, FormContentType.crFormContentType.getter());
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.value.getter();
    objc_msgSend(a1, sel_setRotationAngle_, -v52);
    CRRegister.wrappedValue.getter();
    if (v57)
    {
      v48 = v56;
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = 0;
    }
    return objc_msgSend(a1, sel_setMaximumNumberOfCharacters_, v48);
  }
  return result;
}

void Shape.addAKArrowAnnotationProperties(to:in:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  double y;
  double x;
  double v32;
  uint64_t v33;
  void *v34;
  id v35;
  CGFloat v36;
  double v37;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v42;
  double v43;
  double v44;
  double v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  CGFloat v57;
  double v58;
  uint64_t v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BOOL4 v85;
  _BOOL8 v87;
  uint64_t v88;
  _BOOL8 v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  char v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Class isa;
  double v112;
  double v113;
  double v114;
  double v115;
  CGFloat v116;
  id v117;
  double v118;
  id v119;
  double MaxX;
  CGFloat MidY;
  uint64_t v122;
  CGFloat v123;
  double v124;
  double v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  CGFloat v130;
  double v131;
  double v132;
  CGFloat v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  char v137;
  Swift::Int v138;
  uint64_t v139;
  double v140;
  double v141;
  CGRect v142;
  double v143;
  double v144;
  char v145;
  char v146[8];
  double v147;
  double v148;
  CGRect v149;
  char v150;
  CGRect v151;
  char v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;
  CGRect v176;

  outlined init with take of CGRect?(a2, (uint64_t)v146);
  v132 = v147;
  v133 = v148;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v5, v6);
  v129 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v127 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128, v8);
  v126 = (char *)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)&v131 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)&v130 = (char *)&v122 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v122 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v122 - v27;
  v135 = *(double *)&a1;
  Shape.addAKShapeAnnotationProperties(to:)(a1);
  v134 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  v29 = *(void (**)(char *, uint64_t))(v21 + 8);
  v29(v28, v20);
  if ((v145 & 1) != 0)
  {
    CRRegister.wrappedValue.getter();
    TaggedValue_9.tagged9.getter();
    v29(v24, v20);
    if ((LOBYTE(v142.size.width) & 1) == 0)
    {
      y = v142.origin.y;
      x = v142.origin.x;
      objc_opt_self();
      v32 = v135;
      v33 = swift_dynamicCastObjCClass();
      if (v33)
      {
        v34 = (void *)v33;
        v35 = *(id *)&v32;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.getter();
        v36 = v142.origin.x;
        v37 = v142.origin.y;
        width = v142.size.width;
        height = v142.size.height;
        MinX = CGRectGetMinX(v142);
        v153.origin.x = v36;
        v153.origin.y = v37;
        v153.size.width = width;
        v153.size.height = height;
        v133 = CGRectGetWidth(v153);
        v154.origin.x = v36;
        v154.origin.y = v37;
        v154.size.width = width;
        v154.size.height = height;
        MinY = CGRectGetMinY(v154);
        v155.origin.x = v36;
        v155.origin.y = v37;
        v155.size.width = width;
        v155.size.height = height;
        v42 = MinY + y * CGRectGetHeight(v155);
        outlined init with take of CGRect?(a2, (uint64_t)&v142);
        if ((LOBYTE(v143) & 1) != 0)
        {
          v135 = v42;
        }
        else
        {
          v131 = MinX;
          v112 = v142.origin.y;
          v132 = x;
          v113 = v142.size.height;
          v165.origin.x = v36;
          v165.origin.y = v37;
          v165.size.width = width;
          v165.size.height = height;
          v130 = CGRectGetMinX(v165);
          v114 = v113 + v112 + v112;
          v166.origin.x = v36;
          v166.origin.y = v37;
          v166.size.width = width;
          v166.size.height = height;
          v115 = v114 - CGRectGetMaxY(v166);
          v167.origin.x = v36;
          v167.origin.y = v37;
          v167.size.width = width;
          v167.size.height = height;
          v116 = CGRectGetWidth(v167);
          v168.origin.x = v36;
          v168.origin.y = v37;
          v168.size.width = width;
          v168.size.height = height;
          height = CGRectGetHeight(v168);
          v135 = v114 - v42;
          x = v132;
          v36 = v130;
          v37 = v115;
          width = v116;
          MinX = v131;
        }
        v117 = v35;
        v169.origin.x = v36;
        v169.origin.y = v37;
        v169.size.width = width;
        v169.size.height = height;
        v118 = CGRectGetMinX(v169);
        v170.origin.x = v36;
        v170.origin.y = v37;
        v170.size.width = width;
        v170.size.height = height;
        objc_msgSend(v34, sel_setStartPoint_, v118, CGRectGetMidY(v170));

        v119 = v117;
        v171.origin.x = v36;
        v171.origin.y = v37;
        v171.size.width = width;
        v171.size.height = height;
        MaxX = CGRectGetMaxX(v171);
        v172.origin.x = v36;
        v172.origin.y = v37;
        v172.size.width = width;
        v172.size.height = height;
        objc_msgSend(v34, sel_setEndPoint_, MaxX, CGRectGetMidY(v172));

        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
        CRRegister.wrappedValue.getter();
        if ((LOBYTE(v151.origin.x) & 0x20) == 0)
        {
          v173.origin.x = v36;
          v173.origin.y = v37;
          v173.size.width = width;
          v173.size.height = height;
          objc_msgSend(v34, sel_setArrowHeadLength_, CGRectGetMaxX(v173) - (MinX + x * v133));
          v174.origin.x = v36;
          v174.origin.y = v37;
          v174.size.width = width;
          v174.size.height = height;
          objc_msgSend(v34, sel_setArrowHeadWidth_, CGRectGetHeight(v174));
          v175.origin.x = v36;
          v175.origin.y = v37;
          v175.size.width = width;
          v175.size.height = height;
          CGRectGetMidX(v175);
          v176.origin.x = v36;
          v176.origin.y = v37;
          v176.size.width = width;
          v176.size.height = height;
          MidY = CGRectGetMidY(v176);
          objc_msgSend(v34, sel_setArrowLineWidth_, fabs(v135 - MidY + v135 - MidY));
          objc_msgSend(v34, sel_setArrowHeadStyle_, 2);
        }

      }
    }
  }
  else
  {
    v125 = v144;
    v124 = v143;
    v123 = v142.size.height;
    v43 = v142.size.width;
    v44 = v142.origin.y;
    v45 = v142.origin.x;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v46 = v142.origin.x;
    v47 = v142.origin.y;
    v48 = v142.size.width;
    v49 = v142.size.height;
    v50 = CGRectGetMinX(v142);
    v156.origin.x = v46;
    v156.origin.y = v47;
    v156.size.width = v48;
    v156.size.height = v49;
    v51 = v50 + v45 * CGRectGetWidth(v156);
    v157.origin.x = v46;
    v157.origin.y = v47;
    v157.size.width = v48;
    v157.size.height = v49;
    v52 = CGRectGetMinY(v157);
    v158.origin.x = v46;
    v158.origin.y = v47;
    v158.size.width = v48;
    v158.size.height = v49;
    v53 = v52 + v44 * CGRectGetHeight(v158);
    outlined init with copy of PKStrokeProperties(v2, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    outlined init with take of CGRect?(a2, (uint64_t)&v142);
    if ((LOBYTE(v143) & 1) != 0)
    {
      CRRegister.wrappedValue.getter();
      v54 = v151.origin.y;
      v55 = v151.size.height;
      v56 = v135;
      v57 = v133;
      v58 = v132;
    }
    else
    {
      v58 = v132;
      v54 = v132;
      v57 = v133;
      v55 = v133;
      v56 = v135;
    }
    v59 = *(_QWORD *)&v130;
    outlined destroy of Shape((uint64_t)v19);
    objc_msgSend(*(id *)&v56, sel_setStartPoint_, v51, v55 + v54 + v54 - v53);
    CRRegister.wrappedValue.getter();
    v60 = v151.origin.x;
    v61 = v151.origin.y;
    v62 = v151.size.width;
    v63 = v151.size.height;
    v64 = CGRectGetMinX(v151);
    v159.origin.x = v60;
    v159.origin.y = v61;
    v159.size.width = v62;
    v159.size.height = v63;
    v65 = v64 + v43 * CGRectGetWidth(v159);
    v160.origin.x = v60;
    v160.origin.y = v61;
    v160.size.width = v62;
    v160.size.height = v63;
    v66 = CGRectGetMinY(v160);
    v161.origin.x = v60;
    v161.origin.y = v61;
    v161.size.width = v62;
    v161.size.height = v63;
    v67 = v66 + v123 * CGRectGetHeight(v161);
    outlined init with copy of PKStrokeProperties(v2, v59, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    outlined init with take of CGRect?(a2, (uint64_t)&v151);
    if ((v152 & 1) != 0)
    {
      CRRegister.wrappedValue.getter();
      v68 = v149.origin.y;
      v69 = v149.size.height;
    }
    else
    {
      v68 = v58;
      v69 = v57;
    }
    v70 = *(_QWORD *)&v131;
    outlined destroy of Shape(v59);
    objc_msgSend(*(id *)&v56, sel_setMidPoint_, v65, v69 + v68 + v68 - v67);
    CRRegister.wrappedValue.getter();
    v71 = v149.origin.x;
    v72 = v149.origin.y;
    v73 = v149.size.width;
    v74 = v149.size.height;
    v75 = CGRectGetMinX(v149);
    v162.origin.x = v71;
    v162.origin.y = v72;
    v162.size.width = v73;
    v162.size.height = v74;
    v76 = v75 + v124 * CGRectGetWidth(v162);
    v163.origin.x = v71;
    v163.origin.y = v72;
    v163.size.width = v73;
    v163.size.height = v74;
    v77 = CGRectGetMinY(v163);
    v164.origin.x = v71;
    v164.origin.y = v72;
    v164.size.width = v73;
    v164.size.height = v74;
    v78 = v77 + v125 * CGRectGetHeight(v164);
    outlined init with copy of PKStrokeProperties(v2, v70, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    outlined init with take of CGRect?(a2, (uint64_t)&v149);
    if ((v150 & 1) != 0)
    {
      CRRegister.wrappedValue.getter();
      v79 = v140;
      v80 = v141;
    }
    else
    {
      v79 = v58;
      v80 = v57;
    }
    v81 = v134;
    outlined destroy of Shape(v70);
    objc_msgSend(*(id *)&v56, sel_setEndPoint_, v76, v80 + v79 + v79 - v78);
    v82 = v2 + *(int *)(v81 + 52);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((v139 & 0x20) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
      CRRegister.wrappedValue.getter();
      v136 = v139;
      v137 = LOBYTE(v140);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<LineEnd>);
      CRExtensible.rawValue.getter();
      LineEnd.init(rawValue:)(v138);
      v83 = v136;
      v85 = v136 == 9 || v136 == 0;
      CRRegister.wrappedValue.getter();
      v136 = v139;
      v137 = LOBYTE(v140);
      CRExtensible.rawValue.getter();
      LineEnd.init(rawValue:)(v138);
      v87 = v83 != 9 && v83 != 0;
      v88 = 2;
      if (!v85)
        v88 = 3;
      v90 = v83 != 9 && v83 != 0;
      if (v136 == 9)
        v88 = v90;
      if ((_BYTE)v136)
        v91 = v88;
      else
        v91 = v87;
      objc_msgSend(*(id *)&v56, sel_setArrowHeadStyle_, v91);
      objc_msgSend(*(id *)&v56, sel_originalModelBaseScaleFactor);
      v92 = 1.0;
      if (v93 != 0.0)
      {
        objc_msgSend(*(id *)&v56, sel_originalModelBaseScaleFactor);
        v92 = 1.0 / v94;
      }
      v95 = v127;
      v96 = v126;
      v97 = v128;
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v126, v82, v128);
      v98 = (void *)CRAttributedString.attributedString.getter();
      v99 = objc_msgSend(v98, sel_string);

      v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v102 = v101;

      v103 = (uint64_t)v129;
      if (v100 || v102 != 0xE000000000000000)
      {
        v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
        v104 = 0;
        if ((v105 & 1) == 0)
        {
          v106 = CRAttributedString<>.nsAttributedString.getter();
          v107 = NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(v92);

          v104 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1320]), sel_initWithAttributedString_, v107);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
        v104 = 0;
      }
      objc_msgSend(*(id *)&v56, sel_setAnnotationText_, v104);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
      CRRegister.wrappedValue.getter();
      v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      v109 = *(_QWORD *)(v108 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v103, 1, v108) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v103, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        if (one-time initialization token for defaultTextBoxAttributes != -1)
          swift_once();
        v110 = static UIConstants.defaultTextBoxAttributes;
        swift_bridgeObjectRetain();
      }
      else
      {
        v110 = CRAttributedString.Attributes<>.nsTypAttributesScaledBy(_:)(v92);
        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v103, v108);
      }
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v110);
      swift_bridgeObjectRelease();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(*(id *)&v56, sel_setTypingAttributes_, isa);

    }
  }
}

void Shape.addAKShapeAnnotationProperties(to:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  char **v13;
  id v14;
  id v15;
  uint64_t v16;
  double v17;
  id v18;
  id v19;
  double v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD v33[2];
  double v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v33 - v9;
  v11 = v1 + *(int *)(type metadata accessor for Shape() + 52);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  if ((v36 & 0x20) != 0)
    return;
  v33[1] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  v12 = v36;
  v13 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  if (v36)
  {
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v36);

    CRRegister.wrappedValue.getter();
    if (!v35)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v15 = v35;
    v16 = CGColorRef.components.getter();

    if (!v16)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (*(_QWORD *)(v16 + 16) < 4uLL)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v17 = *(double *)(v16 + 56);

    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v18 = objc_msgSend(v14, sel_colorWithAlphaComponent_, v17 * v34);

    v13 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(a1, sel_setFillColor_, v18);

  CRRegister.wrappedValue.getter();
  v19 = v36;

  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v20 = *(double *)&v36;
  }
  else
  {
    v20 = 0.0;
  }
  objc_msgSend(a1, sel_setStrokeWidth_, v20);
  CRRegister.wrappedValue.getter();
  v21 = v36;
  if (v36)
  {
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), v13[176], v36);

    CRRegister.wrappedValue.getter();
    if (!v35)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = v35;
    v24 = CGColorRef.components.getter();

    if (!v24)
    {
LABEL_37:
      __break(1u);
      return;
    }
    if (*(_QWORD *)(v24 + 16) >= 4uLL)
    {
      v25 = *(double *)(v24 + 56);

      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      v21 = objc_msgSend(v22, sel_colorWithAlphaComponent_, v25 * v34);

      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_16:
  objc_msgSend(a1, sel_setStrokeColor_, v21);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.getter();
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v28(v10, 1, v26) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    v29 = 0;
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    if (v37)
    {
      v30 = *(_QWORD *)(v37 + 16);
      swift_bridgeObjectRelease();
      v29 = v30 != 0;
    }
    else
    {
      v29 = 0;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v26);
  }
  objc_msgSend(a1, sel_setDashed_, v29);
  CRRegister.wrappedValue.getter();
  if (v28(v6, 1, v26) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    v31 = 0;
  }
  else
  {
    TaggedValue_2.tagged2.getter();
    if ((v37 & 1) != 0)
      v31 = 0;
    else
      v31 = v36;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v26);
  }
  objc_msgSend(a1, sel_setBrushStyle_, v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  v32 = v38;
  if (v38)

  objc_msgSend(a1, sel_setHasShadow_, v32 != 0);
}

id NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(double a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  id result;
  void *v19;
  id v20;
  uint64_t aBlock;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void *v27;

  if (a1 == 1.0 || a1 == 0.0)
    return v1;
  v20 = v1;
  objc_msgSend(v1, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableAttributedString);
  swift_dynamicCast();
  v3 = v27;
  v4 = objc_msgSend(v1, sel_length);
  v5 = *MEMORY[0x1E0DC1138];
  v6 = swift_allocObject();
  *(double *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v25 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v26 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v22 = 1107296256;
  v23 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v24 = &block_descriptor_57;
  v9 = _Block_copy(&aBlock);
  v10 = v3;
  swift_retain();
  swift_release();
  objc_msgSend(v20, sel_enumerateAttribute_inRange_options_usingBlock_, v5, 0, v4, 0x100000, v9);
  _Block_release(v9);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else if (one-time initialization token for originalFont == -1)
  {
    goto LABEL_5;
  }
  swift_once();
LABEL_5:
  v11 = (void *)static NSAttributedStringKey.originalFont;
  v12 = swift_allocObject();
  *(double *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = partial apply for closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:);
  *(_QWORD *)(v13 + 24) = v12;
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v26 = v13;
  aBlock = v8;
  v22 = 1107296256;
  v23 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v24 = &block_descriptor_51_1;
  v14 = _Block_copy(&aBlock);
  v15 = v10;
  v16 = v11;
  swift_retain();
  swift_release();
  objc_msgSend(v20, sel_enumerateAttribute_inRange_options_usingBlock_, v16, 0, v4, 0x100000, v14);

  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = (id)swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v15, sel_copy);
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSAttributedString);
    swift_dynamicCast();
    v19 = v27;
    swift_release();
    swift_release();
    return v19;
  }
  return result;
}

uint64_t CRAttributedString.Attributes<>.nsTypAttributesScaledBy(_:)(double a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  id v10;
  double v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;

  CRAttributedString.Attributes<>.nsAttributes(darkMode:)(0);
  v3 = v2;
  if (!*(_QWORD *)(v2 + 16))
  {
    v16 = 0u;
    v17 = 0u;
    goto LABEL_10;
  }
  v4 = (void *)*MEMORY[0x1E0DC1138];
  swift_bridgeObjectRetain();
  v5 = v4;
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == 0)
  {
    v16 = 0u;
    v17 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v6, (uint64_t)&v16);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
    return v3;
  }
  v8 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v9 = *(void **)&v15[0];
    v10 = v5;
    if (a1 == 1.0 || a1 == 0.0)
    {
      v12 = *(id *)&v15[0];
    }
    else
    {
      objc_msgSend(*(id *)&v15[0], sel_pointSize);
      v12 = objc_msgSend(*(id *)&v15[0], sel_fontWithSize_, v11 * a1);
    }
    *((_QWORD *)&v17 + 1) = v8;
    *(_QWORD *)&v16 = v12;
    outlined init with take of Any(&v16, v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v10, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t one-time initialization function for originalFont()
{
  uint64_t result;

  result = MEMORY[0x1DF0E41AC](0x6E696769724F534ELL, 0xEE00746E6F466C61);
  static NSAttributedStringKey.originalFont = result;
  return result;
}

void closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  void *v11;
  double v12;
  id v13;
  uint64_t inited;
  void *v15;
  id v16;
  id v17;
  Class isa;
  id v19;
  _BYTE v20[24];
  uint64_t v21;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v20, &demangling cache variable for type metadata for Any?);
  if (v21)
  {
    v10 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v11 = v19;
      if (a4 != 1.0 && a4 != 0.0)
      {
        objc_msgSend(v19, sel_pointSize);
        v13 = objc_msgSend(v19, sel_fontWithSize_, v12 * a4);

        v11 = v13;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
      v15 = (void *)*MEMORY[0x1E0DC1138];
      *(_QWORD *)(inited + 64) = v10;
      *(_QWORD *)(inited + 32) = v15;
      *(_QWORD *)(inited + 40) = v11;
      v16 = v15;
      v17 = v11;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a6, sel_addAttributes_range_, isa, a2, a3);

    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Any?);
  }
}

void closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  void *v11;
  double v12;
  id v13;
  uint64_t inited;
  void *v15;
  id v16;
  id v17;
  Class isa;
  id v19;
  _BYTE v20[24];
  uint64_t v21;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v20, &demangling cache variable for type metadata for Any?);
  if (v21)
  {
    v10 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v11 = v19;
      if (a4 != 1.0 && a4 != 0.0)
      {
        objc_msgSend(v19, sel_pointSize);
        v13 = objc_msgSend(v19, sel_fontWithSize_, v12 * a4);

        v11 = v13;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
      if (one-time initialization token for originalFont != -1)
        swift_once();
      v15 = (void *)static NSAttributedStringKey.originalFont;
      *(_QWORD *)(inited + 64) = v10;
      *(_QWORD *)(inited + 32) = v15;
      *(_QWORD *)(inited + 40) = v11;
      v16 = v15;
      v17 = v11;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a6, sel_addAttributes_range_, isa, a2, a3);

    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Any?);
  }
}

unint64_t lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementAutoresizeBehavior, &type metadata for CanvasElementAutoresizeBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementAutoresizeBehavior, &type metadata for CanvasElementAutoresizeBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementAutoresizeBehavior, &type metadata for CanvasElementAutoresizeBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementAutoresizeBehavior, &type metadata for CanvasElementAutoresizeBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementAutoresizeBehavior, &type metadata for CanvasElementAutoresizeBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementAutoresizeBehavior, &type metadata for CanvasElementAutoresizeBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementAutoresizeBehavior, &type metadata for CanvasElementAutoresizeBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>> and conformance TaggedValue_2<A, B>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>, MEMORY[0x1E0D12018]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?);
  }
  return result;
}

uint64_t _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shadow and conformance Shadow()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow, &type metadata for Shadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow, &type metadata for Shadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow, &type metadata for Shadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow, &type metadata for Shadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow, &type metadata for Shadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow, &type metadata for Shadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow, &type metadata for Shadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo, &type metadata for ShapeAuxiliaryInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo, &type metadata for ShapeAuxiliaryInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo, &type metadata for ShapeAuxiliaryInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo, &type metadata for ShapeAuxiliaryInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo, &type metadata for ShapeAuxiliaryInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo, &type metadata for ShapeAuxiliaryInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo, &type metadata for ShapeAuxiliaryInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

uint64_t outlined assign with take of ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShapeSecondaryProperties();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double _stdlib_squareRoot(double a1)
{
  return sqrt(a1);
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.getter in conformance Shape()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.setter in conformance Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

double protocol witness for ShapeTextBox.opacity.getter in conformance Shape()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for ShapeTextBox.opacity.setter in conformance Shape()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

void specialized Shape.renderSync<A>(in:id:capsule:options:)(CGContext *a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  double a;
  double b;
  double d;
  double c;
  CGFloat v44;
  double MidX;
  double MidY;
  CGFloat v47;
  CGFloat tx;
  CGFloat ty;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  double v58;
  uint64_t v59;
  CGContext *v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  CGFloat MaxY;
  double v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  double v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double MinX;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  int a_low;
  int b_low;
  BOOL v102;
  char v103;
  int v104;
  double v105;
  _BOOL4 v106;
  uint64_t v107;
  char *v108;
  CGFloat v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  id v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  id v122;
  CGColor *v123;
  CGFloat v124;
  double v125;
  double v126;
  CGFloat v127;
  CGFloat v128;
  const CGPath *v129;
  id v130;
  void *v131;
  CGFloat v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  CGFloat v136;
  id v137;
  void *v138;
  CGFloat v139;
  double v140;
  CGFloat v141;
  uint64_t v142;
  double v143;
  double v144;
  double v145;
  double v146;
  CGContext *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int (*v152)(uint64_t, uint64_t, uint64_t);
  CGLineCap c_low;
  double v154;
  double v155;
  CGFloat v156;
  double v157;
  CGFloat v158;
  double v159;
  CGFloat v160;
  double v161;
  double v162;
  CGFloat v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  char v169;
  const CGPath *v170;
  const CGPath *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  char *v176;
  char *v177;
  char v178;
  const CGPath *v179;
  const CGPath *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  double v187;
  CGFloat v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  double v199;
  uint64_t v200;
  double v201;
  uint64_t v202;
  __int128 v203;
  CGColor *v204;
  __int128 v205;
  CGFloat v206;
  CGFloat v207;
  CGFloat v208;
  CGFloat v209;
  uint64_t v210;
  CGAffineTransform v211;
  CGAffineTransform v212;
  double v213;
  double v214;
  double v215;
  CGAffineTransform v216;
  __C::CGRect_optional in;
  CGAffineTransform t2;
  CGSize v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect v227;
  CGRect PathBoundingBox;
  CGRect v229;
  CGRect v230;
  __C::CGRect v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;

  v4 = v3;
  v194 = a2;
  v202 = 0;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v190 = (char *)&v185 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v191 = (char *)&v185 - v12;
  v13 = type metadata accessor for CGPathFillRule();
  v196 = *(_QWORD *)(v13 - 8);
  v197 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v195 = (char *)&v185 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v16, v17);
  v192 = (uint64_t)&v185 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v193 = (uint64_t)&v185 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)&v201 = (char *)&v185 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v200 = (uint64_t)&v185 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v185 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v198 = (char *)&v185 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v185 - v37;
  LODWORD(v204) = *(unsigned __int8 *)(a3 + 1);
  outlined init with take of CGRect?(a3 + 24, (uint64_t)&in);
  v39 = *(void **)(a3 + 64);
  v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  a = v212.a;
  b = v212.b;
  c = v212.c;
  d = v212.d;
  v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  v44 = v212.a;
  v208 = b - d * 0.0;
  v209 = a - c * 0.0;
  v220.origin.x = a;
  v220.origin.y = b;
  v220.size.width = c;
  v206 = c;
  v207 = d;
  v220.size.height = d;
  MidX = CGRectGetMidX(v220);
  v221.origin.x = a;
  v221.origin.y = b;
  v221.size.width = c;
  v221.size.height = d;
  MidY = CGRectGetMidY(v221);
  CGAffineTransformMakeRotation(&v212, v44);
  v205 = *(_OWORD *)&v212.a;
  v203 = *(_OWORD *)&v212.c;
  v47 = -MidY;
  tx = v212.tx;
  ty = v212.ty;
  CGAffineTransformMakeTranslation(&v212, -MidX, v47);
  v50 = v212.a;
  v51 = v212.b;
  v52 = v212.c;
  v53 = v212.d;
  v54 = v212.tx;
  v55 = v212.ty;
  *(_OWORD *)&t2.a = v205;
  *(_OWORD *)&t2.c = v203;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v216, &v212, &t2);
  v205 = *(_OWORD *)&v216.a;
  v203 = *(_OWORD *)&v216.c;
  v56 = v216.tx;
  v57 = v216.ty;
  v212.a = v50;
  v212.b = v51;
  v212.c = v52;
  v212.d = v53;
  v212.tx = v54;
  v212.ty = v55;
  CGAffineTransformInvert(&t2, &v212);
  *(_OWORD *)&v212.a = v205;
  *(_OWORD *)&v212.c = v203;
  v212.tx = v56;
  v212.ty = v57;
  CGAffineTransformConcat(&v216, &v212, &t2);
  v212.a = v206;
  v212.b = 0.0;
  v212.c = 0.0;
  v212.d = v207;
  v212.tx = v209;
  v212.ty = v208;
  t2 = v216;
  CGAffineTransformConcat(&v216, &v212, &t2);
  t2 = v216;
  CGContextSaveGState(a1);
  *(_QWORD *)&v58 = *(_QWORD *)&v4 + v16[13];
  v59 = type metadata accessor for ShapeSecondaryProperties();
  v209 = v58;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  *(_QWORD *)&v205 = v16;
  v199 = *(double *)&v31;
  if ((LOBYTE(v212.a) & 0x20) != 0 && v39)
  {
    v208 = v4;
    v60 = a1;
    v207 = COERCE_DOUBLE(v39);
    v61 = objc_msgSend(*(id *)&v207, sel_annotations);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    MEMORY[0x1E0C80A78](v63, v64);
    *(&v185 - 2) = v194;
    v65 = v202;
    v66 = COERCE_DOUBLE(specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v185 - 4), v62));
    swift_bridgeObjectRelease();
    if (v66 == 0.0)
    {
      v202 = v65;
      a1 = v60;
      v66 = v207;
      v4 = v208;
    }
    else
    {
      a1 = v60;
      if (objc_msgSend(*(id *)&v66, sel_hasAppearanceStream))
      {
        v67 = v207;
        objc_msgSend(*(id *)&v207, sel_boundsForBox_, 0);
        x = v222.origin.x;
        y = v222.origin.y;
        width = v222.size.width;
        height = v222.size.height;
        MinY = CGRectGetMinY(v222);
        v223.origin.x = x;
        v223.origin.y = y;
        v223.size.width = width;
        v223.size.height = height;
        MaxY = CGRectGetMaxY(v223);
        v212.a = 1.0;
        v212.b = 0.0;
        v212.c = 0.0;
        v212.d = 1.0;
        v212.tx = 0.0;
        v212.ty = 0.0;
        v216.b = 0.0;
        v216.c = 0.0;
        v216.a = 1.0;
        *(_OWORD *)&v216.d = xmmword_1DDF325E0;
        v216.ty = MinY + MaxY;
        CGAffineTransformConcat(&v211, &v212, &v216);
        v212 = v211;
        CGContextConcatCTM(v60, &v212);
        objc_msgSend(*(id *)&v67, sel_transformForBox_, 1);
        CGAffineTransformInvert(&v216, &v212);
        v212 = v216;
        CGContextConcatCTM(v60, &v212);
        CRRegister.wrappedValue.getter();
        if ((LOBYTE(v212.a) & 0x40) == 0)
        {
          objc_msgSend(*(id *)&v66, sel_bounds);
          v75 = v74;
          v77 = v76;
          v79 = v78;
          v81 = v80;
          objc_msgSend(*(id *)&v67, sel_boundsForBox_, 0);
          v83 = v82;
          v85 = v84;
          v224.origin.x = v75;
          v224.origin.y = v77;
          v224.size.width = v79;
          v224.size.height = v81;
          MinX = CGRectGetMinX(v224);
          v225.origin.x = v75;
          v225.origin.y = v77;
          v225.size.width = v79;
          v225.size.height = v81;
          v87 = v85 + v83 + v83 - CGRectGetMaxY(v225);
          v226.origin.x = v75;
          v226.origin.y = v77;
          v226.size.width = v79;
          v226.size.height = v81;
          CGRectGetWidth(v226);
          v227.origin.x = v75;
          v227.origin.y = v77;
          v227.size.width = v79;
          v227.size.height = v81;
          CGRectGetHeight(v227);
          CRRegister.wrappedValue.getter();
          v88 = v212.a - MinX;
          v89 = v212.b - v87;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
          CRRegister.wrappedValue.getter();
          if (*(_QWORD *)&v212.ty)
          {
            v91 = v212.c;
            v90 = v212.d;
            swift_bridgeObjectRelease();
          }
          else
          {
            v90 = 0.0;
            v91 = 0.0;
          }
          CGContextTranslateCTM(v60, v88 + v91, -(v89 + v90));
        }
        objc_msgSend(*(id *)&v66, sel_drawWithBox_inContext_, 1, v60);
        CGContextRestoreGState(v60);

LABEL_73:
        return;
      }
      v202 = v65;

      v4 = v208;
    }

    v16 = (int *)v205;
  }
  v92 = (uint64_t)v198;
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&v212, 1.0);
  v207 = v212.a;
  v93 = v212.b;
  v94 = v212.d;
  v95 = v212.tx;
  v187 = v212.ty;
  v188 = v212.c;
  v96 = v214;
  v186 = v213;
  v97 = v215;
  v98 = *(_QWORD *)&v4 + v16[11];
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v189 = v98;
  CRRegister.wrappedValue.getter();
  a_low = LOBYTE(v212.a);
  b_low = LOBYTE(v212.b);
  outlined init with copy of PKStrokeProperties(*(uint64_t *)&v4, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (a_low)
    v102 = a_low == 9;
  else
    v102 = 1;
  v103 = v102;
  if (b_low == 1 || (v103 & 1) == 0)
  {
    outlined destroy of Shape((uint64_t)v38);
    v104 = 1;
  }
  else
  {
    CRRegister.wrappedValue.getter();
    outlined destroy of Shape((uint64_t)v38);
    v104 = LOBYTE(v212.b) | (LOBYTE(v212.a) != 0);
  }
  *(_QWORD *)&v206 = *(_QWORD *)&v4 + v16[8];
  CRRegister.wrappedValue.getter();
  v105 = v212.a;
  outlined init with copy of PKStrokeProperties(*(uint64_t *)&v4, v92, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v194 = v99;
  if (v105 <= 0.0)
  {
    outlined destroy of Shape(v92);
    v106 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of Shape(v92);
    v106 = *(_QWORD *)&v212.a != 0;

  }
  v107 = *(_QWORD *)&v199;
  v108 = (char *)(*(_QWORD *)&v4 + v16[6]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v198 = v108;
  CRRegister.wrappedValue.getter();
  v109 = v212.a;

  outlined init with copy of PKStrokeProperties(*(uint64_t *)&v4, v107, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (!v106 || v109 == 0.0)
  {
    outlined destroy of Shape(v107);
    v110 = v200;
    outlined init with copy of PKStrokeProperties(*(uint64_t *)&v4, v200, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
LABEL_30:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of Shape(v110);
    LODWORD(v208) = *(_QWORD *)&v212.d != 0;

    v112 = v106 & v104;
    v111 = *(_QWORD *)&v201;
    outlined init with copy of PKStrokeProperties(*(uint64_t *)&v4, *(uint64_t *)&v201, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    if (v112 != 1)
      goto LABEL_28;
    goto LABEL_31;
  }
  CRRegister.wrappedValue.getter();
  v105 = v212.a;
  outlined destroy of Shape(v107);
  v110 = v200;
  outlined init with copy of PKStrokeProperties(*(uint64_t *)&v4, v200, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v105 >= 1.0)
    goto LABEL_30;
  outlined destroy of Shape(v110);
  v111 = *(_QWORD *)&v201;
  outlined init with copy of PKStrokeProperties(*(uint64_t *)&v4, *(uint64_t *)&v201, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  LODWORD(v208) = 1;
  if ((v104 & 1) == 0)
  {
LABEL_28:
    LODWORD(v200) = 0;
    goto LABEL_41;
  }
LABEL_31:
  CRRegister.wrappedValue.getter();
  if (!*(_QWORD *)&v212.a)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v113 = *(id *)&v212.a;
  v114 = CGColorRef.components.getter();

  if (!v114)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (*(_QWORD *)(v114 + 16) < 4uLL)
  {
    __break(1u);
    goto LABEL_104;
  }
  v115 = *(double *)(v114 + 56);

  swift_bridgeObjectRelease();
  v116 = v193;
  outlined init with copy of PKStrokeProperties(v111, v193, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v115 >= 1.0)
  {
    v117 = v192;
    outlined init with copy of PKStrokeProperties(v116, v192, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    if ((LOBYTE(v208) & 1) != 0)
    {
      LODWORD(v200) = 0;
    }
    else
    {
      CRRegister.wrappedValue.getter();
      v117 = v192;
      LODWORD(v200) = v212.a < 1.0;
    }
    outlined destroy of Shape(v117);
  }
  else
  {
    LODWORD(v200) = 1;
  }
  outlined destroy of Shape(v116);
LABEL_41:
  outlined destroy of Shape(v111);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  v118 = v212.d;
  *(_QWORD *)&v203 = v59;
  if (*(_QWORD *)&v212.d)
  {
    v120 = v212.b;
    v119 = v212.c;
    v121 = v212.a;
    v122 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v212.d);
    v123 = (CGColor *)objc_msgSend(v122, sel_CGColor);

    v219.width = v121;
    v219.height = v120;
    CGContextSetShadowWithColor(a1, v219, v119, v123);

  }
  CRRegister.wrappedValue.getter();
  CGContextSetAlpha(a1, v212.a);
  if (LODWORD(v208))
  {
    v201 = v93;
    PathBoundingBox = CGPathGetPathBoundingBox(*(CGPathRef *)&v207);
    v105 = PathBoundingBox.origin.x;
    v55 = PathBoundingBox.origin.y;
    v56 = PathBoundingBox.size.width;
    v93 = PathBoundingBox.size.height;
    CRRegister.wrappedValue.getter();
    v124 = v212.a;

    if (v124 == 0.0)
    {
      v126 = 1.0;
      goto LABEL_48;
    }
    v199 = v97;
    v97 = v96;
    v96 = v95;
    v95 = v94;
    if (one-time initialization token for shapeStrokeMiterLimit == -1)
    {
LABEL_46:
      v125 = *(double *)&static UIConstants.shapeStrokeMiterLimit;
      CRRegister.wrappedValue.getter();
      v126 = v125 * v212.a;
      v94 = v95;
      v95 = v96;
      v96 = v97;
      v97 = v199;
LABEL_48:
      v127 = -v126;
      v229.origin.x = v105;
      v229.origin.y = v55;
      v229.size.width = v56;
      v229.size.height = v93;
      v230 = CGRectInset(v229, v127, v127);
      CGContextBeginTransparencyLayerWithRect(a1, v230, 0);
      v93 = v201;
      goto LABEL_49;
    }
LABEL_104:
    swift_once();
    goto LABEL_46;
  }
LABEL_49:
  CRRegister.wrappedValue.getter();
  v128 = v212.a;
  if (*(_QWORD *)&v212.a)
  {
    v129 = *(const CGPath **)&v207;
    if ((v204 & 1) != 0)
    {
      v130 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v212.a);
      v131 = (void *)static PKInkingTool.convertColor(_:from:to:)();

      Color.init(cgColor:)((CGColor *)objc_msgSend(v131, sel_CGColor), (CGColor **)&v216);
      v132 = v216.a;
      if (!*(_QWORD *)&v216.a)
      {
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }

      v128 = v132;
    }
    CGContextSetFillColorWithColor(a1, *(CGColorRef *)&v128);
    CGContextAddPath(a1, v129);
    v134 = v195;
    v133 = v196;
    v135 = v197;
    (*(void (**)(char *, _QWORD, uint64_t))(v196 + 104))(v195, *MEMORY[0x1E0C9B8A0], v197);
    CGContextRef.fillPath(using:)();

    (*(void (**)(char *, uint64_t))(v133 + 8))(v134, v135);
  }
  CRRegister.wrappedValue.getter();
  v136 = v212.a;
  if (!*(_QWORD *)&v212.a)
  {
    v66 = v207;
    if (!LODWORD(v208))
      goto LABEL_69;
    goto LABEL_68;
  }
  v66 = v207;
  if ((v204 & 1) != 0)
  {
    v137 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v212.a);
    v138 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v138, sel_CGColor), (CGColor **)&v216);
    v139 = v216.a;
    if (!*(_QWORD *)&v216.a)
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }

    v136 = v139;
  }
  CRRegister.wrappedValue.getter();
  if (v212.a <= 0.0)
  {

    if (!LODWORD(v208))
    {
LABEL_69:
      CGContextRestoreGState(a1);
      v154 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(*(uint64_t *)&v4, (uint64_t)&in);
      v156 = v155;
      v158 = v157;
      v160 = v159;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      if ((LOBYTE(v212.a) & 2) != 0)
      {
        v231 = Shape.renderFrame(in:)(&in);
        v161 = CGRectGetHeight((CGRect)v231);
        v232.origin.x = v154;
        v232.origin.y = v156;
        v232.size.width = v158;
        v232.size.height = v160;
        v162 = v161 - CGRectGetHeight(v232);
        if (v162 > 0.0)
        {
          v163 = v162 * 0.5;
          v233.origin.x = v154;
          v233.origin.y = v156;
          v233.size.width = v158;
          v233.size.height = v160;
          v234 = CGRectOffset(v233, 0.0, v163);
          v154 = v234.origin.x;
          v156 = v234.origin.y;
          v158 = v234.size.width;
          v160 = v234.size.height;
        }
      }
      specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(*(uint64_t *)&v4, a1, v154, v156, v158, v160);
      goto LABEL_73;
    }
LABEL_68:
    CGContextEndTransparencyLayer(a1);
    goto LABEL_69;
  }
  v140 = COERCE_DOUBLE(*(id *)&v136);
  v141 = v140;
  if (!(_DWORD)v200)
  {
LABEL_65:
    v201 = v140;
    v145 = v4;
    v146 = v66;
    v204 = *(CGColor **)&v141;
    CGContextSetStrokeColorWithColor(a1, *(CGColorRef *)&v141);
    CRRegister.wrappedValue.getter();
    v147 = a1;
    CGContextSetLineWidth(a1, v212.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    v148 = v191;
    CRRegister.wrappedValue.getter();
    v149 = (uint64_t)v148;
    v150 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
    v151 = *(_QWORD *)(v150 - 8);
    v152 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
    if (v152(v149, 1, v150) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v149, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
      c_low = kCGLineCapButt;
    }
    else
    {
      TaggedValue_2.tagged1.getter();
      if (*(_QWORD *)&v212.b)
      {
        c_low = LODWORD(v212.c);
        swift_bridgeObjectRelease();
      }
      else
      {
        c_low = kCGLineCapButt;
      }
      (*(void (**)(char *, uint64_t))(v151 + 8))(v191, v150);
    }
    CGContextSetLineCap(v147, c_low);
    v164 = (uint64_t)v190;
    CRRegister.wrappedValue.getter();
    if (v152(v164, 1, v150) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v164, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
      a1 = v147;
      v66 = v146;
      v4 = v145;
    }
    else
    {
      TaggedValue_2.tagged1.getter();
      v165 = *(_QWORD *)&v212.b;
      (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v164, v150);
      a1 = v147;
      v66 = v146;
      v4 = v145;
      if (v165)
      {
        if (*(_QWORD *)(v165 + 16))
        {
          v166 = CRRegister.wrappedValue.getter();
          MEMORY[0x1E0C80A78](v166, v167);
          *((double *)&v185 - 2) = v145;
          _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12CoreGraphics7CGFloatVG_AHs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in Shape.renderSync<A>(in:id:capsule:options:), (uint64_t)(&v185 - 4), v165);
          swift_bridgeObjectRelease();
          CGContextRef.setLineDash(phase:lengths:)();
        }
        swift_bridgeObjectRelease();
      }
    }
    CGContextAddPath(a1, *(CGPathRef *)&v66);
    CGContextStrokePath(a1);
    CGContextSetFillColorWithColor(a1, v204);
    CRRegister.wrappedValue.getter();
    v168 = (unsigned int *)MEMORY[0x1E0C9B898];
    if ((LOBYTE(v212.b) & 1) != 0)
    {
      v169 = 1;
    }
    else
    {
      v169 = LOBYTE(v212.a);
      if (!LOBYTE(v212.a))
        goto LABEL_91;
    }
    LOBYTE(v211.a) = v169;
    CRRegister.wrappedValue.getter();
    v170 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v93, v188, v187, v186, v216.a);
    if (v170)
    {
      v171 = v170;
      CGContextAddPath(a1, v170);
      v172 = *v168;
      v174 = v196;
      v173 = v197;
      v175 = v66;
      v176 = v195;
      (*(void (**)(char *, uint64_t, uint64_t))(v196 + 104))(v195, v172, v197);
      CGContextRef.fillPath(using:)();

      v177 = v176;
      v66 = v175;
      v168 = (unsigned int *)MEMORY[0x1E0C9B898];
      (*(void (**)(char *, uint64_t))(v174 + 8))(v177, v173);
    }
LABEL_91:
    CRRegister.wrappedValue.getter();
    if ((LOBYTE(v212.b) & 1) != 0)
    {
      v178 = 1;
    }
    else
    {
      v178 = LOBYTE(v212.a);
      if (!LOBYTE(v212.a))
        goto LABEL_96;
    }
    LOBYTE(v211.a) = v178;
    CRRegister.wrappedValue.getter();
    v179 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v94, v95, v96, v97, v216.a);
    if (v179)
    {
      v180 = v179;
      CGContextAddPath(a1, v179);
      v181 = *v168;
      v183 = v195;
      v182 = v196;
      v184 = v197;
      (*(void (**)(char *, uint64_t, uint64_t))(v196 + 104))(v195, v181, v197);
      CGContextRef.fillPath(using:)();

      (*(void (**)(char *, uint64_t))(v182 + 8))(v183, v184);
    }
LABEL_96:
    if ((_DWORD)v200)
      CGContextEndTransparencyLayer(a1);

    if (!LODWORD(v208))
      goto LABEL_69;
    goto LABEL_68;
  }
  v142 = CGColorRef.components.getter();
  if (v142)
  {
    if (*(_QWORD *)(v142 + 16) >= 4uLL)
    {
      v143 = *(double *)(v142 + 56);

      swift_bridgeObjectRelease();
      v144 = 1.0;
      if ((LOBYTE(v208) & 1) == 0)
      {
        CRRegister.wrappedValue.getter();
        v144 = v212.a;
      }
      CGContextSetAlpha(a1, v143 * v144);
      v216.a = v140;
      Color.withAlphaComponent(_:)((CGColorRef *)&v212, 1.0);
      v141 = v212.a;
      CGContextBeginTransparencyLayer(a1, 0);
      goto LABEL_65;
    }
    __break(1u);
    goto LABEL_106;
  }
LABEL_110:
  __break(1u);
}

uint64_t specialized Shape.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 104) = *(_BYTE *)a3;
  *(_BYTE *)(v6 + 105) = *(_BYTE *)(a3 + 1);
  *(_BYTE *)(v6 + 106) = *(_BYTE *)(a3 + 2);
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 56) = v7;
  *(_BYTE *)(v6 + 107) = *(_BYTE *)(a3 + 16);
  v8 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v6 + 80) = v8;
  *(_BYTE *)(v6 + 108) = *(_BYTE *)(a3 + 56);
  *(_QWORD *)(v6 + 96) = *(_QWORD *)(a3 + 64);
  *(_BYTE *)(v6 + 109) = *(_BYTE *)(a3 + 72);
  *(_BYTE *)(v6 + 110) = *(_BYTE *)(a3 + 73);
  *(_BYTE *)(v6 + 111) = *(_BYTE *)(a3 + 74);
  return swift_task_switch();
}

uint64_t specialized Shape.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  __int128 v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  CGContext *v11;
  uint64_t v12;
  _BYTE v14[8];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v1 = *(_OWORD *)(v0 + 80);
  v17 = *(_OWORD *)(v0 + 64);
  v2 = *(_BYTE *)(v0 + 111);
  v3 = *(_BYTE *)(v0 + 110);
  v4 = *(_BYTE *)(v0 + 109);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_BYTE *)(v0 + 108);
  v7 = *(_BYTE *)(v0 + 107);
  v8 = *(_BYTE *)(v0 + 106);
  v9 = *(_BYTE *)(v0 + 105);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(CGContext **)(v0 + 16);
  v12 = *(_QWORD *)(v0 + 24);
  v14[0] = *(_BYTE *)(v0 + 104);
  v14[1] = v9;
  v14[2] = v8;
  v15 = v10;
  v16 = v7;
  v18 = v1;
  v19 = v6;
  v20 = v5;
  v21 = v4;
  v22 = v3;
  v23 = v2;
  specialized Shape.renderSync<A>(in:id:capsule:options:)(v11, v12, (uint64_t)v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Shape.indexableTextContent<A>(in:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32CF0;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v1 = (void *)CRAttributedString.attributedString.getter();
  v2 = objc_msgSend(v1, sel_string);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v5;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v5;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t base witness table accessor for CRStruct_Base_10 in Shape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

uint64_t base witness table accessor for CRStruct_Base in Shape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_10 : CRDT in Shape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_6 : CRDT in Shape()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_8 : CRDT in Shape()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<CRExtensible<LineEnd>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in Shape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

uint64_t base witness table accessor for CRMergeable in Shape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

uint64_t base witness table accessor for CRType in Shape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Shape()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_10<Shape> and conformance CRStructMergeableDelta_10<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_10<Shape>, MEMORY[0x1E0D127A8]);
}

uint64_t base witness table accessor for CRCodable in Shape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

uint64_t sub_1DDE76300()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE76340()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE76398()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE763F0()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE76440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_16Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDE76450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_16Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_16Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for Shape();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  return a4(v5);
}

uint64_t sub_1DDE764B8()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE76510()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDE76568()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  return CRRegister.projectedValue.getter();
}

char *initializeBufferWithCopyOfBuffer for Shape(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v56 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v56 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = &a1[v13];
    v15 = (char *)a2 + v13;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v17(&a1[a3[7]], (char *)a2 + a3[7], v16);
    v12(&a1[a3[8]], (char *)a2 + a3[8], v11);
    v18 = a3[9];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v12(&a1[a3[10]], (char *)a2 + a3[10], v11);
    v22 = a3[11];
    v23 = &a1[v22];
    v24 = (char *)a2 + v22;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v26(&a1[a3[12]], (char *)a2 + a3[12], v25);
    v27 = a3[13];
    v28 = &a1[v27];
    v29 = (char *)a2 + v27;
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    v31 = (int *)type metadata accessor for ShapeSecondaryProperties();
    v32 = v31[5];
    v33 = &v28[v32];
    v34 = &v29[v32];
    v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = v31[6];
    v37 = &v28[v36];
    v38 = &v29[v36];
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = v31[7];
    v41 = &v28[v40];
    v42 = &v29[v40];
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = v31[8];
    v45 = &v28[v44];
    v46 = &v29[v44];
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = v31[9];
    v49 = &v28[v48];
    v50 = &v29[v48];
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    v52 = v31[10];
    v53 = &v28[v52];
    v54 = &v29[v52];
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    *(_QWORD *)&v28[v31[11]] = *(_QWORD *)&v29[v31[11]];
    *(_QWORD *)&a1[a3[14]] = *(uint64_t *)((char *)a2 + a3[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Shape(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = a1 + a2[6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + a2[7], v9);
  v7(a1 + a2[8], v6);
  v11 = a1 + a2[9];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v7(a1 + a2[10], v6);
  v13 = a1 + a2[11];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(a1 + a2[12], v14);
  v16 = a1 + a2[13];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = (int *)type metadata accessor for ShapeSecondaryProperties();
  v19 = v16 + v18[5];
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v16 + v18[6];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = v16 + v18[7];
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = v16 + v18[8];
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = v16 + v18[9];
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  v29 = v16 + v18[10];
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v11(a1 + a3[8], a2 + a3[8], v10);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v11(a1 + a3[10], a2 + a3[10], v10);
  v21 = a3[11];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v25(v22, v23, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  v26 = a3[13];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  v31 = v30[5];
  v32 = v27 + v31;
  v33 = v28 + v31;
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = v30[6];
  v36 = v27 + v35;
  v37 = v28 + v35;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = v30[7];
  v40 = v27 + v39;
  v41 = v28 + v39;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = v30[8];
  v44 = v27 + v43;
  v45 = v28 + v43;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v47 = v30[9];
  v48 = v27 + v47;
  v49 = v28 + v47;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  v51 = v30[10];
  v52 = v27 + v51;
  v53 = v28 + v51;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  *(_QWORD *)(v27 + v30[11]) = *(_QWORD *)(v28 + v30[11]);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v11(a1 + a3[8], a2 + a3[8], v10);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v11(a1 + a3[10], a2 + a3[10], v10);
  v21 = a3[11];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24);
  v25(v22, v23, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  v26 = a3[13];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  v31 = v30[5];
  v32 = v27 + v31;
  v33 = v28 + v31;
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = v30[6];
  v36 = v27 + v35;
  v37 = v28 + v35;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = v30[7];
  v40 = v27 + v39;
  v41 = v28 + v39;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = v30[8];
  v44 = v27 + v43;
  v45 = v28 + v43;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = v30[9];
  v48 = v27 + v47;
  v49 = v28 + v47;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  v51 = v30[10];
  v52 = v27 + v51;
  v53 = v28 + v51;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  *(_QWORD *)(v27 + v30[11]) = *(_QWORD *)(v28 + v30[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v11(a1 + a3[8], a2 + a3[8], v10);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v11(a1 + a3[10], a2 + a3[10], v10);
  v21 = a3[11];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  v26 = a3[13];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  v31 = v30[5];
  v32 = v27 + v31;
  v33 = v28 + v31;
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = v30[6];
  v36 = v27 + v35;
  v37 = v28 + v35;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = v30[7];
  v40 = v27 + v39;
  v41 = v28 + v39;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = v30[8];
  v44 = v27 + v43;
  v45 = v28 + v43;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = v30[9];
  v48 = v27 + v47;
  v49 = v28 + v47;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
  v51 = v30[10];
  v52 = v27 + v51;
  v53 = v28 + v51;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  *(_QWORD *)(v27 + v30[11]) = *(_QWORD *)(v28 + v30[11]);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v11(a1 + a3[8], a2 + a3[8], v10);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v11(a1 + a3[10], a2 + a3[10], v10);
  v21 = a3[11];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40);
  v25(v22, v23, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  v26 = a3[13];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  v31 = v30[5];
  v32 = v27 + v31;
  v33 = v28 + v31;
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = v30[6];
  v36 = v27 + v35;
  v37 = v28 + v35;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = v30[7];
  v40 = v27 + v39;
  v41 = v28 + v39;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = v30[8];
  v44 = v27 + v43;
  v45 = v28 + v43;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = v30[9];
  v48 = v27 + v47;
  v49 = v28 + v47;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = v30[10];
  v52 = v27 + v51;
  v53 = v28 + v51;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  *(_QWORD *)(v27 + v30[11]) = *(_QWORD *)(v28 + v30[11]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Shape()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE777B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_13:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_13;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[9];
    goto LABEL_13;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[11];
    goto LABEL_13;
  }
  v17 = type metadata accessor for ShapeSecondaryProperties();
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[13];
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(a1 + a3[14]);
  if (v19 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  return (v19 + 1);
}

uint64_t storeEnumTagSinglePayload for Shape()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE77910(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_13:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_13;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[9];
    goto LABEL_13;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[11];
    goto LABEL_13;
  }
  result = type metadata accessor for ShapeSecondaryProperties();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[13];
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + a4[14]) = (a2 - 1);
  return result;
}

void type metadata completion function for Shape()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Color?>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<CRExtensible<LineEnd>>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>, &lazy protocol witness table cache variable for type TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape> and conformance TaggedValue_9<A, B, C, D, E, F, G, H, I>, MEMORY[0x1E0D12128]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<CRExtensible<LineEnd>>(319, &lazy cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>, &demangling cache variable for type metadata for CRExtensible<LineEnd>, &lazy protocol witness table cache variable for type CRExtensible<LineEnd> and conformance CRExtensible<A>, MEMORY[0x1E0D11CB8]);
          if (v4 <= 0x3F)
          {
            type metadata accessor for ShapeSecondaryProperties();
            if (v5 <= 0x3F)
              swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<CRExtensible<LineEnd>>(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(a4, a3, a5);
    v9 = type metadata accessor for CRRegister();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1DDE77C1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(a1, a2, a3, *(double *)(v4 + 16), a4, *(void **)(v4 + 24));
}

uint64_t sub_1DDE77C4C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_57(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_57()
{
  return swift_release();
}

void partial apply for closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(a1, a2, a3, *(double *)(v4 + 16), a4, *(void **)(v4 + 24));
}

uint64_t sub_1DDE77C80()
{
  return swift_deallocObject();
}

id PaperKitExtensionDocumentViewController.__allocating_init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(a1, a2, a3, a4);
}

uint64_t specialized static CRDataStoreBundle.paperBundle(_:sync:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, _QWORD, uint64_t);
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v25;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v11, v12);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a2, (uint64_t)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v14 = type metadata accessor for CRCodableVersion();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1DDF33AB0;
  v19 = v18 + v17;
  v20 = *(void (**)(unint64_t, _QWORD, uint64_t))(v15 + 104);
  v20(v19, *MEMORY[0x1E0D12370], v14);
  v20(v19 + v16, *MEMORY[0x1E0D12378], v14);
  v21 = one-time initialization token for allReadableFileFormatVersions;
  v22 = a1;
  if (v21 != -1)
    swift_once();
  v23 = one-time initialization token for allFileFormatVersions;
  swift_bridgeObjectRetain();
  if (v23 != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  return CRDataStoreBundle.init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)();
}

BOOL static PaperKitExtensionDocumentViewController.Layout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PaperKitExtensionDocumentViewController.Layout.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PaperKitExtensionDocumentViewController.Layout.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void one-time initialization function for thumbnailHeight()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailHeight = 0x4053000000000000;
}

void one-time initialization function for thumbnailOutlineThickness()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness = 0x4008000000000000;
}

void one-time initialization function for thumbnailToPDFSpacing()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFSpacing = 0x4024000000000000;
}

void one-time initialization function for interPageSpacing()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.interPageSpacing = 0x4024000000000000;
}

double one-time initialization function for thumbnailViewHeight()
{
  double v0;
  double result;

  if (one-time initialization token for thumbnailHeight != -1)
    swift_once();
  v0 = *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailHeight;
  if (one-time initialization token for thumbnailOutlineThickness != -1)
    swift_once();
  result = v0
         + *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness
         + *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness;
  *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewHeight = result;
  return result;
}

double one-time initialization function for thumbnailToPDFVerticalSpaceConstraintConstant()
{
  double v0;
  double result;

  if (one-time initialization token for thumbnailToPDFSpacing != -1)
    swift_once();
  v0 = *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFSpacing;
  if (one-time initialization token for thumbnailOutlineThickness != -1)
    swift_once();
  result = v0 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness;
  *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFVerticalSpaceConstraintConstant = v0 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness;
  return result;
}

void key path setter for PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets : PaperKitExtensionDocumentViewController(__int128 *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  __int128 v8;

  v8 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *a2;
  v5 = (uint64_t)*a2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets;
  swift_beginAccess();
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = objc_msgSend(v4, sel_view);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, sel_setNeedsLayout);

  }
  else
  {
    __break(1u);
  }
}

double PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets;
  swift_beginAccess();
  return *(double *)v1;
}

void PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  char *v4;
  double *v9;
  id v10;
  void *v11;

  v9 = (double *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  swift_beginAccess();
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v10 = objc_msgSend(v4, sel_view);
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, sel_setNeedsLayout);

  }
  else
  {
    __break(1u);
  }
}

void (*PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify;
}

void PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify(uint64_t a1, char a2)
{
  id v4;
  id v5;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = objc_msgSend(*(id *)(a1 + 24), sel_view);
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, sel_setNeedsLayout);

    }
    else
    {
      __break(1u);
    }
  }
}

id PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  objc_class *v57;
  id v58;
  char *v59;
  void *v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(unint64_t, _QWORD, uint64_t);
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void (*v84)(uint64_t, uint64_t);
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  id result;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  id v134;
  uint64_t v135;
  void (*v136)(char *, _QWORD, uint64_t, uint64_t);
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  id v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *FileVersionPolicy;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  objc_super v167;

  v160 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>);
  v156 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v155 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v11, v12);
  v154 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>);
  v152 = *(_QWORD *)(v153 - 8);
  MEMORY[0x1E0C80A78](v153, v14);
  v151 = (char *)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v16, v17);
  v143 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = (id)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v141, v19);
  v139 = (char *)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v138 = (char *)&v133 - v23;
  v142 = type metadata accessor for PaperDocument(0);
  MEMORY[0x1E0C80A78](v142, v24);
  v140 = (char *)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  FileVersionPolicy = (_QWORD *)type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v146 = *(FileVersionPolicy - 1);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v26);
  v28 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v162 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v149 = (char *)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v159 = (char *)&v133 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v35, v36);
  v148 = (char *)&v133 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v133 - v40;
  v42 = type metadata accessor for URL();
  v43 = *(_QWORD *)(v42 - 8);
  v163 = v42;
  v164 = v43;
  MEMORY[0x1E0C80A78](v42, v44);
  v46 = (char *)&v133 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = v45;
  MEMORY[0x1E0C80A78](v47, v48);
  v161 = (char *)&v133 - v49;
  v50 = *a4;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentSyncManager] = 0;
  v51 = v4;
  v157 = v8;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v52 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v52 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentCancellables] = v52;
  *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v53 = &v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  v54 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *(_OWORD *)v53 = *MEMORY[0x1E0DC49E8];
  *((_OWORD *)v53 + 1) = v54;
  v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible] = 0;
  v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors] = 0;
  *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  v55 = &v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource];
  *(_QWORD *)v55 = 0;
  *((_QWORD *)v55 + 1) = 0;
  *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v56 = &v51[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v56 = 0u;
  *((_OWORD *)v56 + 1) = 0u;
  *((_QWORD *)v56 + 4) = 0;

  v57 = (objc_class *)type metadata accessor for PaperKitExtensionDocumentViewController();
  v167.receiver = v51;
  v167.super_class = v57;
  v58 = objc_msgSendSuper2(&v167, sel_initWithNibName_bundle_, 0, 0);
  if ((v50 & 1) == 0)
  {
    v74 = v163;
    v75 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 16);
    v76 = (uint64_t)v161;
    v75(v161, a1, v163);
    v77 = v160;
    v75(v46, v160, v74);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(a3, (uint64_t)&v165, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    v78 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentInlineView());
    v79 = v58;
    v80 = (char *)PaperDocumentInlineView.init(paperURL:coherenceContextURL:encryptionDelegate:)(v76, (uint64_t)v46, (uint64_t)&v165);
    v81 = a1;
    v82 = (char *)v79;
    specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();

    v83 = &v80[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate];
    swift_beginAccess();
    *((_QWORD *)v83 + 1) = &protocol witness table for PaperKitExtensionDocumentViewController;
    swift_unknownObjectWeakAssign();

    outlined destroy of StocksKitCurrencyCache.Provider?(a3, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    v84 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
    v84(v77, v74);
    v84(v81, v74);
    v85 = *(void **)&v82[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
    *(_QWORD *)&v82[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView] = v80;
LABEL_15:

    return v58;
  }
  type metadata accessor for CRContext();
  v134 = v58;
  v59 = (char *)v58;
  v135 = a3;
  v60 = (void *)MEMORY[0x1DF0E3C90](0, a3);
  v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56);
  v144 = v29;
  v136 = v61;
  v61(v41, 1, 1, v29);
  v62 = specialized static CRDataStoreBundle.paperBundle(_:sync:at:)(v60, (uint64_t)v41, a1);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v137 = v59;
  *(_QWORD *)&v59[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentSyncManager] = v62;
  v158 = v62;
  swift_retain();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v63 = type metadata accessor for CRCodableVersion();
  v64 = a1;
  v65 = *(_QWORD *)(v63 - 8);
  v66 = *(_QWORD *)(v65 + 72);
  v67 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1DDF33AB0;
  v69 = v68 + v67;
  v70 = *(void (**)(unint64_t, _QWORD, uint64_t))(v65 + 104);
  v70(v68 + v67, *MEMORY[0x1E0D12370], v63);
  v70(v69 + v66, *MEMORY[0x1E0D12378], v63);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  v71 = v146;
  v72 = FileVersionPolicy;
  (*(void (**)(char *, _QWORD, _QWORD *))(v146 + 104))(v28, *MEMORY[0x1E0D127E0], FileVersionPolicy);
  v73 = v148;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  v145 = v64;
  (*(void (**)(char *, _QWORD *))(v71 + 8))(v28, v72);
  swift_bridgeObjectRelease();
  v86 = v144;
  v136(v73, 0, 1, v144);
  v87 = v162;
  v88 = v159;
  (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v159, v73, v86);
  v89 = (uint64_t)v149;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v149, v88, v86);
  LOBYTE(v165) = 0;
  v90 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  v91 = v60;
  v142 = (uint64_t)specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(v91, v89, (unsigned __int8 *)&v165);
  v141 = v91;

  v165 = CRDataStoreBundle.publisher.getter();
  v149 = (char *)objc_opt_self();
  v166 = objc_msgSend(v149, sel_mainRunLoop);
  v148 = (char *)type metadata accessor for NSRunLoop.SchedulerOptions();
  FileVersionPolicy = *(_QWORD **)(*((_QWORD *)v148 - 1) + 56);
  v92 = (uint64_t)v154;
  ((void (*)(char *, uint64_t, uint64_t, char *))FileVersionPolicy)(v154, 1, 1, v148);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>);
  v146 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>, MEMORY[0x1E0C95D90]);
  v143 = (char *)lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  v93 = v151;
  Publisher.receive<A>(on:options:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v92, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  swift_release();
  v94 = swift_allocObject();
  v95 = v137;
  swift_unknownObjectWeakInit();
  v96 = v163;
  v97 = v164;
  v98 = v161;
  (*(void (**)(char *, uint64_t, uint64_t))(v164 + 16))(v161, v145, v163);
  v99 = (*(unsigned __int8 *)(v97 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  v100 = (v150 + v99 + 7) & 0xFFFFFFFFFFFFFFF8;
  v101 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v97 + 32))(v101 + v99, v98, v96);
  *(_QWORD *)(v101 + v100) = v94;
  swift_allocObject();
  v102 = v95;
  swift_unknownObjectWeakInit();
  v103 = MEMORY[0x1E0C95CB8];
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>, MEMORY[0x1E0C95CB8]);
  v104 = v153;
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  v105 = v93;
  v106 = (char *)v142;
  (*(void (**)(char *, uint64_t))(v152 + 8))(v105, v104);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v107 = *(_QWORD *)&v106[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<PaperDocument>, Never>>);
  v108 = swift_allocObject();
  *(_QWORD *)(v108 + 16) = v107;
  v165 = v108;
  swift_retain();
  v166 = objc_msgSend(v149, sel_mainRunLoop);
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))FileVersionPolicy)(v92, 1, 1, v148);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>, MEMORY[0x1E0C95D90]);
  v109 = v155;
  Publisher.receive<A>(on:options:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v92, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  swift_release();
  v110 = swift_allocObject();
  swift_weakInit();
  v111 = swift_allocObject();
  *(_QWORD *)(v111 + 16) = v110;
  *(_QWORD *)(v111 + 24) = v102;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>, v103);
  v112 = v102;
  v113 = v157;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v156 + 8))(v109, v113);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  objc_msgSend(v112, sel_addChildViewController_, v106);
  result = objc_msgSend(v106, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_19;
  }
  v115 = result;
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 1);

  result = objc_msgSend(v106, sel_view);
  v116 = v160;
  v117 = v135;
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v118 = result;
  objc_msgSend(result, sel_setAutoresizingMask_, 18);

  result = objc_msgSend(v106, sel_view);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v119 = result;
  result = objc_msgSend(v112, sel_view);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v120 = result;
  objc_msgSend(result, sel_bounds);
  v122 = v121;
  v124 = v123;
  v126 = v125;
  v128 = v127;

  objc_msgSend(v119, sel_setFrame_, v122, v124, v126, v128);
  result = objc_msgSend(v112, sel_view);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v129 = result;
  result = objc_msgSend(v106, sel_view);
  if (result)
  {
    v130 = result;
    objc_msgSend(v129, sel_addSubview_, result);

    objc_msgSend(v106, sel_didMoveToParentViewController_, v112);
    swift_release();

    outlined destroy of StocksKitCurrencyCache.Provider?(v117, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    v131 = v163;
    v132 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
    v132(v116, v163);
    v132(v145, v131);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v159, v144);
    v85 = *(void **)&v112[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController];
    *(_QWORD *)&v112[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController] = v106;
    v58 = v134;
    goto LABEL_15;
  }
LABEL_23:
  __break(1u);
  return result;
}

void closure #1 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  if (v11)
  {
    v12 = a3 + 16;
    v13 = v11;
    if (one-time initialization token for logger != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
    v15 = v11;
    v16 = v11;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v31 = v12;
      v21 = v20;
      v33[0] = v20;
      *(_DWORD *)v19 = 136315394;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      *(_WORD *)(v19 + 12) = 2080;
      v32 = (uint64_t)v11;
      v24 = v11;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v25 = String.init<A>(describing:)();
      v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v17, v18, "Failed to load PaperDocument file: %s. Error: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      v27 = v21;
      v12 = v31;
      MEMORY[0x1DF0E6558](v27, -1, -1);
      MEMORY[0x1DF0E6558](v19, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

    }
    swift_beginAccess();
    v28 = MEMORY[0x1DF0E666C](v12);
    if (v28)
    {
      v29 = (void *)v28;
      if (MEMORY[0x1DF0E666C](v28 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate))
      {
        specialized ExtensionViewController.documentViewController(_:didFailToLoad:)(v11);

        swift_unknownObjectRelease();
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

void closure #2 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char *v6;
  void **v7;
  void *v8;
  char *v9;
  id v10;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(char **)(v4 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
    if (v6)
    {
      v7 = (void **)&v6[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
      swift_beginAccess();
      v8 = *v7;
      if (*v7)
      {
        v9 = v6;
        v10 = v8;
        specialized PaperDocumentView.merge<A>(_:from:)(a1, 3u);

        v5 = v10;
      }
    }

  }
}

uint64_t closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    CRDataStoreBundle.sync(_:finished:)();
    swift_release();
    return swift_release_n();
  }
  return result;
}

void closure #1 in closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate))
    {
      specialized ExtensionViewController.documentViewControllerDidSave(_:)();

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.viewDidLoad()()
{
  char *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for PaperKitExtensionDocumentViewController();
  objc_msgSendSuper2(&v8, sel_viewDidLoad);
  v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    v2 = v1;
    v3 = (void *)objc_opt_self();
    v4 = objc_msgSend(v3, sel_secondarySystemBackgroundColor);
    objc_msgSend(v2, sel_setBackgroundColor_, v4);

    v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v3, sel_secondarySystemBackgroundColor);
      objc_msgSend(v6, sel_setBackgroundColor_, v7);

    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()()
{
  char *v0;
  double *v1;
  double v2;
  double v3;
  uint64_t v4;
  _QWORD *v5;
  id *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  objc_super v16;

  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for PaperKitExtensionDocumentViewController();
  objc_msgSendSuper2(&v16, sel_viewWillLayoutSubviews);
  v1 = (double *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  swift_beginAccess();
  v2 = v1[1];
  v3 = v1[3];
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
  if (v4)
  {
    v5 = (_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    if (*v5)
    {
      v6 = (id *)(*v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      v7 = objc_msgSend(*v6, sel_documentScrollView);
      objc_msgSend(v7, sel_setContentInset_, 0.0, v2, 0.0, v3);

    }
  }
  v8 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView];
  if (v8)
  {
    v9 = v8;
    v10 = (void *)specialized firstSubview #1 <A>(in:) in PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()(v9);
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v10, sel_collectionViewLayout);
      objc_opt_self();
      v13 = (void *)swift_dynamicCastObjCClass();
      if (v13)
        objc_msgSend(v13, sel_setSectionInset_, *MEMORY[0x1E0DC49E8], *(double *)(MEMORY[0x1E0DC49E8] + 8), *(double *)(MEMORY[0x1E0DC49E8] + 16), *(double *)(MEMORY[0x1E0DC49E8] + 24));

      v14 = one-time initialization token for thumbnailOutlineThickness;
      v15 = v11;
      if (v14 != -1)
        swift_once();
      objc_msgSend(v15, sel_setContentInset_, 0.0, v2 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness, 0.0, v3 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness);

    }
    else
    {
      v15 = v9;
    }

  }
}

uint64_t specialized firstSubview #1 <A>(in:) in PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;

  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    v3 = v2;
    v4 = a1;
  }
  else
  {
    v5 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
      goto LABEL_16;
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v7)
    {
      v8 = 4;
      while (1)
      {
        v9 = (v6 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v8 - 4, v6) : *(id *)(v6 + 8 * v8);
        v10 = v9;
        v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        v3 = specialized firstSubview #1 <A>(in:) in PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()(v9);

        if (v3)
        {
          swift_bridgeObjectRelease();
          return v3;
        }
        ++v8;
        if (v11 == v7)
          goto LABEL_12;
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void PaperKitExtensionDocumentViewController.adjustScaleAndInterpageSpacing()()
{
  char *v0;
  char *v1;
  char *v2;
  void **v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double Width;
  double v30;
  double v31;
  double v32;
  CGRect v33;

  v1 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    if (*(_QWORD *)v2)
    {
      v3 = (void **)(*(_QWORD *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      v4 = *v3;
      if (v4)
      {
        v5 = v1;
        v6 = v4;
        v7 = objc_msgSend(v6, sel_documentScrollView);
        if (v7)
        {
          v8 = v7;
          v9 = (char *)objc_msgSend(v6, sel_documentView);
          if (v9)
          {
            v10 = v9;
            objc_msgSend(v5, sel_setNeedsLayout);
            objc_msgSend(v5, sel_layoutIfNeeded);
            objc_msgSend(v8, sel_contentOffset);
            v12 = v11;
            objc_msgSend(v8, sel_contentSize);
            v14 = v13;
            objc_msgSend(v8, sel_contentOffset);
            v16 = v15;
            objc_msgSend(v6, sel_scaleFactorForSizeToFit);
            v18 = v17;
            objc_msgSend(v6, sel_setMinScaleFactor_);
            objc_msgSend(v6, sel_setMaxScaleFactor_, v18);
            objc_msgSend(v6, sel_setScaleFactor_, v18);
            objc_msgSend(v6, sel_layoutDocumentView);
            if (one-time initialization token for interPageSpacing != -1)
              swift_once();
            v19 = *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.interPageSpacing;
            v20 = objc_msgSend(v0, sel_view);
            objc_msgSend(v10, sel_convertRect_fromView_, v20, 0.0, 0.0, v19, v19);
            v22 = v21;
            v24 = v23;
            v26 = v25;
            v28 = v27;

            v33.origin.x = v22;
            v33.origin.y = v24;
            v33.size.width = v26;
            v33.size.height = v28;
            Width = CGRectGetWidth(v33);
            objc_msgSend(v6, sel_setPageBreakMargins_, 0.0, Width, 0.0, Width);
            objc_msgSend(v6, sel_setDocumentMargins_, 0.0, -Width, 0.0, -Width);
            if (v16 <= 0.0)
            {
              objc_msgSend(v8, sel_adjustedContentInset);
              v31 = -v32;
            }
            else
            {
              objc_msgSend(v8, sel_contentSize);
              v31 = v12 / v14 * v30;
            }
            objc_msgSend(v8, sel_contentOffset);
            objc_msgSend(v8, sel_setContentOffset_, v31);

            v5 = (char *)v8;
          }
          else
          {
            v10 = v5;
            v5 = (char *)v6;
            v6 = v8;
          }

        }
      }
    }
  }
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.paperDocumentDidSave()()
{
  PaperKitExtensionDocumentViewController.paperDocumentDidSave()((void (*)(void))specialized ExtensionViewController.documentViewControllerDidSave(_:));
}

uint64_t PaperKitExtensionDocumentViewController.paperDocumentDidFailToLoad(_:)(void *a1)
{
  uint64_t v1;
  uint64_t result;

  result = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate);
  if (result)
  {
    specialized ExtensionViewController.documentViewController(_:didFailToLoad:)(a1);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.paperDocumentDidScroll()()
{
  PaperKitExtensionDocumentViewController.paperDocumentDidSave()((void (*)(void))specialized ExtensionViewController.documentViewControllerDidScroll(_:));
}

uint64_t PaperKitExtensionDocumentViewController.paperDocumentDidSave()(void (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  result = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate);
  if (result)
  {
    a1();
    return swift_unknownObjectRelease();
  }
  return result;
}

void PaperKitExtensionDocumentViewController.paperDocumentDidLoad(dataModel:view:)(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void *v4;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  char *v8;
  void *v9;
  id v10;
  char *v11;
  void **v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  char *v19;
  id *v20;
  id v21;
  id v22;
  double v23;
  double v24;
  double v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  double v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  Class isa;
  char *v91;
  id v92;
  unsigned __int8 v93[24];

  v3 = v2;
  v4 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
  if (v4)
  {
    v6 = (unsigned __int8 *)&a2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
    swift_beginAccess();
    v7 = *v6;
    *v6 = 0;
    v93[0] = v7;
    v8 = v4;
    PaperDocumentView.editingMode.didset(v93);
    v9 = (void *)objc_opt_self();
    v10 = objc_msgSend(v9, sel_clearColor);
    objc_msgSend(a2, sel_setBackgroundColor_, v10);

    type metadata accessor for PaperDocumentThumbnailView();
    v11 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v92 = v8;
    v12 = (void **)&v8[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    v13 = *v12;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    v14 = v13;
    PaperDocumentThumbnailView.documentView.didset();

    v15 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
    v16 = *(id *)&v11[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView];
    v17 = objc_msgSend(v9, sel_clearColor);
    objc_msgSend(v16, sel_setBackgroundColor_, v17);

    if (one-time initialization token for thumbnailViewHeight != -1)
      swift_once();
    objc_msgSend(*(id *)&v11[v15], sel_setThumbnailSize_, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewHeight, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewHeight);
    v18 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView] = v11;
    v19 = v11;

    v20 = (id *)&a2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v20)
    {
      v21 = *v20;
      objc_msgSend(v21, sel_enablePageShadows_, 0);
      objc_msgSend(v21, sel_setDisplayDirection_, 1);
      v22 = objc_msgSend(v9, sel_clearColor);
      objc_msgSend(v21, sel_setBackgroundColor_, v22);

      objc_msgSend(v21, sel_pageBreakMargins);
      objc_msgSend(v21, sel_setPageBreakMargins_, 0.0);
      objc_msgSend(v21, sel_pageBreakMargins);
      objc_msgSend(v21, sel_setPageBreakMargins_);
      objc_msgSend(v21, sel_pageBreakMargins);
      v24 = -v23;
      objc_msgSend(v21, sel_pageBreakMargins);
      objc_msgSend(v21, sel_setDocumentMargins_, 0.0, v24, 0.0, -v25);
      objc_msgSend(*(id *)&v11[v15], sel_setLayoutMode_, 1);
      v26 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v27 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000012, 0x80000001DDF5A5A0);
      objc_msgSend(v26, sel_postNotificationName_object_, v27, v21);

      v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
      objc_msgSend(v28, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      objc_msgSend(v28, sel_addSubview_, v19);
      objc_msgSend(v28, sel_setClipsToBounds_, 1);
      objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      objc_msgSend(v92, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      v29 = objc_msgSend(v3, sel_view);
      if (v29)
      {
        v30 = v29;
        v91 = v19;
        objc_msgSend(v29, sel_addSubview_, v92);

        v31 = objc_msgSend(v3, sel_view);
        if (v31)
        {
          v32 = v31;
          objc_msgSend(v31, sel_addSubview_, v28);

          v33 = objc_msgSend(v28, sel_heightAnchor);
          v34 = objc_msgSend(v33, sel_constraintEqualToConstant_, 0.0);

          v35 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint;
          v36 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint];
          *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint] = v34;

          v37 = objc_msgSend(v28, sel_bottomAnchor);
          v38 = objc_msgSend(v91, sel_bottomAnchor);
          if (one-time initialization token for thumbnailToPDFVerticalSpaceConstraintConstant != -1)
            swift_once();
          v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFVerticalSpaceConstraintConstant);

          LODWORD(v40) = 1144750080;
          objc_msgSend(v39, sel_setPriority_, v40);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v41 = swift_allocObject();
          *(_OWORD *)(v41 + 16) = xmmword_1DDF45890;
          v42 = objc_msgSend(v3, sel_view);
          if (v42)
          {
            v43 = v42;
            v44 = objc_msgSend(v42, sel_topAnchor);

            v45 = objc_msgSend(v28, sel_topAnchor);
            v46 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v45);

            *(_QWORD *)(v41 + 32) = v46;
            v47 = objc_msgSend(v3, sel_view);
            if (v47)
            {
              v48 = v47;
              v49 = objc_msgSend(v47, sel_leadingAnchor);

              v50 = objc_msgSend(v28, sel_leadingAnchor);
              v51 = objc_msgSend(v49, sel_constraintEqualToAnchor_, v50);

              *(_QWORD *)(v41 + 40) = v51;
              v52 = objc_msgSend(v3, sel_view);
              if (v52)
              {
                v53 = v52;
                v54 = objc_msgSend(v52, sel_trailingAnchor);

                v55 = objc_msgSend(v28, sel_trailingAnchor);
                v56 = objc_msgSend(v54, sel_constraintEqualToAnchor_, v55);

                *(_QWORD *)(v41 + 48) = v56;
                v57 = objc_msgSend(v28, sel_bottomAnchor);
                v58 = objc_msgSend(v92, sel_topAnchor);
                v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_, v58);

                *(_QWORD *)(v41 + 56) = v59;
                v60 = objc_msgSend(v3, sel_view);
                if (v60)
                {
                  v61 = v60;
                  v62 = objc_msgSend(v60, sel_leadingAnchor);

                  v63 = objc_msgSend(v92, sel_leadingAnchor);
                  v64 = objc_msgSend(v62, sel_constraintEqualToAnchor_, v63);

                  *(_QWORD *)(v41 + 64) = v64;
                  v65 = objc_msgSend(v3, sel_view);
                  if (v65)
                  {
                    v66 = v65;
                    v67 = objc_msgSend(v65, sel_trailingAnchor);

                    v68 = objc_msgSend(v92, sel_trailingAnchor);
                    v69 = objc_msgSend(v67, sel_constraintEqualToAnchor_, v68);

                    *(_QWORD *)(v41 + 72) = v69;
                    v70 = objc_msgSend(v3, sel_view);
                    if (v70)
                    {
                      v71 = v70;
                      v72 = objc_msgSend(v70, sel_bottomAnchor);

                      v73 = objc_msgSend(v92, sel_bottomAnchor);
                      v74 = objc_msgSend(v72, sel_constraintEqualToAnchor_, v73);

                      *(_QWORD *)(v41 + 80) = v74;
                      v75 = objc_msgSend(v91, sel_heightAnchor);
                      v76 = objc_msgSend(v75, sel_constraintEqualToConstant_, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewHeight);

                      *(_QWORD *)(v41 + 88) = v76;
                      v77 = objc_msgSend(v28, sel_leadingAnchor);
                      v78 = objc_msgSend(v91, sel_leadingAnchor);
                      v79 = objc_msgSend(v77, sel_constraintEqualToAnchor_, v78);

                      *(_QWORD *)(v41 + 96) = v79;
                      v80 = objc_msgSend(v28, sel_trailingAnchor);
                      v81 = objc_msgSend(v91, sel_trailingAnchor);
                      v82 = objc_msgSend(v80, sel_constraintEqualToAnchor_, v81);

                      *(_QWORD *)(v41 + 104) = v82;
                      v83 = objc_msgSend(v28, sel_topAnchor);
                      v84 = objc_msgSend(v91, sel_topAnchor);
                      v85 = objc_msgSend(v83, sel_constraintEqualToAnchor_, v84);

                      *(_QWORD *)(v41 + 112) = v85;
                      *(_QWORD *)(v41 + 120) = v39;
                      v86 = *(void **)&v3[v35];
                      if (v86)
                      {
                        v87 = (void *)objc_opt_self();
                        *(_QWORD *)(v41 + 128) = v86;
                        specialized Array._endMutation()();
                        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
                        v88 = v39;
                        v89 = v86;
                        isa = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease();
                        objc_msgSend(v87, sel_activateConstraints_, isa);

                        return;
                      }
LABEL_27:
                      __break(1u);
                      return;
                    }
LABEL_26:
                    __break(1u);
                    goto LABEL_27;
                  }
LABEL_25:
                  __break(1u);
                  goto LABEL_26;
                }
LABEL_24:
                __break(1u);
                goto LABEL_25;
              }
LABEL_23:
              __break(1u);
              goto LABEL_24;
            }
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
}

