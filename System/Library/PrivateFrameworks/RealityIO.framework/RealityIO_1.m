uint64_t addFault #1 (_:_:) in ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v27 - v13;
  v15 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  v16 = *(_QWORD *)(a4 + 16);
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>);
    v22 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_22BD0C360;
    outlined init with copy of ImportSession.EvaluationFault(a3, v23 + v22);
    swift_bridgeObjectRetain();
    v24 = specialized Set.init(_nonEmptyArrayLiteral:)(v23);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v15;
    *v15 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, a1, a2, isUniquelyReferenced_nonNull_native);
    v21 = v29;
    goto LABEL_6;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of ImportSession.EvaluationFault(a3, (uint64_t)v11);
  specialized Set._Variant.insert(_:)((uint64_t)v14, (uint64_t)v11);
  outlined destroy of ImportSession.EvaluationFault((uint64_t)v14);
  v19 = v29;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v20 = swift_isUniquelyReferenced_nonNull_native();
  v28 = *v15;
  *v15 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a1, a2, v20);
  v21 = v28;
LABEL_6:
  *v15 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = String.init(cString:)();
  v11 = v10;
  if (a2 != 4 && a2 != 3)
    return swift_bridgeObjectRelease();
  *v8 = String.init(cString:)();
  v8[1] = v12;
  swift_storeEnumTagMultiPayload();
  addFault #1 (_:_:) in ImportSession.getCompatibilityFaultsByPrimPath(for:)(v9, v11, (uint64_t)v8, a4);
  swift_bridgeObjectRelease();
  return outlined destroy of ImportSession.EvaluationFault((uint64_t)v8);
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::UInt32 v9;
  uint64_t v10;
  Swift::UInt32 v11;
  uint64_t v13;

  v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE63C0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, v5, MEMORY[0x24BDE63C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  v9 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v9);
  v10 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v10));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v11);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, (uint64_t (*)(uint64_t))MEMORY[0x24BDE6428], MEMORY[0x24BDE6430]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

Swift::Int __REAssetBundle.ExportOptions.DeploymentTarget.hashValue.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::UInt32 v10;
  uint64_t v11;
  Swift::UInt32 v12;
  uint64_t v14;

  v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE6428];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE63C0];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, v6, MEMORY[0x24BDE63C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  v10 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v10);
  v11 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v11));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v12);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, v1, MEMORY[0x24BDE6430]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __REAssetBundle.ExportOptions.DeploymentTarget()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::UInt32 v9;
  uint64_t v10;
  Swift::UInt32 v11;
  uint64_t v13;

  v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE63C0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, v5, MEMORY[0x24BDE63C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  v9 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v9);
  v10 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v10));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v11);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, (uint64_t (*)(uint64_t))MEMORY[0x24BDE6428], MEMORY[0x24BDE6430]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAssetBundle.ExportOptions.DeploymentTarget()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::UInt32 v10;
  uint64_t v11;
  Swift::UInt32 v12;
  uint64_t v14;

  v0 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE6428];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE63C0];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, v6, MEMORY[0x24BDE63C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  v10 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v10);
  v11 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(HIDWORD(v11));
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  Hasher._combine(_:)(v12);
  __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, v1, MEMORY[0x24BDE6430]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v0);
  return Hasher._finalize()();
}

uint64_t static ImportSession.primPathMetadataKey.getter()
{
  RIOImportSessionPrimPathMetadataKey();
  return String.init(cString:)();
}

uint64_t static ImportSession.resolvedPathMetadataKey.getter()
{
  RIOImportSessionResolvedPathMetadataKey();
  return String.init(cString:)();
}

uint64_t static ImportSession.assetInfoMetadataKey.getter()
{
  RIOImportSessionAssetInfoMetadataKey();
  return String.init(cString:)();
}

uint64_t partial apply for closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:)(a1, a2, a3, v3);
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t outlined assign with take of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_22BCA1B54()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ImportSession.register(builderGenerator:)(void *a1)
{
  uint64_t v1;

  return closure #1 in ImportSession.register(builderGenerator:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for ImportSession(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for ImportSession);
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  id v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = *(_QWORD *)(v17 + 8 * v10);
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)a2, a1, v16);
      v21 = a2;
      return 0;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, void *a2))(uint64_t a1)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  id v6;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = a2;
  v4[9] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[10] = specialized _NativeDictionary.subscript.modify(v4 + 4, v6, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);

  v2(v1, 0);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, void *a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (void *)(*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  _QWORD *v8;
  id v10;

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)a5, v7, v8);
      v10 = a5;
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v4 = v2;
  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(isStackAllocationSafe + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v4 = a2((char *)v10, v7, v5);
    MEMORY[0x22E2F898C](v10, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v21;

  v21 = (unint64_t *)result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      do
      {
LABEL_5:
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v5 << 6);
        }
        else
        {
          v11 = __OFADD__(v5++, 1);
          if (v11)
            goto LABEL_36;
          if (v5 >= v10)
            return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
          {
            v15 = v5 + 1;
            if (v5 + 1 >= v10)
              return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
            v14 = *(_QWORD *)(v6 + 8 * v15);
            if (!v14)
            {
              v15 = v5 + 2;
              if (v5 + 2 >= v10)
                return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
              v14 = *(_QWORD *)(v6 + 8 * v15);
              if (!v14)
              {
                v15 = v5 + 3;
                if (v5 + 3 >= v10)
                  return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
                v14 = *(_QWORD *)(v6 + 8 * v15);
                if (!v14)
                {
                  while (1)
                  {
                    v5 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_38;
                    if (v5 >= v10)
                      return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
                    v14 = *(_QWORD *)(v6 + 8 * v5);
                    ++v15;
                    if (v14)
                      goto LABEL_17;
                  }
                }
              }
            }
            v5 = v15;
          }
LABEL_17:
          v9 = (v14 - 1) & v14;
          v13 = __clz(__rbit64(v14)) + (v5 << 6);
        }
        v16 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13);
        if (one-time initialization token for realityKitComponentClasses != -1)
          swift_once();
        result = swift_beginAccess();
        v17 = *((_QWORD *)static ImportSession.realityKitComponentClasses + 2);
      }
      while (!v17);
      if (*((_QWORD *)static ImportSession.realityKitComponentClasses + 4) != v16)
        break;
LABEL_4:
      *(unint64_t *)((char *)v21 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v11 = __OFADD__(v4++, 1);
      if (v11)
        goto LABEL_37;
    }
    if (v17 != 1)
    {
      if (*((_QWORD *)static ImportSession.realityKitComponentClasses + 5) == v16)
        goto LABEL_4;
      if (v17 != 2)
        break;
    }
  }
  v18 = 6;
  while (1)
  {
    v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
      break;
    if (*((_QWORD *)static ImportSession.realityKitComponentClasses + v18) == v16)
      goto LABEL_4;
    ++v18;
    if (v19 == v17)
      goto LABEL_5;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v21;

  v21 = (unint64_t *)result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    while (1)
    {
LABEL_5:
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v5 << 6);
      }
      else
      {
        v11 = __OFADD__(v5++, 1);
        if (v11)
          goto LABEL_36;
        if (v5 >= v10)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
        {
          v15 = v5 + 1;
          if (v5 + 1 >= v10)
            return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
          v14 = *(_QWORD *)(v6 + 8 * v15);
          if (!v14)
          {
            v15 = v5 + 2;
            if (v5 + 2 >= v10)
              return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
            v14 = *(_QWORD *)(v6 + 8 * v15);
            if (!v14)
            {
              v15 = v5 + 3;
              if (v5 + 3 >= v10)
                return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
              v14 = *(_QWORD *)(v6 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v5 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v5 >= v10)
                    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v4, a3);
                  v14 = *(_QWORD *)(v6 + 8 * v5);
                  ++v15;
                  if (v14)
                    goto LABEL_17;
                }
              }
            }
          }
          v5 = v15;
        }
LABEL_17:
        v9 = (v14 - 1) & v14;
        v13 = __clz(__rbit64(v14)) + (v5 << 6);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13);
      if (one-time initialization token for realityKitComponentClasses != -1)
        swift_once();
      result = swift_beginAccess();
      v17 = *((_QWORD *)static ImportSession.realityKitComponentClasses + 2);
      if (v17)
        break;
LABEL_4:
      *(unint64_t *)((char *)v21 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v11 = __OFADD__(v4++, 1);
      if (v11)
        goto LABEL_37;
    }
    if (*((_QWORD *)static ImportSession.realityKitComponentClasses + 4) != v16)
    {
      if (v17 == 1)
        goto LABEL_4;
      if (*((_QWORD *)static ImportSession.realityKitComponentClasses + 5) != v16)
        break;
    }
  }
  if (v17 == 2)
    goto LABEL_4;
  v18 = 6;
  while (1)
  {
    v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
      break;
    if (*((_QWORD *)static ImportSession.realityKitComponentClasses + v18) == v16)
      goto LABEL_5;
    ++v18;
    if (v19 == v17)
      goto LABEL_4;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  __int128 v29;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, RETypeID>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v28[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v28[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v28[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v29 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v22) = v29;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *inited;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v2 = -1 << *(_BYTE *)(a1 + 32);
  v3 = a1 + 64;
  v4 = ~v2;
  v5 = -v2;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a1 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : ImportSession.MeshAssetEstimate].Iterator>);
  inited = (_QWORD *)swift_initStackObject();
  inited[2] = a1;
  inited[3] = v3;
  inited[4] = v4;
  inited[5] = 0;
  inited[6] = v7;
  swift_bridgeObjectRetain();
  result = specialized _IteratorBox.next()((uint64_t)&v31);
  v10 = v32;
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v12 = 0;
  if (v32)
  {
    v13 = MEMORY[0x24BEE4AF8] + 32;
    v15 = v33;
    v14 = v34;
    while (1)
    {
      v16 = v31;
      if (!v12)
      {
        v17 = v11[3];
        if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_27;
        v29 = v15;
        v30 = v14;
        v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
        if (v18 <= 1)
          v19 = 1;
        else
          v19 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: ImportSession.MeshAssetEstimate)>);
        v20 = (_QWORD *)swift_allocObject();
        v21 = (uint64_t)(_swift_stdlib_malloc_size(v20) - 32) / 48;
        v20[2] = v19;
        v20[3] = 2 * v21;
        v22 = (unint64_t)(v20 + 4);
        v23 = v11[3] >> 1;
        if (v11[2])
        {
          if (v20 != v11 || v22 >= (unint64_t)&v11[6 * v23 + 4])
            memmove(v20 + 4, v11 + 4, 48 * v23);
          v11[2] = 0;
        }
        v13 = v22 + 48 * v23;
        v12 = (v21 & 0x7FFFFFFFFFFFFFFFLL) - v23;
        result = swift_release();
        v11 = v20;
        v15 = v29;
        v14 = v30;
      }
      v25 = __OFSUB__(v12--, 1);
      if (v25)
        break;
      *(_QWORD *)v13 = v16;
      *(_QWORD *)(v13 + 8) = v10;
      *(_OWORD *)(v13 + 16) = v15;
      *(_OWORD *)(v13 + 32) = v14;
      result = specialized _IteratorBox.next()((uint64_t)&v31);
      v10 = v32;
      v13 += 48;
      v15 = v33;
      v14 = v34;
      if (!v32)
        goto LABEL_22;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_22:
  swift_setDeallocating();
  result = outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
  v26 = v11[3];
  if (v26 < 2)
    return (uint64_t)v11;
  v27 = v26 >> 1;
  v25 = __OFSUB__(v27, v12);
  v28 = v27 - v12;
  if (!v25)
  {
    v11[2] = v28;
    return (uint64_t)v11;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)()
{
  uint64_t result;
  __int128 v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  ImportSession.TextureOperatorContainer.makeIterator()();
  result = dispatch thunk of _AnyIteratorBoxBase.next()();
  v1 = v18;
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = 0;
  if ((_QWORD)v18)
  {
    v4 = v17;
    for (i = MEMORY[0x24BEE4AF8] + 32; ; i += 24)
    {
      if (!v3)
      {
        v6 = v2[3];
        if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_23;
        v16 = v1;
        v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        if (v7 <= 1)
          v8 = 1;
        else
          v8 = v7;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: OpaquePointer)>);
        v9 = (_QWORD *)swift_allocObject();
        v10 = (uint64_t)(_swift_stdlib_malloc_size(v9) - 32) / 24;
        v9[2] = v8;
        v9[3] = 2 * v10;
        v11 = (unint64_t)(v9 + 4);
        v12 = v2[3] >> 1;
        if (v2[2])
        {
          if (v9 != v2 || v11 >= (unint64_t)&v2[3 * v12 + 4])
            memmove(v9 + 4, v2 + 4, 24 * v12);
          v2[2] = 0;
        }
        i = v11 + 24 * v12;
        v3 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - v12;
        result = swift_release();
        v2 = v9;
        v1 = v16;
      }
      if (__OFSUB__(v3--, 1))
        break;
      *(_QWORD *)i = v4;
      *(_OWORD *)(i + 8) = v1;
      result = dispatch thunk of _AnyIteratorBoxBase.next()();
      v4 = v17;
      v1 = v18;
    }
    __break(1u);
LABEL_23:
    __break(1u);
    __break(1u);
  }
  else
  {
    swift_release();
    v15 = v2[3];
    if (v15 >= 2)
      v2[2] = v15 >> 1;
    return (uint64_t)v2;
  }
  return result;
}

uint64_t specialized static __REAssetBundle.ExportOptions.DeploymentTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v47 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v45 - v7;
  v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v53 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v45 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v45 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v45 - v16;
  v18 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE63C0];
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v45 - v24;
  v54 = a1;
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  v50 = a2;
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, v19, MEMORY[0x24BDE63D0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v57 == v55 && v58 == v56)
    v26 = 1;
  else
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = *(void (**)(char *, uint64_t))(v20 + 8);
  v27(v22, v18);
  v27(v25, v18);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v28(v17, v54, v8);
  v29 = v50;
  v28(v14, v50, v8);
  if ((v26 & 1) != 0)
  {
    v30 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    v32 = v31;
    v34 = v30 == __REAssetBundle.ExportOptions.DeploymentTarget.version.getter() && v32 == v33;
  }
  else
  {
    v34 = 0;
  }
  v36 = v51;
  v35 = v52;
  v37 = *(void (**)(char *, uint64_t))(v53 + 8);
  v37(v14, v8);
  v37(v17, v8);
  v28(v36, v54, v8);
  v28(v35, v29, v8);
  if (v34)
  {
    v38 = v46;
    __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
    v39 = v47;
    __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
    v40 = static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v48 + 8);
    v42 = v39;
    v43 = v49;
    v41(v42, v49);
    v41(v38, v43);
  }
  else
  {
    v40 = 0;
  }
  v37(v35, v8);
  v37(v36, v8);
  return v40 & 1;
}

void specialized static ImportSession.EvaluationFault.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[3];
  uint64_t v17;

  v17 = a2;
  v3 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v16[1] = *(_QWORD *)(v3 - 8);
  v16[2] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v16[0] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v16 + *(int *)(v13 + 48) - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ImportSession.EvaluationFault(a1, (uint64_t)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ImportSession.EvaluationFault(v17, (uint64_t)v14);
  v15 = (char *)sub_22BCA3084 + 4 * byte_22BD0F32D[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22BCA3084()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  outlined init with copy of ImportSession.EvaluationFault(v2, (uint64_t)v0);
  v4 = *v0;
  v3 = v0[1];
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?(v2, &demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
    goto LABEL_10;
  }
  if (v4 == *v1 && v3 == v1[1])
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
LABEL_11:
    outlined destroy of ImportSession.EvaluationFault(v2);
    v7 = 1;
    return v7 & 1;
  }
  outlined destroy of ImportSession.EvaluationFault(v2);
LABEL_10:
  v7 = 0;
  return v7 & 1;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10RealityKit15__REAssetBundleV13ExportOptionsV16DeploymentTargetV_s5NeverOSo25RERealityFileMajorVersionVTg503_s9c66IO13ImportSessionC19getEvaluationFaultsSDySSSayAC0F5FaultOGGyFSo25lmno11V0A3Kit15__ef3V13gh3V16iJ6VXEfU_SDySSSay0C2IO0rS0C0U5FaultOGGz_XxTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13[2];

  v5 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v11, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
    return 0;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  closure #1 in ImportSession.getEvaluationFaults()((uint64_t)v8, a2, v13);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v13[0];
}

unint64_t lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError;
  if (!lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for ImportSession.LoadError, &type metadata for ImportSession.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError;
  if (!lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for ImportSession.LoadError, &type metadata for ImportSession.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImportSession.LoadError and conformance ImportSession.LoadError);
  }
  return result;
}

_QWORD *specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;

  getEngine(_:)(a2);
  v6 = (void *)RIOImportSessionCreateWithStage();
  swift_allocObject();
  return ImportSession.init<A>(core:entityType:)(v6, a5);
}

uint64_t sub_22BCA34AC()
{
  return objectdestroy_16Tm((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t partial apply for closure #1 in static ImportSession.allComponents.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static ImportSession.allComponents.getter(a1, v1);
}

uint64_t sub_22BCA34C0()
{
  return objectdestroy_16Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t type metadata accessor for ImportSession.TextureOperatorContainer()
{
  return objc_opt_self();
}

uint64_t sub_22BCA34EC()
{
  return objectdestroy_16Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_16Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ImportSession.gatherTexturesAsImportOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ImportSession.gatherUsedTexturesAsImportOperations()(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t partial apply for closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates()(a1, a2, a3, a4, a5, v5);
}

uint64_t partial apply for closure #2 in ImportSession.getEvaluationFaults()(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in ImportSession.getEvaluationFaults()(a1, a2, a3, v3);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ImportSession.TextureOperatorContainer()
{
  return lazy protocol witness table accessor for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>, &demangling cache variable for type metadata for AnyIterator<(key: String, value: OpaquePointer)>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ImportSession.MeshAssetEstimates()
{
  return lazy protocol witness table accessor for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<(key: String, value: ImportSession.MeshAssetEstimate)> and conformance AnyIterator<A>, &demangling cache variable for type metadata for AnyIterator<(key: String, value: ImportSession.MeshAssetEstimate)>);
}

uint64_t lazy protocol witness table accessor for type AnyIterator<(key: String, value: OpaquePointer)> and conformance AnyIterator<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE2420], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ImportSession.EvaluationFault()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type ImportSession.EvaluationFault and conformance ImportSession.EvaluationFault, type metadata accessor for ImportSession.EvaluationFault, (uint64_t)&protocol conformance descriptor for ImportSession.EvaluationFault);
}

uint64_t base witness table accessor for Equatable in __REAssetBundle.ExportOptions.DeploymentTarget()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.DeploymentTarget and conformance __REAssetBundle.ExportOptions.DeploymentTarget, (uint64_t (*)(uint64_t))MEMORY[0x24BDE63F8], (uint64_t)&protocol conformance descriptor for __REAssetBundle.ExportOptions.DeploymentTarget);
}

uint64_t sub_22BCA3678@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  return outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v3, a2, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
}

uint64_t sub_22BCA36E0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_74Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE277F0], a2);
}

uint64_t sub_22BCA36EC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_75Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE27898]);
}

uint64_t sub_22BCA36F8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_74Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE27800], a2);
}

uint64_t keypath_get_74Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16));
  *a3 = result;
  return result;
}

uint64_t sub_22BCA3734(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_75Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE278A8]);
}

uint64_t keypath_set_75Tm(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  return a5(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 16), *a1);
}

uint64_t ObjC metadata update function for ImportSession()
{
  return type metadata accessor for ImportSession(0);
}

void type metadata completion function for ImportSession()
{
  unint64_t v0;

  type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ImportSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ImportSession.deploymentTarget.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ImportSession.deploymentTarget.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ImportSession.deploymentTarget.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ImportSession.register(builderGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ImportSession.__allocating_init<A>(core:entityType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t getEnumTagSinglePayload for ImportSession.LoadError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ImportSession.LoadError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_22BCA3934 + 4 * byte_22BD0F339[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_22BCA3968 + 4 * byte_22BD0F334[v4]))();
}

uint64_t sub_22BCA3968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCA3970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22BCA3978);
  return result;
}

uint64_t sub_22BCA3984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22BCA398CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_22BCA3990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCA3998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImportSession.LoadError()
{
  return &type metadata for ImportSession.LoadError;
}

uint64_t method lookup function for ImportSession.TextureOperatorContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.keys.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.values.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.makeIterator()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ImportSession.TextureOperatorContainer.setDownsample(factor:for:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for ImportSession.MeshAssetEstimate()
{
  return &type metadata for ImportSession.MeshAssetEstimate;
}

ValueMetadata *type metadata accessor for ImportSession.MeshAssetEstimates()
{
  return &type metadata for ImportSession.MeshAssetEstimates;
}

uint64_t *initializeBufferWithCopyOfBuffer for ImportSession.EvaluationFault(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 3u:
      case 4u:
      case 5u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v10 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ImportSession.EvaluationFault(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      result = swift_bridgeObjectRelease();
      break;
    case 2:
      v3 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for ImportSession.EvaluationFault(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 4u:
    case 5u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 2u:
      v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for ImportSession.EvaluationFault(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ImportSession.EvaluationFault((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 3u:
      case 4u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for ImportSession.EvaluationFault(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ImportSession.EvaluationFault(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ImportSession.EvaluationFault((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ImportSession.EvaluationFault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ImportSession.EvaluationFault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for ImportSession.EvaluationFault()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ImportSession.EvaluationFault()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #5 in ImportSession.registerDefaultSwiftBuilders()()
{
  return closure #5 in ImportSession.registerDefaultSwiftBuilders()();
}

uint64_t objectdestroy_5Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22BCA4128()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in ImportSession.init<A>(core:entityType:)()
{
  return closure #1 in closure #2 in ImportSession.init<A>(core:entityType:)();
}

uint64_t sub_22BCA4164()
{
  swift_release();
  return swift_deallocObject();
}

id static ToolsFoundations.Token.Scope.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Xform.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Mesh.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Capsule.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Cone.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Cube.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Cylinder.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.Sphere.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

id static ToolsFoundations.Token.PreliminaryText.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  *a1 = result;
  return result;
}

uint64_t ToolsFoundations.Token.schemaPropertyNames()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v0 = (void *)RIOPxrTfTokenCopyTypeSchemaPropertyNames();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v1 = MEMORY[0x24BEE4AF8];
  v2 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = v1;
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v3; ++i)
      {
        v7 = MEMORY[0x22E2F57B8](i, v2);
        v9 = *(_QWORD *)(v5 + 16);
        v8 = *(_QWORD *)(v5 + 24);
        if (v9 >= v8 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        *(_QWORD *)(v5 + 16) = v9 + 1;
        *(_QWORD *)(v5 + 8 * v9 + 32) = v7;
      }
    }
    else
    {
      for (j = 0; j != v3; ++j)
      {
        v11 = *(_QWORD *)(v1 + 16);
        v12 = *(_QWORD *)(v1 + 24);
        v13 = *(id *)(v2 + 8 * j + 32);
        if (v11 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        *(_QWORD *)(v1 + 16) = v11 + 1;
        *(_QWORD *)(v1 + 8 * v11 + 32) = v13;
      }
    }
    swift_bridgeObjectRelease();

    return v5;
  }
  __break(1u);
  return result;
}

void RigidSchema.xformTranslateOp.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD09760;
}

uint64_t (*RigidSchema.xformTranslateOp.modify(_QWORD *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD09760;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.xformOrientOp.getter(char *a1@<X8>)
{
  strcpy(a1, "xformOp:orient");
  a1[15] = -18;
}

void RigidSchema.xformOrientOp.getter(char *a1@<X8>)
{
  strcpy(a1, "xformOp:orient");
  a1[15] = -18;
}

uint64_t (*specialized RigidSchema.xformOrientOp.modify(char *a1))()
{
  strcpy(a1, "xformOp:orient");
  a1[15] = -18;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.xformOrientOp.modify(char *a1))()
{
  strcpy(a1, "xformOp:orient");
  a1[15] = -18;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.xformScaleOp.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "xformOp:scale");
  *(_WORD *)(a1 + 14) = -4864;
}

void RigidSchema.xformScaleOp.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "xformOp:scale");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t (*specialized RigidSchema.xformScaleOp.modify(uint64_t a1))()
{
  strcpy((char *)a1, "xformOp:scale");
  *(_WORD *)(a1 + 14) = -4864;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.xformScaleOp.modify(uint64_t a1))()
{
  strcpy((char *)a1, "xformOp:scale");
  *(_WORD *)(a1 + 14) = -4864;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.xformOpOrder.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "xformOpOrder");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void RigidSchema.xformOpOrder.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "xformOpOrder");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t RigidSchema.xformOpOrder.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*specialized RigidSchema.xformOpOrder.modify(uint64_t a1))()
{
  strcpy((char *)a1, "xformOpOrder");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.xformOpOrder.modify(uint64_t a1))()
{
  strcpy((char *)a1, "xformOpOrder");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for AttributeMetadata;
}

void specialized RigidSchema.radius.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
}

void RigidSchema.radius.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
}

uint64_t (*specialized RigidSchema.radius.modify(_QWORD *a1))()
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.radius.modify(_QWORD *a1))()
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.height.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
}

void RigidSchema.height.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
}

uint64_t (*specialized RigidSchema.height.modify(_QWORD *a1))()
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.height.modify(_QWORD *a1))()
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.size.getter(_QWORD *a1@<X8>)
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
}

void RigidSchema.size.getter(_QWORD *a1@<X8>)
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
}

uint64_t (*specialized RigidSchema.size.modify(_QWORD *a1))()
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.size.modify(_QWORD *a1))()
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.content.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
}

void RigidSchema.content.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
}

uint64_t (*specialized RigidSchema.content.modify(_QWORD *a1))()
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.content.modify(_QWORD *a1))()
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.font.getter(_QWORD *a1@<X8>)
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
}

void RigidSchema.font.getter(_QWORD *a1@<X8>)
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
}

uint64_t (*specialized RigidSchema.font.modify(_QWORD *a1))()
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.font.modify(_QWORD *a1))()
{
  *a1 = 1953394534;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.pointSize.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
}

void RigidSchema.pointSize.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
}

uint64_t (*specialized RigidSchema.pointSize.modify(_QWORD *a1))()
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.pointSize.modify(_QWORD *a1))()
{
  *a1 = 0x7A6953746E696F70;
  a1[1] = 0xE900000000000065;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.width.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
}

void RigidSchema.width.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
}

uint64_t (*specialized RigidSchema.width.modify(_QWORD *a1))()
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.width.modify(_QWORD *a1))()
{
  *a1 = 0x6874646977;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.depth.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
}

void RigidSchema.depth.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
}

uint64_t (*specialized RigidSchema.depth.modify(_QWORD *a1))()
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.depth.modify(_QWORD *a1))()
{
  *a1 = 0x6874706564;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

void RigidSchema.horizontalAlignment.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000022BD09780;
}

uint64_t (*RigidSchema.horizontalAlignment.modify(_QWORD *a1))()
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000022BD09780;
  return destroy for RelationshipMetadata;
}

void RigidSchema.verticalAlignment.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD097A0;
}

uint64_t (*RigidSchema.verticalAlignment.modify(_QWORD *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD097A0;
  return destroy for RelationshipMetadata;
}

void specialized RigidSchema.wrapMode.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
}

void RigidSchema.wrapMode.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
}

uint64_t key path setter for RigidSchema.xformTranslateOp : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v7 = *a1;
  v6 = a1[1];
  v9[0] = v7;
  v9[1] = v6;
  swift_bridgeObjectRetain();
  return a5(v9);
}

uint64_t (*specialized RigidSchema.wrapMode.modify(_QWORD *a1))()
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*RigidSchema.wrapMode.modify(_QWORD *a1))()
{
  *a1 = 0x65646F4D70617277;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*protocol witness for Capsule.radius.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.radius.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Capsule.height.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.height.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Cube.size.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.size.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.content.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.content.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.font.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.font.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.pointSize.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.pointSize.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.width.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.width.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for PreliminaryText.depth.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.depth.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

void protocol witness for PreliminaryText.horizontalAlignment.getter in conformance Schema(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000022BD09780;
}

uint64_t (*protocol witness for PreliminaryText.horizontalAlignment.modify in conformance Schema(_QWORD *a1))()
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000022BD09780;
  return destroy for RelationshipMetadata;
}

void protocol witness for PreliminaryText.verticalAlignment.getter in conformance Schema(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD097A0;
}

uint64_t (*protocol witness for PreliminaryText.verticalAlignment.modify in conformance Schema(_QWORD *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD097A0;
  return destroy for RelationshipMetadata;
}

uint64_t (*protocol witness for PreliminaryText.wrapMode.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.wrapMode.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

void protocol witness for Xformable.xformTranslateOp.getter in conformance Schema(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD09760;
}

uint64_t (*protocol witness for Xformable.xformTranslateOp.modify in conformance Schema(_QWORD *a1))()
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000022BD09760;
  return destroy for RelationshipMetadata;
}

uint64_t (*protocol witness for Xformable.xformOrientOp.modify in conformance Schema(char **a1))()
{
  char *v2;

  v2 = (char *)malloc(0x28uLL);
  *a1 = v2;
  *((_QWORD *)v2 + 4) = specialized RigidSchema.xformOrientOp.modify(v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Xformable.xformScaleOp.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.xformScaleOp.modify((uint64_t)v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*protocol witness for Xformable.xformOpOrder.modify in conformance Schema(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized RigidSchema.xformOpOrder.modify((uint64_t)v2);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

void protocol witness for Capsule.radius.modify in conformance Schema(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void __swiftcall UsdGeomXformable.localTransformation(at:)(simd_double4x4_optional *__return_ptr retstr, Swift::Double at)
{
  uint64_t v2;
  id v4;
  int LocalTransformation;
  _OWORD v6[9];
  _BYTE v7[136];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(id *)((*(uint64_t (**)(void))(*(_QWORD *)(v2 + 8) + 8))() + 16);
  swift_release();
  LocalTransformation = RIOPxrUsdGeomXformableXformQueryGetLocalTransformation();

  if (LocalTransformation)
  {
    memset(v6, 0, 128);
    _s9RealityIO7Frame4DVSgWOi_((uint64_t)v6);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of simd_double4x4?((uint64_t)v6, (uint64_t)v7);
  outlined init with take of simd_double4x4?((uint64_t)v7, (uint64_t)retstr);
}

void __swiftcall UsdGeomXformable.localTransformation(at:)(simd_float4x4_optional *__return_ptr retstr, Swift::Double at)
{
  int v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  simd_double4x4_optional v8;
  float64x2_t v9[9];

  UsdGeomXformable.localTransformation(at:)(&v8, at);
  outlined init with take of simd_double4x4?((uint64_t)&v8, (uint64_t)v9);
  v3 = _sSo14simd_double4x4aSgWOg((uint64_t)v9);
  v4 = 0uLL;
  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 0uLL;
  if (v3 != 1)
  {
    v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[0]), v9[1]);
    v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[2]), v9[3]);
    v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[4]), v9[5]);
    v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9[6]), v9[7]);
  }
  retstr->value.columns[0] = (simd_float4)v4;
  retstr->value.columns[1] = (simd_float4)v5;
  retstr->value.columns[2] = (simd_float4)v6;
  retstr->value.columns[3] = (simd_float4)v7;
  retstr->is_nil = v3 == 1;
}

uint64_t UsdGeomXformable.timeSamples.getter(uint64_t a1, uint64_t a2)
{
  id v2;
  void *CopyTimeSamples;

  v2 = *(id *)((*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 8))() + 16);
  swift_release();
  CopyTimeSamples = (void *)RIOPxrUsdGeomXformableXformQueryCopyTimeSamples();

  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  return MEMORY[0x24BEE4AF8];
}

void XformPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void XformPrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t XformPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Xform>);
}

uint64_t XformPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Xform>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to XformPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MeshPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MeshPrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

uint64_t MeshPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Mesh>);
}

uint64_t XformPrim.deinit(uint64_t *a1)
{
  uint64_t v1;

  swift_release();
  outlined destroy of Any?(v1 + 24, a1);
  return v1;
}

uint64_t MeshPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Mesh>);
}

uint64_t XformPrim.__deallocating_deinit(uint64_t *a1)
{
  uint64_t v1;

  swift_release();
  outlined destroy of Any?(v1 + 24, a1);
  return swift_deallocClassInstance();
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to MeshPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CapsulePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CapsulePrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

uint64_t CapsulePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Capsule>);
}

uint64_t CapsulePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Capsule>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to CapsulePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConePrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

uint64_t ConePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Cone>);
}

uint64_t ConePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Cone>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to ConePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CubePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CubePrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

uint64_t CubePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Cube>);
}

uint64_t CubePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Cube>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to CubePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CylinderPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CylinderPrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

uint64_t CylinderPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Cylinder>);
}

uint64_t CylinderPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Cylinder>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to CylinderPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SpherePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SpherePrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

uint64_t SpherePrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<Sphere>);
}

uint64_t SpherePrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<Sphere>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to SpherePrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PreliminaryTextPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PreliminaryTextPrim.init(prim:type:)()
{
  XformPrim.init(prim:type:)();
}

uint64_t PreliminaryTextPrim.deinit()
{
  return XformPrim.deinit(&demangling cache variable for type metadata for Properties<PreliminaryText>);
}

uint64_t PreliminaryTextPrim.__deallocating_deinit()
{
  return XformPrim.__deallocating_deinit(&demangling cache variable for type metadata for Properties<PreliminaryText>);
}

void vtable thunk for StaticTypePrim.__allocating_init(prim:type:) dispatching to PreliminaryTextPrim.__allocating_init(prim:type:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

_QWORD *Stage.xform(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for XformPrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

_QWORD *Stage.mesh(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for MeshPrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

_QWORD *Stage.capsule(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for CapsulePrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

_QWORD *Stage.cone(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for ConePrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

_QWORD *Stage.cube(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for CubePrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

_QWORD *Stage.cylinder(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for CylinderPrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

_QWORD *Stage.sphere(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for SpherePrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

_QWORD *Stage.preliminaryText(at:)()
{
  id v0;
  void *v1;
  uint64_t PrimIfNeeded;
  uint64_t v3;
  _QWORD *v4;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = PrimIfNeeded;
  type metadata accessor for PreliminaryTextPrim(0);
  v4 = (_QWORD *)swift_allocObject();
  v4[7] = &type metadata for Schema;
  v4[8] = &protocol witness table for Schema;
  v4[2] = v3;
  v4[3] = v3;
  swift_retain();
  return v4;
}

uint64_t Stage.materialBindingAPI(at:)()
{
  id v0;
  uint64_t PrimIfNeeded;
  uint64_t v2;
  uint64_t result;

  v0 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = PrimIfNeeded;
  type metadata accessor for MaterialBindingAPI();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t MaterialBindingAPI.prim.getter()
{
  return swift_retain();
}

uint64_t MaterialBindingAPI.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t MaterialBindingAPI.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UsdSchemaBase.prim.getter in conformance MaterialBindingAPI()
{
  return swift_retain();
}

uint64_t MaterialBindingAPI.bind(material:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v1 = RIOPxrUsdShadeMaterialBindingAPIBind();

  return v1;
}

uint64_t MaterialBindingAPI.bind(material:collection:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v1 = RIOPxrUsdShadeMaterialBindingAPIBindCollection();

  return v1;
}

Swift::Bool __swiftcall MaterialBindingAPI.unbind()()
{
  void *v0;
  char v1;

  v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v1 = RIOPxrUsdShadeMaterialBindingAPIUnbind();

  return v1;
}

uint64_t MaterialBindingAPI.unbind(collection:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v1 = RIOPxrUsdShadeMaterialBindingAPIUnbindCollection();

  return v1;
}

void MaterialBindingAPI.directBinding.getter(uint64_t *a1@<X8>)
{
  MaterialBindingAPI.directBinding.getter(MEMORY[0x24BE276C8], a1);
}

void MaterialBindingAPI.materialBindingStrengthForDirectBinding.getter(uint64_t *a1@<X8>)
{
  MaterialBindingAPI.directBinding.getter(MEMORY[0x24BE276D0], a1);
}

void key path getter for MaterialBindingAPI.materialBindingStrengthForDirectBinding : MaterialBindingAPI(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v3 = RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding();

  *a1 = v3;
}

void key path setter for MaterialBindingAPI.materialBindingStrengthForDirectBinding : MaterialBindingAPI(id *a1)
{
  void *v1;
  id v2;

  v2 = *a1;
  v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();

}

void MaterialBindingAPI.materialBindingStrengthForDirectBinding.setter(id *a1)
{
  void *v1;
  id v2;

  v2 = *a1;
  v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();

}

void (*MaterialBindingAPI.materialBindingStrengthForDirectBinding.modify(uint64_t *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  a1[1] = *(_QWORD *)(v1 + 16);
  v3 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v4 = RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding();

  *a1 = v4;
  return MaterialBindingAPI.materialBindingStrengthForDirectBinding.modify;
}

void MaterialBindingAPI.materialBindingStrengthForDirectBinding.modify(void **a1, char a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();

  }
  else
  {
    v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding();
  }

}

uint64_t MaterialBindingAPI.collectionBindings.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;

  v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindings();

  if (v2)
  {
    type metadata accessor for RIOPxrUsdShadeMaterialBindingAPICollectionBindingRef(0);
    v3 = v2;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x24BEE4AF8];
  swift_retain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo042RIOPxrUsdShadeMaterialBindingAPICollectionH3RefaG_9RealityIO0g10CollectionH0Cs5NeverOTg503_s9k4IO18gh33APIC18collectionBindingsSayAA0c10m13D0CGvgAFSo014de9Shadecd13I11D3RefaXEfU_AI0gH3APICTf1cn_nTf4ng_n(v4, v0);
  swift_bridgeObjectRelease();

  swift_release();
  return v5;
}

void MaterialBindingAPI.resolvedMaterial.getter(uint64_t *a1@<X8>)
{
  MaterialBindingAPI.directBinding.getter(MEMORY[0x24BE276C0], a1);
}

void MaterialBindingAPI.directBinding.getter(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v5 = a1();

  *a2 = v5;
}

uint64_t outlined init with take of simd_double4x4?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_double4x4?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for XformPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for XformPrim);
}

uint64_t type metadata accessor for MeshPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for MeshPrim);
}

uint64_t type metadata accessor for CapsulePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CapsulePrim);
}

uint64_t type metadata accessor for ConePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for ConePrim);
}

uint64_t type metadata accessor for CubePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CubePrim);
}

uint64_t type metadata accessor for CylinderPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CylinderPrim);
}

uint64_t type metadata accessor for SpherePrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for SpherePrim);
}

uint64_t type metadata accessor for PreliminaryTextPrim(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for PreliminaryTextPrim);
}

uint64_t type metadata accessor for MaterialBindingAPI()
{
  return objc_opt_self();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo042RIOPxrUsdShadeMaterialBindingAPICollectionH3RefaG_9RealityIO0g10CollectionH0Cs5NeverOTg503_s9k4IO18gh33APIC18collectionBindingsSayAA0c10m13D0CGvgAFSo014de9Shadecd13I11D3RefaXEfU_AI0gH3APICTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v4)
      break;
    v10 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x22E2F57B8](v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      type metadata accessor for MaterialCollectionBinding();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = a2;
      *(_QWORD *)(v9 + 24) = v8;
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6)
        return v10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_22BCA688C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.xformTranslateOp.getter, a1);
}

uint64_t sub_22BCA6898(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.xformTranslateOp.setter);
}

uint64_t sub_22BCA68B4()
{
  return 16;
}

__n128 sub_22BCA68C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA68CC@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.xformOrientOp.getter, a1);
}

uint64_t sub_22BCA68D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.xformOrientOp.setter);
}

uint64_t sub_22BCA68F4()
{
  return 16;
}

__n128 sub_22BCA6900(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA690C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.xformScaleOp.getter, a1);
}

uint64_t sub_22BCA6918(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.xformScaleOp.setter);
}

uint64_t sub_22BCA6934()
{
  return 16;
}

__n128 sub_22BCA6940(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA694C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.xformOpOrder.getter, a1);
}

uint64_t sub_22BCA6958(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.xformOpOrder.setter);
}

uint64_t sub_22BCA6974()
{
  return 16;
}

__n128 sub_22BCA6980(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA698C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.radius.getter, a1);
}

uint64_t sub_22BCA6998(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.radius.setter);
}

uint64_t sub_22BCA69B4()
{
  return 16;
}

__n128 sub_22BCA69C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA69CC@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.height.getter, a1);
}

uint64_t sub_22BCA69D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.height.setter);
}

uint64_t sub_22BCA69F4()
{
  return 16;
}

__n128 sub_22BCA6A00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6A0C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.size.getter, a1);
}

uint64_t sub_22BCA6A18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.size.setter);
}

uint64_t sub_22BCA6A34()
{
  return 16;
}

__n128 sub_22BCA6A40(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6A4C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.content.getter, a1);
}

uint64_t sub_22BCA6A58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.content.setter);
}

uint64_t sub_22BCA6A74()
{
  return 16;
}

__n128 sub_22BCA6A80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6A8C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.font.getter, a1);
}

uint64_t sub_22BCA6A98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.font.setter);
}

uint64_t sub_22BCA6AB4()
{
  return 16;
}

__n128 sub_22BCA6AC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6ACC@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.pointSize.getter, a1);
}

uint64_t sub_22BCA6AD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.pointSize.setter);
}

uint64_t sub_22BCA6AF4()
{
  return 16;
}

__n128 sub_22BCA6B00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6B0C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.width.getter, a1);
}

uint64_t sub_22BCA6B18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.width.setter);
}

uint64_t sub_22BCA6B34()
{
  return 16;
}

__n128 sub_22BCA6B40(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6B4C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.depth.getter, a1);
}

uint64_t sub_22BCA6B58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.depth.setter);
}

uint64_t sub_22BCA6B74()
{
  return 16;
}

__n128 sub_22BCA6B80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6B8C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.horizontalAlignment.getter, a1);
}

uint64_t sub_22BCA6B98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.horizontalAlignment.setter);
}

uint64_t sub_22BCA6BB4()
{
  return 16;
}

__n128 sub_22BCA6BC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6BCC@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.verticalAlignment.getter, a1);
}

uint64_t sub_22BCA6BD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.verticalAlignment.setter);
}

uint64_t sub_22BCA6BF4()
{
  return 16;
}

__n128 sub_22BCA6C00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCA6C0C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))RigidSchema.wrapMode.getter, a1);
}

_QWORD *keypath_getTm@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr)@<X3>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[2];

  result = a1(v5);
  v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t sub_22BCA6C4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))RigidSchema.wrapMode.setter);
}

uint64_t sub_22BCA6C68()
{
  return 16;
}

__n128 sub_22BCA6C74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of PreliminaryText.content.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PreliminaryText.content.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PreliminaryText.content.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PreliminaryText.font.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PreliminaryText.font.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PreliminaryText.font.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PreliminaryText.pointSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PreliminaryText.pointSize.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PreliminaryText.pointSize.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of PreliminaryText.width.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PreliminaryText.width.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of PreliminaryText.width.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of PreliminaryText.height.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of PreliminaryText.height.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of PreliminaryText.height.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of PreliminaryText.depth.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of PreliminaryText.depth.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of PreliminaryText.depth.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of PreliminaryText.horizontalAlignment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of PreliminaryText.horizontalAlignment.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of PreliminaryText.horizontalAlignment.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of PreliminaryText.verticalAlignment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of PreliminaryText.verticalAlignment.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of PreliminaryText.verticalAlignment.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of PreliminaryText.wrapMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of PreliminaryText.wrapMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of PreliminaryText.wrapMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

ValueMetadata *type metadata accessor for Schema()
{
  return &type metadata for Schema;
}

uint64_t dispatch thunk of UsdSchemaBase.prim.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for XformPrim()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for MeshPrim()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for CapsulePrim()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for ConePrim()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for CubePrim()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for CylinderPrim()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SpherePrim()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for XformPrim()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PreliminaryTextPrim()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for MaterialBindingAPI()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aNone_3[8 * a1] == *(_QWORD *)&aNone_3[8 * a2] && qword_22BD0FEA8[a1] == qword_22BD0FEA8[a2])
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  void *v2;
  void *v3;
  char v4;
  void *v6;
  void *v7;
  char v8;
  char v9;

  v9 = a1;
  v8 = a2;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v7);
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v6);
  v3 = v6;
  v2 = v7;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v4 = static _CFObject.== infix(_:_:)();

  return v4 & 1;
}

{
  void *v2;
  void *v3;
  char v4;
  void *v6;
  void *v7;
  char v8;
  char v9;

  v9 = a1 & 1;
  v8 = a2 & 1;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v7);
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v6);
  v3 = v6;
  v2 = v7;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v4 = static _CFObject.== infix(_:_:)();

  return v4 & 1;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

id one-time initialization function for iblPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.iblPropertyName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static VirtualEnvironmentProbeComponentBuilder.iblPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for iblBlendPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.iblBlendPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for blendEnablePropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.blendEnablePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for modePropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.modePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for rotationEnablePropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.rotationEnablePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for mixFactorPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.mixFactorPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for blendIBLsFactorPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.blendIBLsFactorPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for isGlobalPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.isGlobalPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for intensityPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.intensityPropertyName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static VirtualEnvironmentProbeComponentBuilder.intensityPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for mixColorPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.mixColorPropertyName = (uint64_t)result;
  return result;
}

uint64_t ImageBasedLightBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  char Bool;
  int v40;
  id v41;
  void *v42;
  char v43;
  int v44;
  id v45;
  void *v46;
  int v47;
  char Float;
  id v49;
  void *v50;
  int v51;
  char v52;
  id v53;
  void *v54;
  char v55;
  int v56;
  id v57;
  void *v58;
  int v59;
  char v60;
  id v61;
  void *v62;
  char Float3;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  void *EmptyValue;
  void *v70;
  void *v71;
  id v72;
  char v73;
  void *v74;
  id v75;
  char v76;
  char v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  __int128 v85;
  char v86;
  void *v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  void *v92;
  char isEscapingClosureAtFileLocation;
  _BYTE v94[24];
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  int v102;
  char v103;
  int v104;
  char v105;
  char v106;
  int v107;
  __int128 v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  void *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 aBlock;
  uint64_t (*v123)(uint64_t);
  void *v124;
  uint64_t (*v125)();
  uint64_t v126;
  uint64_t v127;

  v2 = v1;
  v127 = *MEMORY[0x24BDAC8D0];
  Inputs.prim.getter();
  v4 = (void *)RIOPxrUsdObjectCopyName();
  v5 = (void *)RIOPxrTfTokenCopyString();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  if (one-time initialization token for infoID != -1)
    swift_once();
  v9 = (id)static ImageBasedLightBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_26:
    ImageBasedLightBuilder.clear(inputs:)();
    return swift_release();
  }
  v10 = (void *)RIOPxrUsdPrimCopyAttribute();
  v11 = RIOPxrUsdAttributeCopyValue();
  if (!v11)
  {
    swift_bridgeObjectRelease();

    goto LABEL_26;
  }
  v12 = (void *)v11;
  v13 = RIOPxrVtValueCopyToken();
  if (!v13)
  {
    swift_bridgeObjectRelease();

    goto LABEL_26;
  }
  v14 = (void *)v13;

  v15 = (void *)RIOPxrTfTokenCopyString();
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  if (v16 == 0xD00000000000001ALL && v18 == 0x800000022BD09AA0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
LABEL_13:
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for iblComponents != -1)
        swift_once();
      v120 = static OS_os_log.iblComponents;
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_22BD0C5C0;
      v26 = (void *)RIOPxrUsdObjectCopyPath();
      v27 = (void *)RIOPxrSdfPathCopyString();
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      v31 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
      v32 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v25 + 32) = v28;
      *(_QWORD *)(v25 + 40) = v30;
      *(_QWORD *)(v25 + 96) = v31;
      *(_QWORD *)(v25 + 104) = v32;
      *(_QWORD *)(v25 + 64) = v32;
      *(_QWORD *)(v25 + 72) = v6;
      *(_QWORD *)(v25 + 80) = v8;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v20 = static EntityBuilder.OutputName;
  v21 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v20, v21, &aBlock);
  if (v124)
  {
    type metadata accessor for EntityProxy();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v119 = v121;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0)
      {
        ImageBasedLightBuilder.clear(inputs:)();
        swift_release();
        return swift_release();
      }
      if (one-time initialization token for iblPropertyName != -1)
        swift_once();
      v22 = (id)static ImageBasedLightBuilder.iblPropertyName;
      if (RIOPxrUsdPrimHasAttribute())
      {
        v23 = RIOPxrUsdPrimCopyAttribute();
        type metadata accessor for AnyAttribute();
        v120 = swift_allocObject();
        *(_QWORD *)(v120 + 16) = v23;

      }
      else
      {

        *(_QWORD *)&aBlock = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
        v120 = 0;
      }
      if (one-time initialization token for iblBlendPropertyName != -1)
        swift_once();
      v34 = (id)static ImageBasedLightBuilder.iblBlendPropertyName;
      if (RIOPxrUsdPrimHasAttribute())
      {
        v35 = RIOPxrUsdPrimCopyAttribute();
        type metadata accessor for AnyAttribute();
        v36 = swift_allocObject();
        *(_QWORD *)(v36 + 16) = v35;

      }
      else
      {

        *(_QWORD *)&aBlock = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
        v36 = 0;
      }
      if (one-time initialization token for blendEnablePropertyName != -1)
        swift_once();
      *(_QWORD *)&aBlock = static ImageBasedLightBuilder.blendEnablePropertyName;
      v37 = (id)static ImageBasedLightBuilder.blendEnablePropertyName;
      v38 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      if (v38 && (LOBYTE(aBlock) = 0, Bool = RIOPxrVtValueGetBool(), v38, (Bool & 1) != 0))
        v40 = aBlock;
      else
        v40 = 0;
      v115 = v40;
      if (one-time initialization token for rotationEnablePropertyName != -1)
        swift_once();
      *(_QWORD *)&aBlock = static ImageBasedLightBuilder.rotationEnablePropertyName;
      v41 = (id)static ImageBasedLightBuilder.rotationEnablePropertyName;
      v42 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      if (v42 && (LOBYTE(aBlock) = 0, v43 = RIOPxrVtValueGetBool(), v42, (v43 & 1) != 0))
        v44 = aBlock;
      else
        v44 = 0;
      v114 = v44;
      if (one-time initialization token for mixFactorPropertyName != -1)
        swift_once();
      *(_QWORD *)&aBlock = static ImageBasedLightBuilder.mixFactorPropertyName;
      v45 = (id)static ImageBasedLightBuilder.mixFactorPropertyName;
      v46 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      v47 = 0;
      if (v46)
      {
        LODWORD(aBlock) = 0;
        Float = RIOPxrVtValueGetFloat();

        if ((Float & 1) != 0)
          v47 = aBlock;
      }
      if (one-time initialization token for blendIBLsFactorPropertyName != -1)
        swift_once();
      *(_QWORD *)&aBlock = static ImageBasedLightBuilder.blendIBLsFactorPropertyName;
      v49 = (id)static ImageBasedLightBuilder.blendIBLsFactorPropertyName;
      v50 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      v51 = 0;
      if (v50)
      {
        LODWORD(aBlock) = 0;
        v52 = RIOPxrVtValueGetFloat();

        if ((v52 & 1) != 0)
          v51 = aBlock;
      }
      if (one-time initialization token for isGlobalPropertyName != -1)
        swift_once();
      *(_QWORD *)&aBlock = static ImageBasedLightBuilder.isGlobalPropertyName;
      v53 = (id)static ImageBasedLightBuilder.isGlobalPropertyName;
      v54 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      if (v54 && (LOBYTE(aBlock) = 0, v55 = RIOPxrVtValueGetBool(), v54, (v55 & 1) != 0))
        v56 = aBlock;
      else
        v56 = 0;
      v113 = v56;
      if (one-time initialization token for intensityPropertyName != -1)
        swift_once();
      *(_QWORD *)&aBlock = static ImageBasedLightBuilder.intensityPropertyName;
      v57 = (id)static ImageBasedLightBuilder.intensityPropertyName;
      v58 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      v59 = 0;
      if (v58)
      {
        LODWORD(aBlock) = 0;
        v60 = RIOPxrVtValueGetFloat();

        if ((v60 & 1) != 0)
          v59 = aBlock;
      }
      if (one-time initialization token for mixColorPropertyName != -1)
        swift_once();
      *(_QWORD *)&aBlock = static ImageBasedLightBuilder.mixColorPropertyName;
      v61 = (id)static ImageBasedLightBuilder.mixColorPropertyName;
      v62 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

      v118 = 0u;
      if (v62)
      {
        aBlock = 0uLL;
        Float3 = RIOPxrVtValueGetFloat3();

        if ((Float3 & 1) != 0)
          v118 = aBlock;
      }
      v64 = specialized ImageBasedLightBuilder.getMode(fromPrim:)();
      v65 = v64;
      v66 = *(char *)(v2 + 16);
      v67 = v64 == 3 && v66 == 3;
      if (v66 != 3 && v64 != 3)
      {
        v68 = v66;
        if (*(_QWORD *)&aNone_3[v68 * 8] == *(_QWORD *)&aNone_3[8 * (char)v64]
          && qword_22BD0FEA8[v68] == qword_22BD0FEA8[(char)v64])
        {
          v67 = 1;
        }
        else
        {
          v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        v64 = swift_bridgeObjectRelease();
      }
      v117 = v65;
      if (v120)
      {
        swift_retain();
        EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
        if (!EmptyValue)
          EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
        swift_release();
        v70 = (void *)RIOPxrVtValueCopyAssetPath();

      }
      else
      {
        v70 = 0;
      }
      v71 = *(void **)(v2 + 24);
      if (v71)
      {
        if (v70)
        {
          type metadata accessor for RIOPxrSdfAssetPathRef(0);
          lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
          v72 = v71;
          v73 = v67;
          v74 = v70;
          v75 = v70;
          v76 = static _CFObject.== infix(_:_:)();

          v70 = v74;
          if ((v73 & 1) != 0)
          {
            v77 = v76 ^ 1;
            v116 = v74;
            if (!v36)
            {
LABEL_98:
              v78 = 0;
              goto LABEL_107;
            }
LABEL_104:
            swift_retain();
            v80 = (void *)RIOPxrUsdAttributeCopyValue();
            if (!v80)
              v80 = (void *)RIOPxrVtValueCreateEmptyValue();
            swift_release();
            v78 = (void *)RIOPxrVtValueCopyAssetPath();

LABEL_107:
            v81 = *(void **)(v2 + 32);
            if (v81)
            {
              if (v78)
              {
                type metadata accessor for RIOPxrSdfAssetPathRef(0);
                lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
                v82 = v81;
                v112 = v36;
                v83 = v78;
                static _CFObject.== infix(_:_:)();

                v36 = v112;
                goto LABEL_114;
              }
              v84 = v81;
            }
            else
            {
              if (!v78)
              {
LABEL_114:
                *(_QWORD *)&v118 = &v111;
                *(double *)&v85 = MEMORY[0x24BDAC7A8](v64);
                v94[16] = v77 & 1;
                v95 = v120;
                v96 = a1;
                v97 = v86 & 1;
                v98 = v36;
                v99 = v119;
                v100 = v2;
                v87 = v116;
                v101 = v117;
                v102 = v51;
                v103 = v88;
                v104 = v59;
                v105 = v89;
                v106 = v90;
                v107 = v47;
                v108 = v85;
                v109 = v116;
                v110 = v78;
                v91 = swift_allocObject();
                *(_QWORD *)(v91 + 16) = partial apply for closure #1 in ImageBasedLightBuilder.run(inputs:);
                *(_QWORD *)(v91 + 24) = v94;
                v125 = thunk for @callee_guaranteed () -> ()partial apply;
                v126 = v91;
                *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
                *((_QWORD *)&aBlock + 1) = 1107296256;
                v123 = thunk for @escaping @callee_guaranteed () -> ();
                v124 = &block_descriptor_7;
                v92 = _Block_copy(&aBlock);
                swift_retain();
                swift_release();
                RIOBuilderInputsPerformBlockSyncOnEngineQueue();
                _Block_release(v92);
                isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
                swift_release();
                swift_release();
                swift_release();

                swift_release();
                result = swift_release();
                if ((isEscapingClosureAtFileLocation & 1) != 0)
                  __break(1u);
                return result;
              }
              v84 = 0;
            }

            goto LABEL_114;
          }
LABEL_103:
          v77 = 1;
          v116 = v70;
          if (!v36)
            goto LABEL_98;
          goto LABEL_104;
        }
        v79 = v71;
      }
      else
      {
        if (!v70)
        {
          if ((v67 & 1) != 0)
          {
            v77 = 0;
            v116 = 0;
            if (!v36)
              goto LABEL_98;
            goto LABEL_104;
          }
          goto LABEL_103;
        }
        v79 = 0;
      }

      goto LABEL_103;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&aBlock);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for iblComponents != -1)
    swift_once();
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v33 + 32) = v6;
  *(_QWORD *)(v33 + 40) = v8;
  os_log(_:dso:log:type:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

void closure #1 in ImageBasedLightBuilder.run(inputs:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7, char a8)
{
  id v11;
  void *v13;
  __int128 v14;
  __int128 v15;

  if ((a1 & 1) != 0 && a2)
  {
    swift_retain();
    Inputs.createIBLAsset(on:)();
    swift_release();
  }
  if ((a4 & 1) != 0 && a5)
  {
    swift_retain();
    Inputs.createIBLAsset(on:)();
    swift_release();
  }
  __AssetRef.__as<A>(_:)();
  REImageBasedLightComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  swift_beginAccess();
  v11 = objc_getAssociatedObject(a7, &static BuilderAssociatedKeys.CoreReference);
  swift_endAccess();
  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v14, &v15);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    RIOBuilderAddComponent();

    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x22BCA8740);
}

uint64_t ImageBasedLightBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v9[5];
  __int128 aBlock;
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = static EntityBuilder.OutputName;
  v2 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v1, v2, &aBlock);
  if (!v12)
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  v3 = v15;
  v4 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 41) & 1) == 0)
    return swift_release();
  MEMORY[0x24BDAC7A8](v4);
  v9[2] = v3;
  v9[3] = v0;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in ImageBasedLightBuilder.clear(inputs:);
  *(_QWORD *)(v5 + 24) = v9;
  v13 = partial apply for thunk for @callee_guaranteed () -> ();
  v14 = v5;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v11 = thunk for @escaping @callee_guaranteed () -> ();
  v12 = &block_descriptor_14;
  v6 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in ImageBasedLightBuilder.clear(inputs:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  __AssetRef.__as<A>(_:)();
  REImageBasedLightComponentGetComponentType();
  REEntityRemoveComponentByClass();
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;

  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;

  *(_BYTE *)(a2 + 41) = 0;
}

uint64_t ImageBasedLightBuilder.Mode.rawValue.getter(char a1)
{
  return *(_QWORD *)&aNone_3[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImageBasedLightBuilder.Mode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImageBasedLightBuilder.Mode()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageBasedLightBuilder.Mode()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImageBasedLightBuilder.Mode()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ImageBasedLightBuilder.Mode@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ImageBasedLightBuilder.Mode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ImageBasedLightBuilder.Mode@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = ImageBasedLightBuilder.Mode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ImageBasedLightBuilder.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ImageBasedLightBuilder()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for ImageBasedLightBuilder.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22BCA8ADC + 4 * byte_22BD0FD85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22BCA8B10 + 4 * byte_22BD0FD80[v4]))();
}

uint64_t sub_22BCA8B10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCA8B18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22BCA8B20);
  return result;
}

uint64_t sub_22BCA8B2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22BCA8B34);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22BCA8B38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCA8B40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ImageBasedLightBuilder.Mode()
{
  return &unk_24F63B6F0;
}

unint64_t lazy protocol witness table accessor for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode;
  if (!lazy protocol witness table cache variable for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for ImageBasedLightBuilder.Mode, &unk_24F63B6F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageBasedLightBuilder.Mode and conformance ImageBasedLightBuilder.Mode);
  }
  return result;
}

void protocol witness for Builder.buildOrder.getter in conformance ImageBasedLightBuilder(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t specialized ImageBasedLightBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  if (one-time initialization token for realityKitComponentTypeName != -1)
    swift_once();
  v9 = static ImageBasedLightBuilder.realityKitComponentTypeName;
  v0 = (id)static ImageBasedLightBuilder.realityKitComponentTypeName;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()();
  v3 = v9;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v9 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t specialized ImageBasedLightBuilder.Mode.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ImageBasedLightBuilder.Mode.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void partial apply for closure #1 in ImageBasedLightBuilder.clear(inputs:)()
{
  uint64_t v0;

  closure #1 in ImageBasedLightBuilder.clear(inputs:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_22BCA8D48()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t specialized ImageBasedLightBuilder.getMode(fromPrim:)()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  unint64_t v8;

  if (one-time initialization token for modePropertyName != -1)
    swift_once();
  v0 = (id)static ImageBasedLightBuilder.modePropertyName;
  v1 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  if (!v1)
    return 3;
  v2 = (void *)RIOPxrVtValueCopyToken();

  if (!v2)
    return 3;
  v3 = (void *)RIOPxrTfTokenCopyString();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ImageBasedLightBuilder.Mode.init(rawValue:), v7);
  swift_bridgeObjectRelease();
  if (v8 >= 3)
    return 3;
  else
    return v8;
}

void partial apply for closure #1 in ImageBasedLightBuilder.run(inputs:)()
{
  uint64_t v0;

  closure #1 in ImageBasedLightBuilder.run(inputs:)(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64), *(_BYTE *)(v0 + 72));
}

uint64_t sub_22BCA8EBC()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ToolsFoundations()
{
  return &type metadata for ToolsFoundations;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  v1 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (v4)
  {
    v4 &= v4 - 1;
LABEL_22:
    InputDescriptor.convertToCore()();
    if (v10)
    {
      MEMORY[0x22E2F53D4]();
      if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v7 >= v5)
    goto LABEL_26;
  v8 = *(_QWORD *)(v1 + 8 * v7);
  ++v6;
  if (v8)
    goto LABEL_21;
  v6 = v7 + 1;
  if (v7 + 1 >= v5)
    goto LABEL_26;
  v8 = *(_QWORD *)(v1 + 8 * v6);
  if (v8)
    goto LABEL_21;
  v6 = v7 + 2;
  if (v7 + 2 >= v5)
    goto LABEL_26;
  v8 = *(_QWORD *)(v1 + 8 * v6);
  if (v8)
    goto LABEL_21;
  v6 = v7 + 3;
  if (v7 + 3 >= v5)
    goto LABEL_26;
  v8 = *(_QWORD *)(v1 + 8 * v6);
  if (v8)
  {
LABEL_21:
    v4 = (v8 - 1) & v8;
    goto LABEL_22;
  }
  v9 = v7 + 4;
  if (v9 >= v5)
  {
LABEL_26:
    swift_release();
    return;
  }
  v8 = *(_QWORD *)(v1 + 8 * v9);
  if (v8)
  {
    v6 = v9;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v6 >= v5)
      goto LABEL_26;
    v8 = *(_QWORD *)(v1 + 8 * v6);
    ++v9;
    if (v8)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;

  v19 = MEMORY[0x24BEE4AF8];
  v17 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v18 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (v4)
  {
    v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v7 = v6 | (v5 << 6);
LABEL_19:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 40 * v7);
    v13 = *v11;
    v12 = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v14 = (void *)MEMORY[0x22E2F5278](v13, v12);
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      v15 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v15 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    v16 = RIOBuilderOutputDescriptorCreateWithNameAndOutputIdentifierAndOptionality();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v16)
    {
      MEMORY[0x22E2F53D4]();
      if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  if (__OFADD__(v5++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v5 >= v18)
    goto LABEL_30;
  v9 = *(_QWORD *)(v17 + 8 * v5);
  if (v9)
  {
LABEL_18:
    v4 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v5 << 6);
    goto LABEL_19;
  }
  v10 = v5 + 1;
  if (v5 + 1 >= v18)
    goto LABEL_30;
  v9 = *(_QWORD *)(v17 + 8 * v10);
  if (v9)
    goto LABEL_17;
  v10 = v5 + 2;
  if (v5 + 2 >= v18)
    goto LABEL_30;
  v9 = *(_QWORD *)(v17 + 8 * v10);
  if (v9)
    goto LABEL_17;
  v10 = v5 + 3;
  if (v5 + 3 >= v18)
    goto LABEL_30;
  v9 = *(_QWORD *)(v17 + 8 * v10);
  if (v9)
    goto LABEL_17;
  v10 = v5 + 4;
  if (v5 + 4 >= v18)
  {
LABEL_30:
    swift_release();
    return;
  }
  v9 = *(_QWORD *)(v17 + 8 * v10);
  if (v9)
  {
LABEL_17:
    v5 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v5 >= v18)
      goto LABEL_30;
    v9 = *(_QWORD *)(v17 + 8 * v5);
    ++v10;
    if (v9)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO15StageDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d68IO7BuilderPAAE12generateCore7primRefySo015RIOPxrUsdObjectG0a_tFSo030igfjw6AA0mL5H52Ccfu_32bf63a0112cb27e84fc959358271e62f1AkITf3nnnpk_nTf1cn_n(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v17)(_BYTE *, _QWORD);
  _BYTE v18[32];
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = __CocoaSet.count.getter();
    result = MEMORY[0x24BEE4AF8];
    if (!v3)
      return result;
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v19 = __CocoaSet.startIndex.getter();
    v20 = v5;
    v21 = 1;
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_9;
    __break(1u);
  }
  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v19 = specialized _NativeSet.startIndex.getter(a1);
    v20 = v6;
    v21 = v7 & 1;
    while (1)
    {
LABEL_9:
      while (1)
      {
        v13 = v19;
        v14 = v20;
        v15 = v21;
        v16 = *(id *)(specialized Set.subscript.getter(v19, v20, v21, a1) + 32);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized ContiguousArray._endMutation()();
        if (v2)
          break;
        v8 = specialized _NativeSet.index(after:)(v13, v14, v15, a1);
        v10 = v9;
        v12 = v11;
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v13, v14, v15);
        v19 = v8;
        v20 = v10;
        v21 = v12 & 1;
        if (!--v3)
          goto LABEL_14;
      }
      if ((v15 & 1) == 0)
        break;
      if (__CocoaSet.Index.handleBitPattern.getter())
        swift_isUniquelyReferenced_nonNull_native();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<StageDirtyState>.Index);
      v17 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v17(v18, 0);
      if (!--v3)
      {
LABEL_14:
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v19, v20, v21);
        return v22;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t Builder.outputs.getter(uint64_t a1, uint64_t a2)
{
  return Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.OutputsReference, (void (*)(_QWORD))type metadata accessor for Outputs);
}

void Builder.addComponent<A>(component:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v0 = type metadata accessor for __ComponentTypeRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static Component.__coreComponentType.getter();
  type metadata accessor for REComponentType(0);
  __ComponentTypeRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v4 = REComponentClassFromType();
  if (v4)
  {
    v6 = (void *)Builder.outputs.getter(v4, v5, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
    RIOBuilderAddComponentByClass();

  }
}

uint64_t Builder.prim.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (void *)Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  v3 = RIOBuilderCopyPrim();

  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

Swift::Void __swiftcall Builder.addComponent(componentRef:)(Swift::OpaquePointer componentRef)
{
  uint64_t v1;
  id v2;

  v2 = (id)Builder.outputs.getter((uint64_t)componentRef._rawValue, v1, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  RIOBuilderAddComponent();

}

void Builder.generateCore(primRef:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Class isa;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t aBlock;
  uint64_t v28;
  void (*v29)(uint64_t, void *);
  void *v30;
  void *v31;
  _QWORD *v32;

  aBlock = a2;
  swift_getMetatypeMetadata();
  v6 = String.init<A>(reflecting:)();
  v26 = (void *)MEMORY[0x22E2F5278](v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&aBlock, a2, a3);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO15StageDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d68IO7BuilderPAAE12generateCore7primRefySo015RIOPxrUsdObjectG0a_tFSo030igfjw6AA0mL5H52Ccfu_32bf63a0112cb27e84fc959358271e62f1AkITf3nnnpk_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) != 0 || (v8 & 0x4000000000000000) != 0)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for RIOBuilderDirtyStageDescriptorRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  v10 = (void *)RIOBuilderDirtyStageSubscriptionCreateWithDirtyStageDescriptors();

  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = v11;
  v31 = partial apply for closure #1 in Builder.generateCore(primRef:);
  v32 = v12;
  v13 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v28 = 1107296256;
  v29 = (void (*)(uint64_t, void *))thunk for @escaping @callee_guaranteed () -> (@unowned Unmanaged<RIOBuilderInputsDescriptorRef>);
  v30 = &block_descriptor_15;
  v14 = _Block_copy(&aBlock);
  swift_release();
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = v15;
  v31 = partial apply for closure #2 in Builder.generateCore(primRef:);
  v32 = v16;
  aBlock = v13;
  v28 = 1107296256;
  v29 = (void (*)(uint64_t, void *))thunk for @escaping @callee_guaranteed () -> (@unowned Unmanaged<RIOBuilderInputsDescriptorRef>);
  v30 = &block_descriptor_10_0;
  v17 = _Block_copy(&aBlock);
  swift_release();
  v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = v18;
  v31 = partial apply for closure #3 in Builder.generateCore(primRef:);
  v32 = v19;
  aBlock = v13;
  v28 = 1107296256;
  v29 = thunk for @escaping @callee_guaranteed (@guaranteed RIOBuilderInputsRef) -> ();
  v30 = &block_descriptor_17;
  v20 = _Block_copy(&aBlock);
  swift_release();
  v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a2;
  v22[3] = a3;
  v22[4] = v21;
  v31 = partial apply for closure #4 in Builder.generateCore(primRef:);
  v32 = v22;
  aBlock = v13;
  v28 = 1107296256;
  v29 = thunk for @escaping @callee_guaranteed (@guaranteed RIOBuilderInputsRef) -> ();
  v30 = &block_descriptor_24;
  v23 = _Block_copy(&aBlock);
  swift_release();
  v24 = (void *)RIOBuilderCreateWithBuilderInfo();
  _Block_release(v23);
  _Block_release(v20);
  _Block_release(v17);
  _Block_release(v14);

  if (v24)
  {
    swift_beginAccess();
    v25 = v24;
    objc_setAssociatedObject(v3, &static BuilderAssociatedKeys.CoreReference, v25, (void *)1);
    swift_endAccess();

    RIOBuilderSetSwiftObject();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall Builder.generateOutputs()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;

  v3 = v2;
  v4 = (void *)Builder.outputs.getter(v0, v1, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  v5 = (void *)RIOBuilderOutputsCreate();

  v6 = (id)RIOBuilderOutputsGetSwiftObject();
  type metadata accessor for Outputs();
  if (v6)
  {
    v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v7 = (uint64_t)Outputs.init(core:)((uint64_t)v5);
  }
  v8 = (void *)v7;
  swift_beginAccess();
  swift_retain();
  objc_setAssociatedObject(v3, &static BuilderAssociatedKeys.OutputsReference, v8, (void *)1);
  swift_endAccess();

  swift_release_n();
}

uint64_t Builder.core.getter(uint64_t a1, uint64_t a2)
{
  return Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
}

uint64_t Builder.outputs.getter(uint64_t a1, uint64_t a2, const void *a3, void (*a4)(_QWORD))
{
  void *v4;
  id v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  swift_beginAccess();
  v7 = objc_getAssociatedObject(v4, a3);
  result = swift_endAccess();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v10, &v11);
    a4(0);
    swift_dynamicCast();
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void Builder.primPath.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)Builder.outputs.getter(a1, a2, &static BuilderAssociatedKeys.CoreReference, type metadata accessor for RIOBuilderRef);
  v5 = RIOBuilderCopyPrimPath();

  *a3 = v5;
}

uint64_t closure #1 in Builder.generateCore(primRef:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSArray v7;
  uint64_t v8;

  v5 = a1 + 16;
  swift_beginAccess();
  if (MEMORY[0x22E2F8A04](v5))
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    specialized Sequence.compactMap<A>(_:)(v6);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOBuilderInputDescriptorRef(0);
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = RIOBuilderInputsDescriptorCreateWithInputDescriptors();
    swift_unknownObjectRelease();
  }
  else
  {
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v8 = RIOBuilderInputsDescriptorCreateWithInputDescriptors();
  }

  return v8;
}

uint64_t closure #2 in Builder.generateCore(primRef:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSArray v7;
  uint64_t v8;

  v5 = a1 + 16;
  swift_beginAccess();
  if (MEMORY[0x22E2F8A04](v5))
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    specialized Sequence.compactMap<A>(_:)(v6);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOBuilderOutputDescriptorRef(0);
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = RIOBuilderOutputsDescriptorCreateWithOutputDescriptors();
    swift_unknownObjectRelease();
  }
  else
  {
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v8 = RIOBuilderOutputsDescriptorCreateWithOutputDescriptors();
  }

  return v8;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Unmanaged<RIOBuilderInputsDescriptorRef>)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

void *closure #3 in Builder.generateCore(primRef:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *result;
  uint64_t v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v7 = a2 + 16;
  swift_beginAccess();
  result = (void *)MEMORY[0x22E2F8A04](v7);
  if (result)
  {
    type metadata accessor for Inputs();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 56) = a1;
    v10 = a1;
    result = (void *)RIOBuilderInputsCopyStageDelta();
    if (result)
    {
      Inputs.StageDelta.init(core:)(result, (uint64_t)v13);
      v11 = v14;
      v12 = v13[1];
      *(_OWORD *)(v9 + 16) = v13[0];
      *(_OWORD *)(v9 + 32) = v12;
      *(_QWORD *)(v9 + 48) = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v9, a3, a4);
      swift_unknownObjectRelease();
      return (void *)swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed RIOBuilderInputsRef) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

void *closure #4 in Builder.generateCore(primRef:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *result;
  uint64_t v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v7 = a2 + 16;
  swift_beginAccess();
  result = (void *)MEMORY[0x22E2F8A04](v7);
  if (result)
  {
    type metadata accessor for Inputs();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 56) = a1;
    v10 = a1;
    result = (void *)RIOBuilderInputsCopyStageDelta();
    if (result)
    {
      Inputs.StageDelta.init(core:)(result, (uint64_t)v13);
      v11 = v14;
      v12 = v13[1];
      *(_OWORD *)(v9 + 16) = v13[0];
      *(_OWORD *)(v9 + 32) = v12;
      *(_QWORD *)(v9 + 48) = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(v9, a3, a4);
      swift_unknownObjectRelease();
      return (void *)swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized Set.subscript.getter(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  _QWORD v14[9];
  uint64_t v15;

  v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        v15 = __CocoaSet.Index.element.getter();
        type metadata accessor for PrimDirtyState();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v8 = v14[0];
        swift_unknownObjectRelease();
        Hasher.init(_seed:)();
        (*(void (**)(_QWORD *))(*(_QWORD *)v14[0] + 128))(v14);
        v9 = Hasher._finalize()();
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v5 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        {
          v11 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 48) + 8 * v5) + 136);
          swift_retain();
          LOBYTE(v11) = v11(v8);
          swift_release();
          if ((v11 & 1) == 0)
          {
            v12 = ~v10;
            do
            {
              v5 = (v5 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
                goto LABEL_25;
              v13 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 48) + 8 * v5) + 136);
              swift_retain();
              LOBYTE(v13) = v13(v8);
              swift_release();
            }
            while ((v13 & 1) == 0);
          }
          swift_release();
LABEL_20:
          v7 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
LABEL_25:
        result = swift_release();
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v6 = a4;
    else
      v6 = a4 & 0xFFFFFFFFFFFFFF8;
    v15 = MEMORY[0x22E2F56F8](result, a2, v6);
    type metadata accessor for PrimDirtyState();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v7 = v14[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  _QWORD v14[9];
  uint64_t v15;

  v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        v15 = __CocoaSet.Index.element.getter();
        type metadata accessor for PropertyDirtyState();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v8 = v14[0];
        swift_unknownObjectRelease();
        Hasher.init(_seed:)();
        (*(void (**)(_QWORD *))(*(_QWORD *)v14[0] + 120))(v14);
        v9 = Hasher._finalize()();
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v5 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        {
          v11 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 48) + 8 * v5) + 128);
          swift_retain();
          LOBYTE(v11) = v11(v8);
          swift_release();
          if ((v11 & 1) == 0)
          {
            v12 = ~v10;
            do
            {
              v5 = (v5 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
                goto LABEL_25;
              v13 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 48) + 8 * v5) + 128);
              swift_retain();
              LOBYTE(v13) = v13(v8);
              swift_release();
            }
            while ((v13 & 1) == 0);
          }
          swift_release();
LABEL_20:
          v7 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
LABEL_25:
        result = swift_release();
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v6 = a4;
    else
      v6 = a4 & 0xFFFFFFFFFFFFFF8;
    v15 = MEMORY[0x22E2F56F8](result, a2, v6);
    type metadata accessor for PropertyDirtyState();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v7 = v14[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18[4];
  uint64_t v19;

  v5 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if ((a3 & 1) != 0)
    {
      if (a4 < 0)
        v6 = a4;
      else
        v6 = a4 & 0xFFFFFFFFFFFFFF8;
      v19 = MEMORY[0x22E2F56F8](result, a2, v6);
      type metadata accessor for StageDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v7 = *(_QWORD *)&v18[0];
      swift_unknownObjectRelease();
      return v7;
    }
    goto LABEL_27;
  }
  if ((a3 & 1) == 0)
  {
    if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_21;
      __break(1u);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = __CocoaSet.Index.element.getter();
  type metadata accessor for StageDirtyState();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v8 = *(_QWORD *)&v18[0];
  swift_unknownObjectRelease();
  Hasher.init(_seed:)();
  v9 = *(_QWORD *)(*(_QWORD *)&v18[0] + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v18, v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v18, v10);
  swift_bridgeObjectRelease();
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(a4 + 32);
  v5 = v11 & ~v12;
  if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
  {
LABEL_26:
    result = swift_release();
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  v13 = ~v12;
  while (1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5);
    v15 = *(_QWORD *)(v14 + 24);
    v16 = *(_QWORD *)(v8 + 24);
    swift_retain();
    if ((specialized static Set.== infix(_:_:)(v15, v16) & 1) != 0)
      break;
    swift_release();
LABEL_17:
    v5 = (v5 + 1) & v13;
    if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      goto LABEL_26;
  }
  v17 = specialized static Set.== infix(_:_:)(*(_QWORD *)(v14 + 16), *(_QWORD *)(v8 + 16));
  swift_release();
  if ((v17 & 1) == 0)
    goto LABEL_17;
  swift_release();
LABEL_21:
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5);
  swift_retain();
  return v7;
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized static StageDirtyStateBuilder.buildBlock(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = MEMORY[0x24BEE4B08];
  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x22E2F57B8](v4, a1);
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      swift_retain();
      specialized Set._Variant.insert(_:)(&v6, v5);
      swift_release();
      swift_release();
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

ValueMetadata *type metadata accessor for StageDirtyStateBuilder()
{
  return &type metadata for StageDirtyStateBuilder;
}

uint64_t dispatch thunk of Builder.stageSubscription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Builder.buildOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Builder.inputDescriptors()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Builder.outputDescriptors()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Builder.run(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Builder.clear(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_22BCAAABC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Builder.generateCore(primRef:)()
{
  uint64_t *v0;

  return closure #1 in Builder.generateCore(primRef:)(v0[4], v0[2], v0[3]);
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in Builder.generateCore(primRef:)()
{
  uint64_t *v0;

  return closure #2 in Builder.generateCore(primRef:)(v0[4], v0[2], v0[3]);
}

uint64_t sub_22BCAAB10()
{
  swift_release();
  return swift_deallocObject();
}

void *partial apply for closure #3 in Builder.generateCore(primRef:)(void *a1)
{
  uint64_t *v1;

  return closure #3 in Builder.generateCore(primRef:)(a1, v1[4], v1[2], v1[3]);
}

void *partial apply for closure #4 in Builder.generateCore(primRef:)(void *a1)
{
  uint64_t *v1;

  return closure #4 in Builder.generateCore(primRef:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9RealityIO4PrimCsAE_pTg5(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v9 = *(_QWORD *)(type metadata accessor for UUID() - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      a1(&v13, v10, &v12);
      if (v4)
        break;
      v4 = 0;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v10 += v11;
      if (!--v6)
        return v14;
    }
    return swift_release();
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Path.deletingLastPathComponent()@<X0>(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t result;

  v3 = *v1;
  v4 = (void *)RIOPxrSdfPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = lazy protocol witness table accessor for type String and conformance String();
  v6 = MEMORY[0x22E2F5638](47, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x24BEE0D00], v5);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + 16) < 2uLL)
  {
    swift_bridgeObjectRelease();
    result = RIOPxrSdfPathCreateFromCString();
    v11 = result;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
    lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    v7 = Sequence<>.joined(separator:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v11 = RIOPxrSdfPathCreateFromCString();
    result = swift_release();
  }
  *a1 = v11;
  return result;
}

void specialized EnumeratedSequence.Iterator.next()(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = *(_QWORD *)(*v1 + 16);
  if (v8 == v10)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, double))(v4 + 56))(a1, 1, 1, v3, v5);
    return;
  }
  if (v8 >= v10)
  {
    __break(1u);
  }
  else
  {
    v11 = type metadata accessor for __RKEntityTriggerSpecification();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = v9
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
        + *(_QWORD *)(v12 + 72) * v8;
    v1[1] = v8 + 1;
    v14 = &v7[*(int *)(v3 + 48)];
    v15 = v1[2];
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v13, v11);
    if (!__OFADD__(v15, 1))
    {
      v1[2] = v15 + 1;
      v16 = (char *)a1 + *(int *)(v3 + 48);
      *a1 = v15;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v14, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
      return;
    }
  }
  __break(1u);
}

uint64_t InteractionSpecificationsUSDStageErrors.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  int EnumCaseMultiPayload;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  Swift::String v33;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  Swift::String v49;
  id v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v61;
  unint64_t v62;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v61 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v61 - v12;
  v14 = type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (void **)((char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of InteractionSpecificationsUSDStageErrors(v0, (uint64_t)v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v18 = *v16;
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType));
      outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)v16 + *(int *)(v19 + 48), (uint64_t)v10);
      v61 = 0;
      v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v20._countAndFlagsBits = 0xD00000000000002BLL;
      v20._object = (void *)0x800000022BD09E20;
      String.append(_:)(v20);
      v21 = v18;
      v22 = (void *)RIOPxrSdfPathCopyString();
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      v26._countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0xD00000000000001CLL;
      v27._object = (void *)0x800000022BD09E50;
      String.append(_:)(v27);
      _print_unlocked<A, B>(_:_:)();
      v28._countAndFlagsBits = 34;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);

      v29 = v61;
      v13 = v10;
    }
    else
    {
      v44 = *v16;
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      v46 = (uint64_t *)((char *)v16 + *(int *)(v45 + 64));
      v48 = *v46;
      v47 = (void *)v46[1];
      outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)v16 + *(int *)(v45 + 48), (uint64_t)v7);
      v61 = 0;
      v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(89);
      v49._countAndFlagsBits = 0xD000000000000019;
      v49._object = (void *)0x800000022BD09DD0;
      String.append(_:)(v49);
      v50 = v44;
      v51 = (void *)RIOPxrSdfPathCopyString();
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v54 = v53;

      v55._countAndFlagsBits = v52;
      v55._object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 0x65756C6156202E22;
      v56._object = (void *)0xEB0000000022203ALL;
      String.append(_:)(v56);
      v57._countAndFlagsBits = v48;
      v57._object = v47;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58._countAndFlagsBits = 0xD00000000000002ELL;
      v58._object = (void *)0x800000022BD09DF0;
      String.append(_:)(v58);
      _print_unlocked<A, B>(_:_:)();
      v59._countAndFlagsBits = 34;
      v59._object = (void *)0xE100000000000000;
      String.append(_:)(v59);

      v29 = v61;
      v13 = v7;
    }
  }
  else
  {
    v30 = *v16;
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    v32 = (char *)v16 + *(int *)(v31 + 64);
    outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType((uint64_t)v16 + *(int *)(v31 + 48), (uint64_t)v13);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v32, v1);
    v61 = 0;
    v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(129);
    v33._countAndFlagsBits = 0xD00000000000001ELL;
    v33._object = (void *)0x800000022BD09E70;
    String.append(_:)(v33);
    v34 = v30;
    v35 = (void *)RIOPxrSdfPathCopyString();
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

    v39._countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 0xD000000000000049;
    v40._object = (void *)0x800000022BD09E90;
    String.append(_:)(v40);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._object = (void *)0x800000022BD09EE0;
    v42._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v42);
    _print_unlocked<A, B>(_:_:)();
    v43._countAndFlagsBits = 34;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);

    v29 = v61;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  outlined destroy of CompileSession.ImportSessionData((uint64_t)v13, type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType);
  return v29;
}

uint64_t Stage.setBehavior(_:at:mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t PrimIfNeeded;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  int v43;
  id v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t inited;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char v74;
  unsigned __int8 v75;
  uint64_t KeyPath;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  id v96;
  void *v97[3];
  _QWORD v98[6];
  unint64_t v99;

  v87 = a4;
  v86 = a1;
  v5 = type metadata accessor for __RKEntityActionGroupArguments();
  v79 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v78 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v77 - v11);
  v83 = type metadata accessor for __RKEntityActionSpecification();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v81 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v90 = (char *)&v77 - v15;
  v16 = type metadata accessor for __RKEntityTriggerSpecification();
  v91 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (void **)((char *)&v77 - v20);
  MEMORY[0x24BDAC7A8](v22);
  v84 = (char *)&v77 - v23;
  String.utf8CString.getter();
  v24 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  v25 = (id)RIOPxrTfTokenEmpty();
  v88 = v4;
  v89 = v24;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  v85 = swift_allocObject();
  *(_QWORD *)(v85 + 16) = PrimIfNeeded;

  v27 = String.count.getter();
  v80 = v5;
  if (v27 < 1)
    v28 = (id)RIOPxrTfTokenEmpty();
  else
    v28 = (id)RIOPxrTfTokenCreateWithCString();
  v29 = v28;
  v30 = v85;
  RIOPxrUsdPrimSetTypeName();

  v98[4] = &type metadata for Schema;
  v98[5] = &protocol witness table for Schema;
  v98[0] = v30;
  swift_retain();
  v31 = v84;
  __RKEntityInteractionSpecification.trigger.getter();
  v32 = v90;
  __RKEntityInteractionSpecification.action.getter();
  v33 = v91;
  (*(void (**)(void **, char *, uint64_t))(v91 + 16))(v21, v31, v16);
  v34 = (*(unsigned int (**)(void **, uint64_t))(v33 + 88))(v21, v16) == *MEMORY[0x24BDE6B90];
  v86 = v16;
  if (!v34)
  {
    v44 = v89;
    v94 = (uint64_t)v89;
    SceneDescriptionFoundations.Path.appendingPathComponent(_:)(0x5272656767697254, (void *)0xEB00000000746F6FLL, (uint64_t *)v97);
    v45 = v97[0];
    v46 = v92;
    Stage.setTrigger(trigger:at:mapping:)(v31, v97, v87);
    if (v46)
    {
      v47 = v31;
      v48 = v85;
      swift_release();

      (*(void (**)(char *, uint64_t))(v82 + 8))(v32, v83);
      v49 = *(void (**)(char *, uint64_t))(v91 + 8);
      v50 = v86;
      v49(v47, v86);
      outlined destroy of Any?((uint64_t)v98, &demangling cache variable for type metadata for Properties<BehaviorSchema>);

      v49((char *)v21, v50);
      return v48;
    }
    v92 = 0;
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
    swift_retain();
    *(_QWORD *)(inited + 32) = RIOPxrUsdObjectCopyPath();
    swift_release();
    specialized Properties.subscript.setter(inited);

    swift_release();
    v16 = v86;
    (*(void (**)(void **, uint64_t))(v91 + 8))(v21, v86);
LABEL_32:
    v61 = v83;
    v48 = v85;
    v62 = v89;
    v94 = (uint64_t)v89;
    SceneDescriptionFoundations.Path.appendingPathComponent(_:)(0x6F526E6F69746341, (void *)0xEA0000000000746FLL, (uint64_t *)v97);
    v63 = v97[0];
    v64 = v92;
    Stage.setAction(action:at:mapping:)(v32, (uint64_t *)v97, v87);
    if (v64)
    {
      swift_release();

      (*(void (**)(char *, uint64_t))(v82 + 8))(v32, v61);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v84, v16);
      outlined destroy of Any?((uint64_t)v98, &demangling cache variable for type metadata for Properties<BehaviorSchema>);

    }
    else
    {
      v92 = 0;
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      v65 = swift_initStackObject();
      *(_OWORD *)(v65 + 16) = xmmword_22BD0C360;
      swift_retain();
      *(_QWORD *)(v65 + 32) = RIOPxrUsdObjectCopyPath();
      swift_release();
      v66 = v65;
      v67 = v83;
      specialized Properties.subscript.setter(v66);
      v68 = v32;
      v69 = v82;
      v70 = v81;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v81, v68, v67);
      if ((*(unsigned int (**)(char *, uint64_t))(v69 + 88))(v70, v67) == *MEMORY[0x24BDE69C8])
      {
        (*(void (**)(char *, uint64_t))(v69 + 96))(v70, v67);
        v71 = v79;
        v72 = v78;
        v73 = v80;
        (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v78, v70, v80);
        v74 = __RKEntityActionGroupArguments.exclusive.getter();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        v75 = v74 & 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v67);
        v75 = 0;
      }
      KeyPath = swift_getKeyPath();
      specialized Properties.subscript.setter(v75, KeyPath, 0, 0);
      swift_release();

      (*(void (**)(char *, uint64_t))(v69 + 8))(v90, v67);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v84, v16);
      outlined destroy of Any?((uint64_t)v98, &demangling cache variable for type metadata for Properties<BehaviorSchema>);
      return v85;
    }
    return v48;
  }
  (*(void (**)(void **, uint64_t))(v33 + 96))(v21, v16);
  v35 = *v21;
  v36 = MEMORY[0x24BEE4AF8];
  v99 = MEMORY[0x24BEE4AF8];
  v97[1] = 0;
  v97[2] = 0;
  v97[0] = v35;
  v37 = v33;
  specialized EnumeratedSequence.Iterator.next()(v9);
  outlined init with take of (URL, __REAsset)((uint64_t)v9, (uint64_t)v12, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v12, 1, v38) == 1)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v39 = swift_getKeyPath();
    if (!(v36 >> 62))
    {
      v54 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      goto LABEL_20;
    }
  }
  else
  {
    v36 = *(_QWORD *)(v37 + 32);
    while (1)
    {
      v39 = *v12;
      ((void (*)(char *, char *, uint64_t))v36)(v18, (char *)v12 + *(int *)(v38 + 48), v16);
      v94 = 0x5F72656767697254;
      v95 = (void *)0xE800000000000000;
      v96 = v89;
      if (__OFADD__(v39, 1))
        break;
      v93 = v39 + 1;
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      SceneDescriptionFoundations.Path.appendingPathComponent(_:)(v94, v95, &v94);
      swift_bridgeObjectRelease();
      v41 = (void *)v94;
      v42 = v92;
      Stage.setTrigger(trigger:at:mapping:)(v18, (void **)&v94, v87);
      if (v42)
      {
        v48 = v85;
        swift_release();

        v52 = *(void (**)(char *, uint64_t))(v91 + 8);
        v53 = v86;
        v52(v18, v86);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v90, v83);
        v52(v84, v53);
        outlined destroy of Any?((uint64_t)v98, &demangling cache variable for type metadata for Properties<BehaviorSchema>);

        return v48;
      }
      v92 = 0;
      MEMORY[0x22E2F53D4]();
      if (*(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v16 = v86;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v18, v86);
      specialized EnumeratedSequence.Iterator.next()(v9);
      outlined init with take of (URL, __REAsset)((uint64_t)v9, (uint64_t)v12, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v12, 1, v38);
      v32 = v90;
      if (v43 == 1)
      {
        v36 = v99;
        goto LABEL_18;
      }
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v54 = _CocoaArrayWrapper.endIndex.getter();
LABEL_20:
  v77 = v39;
  if (!v54)
  {
    swift_bridgeObjectRelease();
    v57 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_31:
    swift_bridgeObjectRelease();
    specialized Properties.subscript.setter((uint64_t)v57);
    goto LABEL_32;
  }
  v97[0] = (void *)MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54 & ~(v54 >> 63), 0);
  if ((v54 & 0x8000000000000000) == 0)
  {
    v56 = 0;
    v57 = v97[0];
    do
    {
      if ((v36 & 0xC000000000000001) != 0)
        MEMORY[0x22E2F57B8](v56, v36);
      else
        swift_retain();
      v58 = RIOPxrUsdObjectCopyPath();
      swift_release();
      v97[0] = v57;
      v60 = v57[2];
      v59 = v57[3];
      if (v60 >= v59 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        v57 = v97[0];
      }
      ++v56;
      v57[2] = v60 + 1;
      v57[v60 + 4] = v58;
    }
    while (v54 != v56);
    swift_bridgeObjectRelease();
    v16 = v86;
    v32 = v90;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t SceneDescriptionFoundations.Path.appendingPathComponent(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id *v3;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t result;

  v7 = *v3;
  v8 = (void *)RIOPxrSdfPathCopyString();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = v9 == 47 && v11 == 0xE100000000000000;
  if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13._countAndFlagsBits = 47;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
  }
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v15 = RIOPxrSdfPathCreateFromCString();
  result = swift_release();
  *a3 = v15;
  return result;
}

uint64_t Stage.setTrigger(trigger:at:mapping:)(void *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  id v16;
  uint64_t PrimIfNeeded;
  id v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t *, id, uint64_t);
  int v22;
  uint64_t v23;
  float v24;
  char *v25;
  char v26;
  void *v27;
  uint64_t KeyPath;
  id v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t inited;
  id v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t result;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t j;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[4];
  ValueMetadata *v108;
  _UNKNOWN **v109;
  uint64_t v110;

  v103 = a1;
  v105 = type metadata accessor for UUID();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v101 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v99 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v100 = (char *)&v99 - v10;
  v11 = type metadata accessor for __RKEntityTriggerSpecification();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *a2;
  v16 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  v106 = swift_allocObject();
  *(_QWORD *)(v106 + 16) = PrimIfNeeded;

  if (String.count.getter() < 1)
    v18 = (id)RIOPxrTfTokenEmpty();
  else
    v18 = (id)RIOPxrTfTokenCreateWithCString();
  v19 = v18;
  v20 = v106;
  RIOPxrUsdPrimSetTypeName();

  v21 = *(void (**)(uint64_t *, id, uint64_t))(v12 + 16);
  v21(v14, v103, v11);
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v14, v11);
  if (v22 == *MEMORY[0x24BDE6BB0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
    v24 = *(float *)((char *)v14 + *(int *)(v23 + 48));
    v25 = (char *)v14 + *(int *)(v23 + 64);
    (*(void (**)(char *, uint64_t *, uint64_t))(v104 + 32))(v8, v14, v105);
    if (*(_QWORD *)(a3 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
      if ((v26 & 1) != 0)
      {
        v27 = (void *)RIOPxrUsdObjectCopyPath();
        v108 = &type metadata for Schema;
        v109 = &protocol witness table for Schema;
        v107[0] = v20;
        KeyPath = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1)
          v29 = (id)RIOPxrTfTokenEmpty();
        else
          v29 = (id)RIOPxrTfTokenCreateWithCString();
        specialized Properties.subscript.setter(v29, KeyPath, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
        *(_QWORD *)(inited + 32) = v27;
        v72 = v27;
        specialized Properties.subscript.setter(inited);
        v73 = swift_getKeyPath();
        specialized Properties.subscript.setter(COERCE__INT64(v24), 0, v73, 0, 0);

        outlined destroy of Any?((uint64_t)v107, &demangling cache variable for type metadata for Properties<ProximityToCameraTriggerSchema>);
        (*(void (**)(char *, uint64_t))(v104 + 8))(v8, v105);
        v74 = type metadata accessor for __RKEntityProximityTrigger.ExitType();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v25, v74);
        return v106;
      }
    }
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    swift_allocError();
    v102 = v25;
    v36 = v35;
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    v38 = (char *)v36 + *(int *)(v37 + 48);
    v39 = (char *)v36 + *(int *)(v37 + 64);
    *v36 = v15;
    v21((uint64_t *)v38, v103, v11);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    v20 = v106;
    swift_storeEnumTagMultiPayload();
    v40 = v104;
    v41 = v105;
    (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v39, v8, v105);
    swift_storeEnumTagMultiPayload();
    v42 = v15;
    swift_willThrow();
    swift_release();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v41);
    v43 = type metadata accessor for __RKEntityProximityTrigger.ExitType();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v102, v43);
    return v20;
  }
  if (v22 == *MEMORY[0x24BDE6BB8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    v30 = (uint64_t)v101;
    (*(void (**)(char *, uint64_t *, uint64_t))(v104 + 32))(v101, v14, v105);
    if (*(_QWORD *)(a3 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v30);
      if ((v31 & 1) != 0)
      {
        v32 = RIOPxrUsdObjectCopyPath();
        v108 = &type metadata for Schema;
        v109 = &protocol witness table for Schema;
        v107[0] = v20;
        v33 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1)
          v34 = (id)RIOPxrTfTokenEmpty();
        else
          v34 = (id)RIOPxrTfTokenCreateWithCString();
        specialized Properties.subscript.setter(v34, v33, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        v79 = swift_initStackObject();
        *(_OWORD *)(v79 + 16) = xmmword_22BD0C360;
        *(_QWORD *)(v79 + 32) = v32;
        specialized Properties.subscript.setter(v79);
        outlined destroy of Any?((uint64_t)v107, &demangling cache variable for type metadata for Properties<TapTriggerSchema>);
        (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v30, v105);
        return v106;
      }
    }
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    swift_allocError();
    v51 = v50;
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    v53 = (char *)v51 + *(int *)(v52 + 48);
    v54 = (char *)v51 + *(int *)(v52 + 64);
    *v51 = v15;
    v21((uint64_t *)v53, v103, v11);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    v20 = v106;
    swift_storeEnumTagMultiPayload();
    v55 = v104;
    v56 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
    v57 = v54;
    goto LABEL_25;
  }
  if (v22 != *MEMORY[0x24BDE6BA8])
  {
    if (v22 == *MEMORY[0x24BDE6BA0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
      v59 = *v14;
      v58 = v14[1];
      v108 = &type metadata for Schema;
      v109 = &protocol witness table for Schema;
      v107[0] = v20;
      v60 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1)
        v61 = (id)RIOPxrTfTokenEmpty();
      else
        v61 = (id)RIOPxrTfTokenCreateWithCString();
      specialized Properties.subscript.setter(v61, v60, 0, 0);
      v80 = swift_getKeyPath();
      specialized Properties.subscript.setter(v59, v58, v80, 0, 0);
      outlined destroy of Any?((uint64_t)v107, &demangling cache variable for type metadata for Properties<NotificationTriggerSchema>);
      return v106;
    }
    else if (v22 == *MEMORY[0x24BDE6B98])
    {
      v108 = &type metadata for Schema;
      v109 = &protocol witness table for Schema;
      v107[0] = v20;
      v69 = swift_getKeyPath();
      swift_retain();
      if (String.count.getter() < 1)
        v70 = (id)RIOPxrTfTokenEmpty();
      else
        v70 = (id)RIOPxrTfTokenCreateWithCString();
      specialized Properties.subscript.setter(v70, v69, 0, 0);
      v84 = swift_getKeyPath();
      if (String.count.getter() < 1)
        v85 = (id)RIOPxrTfTokenEmpty();
      else
        v85 = (id)RIOPxrTfTokenCreateWithCString();
      specialized Properties.subscript.setter(v85, v84, 0, 0);
      outlined destroy of Any?((uint64_t)v107, &demangling cache variable for type metadata for Properties<SceneTransitionTriggerSchema>);
    }
    else
    {
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
      swift_allocError();
      v76 = v75;
      v77 = (char *)v75
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                   + 48);
      *v76 = v15;
      v21((uint64_t *)v77, v103, v11);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      v20 = v106;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v78 = v15;
      swift_willThrow();
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
    }
    return v20;
  }
  (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
  v44 = *(uint64_t *)((char *)v14
                   + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]))
                            + 48));
  swift_bridgeObjectRelease();
  v45 = (uint64_t)v100;
  (*(void (**)(char *, uint64_t *, uint64_t))(v104 + 32))(v100, v14, v105);
  if (!*(_QWORD *)(a3 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v45), (v46 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    swift_allocError();
    v63 = v62;
    v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    v30 = v45;
    v65 = (char *)v63 + *(int *)(v64 + 48);
    v66 = (char *)v63 + *(int *)(v64 + 64);
    *v63 = v15;
    v21((uint64_t *)v65, v103, v11);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v55 = v104;
    v56 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
    v57 = v66;
    v20 = v106;
LABEL_25:
    v67 = v105;
    v56(v57, v30, v105);
    swift_storeEnumTagMultiPayload();
    v68 = v15;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v30, v67);
    return v20;
  }
  v47 = (void *)RIOPxrUsdObjectCopyPath();
  MEMORY[0x24BDAC7A8](v47);
  *(&v99 - 4) = a3;
  *(&v99 - 3) = (uint64_t)v15;
  *(&v99 - 2) = (uint64_t)v103;
  v48 = v102;
  v49 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9RealityIO4PrimCsAE_pTg5((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in Stage.setTrigger(trigger:at:mapping:), (uint64_t)(&v99 - 6), v44);
  if (v48)
  {
    swift_release();

    (*(void (**)(char *, uint64_t))(v104 + 8))(v100, v105);
    swift_bridgeObjectRelease();
    return v20;
  }
  v81 = v49;
  v102 = 0;
  swift_bridgeObjectRelease();
  v108 = &type metadata for Schema;
  v109 = &protocol witness table for Schema;
  v107[0] = v20;
  v82 = swift_getKeyPath();
  swift_retain();
  if (String.count.getter() < 1)
    v83 = (id)RIOPxrTfTokenEmpty();
  else
    v83 = (id)RIOPxrTfTokenCreateWithCString();
  specialized Properties.subscript.setter(v83, v82, 0, 0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  v87 = swift_initStackObject();
  *(_OWORD *)(v87 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v87 + 32) = v47;
  v88 = v47;
  specialized Properties.subscript.setter(v87);
  swift_getKeyPath();
  if (v81 >> 62)
  {
    swift_bridgeObjectRetain();
    v89 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v89 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v20 = v106;
  if (!v89)
  {
    swift_bridgeObjectRelease();
    v90 = MEMORY[0x24BEE4AF8];
LABEL_62:
    specialized Properties.subscript.setter(v90);

    outlined destroy of Any?((uint64_t)v107, &demangling cache variable for type metadata for Properties<CollideTriggerSchema>);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v100, v105);
    return v20;
  }
  v110 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89 & ~(v89 >> 63), 0);
  if ((v89 & 0x8000000000000000) == 0)
  {
    v103 = v88;
    v90 = v110;
    if ((v81 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v89; ++i)
      {
        MEMORY[0x22E2F57B8](i, v81);
        v92 = RIOPxrUsdObjectCopyPath();
        swift_unknownObjectRelease();
        v110 = v90;
        v94 = *(_QWORD *)(v90 + 16);
        v93 = *(_QWORD *)(v90 + 24);
        if (v94 >= v93 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1, v94 + 1, 1);
          v90 = v110;
        }
        *(_QWORD *)(v90 + 16) = v94 + 1;
        *(_QWORD *)(v90 + 8 * v94 + 32) = v92;
      }
    }
    else
    {
      for (j = 0; j != v89; ++j)
      {
        v96 = RIOPxrUsdObjectCopyPath();
        v110 = v90;
        v98 = *(_QWORD *)(v90 + 16);
        v97 = *(_QWORD *)(v90 + 24);
        if (v98 >= v97 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1);
          v90 = v110;
        }
        *(_QWORD *)(v90 + 16) = v98 + 1;
        *(_QWORD *)(v90 + 8 * v98 + 32) = v96;
      }
    }
    swift_bridgeObjectRelease();
    v20 = v106;
    v88 = v103;
    goto LABEL_62;
  }
  __break(1u);
  return result;
}

void Stage.setAction(action:at:mapping:)(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  uint64_t PrimIfNeeded;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  void *v194;
  uint64_t v195;
  float64_t v196;
  uint64_t v197;
  unint64_t i;
  int v199;
  uint64_t (**v200)(char *, char *, uint64_t);
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  void (*v206)(char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v208;
  uint64_t v209;
  id v210;
  float64_t v211;
  uint64_t v212;
  char v213;
  void (*v214)(char *, uint64_t);
  uint64_t v215;
  uint64_t v216;
  id v217;
  _QWORD *v218;
  _QWORD *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  void *v223;
  uint64_t (*v224)(char *, char *, uint64_t);
  char *v225;
  uint64_t v226;
  float64_t v227;
  uint64_t v228;
  char v229;
  void (*v230)(char *, uint64_t);
  void *v231;
  uint64_t v232;
  id v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  char *v237;
  void *v238;
  id v239;
  char *v240;
  uint64_t v241;
  float64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  void (*v246)(uint64_t, uint64_t);
  void *v247;
  uint64_t v248;
  id v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  char *v253;
  void *v254;
  id v255;
  char *v256;
  char *v257;
  int v258;
  char *v259;
  char v260;
  char *v261;
  char *v262;
  uint64_t v263;
  float64_t v264;
  unint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(char *, _QWORD);
  uint64_t (*v273)(char *, char *, uint64_t);
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  char *v282;
  void *v283;
  id v284;
  float64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  void (*v289)(uint64_t, uint64_t);
  void *v290;
  uint64_t v291;
  id v292;
  uint64_t v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  void *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  id v306;
  uint64_t v307;
  uint64_t v308;
  void (*v309)(char *, uint64_t);
  char *v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  void (*v316)(uint64_t, uint64_t);
  void *v317;
  uint64_t v318;
  id v319;
  uint64_t v320;
  id v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  double v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  id v334;
  char *v335;
  void (*v336)(char *, char *, uint64_t);
  char *v337;
  char *v338;
  int v339;
  uint64_t v340;
  _OWORD *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  char *v347;
  int v348;
  id v349;
  uint64_t v350;
  uint64_t v351;
  char v352;
  uint64_t v353;
  char v354;
  uint64_t v355;
  uint64_t v356;
  id v357;
  void *v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  Swift::String v362;
  uint64_t v363;
  void *v364;
  Swift::String v365;
  void *v366;
  uint64_t v367;
  id v368;
  unint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  void (*v373)(uint64_t, char *, unint64_t);
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  int64_t v381;
  _QWORD *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  void (*v388)(char *, _QWORD);
  char *v389;
  float64_t v390;
  uint64_t (*v391)(char *, char *, uint64_t);
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  char *v396;
  void *v397;
  id v398;
  uint64_t v399;
  void (*v400)(char *, uint64_t);
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  id v405;
  char *v406;
  void (*v407)(char *, char *, uint64_t);
  char *v408;
  char *v409;
  int v410;
  uint64_t v411;
  void (*v412)(char *, uint64_t);
  float64_t v413;
  float64_t v414;
  uint64_t v415;
  uint64_t v416;
  char v417;
  void (*v418)(uint64_t, uint64_t);
  void *v419;
  uint64_t v420;
  id v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  id v426;
  uint64_t v427;
  uint64_t v428;
  char v429;
  double v430;
  uint64_t v431;
  uint64_t v432;
  id v433;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  char *v437;
  void *v438;
  id v439;
  char *v440;
  float64_t v441;
  char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  char *v447;
  float64_t v448;
  uint64_t v449;
  char *v450;
  char *v451;
  uint64_t v452;
  char *v453;
  uint64_t v454;
  float64_t v455;
  void (*v456)(char *, _QWORD);
  void (*v457)(char *, uint64_t);
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  id v464;
  uint64_t v465;
  _QWORD *v466;
  _QWORD *v467;
  char *v468;
  void *v469;
  void *v470;
  uint64_t v471;
  uint64_t v472;
  char v473;
  uint64_t (**v474)(char *, char *, uint64_t);
  id v475;
  void *v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  void *v481;
  void *v482;
  Swift::String v483;
  void *v484;
  id v485;
  uint64_t v486;
  id v487;
  uint64_t v488;
  char *v489;
  uint64_t v490;
  id v491;
  uint64_t v492;
  uint64_t v493;
  char v494;
  double v495;
  uint64_t v496;
  id v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  id v506;
  float64_t v507;
  uint64_t v508;
  char v509;
  void (*v510)(uint64_t, uint64_t);
  void *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  id v515;
  uint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  id v521;
  uint64_t v522;
  id v523;
  uint64_t v524;
  uint64_t v525;
  float v526;
  char v527;
  float64x2_t v528;
  double v529;
  char *v530;
  uint64_t v531;
  _QWORD *v532;
  _QWORD *v533;
  char *v534;
  void *v535;
  id v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  _QWORD *v541;
  char *v542;
  void *v543;
  float64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  char v548;
  void (*v549)(uint64_t, uint64_t);
  void *v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  void *v554;
  uint64_t v555;
  id v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  char v561;
  double v562;
  uint64_t v563;
  id v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  id v568;
  void *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  id v576;
  char *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  char v582;
  double v583;
  uint64_t v584;
  uint64_t v585;
  char v586;
  void (*v587)(uint64_t, uint64_t);
  void *v588;
  uint64_t v589;
  id v590;
  char *v591;
  uint64_t v592;
  float v593;
  void (*v594)(char *, _QWORD);
  void (*v595)(char *, uint64_t);
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  char v599;
  void (*v600)(uint64_t, uint64_t);
  void *v601;
  uint64_t v602;
  id v603;
  void *v604;
  uint64_t v605;
  unint64_t v606;
  __int128 v607;
  __int128 v608;
  char v609;
  double v610;
  uint64_t v611;
  id v612;
  char *v613;
  uint64_t v614;
  id v615;
  uint64_t v616;
  uint64_t v617;
  char *v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  id v626;
  char *v627;
  uint64_t v628;
  uint64_t v629;
  float64_t v630;
  uint64_t v631;
  uint64_t v632;
  char v633;
  double v634;
  uint64_t v635;
  _QWORD *v636;
  _QWORD *v637;
  char *v638;
  void *v639;
  id v640;
  id v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  char v647;
  uint64_t v648;
  float v649;
  uint64_t v650;
  char v651;
  uint64_t v652;
  _QWORD *v653;
  _QWORD *v654;
  char *v655;
  void *v656;
  id v657;
  uint64_t v658;
  uint64_t v659;
  float32x2_t v660;
  __int128 v661;
  char v662;
  float32x2_t v663;
  uint64_t v664;
  id v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  double v671;
  uint64_t v672;
  id v673;
  uint64_t v674;
  unint64_t v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  id v680;
  uint64_t v681;
  void *v682;
  id v683;
  uint64_t v684;
  uint64_t v685;
  char v686;
  double v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  id v693;
  id v694;
  char *v695;
  void (*v696)(char *, char *, uint64_t);
  char *v697;
  char *v698;
  int v699;
  void (*v700)(char *, uint64_t);
  uint64_t v701;
  char *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  void (*v708)(char *, uint64_t, uint64_t);
  uint64_t v709;
  void *v710;
  uint64_t v711;
  id v712;
  void *v713;
  id v714;
  uint64_t v715;
  _QWORD *v716;
  _QWORD *v717;
  char *v718;
  void *v719;
  id v720;
  uint64_t v721;
  _QWORD *v722;
  _QWORD *v723;
  char *v724;
  void *v725;
  id v726;
  char *v727;
  uint64_t v728;
  id v729;
  uint64_t v730;
  uint64_t v731;
  char v732;
  double v733;
  uint64_t v734;
  uint64_t v735;
  float v736;
  char v737;
  double v738;
  double v739;
  float64x2_t v740;
  uint64_t v741;
  uint64_t v742;
  float v743;
  char v744;
  uint64_t v745;
  uint64_t v746;
  id v747;
  uint64_t v748;
  unsigned __int8 v749;
  uint64_t v750;
  id v751;
  void *v752;
  id v753;
  uint64_t v754;
  uint64_t v755;
  char v756;
  double v757;
  uint64_t v758;
  uint64_t v759;
  char v760;
  double v761;
  uint64_t v762;
  uint64_t v763;
  char v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  id v768;
  uint64_t v769;
  uint64_t v770;
  char v771;
  double v772;
  uint64_t v773;
  uint64_t v774;
  char v775;
  double v776;
  uint64_t v777;
  uint64_t v778;
  char v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  char *v785;
  char *v786;
  char *v787;
  char *v788;
  char *v789;
  uint64_t v790;
  uint64_t v791;
  char *v792;
  char *v793;
  char *v794;
  uint64_t v795;
  char *v796;
  char *v797;
  char *v798;
  char *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  char *v804;
  char *v805;
  uint64_t v806;
  char *v807;
  uint64_t v808;
  char *v809;
  char *v810;
  char *v811;
  uint64_t v812;
  char *v813;
  uint64_t v814;
  uint64_t v815;
  char *v816;
  uint64_t v817;
  char *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  char *v822;
  char *v823;
  char *v824;
  char *v825;
  char *v826;
  char *v827;
  char *v828;
  char *v829;
  char *v830;
  char *v831;
  char *v832;
  char *v833;
  char *v834;
  uint64_t v835;
  uint64_t v836;
  char *v837;
  uint64_t v838;
  uint64_t v839;
  char *v840;
  char *v841;
  char *v842;
  char *v843;
  uint64_t v844;
  char *v845;
  char *v846;
  char *v847;
  uint64_t started;
  char *v849;
  char *v850;
  char *v851;
  char *v852;
  uint64_t v853;
  uint64_t v854;
  char *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  char *v859;
  uint64_t v860;
  char *v861;
  uint64_t v862;
  char *v863;
  char *v864;
  uint64_t v865;
  char *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  char *v871;
  char *v872;
  uint64_t v873;
  char *v874;
  uint64_t v875;
  char *v876;
  char *v877;
  char *v878;
  uint64_t v879;
  char *v880;
  char *v881;
  uint64_t v882;
  char *v883;
  uint64_t v884;
  char *v885;
  char *v886;
  char *v887;
  char *v888;
  char *v889;
  char *v890;
  char *v891;
  uint64_t v892;
  char *v893;
  char *v894;
  char *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  char *v900;
  char *v901;
  char *v902;
  char *v903;
  char *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  char *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  char *v915;
  uint64_t v916;
  char *v917;
  char *v918;
  char *v919;
  uint64_t v920;
  uint64_t *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  char *v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  void (*v929)(char *, id, unint64_t);
  uint64_t (**v930)(char *, char *, uint64_t);
  uint64_t v931;
  __int128 v932;
  __int128 v933;
  uint64_t v934;
  id v935;
  uint64_t v936;
  float64x2_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  unint64_t v941;
  unint64_t v942;
  _UNKNOWN **v943;
  unint64_t v944;
  unint64_t v945;
  uint64_t v946;
  unint64_t v947;
  ValueMetadata *v948;
  _UNKNOWN **v949;
  float64x2_t v950;
  double v951;
  uint64_t v952;
  char v953;
  float64x2_t v954;
  double v955;
  uint64_t v956;
  char v957;
  float64x2_t v958;
  double v959;
  uint64_t v960;
  char v961;
  _QWORD v962[4];
  char v963;
  _BYTE v964[48];
  float64x2_t v965;
  double v966;
  uint64_t v967;
  char v968;

  v934 = a3;
  v935 = a1;
  v5 = type metadata accessor for __RKWaitActionArguments();
  v819 = *(_QWORD *)(v5 - 8);
  v820 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v818 = (char *)&v782 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  v838 = *(_QWORD *)(v7 - 8);
  v839 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v826 = (char *)&v782 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v825 = (char *)&v782 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
  MEMORY[0x24BDAC7A8](v11);
  v836 = (uint64_t)&v782 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v837 = (char *)&v782 - v14;
  v860 = type metadata accessor for __RKEntityHideActionArguments();
  v873 = *(_QWORD *)(v860 - 8);
  MEMORY[0x24BDAC7A8](v860);
  v872 = (char *)&v782 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  v814 = *(_QWORD *)(v16 - 8);
  v815 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v798 = (char *)&v782 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v797 = (char *)&v782 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
  MEMORY[0x24BDAC7A8](v20);
  v834 = (char *)&v782 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v813 = (char *)&v782 - v23;
  v854 = type metadata accessor for __RKEntityShowActionArguments();
  v858 = *(_QWORD *)(v854 - 8);
  MEMORY[0x24BDAC7A8](v854);
  v849 = (char *)&v782 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v25);
  v788 = (char *)&v782 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x24BDAC7A8](v27);
  v852 = (char *)&v782 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v833 = (char *)&v782 - v30;
  MEMORY[0x24BDAC7A8](v31);
  v810 = (char *)&v782 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x24BDAC7A8](v33);
  v851 = (char *)&v782 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v832 = (char *)&v782 - v36;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v782 - v38;
  v817 = type metadata accessor for __RKEntityMoveSelection();
  v808 = *(_QWORD *)(v817 - 8);
  MEMORY[0x24BDAC7A8](v817);
  v793 = (char *)&v782 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v807 = (char *)&v782 - v42;
  MEMORY[0x24BDAC7A8](v43);
  v794 = (char *)&v782 - v44;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveSelection?);
  MEMORY[0x24BDAC7A8](v45);
  v806 = (uint64_t)&v782 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v47);
  v816 = (char *)&v782 - v48;
  v835 = type metadata accessor for __RKEntityTransformActionArguments();
  v844 = *(_QWORD *)(v835 - 8);
  MEMORY[0x24BDAC7A8](v835);
  v845 = (char *)&v782 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments();
  v853 = *(_QWORD *)(started - 8);
  MEMORY[0x24BDAC7A8](started);
  v842 = (char *)&v782 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v51);
  v843 = (char *)&v782 - v52;
  v53 = type metadata accessor for __RKEntitySpinActionArguments();
  v790 = *(_QWORD *)(v53 - 8);
  v791 = v53;
  MEMORY[0x24BDAC7A8](v53);
  v792 = (char *)&v782 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x24BDAC7A8](v55);
  v783 = (uint64_t)&v782 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57);
  v784 = (uint64_t)&v782 - v58;
  v801 = type metadata accessor for __RKEntityOrbitEntityActionArguments();
  v821 = *(_QWORD *)(v801 - 8);
  MEMORY[0x24BDAC7A8](v801);
  v822 = (char *)&v782 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v896 = type metadata accessor for __RKEntityCustomActionArguments();
  v916 = *(_QWORD *)(v896 - 8);
  MEMORY[0x24BDAC7A8](v896);
  v915 = (char *)&v782 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v795 = type metadata accessor for __RKEntityLookAtCameraActionArguments();
  v800 = *(_QWORD *)(v795 - 8);
  MEMORY[0x24BDAC7A8](v795);
  v811 = (char *)&v782 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v857 = type metadata accessor for __RKEntityForceActionArguments();
  v856 = *(_QWORD *)(v857 - 8);
  MEMORY[0x24BDAC7A8](v857);
  v861 = (char *)&v782 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v923 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification));
  v922 = *(_QWORD *)(v923 - 8);
  MEMORY[0x24BDAC7A8](v923);
  v917 = (char *)&v782 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
  MEMORY[0x24BDAC7A8](v64);
  *(_QWORD *)&v933 = (char *)&v782 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v66);
  v921 = (uint64_t *)((char *)&v782 - v67);
  v867 = type metadata accessor for __RKEntityEmphasisAnimationType();
  v869 = *(_QWORD *)(v867 - 8);
  MEMORY[0x24BDAC7A8](v867);
  v866 = (char *)&v782 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  MEMORY[0x24BDAC7A8](v69);
  v865 = (uint64_t)&v782 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v71);
  v875 = (uint64_t)&v782 - v72;
  v868 = type metadata accessor for __RKEntityActionAnimationStyle();
  v870 = *(_QWORD *)(v868 - 8);
  MEMORY[0x24BDAC7A8](v868);
  v824 = (char *)&v782 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v74);
  v796 = (char *)&v782 - v75;
  MEMORY[0x24BDAC7A8](v76);
  v864 = (char *)&v782 - v77;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x24BDAC7A8](v78);
  v850 = (char *)&v782 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v80);
  v846 = (char *)&v782 - v81;
  MEMORY[0x24BDAC7A8](v82);
  v812 = (uint64_t)&v782 - v83;
  MEMORY[0x24BDAC7A8](v84);
  v823 = (char *)&v782 - v85;
  MEMORY[0x24BDAC7A8](v86);
  v862 = (uint64_t)&v782 - v87;
  MEMORY[0x24BDAC7A8](v88);
  v863 = (char *)&v782 - v89;
  v879 = type metadata accessor for __RKEntityEmphasisActionArguments();
  v897 = *(_QWORD *)(v879 - 8);
  MEMORY[0x24BDAC7A8](v879);
  v911 = (char *)&v782 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v914 = type metadata accessor for __RKChangeSceneActionArguments();
  v920 = *(_QWORD *)(v914 - 8);
  MEMORY[0x24BDAC7A8](v914);
  v919 = (char *)&v782 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  v910 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  v909 = *(_QWORD *)(v910 - 8);
  MEMORY[0x24BDAC7A8](v910);
  v804 = (char *)&v782 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v93);
  v805 = (char *)&v782 - v94;
  MEMORY[0x24BDAC7A8](v95);
  v830 = (char *)&v782 - v96;
  MEMORY[0x24BDAC7A8](v97);
  v876 = (char *)&v782 - v98;
  MEMORY[0x24BDAC7A8](v99);
  v889 = (char *)&v782 - v100;
  MEMORY[0x24BDAC7A8](v101);
  v888 = (char *)&v782 - v102;
  v906 = type metadata accessor for __RKAudioSpatialModeSelection();
  v905 = *(_QWORD *)(v906 - 8);
  MEMORY[0x24BDAC7A8](v906);
  v874 = (char *)&v782 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v104);
  v886 = (char *)&v782 - v105;
  MEMORY[0x24BDAC7A8](v106);
  v885 = (char *)&v782 - v107;
  v908 = type metadata accessor for __RKEntityAudioActionType();
  v913 = *(_QWORD *)(v908 - 8);
  MEMORY[0x24BDAC7A8](v908);
  v883 = (char *)&v782 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  v892 = type metadata accessor for __RKEntityGroupActionOrder();
  v898 = *(_QWORD *)(v892 - 8);
  MEMORY[0x24BDAC7A8](v892);
  v871 = (char *)&v782 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v110);
  v878 = (char *)&v782 - v111;
  MEMORY[0x24BDAC7A8](v112);
  v890 = (char *)&v782 - v113;
  v899 = type metadata accessor for __RKEntityActionGroupArguments();
  v912 = *(_QWORD *)(v899 - 8);
  MEMORY[0x24BDAC7A8](v899);
  v831 = (char *)&v782 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v115);
  v895 = (char *)&v782 - v116;
  MEMORY[0x24BDAC7A8](v117);
  v891 = (char *)&v782 - v118;
  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x24BDAC7A8](v119);
  v887 = (char *)&v782 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v121);
  v894 = (char *)&v782 - v122;
  MEMORY[0x24BDAC7A8](v123);
  v881 = (char *)&v782 - v124;
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
  MEMORY[0x24BDAC7A8](v125);
  v884 = (uint64_t)&v782 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v127);
  v893 = (char *)&v782 - v128;
  MEMORY[0x24BDAC7A8](v129);
  v901 = (char *)&v782 - v130;
  v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityAudioActionType?);
  MEMORY[0x24BDAC7A8](v131);
  v882 = (uint64_t)&v782 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v133);
  v907 = (uint64_t)&v782 - v134;
  MEMORY[0x24BDAC7A8](v135);
  v904 = (char *)&v782 - v136;
  v928 = type metadata accessor for UUID();
  v927 = *(_QWORD *)(v928 - 8);
  MEMORY[0x24BDAC7A8](v928);
  v859 = (char *)&v782 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v138);
  v847 = (char *)&v782 - v139;
  MEMORY[0x24BDAC7A8](v140);
  v787 = (char *)&v782 - v141;
  MEMORY[0x24BDAC7A8](v142);
  v828 = (char *)&v782 - v143;
  MEMORY[0x24BDAC7A8](v144);
  v827 = (char *)&v782 - v145;
  MEMORY[0x24BDAC7A8](v146);
  v840 = (char *)&v782 - v147;
  MEMORY[0x24BDAC7A8](v148);
  v785 = (char *)&v782 - v149;
  MEMORY[0x24BDAC7A8](v150);
  v786 = (char *)&v782 - v151;
  MEMORY[0x24BDAC7A8](v152);
  v799 = (char *)&v782 - v153;
  MEMORY[0x24BDAC7A8](v154);
  v156 = (char *)&v782 - v155;
  MEMORY[0x24BDAC7A8](v157);
  v789 = (char *)&v782 - v158;
  MEMORY[0x24BDAC7A8](v159);
  v855 = (char *)&v782 - v160;
  MEMORY[0x24BDAC7A8](v161);
  v877 = (char *)&v782 - v162;
  MEMORY[0x24BDAC7A8](v163);
  v165 = (char *)&v782 - v164;
  MEMORY[0x24BDAC7A8](v166);
  v903 = (char *)&v782 - v167;
  MEMORY[0x24BDAC7A8](v168);
  v170 = (char *)&v782 - v169;
  v926 = type metadata accessor for __RKEntityAudioActionArguments();
  v930 = *(uint64_t (***)(char *, char *, uint64_t))(v926 - 8);
  MEMORY[0x24BDAC7A8](v926);
  v902 = (char *)&v782 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v172);
  v925 = (char *)&v782 - v173;
  *(_QWORD *)&v937.f64[0] = type metadata accessor for __RKEntityActionSpecification();
  v936 = *(_QWORD *)(*(_QWORD *)&v937.f64[0] - 8);
  MEMORY[0x24BDAC7A8](*(_QWORD *)&v937.f64[0]);
  v829 = (char *)&v782 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v175);
  v841 = (char *)&v782 - v176;
  MEMORY[0x24BDAC7A8](v177);
  v918 = (char *)&v782 - v178;
  MEMORY[0x24BDAC7A8](v179);
  v880 = (char *)&v782 - v180;
  MEMORY[0x24BDAC7A8](v181);
  v900 = (char *)&v782 - v182;
  MEMORY[0x24BDAC7A8](v183);
  v185 = (char *)&v782 - v184;
  v186 = *a2;
  v187 = (id)RIOPxrTfTokenEmpty();
  v924 = v3;
  v188 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)&v932 = v186;
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  v802 = type metadata accessor for Prim();
  v190 = swift_allocObject();
  *(_QWORD *)(v190 + 16) = PrimIfNeeded;
  v191 = v190;

  v192 = String.count.getter();
  v809 = v39;
  v803 = v188;
  if (v192 < 1)
    v193 = (id)RIOPxrTfTokenEmpty();
  else
    v193 = (id)RIOPxrTfTokenCreateWithCString();
  v194 = v193;
  RIOPxrUsdPrimSetTypeName();

  v195 = v936;
  v196 = v937.f64[0];
  v929 = *(void (**)(char *, id, unint64_t))(v936 + 16);
  v929(v185, v935, *(_QWORD *)&v937.f64[0]);
  v197 = (*(uint64_t (**)(char *, float64_t))(v195 + 88))(v185, COERCE_FLOAT64_T(*(_QWORD *)&v196));
  i = v197;
  v199 = *MEMORY[0x24BDE69B8];
  v931 = v191;
  if ((_DWORD)v197 == v199)
  {
    (*(void (**)(char *, float64_t))(v195 + 96))(v185, COERCE_FLOAT64_T(*(_QWORD *)&v196));
    v200 = v930;
    v201 = v925;
    v202 = v926;
    v203 = v930[4](v925, v185, v926);
    MEMORY[0x22E2F484C](v203);
    v204 = v934;
    if (!*(_QWORD *)(v934 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v170), (v205 & 1) == 0))
    {
      (*(void (**)(char *, uint64_t))(v927 + 8))(v170, v928);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
      v938 = swift_allocError();
      v219 = v218;
      v220 = (char *)v218
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v221 = v202;
      v222 = v201;
      v223 = (void *)v932;
      *v219 = v932;
      v929(v220, v935, *(_QWORD *)&v937.f64[0]);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      MEMORY[0x22E2F484C](v223);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      v224 = v930[1];
      v225 = v222;
      goto LABEL_16;
    }
    v206 = *(void (**)(char *, uint64_t))(v927 + 8);
    swift_retain();
    v206(v170, v928);
    v935 = (id)RIOPxrUsdObjectCopyPath();
    swift_release();
    if ((__RKEntityAudioActionArguments.loops.getter() & 1) == 0)
    {
      v949 = &protocol witness table for Schema;
      v948 = &type metadata for Schema;
      v946 = v931;
      KeyPath = swift_getKeyPath();
      swift_retain();
      v208 = String.count.getter();
      v209 = v908;
      if (v208 < 1)
        v210 = (id)RIOPxrTfTokenEmpty();
      else
        v210 = (id)RIOPxrTfTokenCreateWithCString();
      v293 = (uint64_t)v893;
      v294 = v935;
      specialized Properties.subscript.setter(v210, KeyPath, 0, 0);
      swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
      v295 = swift_allocObject();
      *(_OWORD *)(v295 + 16) = xmmword_22BD0C360;
      *(_QWORD *)(v295 + 32) = v294;
      *(_QWORD *)&v937.f64[0] = v294;
      specialized Properties.subscript.setter(v295);
      v296 = swift_getKeyPath();
      v297 = v925;
      __RKEntityAudioActionArguments.path.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v298 = RIOPxrSdfAssetPathCreateFromCString();
      swift_release();
      v299 = (void *)v298;
      v300 = v297;
      specialized Properties.subscript.setter(v299, v296, 0, 0);
      v301 = swift_getKeyPath();
      v302 = v907;
      __RKEntityAudioActionArguments.type.getter();
      v303 = v882;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v302, v882, &demangling cache variable for type metadata for __RKEntityAudioActionType?);
      v304 = v913;
      v305 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v913 + 48))(v303, 1, v209);
      v306 = 0;
      v307 = v906;
      if (v305 != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v304 + 32))(v883, v303, v209);
        __RKEntityAudioActionType.rawValue.getter();
        if (String.count.getter() < 1)
        {
          swift_bridgeObjectRelease();
          v306 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          v306 = (id)RIOPxrTfTokenCreateWithCString();
          v300 = v925;
          swift_release();
        }
        (*(void (**)(char *, uint64_t))(v913 + 8))(v883, v209);
      }
      outlined destroy of Any?(v907, &demangling cache variable for type metadata for __RKEntityAudioActionType?);
      specialized Properties.subscript.setter(v306, v301, 0, 0);
      v326 = COERCE_DOUBLE(__RKEntityAudioActionArguments.volume.getter());
      if ((v327 & 1) != 0)
      {
        v328 = 0x3FF0000000000000;
        v329 = v905;
        v330 = v910;
      }
      else
      {
        v328 = *(_QWORD *)&v326;
        v329 = v905;
        v330 = v910;
        if (v326 < 0.0)
          v328 = 0;
      }
      v331 = swift_getKeyPath();
      specialized Properties.subscript.setter(v328, 0, v331, 0, 0);
      v332 = swift_getKeyPath();
      __RKEntityAudioActionArguments.spatialMode.getter();
      v333 = v884;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v293, v884, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v329 + 48))(v333, 1, v307) == 1)
      {
        outlined destroy of Any?(v293, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
        v334 = 0;
      }
      else
      {
        v335 = v885;
        (*(void (**)(char *, uint64_t, uint64_t))(v329 + 32))(v885, v333, v307);
        v336 = *(void (**)(char *, char *, uint64_t))(v329 + 16);
        v337 = v886;
        v336(v886, v335, v307);
        v338 = v874;
        v336(v874, v337, v307);
        v339 = (*(uint64_t (**)(char *, uint64_t))(v329 + 88))(v338, v307);
        if (v339 == *MEMORY[0x24BDE6950])
        {
          v340 = (uint64_t)v893;
        }
        else
        {
          v340 = (uint64_t)v893;
          if (v339 != *MEMORY[0x24BDE6948] && v339 != *MEMORY[0x24BDE6958])
            goto LABEL_335;
        }
        v400 = *(void (**)(char *, uint64_t))(v329 + 8);
        v400(v886, v307);
        v400(v885, v307);
        outlined destroy of Any?(v340, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
        if (String.count.getter() <= 0)
        {
          swift_bridgeObjectRelease();
          v334 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          v334 = (id)RIOPxrTfTokenCreateWithCString();
          v300 = v925;
          swift_release();
        }
      }
      v401 = (uint64_t)v887;
      v402 = (uint64_t)v894;
      specialized Properties.subscript.setter(v334, v332, 0, 0);
      v403 = swift_getKeyPath();
      __RKEntityAudioActionArguments.multiplePerformBehavior.getter();
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v402, v401, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
      v404 = v909;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v909 + 48))(v401, 1, v330) == 1)
      {
        outlined destroy of Any?(v402, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
        v405 = 0;
LABEL_112:
        v413 = v937.f64[0];
        specialized Properties.subscript.setter(v405, v403, 0, 0);

        outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<AudioActionSchema>);
        ((void (*)(char *, uint64_t))v930[1])(v300, v926);
        return;
      }
      v406 = v888;
      (*(void (**)(char *, uint64_t, uint64_t))(v404 + 32))(v888, v401, v330);
      v407 = *(void (**)(char *, char *, uint64_t))(v404 + 16);
      v408 = v889;
      v407(v889, v406, v330);
      v409 = v876;
      v407(v876, v408, v330);
      v410 = (*(uint64_t (**)(char *, uint64_t))(v404 + 88))(v409, v330);
      if (v410 == *MEMORY[0x24BDE6D98])
      {
        v411 = (uint64_t)v894;
LABEL_109:
        v412 = *(void (**)(char *, uint64_t))(v404 + 8);
        v412(v889, v330);
        v412(v888, v330);
        outlined destroy of Any?(v411, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
        if (String.count.getter() <= 0)
        {
          swift_bridgeObjectRelease();
          v405 = (id)RIOPxrTfTokenEmpty();
        }
        else
        {
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          v405 = (id)RIOPxrTfTokenCreateWithCString();
          v300 = v925;
          swift_release();
        }
        goto LABEL_112;
      }
      v411 = (uint64_t)v894;
      if (v410 == *MEMORY[0x24BDE6DA0] || v410 == *MEMORY[0x24BDE6D90])
        goto LABEL_109;
LABEL_334:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
LABEL_335:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      goto LABEL_336;
    }
    MEMORY[0x22E2F484C]();
    *(_QWORD *)&v933 = __RKEntityAudioActionArguments.path.getter();
    v256 = v904;
    __RKEntityAudioActionArguments.type.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v913 + 48))(v256, 1, v908) == 1)
    {
      __break(1u);
    }
    else
    {
      v257 = v901;
      __RKEntityAudioActionArguments.spatialMode.getter();
      v258 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v905 + 48))(v257, 1, v906);
      v259 = v902;
      if (v258 != 1)
      {
        __RKEntityAudioActionArguments.volume.getter();
        if ((v260 & 1) == 0)
        {
          v261 = v881;
          __RKEntityAudioActionArguments.multiplePerformBehavior.getter();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v909 + 48))(v261, 1, v910) != 1)
          {
            __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)();
            v262 = v900;
            v200[2](v900, v259, v926);
            v263 = v936;
            *(_QWORD *)&v933 = *(_QWORD *)(v936 + 104);
            v264 = v937.f64[0];
            ((void (*)(char *, unint64_t, _QWORD))v933)(v262, i, *(_QWORD *)&v937.f64[0]);
            (*(void (**)(char *, _QWORD, uint64_t))(v898 + 104))(v890, *MEMORY[0x24BDE68D0], v892);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
            v265 = (*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80);
            v266 = swift_allocObject();
            *(_OWORD *)(v266 + 16) = xmmword_22BD0C360;
            v929((char *)(v266 + v265), v262, *(_QWORD *)&v264);
            v267 = v891;
            __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
            v268 = v912;
            v269 = v880;
            v270 = v899;
            (*(void (**)(char *, char *, uint64_t))(v912 + 16))(v880, v267, v899);
            ((void (*)(char *, _QWORD, _QWORD))v933)(v269, *MEMORY[0x24BDE69C8], *(_QWORD *)&v264);
            v940 = v932;
            v271 = v938;
            Stage.makeParentPrim(from:baseName:)(&v940, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, &v946);
            if (v271)
            {

              swift_release();
              v272 = *(void (**)(char *, _QWORD))(v936 + 8);
              v272(v269, *(_QWORD *)&v264);
              (*(void (**)(char *, uint64_t))(v268 + 8))(v267, v270);
              v272(v900, *(_QWORD *)&v264);
              v273 = v930[1];
              v274 = v926;
              ((void (*)(char *, uint64_t))v273)(v902, v926);
              ((void (*)(char *, uint64_t))v273)(v925, v274);
              v938 = v271;
            }
            else
            {
              v311 = (void *)v946;
              Stage.setAction(action:at:mapping:)(v269, &v946, v204);
              v938 = 0;

              swift_release();
              v388 = *(void (**)(char *, _QWORD))(v936 + 8);
              v389 = v269;
              v390 = v937.f64[0];
              v388(v389, *(_QWORD *)&v937.f64[0]);
              (*(void (**)(char *, uint64_t))(v912 + 8))(v891, v270);
              v388(v900, *(_QWORD *)&v390);
              v391 = v930[1];
              v392 = v926;
              ((void (*)(char *, uint64_t))v391)(v902, v926);
              ((void (*)(char *, uint64_t))v391)(v925, v392);

            }
            return;
          }
          goto LABEL_332;
        }
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        __break(1u);
        goto LABEL_334;
      }
    }
    __break(1u);
    goto LABEL_331;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE6970])
  {
    v211 = v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v212 = v914;
    (*(void (**)(char *, char *, uint64_t))(v920 + 32))(v919, v185, v914);
    __RKChangeSceneActionArguments.targetSceneIdentifier.getter();
    if (*(_QWORD *)(v934 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v165);
      if ((v213 & 1) != 0)
      {
        v214 = *(void (**)(char *, uint64_t))(v927 + 8);
        swift_retain();
        v214(v165, v928);
        v215 = RIOPxrUsdObjectCopyPath();
        swift_release();
        v949 = &protocol witness table for Schema;
        v948 = &type metadata for Schema;
        v946 = v931;
        v216 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1)
          v217 = (id)RIOPxrTfTokenEmpty();
        else
          v217 = (id)RIOPxrTfTokenCreateWithCString();
        specialized Properties.subscript.setter(v217, v216, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        v308 = swift_allocObject();
        *(_OWORD *)(v308 + 16) = xmmword_22BD0C360;
        *(_QWORD *)(v308 + 32) = v215;
        specialized Properties.subscript.setter(v308);
        outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<ChangeSceneActionSchema>);
        v309 = *(void (**)(char *, uint64_t))(v920 + 8);
        v310 = v919;
LABEL_140:
        v309(v310, v212);
        return;
      }
    }
    (*(void (**)(char *, uint64_t))(v927 + 8))(v165, v928);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v234 = swift_allocError();
    v236 = v235;
    v237 = (char *)v235
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v238 = (void *)v932;
    *v236 = v932;
    v929(v237, v935, *(_QWORD *)&v211);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v239 = v238;
    v240 = v919;
    __RKChangeSceneActionArguments.targetSceneIdentifier.getter();
    swift_storeEnumTagMultiPayload();
    v938 = v234;
    swift_willThrow();
    swift_release();
    v241 = v920;
    goto LABEL_39;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE69D0])
  {
    v227 = v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v212 = v896;
    v228 = (*(uint64_t (**)(char *, char *, uint64_t))(v916 + 32))(v915, v185, v896);
    MEMORY[0x22E2F48C4](v228);
    if (*(_QWORD *)(v934 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v156);
      if ((v229 & 1) != 0)
      {
        v230 = *(void (**)(char *, uint64_t))(v927 + 8);
        swift_retain();
        v230(v156, v928);
        v231 = (void *)RIOPxrUsdObjectCopyPath();
        swift_release();
        v949 = &protocol witness table for Schema;
        v948 = &type metadata for Schema;
        v946 = v931;
        v232 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1)
          v233 = (id)RIOPxrTfTokenEmpty();
        else
          v233 = (id)RIOPxrTfTokenCreateWithCString();
        specialized Properties.subscript.setter(v233, v232, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        v320 = swift_allocObject();
        *(_OWORD *)(v320 + 16) = xmmword_22BD0C360;
        *(_QWORD *)(v320 + 32) = v231;
        v321 = v231;
        specialized Properties.subscript.setter(v320);
        v322 = swift_getKeyPath();
        v323 = v915;
        v324 = __RKEntityCustomActionArguments.actionIdentifier.getter();
        specialized Properties.subscript.setter(v324, v325, v322, 0, 0);

        outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<NotificationActionSchema>);
        v309 = *(void (**)(char *, uint64_t))(v916 + 8);
        v310 = v323;
        goto LABEL_140;
      }
    }
    (*(void (**)(char *, uint64_t))(v927 + 8))(v156, v928);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v250 = swift_allocError();
    v252 = v251;
    v253 = (char *)v251
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v254 = (void *)v932;
    *v252 = v932;
    v929(v253, v935, *(_QWORD *)&v227);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v255 = v254;
    v240 = v915;
    MEMORY[0x22E2F48C4](v255);
    swift_storeEnumTagMultiPayload();
    v938 = v250;
    swift_willThrow();
    swift_release();
    v241 = v916;
    goto LABEL_39;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE69D8])
  {
    v242 = v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v212 = v879;
    v243 = (*(uint64_t (**)(char *, char *, uint64_t))(v897 + 32))(v911, v185, v879);
    v244 = (uint64_t)v877;
    MEMORY[0x22E2F4924](v243);
    if (*(_QWORD *)(v934 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v244);
      if ((v245 & 1) != 0)
      {
        v246 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
        swift_retain();
        v246(v244, v928);
        v247 = (void *)RIOPxrUsdObjectCopyPath();
        swift_release();
        v949 = &protocol witness table for Schema;
        v948 = &type metadata for Schema;
        v946 = v931;
        v248 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1)
          v249 = (id)RIOPxrTfTokenEmpty();
        else
          v249 = (id)RIOPxrTfTokenCreateWithCString();
        v422 = v868;
        v423 = v870;
        v424 = (uint64_t)v863;
        specialized Properties.subscript.setter(v249, v248, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        v425 = swift_allocObject();
        *(_OWORD *)(v425 + 16) = xmmword_22BD0C360;
        *(_QWORD *)(v425 + 32) = v247;
        v426 = v247;
        specialized Properties.subscript.setter(v425);
        v427 = swift_getKeyPath();
        v428 = __RKEntityEmphasisActionArguments.duration.getter();
        v429 = BYTE4(v428) & 1;
        if ((v428 & 0x100000000) != 0)
          v430 = 0.0;
        else
          v430 = *(float *)&v428;
        specialized Properties.subscript.setter(*(uint64_t *)&v430, v429, v427, 0, 0);
        v431 = swift_getKeyPath();
        __RKEntityEmphasisActionArguments.animationStyle.getter();
        v432 = v862;
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v424, v862, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
        v433 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v423 + 48))(v432, 1, v422) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v423 + 32))(v864, v432, v422);
          __RKEntityActionAnimationStyle.rawValue.getter();
          if (String.count.getter() < 1)
          {
            swift_bridgeObjectRelease();
            v433 = (id)RIOPxrTfTokenEmpty();
          }
          else
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            v433 = (id)RIOPxrTfTokenCreateWithCString();
            v423 = v870;
            swift_release();
          }
          (*(void (**)(char *, uint64_t))(v423 + 8))(v864, v422);
        }
        outlined destroy of Any?(v424, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
        specialized Properties.subscript.setter(v433, v431, 0, 0);
        v459 = swift_getKeyPath();
        v460 = v875;
        __RKEntityEmphasisActionArguments.emphasisAnimationType.getter();
        v461 = v865;
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v460, v865, &demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
        v462 = v869;
        v463 = v867;
        v464 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v869 + 48))(v461, 1, v867) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v462 + 32))(v866, v461, v463);
          __RKEntityEmphasisAnimationType.rawValue.getter();
          if (String.count.getter() < 1)
          {
            swift_bridgeObjectRelease();
            v464 = (id)RIOPxrTfTokenEmpty();
          }
          else
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            v464 = (id)RIOPxrTfTokenCreateWithCString();
            v462 = v869;
            swift_release();
          }
          (*(void (**)(char *, uint64_t))(v462 + 8))(v866, v463);
        }
        outlined destroy of Any?(v875, &demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
        specialized Properties.subscript.setter(v464, v459, 0, 0);

        outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<EmphasisActionSchema>);
        v309 = *(void (**)(char *, uint64_t))(v897 + 8);
        v310 = v911;
        goto LABEL_140;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v244, v928);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v279 = swift_allocError();
    v281 = v280;
    v282 = (char *)v280
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v283 = (void *)v932;
    *v281 = v932;
    v929(v282, v935, *(_QWORD *)&v242);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v284 = v283;
    v240 = v911;
    MEMORY[0x22E2F4924](v284);
    swift_storeEnumTagMultiPayload();
    v938 = v279;
    swift_willThrow();
    swift_release();
    v241 = v897;
    goto LABEL_39;
  }
  v275 = *MEMORY[0x24BDE69C8];
  if ((_DWORD)v197 == (_DWORD)v275)
  {
    v276 = *(_QWORD *)&v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    (*(void (**)(char *, char *, uint64_t))(v912 + 32))(v895, v185, v899);
    v949 = &protocol witness table for Schema;
    v948 = &type metadata for Schema;
    v946 = v191;
    v277 = swift_getKeyPath();
    swift_retain();
    if (String.count.getter() < 1)
      v278 = (id)RIOPxrTfTokenEmpty();
    else
      v278 = (id)RIOPxrTfTokenCreateWithCString();
    v341 = (_OWORD *)v923;
    v342 = v933;
    v343 = v892;
    specialized Properties.subscript.setter(v278, v277, 0, 0);
    v344 = swift_getKeyPath();
    v345 = v878;
    __RKEntityActionGroupArguments.order.getter();
    v346 = v898;
    v347 = v871;
    (*(void (**)(char *, char *, uint64_t))(v898 + 16))(v871, v345, v343);
    v348 = (*(uint64_t (**)(char *, uint64_t))(v346 + 88))(v347, v343);
    if (v348 != *MEMORY[0x24BDE68D0] && v348 != *MEMORY[0x24BDE68D8])
      goto LABEL_334;
    (*(void (**)(char *, uint64_t))(v898 + 8))(v878, v343);
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      v349 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v349 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    specialized Properties.subscript.setter(v349, v344, 0, 0);
    v350 = swift_getKeyPath();
    v351 = __RKEntityActionGroupArguments.loopCount.getter();
    if ((v352 & 1) != 0)
      goto LABEL_333;
    specialized Properties.subscript.setter(v351 == 0, v350, 0, 0);
    swift_getKeyPath();
    v353 = __RKEntityActionGroupArguments.loopCount.getter();
    specialized Properties.subscript.setter(v353, v354 & 1);
    v944 = MEMORY[0x24BEE4AF8];
    v935 = (id)__RKEntityActionGroupArguments.actions.getter();
    v185 = (char *)specialized Array._getCount()((uint64_t)v935);
    i = 0;
    v195 = v936;
    if (v185)
      goto LABEL_85;
LABEL_87:
    v374 = 1;
    for (i = (unint64_t)v185; ; ++i)
    {
      v375 = v922;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(v922 + 56))(v342, v374, 1, v341);
      v376 = v921;
      outlined init with take of (URL, __REAsset)(v342, (uint64_t)v921, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, _OWORD *))(v375 + 48))(v376, 1, v341) == 1)
        break;
      v355 = *v376;
      v356 = (uint64_t)v918;
      (*(void (**)(char *, char *, unint64_t))(v936 + 32))(v918, (char *)v376 + *((int *)v341 + 12), v276);
      v357 = (id)v932;
      v358 = (void *)RIOPxrSdfPathCopyString();
      v359 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v361 = v360;

      v940 = 0x5F6E6F697463412FLL;
      v941 = 0xE800000000000000;
      if (__OFADD__(v355, 1))
      {
        __break(1u);
        goto LABEL_211;
      }
      v939 = v355 + 1;
      v362._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v362);
      swift_bridgeObjectRelease();
      v363 = v940;
      v364 = (void *)v941;
      v940 = v359;
      v941 = v361;
      swift_bridgeObjectRetain();
      v365._countAndFlagsBits = v363;
      v365._object = v364;
      String.append(_:)(v365);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v366 = (void *)RIOPxrSdfPathCreateFromCString();
      swift_release();
      v940 = (uint64_t)v366;
      v367 = v938;
      Stage.setAction(action:at:mapping:)(v356, &v940, v934);
      v938 = v367;
      if (v367)
      {
        swift_release();
        (*(void (**)(uint64_t, _QWORD))(v936 + 8))(v356, *(_QWORD *)&v937.f64[0]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<GroupActionSchema>);
        (*(void (**)(char *, uint64_t))(v912 + 8))(v895, v899);

        return;
      }
      MEMORY[0x22E2F53D4]();
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)((v944 & 0xFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v195 = v936;
      v276 = *(_QWORD *)&v937.f64[0];
      (*(void (**)(uint64_t, _QWORD))(v936 + 8))(v356, *(_QWORD *)&v937.f64[0]);
      v341 = (_OWORD *)v923;
      v342 = v933;
      if ((char *)i == v185)
        goto LABEL_87;
LABEL_85:
      v368 = v935;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(i, 1, (uint64_t)v935);
      if (__OFADD__(i, 1))
      {
        __break(1u);
LABEL_217:
        if ((_DWORD)i == *MEMORY[0x24BDE69A8])
        {
          (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
          v597 = (*(uint64_t (**)(char *, char *, uint64_t))(v790 + 32))(v792, v185, v791);
          v598 = (uint64_t)v785;
          MEMORY[0x22E2F4744](v597);
          if (*(_QWORD *)(v934 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v598), (v599 & 1) != 0))
          {
            v600 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
            swift_retain();
            v600(v598, v928);
            v601 = (void *)RIOPxrUsdObjectCopyPath();
            swift_release();
            v949 = &protocol witness table for Schema;
            v948 = &type metadata for Schema;
            v946 = v931;
            v602 = swift_getKeyPath();
            swift_retain();
            if (String.count.getter() < 1)
              v603 = (id)RIOPxrTfTokenEmpty();
            else
              v603 = (id)RIOPxrTfTokenCreateWithCString();
            specialized Properties.subscript.setter(v603, v602, 0, 0);
            swift_getKeyPath();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
            v767 = swift_allocObject();
            *(_OWORD *)(v767 + 16) = xmmword_22BD0C360;
            *(_QWORD *)(v767 + 32) = v601;
            v768 = v601;
            specialized Properties.subscript.setter(v767);
            v769 = swift_getKeyPath();
            v770 = __RKEntitySpinActionArguments.duration.getter();
            v771 = BYTE4(v770) & 1;
            if ((v770 & 0x100000000) != 0)
              v772 = 0.0;
            else
              v772 = *(float *)&v770;
            specialized Properties.subscript.setter(*(uint64_t *)&v772, v771, v769, 0, 0);
            v773 = swift_getKeyPath();
            v774 = __RKEntitySpinActionArguments.iterations.getter();
            v775 = BYTE4(v774) & 1;
            if ((v774 & 0x100000000) != 0)
              v776 = 0.0;
            else
              v776 = *(float *)&v774;
            specialized Properties.subscript.setter(*(uint64_t *)&v776, v775, v773, 0, 0);
            v777 = v783;
            __RKEntitySpinActionArguments.direction.getter();
            v778 = __RKEntitySpinActionArguments.axis.getter();
            v780 = v938;
            setRotationAxis #1 (direction:axis:on:) in Stage.setAction(action:at:mapping:)(v777, v778, v781, v779 & 1, v931, (void *)v932, (uint64_t)v935);
            v938 = v780;

            if (v780)
              swift_release();
            outlined destroy of Any?(v783, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
            outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<SpinActionSchema>);
            (*(void (**)(char *, uint64_t))(v790 + 8))(v792, v791);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v598, v928);
            type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
            lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
            v721 = swift_allocError();
            v723 = v722;
            v724 = (char *)v722
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                          + 48);
            v725 = (void *)v932;
            *v723 = v932;
            v929(v724, v935, *(_QWORD *)&v937.f64[0]);
            type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
            swift_storeEnumTagMultiPayload();
            v726 = v725;
            v727 = v792;
            MEMORY[0x22E2F4744](v726);
            swift_storeEnumTagMultiPayload();
            v938 = v721;
            swift_willThrow();
            swift_release();
            (*(void (**)(char *, uint64_t))(v790 + 8))(v727, v791);
          }
          return;
        }
        type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
        v938 = swift_allocError();
        v652 = v195;
        v654 = v653;
        v655 = (char *)v653
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                      + 48);
        v656 = (void *)v932;
        *v654 = v932;
        v221 = *(_QWORD *)&v937.f64[0];
        v929(v655, v935, *(_QWORD *)&v937.f64[0]);
        type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        v657 = v656;
        swift_willThrow();
        swift_release();
        v224 = *(uint64_t (**)(char *, char *, uint64_t))(v652 + 8);
        v225 = v185;
LABEL_16:
        v226 = v221;
LABEL_41:
        ((void (*)(char *, uint64_t))v224)(v225, v226);
        return;
      }
      v369 = (unint64_t)v368
           + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80))
           + *(_QWORD *)(v195 + 72) * i;
      v370 = v195;
      v371 = &v917[*((int *)v341 + 12)];
      v929(v371, (id)v369, v276);
      v372 = v933 + *((int *)v341 + 12);
      *(_QWORD *)v933 = i;
      v373 = *(void (**)(uint64_t, char *, unint64_t))(v370 + 32);
      v342 = v933;
      v373(v372, v371, v276);
      v374 = 0;
    }
    swift_bridgeObjectRelease();
    v377 = swift_getKeyPath();
    v378 = v944;
    v379 = swift_bridgeObjectRetain();
    v380 = specialized Array._getCount()(v379);
    if (!v380)
    {
      v399 = specialized static Array._allocateUninitialized(_:)(0);
      swift_bridgeObjectRelease();
LABEL_126:
      swift_bridgeObjectRelease();
      specialized Properties.subscript.setter(v399);
      outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<GroupActionSchema>);
      (*(void (**)(char *, uint64_t))(v912 + 8))(v895, v899);
      return;
    }
    v381 = v380;
    v940 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v381);
    if ((v381 & 0x8000000000000000) == 0)
    {
      v384 = 0;
      do
      {
        if ((v378 & 0xC000000000000001) != 0)
          MEMORY[0x22E2F57B8](v384, v378);
        else
          swift_retain();
        ++v384;
        v385 = RIOPxrUsdObjectCopyPath();
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v386 = *(_QWORD *)(v940 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v386);
        v387 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v386, v385);
        destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v387);
      }
      while (v381 != v384);
      swift_bridgeObjectRelease();
      v399 = v940;
      goto LABEL_126;
    }
    __break(1u);
    goto LABEL_328;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE6998])
  {
    v285 = v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v212 = v860;
    v286 = (*(uint64_t (**)(char *, char *, uint64_t))(v873 + 32))(v872, v185, v860);
    v287 = (uint64_t)v859;
    MEMORY[0x22E2F4678](v286);
    if (*(_QWORD *)(v934 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v287);
      if ((v288 & 1) != 0)
      {
        v289 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
        swift_retain();
        v289(v287, v928);
        v290 = (void *)RIOPxrUsdObjectCopyPath();
        swift_release();
        v949 = &protocol witness table for Schema;
        v948 = &type metadata for Schema;
        v946 = v931;
        v291 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1)
          v292 = (id)RIOPxrTfTokenEmpty();
        else
          v292 = (id)RIOPxrTfTokenCreateWithCString();
        v488 = v938;
        v489 = v872;
        specialized Properties.subscript.setter(v292, v291, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        v490 = swift_allocObject();
        *(_OWORD *)(v490 + 16) = xmmword_22BD0C360;
        *(_QWORD *)(v490 + 32) = v290;
        v491 = v290;
        specialized Properties.subscript.setter(v490);
        v492 = swift_getKeyPath();
        v493 = __RKEntityHideActionArguments.duration.getter();
        v494 = BYTE4(v493) & 1;
        if ((v493 & 0x100000000) != 0)
          v495 = 0.0;
        else
          v495 = *(float *)&v493;
        specialized Properties.subscript.setter(*(uint64_t *)&v495, v494, v492, 0, 0);
        v496 = swift_getKeyPath();
        if (String.count.getter() < 1)
          v497 = (id)RIOPxrTfTokenEmpty();
        else
          v497 = (id)RIOPxrTfTokenCreateWithCString();
        v498 = (uint64_t)v852;
        v499 = (uint64_t)v850;
        specialized Properties.subscript.setter(v497, v496, 0, 0);
        v500 = (uint64_t)v851;
        __RKEntityHideActionArguments.ease.getter();
        __RKEntityHideActionArguments.easeType.getter();
        setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(v500, v498, v931, (void *)v932, (uint64_t)v935);
        v938 = v488;
        if (!v488)
        {
          outlined destroy of Any?(v498, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
          outlined destroy of Any?(v500, &demangling cache variable for type metadata for __RKEntityMoveEase?);
          v501 = swift_getKeyPath();
          v502 = (uint64_t)v846;
          __RKEntityHideActionArguments.animationStyle.getter();
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v502, v499, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
          v503 = v870;
          v504 = v868;
          v505 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v870 + 48))(v499, 1, v868);
          *(_QWORD *)&v937.f64[0] = v491;
          if (v505 == 1)
          {
            v506 = 0;
          }
          else
          {
            v530 = v824;
            (*(void (**)(char *, uint64_t, uint64_t))(v503 + 32))(v824, v499, v504);
            __RKEntityActionAnimationStyle.rawValue.getter();
            if (String.count.getter() < 1)
            {
              swift_bridgeObjectRelease();
              v506 = (id)RIOPxrTfTokenEmpty();
            }
            else
            {
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              v506 = (id)RIOPxrTfTokenCreateWithCString();
              v503 = v870;
              swift_release();
            }
            (*(void (**)(char *, uint64_t))(v503 + 8))(v530, v868);
            v502 = (uint64_t)v846;
          }
          outlined destroy of Any?(v502, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
          specialized Properties.subscript.setter(v506, v501, 0, 0);
          v570 = swift_getKeyPath();
          v571 = (uint64_t)v837;
          __RKEntityHideActionArguments.buildOutAnimationType.getter();
          v572 = v571;
          v573 = v836;
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v571, v836, &demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
          v575 = v838;
          v574 = v839;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v838 + 48))(v573, 1, v839) == 1)
          {
            outlined destroy of Any?(v571, &demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
            v576 = 0;
          }
          else
          {
            v577 = v825;
            (*(void (**)(char *, uint64_t, uint64_t))(v575 + 32))(v825, v573, v574);
            v578 = v572;
            v579 = (uint64_t)v826;
            (*(void (**)(char *, char *, uint64_t))(v575 + 16))(v826, v577, v574);
            LOBYTE(v579) = specialized __RKEntityActionVisibilityTypeUSD.init(from:)(v579);
            (*(void (**)(char *, uint64_t))(v575 + 8))(v577, v574);
            outlined destroy of Any?(v578, &demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
            __RKEntityActionVisibilityTypeUSD.rawValue.getter(v579);
            if (String.count.getter() <= 0)
            {
              swift_bridgeObjectRelease();
              v576 = (id)RIOPxrTfTokenEmpty();
            }
            else
            {
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              v576 = (id)RIOPxrTfTokenCreateWithCString();
              swift_release();
            }
          }
          specialized Properties.subscript.setter(v576, v570, 0, 0);
          v580 = swift_getKeyPath();
          v581 = __RKEntityHideActionArguments.distance.getter();
          v582 = BYTE4(v581) & 1;
          if ((v581 & 0x100000000) != 0)
            v583 = 0.0;
          else
            v583 = *(float *)&v581;
          specialized Properties.subscript.setter(*(uint64_t *)&v583, v582, v580, 0, 0);

          outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
          v309 = *(void (**)(char *, uint64_t))(v873 + 8);
          v310 = v489;
          goto LABEL_140;
        }

        swift_release();
        outlined destroy of Any?(v498, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
        outlined destroy of Any?(v500, &demangling cache variable for type metadata for __RKEntityMoveEase?);
        outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
        v224 = *(uint64_t (**)(char *, char *, uint64_t))(v873 + 8);
        v225 = v489;
LABEL_40:
        v226 = v212;
        goto LABEL_41;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v287, v928);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v393 = swift_allocError();
    v395 = v394;
    v396 = (char *)v394
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v397 = (void *)v932;
    *v395 = v932;
    v929(v396, v935, *(_QWORD *)&v285);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v398 = v397;
    v240 = v872;
    MEMORY[0x22E2F4678](v398);
    swift_storeEnumTagMultiPayload();
    v938 = v393;
    swift_willThrow();
    swift_release();
    v241 = v873;
LABEL_39:
    v224 = *(uint64_t (**)(char *, char *, uint64_t))(v241 + 8);
    v225 = v240;
    goto LABEL_40;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE69C0])
  {
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v312 = v856;
    v221 = v857;
    v313 = (*(uint64_t (**)(char *, char *, uint64_t))(v856 + 32))(v861, v185, v857);
    v314 = (uint64_t)v855;
    MEMORY[0x22E2F487C](v313);
    if (*(_QWORD *)(v934 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v314);
      if ((v315 & 1) != 0)
      {
        v316 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
        swift_retain();
        v316(v314, v928);
        v317 = (void *)RIOPxrUsdObjectCopyPath();
        swift_release();
        v949 = &protocol witness table for Schema;
        v948 = &type metadata for Schema;
        v946 = v931;
        v318 = swift_getKeyPath();
        swift_retain();
        if (String.count.getter() < 1)
          v319 = (id)RIOPxrTfTokenEmpty();
        else
          v319 = (id)RIOPxrTfTokenCreateWithCString();
        specialized Properties.subscript.setter(v319, v318, 0, 0);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
        v522 = swift_allocObject();
        *(_OWORD *)(v522 + 16) = xmmword_22BD0C360;
        *(_QWORD *)(v522 + 32) = v317;
        v523 = v317;
        specialized Properties.subscript.setter(v522);
        v524 = swift_getKeyPath();
        v525 = __RKEntityForceActionArguments.velocity.getter();
        if ((v527 & 1) != 0)
        {
          v528 = 0uLL;
          v529 = 0.0;
        }
        else
        {
          v528 = vcvtq_f64_f32((float32x2_t)v525);
          v529 = v526;
        }
        v950 = v528;
        v951 = v529;
        v952 = 0;
        v953 = v527 & 1;
        specialized Properties.subscript.setter((uint64_t)&v950, v524, 0, 0);

        outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<ImpulseActionSchema>);
        (*(void (**)(char *, uint64_t))(v312 + 8))(v861, v221);
        return;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v314, v928);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v434 = swift_allocError();
    v436 = v435;
    v437 = (char *)v435
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v438 = (void *)v932;
    *v436 = v932;
    v929(v437, v935, *(_QWORD *)&v937.f64[0]);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v439 = v438;
    v440 = v861;
    MEMORY[0x22E2F487C](v439);
    swift_storeEnumTagMultiPayload();
    v938 = v434;
    swift_willThrow();
    swift_release();
    v224 = *(uint64_t (**)(char *, char *, uint64_t))(v312 + 8);
    v225 = v440;
    goto LABEL_16;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE69A0])
  {
    v414 = v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v358 = v849;
    v355 = v854;
    v415 = (*(uint64_t (**)(char *, char *, uint64_t))(v858 + 32))(v849, v185, v854);
    v416 = (uint64_t)v847;
    MEMORY[0x22E2F46E4](v415);
    if (!*(_QWORD *)(v934 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v416), (v417 & 1) == 0))
    {
      (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v416, v928);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
      v465 = swift_allocError();
      v467 = v466;
      v468 = (char *)v466
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v469 = v358;
      v470 = (void *)v932;
      *v467 = v932;
      v929(v468, v935, *(_QWORD *)&v414);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      MEMORY[0x22E2F46E4](v470);
      swift_storeEnumTagMultiPayload();
      v938 = v465;
      swift_willThrow();
      swift_release();
      (*(void (**)(void *, uint64_t))(v858 + 8))(v469, v854);
      return;
    }
    v418 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
    swift_retain();
    v418(v416, v928);
    v419 = (void *)RIOPxrUsdObjectCopyPath();
    swift_release();
    v949 = &protocol witness table for Schema;
    v948 = &type metadata for Schema;
    v946 = v931;
    v420 = swift_getKeyPath();
    swift_retain();
    if (String.count.getter() < 1)
      v421 = (id)RIOPxrTfTokenEmpty();
    else
      v421 = (id)RIOPxrTfTokenCreateWithCString();
    i = v868;
    v557 = (uint64_t)v832;
    specialized Properties.subscript.setter(v421, v420, 0, 0);
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
    v558 = swift_allocObject();
    *(_OWORD *)(v558 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v558 + 32) = v419;
    *(_QWORD *)&v937.f64[0] = v419;
    specialized Properties.subscript.setter(v558);
    v559 = swift_getKeyPath();
    v560 = __RKEntityShowActionArguments.duration.getter();
    v561 = BYTE4(v560) & 1;
    if ((v560 & 0x100000000) != 0)
      v562 = 0.0;
    else
      v562 = *(float *)&v560;
    specialized Properties.subscript.setter(*(uint64_t *)&v562, v561, v559, 0, 0);
    v563 = swift_getKeyPath();
    if (String.count.getter() < 1)
      v564 = (id)RIOPxrTfTokenEmpty();
    else
      v564 = (id)RIOPxrTfTokenCreateWithCString();
    v565 = (uint64_t)v833;
    v356 = (uint64_t)v834;
    specialized Properties.subscript.setter(v564, v563, 0, 0);
    __RKEntityShowActionArguments.ease.getter();
    __RKEntityShowActionArguments.easeType.getter();
    v566 = v938;
    setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(v557, v565, v931, (void *)v932, (uint64_t)v935);
    v938 = v566;
    if (v566)
    {

      swift_release();
      outlined destroy of Any?(v565, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
      outlined destroy of Any?(v557, &demangling cache variable for type metadata for __RKEntityMoveEase?);
      outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
      (*(void (**)(void *, uint64_t))(v858 + 8))(v358, v355);
      return;
    }
    outlined destroy of Any?(v565, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
    outlined destroy of Any?(v557, &demangling cache variable for type metadata for __RKEntityMoveEase?);
    v185 = (char *)swift_getKeyPath();
    v567 = (uint64_t)v823;
    __RKEntityShowActionArguments.animationStyle.getter();
    v359 = v812;
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v567, v812, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
    v357 = (id)v870;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v870 + 48))(v359, 1, i) == 1)
    {
      v568 = 0;
    }
    else
    {
LABEL_211:
      v591 = v796;
      (*((void (**)(char *, uint64_t, unint64_t))v357 + 4))(v796, v359, i);
      __RKEntityActionAnimationStyle.rawValue.getter();
      if (String.count.getter() < 1)
      {
        swift_bridgeObjectRelease();
        v568 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        v568 = (id)RIOPxrTfTokenCreateWithCString();
        v358 = v849;
        swift_release();
      }
      (*(void (**)(char *, unint64_t))(v870 + 8))(v591, i);
      v567 = (uint64_t)v823;
    }
    outlined destroy of Any?(v567, &demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
    specialized Properties.subscript.setter(v568, (uint64_t)v185, 0, 0);
    v621 = swift_getKeyPath();
    v622 = (uint64_t)v813;
    __RKEntityShowActionArguments.buildInAnimationType.getter();
    v623 = v622;
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v622, v356, &demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
    v625 = v814;
    v624 = v815;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v814 + 48))(v356, 1, v815) == 1)
    {
      outlined destroy of Any?(v623, &demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
      v626 = 0;
    }
    else
    {
      v627 = v797;
      (*(void (**)(char *, uint64_t, uint64_t))(v625 + 32))(v797, v356, v624);
      v628 = v623;
      v629 = (uint64_t)v798;
      (*(void (**)(char *, char *, uint64_t))(v625 + 16))(v798, v627, v624);
      LOBYTE(v629) = specialized __RKEntityActionVisibilityTypeUSD.init(from:)(v629);
      (*(void (**)(char *, uint64_t))(v625 + 8))(v627, v624);
      outlined destroy of Any?(v628, &demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
      __RKEntityActionVisibilityTypeUSD.rawValue.getter(v629);
      if (String.count.getter() <= 0)
      {
        swift_bridgeObjectRelease();
        v626 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        v626 = (id)RIOPxrTfTokenCreateWithCString();
        v358 = v849;
        swift_release();
      }
    }
    v630 = v937.f64[0];
    specialized Properties.subscript.setter(v626, v621, 0, 0);
    v631 = swift_getKeyPath();
    v632 = __RKEntityShowActionArguments.distance.getter();
    v633 = BYTE4(v632) & 1;
    if ((v632 & 0x100000000) != 0)
      v634 = 0.0;
    else
      v634 = *(float *)&v632;
    specialized Properties.subscript.setter(*(uint64_t *)&v634, v633, v631, 0, 0);

    outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<VisibilityActionSchema>);
    (*(void (**)(void *, uint64_t))(v858 + 8))(v358, v355);
    return;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE6990])
  {
    v441 = v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v442 = v843;
    v443 = started;
    (*(void (**)(char *, char *, uint64_t))(v853 + 32))(v843, v185, started);
    v444 = __RKEntityStartAnimateActionArguments.loopCount.getter();
    v445 = v934;
    if (v444 >= 2)
    {
      MEMORY[0x22E2F4B04]();
      __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter();
      __RKEntityStartAnimateActionArguments.clipStart.getter();
      __RKEntityStartAnimateActionArguments.clipDuration.getter();
      __RKEntityStartAnimateActionArguments.clipReversed.getter();
      __RKEntityStartAnimateActionArguments.animationSpeed.getter();
      __RKEntityStartAnimateActionArguments.clipReverses.getter();
      v446 = v842;
      __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)();
      v447 = v841;
      (*(void (**)(char *, char *, uint64_t))(v853 + 16))(v841, v446, v443);
      v935 = *(id *)(v936 + 104);
      v448 = v937.f64[0];
      ((void (*)(char *, unint64_t, _QWORD))v935)(v447, i, *(_QWORD *)&v937.f64[0]);
      (*(void (**)(char *, _QWORD, uint64_t))(v898 + 104))(v890, *MEMORY[0x24BDE68D0], v892);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v449 = swift_allocObject();
      specialized static Array._adoptStorage(_:count:)(v449, 1);
      v929(v450, v447, *(_QWORD *)&v448);
      __RKEntityStartAnimateActionArguments.loopCount.getter();
      v451 = v831;
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      v452 = v912;
      v453 = v829;
      (*(void (**)(char *, char *, uint64_t))(v912 + 16))(v829, v451, v899);
      ((void (*)(char *, uint64_t, _QWORD))v935)(v453, v275, *(_QWORD *)&v448);
      v940 = v932;
      v454 = v938;
      Stage.makeParentPrim(from:baseName:)(&v940, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, &v946);
      v938 = v454;
      v455 = v448;
      if (v454)
      {
        swift_release();
        v456 = *(void (**)(char *, _QWORD))(v936 + 8);
        v456(v453, *(_QWORD *)&v448);
        (*(void (**)(char *, uint64_t))(v452 + 8))(v451, v899);
        v456(v841, *(_QWORD *)&v448);
        v457 = *(void (**)(char *, uint64_t))(v853 + 8);
        v458 = started;
        v457(v842, started);
        v457(v442, v458);
      }
      else
      {
        v569 = (void *)v946;
        Stage.setAction(action:at:mapping:)(v453, &v946, v934);
        v938 = 0;
        swift_release();
        v594 = *(void (**)(char *, _QWORD))(v936 + 8);
        v594(v453, *(_QWORD *)&v455);
        (*(void (**)(char *, uint64_t))(v912 + 8))(v451, v899);
        v594(v841, *(_QWORD *)&v455);
        v595 = *(void (**)(char *, uint64_t))(v853 + 8);
        v596 = started;
        v595(v842, started);
        v595(v442, v596);

      }
      return;
    }
    v507 = v441;
    v508 = (uint64_t)v827;
    MEMORY[0x22E2F4B04]();
    if (!*(_QWORD *)(v445 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v508), (v509 & 1) == 0))
    {
      (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v508, v928);
      type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
      v539 = swift_allocError();
      v541 = v540;
      v542 = (char *)v540
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                    + 48);
      v543 = (void *)v932;
      *v541 = v932;
      v929(v542, v935, *(_QWORD *)&v507);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      swift_storeEnumTagMultiPayload();
      MEMORY[0x22E2F4B04](v543);
      swift_storeEnumTagMultiPayload();
      v938 = v539;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v853 + 8))(v442, started);
      return;
    }
    v510 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
    swift_retain();
    v510(v508, v928);
    v511 = (void *)RIOPxrUsdObjectCopyPath();
    swift_release();
    v949 = &protocol witness table for Schema;
    v948 = &type metadata for Schema;
    v946 = v931;
    v512 = swift_getKeyPath();
    swift_retain();
    v513 = String.count.getter();
    v514 = v853;
    if (v513 < 1)
      v515 = (id)RIOPxrTfTokenEmpty();
    else
      v515 = (id)RIOPxrTfTokenCreateWithCString();
    v613 = v805;
    specialized Properties.subscript.setter(v515, v512, 0, 0);
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
    v614 = swift_allocObject();
    *(_OWORD *)(v614 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v614 + 32) = v511;
    v615 = v511;
    specialized Properties.subscript.setter(v614);
    v616 = swift_getKeyPath();
    __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter();
    v617 = v909;
    v618 = v804;
    v619 = v910;
    (*(void (**)(char *, char *, uint64_t))(v909 + 16))(v804, v613, v910);
    v620 = (*(uint64_t (**)(char *, uint64_t))(v617 + 88))(v618, v619);
    if (v620 == *MEMORY[0x24BDE6D98] || v620 == *MEMORY[0x24BDE6DA0] || v620 == *MEMORY[0x24BDE6D90])
    {
      (*(void (**)(char *, uint64_t))(v909 + 8))(v613, v910);
      if (String.count.getter() < 1)
      {
        swift_bridgeObjectRelease();
        v641 = (id)RIOPxrTfTokenEmpty();
      }
      else
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        v641 = (id)RIOPxrTfTokenCreateWithCString();
        swift_release();
      }
      specialized Properties.subscript.setter(v641, v616, 0, 0);
      v642 = swift_getKeyPath();
      __RKEntityStartAnimateActionArguments.clipStart.getter();
      specialized Properties.subscript.setter(v643, 0, v642, 0, 0);
      v644 = swift_getKeyPath();
      __RKEntityStartAnimateActionArguments.clipDuration.getter();
      specialized Properties.subscript.setter(v645, 0, v644, 0, 0);
      v646 = swift_getKeyPath();
      v647 = __RKEntityStartAnimateActionArguments.clipReversed.getter();
      specialized Properties.subscript.setter(v647 & 1, v646, 0, 0);
      v648 = swift_getKeyPath();
      __RKEntityStartAnimateActionArguments.animationSpeed.getter();
      specialized Properties.subscript.setter(COERCE__INT64(v649), 0, v648, 0, 0);
      v650 = swift_getKeyPath();
      v651 = __RKEntityStartAnimateActionArguments.clipReverses.getter();
      specialized Properties.subscript.setter(v651 & 1, v650, 0, 0);

      outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<StartAnimationSchema>);
      (*(void (**)(char *, uint64_t))(v514 + 8))(v442, started);
      return;
    }
LABEL_336:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  v341 = &v954;
  if ((_DWORD)v197 == *MEMORY[0x24BDE69E0])
  {
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v221 = v835;
    v471 = (*(uint64_t (**)(char *, char *, uint64_t))(v844 + 32))(v845, v185, v835);
    v472 = (uint64_t)v828;
    MEMORY[0x22E2F49B4](v471);
    if (*(_QWORD *)(v934 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v472);
      if ((v473 & 1) != 0)
      {
        v474 = *(uint64_t (***)(char *, char *, uint64_t))(v927 + 8);
        swift_retain();
        v930 = v474;
        ((void (*)(uint64_t, uint64_t))v474)(v472, v928);
        v936 = RIOPxrUsdObjectCopyPath();
        swift_release();
        v475 = (id)v932;
        v476 = (void *)RIOPxrSdfPathCopyString();
        v477 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v479 = v478;
        *(_QWORD *)&v937.f64[0] = v475;

        v946 = v477;
        v947 = v479;
        v940 = 47;
        v941 = 0xE100000000000000;
        v944 = 95;
        v945 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v480 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v482 = v481;
        swift_bridgeObjectRelease();
        v946 = 47;
        v947 = 0xE100000000000000;
        v483._countAndFlagsBits = v480;
        v483._object = v482;
        String.append(_:)(v483);
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        v484 = (void *)RIOPxrSdfPathCreateFromCString();
        swift_release();
        v485 = (id)RIOPxrTfTokenEmpty();
        v486 = RIOPxrUsdStageCreatePrimIfNeeded();
        v377 = swift_allocObject();
        *(_QWORD *)(v377 + 16) = v486;

        if (String.count.getter() < 1)
          v487 = (id)RIOPxrTfTokenEmpty();
        else
          v487 = (id)RIOPxrTfTokenCreateWithCString();
        v604 = v487;
        RIOPxrUsdPrimSetTypeName();

        v378 = (unint64_t)&type metadata for Schema;
        v949 = &protocol witness table for Schema;
        v948 = &type metadata for Schema;
        v946 = v377;
        v944 = MEMORY[0x24BEE4AF8];
        swift_retain();
        v605 = __RKEntityTransformActionArguments.location.getter();
        if ((v609 & 1) != 0)
        {
LABEL_251:
          v659 = __RKEntityTransformActionArguments.orientation.getter();
          if ((v662 & 1) == 0)
          {
            v663 = v660;
            *(_QWORD *)&v661 = v659;
            v933 = v661;
            LODWORD(v661) = v659;
            v932 = v661;
            v664 = swift_getKeyPath();
            v341[9] = vcvtq_f64_f32((float32x2_t)__PAIR64__(DWORD1(v933), v932));
            v341[10] = vcvtq_f64_f32(v663);
            v964[32] = 0;
            specialized Properties.subscript.setter((uint64_t)v964, v664, 0, 0);
            if (String.count.getter() < 1)
              v665 = (id)RIOPxrTfTokenEmpty();
            else
              v665 = (id)RIOPxrTfTokenCreateWithCString();
            v666 = (uint64_t)v665;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v668 = *(_QWORD *)(v944 + 16);
            v667 = *(_QWORD *)(v944 + 24);
            if (v668 >= v667 >> 1)
              v944 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v667 > 1), v668 + 1, 1, (_QWORD *)v944);
            v669 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v668, v666);
            destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v669);
          }
          v670 = __RKEntityTransformActionArguments.scale.getter();
          if ((v670 & 0x100000000) == 0)
          {
            v671 = *(float *)&v670;
            v672 = swift_getKeyPath();
            *(double *)v962 = v671;
            *(double *)&v962[1] = v671;
            *(double *)&v962[2] = v671;
            v962[3] = 0;
            v963 = 0;
            specialized Properties.subscript.setter((uint64_t)v962, v672, 0, 0);
            if (String.count.getter() < 1)
              v673 = (id)RIOPxrTfTokenEmpty();
            else
              v673 = (id)RIOPxrTfTokenCreateWithCString();
            v674 = (uint64_t)v673;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v676 = *(_QWORD *)(v944 + 16);
            v675 = *(_QWORD *)(v944 + 24);
            if (v676 >= v675 >> 1)
              v944 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v675 > 1), v676 + 1, 1, (_QWORD *)v944);
            v677 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v676, v674);
            destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v677);
          }
          swift_getKeyPath();
          v678 = swift_bridgeObjectRetain();
          specialized Properties.subscript.setter(v678);
          v943 = &protocol witness table for Schema;
          v942 = v378;
          v940 = v931;
          v679 = swift_getKeyPath();
          swift_retain();
          if (String.count.getter() < 1)
            v680 = (id)RIOPxrTfTokenEmpty();
          else
            v680 = (id)RIOPxrTfTokenCreateWithCString();
          specialized Properties.subscript.setter(v680, v679, 0, 0);
          swift_getKeyPath();
          *(_QWORD *)&v933 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
          v681 = swift_allocObject();
          v932 = xmmword_22BD0C360;
          *(_OWORD *)(v681 + 16) = xmmword_22BD0C360;
          v682 = (void *)v936;
          *(_QWORD *)(v681 + 32) = v936;
          v683 = v682;
          specialized Properties.subscript.setter(v681);
          v684 = swift_getKeyPath();
          v685 = __RKEntityTransformActionArguments.duration.getter();
          v686 = BYTE4(v685) & 1;
          if ((v685 & 0x100000000) != 0)
            v687 = 0.0;
          else
            v687 = *(float *)&v685;
          specialized Properties.subscript.setter(*(uint64_t *)&v687, v686, v684, 0, 0);
          v688 = swift_getKeyPath();
          v689 = (uint64_t)v816;
          __RKEntityTransformActionArguments.moveType.getter();
          v690 = v806;
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v689, v806, &demangling cache variable for type metadata for __RKEntityMoveSelection?);
          v691 = v808;
          v692 = v817;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v808 + 48))(v690, 1, v817) == 1)
          {
            v693 = 0;
          }
          else
          {
            v936 = v377;
            v694 = v683;
            v695 = v794;
            (*(void (**)(char *, uint64_t, uint64_t))(v691 + 32))(v794, v690, v692);
            v696 = *(void (**)(char *, char *, uint64_t))(v691 + 16);
            v697 = v807;
            v696(v807, v695, v692);
            v698 = v793;
            v696(v793, v697, v692);
            v699 = (*(uint64_t (**)(char *, uint64_t))(v691 + 88))(v698, v692);
            if (v699 != *MEMORY[0x24BDE67B8] && v699 != *MEMORY[0x24BDE67C0])
              goto LABEL_335;
            v700 = *(void (**)(char *, uint64_t))(v691 + 8);
            v700(v807, v692);
            v683 = v694;
            if (String.count.getter() < 1)
            {
              swift_bridgeObjectRelease();
              v693 = (id)RIOPxrTfTokenEmpty();
            }
            else
            {
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              v693 = (id)RIOPxrTfTokenCreateWithCString();
              swift_release();
            }
            v700(v695, v817);
            v689 = (uint64_t)v816;
          }
          outlined destroy of Any?(v689, &demangling cache variable for type metadata for __RKEntityMoveSelection?);
          swift_bridgeObjectRelease();
          specialized Properties.subscript.setter(v693, v688, 0, 0);
          v701 = (uint64_t)v809;
          v702 = v845;
          __RKEntityTransformActionArguments.ease.getter();
          v703 = (uint64_t)v810;
          __RKEntityTransformActionArguments.easeType.getter();
          v704 = v938;
          setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(v701, v703, v931, *(void **)&v937.f64[0], (uint64_t)v935);
          v938 = v704;
          if (v704)
          {

            swift_release();
            swift_release();
            outlined destroy of Any?(v703, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
            outlined destroy of Any?(v701, &demangling cache variable for type metadata for __RKEntityMoveEase?);
            outlined destroy of Any?((uint64_t)&v940, &demangling cache variable for type metadata for Properties<TransformActionSchema>);
            outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<Xformable>);
            (*(void (**)(char *, uint64_t))(v844 + 8))(v702, v835);
          }
          else
          {
            outlined destroy of Any?(v703, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
            outlined destroy of Any?(v701, &demangling cache variable for type metadata for __RKEntityMoveEase?);
            v705 = (uint64_t)v788;
            __RKEntityTransformActionArguments.relativeToEntity.getter();
            v706 = v927;
            v707 = v928;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v927 + 48))(v705, 1, v928) == 1)
            {
              outlined destroy of Any?(v705, &demangling cache variable for type metadata for UUID?);
            }
            else
            {
              v708 = *(void (**)(char *, uint64_t, uint64_t))(v706 + 32);
              v709 = (uint64_t)v787;
              v708(v787, v705, v707);
              if (specialized Dictionary.subscript.getter(v709, v934))
              {
                v710 = (void *)RIOPxrUsdObjectCopyPath();
                swift_release();
                v711 = swift_getKeyPath();
                v712 = v710;
                v713 = (void *)RIOPxrSdfPathCopyString();
                static String._unconditionallyBridgeFromObjectiveC(_:)();

                if (String.count.getter() <= 0)
                {
                  swift_bridgeObjectRelease();
                  v714 = (id)RIOPxrTfTokenEmpty();
                }
                else
                {
                  String.utf8CString.getter();
                  swift_bridgeObjectRelease();
                  v714 = (id)RIOPxrTfTokenCreateWithCString();
                  swift_release();
                }
                specialized Properties.subscript.setter(v714, v711, 0, 0);

              }
              ((void (*)(char *, uint64_t))v930)(v787, v928);
            }
            swift_getKeyPath();
            v745 = swift_allocObject();
            *(_OWORD *)(v745 + 16) = v932;
            swift_retain();
            *(_QWORD *)(v745 + 32) = RIOPxrUsdObjectCopyPath();
            swift_release();
            specialized Properties.subscript.setter(v745);

            swift_release();
            outlined destroy of Any?((uint64_t)&v940, &demangling cache variable for type metadata for Properties<TransformActionSchema>);
            outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<Xformable>);
            (*(void (**)(char *, uint64_t))(v844 + 8))(v845, v835);
          }
          return;
        }
        *(_QWORD *)&v607 = v605;
        v933 = v607;
        LODWORD(v608) = v605;
        v932 = v608;
        v610 = COERCE_FLOAT(vdupq_n_s64(v606).i32[2]);
        v611 = swift_getKeyPath();
        v965 = vcvtq_f64_f32((float32x2_t)__PAIR64__(DWORD1(v933), v932));
        v966 = v610;
        v967 = 0;
        v968 = 0;
        specialized Properties.subscript.setter((uint64_t)&v965, v611, 0, 0);
        if (String.count.getter() < 1)
          v612 = (id)RIOPxrTfTokenEmpty();
        else
          v612 = (id)RIOPxrTfTokenCreateWithCString();
        v381 = (int64_t)v612;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v382 = (_QWORD *)v944;
        v276 = *(_QWORD *)(v944 + 16);
        v383 = *(_QWORD *)(v944 + 24);
        if (v276 < v383 >> 1)
        {
LABEL_250:
          v658 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v276, v381);
          destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v658);
          goto LABEL_251;
        }
LABEL_328:
        v944 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v383 > 1), v276 + 1, 1, v382);
        goto LABEL_250;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v472, v928);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v531 = swift_allocError();
    v533 = v532;
    v534 = (char *)v532
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v535 = (void *)v932;
    *v533 = v932;
    v929(v534, v935, *(_QWORD *)&v937.f64[0]);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v536 = v535;
    v537 = v845;
    MEMORY[0x22E2F49B4](v536);
    swift_storeEnumTagMultiPayload();
    v938 = v531;
    swift_willThrow();
    swift_release();
    v538 = v844;
LABEL_173:
    v224 = *(uint64_t (**)(char *, char *, uint64_t))(v538 + 8);
    v225 = v537;
    goto LABEL_16;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE69B0])
  {
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v517 = v818;
    v516 = v819;
    v518 = v185;
    v519 = v820;
    (*(void (**)(char *, char *, uint64_t))(v819 + 32))(v818, v518, v820);
    v949 = &protocol witness table for Schema;
    v948 = &type metadata for Schema;
    v946 = v191;
    v520 = swift_getKeyPath();
    swift_retain();
    if (String.count.getter() < 1)
      v521 = (id)RIOPxrTfTokenEmpty();
    else
      v521 = (id)RIOPxrTfTokenCreateWithCString();
    specialized Properties.subscript.setter(v521, v520, 0, 0);
    v592 = swift_getKeyPath();
    __RKWaitActionArguments.duration.getter();
    specialized Properties.subscript.setter(COERCE__INT64(v593), 0, v592, 0, 0);
    outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<WaitActionSchema>);
    (*(void (**)(char *, uint64_t))(v516 + 8))(v517, v519);
    return;
  }
  if ((_DWORD)v197 == *MEMORY[0x24BDE6978])
  {
    v544 = v937.f64[0];
    (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
    v212 = v801;
    v545 = (*(uint64_t (**)(char *, char *, uint64_t))(v821 + 32))(v822, v185, v801);
    v546 = (uint64_t)v799;
    MEMORY[0x22E2F4A38](v545);
    v547 = v934;
    if (*(_QWORD *)(v934 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v546), (v548 & 1) != 0))
    {
      v549 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
      swift_retain();
      v549(v546, v928);
      v550 = (void *)RIOPxrUsdObjectCopyPath();
      v551 = swift_release();
      v552 = (uint64_t)v786;
      MEMORY[0x22E2F4A38](v551);
      if (*(_QWORD *)(v547 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v552);
        if ((v553 & 1) != 0)
        {
          swift_retain();
          v549(v552, v928);
          v554 = (void *)RIOPxrUsdObjectCopyPath();
          swift_release();
          v949 = &protocol witness table for Schema;
          v948 = &type metadata for Schema;
          v946 = v931;
          v555 = swift_getKeyPath();
          swift_retain();
          if (String.count.getter() < 1)
            v556 = (id)RIOPxrTfTokenEmpty();
          else
            v556 = (id)RIOPxrTfTokenCreateWithCString();
          specialized Properties.subscript.setter(v556, v555, 0, 0);
          swift_getKeyPath();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
          v746 = swift_allocObject();
          *(_OWORD *)(v746 + 16) = xmmword_22BD0C360;
          *(_QWORD *)(v746 + 32) = v550;
          v747 = v550;
          specialized Properties.subscript.setter(v746);
          v748 = swift_getKeyPath();
          v749 = __RKEntityOrbitEntityActionArguments.orientToPath.getter();
          specialized Properties.subscript.setter(v749, v748, 0, 0);
          v750 = swift_getKeyPath();
          v751 = v554;
          v752 = (void *)RIOPxrSdfPathCopyString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          if (String.count.getter() < 1)
          {
            swift_bridgeObjectRelease();
            v753 = (id)RIOPxrTfTokenEmpty();
          }
          else
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            v753 = (id)RIOPxrTfTokenCreateWithCString();
            swift_release();
          }
          specialized Properties.subscript.setter(v753, v750, 0, 0);
          v754 = swift_getKeyPath();
          v755 = __RKEntityOrbitEntityActionArguments.duration.getter();
          v756 = BYTE4(v755) & 1;
          if ((v755 & 0x100000000) != 0)
            v757 = 0.0;
          else
            v757 = *(float *)&v755;
          specialized Properties.subscript.setter(*(uint64_t *)&v757, v756, v754, 0, 0);
          v758 = swift_getKeyPath();
          v759 = __RKEntityOrbitEntityActionArguments.rotations.getter();
          v760 = BYTE4(v759) & 1;
          if ((v759 & 0x100000000) != 0)
            v761 = 0.0;
          else
            v761 = *(float *)&v759;
          specialized Properties.subscript.setter(*(uint64_t *)&v761, v760, v758, 0, 0);
          v762 = v784;
          __RKEntityOrbitEntityActionArguments.spinDirection.getter();
          v763 = __RKEntityOrbitEntityActionArguments.orbitalAxis.getter();
          v765 = v938;
          setRotationAxis #1 (direction:axis:on:) in Stage.setAction(action:at:mapping:)(v762, v763, v766, v764 & 1, v931, (void *)v932, (uint64_t)v935);
          v938 = v765;

          if (v765)
            swift_release();
          outlined destroy of Any?(v784, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
          outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<OrbitActionSchema>);
          (*(void (**)(char *, uint64_t))(v821 + 8))(v822, v801);
          return;
        }
      }
      v549(v552, v928);

    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v546, v928);
    }
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v715 = swift_allocError();
    v717 = v716;
    v718 = (char *)v716
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v719 = (void *)v932;
    *v717 = v932;
    v929(v718, v935, *(_QWORD *)&v544);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v720 = v719;
    v240 = v822;
    MEMORY[0x22E2F4A38](v720);
    swift_storeEnumTagMultiPayload();
    v938 = v715;
    swift_willThrow();
    swift_release();
    v241 = v821;
    goto LABEL_39;
  }
  if ((_DWORD)v197 != *MEMORY[0x24BDE6980])
    goto LABEL_217;
  (*(void (**)(char *, _QWORD))(v195 + 96))(v185, *(_QWORD *)&v937.f64[0]);
  v221 = v795;
  v584 = (*(uint64_t (**)(char *, char *, uint64_t))(v800 + 32))(v811, v185, v795);
  v585 = (uint64_t)v789;
  MEMORY[0x22E2F4A74](v584);
  if (!*(_QWORD *)(v934 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v585), (v586 & 1) == 0))
  {
    (*(void (**)(uint64_t, uint64_t))(v927 + 8))(v585, v928);
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v635 = swift_allocError();
    v637 = v636;
    v638 = (char *)v636
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID))
                  + 48);
    v639 = (void *)v932;
    *v637 = v932;
    v929(v638, v935, *(_QWORD *)&v937.f64[0]);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v640 = v639;
    v537 = v811;
    MEMORY[0x22E2F4A74](v640);
    swift_storeEnumTagMultiPayload();
    v938 = v635;
    swift_willThrow();
    swift_release();
    v538 = v800;
    goto LABEL_173;
  }
  v587 = *(void (**)(uint64_t, uint64_t))(v927 + 8);
  swift_retain();
  v587(v585, v928);
  v588 = (void *)RIOPxrUsdObjectCopyPath();
  swift_release();
  v949 = &protocol witness table for Schema;
  v948 = &type metadata for Schema;
  v946 = v931;
  v589 = swift_getKeyPath();
  swift_retain();
  if (String.count.getter() < 1)
    v590 = (id)RIOPxrTfTokenEmpty();
  else
    v590 = (id)RIOPxrTfTokenCreateWithCString();
  specialized Properties.subscript.setter(v590, v589, 0, 0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  v728 = swift_allocObject();
  *(_OWORD *)(v728 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v728 + 32) = v588;
  v729 = v588;
  specialized Properties.subscript.setter(v728);
  v730 = swift_getKeyPath();
  v731 = __RKEntityLookAtCameraActionArguments.duration.getter();
  v732 = BYTE4(v731) & 1;
  if ((v731 & 0x100000000) != 0)
    v733 = 0.0;
  else
    v733 = *(float *)&v731;
  specialized Properties.subscript.setter(*(uint64_t *)&v733, v732, v730, 0, 0);
  v734 = swift_getKeyPath();
  v735 = __RKEntityLookAtCameraActionArguments.direction.getter();
  v937 = 0u;
  v738 = 0.0;
  v739 = 0.0;
  v740 = 0uLL;
  if ((v737 & 1) == 0)
  {
    v740 = vcvtq_f64_f32((float32x2_t)v735);
    v739 = v736;
  }
  v958 = v740;
  v959 = v739;
  v960 = 0;
  v961 = v737 & 1;
  specialized Properties.subscript.setter((uint64_t)&v958, v734, 0, 0);
  v741 = swift_getKeyPath();
  v742 = __RKEntityLookAtCameraActionArguments.upVector.getter();
  if ((v744 & 1) == 0)
  {
    v937 = vcvtq_f64_f32((float32x2_t)v742);
    v738 = v743;
  }
  v954 = v937;
  v955 = v738;
  v956 = 0;
  v957 = v744 & 1;
  specialized Properties.subscript.setter((uint64_t)&v954, v741, 0, 0);

  outlined destroy of Any?((uint64_t)&v946, &demangling cache variable for type metadata for Properties<LookAtCameraActionSchema>);
  (*(void (**)(char *, uint64_t))(v800 + 8))(v811, v795);
}

void specialized Properties.subscript.setter(uint64_t a1, char a2)
{
  id v4;
  void *Int32;
  uint64_t Attribute;
  void *v7;
  void *v8;
  int v9;

  swift_getAtKeyPath();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  Int32 = (void *)RIOPxrSdfValueTypeNameCreateInt32();
  Attribute = RIOPxrUsdPrimCreateAttribute();
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v7 = (void *)Attribute;
  v8 = (void *)RIOPxrVtValueCreateWithInt32();
  v9 = RIOPxrUsdAttributeSetValue();

  if (v9)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }

}

uint64_t specialized Properties.subscript.setter(uint64_t a1)
{
  id v2;
  void *TokenArray;
  void *Attribute;
  Class isa;
  void *v6;
  int v7;
  _QWORD *v8;

  swift_getAtKeyPath();
  if (a1)
  {
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 0)
    {
      swift_bridgeObjectRelease();
      v2 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v2 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    TokenArray = (void *)RIOPxrSdfValueTypeNameCreateTokenArray();
    Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_n(a1);
    type metadata accessor for RIOPxrTfTokenRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = (void *)RIOPxrVtValueCreateWithTokenArray();

    v7 = RIOPxrUsdAttributeSetValue();
    if (v7)
    {

      swift_bridgeObjectRelease();
      swift_release();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attribute<[ToolsFoundations.Token]>);
      v8 = (_QWORD *)swift_allocObject();
      v8[2] = Attribute;
    }
    else
    {
      v8 = (_QWORD *)RIOPxrUsdAttributeCopyTypeName();

      swift_bridgeObjectRelease();
      swift_release();

    }
    outlined consume of Result<AnyAttribute, Object.Error>(v8, v7 ^ 1);
  }
  else
  {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in Stage.setTrigger(trigger:at:mapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  if (*(_QWORD *)(a2 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v13 & 1) != 0))
  {
    *a6 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v12);
    return swift_retain();
  }
  else
  {
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    v15 = swift_allocError();
    v17 = v16;
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    v19 = (char *)v17 + *(int *)(v18 + 48);
    v20 = (char *)v17 + *(int *)(v18 + 64);
    *v17 = a3;
    v21 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, a4, v21);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, a1, v22);
    swift_storeEnumTagMultiPayload();
    v23 = a3;
    result = swift_willThrow();
    *a5 = v15;
  }
  return result;
}

void Stage.makeParentPrim(from:baseName:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = (void *)*a1;
  SceneDescriptionFoundations.Path.deletingLastPathComponent()((uint64_t *)&v13);
  v7 = v13;
  SceneDescriptionFoundations.Path.appendingPathComponent(_:)(a2, a3, (uint64_t *)&v15);
  v8 = v15;
  if (RIOPxrUsdStageHasPrimAtPrimPath())
  {
    v12 = a4;
    v9 = 0;
    while (!__OFADD__(v9, 1))
    {
      v13 = (void *)a2;
      v14 = a3;
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = 95;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      SceneDescriptionFoundations.Path.appendingPathComponent(_:)((uint64_t)v13, v14, (uint64_t *)&v13);

      swift_bridgeObjectRelease();
      v8 = v13;
      ++v9;
      if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) == 0)
      {

        a4 = v12;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {

LABEL_7:
    *a4 = v8;
  }
}

void setRotationAxis #1 (direction:axis:on:) in Stage.setAction(action:at:mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  int v20;
  float64x2_t v21;
  id v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  id v30;
  unint64_t v31;
  void *Double3;
  void *Attribute;
  void *v34;
  char v35;
  void *v36;
  float64x2_t v37;
  __int128 v38;
  float64x2_t v39;
  __int128 v40;
  uint64_t v41;

  v41 = a5;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v15, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  v16 = type metadata accessor for __RKEntitySpinDirectionType();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  *(_QWORD *)&v19 = 1.0;
  if (v18 != 1)
  {
    v20 = (*(uint64_t (**)(char *, uint64_t, double))(v17 + 88))(v15, v16, 1.0);
    if (v20 != *MEMORY[0x24BDE6930])
    {
      *(_QWORD *)&v19 = -1.0;
      if (v20 == *MEMORY[0x24BDE6928])
        goto LABEL_6;
      (*(void (**)(char *, uint64_t, double))(v17 + 8))(v15, v16, -1.0);
    }
    *(_QWORD *)&v19 = 1.0;
  }
LABEL_6:
  if ((a4 & 1) != 0)
  {
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    swift_allocError();
    v24 = v23;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
    v26 = (char *)v24 + *(int *)(v25 + 48);
    *v24 = a6;
    v27 = type metadata accessor for __RKEntityActionSpecification();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, a7, v27);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v28 = (_QWORD *)((char *)v24 + *(int *)(v25 + 64));
    *v28 = 1936291937;
    v28[1] = 0xE400000000000000;
    swift_storeEnumTagMultiPayload();
    v29 = a6;
    swift_willThrow();
  }
  else
  {
    v38 = v19;
    *(_QWORD *)&v21.f64[0] = a2;
    *(_QWORD *)&v21.f64[1] = a3;
    v37 = v21;
    if (String.count.getter() < 1)
      v22 = (id)RIOPxrTfTokenEmpty();
    else
      v22 = (id)RIOPxrTfTokenCreateWithCString();
    v30 = v22;
    *(double *)&v31 = *(double *)&v38 * *(float *)&v37.f64[1];
    v37 = vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(HIDWORD(v37.f64[0]), a2)), *(double *)&v38);
    v38 = v31;
    Double3 = (void *)RIOPxrSdfValueTypeNameCreateDouble3();
    Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
    v39 = v37;
    v40 = v38;
    v34 = (void *)RIOPxrVtValueCreateWithDouble3();
    v35 = RIOPxrUsdAttributeSetValue();

    if ((v35 & 1) != 0)
    {
      v36 = Attribute;
      Attribute = v30;
    }
    else
    {

      v36 = v30;
    }

  }
}

void setEaseType #1 (ease:easeType:on:) in Stage.setAction(action:at:mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  id v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  int v38;
  void *v39;
  void (*v40)(char *, uint64_t);
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *Token;
  void *Attribute;
  void *v47;
  char v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;

  v52 = a5;
  v54 = a4;
  v55 = a3;
  v7 = type metadata accessor for __RKEntityMoveEaseType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v50 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v51 = (char *)&v50 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v50 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v23, &demangling cache variable for type metadata for __RKEntityMoveEase?);
  v24 = type metadata accessor for __RKEntityMoveEase();
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24);
  outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for __RKEntityMoveEase?);
  if ((_DWORD)a1 != 1)
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a2, (uint64_t)v20, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7);
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
    if (v25 == 1)
    {
      if (String.count.getter() >= 1)
      {
        v26 = (id)RIOPxrTfTokenCreateWithCString();
LABEL_16:
        v41 = v26;
        goto LABEL_17;
      }
      v39 = (void *)RIOPxrTfTokenEmpty();
LABEL_15:
      v26 = v39;
      goto LABEL_16;
    }
  }
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a2, (uint64_t)v17, &demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7) == 1)
  {
    type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
    swift_allocError();
    v28 = v27;
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
    v30 = (char *)v28 + *(int *)(v29 + 48);
    v31 = v54;
    *v28 = v54;
    v32 = type metadata accessor for __RKEntityActionSpecification();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v52, v32);
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    swift_storeEnumTagMultiPayload();
    v33 = (_QWORD *)((char *)v28 + *(int *)(v29 + 64));
    *v33 = 0x6570795465736165;
    v33[1] = 0xE800000000000000;
    swift_storeEnumTagMultiPayload();
    v34 = v31;
    swift_willThrow();
    return;
  }
  v35 = v51;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v51, v17, v7);
  v36 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v37 = v53;
  v36(v53, v35, v7);
  v36(v10, v37, v7);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v38 != *MEMORY[0x24BDE66F0] && v38 != *MEMORY[0x24BDE66F8] && v38 != *MEMORY[0x24BDE66E8])
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  v40 = *(void (**)(char *, uint64_t))(v8 + 8);
  v40(v37, v7);
  v40(v35, v7);
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    v39 = (void *)RIOPxrTfTokenEmpty();
    goto LABEL_15;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v41 = (void *)RIOPxrTfTokenCreateWithCString();
  swift_release();
LABEL_17:
  v42 = v41;
  if (String.count.getter() < 1)
    v43 = (id)RIOPxrTfTokenEmpty();
  else
    v43 = (id)RIOPxrTfTokenCreateWithCString();
  v44 = v43;
  Token = (void *)RIOPxrSdfValueTypeNameCreateToken();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v47 = (void *)RIOPxrVtValueCreateWithToken();
  v48 = RIOPxrUsdAttributeSetValue();

  if ((v48 & 1) != 0)
  {
    v49 = Attribute;
    Attribute = v42;
  }
  else
  {

    v49 = v44;
    v44 = v42;
  }

}

uint64_t key path setter for Xformable.xformTranslateOp : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 24);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

uint64_t key path setter for Xformable.xformOrientOp : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

uint64_t key path setter for Xformable.xformScaleOp : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 72);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

uint64_t key path setter for Xformable.xformOpOrder : Xformable(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  v8[0] = v3;
  v8[1] = v2;
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 96);
  swift_bridgeObjectRetain();
  return v6(v8, v4, v5);
}

_QWORD *key path getter for BehaviorSchema.triggers : BehaviorSchema@<X0>(_QWORD *a1@<X0>, _QWORD *(*a2)(_QWORD *__return_ptr, uint64_t, uint64_t)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[2];

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  result = a2(v9, v5, v6);
  v8 = v9[1];
  *a3 = v9[0];
  a3[1] = v8;
  return result;
}

uint64_t key path setter for BehaviorSchema.triggers : BehaviorSchema(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v7 = *a1;
  v6 = a1[1];
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v8);
  v11[0] = v7;
  v11[1] = v6;
  swift_bridgeObjectRetain();
  return a5(v11, v8, v9);
}

uint64_t SceneDescriptionFoundations.Path.lastPathComponent.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  _QWORD v11[2];

  v1 = *v0;
  v2 = (void *)RIOPxrSdfPathCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v11[0] = 47;
  v11[1] = 0xE100000000000000;
  v10[2] = v11;
  swift_bridgeObjectRetain();
  v6 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v10, v3, v5);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 32 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Substring>);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE2180], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

void specialized Properties.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v6;
  id v7;
  void *Token;
  void *Attribute;
  void *v10;
  int v11;

  swift_getAtKeyPath();
  if (!a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  v6 = a1;
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v7 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2)
      goto LABEL_4;
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2)
    goto LABEL_10;
LABEL_4:
  Token = (void *)RIOPxrSdfValueTypeNameCreateToken();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v10 = (void *)RIOPxrVtValueCreateWithToken();
  v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }

}

{
  id v6;
  id v7;
  void *AssetPath;
  void *Attribute;
  void *v10;
  int v11;

  swift_getAtKeyPath();
  if (!a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  v6 = a1;
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v7 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2)
      goto LABEL_4;
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2)
    goto LABEL_10;
LABEL_4:
  AssetPath = (void *)RIOPxrSdfValueTypeNameCreateAssetPath();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v10 = (void *)RIOPxrVtValueCreateWithAssetPath();
  v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }

}

void specialized Properties.subscript.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v7;
  void *Double;
  void *Attribute;
  void *v10;
  int v11;

  swift_getAtKeyPath();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v7 = (id)RIOPxrTfTokenEmpty();
    if (a5 <= 2)
      goto LABEL_4;
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a5 > 2)
    goto LABEL_10;
LABEL_4:
  Double = (void *)RIOPxrSdfValueTypeNameCreateDouble();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v10 = (void *)RIOPxrVtValueCreateWithDouble();
  v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }

}

void specialized Properties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v7;
  void *String;
  void *Attribute;
  void *v10;
  int v11;

  swift_getAtKeyPath();
  if (!a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v7 = (id)RIOPxrTfTokenEmpty();
    if (a5 <= 2)
      goto LABEL_4;
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v7 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a5 > 2)
    goto LABEL_10;
LABEL_4:
  String = (void *)RIOPxrSdfValueTypeNameCreateString();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  String.utf8CString.getter();
  v10 = (void *)RIOPxrVtValueCreateWithCString();
  swift_release();
  v11 = RIOPxrUsdAttributeSetValue();

  if (v11)
  {

    swift_bridgeObjectRelease_n();
    swift_release();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release();

  }
}

void specialized Properties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v6;
  void *Quatd;
  void *Attribute;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v11, &demangling cache variable for type metadata for simd_quatd?);
  swift_getAtKeyPath();
  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v12, &demangling cache variable for type metadata for simd_quatd?);
  if ((v13 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v6 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v6 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2)
    goto LABEL_10;
LABEL_5:
  Quatd = (void *)RIOPxrSdfValueTypeNameCreateQuatd();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v9 = (void *)RIOPxrVtValueCreateWithQuatd();
  v10 = RIOPxrUsdAttributeSetValue();

  if (v10)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }

}

{
  id v6;
  void *Double3;
  void *Attribute;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v11, &demangling cache variable for type metadata for SIMD3<Double>?);
  swift_getAtKeyPath();
  outlined init with take of (URL, __REAsset)(a1, (uint64_t)&v12, &demangling cache variable for type metadata for SIMD3<Double>?);
  if ((v13 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v6 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v6 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2)
    goto LABEL_10;
LABEL_5:
  Double3 = (void *)RIOPxrSdfValueTypeNameCreateDouble3();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v9 = (void *)RIOPxrVtValueCreateWithDouble3();
  v10 = RIOPxrUsdAttributeSetValue();

  if (v10)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }

}

void specialized Properties.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v5;
  id v6;
  void *Bool;
  void *Attribute;
  void *v9;
  int v10;

  v5 = a1;
  swift_getAtKeyPath();
  if (v5 == 2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v6 = (id)RIOPxrTfTokenEmpty();
    if (a4 <= 2)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    return;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v6 = (id)RIOPxrTfTokenCreateWithCString();
  swift_release();
  if (a4 > 2)
    goto LABEL_10;
LABEL_5:
  Bool = (void *)RIOPxrSdfValueTypeNameCreateBool();
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v9 = (void *)RIOPxrVtValueCreateWithBool();
  v10 = RIOPxrUsdAttributeSetValue();

  if (v10)
  {

    swift_release();
  }
  else
  {

    swift_release();
  }

}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  _QWORD v36[2];
  unint64_t v37;

  if (a1 < 0)
    goto LABEL_46;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v25 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v25 = 11;
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v25 | (v11 << 16), v34, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease();
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_41:
    swift_release();
    return (uint64_t)v14;
  }
  v31 = a1;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v30 = v13 | (v12 << 16);
  v37 = 4 * v12;
  v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v15 = 15;
  v16 = 15;
  v32 = 15;
  while (1)
  {
    v36[0] = String.subscript.getter();
    v36[1] = v17;
    v18 = a3(v36);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v14;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v15 = String.index(after:)();
LABEL_11:
    if (v37 == v15 >> 14)
      goto LABEL_32;
  }
  v20 = v15 >> 14;
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    v15 = String.index(after:)();
    *(_QWORD *)(v34 + 16) = v15;
    v16 = v15;
    v32 = v15;
    goto LABEL_11;
  }
  if (v20 < v16 >> 14)
    goto LABEL_45;
  if (v37 < v20)
  {
    __break(1u);
LABEL_44:
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
LABEL_37:
    v27 = v14[2];
    v26 = v14[3];
    if (v27 >= v26 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v14);
    v14[2] = v27 + 1;
    v28 = &v14[4 * v27];
    v28[4] = v19;
    v28[5] = v30;
    v28[6] = a5;
    v28[7] = a6;
    *(_QWORD *)(v15 + 16) = v14;
LABEL_40:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  v22 = v14[2];
  v21 = v14[3];
  if (v22 >= v21 >> 1)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v14);
  v14[2] = v22 + 1;
  v23 = &v14[4 * v22];
  v23[4] = v16;
  v23[5] = v15;
  v23[6] = a5;
  v23[7] = a6;
  *(_QWORD *)(v10 + 16) = v14;
  v24 = String.index(after:)();
  v15 = v24;
  *(_QWORD *)(v34 + 16) = v24;
  if (v14[2] != v31)
  {
    v16 = v24;
    v32 = v24;
    goto LABEL_11;
  }
  v32 = v24;
  v16 = v24;
LABEL_32:
  if (v37 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  v15 = v10;
  v19 = v32;
  if (v37 >= v32 >> 14)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_44;
    goto LABEL_37;
  }
LABEL_45:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_46:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = a1 >> 14;
  v11 = (v9 >> 14 == a1 >> 14) & a3;
  if (v11 == 1)
    return v11 ^ 1u;
  if (v10 >= v9 >> 14)
  {
    v14 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) == 0)
      v14 = a5 & 0xFFFFFFFFFFFFLL;
    if (v10 > 4 * v14)
    {
      __break(1u);
    }
    else
    {
      v7 = a4;
      v6 = a1;
      v8 = *(_QWORD **)(a4 + 16);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v7 + 16) = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_7:
        v17 = v8[2];
        v16 = v8[3];
        if (v17 >= v16 >> 1)
        {
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v8);
          *(_QWORD *)(v7 + 16) = v8;
        }
        v8[2] = v17 + 1;
        v18 = &v8[4 * v17];
        v18[4] = v9;
        v18[5] = v6;
        v18[6] = a5;
        v18[7] = a6;
        return v11 ^ 1u;
      }
    }
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *(_QWORD *)(v7 + 16) = v8;
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  return result;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 2 * a2;
  type metadata accessor for __RKEntityActionSpecification();
  return a1;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

BOOL specialized Array._hoistableIsNativeTypeChecked()(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

_QWORD *sub_22BCB5870@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))BehaviorSchema.triggers.getter, a2);
}

uint64_t sub_22BCB588C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))destroy for RelationshipMetadata);
}

_QWORD *sub_22BCB58A8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))BehaviorSchema.actions.getter, a2);
}

uint64_t sub_22BCB58C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))destroy for AttributeMetadata);
}

_QWORD *sub_22BCB58E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))BehaviorSchema.exclusive.getter, a2);
}

uint64_t sub_22BCB58FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))destroy for RelationshipMetadata);
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t sub_22BCB596C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_22BCB5990()
{
  return swift_deallocObject();
}

void specialized Properties.subscript.setter(uint64_t a1)
{
  id v2;
  void *Relationship;
  Class isa;
  int v5;

  swift_getAtKeyPath();
  if (a1)
  {
    if (String.count.getter() <= 0)
    {
      swift_bridgeObjectRelease();
      v2 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v2 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_n(a1);
    type metadata accessor for RIOPxrSdfPathRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v5 = RIOPxrUsdRelationshipSetTargets();

    if (v5)
    {

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease();

    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
}

{
  id v2;
  void *Relationship;
  Class isa;
  int v5;

  swift_getAtKeyPath();
  if (a1)
  {
    if (String.count.getter() < 1)
    {
      swift_bridgeObjectRelease();
      v2 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v2 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
    type metadata accessor for RIOPxrSdfPathRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v5 = RIOPxrUsdRelationshipSetTargets();

    if (v5)
    {

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease();

    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t type metadata accessor for InteractionSpecificationsUSDStageErrors(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for InteractionSpecificationsUSDStageErrors);
}

uint64_t type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for InteractionSpecificationsUSDStageErrors.InteractionType);
}

_QWORD *sub_22BCB5B4C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))WaitActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB5B68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))WaitActionSchema.infoID.setter);
}

_QWORD *sub_22BCB5B84@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))WaitActionSchema.duration.getter, a2);
}

uint64_t sub_22BCB5BA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))WaitActionSchema.duration.setter);
}

_QWORD *sub_22BCB5BBC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB5BD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))VisibilityActionSchema.infoID.setter);
}

_QWORD *sub_22BCB5BF4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB5C10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))VisibilityActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB5C2C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.duration.getter, a2);
}

uint64_t sub_22BCB5C48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))VisibilityActionSchema.duration.setter);
}

_QWORD *sub_22BCB5C64@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.type.getter, a2);
}

uint64_t sub_22BCB5C80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))VisibilityActionSchema.type.setter);
}

_QWORD *sub_22BCB5C9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.style.getter, a2);
}

uint64_t sub_22BCB5CB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))VisibilityActionSchema.style.setter);
}

_QWORD *sub_22BCB5CD4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.motionType.getter, a2);
}

uint64_t sub_22BCB5CF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))VisibilityActionSchema.motionType.setter);
}

_QWORD *sub_22BCB5D0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))VisibilityActionSchema.moveDistance.getter, a2);
}

uint64_t sub_22BCB5D28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))VisibilityActionSchema.moveDistance.setter);
}

_QWORD *sub_22BCB5D44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[2];

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 88))(v7, v3, v4);
  v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

_QWORD *sub_22BCB5DA0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TransformActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB5DBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TransformActionSchema.infoID.setter);
}

_QWORD *sub_22BCB5DD8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TransformActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB5DF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TransformActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB5E10@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TransformActionSchema.duration.getter, a2);
}

uint64_t sub_22BCB5E2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TransformActionSchema.duration.setter);
}

_QWORD *sub_22BCB5E48@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TransformActionSchema.type.getter, a2);
}

uint64_t sub_22BCB5E64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TransformActionSchema.type.setter);
}

_QWORD *sub_22BCB5E80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TransformActionSchema.xformTarget.getter, a2);
}

uint64_t sub_22BCB5E9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TransformActionSchema.xformTarget.setter);
}

_QWORD *sub_22BCB5EB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TransformActionSchema.relativeToObject.getter, a2);
}

uint64_t sub_22BCB5ED4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TransformActionSchema.relativeToObject.setter);
}

_QWORD *sub_22BCB5EF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[2];

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v7, v3, v4);
  v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

_QWORD *sub_22BCB5F4C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[2];

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v7, v3, v4);
  v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

_QWORD *sub_22BCB5FA8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[2];

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 16))(v7, v3, v4);
  v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

_QWORD *sub_22BCB6004@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6020(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.infoID.setter);
}

_QWORD *sub_22BCB603C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6058(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6074@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.multiplePerformOperation.getter, a2);
}

uint64_t sub_22BCB6090(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.multiplePerformOperation.setter);
}

_QWORD *sub_22BCB60AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.start.getter, a2);
}

uint64_t sub_22BCB60C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.start.setter);
}

_QWORD *sub_22BCB60E4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.duration.getter, a2);
}

uint64_t sub_22BCB6100(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.duration.setter);
}

_QWORD *sub_22BCB611C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.reversed.getter, a2);
}

uint64_t sub_22BCB6138(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.reversed.setter);
}

_QWORD *sub_22BCB6154@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.animationSpeed.getter, a2);
}

uint64_t sub_22BCB6170(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.animationSpeed.setter);
}

_QWORD *sub_22BCB618C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))StartAnimationSchema.reverses.getter, a2);
}

uint64_t sub_22BCB61A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))StartAnimationSchema.reverses.setter);
}

_QWORD *sub_22BCB61C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))SpinActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB61E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))SpinActionSchema.infoID.setter);
}

_QWORD *sub_22BCB61FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))SpinActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6218(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))SpinActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6234@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))SpinActionSchema.duration.getter, a2);
}

uint64_t sub_22BCB6250(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))SpinActionSchema.duration.setter);
}

_QWORD *sub_22BCB626C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))SpinActionSchema.revolutions.getter, a2);
}

uint64_t sub_22BCB6288(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))SpinActionSchema.revolutions.setter);
}

_QWORD *sub_22BCB62A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB62C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))OrbitActionSchema.infoID.setter);
}

_QWORD *sub_22BCB62DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB62F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))OrbitActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6314@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.alignToPath.getter, a2);
}

uint64_t sub_22BCB6330(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))OrbitActionSchema.alignToPath.setter);
}

_QWORD *sub_22BCB634C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.center.getter, a2);
}

uint64_t sub_22BCB6368(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))OrbitActionSchema.center.setter);
}

_QWORD *sub_22BCB6384@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.duration.getter, a2);
}

uint64_t sub_22BCB63A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))OrbitActionSchema.duration.setter);
}

_QWORD *sub_22BCB63BC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))OrbitActionSchema.revolutions.getter, a2);
}

uint64_t sub_22BCB63D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))OrbitActionSchema.revolutions.setter);
}

_QWORD *sub_22BCB63F4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))NotificationActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6410(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))NotificationActionSchema.infoID.setter);
}

_QWORD *sub_22BCB642C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))NotificationActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6448(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))NotificationActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6464@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))NotificationActionSchema.identifier.getter, a2);
}

uint64_t sub_22BCB6480(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))NotificationActionSchema.identifier.setter);
}

_QWORD *sub_22BCB649C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB64B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))LookAtCameraActionSchema.infoID.setter);
}

_QWORD *sub_22BCB64D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB64F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))LookAtCameraActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB650C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.duration.getter, a2);
}

uint64_t sub_22BCB6528(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))LookAtCameraActionSchema.duration.setter);
}

_QWORD *sub_22BCB6544@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.front.getter, a2);
}

uint64_t sub_22BCB6560(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))LookAtCameraActionSchema.front.setter);
}

_QWORD *sub_22BCB657C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))LookAtCameraActionSchema.upVector.getter, a2);
}

uint64_t sub_22BCB6598(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))LookAtCameraActionSchema.upVector.setter);
}

_QWORD *sub_22BCB65B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ImpulseActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB65D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ImpulseActionSchema.infoID.setter);
}

_QWORD *sub_22BCB65EC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ImpulseActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6608(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ImpulseActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6624@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ImpulseActionSchema.velocity.getter, a2);
}

uint64_t sub_22BCB6640(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ImpulseActionSchema.velocity.setter);
}

_QWORD *sub_22BCB665C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))GroupActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6678(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))GroupActionSchema.infoID.setter);
}

_QWORD *sub_22BCB6694@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))GroupActionSchema.type.getter, a2);
}

uint64_t sub_22BCB66B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))GroupActionSchema.type.setter);
}

_QWORD *sub_22BCB66CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))GroupActionSchema.loops.getter, a2);
}

uint64_t sub_22BCB66E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))GroupActionSchema.loops.setter);
}

_QWORD *sub_22BCB6704@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))GroupActionSchema.performCount.getter, a2);
}

uint64_t sub_22BCB6720(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))GroupActionSchema.performCount.setter);
}

_QWORD *sub_22BCB673C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))GroupActionSchema.actions.getter, a2);
}

uint64_t sub_22BCB6758(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))GroupActionSchema.actions.setter);
}

_QWORD *sub_22BCB6774@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6790(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))EmphasisActionSchema.infoID.setter);
}

_QWORD *sub_22BCB67AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB67C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))EmphasisActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB67E4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.duration.getter, a2);
}

uint64_t sub_22BCB6800(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))EmphasisActionSchema.duration.setter);
}

_QWORD *sub_22BCB681C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.motionType.getter, a2);
}

uint64_t sub_22BCB6838(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))EmphasisActionSchema.motionType.setter);
}

_QWORD *sub_22BCB6854@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))EmphasisActionSchema.style.getter, a2);
}

uint64_t sub_22BCB6870(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))EmphasisActionSchema.style.setter);
}

_QWORD *sub_22BCB688C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ChangeSceneActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB68A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ChangeSceneActionSchema.infoID.setter);
}

_QWORD *sub_22BCB68C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ChangeSceneActionSchema.scene.getter, a2);
}

uint64_t sub_22BCB68E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ChangeSceneActionSchema.scene.setter);
}

_QWORD *sub_22BCB68FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))AudioActionSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6918(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))AudioActionSchema.infoID.setter);
}

_QWORD *sub_22BCB6934@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))AudioActionSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6950(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))AudioActionSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB696C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))AudioActionSchema.audio.getter, a2);
}

uint64_t sub_22BCB6988(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))AudioActionSchema.audio.setter);
}

_QWORD *sub_22BCB69A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))AudioActionSchema.type.getter, a2);
}

uint64_t sub_22BCB69C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))AudioActionSchema.type.setter);
}

_QWORD *sub_22BCB69DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))AudioActionSchema.gain.getter, a2);
}

uint64_t sub_22BCB69F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))AudioActionSchema.gain.setter);
}

_QWORD *sub_22BCB6A14@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))AudioActionSchema.auralMode.getter, a2);
}

uint64_t sub_22BCB6A30(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))AudioActionSchema.auralMode.setter);
}

_QWORD *sub_22BCB6A4C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))AudioActionSchema.multiplePerformOperation.getter, a2);
}

uint64_t sub_22BCB6A68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))AudioActionSchema.multiplePerformOperation.setter);
}

_QWORD *sub_22BCB6A84@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TapTriggerSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6AA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TapTriggerSchema.infoID.setter);
}

_QWORD *sub_22BCB6ABC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))TapTriggerSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6AD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))TapTriggerSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6AF4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))SceneTransitionTriggerSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6B10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))SceneTransitionTriggerSchema.infoID.setter);
}

_QWORD *sub_22BCB6B2C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))SceneTransitionTriggerSchema.type.getter, a2);
}

uint64_t sub_22BCB6B48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))SceneTransitionTriggerSchema.type.setter);
}

_QWORD *sub_22BCB6B64@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ProximityToCameraTriggerSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6B80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ProximityToCameraTriggerSchema.infoID.setter);
}

_QWORD *sub_22BCB6B9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ProximityToCameraTriggerSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6BB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ProximityToCameraTriggerSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6BD4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))ProximityToCameraTriggerSchema.distance.getter, a2);
}

uint64_t sub_22BCB6BF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))ProximityToCameraTriggerSchema.distance.setter);
}

_QWORD *sub_22BCB6C0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))NotificationTriggerSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6C28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))NotificationTriggerSchema.infoID.setter);
}

_QWORD *sub_22BCB6C44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))NotificationTriggerSchema.identifier.getter, a2);
}

uint64_t sub_22BCB6C60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))NotificationTriggerSchema.identifier.setter);
}

uint64_t partial apply for closure #1 in Stage.setTrigger(trigger:at:mapping:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in Stage.setTrigger(trigger:at:mapping:)(a1, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), *(_QWORD *)(v3 + 32), a2, a3);
}

_QWORD *sub_22BCB6C9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))CollideTriggerSchema.infoID.getter, a2);
}

uint64_t sub_22BCB6CB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))CollideTriggerSchema.infoID.setter);
}

_QWORD *sub_22BCB6CD4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))CollideTriggerSchema.affectedObjects.getter, a2);
}

uint64_t sub_22BCB6CF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))CollideTriggerSchema.affectedObjects.setter);
}

_QWORD *sub_22BCB6D0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for BehaviorSchema.triggers : BehaviorSchema(a1, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))CollideTriggerSchema.colliders.getter, a2);
}

uint64_t sub_22BCB6D28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BehaviorSchema.triggers : BehaviorSchema(a1, a2, a3, a4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))CollideTriggerSchema.colliders.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      v6 = type metadata accessor for __RKEntityActionSpecification();
    else
      v6 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() == 1)
    v2 = type metadata accessor for __RKEntityActionSpecification();
  else
    v2 = type metadata accessor for __RKEntityTriggerSpecification();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = type metadata accessor for __RKEntityActionSpecification();
  else
    v4 = type metadata accessor for __RKEntityTriggerSpecification();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of CompileSession.ImportSessionData(a1, type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = type metadata accessor for __RKEntityActionSpecification();
    else
      v4 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = type metadata accessor for __RKEntityActionSpecification();
  else
    v4 = type metadata accessor for __RKEntityTriggerSpecification();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of CompileSession.ImportSessionData(a1, type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = type metadata accessor for __RKEntityActionSpecification();
    else
      v4 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for InteractionSpecificationsUSDStageErrors.InteractionType()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for __RKEntityTriggerSpecification();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for __RKEntityActionSpecification();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for InteractionSpecificationsUSDStageErrors(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v13[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = *a2;
      *(_QWORD *)a1 = *a2;
      v15 = v14;
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      v17 = *(int *)(v16 + 48);
      v18 = &a1[v17];
      v19 = (char *)a2 + v17;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v20 = type metadata accessor for __RKEntityActionSpecification();
      else
        v20 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v20 - 8) + 16))(v18, v19);
      swift_storeEnumTagMultiPayload();
      v28 = *(int *)(v16 + 64);
      v29 = &a1[v28];
      v30 = (char **)((char *)a2 + v28);
      v31 = v30[1];
      *(_QWORD *)v29 = *v30;
      *((_QWORD *)v29 + 1) = v31;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *a2;
      *(_QWORD *)a1 = *a2;
      v8 = v7;
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      v10 = &a1[v9];
      v11 = (char *)a2 + v9;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v12 = type metadata accessor for __RKEntityActionSpecification();
      else
        v12 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v12 - 8) + 16))(v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v21 = *a2;
      *(_QWORD *)a1 = *a2;
      v22 = v21;
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      v24 = *(int *)(v23 + 48);
      v25 = &a1[v24];
      v26 = (char *)a2 + v24;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v27 = type metadata accessor for __RKEntityActionSpecification();
      else
        v27 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v27 - 8) + 16))(v25, v26);
      swift_storeEnumTagMultiPayload();
      v32 = *(int *)(v23 + 64);
      v33 = &a1[v32];
      v34 = (char *)a2 + v32;
      v35 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for InteractionSpecificationsUSDStageErrors(id *a1)
{
  uint64_t result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:

      v6 = (char *)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String))
                  + 48);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v7 = type metadata accessor for __RKEntityActionSpecification();
      else
        v7 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      return swift_bridgeObjectRelease();
    case 1:

      v8 = (char *)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v9 = type metadata accessor for __RKEntityActionSpecification();
      else
        v9 = type metadata accessor for __RKEntityTriggerSpecification();
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    case 0:

      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      v4 = (char *)a1 + *(int *)(v3 + 48);
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v5 = type metadata accessor for __RKEntityActionSpecification();
      else
        v5 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      v8 = (char *)a1 + *(int *)(v3 + 64);
      v9 = type metadata accessor for UUID();
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  return result;
}

void **initializeWithCopy for InteractionSpecificationsUSDStageErrors(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = *a2;
    *a1 = *a2;
    v12 = v11;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
    v14 = *(int *)(v13 + 48);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
      v17 = type metadata accessor for __RKEntityActionSpecification();
    else
      v17 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, char *))(*(_QWORD *)(v17 - 8) + 16))(v15, v16);
    swift_storeEnumTagMultiPayload();
    v25 = *(int *)(v13 + 64);
    v26 = (void **)((char *)a1 + v25);
    v27 = (void **)((char *)a2 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *a2;
    *a1 = *a2;
    v6 = v5;
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
      v10 = type metadata accessor for __RKEntityActionSpecification();
    else
      v10 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, char *))(*(_QWORD *)(v10 - 8) + 16))(v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = v18;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    v21 = *(int *)(v20 + 48);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
      v24 = type metadata accessor for __RKEntityActionSpecification();
    else
      v24 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, char *))(*(_QWORD *)(v24 - 8) + 16))(v22, v23);
    swift_storeEnumTagMultiPayload();
    v29 = *(int *)(v20 + 64);
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for InteractionSpecificationsUSDStageErrors(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    outlined destroy of CompileSession.ImportSessionData((uint64_t)a1, type metadata accessor for InteractionSpecificationsUSDStageErrors);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = *a2;
      *a1 = *a2;
      v12 = v11;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      v14 = *(int *)(v13 + 48);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v17 = type metadata accessor for __RKEntityActionSpecification();
      else
        v17 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v17 - 8) + 16))(v15, v16);
      swift_storeEnumTagMultiPayload();
      v25 = *(int *)(v13 + 64);
      v26 = (void **)((char *)a1 + v25);
      v27 = (void **)((char *)a2 + v25);
      *v26 = *v27;
      v26[1] = v27[1];
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = *a2;
      *a1 = *a2;
      v6 = v5;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v10 = type metadata accessor for __RKEntityActionSpecification();
      else
        v10 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v10 - 8) + 16))(v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v18 = *a2;
      *a1 = *a2;
      v19 = v18;
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      v21 = *(int *)(v20 + 48);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v24 = type metadata accessor for __RKEntityActionSpecification();
      else
        v24 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v24 - 8) + 16))(v22, v23);
      swift_storeEnumTagMultiPayload();
      v28 = *(int *)(v20 + 64);
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      v31 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for InteractionSpecificationsUSDStageErrors(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
    v10 = *(int *)(v9 + 48);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
      v13 = type metadata accessor for __RKEntityActionSpecification();
    else
      v13 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 32))(v11, v12);
    swift_storeEnumTagMultiPayload();
    *(_OWORD *)((char *)a1 + *(int *)(v9 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v9 + 64));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                + 48);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
      v8 = type metadata accessor for __RKEntityActionSpecification();
    else
      v8 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, char *))(*(_QWORD *)(v8 - 8) + 32))(v6, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    *a1 = *a2;
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
    v15 = *(int *)(v14 + 48);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
      v18 = type metadata accessor for __RKEntityActionSpecification();
    else
      v18 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(char *, char *))(*(_QWORD *)(v18 - 8) + 32))(v16, v17);
    swift_storeEnumTagMultiPayload();
    v19 = *(int *)(v14 + 64);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for InteractionSpecificationsUSDStageErrors(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  if (a1 != a2)
  {
    outlined destroy of CompileSession.ImportSessionData((uint64_t)a1, type metadata accessor for InteractionSpecificationsUSDStageErrors);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, valueName: String));
      v10 = *(int *)(v9 + 48);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v13 = type metadata accessor for __RKEntityActionSpecification();
      else
        v13 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 32))(v11, v12);
      swift_storeEnumTagMultiPayload();
      *(_OWORD *)((char *)a1 + *(int *)(v9 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v9 + 64));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType))
                  + 48);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v8 = type metadata accessor for __RKEntityActionSpecification();
      else
        v8 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v8 - 8) + 32))(v6, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a1 = *a2;
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (path: SceneDescriptionFoundations.Path, interactionType: InteractionSpecificationsUSDStageErrors.InteractionType, target: UUID));
      v15 = *(int *)(v14 + 48);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
      if (swift_getEnumCaseMultiPayload() == 1)
        v18 = type metadata accessor for __RKEntityActionSpecification();
      else
        v18 = type metadata accessor for __RKEntityTriggerSpecification();
      (*(void (**)(char *, char *))(*(_QWORD *)(v18 - 8) + 32))(v16, v17);
      swift_storeEnumTagMultiPayload();
      v19 = *(int *)(v14 + 64);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for InteractionSpecificationsUSDStageErrors()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v5;
  char v6;
  char v7;
  char *v8;
  char *v9;
  char *v10;

  v0 = type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(319);
  if (v1 <= 0x3F)
  {
    v2 = type metadata accessor for UUID();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout3();
      v8 = &v7;
      swift_getTupleTypeLayout2();
      v9 = &v6;
      swift_getTupleTypeLayout3();
      v10 = &v5;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t base witness table accessor for Error in InteractionSpecificationsUSDStageErrors()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type InteractionSpecificationsUSDStageErrors and conformance InteractionSpecificationsUSDStageErrors, type metadata accessor for InteractionSpecificationsUSDStageErrors, (uint64_t)&protocol conformance descriptor for InteractionSpecificationsUSDStageErrors);
}

uint64_t outlined init with copy of InteractionSpecificationsUSDStageErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InteractionSpecificationsUSDStageErrors(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of InteractionSpecificationsUSDStageErrors.InteractionType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InteractionSpecificationsUSDStageErrors.InteractionType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL static BuilderOrder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BuilderOrder.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int BuilderOrder.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type BuilderOrder and conformance BuilderOrder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BuilderOrder and conformance BuilderOrder;
  if (!lazy protocol witness table cache variable for type BuilderOrder and conformance BuilderOrder)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for BuilderOrder, &type metadata for BuilderOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BuilderOrder and conformance BuilderOrder);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BuilderOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_22BCB821C + 4 * byte_22BD10D35[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_22BCB8250 + 4 * byte_22BD10D30[v4]))();
}

uint64_t sub_22BCB8250(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCB8258(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22BCB8260);
  return result;
}

uint64_t sub_22BCB826C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22BCB8274);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_22BCB8278(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCB8280(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuilderOrder()
{
  return &type metadata for BuilderOrder;
}

uint64_t closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityActionSpecification();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, a2, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  swift_bridgeObjectRetain();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDE69D0], v8);
  v14 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
    *a3 = v14;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v14);
    *a3 = v14;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17, v11, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t specialized static ActionBuilder.generateNotificationActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[2];
  char v24;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for __RKEntityGroupActionOrder();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v7 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v7 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)v23);

  swift_release();
  v9 = (void *)v23[0];
  v8 = v23[1];
  if (v24 == 1)
  {
    v22[2] = v23[0];
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<String, Object.Error>(v9, v8, 1);
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    v16 = *(_QWORD *)(specialized Inputs.pathsForRelationship(named:requestContext:)() + 16);
    v17 = swift_bridgeObjectRelease();
    if (v16)
    {
      v23[0] = MEMORY[0x24BEE4AF8];
      MEMORY[0x24BDAC7A8](v17);
      v22[-4] = v23;
      v22[-3] = v9;
      v22[-2] = v8;
      if (one-time initialization token for OutputName != -1)
        swift_once();
      specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:), (uint64_t)&v22[-6]);
      outlined consume of Result<String, Object.Error>(v9, v8, 0);
      v10 = v23[0];
      if (*(_QWORD *)(v23[0] + 16) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        v18 = type metadata accessor for __RKEntityActionSpecification();
        v19 = *(_QWORD *)(v18 - 8);
        v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
        v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_22BD0C360;
        (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDE68D0], v3);
        swift_bridgeObjectRetain();
        __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v19 + 104))(v21 + v20, *MEMORY[0x24BDE69C8], v18);
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v11 = type metadata accessor for __RKEntityActionSpecification();
      v12 = *(_QWORD *)(v11 - 8);
      v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_22BD0C360;
      v14 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v2, 1, 1, v14);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)();
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v12 + 104))(v10 + v13, *MEMORY[0x24BDE69D0], v11);
    }
  }
  return v10;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateNotificationActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = specialized Set.startIndex.getter(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    specialized Set.subscript.getter(result, v5, a1, a2);
    v7 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t specialized Collection.first.getter()
{
  uint64_t v0;
  void (*v1)(_QWORD *, _QWORD);
  uint64_t *v2;
  _QWORD v4[5];

  type metadata accessor for Entity.ChildCollection();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7138], MEMORY[0x24BDE7150]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v0 = 0;
  if (v4[4] != v4[0])
  {
    v1 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v0 = *v2;
    swift_retain();
    v1(v4, 0);
  }
  return v0;
}

uint64_t USDImportService.__allocating_init()()
{
  uint64_t v0;
  void *v1;

  v0 = swift_allocObject();
  static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v1 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return v0;
}

_QWORD *specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  NSURL *v7;
  void *v8;
  void *v9;
  uint64_t SingleUseImporterWithURL;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  getEngine(_:)(a2);
  if ((specialized static USDImportService.canLoad(url:)() & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v7);
    v9 = v8;
    if (a5)
      SingleUseImporterWithURL = RIOImportSessionCreateSingleUseImporterWithURL();
    else
      SingleUseImporterWithURL = RIOImportSessionCreateWithURL();
    v13 = (void *)SingleUseImporterWithURL;

    type metadata accessor for ImportSession(0);
    swift_allocObject();
    v12 = specialized ImportSession.init<A>(core:entityType:)(v13);
    swift_release();
    v14 = type metadata accessor for URL();
    v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
    swift_retain();
    v15(a1, v14);
    if (v12)
      swift_release();
  }
  else
  {
    swift_release();
    v11 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    return 0;
  }
  return v12;
}

uint64_t static USDImportService.urlForUSD(named:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *object;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *countAndFlagsBits;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t (*v29)(void **, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  Swift::String v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t (*v45)(void **, uint64_t, uint64_t, uint64_t);
  void **v46;
  uint64_t v48;
  void **v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  void **v53;
  uint64_t v54;
  uint64_t (*v55)(void **, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  char *v63;

  v61 = a2;
  v62 = a3;
  v60 = a1;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v53 = (void **)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v48 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  object = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v48 - v15);
  MEMORY[0x24BDAC7A8](v17);
  countAndFlagsBits = (char *)&v48 - v18;
  if (one-time initialization token for supportedFilePathExtensions != -1)
    goto LABEL_55;
  while (1)
  {
    v54 = *(_QWORD *)(static USDImportService.supportedFilePathExtensions + 16);
    if (!v54)
      break;
    v57 = v16;
    v49 = a4;
    v59 = static USDImportService.supportedFilePathExtensions + 32;
    v20 = swift_bridgeObjectRetain();
    v21 = 0;
    v51 = v6;
    v52 = v10;
    a4 = v53;
    v63 = countAndFlagsBits;
    v58 = object;
    v56 = v20;
    while (1)
    {
      if (v21 >= *(_QWORD *)(v20 + 16))
      {
        __break(1u);
        goto LABEL_54;
      }
      v22 = (uint64_t *)(v59 + 16 * v21);
      v23 = *v22;
      v24 = v22[1];
      swift_bridgeObjectRetain();
      v25 = (void *)MEMORY[0x22E2F5278](v60, v61);
      if (v24)
      {
        swift_bridgeObjectRetain();
        v26 = (void *)MEMORY[0x22E2F5278](v23, v24);
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = 0;
      }
      v27 = objc_msgSend(v62, sel_URLForResource_withExtension_, v25, v26);

      if (v27)
      {
        v28 = (uint64_t)v57;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v29 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v30 = v28;
        v31 = 0;
      }
      else
      {
        v29 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v28 = (uint64_t)v57;
        v30 = (uint64_t)v57;
        v31 = 1;
      }
      v55 = v29;
      v29((void **)v30, v31, 1, v5);
      countAndFlagsBits = v63;
      object = v58;
      outlined init with take of URL?(v28, (uint64_t)v63);
      outlined init with copy of URL?((uint64_t)countAndFlagsBits, (uint64_t)object);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(object, 1, v5) != 1)
        break;
      v16 = &demangling cache variable for type metadata for URL?;
      outlined destroy of Any?((uint64_t)countAndFlagsBits, &demangling cache variable for type metadata for URL?);
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)object, &demangling cache variable for type metadata for URL?);
LABEL_5:
      ++v21;
      v20 = v56;
      if (v21 == v54)
      {
        swift_bridgeObjectRelease();
        a4 = v49;
        v45 = v55;
        return v45(a4, 1, 1, v5);
      }
    }
    v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v32(v10, object, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(void **, char *, uint64_t))(v6 + 16))(a4, v10, v5);
    if (v24)
      goto LABEL_50;
    if ((URL.isFileURL.getter() & 1) == 0)
      goto LABEL_47;
    v33 = static USDImportService.supportedFilePathExtensions;
    v34 = *(_QWORD *)(static USDImportService.supportedFilePathExtensions + 16);
    v50 = v32;
    if (v34)
    {
      swift_bridgeObjectRetain_n();
      v35 = (uint64_t *)(v33 + 40);
      v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v38 = *v35;
        if (*v35)
        {
          v39 = *(v35 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
          v41 = v36[2];
          v40 = v36[3];
          if (v41 >= v40 >> 1)
            v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v36);
          v36[2] = v41 + 1;
          v37 = &v36[2 * v41];
          v37[4] = v39;
          v37[5] = v38;
        }
        v35 += 2;
        --v34;
      }
      while (v34);
      swift_bridgeObjectRelease_n();
      v6 = v51;
      v10 = v52;
    }
    else
    {
      v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    URL.pathExtension.getter();
    v42 = String.lowercased()();
    countAndFlagsBits = (char *)v42._countAndFlagsBits;
    object = (char *)v42._object;
    swift_bridgeObjectRelease();
    v16 = (uint64_t *)v36[2];
    if (!v16)
    {
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    if (v36[4] == v42._countAndFlagsBits && (void *)v36[5] == v42._object
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_49:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v51;
      v10 = v52;
      a4 = v53;
      countAndFlagsBits = v63;
      v32 = v50;
LABEL_50:
      (*(void (**)(void **, uint64_t))(v6 + 8))(a4, v5);
      outlined destroy of Any?((uint64_t)countAndFlagsBits, &demangling cache variable for type metadata for URL?);
      swift_bridgeObjectRelease();
      v46 = v49;
      v32((char *)v49, v10, v5);
      return v55(v46, 0, 1, v5);
    }
    if (v16 == (uint64_t *)1)
      goto LABEL_44;
    if (v36[6] == v42._countAndFlagsBits && (void *)v36[7] == v42._object
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_49;
    }
    if (v16 == (uint64_t *)2)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      v6 = v51;
      v10 = v52;
LABEL_46:
      countAndFlagsBits = v63;
      swift_bridgeObjectRelease();
      a4 = v53;
LABEL_47:
      v16 = *(uint64_t **)(v6 + 8);
      ((void (*)(void **, uint64_t))v16)(a4, v5);
      outlined destroy of Any?((uint64_t)countAndFlagsBits, &demangling cache variable for type metadata for URL?);
      ((void (*)(char *, uint64_t))v16)(v10, v5);
      goto LABEL_5;
    }
    a4 = (void **)(v36 + 9);
    v6 = 2;
    while (1)
    {
      v43 = (uint64_t *)(v6 + 1);
      if (__OFADD__(v6, 1))
        break;
      v44 = *(a4 - 1) == (void *)v42._countAndFlagsBits && *a4 == v42._object;
      if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_49;
      a4 += 2;
      ++v6;
      if (v43 == v16)
        goto LABEL_44;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    swift_once();
  }
  v45 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))(v6 + 56);
  return v45(a4, 1, 1, v5);
}

uint64_t specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t (*a6)(uint64_t))
{
  uint64_t SingleUseImporterWithStage;
  uint64_t v9;
  uint64_t v10;

  getEngine(_:)(a2);
  if (a5)
    SingleUseImporterWithStage = RIOImportSessionCreateSingleUseImporterWithStage();
  else
    SingleUseImporterWithStage = RIOImportSessionCreateWithStage();
  v9 = SingleUseImporterWithStage;
  type metadata accessor for ImportSession(0);
  swift_allocObject();
  v10 = a6(v9);
  swift_release();
  swift_release();
  return v10;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t USDImportService.init()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = v0;
  static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v2 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return v1;
}

Swift::Bool __swiftcall USDImportService.canLoad(named:in:)(Swift::String named, NSBundle in)
{
  return static USDImportService.canLoad(named:in:)(named._countAndFlagsBits, (uint64_t)named._object, in.super.isa);
}

BOOL static USDImportService.canLoad(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (void **)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v8);
  v9 = type metadata accessor for URL();
  v10 = (*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) != 1;
  outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  return v10;
}

double one-time initialization function for supportedFilePathExtensions()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22BD0C950;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_OWORD *)(v0 + 48) = xmmword_22BD10DD0;
  *(_OWORD *)(v0 + 64) = xmmword_22BD10DE0;
  *(_QWORD *)&result = 1667527541;
  *(_OWORD *)(v0 + 80) = xmmword_22BD10DF0;
  *(_OWORD *)(v0 + 96) = xmmword_22BD10E00;
  static USDImportService.supportedFilePathExtensions = v0;
  return result;
}

void USDImportService.LoadError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Error;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  Error = type metadata accessor for USDImportService.LoadError();
  MEMORY[0x24BDAC7A8](Error);
  outlined init with copy of USDImportService.LoadError(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_22BCB97F4 + 4 * byte_22BD10E10[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22BCB97F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v3 = *v0;
  v4 = (void *)v0[1];
  *(_QWORD *)(v2 - 80) = 0;
  *(_QWORD *)(v2 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 80) = v1 + 5;
  *(_QWORD *)(v2 - 72) = 0x800000022BD088A0;
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E7562206E692022;
  v6._object = (void *)0xEB00000000656C64;
  String.append(_:)(v6);
  return *(_QWORD *)(v2 - 80);
}

uint64_t USDImportService.load(with:)(uint64_t Error)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  int v62;
  char *v63;
  char v64;
  unint64_t v65;
  char v66;
  int v67;
  uint64_t v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  __int128 *v84;
  uint64_t *v85;
  __int128 *v86;
  char v87;
  int v88;
  char *v89;
  int v90;
  __int128 *v91;
  uint64_t *v92;
  __int128 *v93;
  char v94;
  int v95;
  char *v96;
  int v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  void (*v109)(char *, uint64_t);
  id v110;
  char *v111;
  uint64_t *v112;
  uint64_t result;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  NSURL *v124;
  id v125;
  char *v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  void (*v135)(char *, uint64_t);
  _QWORD *v136;
  void (*v137)(char *, uint64_t);
  id v138;
  uint64_t v139;
  char *v140;
  int v141;
  void (*v142)(char *, char *, uint64_t);
  NSURL *v143;
  id v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  void *v157;
  void *v158;
  id v159;
  void *v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  void *v167;
  void *v168;
  id v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(char *, uint64_t);
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v189 = (char *)&v177 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v190 = (char *)&v177 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v177 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v177 - v10;
  v12 = type metadata accessor for URL();
  v195 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v188 = (char *)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v177 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v181 = (char *)&v177 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v179 = (char *)&v177 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v184 = (char *)&v177 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v180 = (char *)&v177 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v177 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v178 = (char *)&v177 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v185 = (char *)&v177 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v177 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v177 - v36;
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)&v177 - v39;
  v41 = *(_QWORD *)(Error + 16);
  v183 = v16;
  v186 = v34;
  if (v41
    && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000), (v43 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(Error + 56) + 32 * v42, (uint64_t)&v193),
        (swift_dynamicCast() & 1) != 0))
  {
    v44 = v12;
    if (v191 == 0x6D6F724664616F4CLL && v192 == 0xEB000000004C5255)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v54 & 1) == 0)
        goto LABEL_8;
    }
    if (*(_QWORD *)(Error + 16)
      && (v55 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746E65746E6F63, 0xEA0000000000664FLL),
          (v56 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(Error + 56) + 32 * v55, (uint64_t)&v193);
      v57 = swift_dynamicCast();
      v58 = v195;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v195 + 56))(v11, v57 ^ 1u, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v11, 1, v12) != 1)
      {
        v59 = v195;
        (*(void (**)(char *, char *, uint64_t))(v195 + 32))(v40, v11, v12);
        if (*(_QWORD *)(Error + 16)
          && (v60 = specialized __RawDictionaryStorage.find<A>(_:)(0x656D614E68746977, 0xE800000000000000),
              (v61 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(Error + 56) + 32 * v60, (uint64_t)&v193);
          v62 = swift_dynamicCast();
          v63 = (char *)v192;
          if (!v62)
            v63 = 0;
          v190 = v63;
        }
        else
        {
          v190 = 0;
        }
        specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
        if (v194)
        {
          LOBYTE(v189) = swift_dynamicCast() & v191;
          LODWORD(v189) = v189;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
          LODWORD(v189) = 0;
        }
        v128 = type metadata accessor for Entity();
        v129 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
        v130 = v59;
        v131 = v12;
        v129(v37, v40, v12);
        v132 = v186;
        v129(v186, v37, v44);
        v133 = (uint64_t)v185;
        v129(v185, v132, v44);
        v134 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(v133, 0, 0, 0, v128, 1);
        v135 = *(void (**)(char *, uint64_t))(v130 + 8);
        v135(v132, v44);
        if (!v134)
        {
          type metadata accessor for USDImportService.LoadError();
          lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
          v139 = swift_allocError();
          v129(v140, v40, v44);
          swift_storeEnumTagMultiPayload();
          Error = v139;
          swift_willThrow();
LABEL_231:
          v135(v37, v131);
          v135(v40, v131);
          swift_bridgeObjectRelease();
          return Error;
        }
        v136 = v134;
        if ((_DWORD)v189)
        {
          v137 = v135;
          if (String.count.getter() < 1)
            v138 = (id)RIOPxrTfTokenEmpty();
          else
            v138 = (id)RIOPxrTfTokenCreateWithCString();
          v157 = v138;
          v158 = (void *)RIOPxrUsdStageCopyRootLayer();
          type metadata accessor for SceneDescriptionFoundations.Layer();
          *(_QWORD *)(swift_allocObject() + 16) = v158;
          swift_setDeallocating();
          v159 = v158;
          SceneDescriptionFoundations.Layer.__deallocating_deinit();
          v160 = (void *)RIOPxrVtValueCreateWithBool();
          RIOPxrSdfLayerSetCustomLayerData();

          v135 = v137;
        }
        swift_beginAccess();
        RIOImportSessionUpdateSynchronouslyOnEngineQueue();
        result = RIOImportSessionGetSceneCount();
        if ((result & 0x8000000000000000) == 0)
        {
          v161 = result;
          if (result)
          {
            v162 = v135;
            v163 = 0;
            v164 = 0;
            while (1)
            {
              if (RIOImportSessionIsSceneActive())
              {
                v121 = __OFADD__(v163++, 1);
                if (v121)
                  break;
              }
              if (v161 == ++v164)
                goto LABEL_228;
            }
            __break(1u);
LABEL_228:
            v165 = v163 < 2;
            v135 = v162;
            if (!v165)
            {
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
              v166 = swift_allocError();
              swift_storeEnumTagMultiPayload();
              Error = v166;
              swift_willThrow();
              swift_release();
              v131 = v44;
              goto LABEL_231;
            }
          }
          Error = v136[3];
          swift_retain();
          swift_release();
          v135(v37, v44);
          v135(v40, v44);
          goto LABEL_217;
        }
        goto LABEL_253;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v11, 1, 1, v12);
    }
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v44 = v12;
  }
LABEL_8:
  if (*(_QWORD *)(Error + 16)
    && (v45 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000), (v46 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(Error + 56) + 32 * v45, (uint64_t)&v193);
    v47 = v44;
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (v191 == 0xD000000000000010 && v192 == 0x800000022BD09FE0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v64 & 1) == 0)
          goto LABEL_15;
      }
      if (*(_QWORD *)(Error + 16)
        && (v65 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746E65746E6F63, 0xEA0000000000664FLL),
            (v66 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(Error + 56) + 32 * v65, (uint64_t)&v193);
        v67 = swift_dynamicCast();
        v68 = v195;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v195 + 56))(v8, v67 ^ 1u, 1, v44);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v8, 1, v44) != 1)
        {
          v69 = v178;
          (*(void (**)(char *, char *, uint64_t))(v195 + 32))(v178, v8, v47);
          specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, Error, &v193);
          if (v194)
            swift_dynamicCast();
          else
            outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
          specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
          if (v194)
          {
            v141 = (swift_dynamicCast() & v191);
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
            v141 = 0;
          }
          v142 = *(void (**)(char *, char *, uint64_t))(v195 + 16);
          v142(v27, v69, v47);
          v142(v180, v69, v47);
          if (specialized static USDImportService.loadModel_createImportSession(contentsOf:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:), v143))
          {
            if (v141)
            {
              if (String.count.getter() < 1)
                v144 = (id)RIOPxrTfTokenEmpty();
              else
                v144 = (id)RIOPxrTfTokenCreateWithCString();
              v167 = v144;
              v168 = (void *)RIOPxrUsdStageCopyRootLayer();
              type metadata accessor for SceneDescriptionFoundations.Layer();
              *(_QWORD *)(swift_allocObject() + 16) = v168;
              swift_setDeallocating();
              v169 = v168;
              SceneDescriptionFoundations.Layer.__deallocating_deinit();
              v170 = (void *)RIOPxrVtValueCreateWithBool();
              RIOPxrSdfLayerSetCustomLayerData();

            }
            swift_beginAccess();
            RIOImportSessionUpdateSynchronouslyOnEngineQueue();
            result = RIOImportSessionGetSceneCount();
            if (result < 0)
              goto LABEL_254;
            v171 = result;
            if (!result)
              goto LABEL_243;
            v172 = 0;
            v173 = 0;
            while (1)
            {
              if (RIOImportSessionIsSceneActive())
              {
                v121 = __OFADD__(v172++, 1);
                if (v121)
                  break;
              }
              if (v171 == ++v173)
                goto LABEL_242;
            }
            __break(1u);
LABEL_242:
            if (v172 >= 2)
            {
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
              swift_allocError();
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
            }
            else
            {
LABEL_243:
              v174 = v187;
              v175 = specialized static USDImportService.loadModel_selectEntity(contentsOf:importSession:)((uint64_t)v180);
              if (!v174)
              {
                Error = v175;
                type metadata accessor for ModelEntity();
                if (swift_dynamicCastClass())
                {
                  swift_release();
                  v176 = *(void (**)(char *, uint64_t))(v195 + 8);
                  v176(v27, v47);
                  v176(v180, v47);
                  v176(v178, v47);
                  swift_bridgeObjectRelease();
                  return Error;
                }
                type metadata accessor for USDImportService.LoadError();
                lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
                swift_allocError();
                swift_storeEnumTagMultiPayload();
                swift_willThrow();
                swift_release();
              }
            }
            swift_release();
            v69 = v178;
          }
          else
          {
            type metadata accessor for USDImportService.LoadError();
            lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
            swift_allocError();
            v142(v145, v69, v47);
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
          }
          Error = *(_QWORD *)(v195 + 8);
          ((void (*)(char *, uint64_t))Error)(v27, v47);
          ((void (*)(char *, uint64_t))Error)(v180, v47);
          ((void (*)(char *, uint64_t))Error)(v69, v47);
          swift_bridgeObjectRelease();
          return Error;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v8, 1, 1, v44);
      }
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    }
  }
  else
  {
    v47 = v44;
  }
LABEL_15:
  if (!*(_QWORD *)(Error + 16)
    || (v48 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000), (v49 & 1) == 0))
  {
    v51 = v195;
    goto LABEL_22;
  }
  outlined init with copy of Any(*(_QWORD *)(Error + 56) + 32 * v48, (uint64_t)&v193);
  v50 = swift_dynamicCast();
  v51 = v195;
  if ((v50 & 1) != 0)
  {
    if (v191 == 0x6D6F724664616F4CLL && v192 == 0xEE00656C646E7542)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0)
        goto LABEL_22;
    }
    specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, Error, &v193);
    if (v194)
    {
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_22;
      v72 = v191;
      v71 = v192;
      specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, Error, &v193);
      if (v194)
      {
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v73 = (void *)v191;
          specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
          if (v194)
          {
            if (swift_dynamicCast())
              v74 = v191;
            else
              v74 = 2;
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
            v74 = 2;
          }
          Error = v182;
          v146 = v187;
          v147 = USDImportService.load(named:in:generateDecimatedMesh:)(v72, v71, v73, v74);
          if (!v146)
            Error = v147;
          swift_bridgeObjectRelease();

          return Error;
        }
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
    }
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
  }
LABEL_22:
  if (!*(_QWORD *)(Error + 16))
    goto LABEL_69;
  v52 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v53 & 1) == 0)
    goto LABEL_69;
  outlined init with copy of Any(*(_QWORD *)(Error + 56) + 32 * v52, (uint64_t)&v193);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_69;
  if (v191 == 0xD000000000000013 && v192 == 0x800000022BD09FC0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v75 & 1) == 0)
      goto LABEL_69;
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, Error, &v193);
  if (!v194)
  {
LABEL_68:
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
    goto LABEL_69;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v77 = v191;
    v76 = v192;
    specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, Error, &v193);
    if (v194)
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v78 = (void *)v191;
        specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
        if (v194)
        {
          if (swift_dynamicCast())
            v79 = v191;
          else
            v79 = 2;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
          v79 = 2;
        }
        v122 = USDImportService.loadModel(named:in:generateDecimatedMesh:)(v77, v76, v78, v79);
LABEL_199:
        Error = v122;
        swift_bridgeObjectRelease();

        return Error;
      }
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
LABEL_69:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, Error, &v193);
  if (!v194)
    goto LABEL_84;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_85;
  if (v191 == 0xD000000000000019 && v192 == 0x800000022BD09FA0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v80 & 1) == 0)
      goto LABEL_85;
  }
  specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, Error, &v193);
  if (!v194)
    goto LABEL_84;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_85;
  v82 = v191;
  v81 = v192;
  specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, Error, &v193);
  if (!v194)
  {
    swift_bridgeObjectRelease();
LABEL_84:
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
    goto LABEL_85;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v78 = (void *)v191;
    specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
    if (v194)
    {
      if (swift_dynamicCast())
        v83 = v191;
      else
        v83 = 2;
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
      v83 = 2;
    }
    v122 = USDImportService.loadBodyTracked(named:in:generateDecimatedMesh:)(v82, v81, v78, v83);
    goto LABEL_199;
  }
  swift_bridgeObjectRelease();
LABEL_85:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, Error, &v193);
  if (!v194)
  {
    v85 = &demangling cache variable for type metadata for Any?;
    v86 = &v193;
LABEL_100:
    outlined destroy of Any?((uint64_t)v86, v85);
    goto LABEL_101;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_101;
  if (v191 == 0xD000000000000016 && v192 == 0x800000022BD09F80)
  {
    swift_bridgeObjectRelease();
    v84 = (__int128 *)v190;
  }
  else
  {
    v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v84 = (__int128 *)v190;
    if ((v87 & 1) == 0)
      goto LABEL_101;
  }
  specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, Error, &v193);
  if (!v194)
  {
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
    (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v84, 1, 1, v47);
    goto LABEL_99;
  }
  v88 = swift_dynamicCast();
  (*(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v84, v88 ^ 1u, 1, v47);
  if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v51 + 48))(v84, 1, v47) == 1)
  {
LABEL_99:
    v85 = &demangling cache variable for type metadata for URL?;
    v86 = v84;
    goto LABEL_100;
  }
  v89 = v184;
  (*(void (**)(char *, __int128 *, uint64_t))(v51 + 32))(v184, v84, v47);
  specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, Error, &v193);
  if (!v194)
  {
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
    goto LABEL_132;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_132:
    (*(void (**)(char *, uint64_t))(v51 + 8))(v89, v47);
LABEL_101:
    specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, Error, &v193);
    if (!v194)
    {
      v92 = &demangling cache variable for type metadata for Any?;
      v93 = &v193;
LABEL_116:
      outlined destroy of Any?((uint64_t)v93, v92);
      goto LABEL_117;
    }
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (v191 == 0xD000000000000011 && v192 == 0x800000022BD09F40)
      {
        swift_bridgeObjectRelease();
        v91 = (__int128 *)v189;
LABEL_108:
        specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, Error, &v193);
        if (v194)
        {
          v95 = swift_dynamicCast();
          (*(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v91, v95 ^ 1u, 1, v47);
          if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v51 + 48))(v91, 1, v47) != 1)
          {
            v96 = v183;
            (*(void (**)(char *, __int128 *, uint64_t))(v51 + 32))(v183, v91, v47);
            specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, Error, &v193);
            if (v194)
            {
              v97 = swift_dynamicCast();
              v98 = v192;
              if (!v97)
                v98 = 0;
              v195 = v98;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
              v195 = 0;
            }
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
            if (v194)
            {
              v103 = (swift_dynamicCast() & v191);
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
              v103 = 0;
            }
            v104 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
            v105 = v188;
            v104(v188, v96, v47);
            v106 = v186;
            v104(v186, v105, v47);
            v107 = (uint64_t)v185;
            v104(v185, v106, v47);
            v108 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(v107, 0, 0, 0, 1);
            v109 = *(void (**)(char *, uint64_t))(v51 + 8);
            v109(v106, v47);
            if (v108)
            {
              if (v103)
              {
                if (String.count.getter() < 1)
                  v110 = (id)RIOPxrTfTokenEmpty();
                else
                  v110 = (id)RIOPxrTfTokenCreateWithCString();
                v114 = v110;
                v115 = (void *)RIOPxrUsdStageCopyRootLayer();
                type metadata accessor for SceneDescriptionFoundations.Layer();
                *(_QWORD *)(swift_allocObject() + 16) = v115;
                swift_setDeallocating();
                v116 = v115;
                SceneDescriptionFoundations.Layer.__deallocating_deinit();
                v117 = (void *)RIOPxrVtValueCreateWithBool();
                RIOPxrSdfLayerSetCustomLayerData();

              }
              swift_beginAccess();
              RIOImportSessionUpdateSynchronouslyOnEngineQueue();
              result = RIOImportSessionGetSceneCount();
              if (result < 0)
              {
                __break(1u);
                goto LABEL_252;
              }
              v118 = result;
              if (!result)
                goto LABEL_257;
              v119 = 0;
              v120 = 0;
              while (1)
              {
                if (RIOImportSessionIsSceneActive())
                {
                  v121 = __OFADD__(v119++, 1);
                  if (v121)
                    break;
                }
                if (v118 == ++v120)
                  goto LABEL_163;
              }
              __break(1u);
LABEL_163:
              if (v119 < 2)
              {
LABEL_257:
                type metadata accessor for AnchorEntity();
                if (swift_dynamicCastClass())
                {
                  swift_retain();
                  swift_release();
                  Error = swift_dynamicCastClassUnconditional();
                  v109(v188, v47);
                  v109(v96, v47);
LABEL_217:
                  swift_bridgeObjectRelease();
                  return Error;
                }
              }
              Error = type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
              swift_allocError();
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              swift_release();
            }
            else
            {
              Error = type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
              swift_allocError();
              v104(v111, v96, v47);
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
            }
            v109(v188, v47);
            v109(v96, v47);
            goto LABEL_217;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
          (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v91, 1, 1, v47);
        }
        v92 = &demangling cache variable for type metadata for URL?;
        v93 = v91;
        goto LABEL_116;
      }
      v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v91 = (__int128 *)v189;
      if ((v94 & 1) != 0)
        goto LABEL_108;
    }
LABEL_117:
    specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, Error, &v193);
    if (v194)
    {
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_144;
      if (v191 == 0xD000000000000013 && v192 == 0x800000022BD09F00)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v99 & 1) == 0)
          goto LABEL_144;
      }
      specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, Error, &v193);
      if (v194)
      {
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_144;
        v101 = v191;
        v100 = v192;
        specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, Error, &v193);
        if (v194)
        {
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v78 = (void *)v191;
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
            if (v194)
            {
              if (swift_dynamicCast())
                v102 = v191;
              else
                v102 = 2;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
              v102 = 2;
            }
            v122 = USDImportService.loadAnchor(named:in:generateDecimatedMesh:)(v101, v100, v78, v102);
            goto LABEL_199;
          }
          swift_bridgeObjectRelease();
LABEL_144:
          type metadata accessor for USDImportService.LoadError();
          lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
          swift_allocError();
          *v112 = Error;
          swift_storeEnumTagMultiPayload();
          swift_bridgeObjectRetain();
          swift_willThrow();
          return Error;
        }
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
    goto LABEL_144;
  }
  specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, Error, &v193);
  if (v194)
  {
    v90 = (swift_dynamicCast() & v191);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
    v90 = 0;
  }
  v123 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v123(v179, v89, v47);
  v123(v181, v89, v47);
  if (!specialized static USDImportService.loadModel_createImportSession(contentsOf:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:), v124))
  {
    v126 = v89;
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v123(v127, v89, v47);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_216:
    Error = *(_QWORD *)(v51 + 8);
    ((void (*)(char *, uint64_t))Error)(v179, v47);
    ((void (*)(char *, uint64_t))Error)(v181, v47);
    ((void (*)(char *, uint64_t))Error)(v126, v47);
    goto LABEL_217;
  }
  if (v90)
  {
    if (String.count.getter() < 1)
      v125 = (id)RIOPxrTfTokenEmpty();
    else
      v125 = (id)RIOPxrTfTokenCreateWithCString();
    v148 = v125;
    v149 = (void *)RIOPxrUsdStageCopyRootLayer();
    type metadata accessor for SceneDescriptionFoundations.Layer();
    *(_QWORD *)(swift_allocObject() + 16) = v149;
    swift_setDeallocating();
    v150 = v149;
    SceneDescriptionFoundations.Layer.__deallocating_deinit();
    v151 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();

  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  result = RIOImportSessionGetSceneCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v152 = result;
    if (!result)
      goto LABEL_211;
    v153 = 0;
    v154 = 0;
    while (1)
    {
      if (RIOImportSessionIsSceneActive())
      {
        v121 = __OFADD__(v153++, 1);
        if (v121)
          break;
      }
      if (v152 == ++v154)
        goto LABEL_210;
    }
    __break(1u);
LABEL_210:
    if (v153 >= 2)
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
LABEL_211:
      v155 = v187;
      specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:)((uint64_t)v181);
      if (!v155)
      {
        type metadata accessor for BodyTrackedEntity();
        if (swift_dynamicCastClass())
        {
          swift_release();
          Error = swift_dynamicCastClassUnconditional();
          v156 = *(void (**)(char *, uint64_t))(v51 + 8);
          v156(v179, v47);
          v156(v181, v47);
          v156(v184, v47);
          swift_bridgeObjectRelease();
          return Error;
        }
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
      }
    }
    swift_release();
    v126 = v184;
    goto LABEL_216;
  }
LABEL_252:
  __break(1u);
LABEL_253:
  __break(1u);
LABEL_254:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> USDImportService.loadAsync(with:)(Swift::OpaquePointer with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, char *, uint64_t);
  __int128 v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  void *v58;
  __int128 v59;
  char v60;
  int v61;
  void (*v62)(uint64_t, char *, uint64_t);
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  char *v68;
  char *v69;
  int v70;
  void **v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  int v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  void **v96;
  __int128 *v97;
  uint64_t *v98;
  __int128 *v99;
  char v100;
  int v101;
  void (*v102)(uint64_t, __int128 *, uint64_t);
  __int128 v103;
  int v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  int v118;
  uint64_t (*v119)(uint64_t);
  char v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  uint64_t v124;
  int v125;
  int v126;
  __int128 *v127;
  uint64_t *v128;
  __int128 *v129;
  char v130;
  int v131;
  uint64_t v132;
  void (*v133)(uint64_t (*)(uint64_t), __int128 *, uint64_t);
  uint64_t (*v134)(uint64_t);
  __int128 v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  Swift::OpaquePointer *v139;
  void **v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  _OWORD *v146;
  void (*v147)(char *, void **, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  void **v157;
  int v158;
  int v159;
  void *v160;
  _OWORD *v161;
  void (*v162)(char *, void **, uint64_t);
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t (*v171)(uint64_t);
  uint64_t v172;
  void (*v173)(char *, uint64_t (*)(uint64_t), uint64_t);
  char *v174;
  uint64_t (*v175)(uint64_t);
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  char *v187;
  void *v188;
  _OWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  void **v194;
  uint64_t (*v195)(uint64_t);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  void **v201;
  unsigned int (*v202)(void **, uint64_t, uint64_t);
  uint64_t v203;
  void *v204;
  _OWORD *v205;
  void (*v206)(uint64_t, void **, uint64_t);
  uint64_t v207;
  unint64_t v208;
  uint64_t (*v209)(uint64_t);
  uint64_t v210;
  uint64_t v211;
  void **v212;
  uint64_t v213;
  char *v214;
  void **v215;
  void **v216;
  void **v217;
  char *v218;
  uint64_t v219;
  uint64_t (*v220)(uint64_t);
  uint64_t (*v221)(uint64_t);
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  *(_QWORD *)&v226 = (char *)&v212 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v212 = (void **)((char *)&v212 - v6);
  MEMORY[0x24BDAC7A8](v7);
  v215 = (void **)((char *)&v212 - v8);
  MEMORY[0x24BDAC7A8](v9);
  *((_QWORD *)&v226 + 1) = (char *)&v212 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v216 = (void **)((char *)&v212 - v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v212 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v217 = (void **)((char *)&v212 - v17);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v212 - v19;
  v227 = type metadata accessor for URL();
  v231 = *(_QWORD *)(v227 - 8);
  v21 = *(char **)(v231 + 64);
  MEMORY[0x24BDAC7A8](v227);
  v221 = (uint64_t (*)(uint64_t))((char *)&v212 - ((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v22);
  v213 = (uint64_t)&v212 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v214 = (char *)&v212 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v225 = (uint64_t)&v212 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v219 = (uint64_t)&v212 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (uint64_t (*)(uint64_t))((char *)&v212 - v31);
  MEMORY[0x24BDAC7A8](v33);
  v222 = (uint64_t)&v212 - v34;
  MEMORY[0x24BDAC7A8](v35);
  v218 = (char *)&v212 - v36;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v212 - v38;
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v212 - v41;
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  v223 = v21;
  v224 = v1;
  v220 = v32;
  if (!v230)
  {
    v44 = &demangling cache variable for type metadata for Any?;
    v45 = (char *)&v229;
LABEL_16:
    outlined destroy of Any?((uint64_t)v45, v44);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v43 = v39;
    if (v228 == __PAIR128__(0x800000022BD0A0E0, 0xD000000000000010))
    {
      swift_bridgeObjectRelease();
LABEL_7:
      specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v229);
      if (v230)
      {
        v47 = v227;
        v48 = swift_dynamicCast();
        v49 = v231;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v231 + 56))(v20, v48 ^ 1u, 1, v47);
        v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
        v39 = v43;
        if (v50(v20, 1, v47) != 1)
        {
          v51 = *(void (**)(char *, char *, uint64_t))(v231 + 32);
          v51(v42, v20, v227);
          specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
          if (v230)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
            if ((swift_dynamicCast() & 1) != 0)
            {
              v52 = v228;
              swift_retain();
              specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
              v226 = v52;
              if (v230)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
                if (swift_dynamicCast())
                {
                  v53 = (uint64_t (*)(uint64_t))swift_allocObject();
                  *((_OWORD *)v53 + 1) = v228;
                  v220 = thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
                  v221 = v53;
LABEL_69:
                  v72 = v231;
                  specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
                  if (v230)
                  {
                    v73 = swift_dynamicCast();
                    v74 = *((_QWORD *)&v228 + 1);
                    if (!v73)
                      v74 = 0;
                    v225 = v74;
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
                    v225 = 0;
                  }
                  specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
                  if (v230)
                  {
                    v75 = swift_dynamicCast();
                    v76 = v228;
                    if (!v75)
                      v76 = 2;
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
                    v76 = 2;
                  }
                  LODWORD(v222) = v76;
                  v77 = type metadata accessor for Entity();
                  v78 = v227;
                  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v39, v42, v227);
                  v79 = (*(unsigned __int8 *)(v72 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
                  v80 = v39;
                  v81 = (unint64_t)&v223[v79 + 7] & 0xFFFFFFFFFFFFFFF8;
                  v82 = swift_allocObject();
                  v51((char *)(v82 + v79), v80, v78);
                  *(_QWORD *)(v82 + v81) = v77;
                  v83 = (_QWORD *)(v82 + ((v81 + 15) & 0xFFFFFFFFFFFFFFF8));
                  *v83 = 0;
                  v83[1] = 0;
                  v84 = *((_QWORD *)&v226 + 1);
                  swift_retain();
                  v85 = v220;
                  specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)v42, 0, 0, 0, v222, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v82, (uint64_t)v220, (uint64_t)v221, 0, 0, v224, (void (*)(void **))v226, v84);
                  swift_release();
                  swift_release();
                  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v85);
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  (*(void (**)(char *, uint64_t))(v231 + 8))(v42, v78);
                  return;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
              }
              v220 = 0;
              v221 = 0;
              goto LABEL_69;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
          }
          (*(void (**)(char *, uint64_t))(v231 + 8))(v42, v227);
          goto LABEL_17;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v231 + 56))(v20, 1, 1, v227);
      }
      v44 = &demangling cache variable for type metadata for URL?;
      v45 = v20;
      goto LABEL_16;
    }
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v46 & 1) != 0)
      goto LABEL_7;
  }
LABEL_17:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
    goto LABEL_21;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_22;
  if (v228 == __PAIR128__(0x800000022BD0A0C0, 0xD000000000000013))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v56 & 1) == 0)
      goto LABEL_22;
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
LABEL_21:
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_22;
  v57 = v228;
  specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
LABEL_80:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v58 = (void *)v228;
    specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
    if (v230)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if ((swift_dynamicCast() & 1) != 0)
      {
        v59 = v228;
        swift_retain_n();
        specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
        v226 = v59;
        if (v230)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
          if (swift_dynamicCast())
          {
            v225 = swift_allocObject();
            *(_OWORD *)(v225 + 16) = v228;
            v222 = (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
LABEL_196:
            v140 = v217;
            specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
            if (v230)
            {
              v141 = swift_dynamicCast();
              v142 = v228;
              if (!v141)
                v142 = 2;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
              v142 = 2;
            }
            LODWORD(v220) = v142;
            type metadata accessor for USDImportService();
            static USDImportService.urlForUSD(named:in:)(v57, *((uint64_t *)&v57 + 1), v58, v140);
            v143 = v231;
            v144 = v227;
            if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v231 + 48))(v140, 1, v227) == 1)
            {
              outlined destroy of Any?((uint64_t)v140, &demangling cache variable for type metadata for URL?);
              type metadata accessor for USDImportService.LoadError();
              lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
              v145 = (void *)swift_allocError();
              *v146 = v57;
              swift_storeEnumTagMultiPayload();
              *(_QWORD *)&v229 = v145;
              BYTE8(v229) = 1;
              swift_bridgeObjectRetain();
              ((void (*)(__int128 *))v226)(&v229);

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v222);
              swift_bridgeObjectRelease();

            }
            else
            {
              v147 = *(void (**)(char *, void **, uint64_t))(v143 + 32);
              v221 = (uint64_t (*)(uint64_t))v58;
              v148 = v218;
              v147(v218, v140, v144);
              v217 = (void **)type metadata accessor for Entity();
              (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v39, v148, v144);
              v149 = *(unsigned __int8 *)(v143 + 80);
              v219 = *((_QWORD *)&v57 + 1);
              v150 = (v149 + 16) & ~v149;
              v151 = (unint64_t)&v223[v150 + 7] & 0xFFFFFFFFFFFFFFF8;
              v152 = swift_allocObject();
              v147((char *)(v152 + v150), (void **)v39, v144);
              *(_QWORD *)(v152 + v151) = v217;
              v153 = (_QWORD *)(v152 + ((v151 + 15) & 0xFFFFFFFFFFFFFFF8));
              *v153 = 0;
              v153[1] = 0;
              v154 = *((_QWORD *)&v226 + 1);
              swift_retain();
              v155 = v218;
              v156 = v222;
              specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)v218, v57, v219, v221, (int)v220, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v152, v222, v225, 0, 0, v224, (void (*)(void **))v226, v154);
              swift_release();
              swift_release();
              (*(void (**)(char *, uint64_t))(v143 + 8))(v155, v144);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v156);
              swift_bridgeObjectRelease();

            }
            goto LABEL_232;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
        }
        v222 = 0;
        v225 = 0;
        goto LABEL_196;
      }

      goto LABEL_188;
    }

    goto LABEL_80;
  }
LABEL_188:
  swift_bridgeObjectRelease();
LABEL_22:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    v54 = v227;
    v55 = v231;
    goto LABEL_28;
  }
  v54 = v227;
  v55 = v231;
  if (v228 == __PAIR128__(0x800000022BD0A0A0, 0xD000000000000015))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
      goto LABEL_28;
  }
  specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v229);
  if (v230)
  {
    v61 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v15, v61 ^ 1u, 1, v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v15, 1, v54) != 1)
    {
      v62 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 32);
      v63 = v222;
      v62(v222, v15, v54);
      specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
      if (v230)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
        if ((swift_dynamicCast() & 1) != 0)
        {
          v226 = v228;
          swift_retain();
          specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
          if (v230)
          {
            v64 = swift_dynamicCast();
            v65 = *((_QWORD *)&v228 + 1);
            if (!v64)
              v65 = 0;
            v225 = v65;
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
            v225 = 0;
          }
          specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
          if (v230)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
            if (swift_dynamicCast())
            {
              v219 = swift_allocObject();
              *(_OWORD *)(v219 + 16) = v228;
              v217 = (void **)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
LABEL_88:
              specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
              v218 = (char *)v62;
              if (v230)
              {
                if (swift_dynamicCast())
                  v86 = v228;
                else
                  v86 = 2;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
                v86 = 2;
              }
              LODWORD(v221) = v86;
              v87 = v231;
              v88 = *(void (**)(char *, uint64_t, uint64_t))(v231 + 16);
              v88(v39, v63, v54);
              v89 = v39;
              v90 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
              v91 = swift_allocObject();
              v92 = v218;
              ((void (*)(unint64_t, char *, uint64_t))v218)(v91 + v90, v89, v54);
              v93 = v220;
              v88((char *)v220, v63, v54);
              v94 = swift_allocObject();
              ((void (*)(unint64_t, uint64_t (*)(uint64_t), uint64_t))v92)(v94 + v90, v93, v54);
              v95 = *((_QWORD *)&v226 + 1);
              swift_retain();
              v96 = v217;
              specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v63, 0, 0, 0, (int)v221, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v91, (uint64_t)v217, v219, (uint64_t)partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v94, v224, (void (*)(void **))v226, v95);
              swift_release();
              swift_release();
              swift_release();
              outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v96);
              swift_bridgeObjectRelease();
              swift_release_n();
              (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v63, v54);
              return;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
          }
          v217 = 0;
          v219 = 0;
          goto LABEL_88;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
      }
      v55 = v231;
      (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v63, v54);
      goto LABEL_28;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v15, 1, 1, v54);
  }
  outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
LABEL_28:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
    goto LABEL_96;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_97;
  if (v228 == __PAIR128__(0x800000022BD0A080, 0xD000000000000018))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
      goto LABEL_97;
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
    goto LABEL_96;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_97;
  v67 = v228;
  specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
LABEL_95:
    swift_bridgeObjectRelease();
LABEL_96:
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    goto LABEL_97;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v68 = (char *)v228;
    specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
    if (v230)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if ((swift_dynamicCast() & 1) != 0)
      {
        v69 = v68;
        v226 = v228;
        swift_retain_n();
        specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
        if (v230)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
          v70 = swift_dynamicCast();
          v71 = v216;
          if (v70)
          {
            v225 = swift_allocObject();
            *(_OWORD *)(v225 + 16) = v228;
            v222 = (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
          }
          else
          {
            v222 = 0;
            v225 = 0;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
          v222 = 0;
          v225 = 0;
          v71 = v216;
        }
        specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
        if (v230)
        {
          v185 = swift_dynamicCast();
          v186 = v228;
          if (!v185)
            v186 = 2;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
          v186 = 2;
        }
        LODWORD(v221) = v186;
        type metadata accessor for USDImportService();
        v187 = v69;
        static USDImportService.urlForUSD(named:in:)(v67, *((uint64_t *)&v67 + 1), v69, v71);
        if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v55 + 48))(v71, 1, v54) == 1)
        {
          outlined destroy of Any?((uint64_t)v71, &demangling cache variable for type metadata for URL?);
          type metadata accessor for USDImportService.LoadError();
          lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
          v188 = (void *)swift_allocError();
          *v189 = v67;
          swift_storeEnumTagMultiPayload();
          *(_QWORD *)&v229 = v188;
          BYTE8(v229) = 1;
          swift_bridgeObjectRetain();
          ((void (*)(__int128 *))v226)(&v229);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v222);
        }
        else
        {
          v217 = *(void ***)(v55 + 32);
          v190 = v219;
          ((void (*)(uint64_t, void **, uint64_t))v217)(v219, v71, v54);
          v216 = *(void ***)(v55 + 16);
          ((void (*)(char *, uint64_t, uint64_t))v216)(v39, v190, v54);
          v191 = *(unsigned __int8 *)(v55 + 80);
          v218 = v187;
          v192 = v39;
          v193 = (v191 + 16) & ~v191;
          v223 = (char *)swift_allocObject();
          v194 = v217;
          ((void (*)(char *, char *, uint64_t))v217)(&v223[v193], v192, v54);
          v196 = v219;
          v195 = v220;
          ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v216)(v220, v219, v54);
          v197 = swift_allocObject();
          ((void (*)(uint64_t, uint64_t (*)(uint64_t), uint64_t))v194)(v197 + v193, v195, v54);
          v198 = *((_QWORD *)&v226 + 1);
          swift_retain();
          v187 = v218;
          v199 = v222;
          specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v196, v67, *((uint64_t *)&v67 + 1), v218, (int)v221, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), (uint64_t)v223, v222, v225, (uint64_t)partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v197, v224, (void (*)(void **))v226, v198);
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v219, v54);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v199);
        }
        swift_bridgeObjectRelease();

        goto LABEL_232;
      }

      goto LABEL_190;
    }

    goto LABEL_95;
  }
LABEL_190:
  swift_bridgeObjectRelease();
LABEL_97:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
    v98 = &demangling cache variable for type metadata for Any?;
    v99 = &v229;
LABEL_113:
    outlined destroy of Any?((uint64_t)v99, v98);
    goto LABEL_114;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (v228 == __PAIR128__(0x800000022BD0A060, 0xD000000000000016))
    {
      swift_bridgeObjectRelease();
      v97 = (__int128 *)*((_QWORD *)&v226 + 1);
LABEL_103:
      specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v229);
      if (v230)
      {
        v101 = swift_dynamicCast();
        (*(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v97, v101 ^ 1u, 1, v54);
        if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v55 + 48))(v97, 1, v54) != 1)
        {
          v102 = *(void (**)(uint64_t, __int128 *, uint64_t))(v55 + 32);
          v102(v225, v97, v54);
          specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
          if (v230)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
            if ((swift_dynamicCast() & 1) != 0)
            {
              v103 = v228;
              swift_retain();
              specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
              if (v230)
              {
                v104 = swift_dynamicCast();
                v105 = *((_QWORD *)&v228 + 1);
                if (!v104)
                  v105 = 0;
                *(_QWORD *)&v226 = v105;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
                *(_QWORD *)&v226 = 0;
              }
              specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
              if (v230)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
                if (swift_dynamicCast())
                {
                  v110 = swift_allocObject();
                  *(_OWORD *)(v110 + 16) = v228;
                  v221 = thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
                  v222 = v110;
LABEL_136:
                  specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
                  *((_QWORD *)&v226 + 1) = v103;
                  if (v230)
                  {
                    if (swift_dynamicCast())
                      v111 = v228;
                    else
                      v111 = 2;
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
                    v111 = 2;
                  }
                  v112 = v225;
                  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v39, v225, v54);
                  v113 = (*(unsigned __int8 *)(v55 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
                  v114 = v54;
                  v115 = (unint64_t)&v223[v113 + 7] & 0xFFFFFFFFFFFFFFF8;
                  v116 = swift_allocObject();
                  v102(v116 + v113, (__int128 *)v39, v114);
                  v117 = (_QWORD *)(v116 + v115);
                  *v117 = 0;
                  v117[1] = 0;
                  swift_retain();
                  v118 = v111;
                  v119 = v221;
                  specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v112, 0, 0, 0, v118, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v116, (uint64_t)v221, v222, 0, 0, v224, *((void (**)(void **))&v226 + 1), *((uint64_t *)&v103 + 1));
                  swift_release();
                  swift_release();
                  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v119);
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v112, v114);
                  return;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
              }
              v221 = 0;
              v222 = 0;
              goto LABEL_136;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
          }
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v225, v54);
          goto LABEL_114;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
        (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v97, 1, 1, v54);
      }
      v98 = &demangling cache variable for type metadata for URL?;
      v99 = v97;
      goto LABEL_113;
    }
    v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v97 = (__int128 *)*((_QWORD *)&v226 + 1);
    if ((v100 & 1) != 0)
      goto LABEL_103;
  }
LABEL_114:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
    goto LABEL_144;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_145;
  if (v228 == __PAIR128__(0x800000022BD0A040, 0xD000000000000018))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v106 & 1) == 0)
      goto LABEL_145;
  }
  specialized Dictionary.subscript.getter(0x64656D616ELL, 0xE500000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
LABEL_144:
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    goto LABEL_145;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v107 = v228;
    specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v229);
    if (v230)
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_192:
        swift_bridgeObjectRelease();
        goto LABEL_145;
      }
      v108 = (void *)v228;
      specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
      if (v230)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
        if ((swift_dynamicCast() & 1) != 0)
        {
          v109 = *((_QWORD *)&v228 + 1);
          *(_QWORD *)&v226 = v228;
          swift_retain_n();
          specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
          *((_QWORD *)&v226 + 1) = v109;
          if (v230)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
            if (swift_dynamicCast())
            {
              v225 = swift_allocObject();
              *(_OWORD *)(v225 + 16) = v228;
              v222 = (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply;
LABEL_206:
              v157 = v215;
              specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
              if (v230)
              {
                if (swift_dynamicCast())
                  v158 = v228;
                else
                  v158 = 2;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
                v158 = 2;
              }
              static USDImportService.urlForUSD(named:in:)(v107, *((uint64_t *)&v107 + 1), v108, v157);
              if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v55 + 48))(v157, 1, v54) == 1)
              {
                outlined destroy of Any?((uint64_t)v157, &demangling cache variable for type metadata for URL?);
                type metadata accessor for USDImportService.LoadError();
                lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
                v160 = (void *)swift_allocError();
                *v161 = v107;
                swift_storeEnumTagMultiPayload();
                *(_QWORD *)&v229 = v160;
                BYTE8(v229) = 1;
                swift_bridgeObjectRetain();
                ((void (*)(__int128 *))v226)(&v229);

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v222);
                swift_bridgeObjectRelease();

              }
              else
              {
                LODWORD(v221) = v158;
                v162 = *(void (**)(char *, void **, uint64_t))(v55 + 32);
                v220 = (uint64_t (*)(uint64_t))v108;
                v163 = (uint64_t)v214;
                v162(v214, v157, v54);
                (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v39, v163, v54);
                v164 = (*(unsigned __int8 *)(v55 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
                v165 = (unint64_t)&v223[v164 + 7] & 0xFFFFFFFFFFFFFFF8;
                v166 = swift_allocObject();
                v167 = v166 + v164;
                v168 = v227;
                v162((char *)v167, (void **)v39, v227);
                v169 = (_QWORD *)(v166 + v165);
                *v169 = 0;
                v169[1] = 0;
                v170 = *((_QWORD *)&v226 + 1);
                swift_retain();
                v171 = v220;
                v172 = v222;
                specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v163, v107, *((uint64_t *)&v107 + 1), v220, (int)v221, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v166, v222, v225, 0, 0, v224, (void (*)(void **))v226, v170);
                swift_release();
                swift_release();
                (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v163, v168);
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v172);
                swift_bridgeObjectRelease();

              }
LABEL_232:
              swift_release_n();
              return;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
          }
          v222 = 0;
          v225 = 0;
          goto LABEL_206;
        }

        goto LABEL_192;
      }

    }
    swift_bridgeObjectRelease();
    goto LABEL_144;
  }
LABEL_145:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
    goto LABEL_161;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_162;
  if (v228 == __PAIR128__(0x800000022BD0A020, 0xD00000000000001ELL))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v120 & 1) == 0)
      goto LABEL_162;
  }
  specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
LABEL_161:
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    goto LABEL_162;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v121 = v228;
    specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
    if (v230)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if ((swift_dynamicCast() & 1) != 0)
      {
        v122 = v228;
        swift_retain_n();
        specialized Dictionary.subscript.getter(0x656C646E7562, 0xE600000000000000, (uint64_t)with._rawValue, &v229);
        if (v230)
        {
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_234:
            swift_release_n();
            swift_bridgeObjectRelease();
            goto LABEL_235;
          }
          *((_QWORD *)&v226 + 1) = v122;
          v123 = (char *)v228;
          specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
          if (v230)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
            if ((swift_dynamicCast() & 1) != 0)
            {
              v124 = swift_allocObject();
              *(_OWORD *)(v124 + 16) = v228;
              specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
              if (v230)
              {
                v125 = swift_dynamicCast();
                v126 = v228;
                if (!v125)
                  v126 = 2;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
                v126 = 2;
              }
              LODWORD(v225) = v126;
              v200 = v123;
              swift_retain();
              v201 = v212;
              static USDImportService.urlForUSD(named:in:)(v121, *((uint64_t *)&v121 + 1), v123, v212);
              v202 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v231 + 48);
              *(_QWORD *)&v226 = v124;
              v203 = v227;
              if (v202(v201, 1, v227) == 1)
              {
                outlined destroy of Any?((uint64_t)v201, &demangling cache variable for type metadata for URL?);
                type metadata accessor for USDImportService.LoadError();
                lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
                v204 = (void *)swift_allocError();
                *v205 = v121;
                swift_storeEnumTagMultiPayload();
                *(_QWORD *)&v229 = v204;
                BYTE8(v229) = 1;
                swift_bridgeObjectRetain();
                (*((void (**)(__int128 *))&v226 + 1))(&v229);

                swift_release_n();
                swift_release_n();
                swift_bridgeObjectRelease();
              }
              else
              {
                v206 = *(void (**)(uint64_t, void **, uint64_t))(v122 + 32);
                v207 = v213;
                v206(v213, v201, v203);
                v221 = *(uint64_t (**)(uint64_t))(v122 + 16);
                ((void (*)(char *, uint64_t, uint64_t))v221)(v39, v207, v203);
                v208 = (*(unsigned __int8 *)(v122 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
                v222 = swift_allocObject();
                v206(v222 + v208, (void **)v39, v203);
                v223 = v200;
                v209 = v220;
                ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v221)(v220, v213, v203);
                v210 = swift_allocObject();
                v206(v210 + v208, (void **)v209, v203);
                swift_retain();
                swift_bridgeObjectRetain();
                v211 = v213;
                specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v213, 0, 0, 0, v225, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), v222, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error)partial apply, v226, (uint64_t)partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), v210, v224, *((void (**)(void **))&v226 + 1), *((uint64_t *)&v122 + 1));
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v211, v203);
                swift_bridgeObjectRelease();
                swift_release_n();

                swift_release_n();
              }
              return;
            }

            goto LABEL_234;
          }

        }
        swift_release_n();
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
LABEL_235:
        v55 = v231;
        goto LABEL_162;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    }
  }
LABEL_162:
  specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
    v128 = &demangling cache variable for type metadata for Any?;
    v129 = &v229;
LABEL_180:
    outlined destroy of Any?((uint64_t)v129, v128);
    goto LABEL_181;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_181;
  if (v228 == __PAIR128__(0x800000022BD0A000, 0xD00000000000001BLL))
  {
    swift_bridgeObjectRelease();
    v127 = (__int128 *)v226;
    goto LABEL_168;
  }
  v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v127 = (__int128 *)v226;
  if ((v130 & 1) == 0)
  {
LABEL_181:
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v139->_rawValue = with._rawValue;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    return;
  }
LABEL_168:
  specialized Dictionary.subscript.getter(0x73746E65746E6F63, 0xEA0000000000664FLL, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v127, 1, 1, v54);
    goto LABEL_179;
  }
  v131 = swift_dynamicCast();
  (*(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v127, v131 ^ 1u, 1, v54);
  if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v55 + 48))(v127, 1, v54) == 1)
  {
LABEL_179:
    v128 = &demangling cache variable for type metadata for URL?;
    v129 = v127;
    goto LABEL_180;
  }
  v132 = v54;
  v133 = *(void (**)(uint64_t (*)(uint64_t), __int128 *, uint64_t))(v55 + 32);
  v134 = v221;
  v133(v221, v127, v132);
  specialized Dictionary.subscript.getter(0x6C6C69666C7566, 0xE700000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    goto LABEL_184;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_184:
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v55 + 8))(v134, v227);
    goto LABEL_181;
  }
  v135 = v228;
  swift_retain();
  specialized Dictionary.subscript.getter(0x64616F4C74736F70, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
  if (!v230)
  {
    swift_release_n();
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    goto LABEL_184;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release_n();
    goto LABEL_184;
  }
  v136 = swift_allocObject();
  *(_OWORD *)(v136 + 16) = v228;
  specialized Dictionary.subscript.getter(0x656D614E68746977, 0xE800000000000000, (uint64_t)with._rawValue, &v229);
  if (v230)
  {
    v137 = swift_dynamicCast();
    v138 = *((_QWORD *)&v228 + 1);
    if (!v137)
      v138 = 0;
    v222 = v138;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    v222 = 0;
  }
  specialized Dictionary.subscript.getter(0xD000000000000015, 0x800000022BD09F20, (uint64_t)with._rawValue, &v229);
  *(_QWORD *)&v226 = v136;
  v225 = *((_QWORD *)&v135 + 1);
  *((_QWORD *)&v226 + 1) = v135;
  if (v230)
  {
    if (swift_dynamicCast())
      v159 = v228;
    else
      v159 = 2;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
    v159 = 2;
  }
  LODWORD(v219) = v159;
  v173 = *(void (**)(char *, uint64_t (*)(uint64_t), uint64_t))(v55 + 16);
  v174 = v39;
  v175 = v134;
  v176 = (uint64_t)v134;
  v177 = v39;
  v178 = v227;
  v173(v174, v175, v227);
  v179 = (*(unsigned __int8 *)(v55 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  v180 = swift_allocObject();
  v133((uint64_t (*)(uint64_t))(v180 + v179), (__int128 *)v177, v178);
  v181 = v220;
  v173((char *)v220, (uint64_t (*)(uint64_t))v176, v178);
  v182 = swift_allocObject();
  v133((uint64_t (*)(uint64_t))(v182 + v179), (__int128 *)v181, v178);
  v183 = v225;
  swift_retain();
  v184 = v226;
  swift_retain();
  specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v176, 0, 0, 0, v219, (uint64_t (*)(uint64_t))partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), v180, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [String : Any]) -> (@out (), @error @owned Error), v184, (uint64_t)partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:), v182, v224, *((void (**)(void **))&v226 + 1), v183);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release();
  swift_release();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v176, v178);
}

uint64_t specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, void (*a9)(unint64_t))
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  if (a5)
  {
    v16 = result;
    swift_beginAccess();
    result = RIOImportSessionGetSceneCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v17 = result;
      if (result)
      {
        v35 = a1;
        v18 = a2;
        v19 = v16;
        v20 = v14;
        v21 = a3;
        v22 = a4;
        v23 = 0;
        v24 = 0;
        while (1)
        {
          if (RIOImportSessionIsSceneActive())
          {
            if (__OFADD__(v23++, 1))
              break;
          }
          if (v17 == ++v24)
            goto LABEL_10;
        }
        __break(1u);
LABEL_10:
        v26 = v23 < 2;
        a4 = v22;
        a3 = v21;
        v14 = v20;
        v16 = v19;
        a2 = v18;
        a1 = v35;
        if (!v26)
          goto LABEL_11;
      }
      if (a6)
      {
        swift_retain();
        v27 = a6(a1);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a6);
        *(_QWORD *)(v14 + 16) = v27;
      }
      else
      {
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(a5 + 24);
        swift_retain();
      }
      swift_release();
      v29 = *(_QWORD *)(v14 + 16);
      if (v29)
      {
        swift_retain();
        v30 = specialized USDImportService.generatePostLoadData(from:entity:)(a1, v29);
        swift_release();
        if (*(_QWORD *)(v30 + 16))
        {
          if (a9)
            a9(v30);
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        v28 = swift_allocError();
        v32 = v31;
        v33 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, a4, v33);
      }
      else
      {
LABEL_11:
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        v28 = swift_allocError();
      }
      swift_storeEnumTagMultiPayload();
      v34 = *(void **)(v16 + 16);
      *(_QWORD *)(v16 + 16) = v28;

LABEL_23:
      specialized $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(a1, v16, a2, a3, v14, a4, (uint64_t)&unk_24F63BF20, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_16);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, void (*a9)(unint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD))
{
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  if (a5)
  {
    v21 = result;
    swift_beginAccess();
    result = RIOImportSessionGetSceneCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v22 = result;
      if (result)
      {
        v40 = a1;
        v23 = a2;
        v24 = v21;
        v25 = v19;
        v26 = a3;
        v27 = a4;
        v28 = 0;
        v29 = 0;
        while (1)
        {
          if (RIOImportSessionIsSceneActive())
          {
            if (__OFADD__(v28++, 1))
              break;
          }
          if (v22 == ++v29)
            goto LABEL_10;
        }
        __break(1u);
LABEL_10:
        v31 = v28 < 2;
        a4 = v27;
        a3 = v26;
        v19 = v25;
        v21 = v24;
        a2 = v23;
        a1 = v40;
        if (!v31)
          goto LABEL_21;
      }
      if (a6)
      {
        swift_retain();
        v32 = a6(a1);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a6);
        *(_QWORD *)(v19 + 16) = v32;
      }
      else
      {
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(a5 + 24);
        swift_retain();
      }
      swift_release();
      v33 = *(_QWORD *)(v19 + 16);
      if (v33 && (a14(0), swift_dynamicCastClass()))
      {
        swift_retain();
        v34 = specialized USDImportService.generatePostLoadData(from:entity:)(a1, v33);
        swift_release();
        if (*(_QWORD *)(v34 + 16))
        {
          if (a9)
            a9(v34);
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        v35 = swift_allocError();
        v38 = v37;
        v39 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v38, a4, v39);
      }
      else
      {
LABEL_21:
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        v35 = swift_allocError();
      }
      swift_storeEnumTagMultiPayload();
      v36 = *(void **)(v21 + 16);
      *(_QWORD *)(v21 + 16) = v35;

LABEL_23:
      specialized $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(a1, v21, a2, a3, v19, a4, a11, a12, a13);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];

  v37 = a5;
  v38 = a8;
  v33 = a6;
  v34 = a7;
  v35 = a3;
  v36 = a4;
  v39 = a9;
  v40 = type metadata accessor for DispatchWorkItemFlags();
  v43 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v41 = *(_QWORD *)(v13 - 8);
  v42 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  v21 = *v20;
  *v20 = 0;
  v20[1] = 0;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
  ImportSession.sceneUpdatePassCompletion.didset();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  v32 = __Engine.queue.getter();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v33, v16);
  v22 = (*(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v23 = (char *)swift_allocObject();
  v24 = v35;
  v25 = v36;
  *((_QWORD *)v23 + 2) = a2;
  *((_QWORD *)v23 + 3) = v24;
  v26 = v37;
  *((_QWORD *)v23 + 4) = v25;
  *((_QWORD *)v23 + 5) = v26;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v23[v22], v19, v16);
  aBlock[4] = v38;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v39;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v44 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v28 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v29 = (void *)v32;
  MEMORY[0x22E2F559C](0, v15, v12, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v42);
  return swift_release();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  return swift_retain();
}

_QWORD *specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, double);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v18 - v12, a1, v6, v11);
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  v15 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)((uint64_t)v9, 0, 0, 0, a2, 1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  if (a3 && v15)
  {
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)a3);
    v16 = swift_retain();
    a3(v16);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a3);
  }
  return v15;
}

_QWORD *specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v16 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  v13 = specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)((uint64_t)v7, 0, 0, 0, 1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  if (a2 && v13)
  {
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    v14 = swift_retain();
    a2(v14);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
  }
  return v13;
}

uint64_t USDImportService.load(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, void **, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v26 - v15;
  v31 = a1;
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v9);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for ModelEntity();
    swift_allocObject();
    return ModelEntity.init()();
  }
  else
  {
    v29 = a3;
    v17 = *(void (**)(char *, void **, uint64_t))(v11 + 32);
    v17(v16, v9, v10);
    v27 = type metadata accessor for Entity();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    v18 = *(unsigned __int8 *)(v11 + 80);
    v28 = a2;
    v19 = (v18 + 16) & ~v18;
    v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject();
    v17((char *)(v21 + v19), (void **)v13, v10);
    *(_QWORD *)(v21 + v20) = v27;
    v22 = (_QWORD *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8));
    *v22 = 0;
    v22[1] = 0;
    v23 = v32;
    v24 = specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)((uint64_t)v16, partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v21, 0, 0, v31, v28, v29, v30);
    v32 = v23;
    if (!v23)
      v17 = (void (*)(char *, void **, uint64_t))v24;
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  return (uint64_t)v17;
}

uint64_t USDImportService.loadModel(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, void **, uint64_t);
  void *v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v34 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v29 - v17;
  v36 = a1;
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v9);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for ModelEntity();
    swift_allocObject();
    return ModelEntity.init()();
  }
  else
  {
    v31 = *(void (**)(char *, void **, uint64_t))(v11 + 32);
    v31(v18, v9, v10);
    v33 = a2;
    v30 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v30(v15, v18, v10);
    v20 = *(unsigned __int8 *)(v11 + 80);
    v21 = (v20 + 16) & ~v20;
    v32 = a3;
    v19 = v20 | 7;
    v22 = swift_allocObject();
    v23 = (void (*)(uint64_t, char *, uint64_t))v31;
    v31((char *)(v22 + v21), (void **)v15, v10);
    v24 = v34;
    v30(v34, v18, v10);
    v25 = swift_allocObject();
    v23(v25 + v21, v24, v10);
    v26 = v37;
    v27 = specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)((uint64_t)v18, partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v22, (uint64_t)partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:), v25, v36, v33, v32, v35);
    v37 = v26;
    if (!v26)
      v19 = v27;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    swift_release();
    swift_release();
  }
  return v19;
}

uint64_t USDImportService.loadAnchor(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, void **, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  int v29;
  uint64_t v30;

  v29 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v26 - v15;
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v9);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for AnchorEntity();
    swift_allocObject();
    return MEMORY[0x22E2F42A0]();
  }
  else
  {
    v26 = a3;
    v17 = *(void (**)(char *, void **, uint64_t))(v11 + 32);
    v17(v16, v9, v10);
    URL.deletingPathExtension()();
    URL.lastPathComponent.getter();
    v28 = v18;
    v27 = *(void (**)(char *, uint64_t))(v11 + 8);
    v27(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    v19 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject();
    v17((char *)(v21 + v19), (void **)v13, v10);
    v22 = (_QWORD *)(v21 + v20);
    *v22 = 0;
    v22[1] = 0;
    v23 = v30;
    v24 = specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)((uint64_t)v16, partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:), v21, 0, 0, a1, a2, v26, v29);
    if (!v23)
      v17 = (void (*)(char *, void **, uint64_t))v24;
    swift_release();
    v27(v16, v10);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v17;
}

uint64_t USDImportService.loadBodyTracked(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  void (*v21)(char *, char *, uint64_t);
  NSURL *v22;
  uint64_t v23;
  id v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, uint64_t);
  _QWORD v40[3];
  char *v41;

  LODWORD(v41) = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)((char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v40 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v40 - v18;
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v9);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    *v20 = a1;
    v20[1] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    return (uint64_t)v13;
  }
  (*(void (**)(char *, void **, uint64_t))(v11 + 32))(v19, v9, v10);
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v21(v16, v19, v10);
  v21(v13, v19, v10);
  swift_bridgeObjectRetain();
  v23 = specialized static USDImportService.loadModel_createImportSession(contentsOf:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:), v22);
  if (!v23)
  {
    type metadata accessor for USDImportService.LoadError();
    v41 = v16;
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v21(v25, v19, v10);
    v16 = v41;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_25;
  }
  v40[1] = v23;
  if ((v41 & 1) != 0)
  {
    if (String.count.getter() < 1)
      v24 = (id)RIOPxrTfTokenEmpty();
    else
      v24 = (id)RIOPxrTfTokenCreateWithCString();
    v26 = v24;
    v27 = (void *)RIOPxrUsdStageCopyRootLayer();
    v28 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();

  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  result = RIOImportSessionGetSceneCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v30 = result;
    if (!result)
      goto LABEL_20;
    v41 = v19;
    v31 = v13;
    v32 = 0;
    v33 = 0;
    while (1)
    {
      if (RIOImportSessionIsSceneActive())
      {
        if (__OFADD__(v32++, 1))
          break;
      }
      if (v30 == ++v33)
        goto LABEL_18;
    }
    __break(1u);
LABEL_18:
    v35 = v32 < 2;
    v13 = v31;
    v19 = v41;
    if (v35)
    {
LABEL_20:
      v36 = v40[2];
      specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:)((uint64_t)v13);
      if (!v36)
      {
        type metadata accessor for BodyTrackedEntity();
        if (swift_dynamicCastClass())
        {
          swift_release();
          v37 = v13;
          v13 = (char *)swift_dynamicCastClassUnconditional();
          v38 = *(void (**)(char *, uint64_t))(v11 + 8);
          v38(v16, v10);
          v38(v37, v10);
          v38(v19, v10);
          swift_bridgeObjectRelease();
          return (uint64_t)v13;
        }
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
      }
    }
    else
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
LABEL_25:
    v39 = *(void (**)(char *, uint64_t))(v11 + 8);
    v39(v16, v10);
    v39(v13, v10);
    v39(v19, v10);
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  __break(1u);
  return result;
}

uint64_t USDImportService.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t USDImportService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for USDImportService.init() in conformance USDImportService(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  type metadata accessor for USDImportService();
  v2 = swift_allocObject();
  static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v3 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  *a1 = v2;
}

BOOL protocol witness for USDImportService.canLoad(named:in:) in conformance USDImportService(uint64_t a1, uint64_t a2, NSBundle a3)
{
  return USDImportService.canLoad(named:in:)(*(Swift::String *)&a1, a3);
}

uint64_t protocol witness for USDImportService.load(with:) in conformance USDImportService(uint64_t a1)
{
  return USDImportService.load(with:)(a1);
}

void protocol witness for USDImportService.loadAsync(with:) in conformance USDImportService(Swift::OpaquePointer a1)
{
  USDImportService.loadAsync(with:)(a1);
}

void specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_beginAccess();
  v9 = *(void **)(a1 + 16);
  if (v9)
  {
    v10 = v9;
LABEL_3:
    a2(v9, 1);

    return;
  }
  swift_beginAccess();
  if (!*(_QWORD *)(a4 + 16))
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    v9 = (void *)swift_allocError();
    v13 = v12;
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, a5, v14);
    swift_storeEnumTagMultiPayload();
    goto LABEL_3;
  }
  v11 = swift_retain();
  a2((void *)v11, 0);
  swift_release();
}

void specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD))
{
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_beginAccess();
  v11 = *(void **)(a1 + 16);
  if (v11)
  {
    v12 = v11;
    a2(v11, 1);
    v13 = v11;
  }
  else
  {
    swift_beginAccess();
    if (*(_QWORD *)(a4 + 16))
    {
      a6(0);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v15 = v14;
        swift_retain();
        a2((void *)v15, 0);
        swift_release();
        return;
      }
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
      v20 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      a2((void *)v20, 1);
      v13 = (void *)v20;
    }
    else
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
      v16 = swift_allocError();
      v18 = v17;
      v19 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, a5, v19);
      swift_storeEnumTagMultiPayload();
      a2((void *)v16, 1);
      v13 = (void *)v16;
    }
  }

}

uint64_t specialized static USDImportService.canLoad(url:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v10;
  char v11;

  if ((URL.isFileURL.getter() & 1) == 0)
    return 0;
  if (one-time initialization token for supportedFilePathExtensions != -1)
    swift_once();
  v0 = static USDImportService.supportedFilePathExtensions;
  v1 = *(_QWORD *)(static USDImportService.supportedFilePathExtensions + 16);
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    v2 = (uint64_t *)(v0 + 40);
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v5 = *v2;
      if (*v2)
      {
        v6 = *(v2 - 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
        v3[2] = v8 + 1;
        v4 = &v3[2 * v8];
        v4[4] = v6;
        v4[5] = v5;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  URL.pathExtension.getter();
  v10 = String.lowercased()();
  swift_bridgeObjectRelease();
  v11 = specialized Sequence<>.contains(_:)(v10._countAndFlagsBits, (uint64_t)v10._object, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t type metadata accessor for USDImportService.LoadError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for USDImportService.LoadError;
  if (!type metadata singleton initialization cache for USDImportService.LoadError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

_QWORD *specialized ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  NSURL *v9;
  void *v10;
  void *v11;
  uint64_t SingleUseImporterWithURL;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  getEngine(_:)(a2);
  if ((specialized static USDImportService.canLoad(url:)() & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v9);
    v11 = v10;
    if (a6)
      SingleUseImporterWithURL = RIOImportSessionCreateSingleUseImporterWithURL();
    else
      SingleUseImporterWithURL = RIOImportSessionCreateWithURL();
    v15 = (void *)SingleUseImporterWithURL;

    type metadata accessor for ImportSession(0);
    swift_allocObject();
    v14 = specialized ImportSession.init<A>(core:entityType:)(v15, a5);
    swift_release();
    v16 = type metadata accessor for URL();
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    swift_retain();
    v17(a1, v16);
    if (v14)
      swift_release();
  }
  else
  {
    swift_release();
    v13 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
    return 0;
  }
  return v14;
}

uint64_t specialized static USDImportService.loadModel_selectEntity(contentsOf:importSession:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t Error;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v18 = a1;
  v1 = type metadata accessor for Entity.ChildCollection();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7138];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - v7;
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, v2, MEMORY[0x24BDE7150]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v9 = dispatch thunk of Collection.distance(from:to:)();
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v8, v1);
  if (v9 < 1)
  {
    Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v15 = v14;
    v16 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, v18, v16);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return Error;
  }
  HasHierarchy.children.getter();
  v11 = specialized Collection.first.getter();
  v10(v5, v1);
  if (!v11)
  {
LABEL_7:
    Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    goto LABEL_8;
  }
  type metadata accessor for ModelEntity();
  v12 = swift_dynamicCastClass();
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  Error = v12;
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  HasHierarchy.setParent(_:preservingWorldTransform:)();
  return Error;
}

uint64_t specialized USDImportService.loadCommonImpl<A>(contentsOf:createImportSession:selectEntity:named:in:generateDecimatedMesh:entityType:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  id v26;
  void **v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void (*v40)(uint64_t@<X0>, _QWORD *@<X8>);
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v10 = v9;
  v15 = a2();
  if (v15)
  {
    v16 = v15;
    v17 = a9;
    if (a8 && a7)
    {
      v18 = a8;
      v19 = objc_msgSend(v18, sel_bundleIdentifier);
      if (v19)
      {
        v20 = v19;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        v41 = v21;

      }
      else
      {
        v41 = 0xE000000000000000;
      }
      v26 = objc_msgSend(v18, sel_bundlePath, v41);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v27 = (void **)(v16 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      v28 = *v27;
      String.utf8CString.getter();
      String.utf8CString.getter();
      String.utf8CString.getter();
      v29 = v28;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      v10 = v9;
      v17 = a9;
    }
    if ((v17 & 1) != 0)
    {
      v30 = a5;
      if (String.count.getter() < 1)
        v31 = (id)RIOPxrTfTokenEmpty();
      else
        v31 = (id)RIOPxrTfTokenCreateWithCString();
      v32 = v31;
      v33 = (void *)RIOPxrUsdStageCopyRootLayer();
      v34 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();

      a5 = v30;
    }
    swift_beginAccess();
    RIOImportSessionUpdateSynchronouslyOnEngineQueue();
    result = RIOImportSessionGetSceneCount();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v35 = result;
      if (!result)
        goto LABEL_23;
      v36 = 0;
      v37 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v36++, 1))
            break;
        }
        if (v35 == ++v37)
          goto LABEL_22;
      }
      __break(1u);
LABEL_22:
      if (v36 >= 2)
      {
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return swift_release();
      }
      else
      {
LABEL_23:
        if (a4)
        {
          v39 = swift_allocObject();
          *(_QWORD *)(v39 + 16) = a4;
          *(_QWORD *)(v39 + 24) = a5;
          v40 = (void (*)(uint64_t@<X0>, _QWORD *@<X8>))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error);
        }
        else
        {
          v40 = (void (*)(uint64_t@<X0>, _QWORD *@<X8>))specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity);
        }
        v44 = v16;
        outlined copy of (@escaping @callee_guaranteed () -> ())?(a4);
        v40((uint64_t)&v44, &v43);
        swift_release();
        result = swift_release();
        if (!v10)
          return v43;
      }
    }
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v23 = v22;
    v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, a1, v24);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  id v26;
  void **v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void (*v40)(uint64_t@<X0>, _QWORD *@<X8>);
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v10 = v9;
  v15 = a2();
  if (!v15)
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v23 = v22;
    v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, a1, v24);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  v16 = v15;
  v17 = a9;
  if (a8 && a7)
  {
    v18 = a8;
    v19 = objc_msgSend(v18, sel_bundleIdentifier);
    if (v19)
    {
      v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41 = v21;

    }
    else
    {
      v41 = 0xE000000000000000;
    }
    v26 = objc_msgSend(v18, sel_bundlePath, v41);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = (void **)(v16 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v28 = *v27;
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    v29 = v28;
    RIOImportSessionSetBundleInfo();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_release();
    v10 = v9;
    v17 = a9;
  }
  if ((v17 & 1) != 0)
  {
    v30 = a5;
    if (String.count.getter() < 1)
      v31 = (id)RIOPxrTfTokenEmpty();
    else
      v31 = (id)RIOPxrTfTokenCreateWithCString();
    v32 = v31;
    v33 = (void *)RIOPxrUsdStageCopyRootLayer();
    v34 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();

    a5 = v30;
  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  result = RIOImportSessionGetSceneCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v35 = result;
    if (result)
    {
      v36 = 0;
      v37 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v36++, 1))
            break;
        }
        if (v35 == ++v37)
          goto LABEL_22;
      }
      __break(1u);
LABEL_22:
      if (v36 >= 2)
      {
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return swift_release();
      }
    }
    if (a4)
    {
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = a4;
      *(_QWORD *)(v39 + 24) = a5;
      v40 = (void (*)(uint64_t@<X0>, _QWORD *@<X8>))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error);
    }
    else
    {
      v40 = (void (*)(uint64_t@<X0>, _QWORD *@<X8>))specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity);
    }
    v44 = v16;
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a4);
    v40((uint64_t)&v44, &v43);
    if (v10)
    {
      swift_release();
      return swift_release();
    }
    swift_release();
    type metadata accessor for ModelEntity();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      return swift_release();
    }
    swift_release();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  id v26;
  void **v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void (*v40)(uint64_t@<X0>, _QWORD *@<X8>);
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v10 = v9;
  v15 = a2();
  if (!v15)
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v23 = v22;
    v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, a1, v24);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  v16 = v15;
  v17 = a9;
  if (a8 && a7)
  {
    v18 = a8;
    v19 = objc_msgSend(v18, sel_bundleIdentifier);
    if (v19)
    {
      v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41 = v21;

    }
    else
    {
      v41 = 0xE000000000000000;
    }
    v26 = objc_msgSend(v18, sel_bundlePath, v41);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = (void **)(v16 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v28 = *v27;
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    v29 = v28;
    RIOImportSessionSetBundleInfo();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_release();
    v10 = v9;
    v17 = a9;
  }
  if ((v17 & 1) != 0)
  {
    v30 = a5;
    if (String.count.getter() < 1)
      v31 = (id)RIOPxrTfTokenEmpty();
    else
      v31 = (id)RIOPxrTfTokenCreateWithCString();
    v32 = v31;
    v33 = (void *)RIOPxrUsdStageCopyRootLayer();
    v34 = (void *)RIOPxrVtValueCreateWithBool();
    RIOPxrSdfLayerSetCustomLayerData();

    a5 = v30;
  }
  swift_beginAccess();
  RIOImportSessionUpdateSynchronouslyOnEngineQueue();
  result = RIOImportSessionGetSceneCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v35 = result;
    if (result)
    {
      v36 = 0;
      v37 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v36++, 1))
            break;
        }
        if (v35 == ++v37)
          goto LABEL_22;
      }
      __break(1u);
LABEL_22:
      if (v36 >= 2)
      {
        type metadata accessor for USDImportService.LoadError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return swift_release();
      }
    }
    if (a4)
    {
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = a4;
      *(_QWORD *)(v39 + 24) = a5;
      v40 = (void (*)(uint64_t@<X0>, _QWORD *@<X8>))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error);
    }
    else
    {
      v40 = (void (*)(uint64_t@<X0>, _QWORD *@<X8>))specialized thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity);
    }
    v44 = v16;
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a4);
    v40((uint64_t)&v44, &v43);
    if (v10)
    {
      swift_release();
      return swift_release();
    }
    swift_release();
    type metadata accessor for AnchorEntity();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for USDImportService.LoadError();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      return swift_release();
    }
    swift_release();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

uint64_t specialized static USDImportService.loadModel_createImportSession(contentsOf:)@<X0>(uint64_t (*a1)(uint64_t)@<X1>, NSURL *a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *TopLevelEntityFromStage;
  uint64_t inited;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id v12;
  NSURL *v13;
  void *v14;
  void *v15;

  URL._bridgeToObjectiveC()(a2);
  v4 = v3;
  v5 = (void *)RIOPxrUsdStageCreateWithFileURL();

  if (!v5)
    return 0;
  TopLevelEntityFromStage = (void *)RIOPxrUsdUtilsCreateTopLevelEntityFromStage();
  type metadata accessor for Stage();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = TopLevelEntityFromStage;
  v8 = TopLevelEntityFromStage;
  v9 = specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(inited, 0, 0, 0, 1, a1);
  v10 = v9;
  if (v9)
  {
    v11 = (id *)(v9 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    swift_retain();
    RIOImportSessionSetIsLoadModelUseCase();
    v12 = *v11;
    URL._bridgeToObjectiveC()(v13);
    v15 = v14;
    RIOImportSessionSetOriginalUrl();
    swift_release();

    v5 = v12;
    v8 = v15;
  }

  return v10;
}

uint64_t specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t Child;
  uint64_t Error;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v18 = a1;
  v1 = type metadata accessor for BodyTrackingComponent();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for __EntityRef();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Entity.ChildCollection();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7138];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, v6, MEMORY[0x24BDE7150]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v10 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  if (v10 < 1)
  {
    Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    v14 = v13;
    v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v18, v15);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return Error;
  }
  Entity.coreEntity.getter();
  Child = REEntityGetChild();
  if (!Child)
  {
    Error = type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    swift_allocError();
    goto LABEL_8;
  }
  v19[3] = MEMORY[0x24BEE27D0];
  v19[0] = Child;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  type metadata accessor for BodyTrackedEntity();
  swift_allocObject();
  Error = MEMORY[0x22E2F4414](v4);
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  REBodyTrackingComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    BodyTrackingComponent.init()();
    HasBodyTracking.bodyTracking.setter();
  }
  HasHierarchy.setParent(_:preservingWorldTransform:)();
  return Error;
}

uint64_t sub_22BCC175C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)()
{
  return partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:));
}

uint64_t partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(uint64_t a1)
{
  return partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(a1, (uint64_t (*)(uint64_t, uint64_t))specialized static USDImportService.loadBodyTracked_selectEntity(contentsOf:importSession:));
}

uint64_t specialized USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void **), uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v33;
  void **v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;

  v67 = a8;
  v65 = a3;
  v59 = a2;
  v69 = a1;
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v66 = v19;
  v70 = (uint64_t)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a13;
  *(_QWORD *)(v20 + 24) = a14;
  v21 = swift_retain();
  v22 = a6(v21);
  if (v22)
  {
    v23 = v22;
    v58 = v18;
    v57 = v17;
    v64 = a5;
    v68 = v20;
    v62 = a11;
    v63 = a9;
    v60 = a12;
    v61 = a10;
    if (a4 && v65)
    {
      swift_retain();
      v24 = a4;
      v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      v33 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v34 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      v35 = *v34;
      v56[1] = String.utf8CString.getter() + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      v36 = v24;
      v29 = v23;
      v37 = v35;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      v27 = v57;
      v28 = v58;
    }
    else
    {
      swift_retain();
      v27 = v57;
      v28 = v58;
      v29 = v23;
    }
    v38 = v66;
    v39 = v28;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v70, v69, v27);
    v40 = (*(unsigned __int8 *)(v39 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v41 = (v38 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    v44 = (char *)swift_allocObject();
    *((_QWORD *)v44 + 2) = v29;
    *((_QWORD *)v44 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((_QWORD *)v44 + 4) = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(&v44[v40], v70, v27);
    *(_QWORD *)&v44[v41] = v29;
    v45 = (uint64_t *)&v44[v42];
    v46 = v61;
    v47 = v62;
    *v45 = v61;
    v45[1] = v47;
    *(_QWORD *)&v44[v43] = v60;
    v48 = (uint64_t *)&v44[(v43 + 15) & 0xFFFFFFFFFFFFFFF8];
    v49 = v67;
    v50 = v63;
    *v48 = v67;
    v48[1] = v50;
    v51 = (uint64_t *)(v29 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    v70 = *v51;
    *v51 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v51[1] = (uint64_t)v44;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v49);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v70);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if ((v64 & 1) != 0)
    {
      if (String.count.getter() < 1)
        v52 = (id)RIOPxrTfTokenEmpty();
      else
        v52 = (id)RIOPxrTfTokenCreateWithCString();
      v53 = v52;
      v54 = (void *)RIOPxrUsdStageCopyRootLayer();
      v55 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();

    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    v30 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v31, v69, v17);
    swift_storeEnumTagMultiPayload();
    v71 = v30;
    v72 = 1;
    a13(&v71);

    return swift_release();
  }
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v33;
  void **v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;

  v67 = a8;
  v65 = a3;
  v59 = a2;
  v69 = a1;
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v66 = v19;
  v70 = (uint64_t)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a13;
  *(_QWORD *)(v20 + 24) = a14;
  v21 = swift_retain();
  v22 = a6(v21);
  if (v22)
  {
    v23 = v22;
    v58 = v18;
    v57 = v17;
    v64 = a5;
    v68 = v20;
    v62 = a11;
    v63 = a9;
    v60 = a12;
    v61 = a10;
    if (a4 && v65)
    {
      swift_retain();
      v24 = a4;
      v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      v33 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v34 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      v35 = *v34;
      v56[1] = String.utf8CString.getter() + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      v36 = v24;
      v29 = v23;
      v37 = v35;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      v27 = v57;
      v28 = v58;
    }
    else
    {
      swift_retain();
      v27 = v57;
      v28 = v58;
      v29 = v23;
    }
    v38 = v66;
    v39 = v28;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v70, v69, v27);
    v40 = (*(unsigned __int8 *)(v39 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v41 = (v38 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    v44 = (char *)swift_allocObject();
    *((_QWORD *)v44 + 2) = v29;
    *((_QWORD *)v44 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((_QWORD *)v44 + 4) = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(&v44[v40], v70, v27);
    *(_QWORD *)&v44[v41] = v29;
    v45 = (uint64_t *)&v44[v42];
    v46 = v61;
    v47 = v62;
    *v45 = v61;
    v45[1] = v47;
    *(_QWORD *)&v44[v43] = v60;
    v48 = (uint64_t *)&v44[(v43 + 15) & 0xFFFFFFFFFFFFFFF8];
    v49 = v67;
    v50 = v63;
    *v48 = v67;
    v48[1] = v50;
    v51 = (uint64_t *)(v29 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    v70 = *v51;
    *v51 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v51[1] = (uint64_t)v44;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v49);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v70);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if ((v64 & 1) != 0)
    {
      if (String.count.getter() < 1)
        v52 = (id)RIOPxrTfTokenEmpty();
      else
        v52 = (id)RIOPxrTfTokenCreateWithCString();
      v53 = v52;
      v54 = (void *)RIOPxrUsdStageCopyRootLayer();
      v55 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();

    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    v30 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v31, v69, v17);
    swift_storeEnumTagMultiPayload();
    v71 = v30;
    v72 = 1;
    a13(&v71);

    return swift_release();
  }
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v33;
  void **v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;

  v67 = a8;
  v65 = a3;
  v59 = a2;
  v69 = a1;
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v66 = v19;
  v70 = (uint64_t)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a13;
  *(_QWORD *)(v20 + 24) = a14;
  v21 = swift_retain();
  v22 = a6(v21);
  if (v22)
  {
    v23 = v22;
    v58 = v18;
    v57 = v17;
    v64 = a5;
    v68 = v20;
    v62 = a11;
    v63 = a9;
    v60 = a12;
    v61 = a10;
    if (a4 && v65)
    {
      swift_retain();
      v24 = a4;
      v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      v33 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v34 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      v35 = *v34;
      v56[1] = String.utf8CString.getter() + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      v36 = v24;
      v29 = v23;
      v37 = v35;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      v27 = v57;
      v28 = v58;
    }
    else
    {
      swift_retain();
      v27 = v57;
      v28 = v58;
      v29 = v23;
    }
    v38 = v66;
    v39 = v28;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v70, v69, v27);
    v40 = (*(unsigned __int8 *)(v39 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v41 = (v38 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    v44 = (char *)swift_allocObject();
    *((_QWORD *)v44 + 2) = v29;
    *((_QWORD *)v44 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((_QWORD *)v44 + 4) = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(&v44[v40], v70, v27);
    *(_QWORD *)&v44[v41] = v29;
    v45 = (uint64_t *)&v44[v42];
    v46 = v61;
    v47 = v62;
    *v45 = v61;
    v45[1] = v47;
    *(_QWORD *)&v44[v43] = v60;
    v48 = (uint64_t *)&v44[(v43 + 15) & 0xFFFFFFFFFFFFFFF8];
    v49 = v67;
    v50 = v63;
    *v48 = v67;
    v48[1] = v50;
    v51 = (uint64_t *)(v29 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    v70 = *v51;
    *v51 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v51[1] = (uint64_t)v44;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v49);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v70);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if ((v64 & 1) != 0)
    {
      if (String.count.getter() < 1)
        v52 = (id)RIOPxrTfTokenEmpty();
      else
        v52 = (id)RIOPxrTfTokenCreateWithCString();
      v53 = v52;
      v54 = (void *)RIOPxrUsdStageCopyRootLayer();
      v55 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();

    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    v30 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v31, v69, v17);
    swift_storeEnumTagMultiPayload();
    v71 = v30;
    v72 = 1;
    a13(&v71);

    return swift_release();
  }
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v33;
  void **v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;

  v67 = a8;
  v65 = a3;
  v59 = a2;
  v69 = a1;
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v66 = v19;
  v70 = (uint64_t)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a13;
  *(_QWORD *)(v20 + 24) = a14;
  v21 = swift_retain();
  v22 = a6(v21);
  if (v22)
  {
    v23 = v22;
    v58 = v18;
    v57 = v17;
    v64 = a5;
    v68 = v20;
    v62 = a11;
    v63 = a9;
    v60 = a12;
    v61 = a10;
    if (a4 && v65)
    {
      swift_retain();
      v24 = a4;
      v25 = objc_msgSend(v24, sel_bundleIdentifier);
      if (v25)
      {
        v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      v33 = objc_msgSend(v24, sel_bundlePath);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v34 = (void **)(v23 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_beginAccess();
      v35 = *v34;
      v56[1] = String.utf8CString.getter() + 32;
      String.utf8CString.getter();
      String.utf8CString.getter();
      v36 = v24;
      v29 = v23;
      v37 = v35;
      RIOImportSessionSetBundleInfo();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      v27 = v57;
      v28 = v58;
    }
    else
    {
      swift_retain();
      v27 = v57;
      v28 = v58;
      v29 = v23;
    }
    v38 = v66;
    v39 = v28;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v70, v69, v27);
    v40 = (*(unsigned __int8 *)(v39 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v41 = (v38 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    v44 = (char *)swift_allocObject();
    *((_QWORD *)v44 + 2) = v29;
    *((_QWORD *)v44 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ());
    *((_QWORD *)v44 + 4) = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(&v44[v40], v70, v27);
    *(_QWORD *)&v44[v41] = v29;
    v45 = (uint64_t *)&v44[v42];
    v46 = v61;
    v47 = v62;
    *v45 = v61;
    v45[1] = v47;
    *(_QWORD *)&v44[v43] = v60;
    v48 = (uint64_t *)&v44[(v43 + 15) & 0xFFFFFFFFFFFFFFF8];
    v49 = v67;
    v50 = v63;
    *v48 = v67;
    v48[1] = v50;
    v51 = (uint64_t *)(v29 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
    swift_beginAccess();
    v70 = *v51;
    *v51 = (uint64_t)partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:);
    v51[1] = (uint64_t)v44;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v46);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v49);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v70);
    ImportSession.sceneUpdatePassCompletion.didset();
    swift_release();
    swift_release();
    if ((v64 & 1) != 0)
    {
      if (String.count.getter() < 1)
        v52 = (id)RIOPxrTfTokenEmpty();
      else
        v52 = (id)RIOPxrTfTokenCreateWithCString();
      v53 = v52;
      v54 = (void *)RIOPxrUsdStageCopyRootLayer();
      v55 = (void *)RIOPxrVtValueCreateWithBool();
      RIOPxrSdfLayerSetCustomLayerData();

    }
    swift_beginAccess();
    RIOImportSessionUpdate();
    swift_release();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for USDImportService.LoadError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
    v30 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v31, v69, v17);
    swift_storeEnumTagMultiPayload();
    v71 = v30;
    v72 = 1;
    a13(&v71);

    return swift_release();
  }
}

_QWORD *partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(v0 + v2, *(void (**)(uint64_t))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:configureImportSession:fulfill:postLoad:selectEntity:entityType:)(v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t type metadata accessor for USDImportService()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:)()
{
  return partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)((uint64_t (*)(uint64_t))specialized ImportSession.init<A>(core:entityType:));
}

uint64_t partial apply for closure #2 in USDImportService.loadModelAsync(named:in:generateDecimatedMesh:fulfill:postLoad:)(uint64_t a1)
{
  return partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(a1, (uint64_t (*)(uint64_t, uint64_t))specialized static USDImportService.loadModel_selectEntity(contentsOf:importSession:));
}

uint64_t method lookup function for USDImportService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of USDImportService.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of USDImportService.canLoad(named:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of USDImportService.canLoad(contentsOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of USDImportService.load(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of USDImportService.loadAsync(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t *initializeBufferWithCopyOfBuffer for USDImportService.LoadError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for USDImportService.LoadError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return swift_bridgeObjectRelease();
  }
  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *initializeWithCopy for USDImportService.LoadError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for USDImportService.LoadError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of USDImportService.LoadError((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of USDImportService.LoadError(uint64_t a1)
{
  uint64_t Error;

  Error = type metadata accessor for USDImportService.LoadError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(Error - 8) + 8))(a1, Error);
  return a1;
}

void *initializeWithTake for USDImportService.LoadError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for USDImportService.LoadError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of USDImportService.LoadError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for USDImportService.LoadError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Error in USDImportService.LoadError()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type USDImportService.LoadError and conformance USDImportService.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for USDImportService.LoadError, (uint64_t)&protocol conformance descriptor for USDImportService.LoadError);
}

uint64_t outlined init with copy of USDImportService.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t Error;

  Error = type metadata accessor for USDImportService.LoadError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Error - 8) + 16))(a2, a1, Error);
  return a2;
}

uint64_t partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v0[2], v0[3], v0[4], (uint64_t)v0 + v2, *(uint64_t *)((char *)v0 + v3), *(uint64_t (**)(uint64_t))((char *)v0 + v4), *(uint64_t *)((char *)v0 + v4 + 8), *(uint64_t *)((char *)v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(unint64_t))((char *)v0+ ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

{
  return partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)&unk_24F63BFC0, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_97, (void (*)(_QWORD))MEMORY[0x24BDE6038]);
}

{
  return partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)&unk_24F63C060, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_111, (void (*)(_QWORD))MEMORY[0x24BDE60E0]);
}

{
  return partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((uint64_t)&unk_24F63C100, (uint64_t)partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:), (uint64_t)&block_descriptor_125, (void (*)(_QWORD))MEMORY[0x24BDE6558]);
}

uint64_t sub_22BCC3870()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22BCC3894()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t specialized USDImportService.generatePostLoadData(from:entity:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t ServiceLocator;
  id *v6;
  id v7;
  uint64_t SceneCount;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t AssetHandle;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  char v34;
  uint64_t v36;
  unint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  uint64_t v40;

  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x22E2F60DC](ServiceLocator))
  {
    v37 = v4;
    v6 = (id *)(a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v7 = *v6;
    SceneCount = RIOImportSessionGetSceneCount();
    v36 = a2;
    if (SceneCount < 1)
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      v9 = SceneCount;
      v10 = 0;
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v12 = (void *)RIOImportSessionCopySceneAssetName();
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v15 = v14;

        v16 = HIBYTE(v15) & 0xF;
        if ((v15 & 0x2000000000000000) == 0)
          v16 = v13 & 0xFFFFFFFFFFFFLL;
        if (v16
          && (String.utf8CString.getter(), AssetHandle = REAssetManagerCreateAssetHandle(), swift_release(), AssetHandle))
        {
          v18 = (void *)RIOImportSessionCopySceneName();
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v21 = v20;

          LOBYTE(v18) = RIOImportSessionIsSceneActive();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_22BD0C770;
          *(_QWORD *)(inited + 32) = 1701869940;
          *(_QWORD *)(inited + 40) = 0xE400000000000000;
          *(_QWORD *)(inited + 48) = 0xD000000000000010;
          *(_QWORD *)(inited + 56) = 0x800000022BD0A250;
          v23 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(inited + 80) = 0x6D614E656E656373;
          *(_QWORD *)(inited + 88) = 0xE900000000000065;
          *(_QWORD *)(inited + 96) = v19;
          *(_QWORD *)(inited + 104) = v21;
          *(_QWORD *)(inited + 120) = v23;
          strcpy((char *)(inited + 128), "sceneAssetName");
          *(_BYTE *)(inited + 143) = -18;
          *(_QWORD *)(inited + 144) = v13;
          *(_QWORD *)(inited + 152) = v15;
          *(_QWORD *)(inited + 168) = v23;
          *(_QWORD *)(inited + 176) = 0x657669746361;
          *(_QWORD *)(inited + 184) = 0xE600000000000000;
          *(_QWORD *)(inited + 216) = MEMORY[0x24BEE1328];
          *(_BYTE *)(inited + 192) = (_BYTE)v18;
          v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          v26 = v11[2];
          v25 = v11[3];
          if (v26 >= v25 >> 1)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v11);
          v11[2] = v26 + 1;
          v11[v26 + 4] = v24;
          RERelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        ++v10;
      }
      while (v9 != v10);
    }
    v40 = MEMORY[0x24BEE0D00];
    strcpy((char *)&v39, "PostLoadData");
    BYTE13(v39) = 0;
    HIWORD(v39) = -5120;
    outlined init with take of Any(&v39, v38);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, 1701869940, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v40 = type metadata accessor for Entity();
    *(_QWORD *)&v39 = v36;
    outlined init with take of Any(&v39, v38);
    swift_retain();
    v33 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, 0x797469746E65, 0xE600000000000000, v33);
    swift_bridgeObjectRelease();
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
    *(_QWORD *)&v39 = v11;
    outlined init with take of Any(&v39, v38);
    v34 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, 0x646574726F706D69, 0xEE0073656E656353, v34);
    v4 = v37;

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for rioAudio != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.rioAudio);
    v28 = static os_log_type_t.error.getter();
    v29 = Logger.logObject.getter();
    v30 = v28;
    if (os_log_type_enabled(v29, v28))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_22BC20000, v29, v30, "generatePostLoadData could not get an AssetManager.", v31, 2u);
      MEMORY[0x22E2F898C](v31, -1, -1);
    }

  }
  return v4;
}

void partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(*(_QWORD *)(v0 + 16), *(void (**)(void *, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + ((v1 + 48) & ~v1));
}

{
  partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((void (*)(_QWORD))MEMORY[0x24BDE6038]);
}

{
  partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((void (*)(_QWORD))MEMORY[0x24BDE60E0]);
}

{
  partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)((void (*)(_QWORD))MEMORY[0x24BDE6558]);
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  return specialized closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(v4[2], v4[3], v4[4], (uint64_t)v4 + v10, *(uint64_t *)((char *)v4 + v11), *(uint64_t (**)(uint64_t))((char *)v4 + v12), *(uint64_t *)((char *)v4 + v12 + 8), *(uint64_t *)((char *)v4 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(unint64_t))((char *)v4+ ((((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v4 + ((((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), a1, a2, a3, a4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<Entity, Error>) -> (@out ())(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t objectdestroy_73Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)))
    swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_82Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  specialized closure #1 in $defer #1 <A>() in closure #1 in USDImportService.loadAsyncCommonImpl<A>(contentsOf:named:in:generateDecimatedMesh:createImportSession:fulfill:postLoad:selectEntity:entityType:)(*(_QWORD *)(v1 + 16), *(void (**)(void *, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + ((v3 + 48) & ~v3), a1);
}

uint64_t objectdestroy_55Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ImportSession) -> (@owned Entity, @error @owned Error)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  return specialized static USDImportService.loadModel_createImportSession(contentsOf:)(a1, (NSURL *)((v2 + 16) & ~v2));
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in USDImportService.loadBodyTrackedAsync(contentsOf:withName:generateDecimatedMesh:fulfill:postLoad:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  return a2(v2 + ((v5 + 16) & ~v5), a1);
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized UsdGeomXformable.localTransformation(at:)@<X0>(float32x4_t *a1@<X8>)
{
  uint64_t result;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  result = RIOPxrUsdGeomXformableXformQueryGetLocalTransformation();
  if ((_DWORD)result)
  {
    v3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), (float64x2_t)0);
    v4 = v3;
    v5 = v3;
    v6 = v3;
  }
  else
  {
    v4 = 0uLL;
    v5 = 0uLL;
    v6 = 0uLL;
    v3 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4].i8[0] = result ^ 1;
  return result;
}

uint64_t closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:)(__n128 a1, __n128 a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  void (*v27)(double);
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  char v59;

  v53 = a9;
  v54 = a10;
  v52 = a8;
  v47 = a3;
  v48 = a2;
  v49 = a1;
  v57 = a7;
  v45 = a5;
  v10 = type metadata accessor for __RKEntityMoveEaseType();
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v44 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for __RKEntityMoveEase();
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v41 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for __RKEntityMoveSelection();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for __RKEntityActionSpecification();
  v46 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v55 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v27 = *(void (**)(double))(v18 + 56);
  v58 = (uint64_t)&v41 - v28;
  v27(v26);
  v29 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  if (*(_QWORD *)(v29 + 16))
  {
    v30 = *(id *)(v29 + 32);
    swift_bridgeObjectRelease();
    Inputs.identifierForEntity(withInputKey:)(0xD000000000000010, 0x800000022BD06F90, (uint64_t)v24);

    v31 = v58;
    outlined destroy of Any?(v58, &demangling cache variable for type metadata for UUID?);
    outlined init with take of (URL, __REAsset)((uint64_t)v24, v31, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v45, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v52, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v53, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v44, v54, v51);
  outlined init with copy of UUID?(v58, (uint64_t)v24);
  v59 = 0;
  v32 = v55;
  __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)();
  v33 = v46;
  v34 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v32, *MEMORY[0x24BDE69E0], v56);
  v35 = v57;
  v36 = *v57;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v35 = v36;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
    *v35 = v36;
  }
  v39 = *(_QWORD *)(v36 + 16);
  v38 = *(_QWORD *)(v36 + 24);
  if (v39 >= v38 >> 1)
  {
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v36);
    *v35 = v36;
  }
  *(_QWORD *)(v36 + 16) = v39 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v36+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v39, v32, v34);
  return outlined destroy of Any?(v58, &demangling cache variable for type metadata for UUID?);
}

uint64_t specialized static ActionBuilder.generateTransformActionSpecifications(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  int HasPrimAtPrimPath;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  void *v44;
  uint64_t PrimIfNeeded;
  uint64_t inited;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  char *v85;
  uint64_t v86;
  char v87;

  v2 = type metadata accessor for __RKEntityGroupActionOrder();
  v74 = *(_QWORD *)(v2 - 8);
  v75 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v76 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x24BDAC7A8](v4);
  v78 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityMoveEaseType();
  v79 = *(_QWORD *)(v6 - 8);
  v80 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v77 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x24BDAC7A8](v8);
  v81 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for __RKEntityMoveEase();
  v10 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveSelection?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for __RKEntityMoveSelection();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  v70 = v19;
  v71 = v15;
  v72 = v17;
  v73 = a1;
  v68 = v12;
  v69 = v10;
  if (!*(_QWORD *)(v20 + 16))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v23 = *(id *)(v20 + 32);
  swift_bridgeObjectRelease();
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v24 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v24 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v86);

  swift_release();
  v25 = (void *)v86;
  if ((v87 & 1) != 0)
  {
    v84.i64[0] = v86;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    outlined consume of Result<Double, Object.Error>(v25, 1);
    return MEMORY[0x24BEE4AF8];
  }
  swift_retain();
  v26 = v71;
  __RKEntityMoveSelection.init(inputs:)((uint64_t)v71);
  v27 = v72;
  (*(void (**)(id, _QWORD, uint64_t, uint64_t))(v72 + 56))(v26, 0, 1, v16);
  (*(void (**)(char *, id, uint64_t))(v27 + 32))(v70, v26, v16);
  swift_retain();
  v28 = v81;
  __RKEntityMoveEase.init(inputs:)();
  v71 = v23;
  v67 = v16;
  v29 = v69;
  v30 = v28;
  v31 = v28;
  v32 = v82;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v30, 0, 1, v82);
  v33 = v68;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v68, v31, v32);
  swift_retain();
  v34 = v78;
  __RKEntityMoveEaseType.init(inputs:)();
  v36 = v79;
  v35 = v80;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v34, 0, 1, v80);
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v77, v34, v35);
  result = RIOBuilderInputsCopyStage();
  if (result)
  {
    v37 = (void *)result;
    v38 = v71;
    HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

    if (!HasPrimAtPrimPath)
    {

      (*(void (**)(char *, uint64_t))(v36 + 8))(v77, v80);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v82);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v67);
      return MEMORY[0x24BEE4AF8];
    }
    result = RIOBuilderInputsCopyStage();
    if (result)
    {
      v40 = result;
      type metadata accessor for Stage();
      *(_QWORD *)(swift_initStackObject() + 16) = v40;
      v41 = String.count.getter();
      v42 = v76;
      if (v41 < 1)
        v43 = (id)RIOPxrTfTokenEmpty();
      else
        v43 = (id)RIOPxrTfTokenCreateWithCString();
      v44 = v43;
      PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

      type metadata accessor for Prim();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = PrimIfNeeded;
      type metadata accessor for XformPrim(0);
      v47 = (char *)swift_initStackObject();
      *((_QWORD *)v47 + 7) = &type metadata for Schema;
      *((_QWORD *)v47 + 8) = &protocol witness table for Schema;
      *((_QWORD *)v47 + 2) = inited;
      *((_QWORD *)v47 + 3) = inited;
      swift_retain();
      swift_release();
      v81 = v47;
      specialized UsdGeomXformable.localTransformation(at:)(&v84);
      v78 = v85;
      outlined init with take of (URL, __REAsset)((uint64_t)&v84, (uint64_t)&v86, &demangling cache variable for type metadata for simd_float4x4?);
      v48 = v79;
      v49 = v69;
      v50 = Transform.init(matrix:)();
      v83 = MEMORY[0x24BEE4AF8];
      *(double *)&v51 = MEMORY[0x24BDAC7A8](v50);
      *(&v66 - 12) = v73;
      *(&v66 - 11) = (uint64_t)&v83;
      *((_OWORD *)&v66 - 5) = v51;
      *((_OWORD *)&v66 - 4) = v52;
      *((_OWORD *)&v66 - 3) = v53;
      v54 = v70;
      *(&v66 - 4) = (uint64_t)v25;
      *(&v66 - 3) = (uint64_t)v54;
      v55 = v68;
      v56 = v77;
      *(&v66 - 2) = (uint64_t)v68;
      *(&v66 - 1) = (uint64_t)v56;
      if (one-time initialization token for OutputName != -1)
        swift_once();
      specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:), (uint64_t)(&v66 - 14));
      v21 = v83;
      if (*(_QWORD *)(v83 + 16) < 2uLL)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        v57 = type metadata accessor for __RKEntityActionSpecification();
        v58 = *(_QWORD *)(v57 - 8);
        v59 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
        v60 = swift_allocObject();
        *(_OWORD *)(v60 + 16) = xmmword_22BD0C360;
        (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v42, *MEMORY[0x24BDE68D0], v75);
        swift_bridgeObjectRetain_n();
        __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
        v61 = v60 + v59;
        v56 = v77;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v58 + 104))(v61, *MEMORY[0x24BDE69C8], v57);
        swift_bridgeObjectRelease();
        v21 = v60;
      }
      v62 = v67;
      v63 = v82;
      v64 = v80;
      v65 = v72;

      swift_release();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v64);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v63);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v62);
      swift_bridgeObjectRelease();
      return v21;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateTransformActionSpecifications(inputs:)(*(__n128 *)(v2 + 32), *(__n128 *)(v2 + 48), *(__n128 *)(v2 + 64), a1, a2, *(_QWORD *)(v2 + 16), *(unint64_t **)(v2 + 24), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0 = (void *)RIOPxrSdfPrimSpecCopyLayer();
  v1 = (void *)RIOPxrSdfLayerCopyIdentifier();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x800000022BD0A280;
  String.append(_:)(v6);
  return swift_bridgeObjectRelease();
}

unint64_t SceneDescriptionFoundations.PrimSpec.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0 = (void *)RIOPxrSdfPrimSpecCopyLayer();
  v1 = (void *)RIOPxrSdfLayerCopyIdentifier();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t SceneDescriptionFoundations.PrimSpec.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x6570536D6972503CLL;
  v0._object = (void *)0xEB00000000203A63;
  String.append(_:)(v0);
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t SceneDescriptionFoundations.PrimSpec.layer()()
{
  uint64_t v0;
  uint64_t result;

  v0 = RIOPxrSdfPrimSpecCopyLayer();
  type metadata accessor for SceneDescriptionFoundations.Layer();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t SceneDescriptionFoundations.PrimSpec.path()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPrimSpecCopyPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.PrimSpec.attribute(at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPrimSpecCopyAttribute();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.PrimSpec.specifier.getter()
{
  return RIOPxrSdfPrimSpecGetSpecifier();
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.PrimSpec()
{
  return &type metadata for SceneDescriptionFoundations.PrimSpec;
}

uint64_t SdrRegistry.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SdrRegistry.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static SdrRegistry.nodeNames.getter()
{
  void *v0;

  v0 = (void *)RIOPxrSdrRegistryCopyNodeNames();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4AF8];
}

uint64_t static SdrRegistry.shaderNodeByName(name:)()
{
  id v0;
  uint64_t result;

  String.utf8CString.getter();
  v0 = (id)RIOPxrSdrRegistryGetShaderNodeByName();
  swift_release();
  if (!v0)
    return 0;
  type metadata accessor for SdrShaderNode();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t type metadata accessor for SdrShaderNode()
{
  return objc_opt_self();
}

uint64_t SdrShaderNode.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SdrShaderNode.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t SdrShaderNode.inputNames.getter()
{
  return SdrShaderNode.inputNames.getter(MEMORY[0x24BE27158]);
}

uint64_t SdrShaderNode.outputNames.getter()
{
  return SdrShaderNode.inputNames.getter(MEMORY[0x24BE27168]);
}

uint64_t SdrShaderNode.inputNames.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  void *v2;

  v2 = (void *)a1(*(_QWORD *)(v1 + 16));
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4AF8];
}

uint64_t SdrShaderNode.shaderInput<A>(withName:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return SdrShaderNode.shaderInput<A>(withName:)(a1, a2, a3, MEMORY[0x24BE27170]);
}

uint64_t type metadata accessor for SdrShaderProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SdrShaderProperty);
}

uint64_t SdrShaderProperty.__allocating_init(base:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t SdrShaderNode.shaderOutput<A>(withName:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return SdrShaderNode.shaderInput<A>(withName:)(a1, a2, a3, MEMORY[0x24BE27178]);
}

uint64_t SdrShaderNode.shaderInput<A>(withName:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  type metadata accessor for SdrShaderProperty(0, a2, a3, (uint64_t)a4);
  v7 = a4(*(_QWORD *)(v4 + 16), v6);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v7;
  return result;
}

uint64_t SdrShaderNode.name.getter()
{
  return SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE27160]);
}

uint64_t SdrShaderNode.family.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdrShaderNodeCopyFamily();
  *a1 = result;
  return result;
}

uint64_t SdrShaderNode.infoString.getter()
{
  return SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE27150]);
}

uint64_t SdrShaderProperty.name.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdrShaderPropertyCopyName();
  *a1 = result;
  return result;
}

uint64_t SdrShaderProperty.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdrShaderPropertyCopyType();
  *a1 = result;
  return result;
}

void SdrShaderProperty.defaultValue.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;

  v3 = *v1;
  v4 = (id)RIOPxrSdrShaderPropertyCopyDefaultValue();
  RIOPxrVtValueRef.mapUSDValue<A>()(*(_QWORD *)(v3 + 80), a1);

}

uint64_t SdrShaderProperty.isArray.getter()
{
  return RIOPxrSdrShaderPropertyIsArray();
}

uint64_t SdrShaderProperty.arraySize.getter()
{
  return (int)RIOPxrSdrShaderPropertyGetArraySize();
}

uint64_t SdrShaderProperty.isConnectable.getter()
{
  return RIOPxrSdrShaderPropertyIsConnectable();
}

uint64_t SdrShaderProperty.infoString.getter()
{
  return SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE27188]);
}

uint64_t type metadata accessor for SdrRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for SdrRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SdrShaderNode()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for SdrShaderProperty()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SdrShaderProperty()
{
  return swift_lookUpClassMethod();
}

uint64_t __RKEntityGroupActionOrder.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::Int v13;
  unsigned int *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v15 = 0;
LABEL_13:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 1);
    goto LABEL_14;
  }
  v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_12:
    v15 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_13;
  }
  v5 = (void *)v4;
  v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_12;
  }
  v7 = (void *)v6;

  swift_release();
  v8 = (void *)RIOPxrTfTokenCopyString();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  v13 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityGroupActionOrderUSD.init(rawValue:), v12);
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_release();
    v14 = (unsigned int *)MEMORY[0x24BDE68D8];
    goto LABEL_16;
  }
  if (v13 != 1)
  {
LABEL_14:
    lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  v14 = (unsigned int *)MEMORY[0x24BDE68D0];
LABEL_16:
  v17 = *v14;
  v18 = type metadata accessor for __RKEntityGroupActionOrder();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a1, v17, v18);
}

unint64_t lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BCC5C00 + 4 * asc_22BD11050[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BCC5C20 + 4 * byte_22BD11055[v4]))();
}

_BYTE *sub_22BCC5C00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BCC5C20(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCC5C28(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCC5C30(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCC5C38(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCC5C40(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
}

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    Set.Iterator.init(_cocoa:)();
    v1 = v19;
    v18 = v20;
    v3 = v21;
    v2 = v22;
    v4 = v23;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v18 = a1 + 56;
    v3 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  v8 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | (v2 << 6);
      v11 = v2;
      goto LABEL_29;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v13 >= v8)
      goto LABEL_32;
    v14 = *(_QWORD *)(v18 + 8 * v13);
    v11 = v2 + 1;
    if (!v14)
    {
      v11 = v2 + 2;
      if (v2 + 2 >= v8)
        goto LABEL_32;
      v14 = *(_QWORD *)(v18 + 8 * v11);
      if (!v14)
      {
        v11 = v2 + 3;
        if (v2 + 3 >= v8)
          goto LABEL_32;
        v14 = *(_QWORD *)(v18 + 8 * v11);
        if (!v14)
        {
          v11 = v2 + 4;
          if (v2 + 4 >= v8)
            goto LABEL_32;
          v14 = *(_QWORD *)(v18 + 8 * v11);
          if (!v14)
          {
            v11 = v2 + 5;
            if (v2 + 5 >= v8)
              goto LABEL_32;
            v14 = *(_QWORD *)(v18 + 8 * v11);
            if (!v14)
            {
              v15 = v2 + 6;
              while (v8 != v15)
              {
                v14 = *(_QWORD *)(v18 + 8 * v15++);
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_32;
    while (1)
    {
      v16 = v12;
      specialized Set._Variant.insert(_:)(&v24, v16);
      v17 = v24;

      v2 = v11;
      v4 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for RIOPxrSdfPathRef(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v24;
        swift_unknownObjectRelease();
        v11 = v2;
        v9 = v4;
        if (v12)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void InputDescriptor.convertToCore()()
{
  __asm { BR              X10 }
}

uint64_t sub_22BCC5FB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;

  swift_bridgeObjectRetain();
  v30 = (void *)MEMORY[0x22E2F5278](v29, v28);
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
    v31 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v31 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  v32 = RIOBuilderCurrentPrimInputDescriptorCreate();

  return v32;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  BOOL v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v11 = 1;
    }
    else
    {
      v3 = (void **)(a1 + 32);
      v4 = (void **)(a2 + 32);
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
      v5 = v2 - 1;
      do
      {
        v7 = *v3++;
        v6 = v7;
        v8 = *v4++;
        v9 = v6;
        v10 = v8;
        v11 = static _CFObject.== infix(_:_:)();

        v13 = v5-- != 0;
      }
      while ((v11 & 1) != 0 && v13);
    }
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

void InputDescriptor.hash(into:)()
{
  __asm { BR              X11 }
}

uint64_t sub_22BCC676C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22BD0C770;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  AnyHashable.init<A>(_:)();
  v7 = v2;
  v8 = v1;
  AnyHashable.init<A>(_:)();
  LOBYTE(v7) = v0 & 1;
  AnyHashable.init<A>(_:)();
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    return swift_bridgeObjectRelease();
  v6 = v3 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of AnyHashable(v6, (uint64_t)&v7);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)&v7);
    v6 += 40;
    --v5;
  }
  while (v5);
  return swift_bridgeObjectRelease_n();
}

Swift::Int InputDescriptor.hashValue.getter()
{
  Hasher.init(_seed:)();
  InputDescriptor.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InputDescriptor()
{
  Hasher.init(_seed:)();
  InputDescriptor.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InputDescriptor()
{
  Hasher.init(_seed:)();
  InputDescriptor.hash(into:)();
  return Hasher._finalize()();
}

void ImportSession.hash(into:)()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
  v3 = v2;
  _CFObject.hash(into:)();

}

Swift::Int ImportSession.hashValue.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  Hasher.init(_seed:)();
  v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
  v3 = v2;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImportSession()
{
  uint64_t *v0;
  uint64_t v1;
  void **v2;
  void *v3;
  id v4;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = (void **)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v3 = *v2;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
  v4 = v3;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ImportSession()
{
  _QWORD *v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(*v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  type metadata accessor for RIOImportSessionRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
  v3 = v2;
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImportSession()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t closure #1 in InputDescriptor.convertToCore()(void *a1, void *a2, uint64_t (*a3)(uint64_t, unint64_t *))
{
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  id v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  Class isa;
  unint64_t v22;

  type metadata accessor for Stage();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v22 = (unint64_t)a2;
  v7 = a1;
  v8 = a2;
  v9 = a3(v6, &v22);

  swift_release();
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    result = specialized Set.startIndex.getter(v9);
    v12 = result;
    v14 = v13;
    v16 = v15 & 1;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(v9 + 32))
    {
      if (((*(_QWORD *)(v9 + 56 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_12;
      if (*(_DWORD *)(v9 + 36) != (_DWORD)v14)
        goto LABEL_13;
      v17 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v12);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      result = specialized _NativeSet.index(after:)(v12, v14, v16 & 1, v9);
      v12 = result;
      v14 = v18;
      v16 = v19 & 1;
      if (!--v10)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v18, v19 & 1);
        v20 = v22;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
LABEL_10:
    specialized Set.init<A>(_:)(v20);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    return (uint64_t)isa;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdStageRef, @guaranteed RIOPxrSdfPathRef) -> (@unowned Unmanaged<CFSetRef>)(uint64_t a1, void *a2, void *a3)
{
  uint64_t (*v5)(id, id);
  id v6;
  id v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(id, id))(a1 + 32);
  swift_retain();
  v6 = a2;
  v7 = a3;
  v8 = v5(v6, v7);
  swift_release();

  return v8;
}

uint64_t static InputDescriptor.create(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  Swift::String v5;
  uint64_t countAndFlagsBits;
  void *object;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  void *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  void *v30;
  void *v31;
  unint64_t v32;
  void *v33;
  Swift::String v34;
  void *v35;
  void *v36;
  unint64_t v37;
  void *v38;
  Swift::String v39;
  void *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;

  switch(RIOBuilderInputDescriptorCopyType())
  {
    case 1:
      v4 = (void *)RIOBuilderCurrentPrimInputDescriptorCopyInputName();
      v5 = String.init(_:)(v4);
      countAndFlagsBits = v5._countAndFlagsBits;
      object = v5._object;
      v8 = (void *)MEMORY[0x22E2F62D4](a1);
      v9 = (void *)RIOPxrTfTokenCopyString();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v11;

      v13 = RIOBuilderCurrentPrimInputDescriptorCopyOptionality();
      result = 0;
      v15 = 0;
      v16 = v13 == 0;
      break;
    case 2:
      v17 = (void *)RIOBuilderParentPrimInputDescriptorCopyInputName();
      v18 = String.init(_:)(v17);
      countAndFlagsBits = v18._countAndFlagsBits;
      object = v18._object;
      v19 = (void *)MEMORY[0x22E2F652C](a1);
      v20 = (void *)RIOPxrTfTokenCopyString();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v21;

      v22 = RIOBuilderParentPrimInputDescriptorCopyOptionality();
      result = 0;
      v16 = v22 == 0;
      v15 = 16;
      break;
    case 3:
      v23 = (void *)RIOBuilderChildPrimInputDescriptorCopyInputName();
      v24 = String.init(_:)(v23);
      countAndFlagsBits = v24._countAndFlagsBits;
      object = v24._object;
      v25 = (void *)MEMORY[0x22E2F6244](a1);
      v26 = (void *)RIOPxrTfTokenCopyString();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v27;

      v16 = RIOBuilderChildPrimInputDescriptorCopyChildPrimType();
      result = RIOBuilderChildPrimInputDescriptorCopyOptionality() == 0;
      v15 = 32;
      break;
    case 4:
      v28 = (void *)RIOBuilderRelatedPrimInputDescriptorCopyInputName();
      v29 = String.init(_:)(v28);
      countAndFlagsBits = v29._countAndFlagsBits;
      object = v29._object;
      v30 = (void *)MEMORY[0x22E2F658C](a1);
      v31 = (void *)RIOPxrTfTokenCopyString();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v32;

      v16 = RIOBuilderRelatedPrimInputDescriptorCopyPropertyNameOnCurrentPrimWithRelationship();
      result = RIOBuilderRelatedPrimInputDescriptorCopyOptionality() == 0;
      v15 = 80;
      break;
    case 5:
      v33 = (void *)RIOBuilderStaticPrimInputDescriptorCopyInputName();
      v34 = String.init(_:)(v33);
      countAndFlagsBits = v34._countAndFlagsBits;
      object = v34._object;
      v35 = (void *)MEMORY[0x22E2F65EC](a1);
      v36 = (void *)RIOPxrTfTokenCopyString();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v37;

      v16 = RIOBuilderStaticPrimInputDescriptorCopyPrimPath();
      result = RIOBuilderStaticPrimInputDescriptorCopyOptionality() == 0;
      v15 = 96;
      break;
    case 6:
      v38 = (void *)RIOBuilderEntityGeneratingPrimInputDescriptorCopyInputName();
      v39 = String.init(_:)(v38);
      countAndFlagsBits = v39._countAndFlagsBits;
      object = v39._object;
      v40 = (void *)MEMORY[0x22E2F6400](a1);
      v41 = (void *)RIOPxrTfTokenCopyString();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v42;

      v43 = RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality();
      result = 0;
      v16 = v43 == 0;
      v15 = 112;
      break;
    case 7:
      v44 = (void *)RIOBuilderCustomCallbackInputDescriptorCopyInputName();
      v45 = String.init(_:)(v44);
      countAndFlagsBits = v45._countAndFlagsBits;
      object = v45._object;
      v46 = (void *)MEMORY[0x22E2F6400](a1);
      v47 = RIOPxrTfTokenCopyString();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v48;

      LOBYTE(v47) = RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality() == 0;
      v49 = (id)RIOBuilderCustomCallbackInputDescriptorCopyCallbackFunction();
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = v49;
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RIOPxrUsdStageRef, @unowned RIOPxrSdfPathRef) -> (@unowned Unmanaged<CFSetRef>);
      *(_QWORD *)(result + 24) = v50;
      v15 = v47 | 0x80;
      v16 = (uint64_t)partial apply for closure #1 in static InputDescriptor.create(from:);
      break;
    default:
      countAndFlagsBits = 0;
      v10 = 0;
      result = 0;
      v15 = 0;
      object = (void *)0xE000000000000000;
      v16 = 1;
      v12 = 0xE000000000000000;
      break;
  }
  *(_QWORD *)a2 = countAndFlagsBits;
  *(_QWORD *)(a2 + 8) = object;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = result;
  *(_BYTE *)(a2 + 48) = v15;
  return result;
}

uint64_t closure #1 in static InputDescriptor.create(from:)(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  void *v3;

  v3 = (void *)a3(*(_QWORD *)(a1 + 16), *a2);
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
  static Set._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4B08];
}

void specialized static InputDescriptor.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22BCC78CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;

  if (v9 < 0x10)
  {
    if (v3 == v4 && v7 == v0)
      goto LABEL_6;
    v49 = v2;
    v14 = v0;
    v15 = v7;
    v16 = v1;
    v17 = v3;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v3 = v17;
    v2 = v49;
    v1 = v16;
    v7 = v15;
    v11 = v56;
    v0 = v14;
    v4 = *(_QWORD *)(v13 - 88);
    if ((v18 & 1) != 0)
    {
LABEL_6:
      v52 = v8;
      if (v2 == v11 && v1 == v10)
      {
        v19 = v2;
        v20 = v1;
        v21 = v9;
        v22 = v9;
        v23 = v3;
        outlined copy of InputDescriptor(v4, v0, v2, v1, (void *)v5, v8, v22);
        v24 = (char)v6;
        outlined copy of InputDescriptor(v23, v7, v19, v20, v6, v12, v55);
        outlined consume of InputDescriptor(v23, v7, v19, v20, v6, v12, v55);
        outlined consume of InputDescriptor(*(_QWORD *)(v13 - 88), v54, v19, v20, (void *)v5, v52, v21);
      }
      else
      {
        v48 = v1;
        v50 = v2;
        v39 = v0;
        v51 = v7;
        v40 = v10;
        v41 = (void *)v5;
        v5 = v3;
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of InputDescriptor(v4, v39, v11, v40, v41, v8, v9);
        v24 = (char)v6;
        outlined copy of InputDescriptor(v5, v51, v50, v48, v6, v12, v55);
        v42 = v5;
        LOBYTE(v5) = (_BYTE)v41;
        outlined consume of InputDescriptor(v42, v51, v50, v48, v6, v12, v55);
        outlined consume of InputDescriptor(*(_QWORD *)(v13 - 88), v54, v56, v40, v41, v52, v9);
        v37 = 0;
        if ((v47 & 1) == 0)
          return v37 & 1;
      }
      v37 = ((v24 & 1) == 0) ^ v5;
      return v37 & 1;
    }
    v43 = v14;
    v44 = v10;
    v45 = v1;
    v46 = v3;
    outlined copy of InputDescriptor(*(_QWORD *)(v13 - 88), v43, v56, v44, (void *)v5, v8, v9);
    outlined copy of InputDescriptor(v46, v7, v49, v45, v6, v12, v55);
    outlined consume of InputDescriptor(v46, v7, v49, v45, v6, v12, v55);
    v30 = *(_QWORD *)(v13 - 88);
    v32 = (void *)v5;
    v31 = v54;
    v33 = v56;
    v34 = v44;
    v35 = v8;
    v36 = v9;
  }
  else
  {
    v25 = v2;
    v26 = v11;
    v27 = v1;
    v53 = (void *)v5;
    v28 = (void *)v5;
    v29 = v3;
    outlined copy of InputDescriptor(v4, v0, v26, v10, v28, v8, v9);
    outlined copy of InputDescriptor(v29, v7, v25, v27, v6, v12, v55);
    outlined consume of InputDescriptor(v29, v7, v25, v27, v6, v12, v55);
    v30 = *(_QWORD *)(v13 - 88);
    v32 = v53;
    v31 = v54;
    v33 = v56;
    v34 = v10;
    v35 = v8;
    v36 = v9;
  }
  outlined consume of InputDescriptor(v30, v31, v33, v34, v32, v35, v36);
  v37 = 0;
  return v37 & 1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

unint64_t lazy protocol witness table accessor for type [ToolsFoundations.Token] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [ToolsFoundations.Token] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ToolsFoundations.Token] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ToolsFoundations.Token]);
    v2 = lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE12A8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolsFoundations.Token] and conformance <A> [A]);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ImportSession()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type ImportSession and conformance ImportSession, type metadata accessor for ImportSession, (uint64_t)&protocol conformance descriptor for ImportSession);
}

void destroy for InputDescriptor(uint64_t a1)
{
  outlined consume of InputDescriptor(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for InputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of InputDescriptor(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for InputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of InputDescriptor(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(void **)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of InputDescriptor(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InputDescriptor(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of InputDescriptor(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for InputDescriptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x78 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 120);
  v3 = ((*(unsigned __int8 *)(a1 + 48) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 48) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x77)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InputDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x77)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 120;
    if (a3 >= 0x78)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x78)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 48) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for InputDescriptor(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 4;
}

uint64_t destructiveProjectEnumData for InputDescriptor(uint64_t result)
{
  *(_BYTE *)(result + 48) &= 0xFu;
  return result;
}

uint64_t destructiveInjectEnumTag for InputDescriptor(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for InputDescriptor()
{
  return &type metadata for InputDescriptor;
}

uint64_t sub_22BCC8894()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RIOPxrUsdStageRef, @unowned RIOPxrSdfPathRef) -> (@unowned Unmanaged<CFSetRef>)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_22BCC88CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static InputDescriptor.create(from:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return closure #1 in static InputDescriptor.create(from:)(a1, a2, *(uint64_t (**)(_QWORD, _QWORD))(v2 + 16));
}

uint64_t partial apply for closure #1 in InputDescriptor.convertToCore()(void *a1, void *a2)
{
  uint64_t v2;

  return closure #1 in InputDescriptor.convertToCore()(a1, a2, *(uint64_t (**)(uint64_t, unint64_t *))(v2 + 16));
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

id one-time initialization function for PreliminaryGravitationalForcePrimTypeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static PhysicsComponentBuilder.PreliminaryGravitationalForcePrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravitationalForcePrimTypeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static PhysicsComponentBuilder.GravitationalForcePrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityAccelerationPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static PhysicsComponentBuilder.GravityAccelerationPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityPrimTypeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static PhysicsComponentBuilder.GravityPrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityDirectionPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static PhysicsComponentBuilder.GravityDirectionPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for GravityMagnitudePropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static PhysicsComponentBuilder.GravityMagnitudePropertyName = (uint64_t)result;
  return result;
}

uint64_t closure #1 in closure #1 in PhysicsComponentBuilder.stageSubscription.getter()
{
  void *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t inited;
  uint64_t v11;
  unint64_t v13;

  if (one-time initialization token for GravityDirectionPropertyName != -1)
    swift_once();
  v0 = (void *)static PhysicsComponentBuilder.GravityDirectionPropertyName;
  type metadata accessor for NamedPropertyDirtyState();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = v0;
  v3 = MEMORY[0x24BEE4B08];
  v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x24BEE4B08]);

  v1[2] = v3;
  v1[3] = v4;
  v5 = one-time initialization token for GravityMagnitudePropertyName;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = (void *)static PhysicsComponentBuilder.GravityMagnitudePropertyName;
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = v6;
  v8 = v6;
  v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  v7[2] = v3;
  v7[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C650;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v7;
  v13 = inited;
  specialized Array._endMutation()();
  v11 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t closure #2 in PhysicsComponentBuilder.stageSubscription.getter()
{
  uint64_t inited;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5C0;
  if (one-time initialization token for PreliminaryGravitationalForcePrimTypeName != -1)
    swift_once();
  v1 = (void *)static PhysicsComponentBuilder.PreliminaryGravitationalForcePrimTypeName;
  *(_QWORD *)(inited + 32) = static PhysicsComponentBuilder.PreliminaryGravitationalForcePrimTypeName;
  v2 = one-time initialization token for GravitationalForcePrimTypeName;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v4 = (void *)static PhysicsComponentBuilder.GravitationalForcePrimTypeName;
  *(_QWORD *)(inited + 40) = static PhysicsComponentBuilder.GravitationalForcePrimTypeName;
  v5 = v4;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v7 = v6;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (one-time initialization token for GravityAccelerationPropertyName != -1)
    swift_once();
  v8 = (void *)static PhysicsComponentBuilder.GravityAccelerationPropertyName;
  type metadata accessor for NamedPropertyDirtyState();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = v8;
  v10 = v8;
  v11 = MEMORY[0x24BEE4B08];
  v12 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v10, MEMORY[0x24BEE4B08]);

  v9[2] = v11;
  v9[3] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v13 + 32) = v9;
  v20 = v13;
  specialized Array._endMutation()();
  swift_retain();
  v14 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v20);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for TypeNamePrimDirtyState();
  v15 = (_QWORD *)swift_allocObject();
  v15[5] = v7;
  swift_bridgeObjectRetain();
  v16 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v7, v14, v11);
  swift_bridgeObjectRelease();
  v15[2] = v11;
  v15[3] = v14;
  v15[4] = v16;
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v17 + 32) = v15;
  v21 = v17;
  specialized Array._endMutation()();
  v18 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v21);
  swift_bridgeObjectRelease();
  return v18;
}

void PhysicsComponentBuilder.run(inputs:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[48];
  _BYTE v12[48];
  _BYTE v13[48];
  _BYTE v14[48];
  _QWORD v15[4];
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v1 = v0;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v3 = static EntityBuilder.OutputName;
  v2 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v3, v2, &v17);
  if (!v18)
  {
    outlined destroy of Any?((uint64_t)&v17);
    goto LABEL_19;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (!EntityProxy.parent.getter())
    goto LABEL_23;
  Inputs.prim.getter();
  if (one-time initialization token for GravityAccelerationPropertyName != -1)
    swift_once();
  v4 = (id)static PhysicsComponentBuilder.GravityAccelerationPropertyName;
  specialized Prim.attributeValue<A>(of:type:)((uint64_t)v11);

  swift_release();
  outlined init with take of SIMD3<Double>?((uint64_t)v11, (uint64_t)&v17);
  if ((v19 & 1) == 0)
  {
    EntityProxy.setGravity(_:)();
LABEL_22:
    swift_release();
LABEL_23:
    swift_release();
    return;
  }
  Inputs.prim.getter();
  if (one-time initialization token for GravityDirectionPropertyName != -1)
    swift_once();
  v5 = (id)static PhysicsComponentBuilder.GravityDirectionPropertyName;
  specialized Prim.attributeValue<A>(of:type:)((uint64_t)v12);

  swift_release();
  outlined init with take of SIMD3<Double>?((uint64_t)v12, (uint64_t)v15);
  if (v16 == 1)
    goto LABEL_22;
  Inputs.prim.getter();
  if (one-time initialization token for GravityMagnitudePropertyName != -1)
    swift_once();
  v6 = (id)static PhysicsComponentBuilder.GravityMagnitudePropertyName;
  specialized Prim.attributeValue<A>(of:type:)((uint64_t)v13);

  swift_release();
  outlined init with take of SIMD3<Double>?((uint64_t)v13, (uint64_t)v14);
  if (v14[32] == 1 || !EntityProxy.setGravity(_:)())
    goto LABEL_22;
  swift_beginAccess();
  v7 = objc_getAssociatedObject(v1, &static BuilderAssociatedKeys.CoreReference);
  swift_endAccess();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v9, &v10);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    RIOBuilderAddComponent();
    swift_release();
    swift_release();

  }
  else
  {
    __break(1u);
  }
}

uint64_t EntityProxy.setGravity(_:)()
{
  uint64_t v0;

  if (!static __RKScenePhysics.registration.getter())
    return 0;
  __RKScenePhysics.Registration.componentType.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  v0 = REEntityGetOrAddComponentByClass();
  if (RECustomComponentGetObject())
    __RKScenePhysics.gravity.setter();
  return v0;
}

uint64_t closure #1 in PhysicsComponentBuilder.clear(inputs:)()
{
  uint64_t result;

  result = static __RKScenePhysics.registration.getter();
  if (result)
  {
    __RKScenePhysics.Registration.componentType.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    return REEntityRemoveComponentByClass();
  }
  return result;
}

uint64_t type metadata accessor for PhysicsComponentBuilder()
{
  return objc_opt_self();
}

uint64_t specialized PhysicsComponentBuilder.stageSubscription.getter()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;

  if (one-time initialization token for GravityPrimTypeName != -1)
    swift_once();
  v0 = (void *)static PhysicsComponentBuilder.GravityPrimTypeName;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v0;
  v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = closure #1 in closure #1 in PhysicsComponentBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE4B08];
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v9 + 32) = v6;
  v17 = v9;
  specialized Array._endMutation()();
  swift_retain();
  v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v17);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v11 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v10, 0);
  swift_retain();
  v12 = closure #2 in PhysicsComponentBuilder.stageSubscription.getter();
  swift_allocObject();
  v13 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v12, 0);
  v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_22BD0C650;
  *(_QWORD *)(v14 + 32) = v11;
  *(_QWORD *)(v14 + 40) = v13;
  v18 = v14;
  specialized Array._endMutation()();
  v15 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v18);
  swift_bridgeObjectRelease();
  swift_release();
  return v15;
}

uint64_t specialized PhysicsComponentBuilder.inputDescriptors()()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C760;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v5 = static EntityBuilder.OutputIdentifier;
  v4 = *(_QWORD *)algn_255BFA2C8;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  *(_OWORD *)(inited + 64) = xmmword_22BD0C5D0;
  *(_BYTE *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 96) = 0x800000022BD07AE0;
  *(_QWORD *)(inited + 104) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 112) = 0x800000022BD07AE0;
  *(_QWORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0;
  *(_BYTE *)(inited + 136) = 0;
  *(_QWORD *)(inited + 144) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 152) = 0x800000022BD07AE0;
  *(_QWORD *)(inited + 160) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 168) = 0x800000022BD07AE0;
  *(_QWORD *)(inited + 176) = 0;
  *(_QWORD *)(inited + 184) = 0;
  *(_BYTE *)(inited + 192) = 16;
  swift_bridgeObjectRetain();
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v7 = v6;
  swift_setDeallocating();
  swift_arrayDestroy();
  return v7;
}

uint64_t specialized PhysicsComponentBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  __int128 aBlock;
  uint64_t (*v9)(uint64_t);
  void *v10;
  uint64_t (*v11)();
  uint64_t v12;

  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = static EntityBuilder.OutputName;
  v0 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v1, v0, &aBlock);
  if (!v10)
    goto LABEL_8;
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = EntityProxy.parent.getter();
  if (!v2)
    return swift_release();
  v3 = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in PhysicsComponentBuilder.clear(inputs:);
  *(_QWORD *)(v4 + 24) = v3;
  v11 = partial apply for thunk for @callee_guaranteed () -> ();
  v12 = v4;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v9 = thunk for @escaping @callee_guaranteed () -> ();
  v10 = &block_descriptor_18;
  v5 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v5);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_8:
    outlined destroy of Any?((uint64_t)&aBlock);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in PhysicsComponentBuilder.clear(inputs:)()
{
  return closure #1 in PhysicsComponentBuilder.clear(inputs:)();
}

uint64_t sub_22BCC9904()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t outlined init with take of SIMD3<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)(double a1, __n128 a2, __n128 a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _OWORD v21[2];

  v21[0] = a2;
  v21[1] = a3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for __RKEntityActionSpecification();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a5, v8);
  __RKEntityLookAtCameraActionArguments.init(target:duration:animationDuration:direction:rotation:upVector:loops:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDE6980], v12);
  v16 = *a6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
    *a6 = v16;
  }
  v19 = *(_QWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  if (v19 >= v18 >> 1)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v16);
    *a6 = v16;
  }
  *(_QWORD *)(v16 + 16) = v19 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v16+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v19, v15, v12);
}

uint64_t specialized static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;

  v0 = type metadata accessor for __RKEntityGroupActionOrder();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v30);

  swift_release();
  v5 = v30;
  if (v31 == 1)
  {
    v35 = v30;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v5, 1);
    return MEMORY[0x24BEE4AF8];
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v6 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v6 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v30);

  swift_release();
  v7 = v30;
  v8 = v31;
  v9 = v32;
  if (v34 == 1)
  {
    v10 = v33;
    v35 = v30;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v11 = v7;
    v12 = v8;
    v13 = v9;
LABEL_16:
    outlined consume of Result<Vector3<Double>, Object.Error>(v11, v12, v13, v10, 1);
    return MEMORY[0x24BEE4AF8];
  }
  v29 = v0;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v14 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v14 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v30);

  v15 = swift_release();
  v16 = v30;
  v17 = v31;
  v18 = v32;
  if ((v34 & 1) != 0)
  {
    v10 = v33;
    v35 = v30;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v11 = v16;
    v12 = v17;
    v13 = v18;
    goto LABEL_16;
  }
  v28 = (uint64_t)&v28;
  v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(double *)&v21 = MEMORY[0x24BDAC7A8](v15);
  *(&v28 - 6) = (uint64_t)&v30;
  *(&v28 - 5) = (uint64_t)v5;
  *((_OWORD *)&v28 - 2) = v22;
  *((_OWORD *)&v28 - 1) = v21;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:), (uint64_t)(&v28 - 8));
  v23 = v29;
  v19 = v30;
  if (v30[2] >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v24 = type metadata accessor for __RKEntityActionSpecification();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_22BD0C360;
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE68D0], v23);
    swift_bridgeObjectRetain();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v25 + 104))(v27 + v26, *MEMORY[0x24BDE69C8], v24);
    swift_bridgeObjectRelease();
    return v27;
  }
  return (uint64_t)v19;
}

void outlined consume of Result<Vector3<Double>, Object.Error>(id a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    outlined consume of Object.Error(a1);
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)(*(double *)(v2 + 24), *(__n128 *)(v2 + 32), *(__n128 *)(v2 + 48), a1, a2, *(unint64_t **)(v2 + 16));
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay9RealityIO27SceneDescriptionFoundationsO9AssetPathVGAMG_Sbs5NeverOTg503_s9f4IO27hij2O9kl21VAESbIgnnd_AE_AEtSbs5M130OIegnrzr_TR03_s9a82IO39VirtualEnvironmentProbeComponentBuilderC3run6inputsyAA6InputsC_tFyyXEfU_SbAA27cde2O9fg5V_AKtT3U0_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  id *v5;
  void **v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a2 + 16) >= v29)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  v32 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v30 = a2;
  v31 = a1;
  v27 = v4;
  if (v4)
  {
    v5 = (id *)(a1 + 32);
    v6 = (void **)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      v7 = *v5;
      v8 = *v6;
      v9 = *v5;
      v10 = v8;
      if (!v7)
        break;
      v11 = v10;
      type metadata accessor for RIOPxrSdfAssetPathRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
      v12 = static _CFObject.== infix(_:_:)();

      v14 = *(_QWORD *)(v32 + 16);
      v13 = *(_QWORD *)(v32 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v32 + 16) = v14 + 1;
      *(_BYTE *)(v32 + v14 + 32) = (v12 & 1) == 0;
      ++v5;
      ++v6;
      if (!--v4)
        goto LABEL_12;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_12:
    if (v29 <= v28)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v15 = v28 - v27;
    v16 = v29 - v27;
    v17 = 8 * v27 + 32;
    v18 = (void **)(v31 + v17);
    v19 = (void **)(v30 + v17);
    while (v16)
    {
      if (v15)
      {
        v20 = *v18;
        v21 = *v19;
        type metadata accessor for RIOPxrSdfAssetPathRef(0);
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
        v22 = v20;
        v23 = v21;
        v24 = static _CFObject.== infix(_:_:)();

        v26 = *(_QWORD *)(v32 + 16);
        v25 = *(_QWORD *)(v32 + 24);
        if (v26 >= v25 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        *(_QWORD *)(v32 + 16) = v26 + 1;
        *(_BYTE *)(v32 + v26 + 32) = (v24 & 1) == 0;
        --v15;
        ++v18;
        ++v19;
        if (--v16)
          continue;
      }
      goto LABEL_19;
    }
    __break(1u);
    __break(1u);
  }
  __break(1u);
}

uint64_t one-time initialization function for virtualEnvProbeComponent()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.virtualEnvProbeComponent = result;
  return result;
}

id one-time initialization function for modeAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static VirtualEnvironmentProbeComponentBuilder.modeAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for relativeWeightPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static VirtualEnvironmentProbeComponentBuilder.relativeWeightPropertyName = (uint64_t)result;
  return result;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5C0;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v3 = static EntityBuilder.OutputName;
  v2 = *(_QWORD *)algn_255BED398;
  v4 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  *(_QWORD *)(inited + 32) = v3;
  v6 = static EntityBuilder.OutputIdentifier;
  v5 = *(_QWORD *)algn_255BFA2C8;
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_QWORD *)(inited + 56) = v5;
  *(_BYTE *)(inited + 80) = 112;
  v7 = *(void **)(v0 + 16);
  *(_OWORD *)(inited + 88) = xmmword_22BD112A0;
  *(_QWORD *)(inited + 104) = 0xD000000000000020;
  *(_QWORD *)(inited + 112) = 0x800000022BD07090;
  *(_QWORD *)(inited + 120) = v7;
  *(_QWORD *)(inited + 128) = 1;
  *(_BYTE *)(inited + 136) = 32;
  swift_bridgeObjectRetain();
  v8 = v7;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v10 = v9;
  swift_setDeallocating();
  swift_arrayDestroy();
  return v10;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];
  _QWORD aBlock[6];

  v2 = *v1;
  v7[2] = a1;
  v7[4] = v2;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:);
  *(_QWORD *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_19;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t ResourceCount;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  id v60;
  uint64_t v61;
  _QWORD *v62;
  void *EmptyValue;
  char Float;
  float v65;
  id v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  Inputs.prim.getter();
  v3 = (void *)RIOPxrUsdObjectCopyName();
  v4 = (void *)RIOPxrTfTokenCopyString();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  if (one-time initialization token for infoID != -1)
    swift_once();
  v8 = (id)static VirtualEnvironmentProbeComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_30:
    VirtualEnvironmentProbeComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  v9 = (void *)RIOPxrUsdPrimCopyAttribute();
  v10 = RIOPxrUsdAttributeCopyValue();
  if (!v10)
  {
    swift_bridgeObjectRelease();

    goto LABEL_30;
  }
  v11 = (void *)v10;
  v12 = RIOPxrVtValueCopyToken();
  if (!v12)
  {
    swift_bridgeObjectRelease();

    goto LABEL_30;
  }
  v13 = (void *)v12;

  v14 = (void *)RIOPxrTfTokenCopyString();
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  if (v15 == 0xD000000000000022 && v17 == 0x800000022BD0A520)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_13:
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for virtualEnvProbeComponent != -1)
        swift_once();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_22BD0C5C0;
      v36 = (void *)RIOPxrUsdObjectCopyPath();
      v37 = (void *)RIOPxrSdfPathCopyString();
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v40 = v39;

      v41 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v35 + 56) = MEMORY[0x24BEE0D00];
      v42 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v35 + 32) = v38;
      *(_QWORD *)(v35 + 40) = v40;
      *(_QWORD *)(v35 + 96) = v41;
      *(_QWORD *)(v35 + 104) = v42;
      *(_QWORD *)(v35 + 64) = v42;
      *(_QWORD *)(v35 + 72) = v5;
      *(_QWORD *)(v35 + 80) = v7;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v19 = static EntityBuilder.OutputName;
  v20 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v19, v20, &v77);
  if (!v78)
  {
    outlined destroy of Any?((uint64_t)&v77);
    goto LABEL_50;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    if (one-time initialization token for virtualEnvProbeComponent != -1)
      swift_once();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v48 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v48 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v48 + 32) = v5;
    *(_QWORD *)(v48 + 40) = v7;
    os_log(_:dso:log:type:_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((RIOPxrUsdPrimIsActive() & 1) == 0)
  {
    VirtualEnvironmentProbeComponentBuilder.clear(inputs:)();
    swift_release();
    return swift_release();
  }
  __AssetRef.__as<A>(_:)();
  REVirtualEnvironmentProbeComponentGetComponentType();
  v21 = REEntityGetOrAddComponentByClass();
  swift_beginAccess();
  v22 = (uint64_t)objc_getAssociatedObject((id)a2, &static BuilderAssociatedKeys.CoreReference);
  swift_endAccess();
  if (!v22)
  {
    __break(1u);
LABEL_104:
    v57 = v22;
    v21 = v73;
    if (!v22)
      goto LABEL_105;
LABEL_77:
    v58 = 0;
    v59 = 0.0;
    while (1)
    {
      if ((v74 & 0xC000000000000001) != 0)
        MEMORY[0x22E2F57B8](v58, v74);
      else
        swift_retain();
      if (one-time initialization token for relativeWeightPropertyName != -1)
        swift_once();
      v60 = (id)static VirtualEnvironmentProbeComponentBuilder.relativeWeightPropertyName;
      if (!RIOPxrUsdPrimHasAttribute())
        break;
      v61 = RIOPxrUsdPrimCopyAttribute();
      type metadata accessor for AnyAttribute();
      v62 = (_QWORD *)swift_allocObject();
      v62[2] = v61;
      EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
      if (!EmptyValue)
        EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
      outlined consume of Result<AnyAttribute, Object.Error>(v62, 0);

      LODWORD(v77) = 0;
      Float = RIOPxrVtValueGetFloat();

      v21 = v73;
      if ((Float & 1) == 0)
        goto LABEL_91;
      v65 = *(float *)&v77;
LABEL_92:
      v59 = v59 + v65;
      REVirtualEnvironmentProbeComponentSetRelativeWeight();
      if (one-time initialization token for intensityPropertyName != -1)
        swift_once();
      v66 = (id)static VirtualEnvironmentProbeComponentBuilder.intensityPropertyName;
      if (RIOPxrUsdPrimHasAttribute())
      {
        v67 = RIOPxrUsdPrimCopyAttribute();
        type metadata accessor for AnyAttribute();
        v68 = (_QWORD *)swift_allocObject();
        v68[2] = v67;
        v69 = (void *)RIOPxrUsdAttributeCopyValue();
        if (!v69)
          v69 = (void *)RIOPxrVtValueCreateEmptyValue();
        outlined consume of Result<AnyAttribute, Object.Error>(v68, 0);

        LODWORD(v77) = 0;
        RIOPxrVtValueGetFloat();

        v21 = v73;
      }
      else
      {
        *(_QWORD *)&v77 = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

      }
      REVirtualEnvironmentProbeComponentSetIntensityExponent();
      swift_release();
      if (v57 == ++v58)
        goto LABEL_105;
    }
    *(_QWORD *)&v77 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

LABEL_91:
    v65 = 1.0;
    goto LABEL_92;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v76, &v77);
  type metadata accessor for RIOBuilderRef(0);
  swift_dynamicCast();
  RIOBuilderAddComponent();

  v23 = VirtualEnvironmentProbeComponentBuilder.getIBLResourcePrims(fromPrim:)();
  swift_retain();
  v24 = specialized Sequence.compactMap<A>(_:)(v23);
  swift_release();
  ResourceCount = REVirtualEnvironmentProbeComponentGetResourceCount();
  v26 = *(_QWORD *)(a2 + 32);
  v73 = v21;
  v74 = v23;
  v27 = v23 >> 62;
  v71 = v27;
  v72 = ResourceCount;
  if (ResourceCount != *(_QWORD *)(v26 + 16))
    goto LABEL_55;
  if (v27)
    goto LABEL_100;
  v28 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v72 == v28)
    {
      swift_bridgeObjectRetain();
      v29 = swift_bridgeObjectRetain();
      _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay9RealityIO27SceneDescriptionFoundationsO9AssetPathVGAMG_Sbs5NeverOTg503_s9f4IO27hij2O9kl21VAESbIgnnd_AE_AEtSbs5M130OIegnrzr_TR03_s9a82IO39VirtualEnvironmentProbeComponentBuilderC3run6inputsyAA6InputsC_tFyyXEfU_SbAA27cde2O9fg5V_AKtT3U0_Tf3nnnpf_nTf1cn_n(v29, v26);
      v31 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v71;
      if (v72)
      {
        v32 = v72;
        v70 = v24;
        if ((unint64_t)(v72 - 1) < *(_QWORD *)(v31 + 16))
        {
          v33 = 0;
          while (1)
          {
            if ((v74 & 0xC000000000000001) != 0)
              MEMORY[0x22E2F57B8](v33, v74);
            else
              swift_retain();
            if (*(_BYTE *)(v31 + v33 + 32) == 1)
              break;
            swift_release();
LABEL_35:
            if (v32 == ++v33)
              goto LABEL_71;
          }
          v43 = v31;
          if (one-time initialization token for iblPropertyName != -1)
            swift_once();
          v44 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
          if (RIOPxrUsdPrimHasAttribute())
          {
            v45 = RIOPxrUsdPrimCopyAttribute();

            type metadata accessor for AnyAttribute();
            v46 = (_QWORD *)swift_allocObject();
            v46[2] = v45;
            Inputs.createIBLAsset(on:)();
            if (v47)
            {
              v21 = v73;
              REVirtualEnvironmentProbeComponentSetResource();
              RERelease();
              swift_release();
              outlined consume of Result<AnyAttribute, Object.Error>(v46, 0);
LABEL_48:
              v31 = v43;
              v32 = v72;
              goto LABEL_35;
            }
            outlined consume of Result<AnyAttribute, Object.Error>(v46, 0);
            v21 = v73;
          }
          else
          {

            *(_QWORD *)&v77 = 0;
            lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
            swift_willThrowTypedImpl();
            outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
          }
          REVirtualEnvironmentProbeComponentSetResource();
          swift_release();
          goto LABEL_48;
        }
LABEL_102:
        __break(1u);
      }
    }
    else
    {
      v27 = v71;
LABEL_55:
      *(_QWORD *)(a2 + 32) = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      REVirtualEnvironmentProbeComponentClearResources();
      if (v27)
      {
        swift_bridgeObjectRetain();
        v49 = _CocoaArrayWrapper.endIndex.getter();
        if (!v49)
          goto LABEL_74;
LABEL_57:
        v70 = v24;
        if (v49 < 1)
        {
          __break(1u);
          goto LABEL_102;
        }
        v50 = 0;
        while (2)
        {
          if ((v74 & 0xC000000000000001) != 0)
            MEMORY[0x22E2F57B8](v50, v74);
          else
            swift_retain();
          if (one-time initialization token for iblPropertyName != -1)
            swift_once();
          v53 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
          if (RIOPxrUsdPrimHasAttribute())
          {
            v54 = RIOPxrUsdPrimCopyAttribute();

            type metadata accessor for AnyAttribute();
            v55 = (_QWORD *)swift_allocObject();
            v55[2] = v54;
            Inputs.createIBLAsset(on:)();
            if (v56)
            {
              v21 = v73;
              REVirtualEnvironmentProbeComponentAddResource();
              RERelease();
              swift_release();
              v51 = v55;
              v52 = 0;
LABEL_60:
              outlined consume of Result<AnyAttribute, Object.Error>(v51, v52);
            }
            else
            {
              swift_release();
              outlined consume of Result<AnyAttribute, Object.Error>(v55, 0);
              v21 = v73;
            }
            if (v49 == ++v50)
            {
LABEL_71:
              swift_bridgeObjectRelease();
              v24 = v70;
              v27 = v71;
              goto LABEL_75;
            }
            continue;
          }
          break;
        }

        *(_QWORD *)&v77 = 0;
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        swift_release();
        v51 = 0;
        v52 = 1;
        goto LABEL_60;
      }
      v49 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v49)
        goto LABEL_57;
    }
LABEL_74:
    swift_bridgeObjectRelease();
LABEL_75:
    *(_QWORD *)(a2 + 32) = v24;
    swift_bridgeObjectRelease();
    if (!v27)
      break;
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v22 & 0x8000000000000000) == 0)
      goto LABEL_104;
    __break(1u);
LABEL_100:
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(a2 + 32);
  }
  v57 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v57)
    goto LABEL_77;
LABEL_105:
  swift_bridgeObjectRelease();
  MEMORY[0x22E2F5E0C](v21);
  swift_release();
  result = swift_release();
  *(_BYTE *)(a2 + 41) = 1;
  return result;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v1, &v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 41) & 1) == 0)
    return swift_release();
  *(_QWORD *)(v0 + 32) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  __AssetRef.__as<A>(_:)();
  REVirtualEnvironmentProbeComponentGetComponentType();
  REEntityRemoveComponentByClass();
  result = swift_release();
  *(_BYTE *)(v0 + 41) = 0;
  return result;
}

unint64_t VirtualEnvironmentProbeComponentBuilder.getIBLResourcePrims(fromPrim:)()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  char v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  void *EmptyValue;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = specialized VirtualEnvironmentProbeComponentBuilder.getMode(fromPrim:)();
  if (v0 == 3)
    v1 = 2;
  else
    v1 = v0;
  result = Prim.children.getter();
  v3 = result;
  v20 = MEMORY[0x24BEE4AF8];
  if (result >> 62)
  {
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (result)
      goto LABEL_6;
LABEL_28:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_28;
LABEL_6:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = v3 & 0xC000000000000001;
    v18 = v3;
    while (1)
    {
      if (v7)
      {
        MEMORY[0x22E2F57B8](v5, v3);
        if (v6 < v1)
          goto LABEL_14;
      }
      else
      {
        swift_retain();
        if (v6 < v1)
        {
LABEL_14:
          v8 = v4;
          v9 = (void *)RIOPxrUsdPrimCopyTypeName();
          v10 = *(void **)(v19 + 16);
          type metadata accessor for RIOPxrTfTokenRef(0);
          lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
          v11 = v10;
          v12 = static _CFObject.== infix(_:_:)();

          if ((v12 & 1) != 0)
          {
            if (one-time initialization token for iblPropertyName != -1)
              swift_once();
            v13 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
            if (RIOPxrUsdPrimHasAttribute())
            {
              v14 = RIOPxrUsdPrimCopyAttribute();
              type metadata accessor for AnyAttribute();
              v15 = (_QWORD *)swift_allocObject();
              v15[2] = v14;
              EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
              if (!EmptyValue)
                EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
              outlined consume of Result<AnyAttribute, Object.Error>(v15, 0);

              v17 = (void *)RIOPxrVtValueCopyAssetPath();
              if (v17)
              {

                ++v6;
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
              }
              else
              {
                swift_release();

              }
            }
            else
            {
              lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
              swift_willThrowTypedImpl();
              outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
              swift_release();

            }
          }
          else
          {
            swift_release();
          }
          v4 = v8;
          v3 = v18;
          goto LABEL_9;
        }
      }
      swift_release();
LABEL_9:
      if (v4 == ++v5)
      {
        swift_bridgeObjectRelease();
        return v20;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t VirtualEnvironmentProbeComponentBuilder.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VirtualEnvironmentProbeComponentBuilder()
{
  return objc_opt_self();
}

uint64_t VirtualEnvironmentProbeComponentBuilder.init()()
{
  uint64_t v0;
  id v1;

  if (String.count.getter() < 1)
    v1 = (id)RIOPxrTfTokenEmpty();
  else
    v1 = (id)RIOPxrTfTokenCreateWithCString();
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = 1065353216;
  *(_QWORD *)(v0 + 32) = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v0 + 40) = 2;
  return v0;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance VirtualEnvironmentProbeComponentBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v5;

  v0 = specialized closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v5 = inited;
  specialized Array._endMutation()();
  v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *EmptyValue;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;

  v1 = a1;
  if (a1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = v1 & 0xC000000000000001;
      v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v4 = 4;
      v5 = 0x255BE7000uLL;
      while (1)
      {
        v6 = v4 - 4;
        if (v3)
        {
          MEMORY[0x22E2F57B8](v4 - 4, v1);
          v7 = v4 - 3;
          if (__OFADD__(v6, 1))
            goto LABEL_24;
        }
        else
        {
          swift_retain();
          v7 = v4 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        if (*(_QWORD *)(v5 + 2472) != -1)
          swift_once();
        v8 = (id)static VirtualEnvironmentProbeComponentBuilder.iblPropertyName;
        if (RIOPxrUsdPrimHasAttribute())
        {
          v9 = v1;
          v10 = v2;
          v11 = RIOPxrUsdPrimCopyAttribute();
          type metadata accessor for AnyAttribute();
          v12 = (_QWORD *)swift_allocObject();
          v12[2] = v11;
          EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
          if (!EmptyValue)
            EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
          outlined consume of Result<AnyAttribute, Object.Error>(v12, 0);

          v14 = RIOPxrVtValueCopyAssetPath();
          swift_release();

          if (v14)
          {
            v15 = v19;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
            v17 = v15[2];
            v16 = v15[3];
            v19 = v15;
            if (v17 >= v16 >> 1)
              v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
            v19[2] = v17 + 1;
            v19[v17 + 4] = v14;
          }
          v2 = v10;
          v1 = v9;
          v5 = 0x255BE7000;
        }
        else
        {
          lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
          swift_willThrowTypedImpl();
          outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
          swift_release();

        }
        ++v4;
        if (v7 == v2)
        {
          swift_bridgeObjectRelease();
          return v19;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t specialized closure #1 in closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter()
{
  void *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t inited;
  uint64_t v11;
  unint64_t v13;

  if (one-time initialization token for infoID != -1)
    swift_once();
  v0 = (void *)static VirtualEnvironmentProbeComponentBuilder.infoID;
  type metadata accessor for NamedPropertyDirtyState();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = v0;
  v3 = MEMORY[0x24BEE4B08];
  v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x24BEE4B08]);

  v1[2] = v3;
  v1[3] = v4;
  v5 = one-time initialization token for modeAttributeName;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = (void *)static VirtualEnvironmentProbeComponentBuilder.modeAttributeName;
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = v6;
  v8 = v6;
  v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  v7[2] = v3;
  v7[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C650;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v7;
  v13 = inited;
  specialized Array._endMutation()();
  v11 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t specialized closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  if (one-time initialization token for realityKitComponentTypeName != -1)
    swift_once();
  v0 = (void *)static VirtualEnvironmentProbeComponentBuilder.realityKitComponentTypeName;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v0;
  v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = specialized closure #1 in closure #1 in VirtualEnvironmentProbeComponentBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE4B08];
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v9 + 32) = v6;
  v12 = v9;
  specialized Array._endMutation()();
  v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v12);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized VirtualEnvironmentProbeComponentBuilder.getMode(fromPrim:)()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  unint64_t v8;

  if (one-time initialization token for modeAttributeName != -1)
    swift_once();
  v0 = (id)static VirtualEnvironmentProbeComponentBuilder.modeAttributeName;
  v1 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  if (!v1)
    return 3;
  v2 = (void *)RIOPxrVtValueCopyToken();

  if (!v2)
    return 3;
  v3 = (void *)RIOPxrTfTokenCopyString();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VirtualEnvironmentProbeComponentBuilder.Mode.init(rawValue:), v7);
  swift_bridgeObjectRelease();
  if (v8 >= 3)
    return 3;
  else
    return v8;
}

uint64_t partial apply for closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in VirtualEnvironmentProbeComponentBuilder.run(inputs:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_22BCCC0CC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t Prim.children.getter()
{
  return Prim.children.getter(MEMORY[0x24BE27418]);
}

uint64_t type metadata accessor for Prim()
{
  return objc_opt_self();
}

uint64_t Prim.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimCopyTypeName();
  *a1 = result;
  return result;
}

uint64_t Object.path.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdObjectCopyPath();
  *a1 = result;
  return result;
}

uint64_t Object.name.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdObjectCopyName();
  *a1 = result;
  return result;
}

uint64_t Prim.attribute(of:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Prim.attribute(of:)(a1, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE27558], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE273F8], (void (*)(void))type metadata accessor for AnyAttribute, a2);
}

uint64_t type metadata accessor for AnyAttribute()
{
  return objc_opt_self();
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t AnyAttribute.value.getter()
{
  uint64_t result;

  result = RIOPxrUsdAttributeCopyValue();
  if (!result)
    return RIOPxrVtValueCreateEmptyValue();
  return result;
}

uint64_t Prim.relationship(of:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Prim.attribute(of:)(a1, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE27588], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE27460], (void (*)(void))type metadata accessor for Relationship, a2);
}

uint64_t Prim.attribute(of:)@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;

  v9 = *a1;
  v10 = *(_QWORD *)(v5 + 16);
  v11 = a2(v10, *a1);
  if (v11)
  {
    v12 = a3(v10, v9);
    a4();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v12;
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v11 ^ 1;
  return result;
}

uint64_t type metadata accessor for Relationship()
{
  return objc_opt_self();
}

uint64_t Relationship.targets.getter()
{
  return Relationship.targets.getter(MEMORY[0x24BE27678], type metadata accessor for RIOPxrSdfPathRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void Prim.attributeValue<A>(of:type:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  id v6;

  if (RIOPxrUsdPrimHasAttribute())
  {
    v6 = (id)RIOPxrUsdPrimCopyAttribute();
    (*(void (**)(id, uint64_t, uint64_t, double))(a2 + 16))(v6, a1, a2, NAN);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a3, 1, 1, a1);
  }
}

uint64_t Relationship.target.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t result;

  v2 = Relationship.targets.getter();
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(id *)(v2 + 32);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    result = RIOPxrSdfPathCreateEmptyPath();
    v3 = (id)result;
  }
  *a1 = v3;
  return result;
}

uint64_t Prim.active.getter()
{
  return RIOPxrUsdPrimIsActive();
}

uint64_t Prim.descendants.getter()
{
  return Prim.children.getter(MEMORY[0x24BE27428]);
}

uint64_t Prim.children.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;

  v2 = (void *)a1(*(_QWORD *)(v1 + 16));
  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v3 = MEMORY[0x24BEE4AF8];
  v4 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v5 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_12;
LABEL_3:
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v7 = 0;
      do
      {
        v8 = v7 + 1;
        v9 = MEMORY[0x22E2F57B8]();
        type metadata accessor for Prim();
        *(_QWORD *)(swift_allocObject() + 16) = v9;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v7 = v8;
      }
      while (v5 != v8);
    }
    else
    {
      v10 = (void **)(v4 + 32);
      type metadata accessor for Prim();
      do
      {
        v11 = *v10++;
        *(_QWORD *)(swift_allocObject() + 16) = v11;
        v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v5;
      }
      while (v5);
    }
    v13 = v3;
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t Prim.parent.getter()
{
  void *v0;
  id v1;
  void *v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v0 = (void *)RIOPxrUsdObjectCopyName();
  if (String.count.getter() < 1)
    v1 = (id)RIOPxrTfTokenEmpty();
  else
    v1 = (id)RIOPxrTfTokenCreateWithCString();
  v2 = v1;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v3 = static _CFObject.== infix(_:_:)();

  result = 0;
  if ((v3 & 1) == 0)
  {
    result = RIOPxrUsdPrimCopyParent();
    if (result)
    {
      v5 = result;
      type metadata accessor for Prim();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v5;
    }
  }
  return result;
}

Swift::Bool __swiftcall Prim.evaluateIsEntityOnExport()()
{
  return RIOPxrUsdPrimEvaluateEntityOnExport();
}

uint64_t Object.isValid.getter()
{
  return RIOPxrUsdObjectIsValid();
}

uint64_t Object.authoredMetadata()()
{
  return Object.authoredMetadata()(MEMORY[0x24BE27320]);
}

uint64_t VariantSets.getNames()()
{
  return VariantSets.getNames()((uint64_t (*)(_QWORD))MEMORY[0x24BE27970]);
}

uint64_t VariantSets.getVariantSet(variantSetName:)(uint64_t a1, uint64_t a2)
{
  return VariantSets.getVariantSet(variantSetName:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE27980]);
}

uint64_t VariantSet.variantNames()()
{
  return VariantSets.getNames()((uint64_t (*)(_QWORD))MEMORY[0x24BE27938]);
}

uint64_t VariantSets.getNames()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;

  result = a1(*(_QWORD *)(v1 + 16));
  if (result)
    result = static Array._forceBridgeFromObjectiveC(_:result:)();
  else
    __break(1u);
  __break(1u);
  return result;
}

uint64_t Prim.getVariantSets()()
{
  uint64_t v0;
  uint64_t result;

  v0 = RIOPxrUsdPrimCopyVariantSets();
  type metadata accessor for VariantSets();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

Swift::Void __swiftcall VariantSet.setVariantSelection(variantName:)(Swift::String variantName)
{
  String.utf8CString.getter();
  RIOPxrUsdVariantSetSetVariantSelection();
  swift_release();
}

uint64_t Prim.attributes()()
{
  return Prim.attributes()(MEMORY[0x24BE27400]);
}

uint64_t AnyAttribute.type.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)RIOPxrUsdAttributeCopyTypeName();
  RIOPxrSdfValueTypeNameRef.type.getter();
  v2 = v1;

  return v2;
}

uint64_t static Object.== infix(_:_:)()
{
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t Prim.addReference(assetURL:path:)(uint64_t a1, uint64_t *a2)
{
  return Prim.addReference(assetURL:path:)(a1, a2, (void (*)(void))MEMORY[0x24BDCD9F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE273C0]);
}

uint64_t Prim.addReference(assetPath:path:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return Prim.addReference(assetPath:path:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE273C0]);
}

uint64_t Prim.attributeValueResult<A>(of:type:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t *v20;

  v20 = a3;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - v7;
  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (RIOPxrUsdPrimHasAttribute())
  {
    v13 = (void *)RIOPxrUsdPrimCopyAttribute();
    (*(void (**)(void *, uint64_t, uint64_t, double))(a2 + 16))(v13, a1, a2, NAN);
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a1);
    v15 = v20;
    if (v14 == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v16 = RIOPxrUsdAttributeCopyTypeName();

      *v15 = v16;
    }
    else
    {

      v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v18(v12, v8, a1);
      v18((char *)v15, v12, a1);
    }
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    *v20 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
}

void Object.subscript.setter(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char *v25;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    if (String.count.getter() < 1)
      v19 = (id)RIOPxrTfTokenEmpty();
    else
      v19 = (id)RIOPxrTfTokenCreateWithCString();
    v21 = v19;
    RIOPxrUsdObjectClearMetadata();
    v18(a1, v8);

  }
  else
  {
    v25 = a1;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    if (String.count.getter() < 1)
      v20 = (id)RIOPxrTfTokenEmpty();
    else
      v20 = (id)RIOPxrTfTokenCreateWithCString();
    v22 = v20;
    v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectMetadataSetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    RIOPxrUsdObjectClearMetadata();
    v18(a1, v8);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectMetadataSetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    if (String.count.getter() < 1)
      v19 = (id)RIOPxrTfTokenEmpty();
    else
      v19 = (id)RIOPxrTfTokenCreateWithCString();
    v21 = v19;
    RIOPxrUsdObjectCustomDataDictionaryClearValue();
    v18(a1, v8);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectUiInfoDictionarySetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, char *, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    if (String.count.getter() < 1)
      v19 = (id)RIOPxrTfTokenEmpty();
    else
      v19 = (id)RIOPxrTfTokenCreateWithCString();
    v21 = v19;
    RIOPxrUsdObjectCustomDataDictionaryClearValue();
    v18(a1, v8);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrUsdObjectAccessibilityInfoDictionarySetValue();

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

char *StaticTypePrim.init(prim:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;

  v4 = specialized StaticTypePrim.init(prim:type:)(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t *StaticTypePrim.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  swift_release();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 96);
  v5 = type metadata accessor for Properties(0, *(_QWORD *)(v1 + 80), v3, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  return v0;
}

uint64_t StaticTypePrim.properties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess();
  v7 = type metadata accessor for Properties(0, *(_QWORD *)(v3 + 80), v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v4, v7);
}

uint64_t StaticTypePrim.subscript.getter()
{
  swift_retain();
  swift_getAtKeyPath();
  return swift_release();
}

uint64_t StaticTypePrim.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void (*v5)(_BYTE *, _QWORD);
  _BYTE v7[32];
  uint64_t v8;

  v4 = *a1;
  v8 = *(_QWORD *)(v2 + 16);
  swift_retain();
  v5 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE35B8] + v4 + 8) - 8) + 16))(a2);
  v5(v7, 0);
  return swift_release();
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  specialized StaticTypePrim.subscript.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE35B8] + v3 + 8) - 8) + 8))(a1);
}

void (*StaticTypePrim.subscript.modify(_QWORD *a1, uint64_t *a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*MEMORY[0x24BEE35B8] + *a2 + 8);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  StaticTypePrim.subscript.getter(a2, (uint64_t)v9);
  return StaticTypePrim.subscript.modify;
}

void StaticTypePrim.subscript.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v4, v5);
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v4);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t StaticTypePrim.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v9 = type metadata accessor for Properties(0, *(_QWORD *)(*(_QWORD *)v5 + 80), a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - v11;
  StaticTypePrim.properties.getter((uint64_t)&v14 - v11);
  Properties.subscript.getter(a1, v9, a2, a5, NAN);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  specialized StaticTypePrim.subscript.setter(a1, a2, a3);
  swift_release();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void (*StaticTypePrim.subscript.modify(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD ***a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = type metadata accessor for Optional();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v11 = malloc(v10);
  v7[6] = v11;
  StaticTypePrim.subscript.getter(a2, a3, v12, v13, (uint64_t)v11);
  return StaticTypePrim.subscript.modify;
}

void StaticTypePrim.subscript.modify(_QWORD ***a1, char a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(_QWORD *, _QWORD *);

  v2 = *a1;
  v3 = (*a1)[5];
  v4 = (*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (uint64_t)(*a1)[1];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))v6[2])((*a1)[5], v4, v5);
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v3, v8, v7);
    swift_release();
    v9 = (void (*)(_QWORD *, _QWORD *))v6[1];
    v9(v3, v5);
  }
  else
  {
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v4, v8, v7);
    swift_release();
    v9 = (void (*)(_QWORD *, _QWORD *))v6[1];
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  double v10;
  _QWORD *v11;
  void (*v12)(_QWORD *, _QWORD *);

  v2 = *a1;
  v3 = (*a1)[7];
  v4 = (*a1)[8];
  v5 = (*a1)[5];
  v6 = (*a1)[6];
  v7 = (uint64_t)(*a1)[3];
  v8 = (unint64_t)(*a1)[2];
  v9 = *((unsigned __int8 *)*a1 + 72);
  v10 = *((double *)*a1 + 1);
  v11 = **a1;
  if ((a2 & 1) != 0)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))v6[2])((*a1)[7], v4, v5);
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v3, v11, v9, v8, v7, v10);
    swift_release();
    v12 = (void (*)(_QWORD *, _QWORD *))v6[1];
    v12(v3, v5);
  }
  else
  {
    swift_retain();
    specialized StaticTypePrim.subscript.setter((uint64_t)v4, v11, v9, v8, v7, v10);
    swift_release();
    v12 = (void (*)(_QWORD *, _QWORD *))v6[1];
  }
  v12(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t StaticTypePrim.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for Properties(0, *(_QWORD *)(*(_QWORD *)v5 + 80), a2, a3);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v15 - v12;
  StaticTypePrim.properties.getter((uint64_t)&v15 - v12);
  Properties.subscript.getter(a1, v10, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1, _QWORD *a2, int a3, unint64_t a4, uint64_t a5, double a6)
{
  uint64_t v7;

  specialized StaticTypePrim.subscript.setter(a1, a2, a3, a4, a5, a6);
  swift_release();
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
}

void (*StaticTypePrim.subscript.modify(_QWORD *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, double a6))(_QWORD ***a1, char a2)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;

  v13 = malloc(0x50uLL);
  *a1 = v13;
  v13[3] = a5;
  v13[4] = v6;
  v13[2] = a4;
  *((_BYTE *)v13 + 72) = a3;
  *((double *)v13 + 1) = a6;
  *v13 = a2;
  v14 = type metadata accessor for Optional();
  v13[5] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v13[6] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v13[7] = malloc(v16);
  v17 = malloc(v16);
  v13[8] = v17;
  StaticTypePrim.subscript.getter(a2, v18, a5, (uint64_t)v17, a6);
  return StaticTypePrim.subscript.modify;
}

uint64_t StaticTypePrim.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for Properties(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - v7;
  StaticTypePrim.properties.getter((uint64_t)&v11 - v7);
  v9 = specialized Properties.subscript.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t StaticTypePrim.subscript.setter(uint64_t a1)
{
  specialized StaticTypePrim.subscript.setter(a1);
  return swift_release();
}

uint64_t (*StaticTypePrim.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v4;

  a1[1] = a2;
  a1[2] = v4;
  *a1 = StaticTypePrim.subscript.getter(a2, a2, a3, a4);
  return StaticTypePrim.subscript.modify;
}

uint64_t StaticTypePrim.subscript.modify(uint64_t *a1, char a2)
{
  return StaticTypePrim.subscript.modify(a1, a2, (void (*)(uint64_t, uint64_t))specialized StaticTypePrim.subscript.setter);
}

uint64_t StaticTypePrim.subscript.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[1];
  v5 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    a3(v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    a3(v5, v4);
  }
  return swift_release();
}

uint64_t StaticTypePrim.prim.getter()
{
  return swift_retain();
}

uint64_t MaterialCollectionBinding.__allocating_init(materialBindingAPI:base:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void Prim.type.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdPrimSetTypeName();

}

uint64_t Prim.properties<A>(of:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - v7;
  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v23 - v14;
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v16)
  {
    v17(v8, 0, 1, a1);
    v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v18(v15, v8, a1);
    v18(v12, v15, a1);
    *(_QWORD *)a2 = v2;
    v21 = type metadata accessor for Properties(0, a1, v19, v20);
    v18(&a2[*(int *)(v21 + 28)], v12, a1);
    return swift_retain();
  }
  else
  {
    v17(v8, 1, 1, a1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Properties.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  specialized Properties.subscript.setter(a1, a2, a3, a4);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

void Prim.setAttribute<A>(of:value:at:custom:variability:)(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>, double a5@<D0>)
{
  void *v10;
  void *Attribute;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v15, a2, a3);
  v10 = v15;
  Attribute = (void *)RIOPxrUsdPrimCreateAttribute();
  v12 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, double))(a3 + 8))(a1, Attribute, a2, a3, a5);
  if ((v12 & 1) != 0)
  {

    type metadata accessor for Attribute(0, a2, a3, v13);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = Attribute;
  }
  else
  {
    v14 = RIOPxrUsdAttributeCopyTypeName();

  }
  *(_QWORD *)a4 = v14;
  *(_BYTE *)(a4 + 8) = (v12 & 1) == 0;
}

uint64_t AnyAttribute.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyAttribute.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t VariantSet.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VariantSet.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall VariantSet.hasAuthoredVariant(variantName:)(Swift::String variantName)
{
  return VariantSet.hasAuthoredVariant(variantName:)(variantName._countAndFlagsBits, (uint64_t)variantName._object, MEMORY[0x24BE27908]);
}

Swift::Void __swiftcall VariantSet.addVariant(variantName:)(Swift::String variantName)
{
  String.utf8CString.getter();
  RIOPxrUsdVariantSetAddVariant();
  swift_release();
}

Swift::Bool __swiftcall VariantSet.hasAuthoredVariantSelection()()
{
  return RIOPxrUsdVariantSetHasAuthoredVariantSelection();
}

uint64_t VariantSet.hasAuthoredVariantSelectionOnLayer(layer:)()
{
  return RIOPxrUsdVariantSetHasAuthoredVariantSelectionOnLayer();
}

Swift::String __swiftcall VariantSet.getVariantSelection()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE27940]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall VariantSet.clearVariantSelection()()
{
  return RIOPxrUsdVariantSetClearVariantSelection();
}

uint64_t VariantSet.getPrim()()
{
  uint64_t v0;
  uint64_t result;

  v0 = RIOPxrUsdVariantSetCopyPrim();
  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

Swift::String __swiftcall VariantSet.getName()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE27928]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t VariantSet.isValid.getter()
{
  return RIOPxrUsdVariantSetIsValid();
}

uint64_t VariantSet.getEditTarget()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdVariantSetCopyEditTarget();
  *a1 = result;
  return result;
}

uint64_t VariantSets.addVariantSet(variantSetName:)(uint64_t a1, uint64_t a2)
{
  return VariantSets.getVariantSet(variantSetName:)(a1, a2, MEMORY[0x24BE27988]);
}

Swift::Bool __swiftcall VariantSets.hasVariantSet(variantSetName:)(Swift::String variantSetName)
{
  return VariantSet.hasAuthoredVariant(variantName:)(variantSetName._countAndFlagsBits, (uint64_t)variantSetName._object, MEMORY[0x24BE27990]);
}

uint64_t VariantSet.hasAuthoredVariant(variantName:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = String.utf8CString.getter();
  v7 = a3(v5, v6 + 32);
  swift_release();
  return v7;
}

Swift::String __swiftcall VariantSets.getVariantSelection(variantSetName:)(Swift::String variantSetName)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  String.utf8CString.getter();
  v1 = (void *)RIOPxrUsdVariantSetsCopyVariantSelection();
  swift_release();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::Bool __swiftcall VariantSets.setSelection(variantSetName:variantName:)(Swift::String variantSetName, Swift::String variantName)
{
  char v2;

  String.utf8CString.getter();
  String.utf8CString.getter();
  v2 = RIOPxrUsdVariantSetsSetSelection();
  swift_release();
  swift_release();
  return v2;
}

uint64_t VariantSets.getAllVariantSelections()()
{
  uint64_t result;

  RIOPxrUsdVariantSetsCopyAllVariantSelections();
  result = static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

uint64_t MaterialCollectionBinding.init(materialBindingAPI:base:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t MaterialCollectionBinding.deinit()
{
  uint64_t v0;

  swift_release();

  return v0;
}

uint64_t MaterialCollectionBinding.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t MaterialCollectionBinding.materialPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingMaterialPath();
  *a1 = result;
  return result;
}

uint64_t MaterialCollectionBinding.collectionPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingCollectionPath();
  *a1 = result;
  return result;
}

uint64_t MaterialCollectionBinding.primCollectionName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingPrimCollectionName();
  *a1 = result;
  return result;
}

void MaterialCollectionBinding.bindingStrength.getter(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v3 = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength();

  *a1 = v3;
}

void key path getter for MaterialCollectionBinding.bindingStrength : MaterialCollectionBinding(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  v3 = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength();

  *a1 = v3;
}

void key path setter for MaterialCollectionBinding.bindingStrength : MaterialCollectionBinding(id *a1)
{
  void *v1;
  id v2;

  v2 = *a1;
  v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();

}

void MaterialCollectionBinding.bindingStrength.setter(id *a1)
{
  void *v1;
  id v2;

  v2 = *a1;
  v1 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();

}

void (*MaterialCollectionBinding.bindingStrength.modify(uint64_t *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  a1[1] = *(_QWORD *)(v1 + 16);
  v3 = (void *)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
  a1[2] = *(_QWORD *)(v1 + 24);
  v4 = RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength();

  *a1 = v4;
  return MaterialCollectionBinding.bindingStrength.modify;
}

void MaterialCollectionBinding.bindingStrength.modify(void **a1, char a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();

  }
  else
  {
    v4 = (id)RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef();
    RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength();
  }

}

uint64_t Object.hash(into:)()
{
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  return _CFObject.hash(into:)();
}

uint64_t Object.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)RIOPxrUsdObjectCopyPath();
  v1 = (void *)RIOPxrSdfPathCopyString();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t Object.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v19;

  HIDWORD(v19._object) = -335544320;
  v0._countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  strcpy((char *)&v19, "\n  - name : ");
  v4 = (id)RIOPxrUsdObjectCopyName();
  v5 = (void *)RIOPxrTfTokenCopyString();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v19, "\n  - path : ");
  v10 = (id)RIOPxrUsdObjectCopyPath();
  v11 = (void *)RIOPxrSdfPathCopyString();
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x736162202D20200ALL;
  v16._object = (void *)0xEC000000203A2065;
  String.append(_:)(v16);
  type metadata accessor for RIOPxrUsdObjectRef(0);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Int Object.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Object()
{
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Object()
{
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  return _CFObject.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Object()
{
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Object()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)RIOPxrUsdObjectCopyPath();
  v1 = (void *)RIOPxrSdfPathCopyString();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Object()
{
  return Object.debugDescription.getter();
}

uint64_t Object.allowedTokens.getter()
{
  return Object.allowedTokens.getter(MEMORY[0x24BE27318], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void Object.allowedTokens.setter(uint64_t a1)
{
  Object.allowedTokens.setter(a1, type metadata accessor for RIOPxrTfTokenRef, MEMORY[0x24BE27390]);
}

void (*Object.allowedTokens.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = Object.allowedTokens.getter();
  return Object.allowedTokens.modify;
}

void Object.allowedTokens.modify(uint64_t *a1, char a2)
{
  Object.allowedTokens.modify(a1, a2, type metadata accessor for RIOPxrTfTokenRef, MEMORY[0x24BE27390]);
}

uint64_t Object.inheritsPath.getter()
{
  return Object.allowedTokens.getter(MEMORY[0x24BE27330], type metadata accessor for RIOPxrSdfPathRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void key path setter for Object.allowedTokens : Object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), void (*a6)(uint64_t, Class))
{
  uint64_t v8;
  uint64_t v9;
  Class isa;

  v8 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v9 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v9);
  swift_bridgeObjectRelease();
  a5(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a6(v8, isa);

}

void Object.inheritsPath.setter(uint64_t a1)
{
  Object.allowedTokens.setter(a1, type metadata accessor for RIOPxrSdfPathRef, MEMORY[0x24BE273A0]);
}

void Object.allowedTokens.setter(uint64_t a1, void (*a2)(_QWORD), void (*a3)(uint64_t, Class))
{
  uint64_t v3;
  uint64_t v6;
  Class isa;

  v6 = *(_QWORD *)(v3 + 16);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  swift_bridgeObjectRelease();
  a2(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a3(v6, isa);

}

void (*Object.inheritsPath.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = Object.inheritsPath.getter();
  return Object.inheritsPath.modify;
}

void Object.inheritsPath.modify(uint64_t *a1, char a2)
{
  Object.allowedTokens.modify(a1, a2, type metadata accessor for RIOPxrSdfPathRef, MEMORY[0x24BE273A0]);
}

void Object.allowedTokens.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t, Class))
{
  uint64_t v6;
  uint64_t v7;
  Class isa;
  Class v9;

  v6 = *(_QWORD *)(a1[3] + 16);
  if ((a2 & 1) != 0)
  {
    v7 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v7);
    swift_bridgeObjectRelease();
    a3(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a4(v6, isa);

    swift_bridgeObjectRelease();
  }
  else
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(*a1);
    swift_bridgeObjectRelease();
    a3(0);
    v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a4(v6, v9);

  }
}

uint64_t Object.registeredMetadataKeys.getter()
{
  return Relationship.targets.getter(MEMORY[0x24BE27350], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Object.hasMetadata(_:path:)()
{
  return RIOPxrUsdObjectHasMetadataValue();
}

uint64_t Object.clearMetadata(_:path:)()
{
  return RIOPxrUsdObjectClearMetadata();
}

uint64_t Object.clearCustomDataDictionaryValue(_:path:)()
{
  return RIOPxrUsdObjectCustomDataDictionaryClearValue();
}

uint64_t Object.metadata()()
{
  return Object.authoredMetadata()((uint64_t (*)(_QWORD))MEMORY[0x24BE27338]);
}

uint64_t Object.authoredMetadata()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  void *v2;

  v2 = (void *)a1(*(_QWORD *)(v1 + 16));
  type metadata accessor for RIOPxrTfTokenRef(0);
  type metadata accessor for RIOPxrVtValueRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4B00];
}

void Object.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;

  v4 = (void *)RIOPxrUsdObjectCopyMetadata();
  type metadata accessor for RIOPxrTfTokenRef(0);
  type metadata accessor for RIOPxrVtValueRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

{
  id v4;
  void *v5;
  id v6;

  if (String.count.getter() < 1)
    v4 = (id)RIOPxrTfTokenEmpty();
  else
    v4 = (id)RIOPxrTfTokenCreateWithCString();
  v5 = v4;
  v6 = (id)RIOPxrUsdObjectMetadataCopyValue();

  if (v6)
  {
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  }
}

void (*Object.subscript.modify(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Optional();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  v15 = v14;
  Object.subscript.getter(a3, (uint64_t)v13);
  return Object.subscript.modify;
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v17;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Optional();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  v17 = v14;
  v15 = v14;
  Object.subscript.getter(&v17, a3, (uint64_t)v13);
  return Object.subscript.modify;
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v17;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Optional();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  v17 = v14;
  v15 = v14;
  Object.subscript.getter(&v17, a3, (uint64_t)v13);
  return Object.subscript.modify;
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Optional();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  v15 = v14;
  Object.subscript.getter(a3, (uint64_t)v13);
  return Object.subscript.modify;
}

void Object.subscript.modify(uint64_t **a1, char a2)
{
  Object.subscript.modify(a1, a2, (void (*)(void *, uint64_t *, uint64_t, uint64_t))Object.subscript.setter);
}

{
  Object.subscript.modify(a1, a2, (void (*)(void *, uint64_t *, uint64_t, uint64_t))Object.subscript.setter);
}

{
  Object.subscript.modify(a1, a2, (void (*)(void *, uint64_t *, uint64_t, uint64_t))Object.subscript.setter);
}

{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = *a1;
  v4 = (*a1)[7];
  v3 = (void *)(*a1)[8];
  v5 = (char *)(*a1)[5];
  v6 = (char *)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    v7 = v2[3];
    v8 = v2[4];
    v9 = v2[1];
    v10 = *v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    v13 = v4;
    v14 = v3;
    Object.subscript.setter(v5, (void **)&v13, &v14, v10, v9);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v11 = v2[1];
    v12 = *v2;
    v13 = (*a1)[7];
    v14 = v3;
    Object.subscript.setter(v6, (void **)&v13, &v14, v12, v11);
  }
  free(v6);
  free(v5);
  free(v2);
}

{
  Object.subscript.modify(a1, a2, (void (*)(void *, uint64_t *, uint64_t, uint64_t))Object.subscript.setter);
}

{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = *a1;
  v4 = (*a1)[7];
  v3 = (void *)(*a1)[8];
  v5 = (char *)(*a1)[5];
  v6 = (char *)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    v7 = v2[3];
    v8 = v2[4];
    v9 = v2[1];
    v10 = *v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    v13 = v4;
    v14 = v3;
    Object.subscript.setter(v5, (void **)&v13, &v14, v10, v9);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v11 = v2[1];
    v12 = *v2;
    v13 = (*a1)[7];
    v14 = v3;
    Object.subscript.setter(v6, (void **)&v13, &v14, v12, v11);
  }
  free(v6);
  free(v5);
  free(v2);
}

void Object.subscript.getter(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Object.subscript.getter(a1, a2, MEMORY[0x24BE273A8], a3);
}

{
  Object.subscript.getter(a1, a2, MEMORY[0x24BE272F8], a3);
}

void key path getter for Object.subscript<A>(metadata:) : <A>ObjectA(uint64_t a1, id *a2, uint64_t a3, void (*a4)(id *, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  v8 = *a2;
  v7 = v8;
  a4(&v8, v5, v6);

}

void Object.subscript.getter(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  id v8;

  v7 = a3(*(_QWORD *)(v4 + 16), *a1);
  if (v7)
  {
    v8 = (id)v7;
    RIOPxrVtValueRef.mapUSDValue<A>()(a2, a4);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
}

void Object.subscript.getter(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;

  v4 = RIOPxrUsdObjectCustomDataDictionaryCopyValue();
  if (v4)
  {
    v5 = (id)v4;
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  }
}

{
  uint64_t v4;
  id v5;

  v4 = RIOPxrUsdObjectMetadataCopyValue();
  if (v4)
  {
    v5 = (id)v4;
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  }
}

void key path getter for Object.subscript<A>(customData:key:) : <A>ObjectA(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v4 = *(_QWORD *)(a2 + a1 - 16);
  v5 = *(void **)(a1 + 8);
  v6 = *(id *)a1;
  v7 = v5;
  Object.subscript.getter(v4, a3);

}

void key path setter for Object.subscript<A>(customData:key:) : <A>ObjectA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;

  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = type metadata accessor for Optional();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - v10;
  v13 = *(void **)a3;
  v12 = *(void **)(a3 + 8);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v17 - v10, a1, v9);
  v17 = v12;
  v18 = v13;
  v15 = v13;
  v16 = v12;
  Object.subscript.setter(v11, &v18, &v17, v6, v7);
}

void Object.subscript.setter(char *a1, void **a2, void **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a2;
  v19 = *a3;
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v12, a1, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v12, v9);
    RIOPxrUsdObjectCustomDataDictionaryClearValue();
    v20(a1, v9);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a4);
    v21 = (void *)(*(uint64_t (**)(uint64_t))(v23 + 8))(a4);
    RIOPxrUsdObjectCustomDataDictionarySetValue();

    (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a2;
  v19 = *a3;
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v12, a1, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v12, v9);
    RIOPxrUsdObjectClearMetadata();
    v20(a1, v9);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a4);
    v21 = (void *)(*(uint64_t (**)(uint64_t))(v23 + 8))(a4);
    RIOPxrUsdObjectMetadataSetValue();

    (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
  }
}

void (*Object.subscript.modify(_QWORD *a1, void **a2, void **a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[1] = a5;
  v11[2] = v5;
  *v11 = a4;
  v12 = type metadata accessor for Optional();
  v11[3] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[4] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[5] = malloc(v14);
  v15 = malloc(v14);
  v16 = *a2;
  v11[6] = v15;
  v11[7] = v16;
  v17 = *a3;
  v11[8] = v17;
  v18 = v16;
  v19 = v17;
  Object.subscript.getter(a4, (uint64_t)v15);
  return Object.subscript.modify;
}

{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[1] = a5;
  v11[2] = v5;
  *v11 = a4;
  v12 = type metadata accessor for Optional();
  v11[3] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[4] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[5] = malloc(v14);
  v15 = malloc(v14);
  v16 = *a2;
  v11[6] = v15;
  v11[7] = v16;
  v17 = *a3;
  v11[8] = *a3;
  v18 = v17;
  v19 = v16;
  Object.subscript.getter(a4, (uint64_t)v15);
  return Object.subscript.modify;
}

uint64_t key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t (*a5)(char *, void **, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v18;
  void *v19;

  v8 = *(uint64_t *)((char *)a3 + a4 - 16);
  v9 = *(uint64_t *)((char *)a3 + a4 - 8);
  v10 = type metadata accessor for Optional();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  v14 = *a3;
  (*(void (**)(char *, uint64_t, double))(v15 + 16))((char *)&v18 - v12, a1, v11);
  v19 = v14;
  v16 = v14;
  return a5(v13, &v19, v8, v9);
}

void Object.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t *, uint64_t, uint64_t))
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = (void *)(*a1)[6];
  v6 = (*a1)[7];
  v7 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v8 = v4[3];
    v9 = v4[4];
    v10 = v4[1];
    v11 = *v4;
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 16))((*a1)[5], v5, v8);
    v14 = v6;
    a3(v7, &v14, v11, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  else
  {
    v12 = v4[1];
    v13 = *v4;
    v14 = (*a1)[7];
    a3(v5, &v14, v13, v12);
  }
  free(v5);
  free(v7);
  free(v4);
}

void key path getter for Object.subscript<A>(metadata:_:) : <A>ObjectA(void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v4 = *(uint64_t *)((char *)a1 + a2 - 16);
  v5 = *a1;
  v7 = a1[1];
  v6 = v5;
  Object.subscript.getter(v4, a3);

}

void key path setter for Object.subscript<A>(metadata:_:) : <A>ObjectA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;

  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = type metadata accessor for Optional();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - v10;
  v13 = *(void **)a3;
  v12 = *(void **)(a3 + 8);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v17 - v10, a1, v9);
  v17 = v12;
  v18 = v13;
  v15 = v12;
  v16 = v13;
  Object.subscript.setter(v11, &v18, &v17, v6, v7);
}

uint64_t Prim.primStack.getter()
{
  return Relationship.targets.getter(MEMORY[0x24BE27448], type metadata accessor for RIOPxrSdfPrimSpecRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.filteredChildren(predicate:)(_QWORD *a1)
{
  return Prim.filteredChildren(predicate:)(a1, MEMORY[0x24BE27430]);
}

{
  return Prim.filteredChildren(predicate:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274B8], MEMORY[0x24BE27430]);
}

{
  return Prim.filteredChildren(predicate:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274F8], MEMORY[0x24BE27430]);
}

uint64_t Prim.filteredChildren(predicate:)(uint64_t a1, uint64_t a2)
{
  return Prim.filteredChildren(predicate:)(a1, a2, (uint64_t (*)(void **))Prim.filteredChildren(predicate:));
}

uint64_t PrimFlagsPredicate.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsPredicateCreateWithTerm();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall Prim.isPseudoRoot()()
{
  return RIOPxrUsdPrimIsPseudoRoot();
}

void (*Prim.type.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrUsdPrimCopyTypeName();
  return Prim.type.modify;
}

void Prim.type.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdPrimSetTypeName();

}

Swift::Bool __swiftcall Prim.hasAuthoredType()()
{
  return RIOPxrUsdPrimHasAuthoredType();
}

uint64_t Prim.hasAuthoredTypeOnLayer(layer:)()
{
  return RIOPxrUsdPrimHasAuthoredTypeOnLayer();
}

uint64_t Prim.specifier.getter()
{
  return RIOPxrUsdPrimGetSpecifier();
}

uint64_t Prim.specifier.setter()
{
  return RIOPxrUsdPrimSetSpecifier();
}

uint64_t (*Prim.specifier.modify(uint64_t *a1))()
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrUsdPrimGetSpecifier();
  return Prim.specifier.modify;
}

uint64_t Prim.specifier.modify()
{
  return RIOPxrUsdPrimSetSpecifier();
}

uint64_t Prim.rootLayerSpecifier.getter()
{
  return RIOPxrUsdPrimGetRootLayerSpecifier();
}

uint64_t Prim.propertyOrder.getter()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v0 = (id)RIOPxrUsdPrimGetPropertyOrder();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v1 = MEMORY[0x24BEE4AF8];
  v2 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = v1;
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v3; ++i)
      {
        v7 = MEMORY[0x22E2F57B8](i, v2);
        v9 = *(_QWORD *)(v5 + 16);
        v8 = *(_QWORD *)(v5 + 24);
        if (v9 >= v8 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        *(_QWORD *)(v5 + 16) = v9 + 1;
        *(_QWORD *)(v5 + 8 * v9 + 32) = v7;
      }
    }
    else
    {
      for (j = 0; j != v3; ++j)
      {
        v11 = *(_QWORD *)(v1 + 16);
        v12 = *(_QWORD *)(v1 + 24);
        v13 = *(id *)(v2 + 8 * j + 32);
        if (v11 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        *(_QWORD *)(v1 + 16) = v11 + 1;
        *(_QWORD *)(v1 + 8 * v11 + 32) = v13;
      }
    }
    swift_bridgeObjectRelease();
    return v5;
  }
  __break(1u);
  return result;
}

void Prim.propertyOrder.setter(uint64_t a1)
{
  Prim.propertyOrder.setter(a1, MEMORY[0x24BE27610]);
}

void (*Prim.propertyOrder.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = Prim.propertyOrder.getter();
  return Prim.propertyOrder.modify;
}

void Prim.propertyOrder.modify(uint64_t *a1, char a2)
{
  Prim.propertyOrder.modify(a1, a2, MEMORY[0x24BE27610]);
}

Swift::Bool __swiftcall Prim.setSpecializes(_:)(Swift::OpaquePointer a1)
{
  Class isa;
  char v2;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm((uint64_t)a1._rawValue);
  type metadata accessor for RIOPxrSdfPathRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = RIOPxrUsdPrimSetSpecializes();

  return v2;
}

Swift::Bool __swiftcall Prim.clearSpecializes()()
{
  return RIOPxrUsdPrimClearSpecializes();
}

uint64_t Prim.removeReference(assetPath:path:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return Prim.addReference(assetPath:path:)(a1, a2, a3, MEMORY[0x24BE275E8]);
}

uint64_t Prim.addReference(assetPath:path:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a3;
  v7 = *(_QWORD *)(v4 + 16);
  v8 = String.utf8CString.getter();
  v9 = a4(v7, v8 + 32, v6);
  swift_release();
  return v9;
}

uint64_t Prim.removeReference(assetURL:path:)(uint64_t a1, uint64_t *a2)
{
  return Prim.addReference(assetURL:path:)(a1, a2, (void (*)(void))MEMORY[0x24BDCD820], MEMORY[0x24BE275E8]);
}

uint64_t Prim.addReference(assetURL:path:)(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  v7 = *(_QWORD *)(v4 + 16);
  a3();
  v8 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v9 = a4(v7, v8 + 32, v6);
  swift_release();
  return v9;
}

Swift::Bool __swiftcall Prim.setReferences(references:)(Swift::OpaquePointer references)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;
  Class isa;
  char v7;

  v1 = *((_QWORD *)references._rawValue + 2);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (void **)((char *)references._rawValue + 32);
    do
    {
      v4 = *v3++;
      v5 = v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = RIOPxrUsdPrimSetReferences();

  return v7;
}

uint64_t Prim.getRootLayerReferences()()
{
  return Relationship.targets.getter(MEMORY[0x24BE27468], type metadata accessor for RIOPxrSdfReferenceRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Relationship.targets.getter(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t j;
  unint64_t v17;
  unint64_t v18;
  id v19;

  v6 = (void *)a1(*(_QWORD *)(v3 + 16));
  a2(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v7 = MEMORY[0x24BEE4AF8];
  v8 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v9 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_16;
LABEL_3:
  result = a3(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v11 = v7;
    if ((v8 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v9; ++i)
      {
        v13 = MEMORY[0x22E2F57B8](i, v8);
        v15 = *(_QWORD *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 24);
        if (v15 >= v14 >> 1)
          a3(v14 > 1, v15 + 1, 1);
        *(_QWORD *)(v11 + 16) = v15 + 1;
        *(_QWORD *)(v11 + 8 * v15 + 32) = v13;
      }
    }
    else
    {
      for (j = 0; j != v9; ++j)
      {
        v17 = *(_QWORD *)(v7 + 16);
        v18 = *(_QWORD *)(v7 + 24);
        v19 = *(id *)(v8 + 8 * j + 32);
        if (v17 >= v18 >> 1)
          a3(v18 > 1, v17 + 1, 1);
        *(_QWORD *)(v7 + 16) = v17 + 1;
        *(_QWORD *)(v7 + 8 * v17 + 32) = v19;
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void Prim.attribute<A>(of:type:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  void *v6;
  _QWORD *v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  void *v12;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    v7 = 0;
LABEL_6:
    v11 = 1;
    goto LABEL_7;
  }
  v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  v7 = (_QWORD *)RIOPxrUsdAttributeCopyTypeName();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v12, a1, a2);
  v8 = v12;
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfValueTypeNameRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef);
  v9 = static _CFObject.== infix(_:_:)();

  if ((v9 & 1) == 0)
  {

    goto LABEL_6;
  }

  type metadata accessor for Attribute(0, a1, a2, v10);
  v7 = (_QWORD *)swift_allocObject();
  v11 = 0;
  v7[2] = v6;
LABEL_7:
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = v11;
}

uint64_t Prim.propertyNames()()
{
  return Prim.propertyNames()(MEMORY[0x24BE27450], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.authoredPropertyNames()()
{
  return Prim.propertyNames()(MEMORY[0x24BE27410], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.schemaPropertyNames()()
{
  uint64_t v0;
  void *v2;

  v2 = (void *)RIOPxrUsdPrimCopyTypeName();
  v0 = ToolsFoundations.Token.schemaPropertyNames()();

  return v0;
}

uint64_t Prim.authoredAttributes()()
{
  return Prim.attributes()(MEMORY[0x24BE27408]);
}

uint64_t Prim.attributes()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void *)a1(*(_QWORD *)(v1 + 16));
  if (v2)
  {
    type metadata accessor for RIOPxrUsdObjectRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  v3 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v4 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_14;
LABEL_5:
  v13 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      v6 = 0;
      do
      {
        v7 = v6 + 1;
        v8 = MEMORY[0x22E2F57B8]();
        type metadata accessor for AnyAttribute();
        *(_QWORD *)(swift_allocObject() + 16) = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v6 = v7;
      }
      while (v4 != v7);
    }
    else
    {
      v9 = (void **)(v3 + 32);
      type metadata accessor for AnyAttribute();
      do
      {
        v10 = *v9++;
        *(_QWORD *)(swift_allocObject() + 16) = v10;
        v11 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v4;
      }
      while (v4);
    }
    v12 = v13;
    swift_bridgeObjectRelease();

    return v12;
  }
  __break(1u);
  return result;
}

uint64_t Prim.schemaAttributes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v1 = v0;
  v5 = (void *)RIOPxrUsdPrimCopyTypeName();
  v2 = ToolsFoundations.Token.schemaPropertyNames()();

  swift_retain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, v1, (uint64_t (*)(uint64_t, id))MEMORY[0x24BE27558], (uint64_t (*)(uint64_t, id))MEMORY[0x24BE273F8], (void (*)(void))type metadata accessor for AnyAttribute);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t Prim.properties()()
{
  return Prim.properties()(Prim.propertyNames());
}

uint64_t Prim.relationships()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = Prim.propertyNames()();
  swift_retain();
  v2 = specialized Sequence.compactMap<A>(_:)(v1, v0, (uint64_t (*)(uint64_t, id))MEMORY[0x24BE27588], (uint64_t (*)(uint64_t, id))MEMORY[0x24BE27460], (void (*)(void))type metadata accessor for Relationship);
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

Swift::Bool __swiftcall Prim.hasVariantSets()()
{
  return RIOPxrUsdPrimHasVariantSets();
}

uint64_t Prim.getVariantSet(vsetName:)(uint64_t a1, uint64_t a2)
{
  return VariantSets.getVariantSet(variantSetName:)(a1, a2, MEMORY[0x24BE27480]);
}

uint64_t VariantSets.getVariantSet(variantSetName:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = String.utf8CString.getter();
  v7 = a3(v5, v6 + 32);
  swift_release();
  type metadata accessor for VariantSet();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v7;
  return result;
}

uint64_t Prim.authoredProperties()()
{
  return Prim.properties()(Prim.authoredPropertyNames());
}

uint64_t Prim.properties()(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1();
  swift_retain();
  v2 = specialized Sequence.compactMap<A>(_:)(v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

uint64_t Prim.schemaProperties()()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;

  v3 = (void *)RIOPxrUsdPrimCopyTypeName();
  v0 = ToolsFoundations.Token.schemaPropertyNames()();

  swift_retain();
  v1 = specialized Sequence.compactMap<A>(_:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t Prim.setAttribute<A>(of:color:as:at:custom:variability:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, int a3@<W3>, _BYTE *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _DWORD v22[2];
  char v23;
  uint64_t v24;

  v22[1] = a3;
  v17 = type metadata accessor for ManagedColor(0, a5, a6, a7);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v22 - v19;
  LOBYTE(a4) = *a4;
  v24 = *a1;
  ManagedColor.init(_:)((CGColor *)a2, a5, a6, a7, (uint64_t)v22 - v19);
  v23 = (char)a4;
  Prim.setAttribute<A>(of:value:at:custom:variability:)((uint64_t)v20, v17, (uint64_t)&protocol witness table for ManagedColor<A>, a8, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

void Prim.createAttribute<A>(of:type:custom:variability:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  id Attribute;
  void *v8;

  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a6 + 32))(&v8, a5, a6);
  v6 = v8;
  Attribute = (id)RIOPxrUsdPrimCreateAttribute();

}

uint64_t Prim.setRelationship(of:targets:custom:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *Relationship;
  Class isa;
  int v6;
  uint64_t result;

  Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for RIOPxrSdfPathRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = RIOPxrUsdRelationshipSetTargets();

  if (v6)
  {
    type metadata accessor for Relationship();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = Relationship;
  }
  else
  {

    result = 1;
  }
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 ^ 1;
  return result;
}

uint64_t Prim.removeProperty(name:)()
{
  return RIOPxrUsdPrimRemoveProperty();
}

uint64_t Prim.active.setter()
{
  return RIOPxrUsdPrimSetActive();
}

uint64_t (*Prim.active.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = RIOPxrUsdPrimIsActive();
  return Prim.active.modify;
}

uint64_t Prim.active.modify()
{
  return RIOPxrUsdPrimSetActive();
}

Swift::Bool __swiftcall Prim.clearActive()()
{
  return RIOPxrUsdPrimClearActive();
}

Swift::Bool __swiftcall Prim.hasAuthoredActive()()
{
  return RIOPxrUsdPrimHasAuthoredActive();
}

uint64_t Prim.stage()()
{
  uint64_t v0;
  uint64_t result;

  v0 = RIOPxrUsdPrimCopyStage();
  type metadata accessor for Stage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t Prim.isA(type:)()
{
  return RIOPxrUsdPrimIsAType();
}

uint64_t Prim.hasProperty(of:)()
{
  return RIOPxrUsdPrimHasProperty();
}

Swift::Void __swiftcall Prim.clearPropertyOrder()()
{
  RIOPxrUsdPrimClearPropertyOrder();
}

uint64_t Prim.appliedSchemas.getter()
{
  return Object.allowedTokens.getter(MEMORY[0x24BE273F0], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Object.allowedTokens.getter(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t j;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;

  v6 = a1(*(_QWORD *)(v3 + 16));
  if (v6)
  {
    v7 = (void *)v6;
    a2(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v9 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_18;
LABEL_5:
  v20 = MEMORY[0x24BEE4AF8];
  result = a3(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v11 = v20;
    if ((v8 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v9; ++i)
      {
        v13 = MEMORY[0x22E2F57B8](i, v8);
        v15 = *(_QWORD *)(v20 + 16);
        v14 = *(_QWORD *)(v20 + 24);
        if (v15 >= v14 >> 1)
          a3(v14 > 1, v15 + 1, 1);
        *(_QWORD *)(v20 + 16) = v15 + 1;
        *(_QWORD *)(v20 + 8 * v15 + 32) = v13;
      }
    }
    else
    {
      for (j = 0; j != v9; ++j)
      {
        v17 = *(_QWORD *)(v20 + 16);
        v18 = *(_QWORD *)(v20 + 24);
        v19 = *(id *)(v8 + 8 * j + 32);
        if (v17 >= v18 >> 1)
          a3(v18 > 1, v17 + 1, 1);
        *(_QWORD *)(v20 + 16) = v17 + 1;
        *(_QWORD *)(v20 + 8 * v17 + 32) = v19;
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void key path setter for Prim.propertyOrder : Prim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, Class))
{
  uint64_t v6;
  uint64_t v7;
  Class isa;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v7 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v7);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a5(v6, isa);

}

void Prim.appliedSchemas.setter(uint64_t a1)
{
  Prim.propertyOrder.setter(a1, MEMORY[0x24BE275F8]);
}

void Prim.propertyOrder.setter(uint64_t a1, void (*a2)(uint64_t, Class))
{
  uint64_t v2;
  uint64_t v4;
  Class isa;

  v4 = *(_QWORD *)(v2 + 16);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  a2(v4, isa);

}

void (*Prim.appliedSchemas.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = Prim.appliedSchemas.getter();
  return Prim.appliedSchemas.modify;
}

void Prim.appliedSchemas.modify(uint64_t *a1, char a2)
{
  Prim.propertyOrder.modify(a1, a2, MEMORY[0x24BE275F8]);
}

void Prim.propertyOrder.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, Class))
{
  uint64_t v4;
  uint64_t v5;
  Class isa;
  Class v7;

  v4 = *(_QWORD *)(a1[3] + 16);
  if ((a2 & 1) != 0)
  {
    v5 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrTfTokenRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a3(v4, isa);

    swift_bridgeObjectRelease();
  }
  else
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(*a1);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrTfTokenRef(0);
    v7 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a3(v4, v7);

  }
}

uint64_t Prim.addAppliedSchema(of:)()
{
  return RIOPxrUsdPrimAddAppliedSchema();
}

uint64_t Prim.removeAppliedSchema(of:)()
{
  return RIOPxrUsdPrimRemoveAppliedSchema();
}

Swift::Bool __swiftcall Prim.isInstance()()
{
  return RIOPxrUsdPrimIsInstance();
}

Swift::Bool __swiftcall Prim.isInstanceProxy()()
{
  return RIOPxrUsdPrimIsInstanceProxy();
}

Swift::Bool __swiftcall Prim.isInstanceable()()
{
  return RIOPxrUsdPrimIsInstanceable();
}

Swift::Bool __swiftcall Prim.setInstanceable(instanceable:)(Swift::Bool instanceable)
{
  return RIOPxrUsdPrimSetInstanceable();
}

Swift::Bool __swiftcall Prim.hasAuthoredInstanceable()()
{
  return RIOPxrUsdPrimHasAuthoredInstanceable();
}

Swift::Bool __swiftcall Prim.clearInstanceable()()
{
  return RIOPxrUsdPrimClearInstanceable();
}

Swift::Bool __swiftcall Prim.isPrototype()()
{
  return RIOPxrUsdPrimIsPrototype();
}

uint64_t Prim.prototype.getter()
{
  uint64_t result;
  uint64_t v1;

  result = RIOPxrUsdPrimCopyPrototype();
  if (result)
  {
    v1 = result;
    type metadata accessor for Prim();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v1;
  }
  return result;
}

uint64_t Prim.taggedAsEntity.getter()
{
  return RIOPxrUsdPrimGetTaggedAsEntity();
}

uint64_t Prim.taggedAsEntity.setter()
{
  return RIOPxrUsdPrimSetTaggedAsEntity();
}

uint64_t (*Prim.taggedAsEntity.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = RIOPxrUsdPrimGetTaggedAsEntity();
  return Prim.taggedAsEntity.modify;
}

uint64_t Prim.taggedAsEntity.modify()
{
  return RIOPxrUsdPrimSetTaggedAsEntity();
}

uint64_t Prim.entityConvertible.getter()
{
  return RIOPxrUsdPrimIsEntityConvertible();
}

uint64_t Prim.childrenOrder.getter()
{
  return Prim.propertyNames()(MEMORY[0x24BE27420], type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void Prim.childrenOrder.setter(uint64_t a1)
{
  Prim.propertyOrder.setter(a1, MEMORY[0x24BE27600]);
}

void (*Prim.childrenOrder.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = Prim.childrenOrder.getter();
  return Prim.childrenOrder.modify;
}

void Prim.childrenOrder.modify(uint64_t *a1, char a2)
{
  Prim.propertyOrder.modify(a1, a2, MEMORY[0x24BE27600]);
}

Swift::Void __swiftcall Prim.clearChildrenOrder()()
{
  RIOPxrUsdPrimClearChildrenReorder();
}

uint64_t Prim.filteredDescendants(predicate:)(_QWORD *a1)
{
  return Prim.filteredChildren(predicate:)(a1, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE27438]);
}

{
  return Prim.filteredChildren(predicate:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274B8], (uint64_t (*)(uint64_t, id))MEMORY[0x24BE27438]);
}

{
  return Prim.filteredChildren(predicate:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274F8], (uint64_t (*)(uint64_t, id))MEMORY[0x24BE27438]);
}

uint64_t Prim.filteredChildren(predicate:)(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  id v13;
  uint64_t v14;

  v3 = (void *)a2(*(_QWORD *)(v2 + 16), *a1);
  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v4 = MEMORY[0x24BEE4AF8];
  v5 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v6 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_12;
LABEL_3:
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v8 = 0;
      do
      {
        v9 = v8 + 1;
        v10 = MEMORY[0x22E2F57B8]();
        type metadata accessor for Prim();
        *(_QWORD *)(swift_allocObject() + 16) = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      v11 = (void **)(v5 + 32);
      type metadata accessor for Prim();
      do
      {
        v12 = *v11++;
        *(_QWORD *)(swift_allocObject() + 16) = v12;
        v13 = v12;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    v14 = v4;
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t Prim.filteredDescendants(predicate:)(uint64_t a1, uint64_t a2)
{
  return Prim.filteredChildren(predicate:)(a1, a2, (uint64_t (*)(void **))Prim.filteredDescendants(predicate:));
}

uint64_t Prim.filteredChildren(predicate:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void **))
{
  void *v4;
  uint64_t v5;
  void *v7;

  v4 = (void *)RIOPxrUsdPrimFlagsPredicateCreateWithTerm();
  v7 = v4;
  v5 = a3(&v7);

  return v5;
}

uint64_t Prim.filteredChildren(predicate:)(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, id))
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  id v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = (id)a2(*a1);
  v7 = (void *)a3(v5, v6);

  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v8 = MEMORY[0x24BEE4AF8];
  v9 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v10 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_12;
LABEL_3:
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v10 & 0x8000000000000000) == 0)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      v12 = 0;
      do
      {
        v13 = v12 + 1;
        v14 = MEMORY[0x22E2F57B8]();
        type metadata accessor for Prim();
        *(_QWORD *)(swift_allocObject() + 16) = v14;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v12 = v13;
      }
      while (v10 != v13);
    }
    else
    {
      v15 = (void **)(v9 + 32);
      type metadata accessor for Prim();
      do
      {
        v16 = *v15++;
        *(_QWORD *)(swift_allocObject() + 16) = v16;
        v17 = v16;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v10;
      }
      while (v10);
    }
    v18 = v8;
    swift_bridgeObjectRelease();
    return v18;
  }
  __break(1u);
  return result;
}

void Prim.traverse(with:)()
{
  void *AllPrimsPredicate;
  void *v1;
  id v2;

  AllPrimsPredicate = (void *)RIOPxrUsdPrimFlagsCreateAllPrimsPredicate();
  v2 = (id)RIOPxrUsdPrimFlagsConjunctionPredicateToRIOPxrUsdPrimFlagsPredicate();

  v1 = (void *)RIOPxrUsdPrimCopyFilteredDescendants();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

}

uint64_t static PrimFlagsConjunctionPredicate.AllPrims.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateAllPrimsPredicate();
  *a1 = result;
  return result;
}

void __swiftcall Prim.localTransformation(at:)(simd_double4x4_optional *__return_ptr retstr, Swift::Double at)
{
  id v3;
  void *v4;
  int IsAType;
  _OWORD v6[9];
  _BYTE v7[136];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (String.count.getter() < 1)
    v3 = (id)RIOPxrTfTokenEmpty();
  else
    v3 = (id)RIOPxrTfTokenCreateWithCString();
  v4 = v3;
  IsAType = RIOPxrUsdPrimIsAType();

  if (IsAType && RIOPxrUsdGeomXformableXformQueryGetLocalTransformation())
  {
    memset(v6, 0, 128);
    _s9RealityIO7Frame4DVSgWOi_((uint64_t)v6);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for simd_double4x4?);
  outlined init with take of (URL, __REAsset)((uint64_t)v7, (uint64_t)retstr, &demangling cache variable for type metadata for simd_double4x4?);
}

uint64_t Prim.timeSamples.getter()
{
  id v0;
  void *v1;
  int IsAType;
  uint64_t v3;
  void *CopyTimeSamples;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  IsAType = RIOPxrUsdPrimIsAType();

  v3 = MEMORY[0x24BEE4AF8];
  if (IsAType)
  {
    CopyTimeSamples = (void *)RIOPxrUsdGeomXformableXformQueryCopyTimeSamples();
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  return v3;
}

uint64_t Property.propertyStack(time:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v0 = (void *)RIOPxrUsdPropertyCopyPropertyStack();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v1 = MEMORY[0x24BEE4AF8];
  v2 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = v1;
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v3; ++i)
      {
        v7 = MEMORY[0x22E2F57B8](i, v2);
        v9 = *(_QWORD *)(v5 + 16);
        v8 = *(_QWORD *)(v5 + 24);
        if (v9 >= v8 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        *(_QWORD *)(v5 + 16) = v9 + 1;
        *(_QWORD *)(v5 + 8 * v9 + 32) = v7;
      }
    }
    else
    {
      for (j = 0; j != v3; ++j)
      {
        v11 = *(_QWORD *)(v1 + 16);
        v12 = *(_QWORD *)(v1 + 24);
        v13 = *(id *)(v2 + 8 * j + 32);
        if (v11 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        *(_QWORD *)(v1 + 16) = v11 + 1;
        *(_QWORD *)(v1 + 8 * v11 + 32) = v13;
      }
    }
    swift_bridgeObjectRelease();

    return v5;
  }
  __break(1u);
  return result;
}

uint64_t Property.isAuthored.getter()
{
  return RIOPxrUsdPropertyIsAuthored();
}

uint64_t Property.isAuthoredAt(target:)()
{
  return RIOPxrUsdPropertyIsAuthoredAt();
}

uint64_t Property.baseName()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPropertyCopyBaseName();
  *a1 = result;
  return result;
}

uint64_t Property.namespace()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPropertyCopyNamespace();
  *a1 = result;
  return result;
}

uint64_t Property.splitName()()
{
  void *v0;

  v0 = (void *)RIOPxrUsdPropertyCopySplitName();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4AF8];
}

uint64_t Attribute.value.getter()
{
  _QWORD *v0;

  return static UsdAttributeValue.getValue(from:time:)(v0);
}

uint64_t Attribute.value.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  specialized Attribute.value.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 96) - 8) + 8))(a1);
}

void (*Attribute.value.modify(_QWORD *a1))(_QWORD ***a1, char a2)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = *(_QWORD *)(*v1 + 96);
  v4[1] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[2] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[3] = malloc(v7);
  v4[4] = malloc(v7);
  static UsdAttributeValue.getValue(from:time:)(v2);
  return Attribute.value.modify;
}

void Attribute.value.modify(_QWORD ***a1, char a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void (*v8)(_QWORD *, _QWORD *);

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (*a1)[4];
  v5 = (*a1)[1];
  v6 = (*a1)[2];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))v6[2])((*a1)[3], v4, v5);
    static UsdAttributeValue.setValue(_:to:time:)((uint64_t)v3, v7);
    v8 = (void (*)(_QWORD *, _QWORD *))v6[1];
    v8(v3, v5);
  }
  else
  {
    static UsdAttributeValue.setValue(_:to:time:)((uint64_t)(*a1)[4], v7);
    v8 = (void (*)(_QWORD *, _QWORD *))v6[1];
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Attribute.subscript.getter()
{
  _QWORD *v0;

  return static UsdAttributeValue.getValue(from:time:)(v0);
}

uint64_t Attribute.subscript.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  specialized Attribute.subscript.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 96) - 8) + 8))(a1);
}

void (*Attribute.subscript.modify(double **a1, double a2))(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;

  v3 = v2;
  v6 = (double *)malloc(0x30uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 1) = v2;
  *v6 = a2;
  v7 = *(_QWORD *)(*v2 + 96);
  *((_QWORD *)v6 + 2) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *((_QWORD *)v6 + 3) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *((_QWORD *)v6 + 4) = malloc(v9);
  *((_QWORD *)v6 + 5) = malloc(v9);
  static UsdAttributeValue.getValue(from:time:)(v3);
  return Attribute.subscript.modify;
}

void Attribute.subscript.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v4, v5);
    static UsdAttributeValue.setValue(_:to:time:)((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    static UsdAttributeValue.setValue(_:to:time:)(*(_QWORD *)(*(_QWORD *)a1 + 40), v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

void Relationship.targets.setter(uint64_t a1)
{
  Class isa;

  if (*(_QWORD *)(a1 + 16))
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();

  }
  else
  {
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipClearTargets();
  }
}

void (*Relationship.targets.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = Relationship.targets.getter();
  return Relationship.targets.modify;
}

void Relationship.targets.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  Class isa;
  Class v5;

  v2 = *(_QWORD *)(*a1 + 16);
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v3 = swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v3);
      swift_bridgeObjectRelease();
      type metadata accessor for RIOPxrSdfPathRef(0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      RIOPxrUsdRelationshipSetTargets();

    }
    else
    {
      RIOPxrUsdRelationshipClearTargets();
    }
    swift_bridgeObjectRelease();
  }
  else if (v2)
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(*a1);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    v5 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();

  }
  else
  {
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipClearTargets();
  }
}

uint64_t key path getter for Relationship.target : Relationship@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t result;

  v2 = Relationship.targets.getter();
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(id *)(v2 + 32);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    result = RIOPxrSdfPathCreateEmptyPath();
    v3 = (id)result;
  }
  *a1 = v3;
  return result;
}

void key path setter for Relationship.target : Relationship(void **a1)
{
  void *v1;
  uint64_t inited;
  id v3;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v1;
  v3 = v1;
  Relationship.targets.setter(inited);
}

void Relationship.target.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t inited;
  Class isa;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v1;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(inited);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrSdfPathRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  RIOPxrUsdRelationshipSetTargets();

}

void (*Relationship.target.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  id EmptyPath;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v4 = v3 + 10;
  v3[13] = v1;
  v5 = Relationship.targets.getter();
  if (*(_QWORD *)(v5 + 16))
  {
    EmptyPath = *(id *)(v5 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
  }
  *v4 = EmptyPath;
  return Relationship.target.modify;
}

void Relationship.target.modify(id **a1, char a2)
{
  id *v3;
  id v4;
  uint64_t inited;
  id v6;
  Class isa;
  uint64_t v8;
  Class v9;

  v3 = *a1;
  v4 = (*a1)[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  if ((a2 & 1) != 0)
  {
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
    *(_QWORD *)(inited + 32) = v4;
    v6 = v4;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(inited);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();

  }
  else
  {
    v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v8 + 32) = v4;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RIOPxrUsdRelationshipSetTargets();

  }
  free(v3);
}

void AnyAttribute.value.setter(void *a1)
{
  RIOPxrUsdAttributeSetValue();

}

void (*AnyAttribute.value.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;
  uint64_t EmptyValue;

  a1[1] = *(_QWORD *)(v1 + 16);
  EmptyValue = RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue)
    EmptyValue = RIOPxrVtValueCreateEmptyValue();
  *a1 = EmptyValue;
  return AnyAttribute.value.modify;
}

void AnyAttribute.value.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdAttributeSetValue();

}

uint64_t AnyAttribute.subscript.getter()
{
  uint64_t result;

  result = RIOPxrUsdAttributeCopyValue();
  if (!result)
    return RIOPxrVtValueCreateEmptyValue();
  return result;
}

uint64_t key path getter for AnyAttribute.subscript(at:) : AnyAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdAttributeCopyValue();
  if (!result)
    result = RIOPxrVtValueCreateEmptyValue();
  *a1 = result;
  return result;
}

void AnyAttribute.subscript.setter(void *a1)
{
  RIOPxrUsdAttributeSetValue();

}

void (*AnyAttribute.subscript.modify(uint64_t a1, double a2))(id *a1)
{
  uint64_t v2;
  uint64_t EmptyValue;

  *(double *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  EmptyValue = RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue)
    EmptyValue = RIOPxrVtValueCreateEmptyValue();
  *(_QWORD *)a1 = EmptyValue;
  return AnyAttribute.subscript.modify;
}

void AnyAttribute.subscript.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdAttributeSetValue();

}

uint64_t AnyAttribute.variability.getter()
{
  return RIOPxrUsdAttributeGetVariability();
}

unint64_t AnyAttribute.sdfVariability.getter@<X0>(BOOL *a1@<X8>)
{
  unint64_t result;

  result = RIOPxrUsdAttributeGetVariability();
  if (result > 2)
    __break(1u);
  else
    *a1 = (result & 1) == 0;
  return result;
}

uint64_t AnyAttribute.timeSamples.getter()
{
  void *v0;

  v0 = (void *)RIOPxrUsdAttributeCopyTimeSamples();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4AF8];
}

uint64_t AnyAttribute.hasValue.getter()
{
  return RIOPxrUsdAttributeHasValue();
}

uint64_t AnyAttribute.hasAuthoredValue.getter()
{
  return RIOPxrUsdAttributeHasAuthoredValue();
}

Swift::Void __swiftcall AnyAttribute.block()()
{
  RIOPxrUsdAttributeBlock();
}

Swift::Bool __swiftcall AnyAttribute.clear()()
{
  return RIOPxrUsdAttributeClear();
}

Swift::Void __swiftcall AnyAttribute.clearAll()()
{
  RIOPxrUsdAttributeClearAll();
}

uint64_t AnyAttribute.addConnection(source:)()
{
  return RIOPxrUsdAttributeAddConnection();
}

uint64_t AnyAttribute.removeConnection(source:)()
{
  return RIOPxrUsdAttributeRemoveConnection();
}

Swift::Void __swiftcall AnyAttribute.setConnections(connections:)(Swift::OpaquePointer connections)
{
  Class isa;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm((uint64_t)connections._rawValue);
  type metadata accessor for RIOPxrSdfPathRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  RIOPxrUsdAttributeSetConnections();

}

Swift::Bool __swiftcall AnyAttribute.clearConnections()()
{
  return RIOPxrUsdAttributeClearConnections();
}

uint64_t AnyAttribute.connections()()
{
  return Prim.propertyNames()(MEMORY[0x24BE27228], type metadata accessor for RIOPxrSdfPathRef, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t Prim.propertyNames()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t j;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;

  v6 = (void *)a1(*(_QWORD *)(v3 + 16));
  if (v6)
  {
    a2(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v8 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v19 = MEMORY[0x24BEE4AF8];
  result = a3(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v10 = v19;
    if ((v7 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v8; ++i)
      {
        v12 = MEMORY[0x22E2F57B8](i, v7);
        v14 = *(_QWORD *)(v19 + 16);
        v13 = *(_QWORD *)(v19 + 24);
        if (v14 >= v13 >> 1)
          a3(v13 > 1, v14 + 1, 1);
        *(_QWORD *)(v19 + 16) = v14 + 1;
        *(_QWORD *)(v19 + 8 * v14 + 32) = v12;
      }
    }
    else
    {
      for (j = 0; j != v8; ++j)
      {
        v16 = *(_QWORD *)(v19 + 16);
        v17 = *(_QWORD *)(v19 + 24);
        v18 = *(id *)(v7 + 8 * j + 32);
        if (v16 >= v17 >> 1)
          a3(v17 > 1, v16 + 1, 1);
        *(_QWORD *)(v19 + 16) = v16 + 1;
        *(_QWORD *)(v19 + 8 * v16 + 32) = v18;
      }
    }
    swift_bridgeObjectRelease();

    return v10;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall AnyAttribute.hasAuthoredConnections()()
{
  return RIOPxrUsdAttributeHasAuthoredConnections();
}

uint64_t AnyAttribute.colorSpace.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdAttributeCopyColorSpace();
  *a1 = result;
  return result;
}

void AnyAttribute.colorSpace.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdAttributeSetColorSpace();

}

void (*AnyAttribute.colorSpace.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrUsdAttributeCopyColorSpace();
  return AnyAttribute.colorSpace.modify;
}

void AnyAttribute.colorSpace.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdAttributeSetColorSpace();

}

Swift::Bool __swiftcall AnyAttribute.hasColorSpace()()
{
  return RIOPxrUsdAttributeHasColorSpace();
}

Swift::Bool __swiftcall AnyAttribute.clearColorSpace()()
{
  return RIOPxrUsdAttributeClearColorSpace();
}

uint64_t Properties.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Properties.subscript.getter(a1, a2, a3, a4, NAN);
}

id key path setter for Properties.subscript<A>(dynamicMember:) : <A><A1>Properties<A>AA1(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(_QWORD *)((char *)a3 + a4 - 8);
  v6 = (_QWORD *)*a3;
  v7 = type metadata accessor for Properties(0, *(_QWORD *)((char *)a3 + a4 - 24), (uint64_t)a3, a4);
  swift_retain();
  return specialized Properties.subscript.setter(a1, v6, v7, v5);
}

uint64_t Properties.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[8];
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v9 = *a1;
  swift_getAtKeyPath();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    v10 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v10 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  v19 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8] + v9 + 8) + 16);
  Prim.attribute<A>(of:type:)(v11, a3, (uint64_t)&v22);

  v19 = v22;
  v20 = v23;
  type metadata accessor for Attribute(255, v11, a3, v12);
  lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
  v13 = type metadata accessor for Result();
  v14 = _ss6ResultOsRi_zrlE3getxyq_YKF(v13, (uint64_t)&v18, (uint64_t)&v21);
  v22 = v21;
  MEMORY[0x24BDAC7A8](v14);
  v17[2] = *(_QWORD *)(a2 + 16);
  v17[3] = v11;
  v17[4] = a3;
  *(double *)&v17[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Properties.subscript.getter, (uint64_t)v17, MEMORY[0x24BEE4078], v11, v15, a4);
  return swift_release();
}

id Properties.subscript.setter(uint64_t a1, _QWORD *a2, int a3, unint64_t a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, uint64_t);
  id result;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  id v36;
  id v37;
  uint64_t v38;

  v32 = a7;
  v34 = a4;
  v31 = a3;
  v10 = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8) + 16);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v27 - v17;
  v33 = v7;
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v10) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(a1, v11);
    return (id)((uint64_t (*)(char *, uint64_t))v19)(v14, v11);
  }
  else
  {
    v28 = v11;
    v29 = v12;
    v21 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v30 = v18;
    v21(v18, v14, v10);
    v22 = String.count.getter();
    v27 = v15;
    if (v22 < 1)
    {
      swift_bridgeObjectRelease();
      result = (id)RIOPxrTfTokenEmpty();
      v23 = result;
    }
    else
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v23 = (void *)RIOPxrTfTokenCreateWithCString();
      result = (id)swift_release();
    }
    v36 = v23;
    v24 = v29;
    v25 = (uint64_t)v30;
    v26 = v28;
    if (v34 > 2)
    {
      __break(1u);
    }
    else
    {
      v35 = (v34 & 1) == 0;
      Prim.setAttribute<A>(of:value:at:custom:variability:)((uint64_t)v30, v10, v32, (uint64_t)&v37, a5);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v26);

      outlined consume of Result<AnyAttribute, Object.Error>(v37, v38);
      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v25, v10);
    }
  }
  return result;
}

void (*Properties.subscript.modify(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4))(_QWORD ***a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  v10 = type metadata accessor for Optional();
  v9[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  Properties.subscript.getter(a2, a3, a4, (uint64_t)v13, NAN);
  return Properties.subscript.modify;
}

void Properties.subscript.modify(_QWORD ***a1, char a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD *, _QWORD *);

  v2 = *a1;
  v3 = (*a1)[6];
  v4 = (*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (uint64_t)(*a1)[2];
  v9 = **a1;
  v8 = (uint64_t)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))v6[2])((*a1)[6], v4, v5);
    swift_retain();
    specialized Properties.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = (void (*)(_QWORD *, _QWORD *))v6[1];
    v10(v3, v5);
  }
  else
  {
    swift_retain();
    specialized Properties.subscript.setter((uint64_t)v4, v9, v8, v7);
    v10 = (void (*)(_QWORD *, _QWORD *))v6[1];
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t key path getter for Properties.subscript<A>(of:at:custom:variability:) : <A><A1>Properties<A>AA1@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  double v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a2 + a1 - 8);
  v6 = *(uint64_t **)a1;
  v7 = *(double *)(a1 + 8);
  v8 = type metadata accessor for Properties(0, *(_QWORD *)(a2 + a1 - 24), a2, a3);
  return Properties.subscript.getter(v6, v8, v5, a4, v7);
}

id key path setter for Properties.subscript<A>(of:at:custom:variability:) : <A><A1>Properties<A>AA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  double v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = type metadata accessor for Optional();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD **)a3;
  v13 = *(double *)(a3 + 8);
  v14 = *(unsigned __int8 *)(a3 + 16);
  v15 = *(_QWORD *)(a3 + 24);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)&v21 - v10, a1, v9);
  v19 = type metadata accessor for Properties(0, v6, v17, v18);
  swift_retain();
  return Properties.subscript.setter((uint64_t)v11, v12, v14, v15, v13, v19, v7);
}

void (*Properties.subscript.modify(_QWORD *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7))(unsigned __int8 **a1, char a2)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;

  v15 = malloc(0x58uLL);
  *a1 = v15;
  v15[4] = a6;
  v15[5] = v7;
  v15[2] = a4;
  v15[3] = a5;
  *((_BYTE *)v15 + 80) = a3;
  *((double *)v15 + 1) = a7;
  *v15 = a2;
  v16 = type metadata accessor for Optional();
  v15[6] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v15[7] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v15[8] = malloc(v18);
  v19 = malloc(v18);
  v15[9] = v19;
  Properties.subscript.getter(a2, a5, a6, (uint64_t)v19, a7);
  return Properties.subscript.modify;
}

void Properties.subscript.modify(unsigned __int8 **a1, char a2)
{
  unsigned __int8 *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  double v17;
  _QWORD *v18;

  v2 = *a1;
  v3 = (void *)*((_QWORD *)*a1 + 8);
  v4 = (void *)*((_QWORD *)*a1 + 9);
  if ((a2 & 1) != 0)
  {
    v5 = *((_QWORD *)v2 + 6);
    v6 = *((_QWORD *)v2 + 7);
    v7 = *((_QWORD *)v2 + 4);
    v9 = *((_QWORD *)v2 + 2);
    v8 = *((_QWORD *)v2 + 3);
    v10 = v2[80];
    v11 = *((double *)v2 + 1);
    v12 = *(_QWORD **)v2;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v3, v4, v5);
    swift_retain();
    Properties.subscript.setter((uint64_t)v3, v12, v10, v9, v11, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    v13 = *((_QWORD *)v2 + 4);
    v15 = *((_QWORD *)v2 + 2);
    v14 = *((_QWORD *)v2 + 3);
    v16 = v2[80];
    v17 = *((double *)v2 + 1);
    v18 = *(_QWORD **)v2;
    swift_retain();
    Properties.subscript.setter((uint64_t)v4, v18, v16, v15, v17, v14, v13);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Properties.subscript.getter()
{
  return specialized Properties.subscript.getter();
}

void Properties.subscript.setter(uint64_t a1)
{
  specialized Properties.subscript.setter(a1);
}

void (*Properties.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = specialized Properties.subscript.getter();
  return Properties.subscript.modify;
}

void Properties.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v3 = swift_bridgeObjectRetain();
    specialized Properties.subscript.setter(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    specialized Properties.subscript.setter(v2);
  }
}

{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Properties.subscript.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    specialized Properties.subscript.setter(v2);
  }
}

uint64_t key path setter for Properties.subscript(dynamicMember:) : <A>Properties<A>A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a3;
  v7 = type metadata accessor for Properties(0, *(uint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  swift_retain();
  v8 = swift_bridgeObjectRetain();
  return a5(v8, v6, v7);
}

void (*Properties.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v4;

  a1[2] = a4;
  a1[3] = v4;
  a1[1] = a2;
  *a1 = specialized Properties.subscript.getter();
  return Properties.subscript.modify;
}

char *StaticTypePrim.__allocating_init(prim:type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  swift_allocObject();
  v6 = specialized StaticTypePrim.init(prim:type:)(a1, a2, v4, v5);
  swift_release();
  return v6;
}

uint64_t key path setter for StaticTypePrim.subscript<A>(dynamicMember:) : <A><A1>StaticTypePrim<A>AA1(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  swift_retain();
  specialized StaticTypePrim.subscript.setter(a1, v6, v5);
  return swift_release();
}

uint64_t key path setter for StaticTypePrim.subscript<A>(of:at:custom:variability:) : <A><A1>StaticTypePrim<A>AA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  double v7;
  int v8;
  unint64_t v9;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = *(_QWORD **)a3;
  v7 = *(double *)(a3 + 8);
  v8 = *(unsigned __int8 *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  swift_retain();
  specialized StaticTypePrim.subscript.setter(a1, v6, v8, v9, v5, v7);
  return swift_release();
}

uint64_t key path setter for StaticTypePrim.subscript(dynamicMember:) : <A>StaticTypePrim<A>A(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a3;
  v7 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  a5(v7, v6);
  return swift_release();
}

uint64_t StaticTypePrim.__deallocating_deinit()
{
  StaticTypePrim.deinit();
  return swift_deallocClassInstance();
}

uint64_t StaticTypePrim.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  swift_retain();
  v0 = (id)RIOPxrUsdObjectCopyPath();
  v1 = (void *)RIOPxrSdfPathCopyString();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_release();

  return v2;
}

uint64_t StaticTypePrim.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  v0._countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Object.debugDescription.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 10;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticTypePrim<A>()
{
  return StaticTypePrim.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticTypePrim<A>()
{
  return StaticTypePrim.debugDescription.getter();
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsActive.getter()
{
  return 0;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsLoaded.getter()
{
  return 1;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsModel.getter()
{
  return 2;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsGroup.getter()
{
  return 3;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsComponent.getter()
{
  return 4;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsAbstract.getter()
{
  return 5;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsDefined.getter()
{
  return 6;
}

uint64_t static RIOPxrUsdTerm.UsdPrimHasDefiningSpecifier.getter()
{
  return 7;
}

uint64_t static RIOPxrUsdTerm.UsdPrimIsInstance.getter()
{
  return 8;
}

void static RIOPxrUsdTerm.&& infix(_:_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  static RIOPxrUsdTerm.&& infix(_:_:)(a1, a2, a3, a4, MEMORY[0x24BE274B0], (uint64_t (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE274C8], a5);
}

uint64_t PrimFlagsConjunctionPredicate.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsConjunctionPredicateCreate();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsConjunctionPredicate.&& infix(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

void static RIOPxrUsdTerm.|| infix(_:_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  static RIOPxrUsdTerm.&& infix(_:_:)(a1, a2, a3, a4, MEMORY[0x24BE274F0], (uint64_t (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE274E0], a5);
}

void static RIOPxrUsdTerm.&& infix(_:_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t (*a6)(void *, uint64_t, _QWORD)@<X5>, uint64_t *a7@<X8>)
{
  void *v13;
  void *v14;
  uint64_t v15;

  v13 = (void *)a5();
  v14 = (void *)a6(v13, a1, a2 & 1);

  v15 = a6(v14, a3, a4 & 1);
  *a7 = v15;
}

uint64_t PrimFlagsDisjunctionPredicate.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsDisjunctionPredicateCreate();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsDisjunctionPredicate.|| infix(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm();
  *a1 = result;
  return result;
}

uint64_t PrimFlagsPredicate.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsPredicateCreate();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsPredicate.Tautology.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsPredicateCreateTautology();
  *a1 = result;
  return result;
}

uint64_t static PrimFlagsPredicate.Contradiction.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsPredicateCreateContradiction();
  *a1 = result;
  return result;
}

uint64_t PrimFlagsPredicate.traverseInstanceProxies(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies();
  *a1 = result;
  return result;
}

uint64_t PrimFlagsPredicate.isInstanceProxiesInTraversalIncluded.getter()
{
  return RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal();
}

uint64_t PrimFlagsPredicate.callAsFunction(prim:)()
{
  return RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim();
}

void PrimFlagsConjunctionPredicate.init(_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  PrimFlagsConjunctionPredicate.init(_:)(a1, a2, MEMORY[0x24BE274B0], (uint64_t (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE274C8], a3);
}

uint64_t static PrimFlagsConjunctionPredicate.! prefix(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateConjunctionPredicateNegation();
  *a1 = result;
  return result;
}

void PrimFlagsConjunctionPredicate.traverseInstanceProxies(_:)(uint64_t a1)
{
  PrimFlagsConjunctionPredicate.traverseInstanceProxies(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274B8]);
}

uint64_t PrimFlagsConjunctionPredicate.isInstanceProxiesInTraversalIncluded.getter()
{
  id v0;
  uint64_t v1;

  v0 = (id)RIOPxrUsdPrimFlagsConjunctionPredicateToRIOPxrUsdPrimFlagsPredicate();
  v1 = RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal();

  return v1;
}

uint64_t PrimFlagsConjunctionPredicate.callAsFunction(prim:)(uint64_t a1)
{
  return PrimFlagsConjunctionPredicate.callAsFunction(prim:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274B8]);
}

uint64_t static PrimFlagsConjunctionPredicate.Default.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateDefaultPredicate();
  *a1 = result;
  return result;
}

void PrimFlagsDisjunctionPredicate.init(_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  PrimFlagsConjunctionPredicate.init(_:)(a1, a2, MEMORY[0x24BE274F0], (uint64_t (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE274E0], a3);
}

void PrimFlagsConjunctionPredicate.init(_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void *, uint64_t, _QWORD)@<X3>, uint64_t *a5@<X8>)
{
  void *v9;
  uint64_t v10;

  v9 = (void *)a3();
  v10 = a4(v9, a1, a2 & 1);

  *a5 = v10;
}

uint64_t static PrimFlagsDisjunctionPredicate.! prefix(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimFlagsCreateDisjunctionPredicateNegation();
  *a1 = result;
  return result;
}

void PrimFlagsDisjunctionPredicate.traverseInstanceProxies(_:)(uint64_t a1)
{
  PrimFlagsConjunctionPredicate.traverseInstanceProxies(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274F8]);
}

void PrimFlagsConjunctionPredicate.traverseInstanceProxies(_:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  _QWORD *v2;
  id v3;

  v3 = (id)a2(*v2);
  RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies();

  __break(1u);
}

uint64_t PrimFlagsDisjunctionPredicate.isInstanceProxiesInTraversalIncluded.getter()
{
  id v0;
  uint64_t v1;

  v0 = (id)RIOPxrUsdPrimFlagsDisjunctionPredicateToRIOPxrUsdPrimFlagsPredicate();
  v1 = RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal();

  return v1;
}

uint64_t PrimFlagsDisjunctionPredicate.callAsFunction(prim:)(uint64_t a1)
{
  return PrimFlagsConjunctionPredicate.callAsFunction(prim:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE274F8]);
}

uint64_t PrimFlagsConjunctionPredicate.callAsFunction(prim:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  _QWORD *v2;
  id v3;
  uint64_t v4;

  v3 = (id)a2(*v2);
  v4 = RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim();

  return v4;
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int64_t v5;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0);
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for [[Double]]);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for [Double]);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for RIOPxrVtValueRef(0);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1);
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Int>>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Int>>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityActionSpecification]>, &demangling cache variable for type metadata for [__RKEntityActionSpecification]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[AnimationResource]>, &demangling cache variable for type metadata for [AnimationResource]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityTriggerSpecification]>, &demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int32]>, &demangling cache variable for type metadata for [Int32]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.AssetPath>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.PrimSpec>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Reference>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Frame4D>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8])
      memmove(v13, v14, v8 << 7);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[128 * v8] || v13 >= &v14[128 * v8])
  {
    memcpy(v13, v14, v8 << 7);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float2x2>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float3x3>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    memcpy(v12, v13, 48 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    memcpy(v13, v14, v8 << 6);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 56 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Inputs.PropertyDelta>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<()>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    memcpy(v14, v15, 32 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v9])
      memmove(v14, v15, 2 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v9] || v14 >= &v15[2 * v9])
  {
    memcpy(v14, v15, 2 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnimationDefinition>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(animResource: AnimationResource, trackNumber: Int)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<([AnimationResource], Int)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnimationResource], Int));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(RIOPxrTfTokenRef, RIOPxrVtValueRef)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RIOPxrTfTokenRef, RIOPxrVtValueRef));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  _CFObject.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfLayerRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfLayerRef);
}

{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  id v2;
  Swift::Int v3;

  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
  v2 = a1;
  _CFObject.hash(into:)();

  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)v2, v3, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  Swift::Int v8;

  Hasher.init(_seed:)();
  a2(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(a3, 255, a2, a4);
  _CFObject.hash(into:)();
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v8, a2, a3, a4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  char v16;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  i = a2 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    a3(0);
    v12 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * i);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(a4, 255, a3, a5);
    v13 = v12;
    LOBYTE(a4) = static _CFObject.== infix(_:_:)();

    if ((a4 & 1) == 0)
    {
      v14 = ~v7;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v6 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7.n128_f64[0] = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ToolsFoundations.Token, RIOPxrVtValueRef>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for __RKEntityInteractionSpecification();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, __RKEntityInteractionSpecification>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v19 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v19, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v19, v4, v1);
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, OpaquePointer>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrTfTokenRef, RIOPxrVtValueRef>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)();
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (URL, __REAsset)>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v7;
    return result;
  }
  v27 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v28 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14)
      goto LABEL_23;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_23;
      v24 = *(_QWORD *)(v28 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_22:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    outlined init with copy of (URL, __REAsset)(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    outlined init with take of (URL, __REAsset)((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, &demangling cache variable for type metadata for (URL, __REAsset));
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_25;
  }
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_23;
    v24 = *(_QWORD *)(v28 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [Builder]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, RETypeID>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ImportSession.MeshAssetEstimate>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *v21;
    v24 = v21[1];
    *v22 = v19;
    v22[1] = v18;
    v25 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v25 = v23;
    v25[1] = v24;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [ImportSession.EvaluationFault]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [ToolsFoundations.Token]>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ToolsFoundations.Token, RIOPxrVtValueRef>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = 8 * v20;
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + v29);
    v31 = *(void **)(*(_QWORD *)(v5 + 56) + v29);
    if ((a2 & 1) == 0)
    {
      v32 = v30;
      v33 = v31;
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 8 * v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, OpaquePointer>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((v37 & 1) == 0)
      v33 = v31;
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    v14 = v31;
    _CFObject.hash(into:)();

    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrTfTokenRef, RIOPxrVtValueRef>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = 8 * v20;
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + v29);
    v31 = *(void **)(*(_QWORD *)(v5 + 56) + v29);
    if ((a2 & 1) == 0)
    {
      v32 = v30;
      v33 = v31;
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 8 * v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          v3 = v2;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = 8 * v20;
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + v29);
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v29);
    if ((a2 & 1) == 0)
    {
      v32 = v30;
      swift_retain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfLayerRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfLayerRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfLayerRef);
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 8 * v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v2;
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [Builder]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, RETypeID>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v15) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ImportSession.MeshAssetEstimate>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v11)
        goto LABEL_33;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v14 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = (__int128 *)(*(_QWORD *)(v5 + 56) + 32 * v22);
    v39 = *v34;
    v40 = v34[1];
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v18);
    *v20 = v39;
    v20[1] = v40;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [ImportSession.EvaluationFault]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [ToolsFoundations.Token]>);
}

uint64_t type metadata accessor for VariantSet()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VariantSets()
{
  return objc_opt_self();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  char *v44;
  uint64_t v45;

  v3 = v2;
  v45 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  v43 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v40 = v2;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 64);
    v42 = (_QWORD *)(v7 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v41 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41)
          goto LABEL_34;
        v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_34;
          v22 = v42[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v7 + 32);
                if (v38 >= 64)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v7 + 16) = 0;
              }
              break;
            }
            v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v41)
                  goto LABEL_34;
                v22 = v42[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = *(_QWORD *)(v7 + 56);
      v25 = v7;
      v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v5 + 72);
      v30 = v24 + v29 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v44, v30, v45);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v44, v30, v45);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v9 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v14 + 8 * v33);
        }
        while (v37 == -1);
        v17 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v17);
      *v18 = v28;
      v18[1] = v27;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 56) + v29 * v17, v44, v45);
      ++*(_QWORD *)(v9 + 16);
      v7 = v25;
    }
  }
  result = swift_release();
  *v3 = v9;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  char *v46;

  v3 = v2;
  v5 = type metadata accessor for __RKEntityInteractionSpecification();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v46 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, __RKEntityInteractionSpecification>);
  v45 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v41 = v2;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  v44 = v5;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v42)
      break;
    v22 = v43;
    v23 = v43[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v42)
        goto LABEL_34;
      v23 = v43[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v42)
        {
LABEL_34:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v43[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v42)
              goto LABEL_34;
            v23 = v43[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = *(void **)(*(_QWORD *)(v8 + 48) + 8 * v20);
    v28 = *(_QWORD *)(v6 + 72);
    v29 = v25 + v28 * v20;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v46, v29, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v46, v29, v5);
      v30 = v27;
    }
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    v31 = v27;
    _CFObject.hash(into:)();

    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      v5 = v44;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      v5 = v44;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v18) = v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v28 * v18, v46, v5);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  swift_release();
  v3 = v41;
  v22 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v8 + 32);
  if (v39 >= 64)
    bzero(v22, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v39;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  v41 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (URL, __REAsset)>);
  v42 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v38 = v2;
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 64);
    v40 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v39 = (unint64_t)(v11 + 63) >> 6;
    v15 = v9 + 64;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v17 << 6);
      }
      else
      {
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v39)
          goto LABEL_34;
        v23 = v40[v22];
        ++v17;
        if (!v23)
        {
          v17 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_34;
          v23 = v40[v17];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_34:
              swift_release();
              v3 = v38;
              if ((v42 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v8 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v17 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v17 >= v39)
                  goto LABEL_34;
                v23 = v40[v17];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v17 = v24;
          }
        }
LABEL_21:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v27 = *v25;
      v26 = v25[1];
      v28 = *(_QWORD *)(v41 + 72);
      v29 = *(_QWORD *)(v8 + 56) + v28 * v21;
      if ((v42 & 1) != 0)
      {
        outlined init with take of (URL, __REAsset)(v29, (uint64_t)v7, &demangling cache variable for type metadata for (URL, __REAsset));
      }
      else
      {
        outlined init with copy of (URL, __REAsset)(v29, (uint64_t)v7);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v10 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v15 + 8 * v32);
        }
        while (v36 == -1);
        v18 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
      *v19 = v27;
      v19[1] = v26;
      result = outlined init with take of (URL, __REAsset)((uint64_t)v7, *(_QWORD *)(v10 + 56) + v28 * v18, &demangling cache variable for type metadata for (URL, __REAsset));
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v36 = (_QWORD *)(v6 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v6 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v4 = v3;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v6 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 8 * v22;
      v31 = *(void **)(*(_QWORD *)(v6 + 48) + v30);
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v30);
      if ((v37 & 1) == 0)
      {
        v33 = v31;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrSdfPathRef(0);
      lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
      v15 = v31;
      _CFObject.hash(into:)();

      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v12 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v12 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  result = MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    while (1)
    {
      v5 = *(id *)(a1 + 8 * v4 + 32);
      if (RIOPxrUsdPrimHasAttribute())
        break;
      lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
      swift_willThrowTypedImpl();
      outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
      if (RIOPxrUsdPrimHasRelationship())
      {
        v6 = RIOPxrUsdPrimCopyRelationship();
        type metadata accessor for Relationship();
        goto LABEL_9;
      }
      swift_willThrowTypedImpl();
      outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

LABEL_4:
      if (v3 == ++v4)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    v6 = RIOPxrUsdPrimCopyAttribute();
    type metadata accessor for AnyAttribute();
LABEL_9:
    *(_QWORD *)(swift_allocObject() + 16) = v6;

    MEMORY[0x22E2F53D4]();
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_4;
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, id), uint64_t (*a4)(uint64_t, id), void (*a5)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  uint64_t i;
  id v12;
  uint64_t v13;
  uint64_t v15;

  result = MEMORY[0x24BEE4AF8];
  v15 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v10 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    for (i = 0; i != v7; ++i)
    {
      v12 = *(id *)(a1 + 8 * i + 32);
      if ((a3(v10, v12) & 1) != 0)
      {
        v13 = a4(v10, v12);
        a5();
        *(_QWORD *)(swift_allocObject() + 16) = v13;

        MEMORY[0x22E2F53D4]();
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

      }
    }
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO4PrimCG_yts5NeverOTg503_s9d3IO4F32C8traverse4withyyACXE_tFyACXEfU_AHIgg_Tf1cn_nTf4ng_n(unint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v12 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v12;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v8 = MEMORY[0x22E2F57B8](v7, a1);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8 * v7 + 32);
        swift_retain();
      }
      a2(v8);
      swift_release();
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      v11 = v10 + 1;
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      ++v7;
      *(_QWORD *)(v12 + 16) = v11;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *specialized StaticTypePrim.init(prim:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v5 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 80);
  v8 = type metadata accessor for Properties(0, v7, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - v10;
  *((_QWORD *)v5 + 2) = a1;
  swift_retain();
  Prim.properties<A>(of:)(v7, v11);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v5[*(_QWORD *)(*(_QWORD *)v5 + 96)], v11, v8);
  return v5;
}

uint64_t type metadata accessor for Properties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Properties);
}

uint64_t specialized StaticTypePrim.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v2 = MEMORY[0x24BDAC7A8](a1);
  v3 = *(_QWORD *)(v1 + 16);
  (*(void (**)(char *, double))(v4 + 16))((char *)v7 - v5, v2);
  v7[1] = v3;
  swift_retain();
  swift_setAtReferenceWritableKeyPath();
  swift_release();
  return swift_release();
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_beginAccess();
  type metadata accessor for Properties(0, *(_QWORD *)(v3 + 80), v4, v5);
  swift_retain();
  specialized Properties.subscript.setter(a1);
  return swift_endAccess();
}

id specialized Properties.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for Optional();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return Properties.subscript.setter((uint64_t)v11, a2, 0, 0, NAN, a3, a4);
}

uint64_t specialized StaticTypePrim.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *v3;
  swift_beginAccess();
  v10 = type metadata accessor for Properties(0, *(_QWORD *)(v7 + 80), v8, v9);
  swift_retain();
  specialized Properties.subscript.setter(a1, a2, v10, a3);
  return swift_endAccess();
}

uint64_t specialized StaticTypePrim.subscript.setter(uint64_t a1, _QWORD *a2, int a3, unint64_t a4, uint64_t a5, double a6)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v13 = *v6;
  v14 = type metadata accessor for Optional();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, double))(v18 + 16))((char *)&v23 - v16, a1, v15);
  swift_beginAccess();
  v21 = type metadata accessor for Properties(0, *(_QWORD *)(v13 + 80), v19, v20);
  swift_retain();
  Properties.subscript.setter((uint64_t)v17, a2, a3, a4, a6, v21, a5);
  return swift_endAccess();
}

uint64_t specialized Properties.subscript.getter()
{
  id v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  swift_getAtKeyPath();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if ((RIOPxrUsdPrimHasRelationship() & 1) != 0)
  {
    v1 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = v1;
    swift_retain();
    v3 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
  }
  else
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  return v3;
}

uint64_t type metadata accessor for Attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Attribute);
}

uint64_t specialized Attribute.value.setter(uint64_t a1)
{
  _QWORD *v1;

  return static UsdAttributeValue.setValue(_:to:time:)(a1, v1);
}

uint64_t specialized Attribute.subscript.setter(uint64_t a1)
{
  _QWORD *v1;

  return static UsdAttributeValue.setValue(_:to:time:)(a1, v1);
}

uint64_t partial apply for closure #1 in Properties.subscript.getter(_QWORD **a1)
{
  return static UsdAttributeValue.getValue(from:time:)(*a1);
}

uint64_t base witness table accessor for Equatable in Object(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type Object and conformance Object, a2, (uint64_t (*)(uint64_t))type metadata accessor for Object, (uint64_t)&protocol conformance descriptor for Object);
}

uint64_t type metadata accessor for Object()
{
  return objc_opt_self();
}

uint64_t sub_22BCDCD44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Object.allowedTokens.getter();
  *a1 = result;
  return result;
}

void sub_22BCDCD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for Object.allowedTokens : Object(a1, a2, a3, a4, type metadata accessor for RIOPxrTfTokenRef, MEMORY[0x24BE27390]);
}

uint64_t sub_22BCDCD90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Object.inheritsPath.getter();
  *a1 = result;
  return result;
}

void sub_22BCDCDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for Object.allowedTokens : Object(a1, a2, a3, a4, type metadata accessor for RIOPxrSdfPathRef, MEMORY[0x24BE273A0]);
}

void sub_22BCDCDDC(uint64_t a1, id *a2, uint64_t a3)
{
  key path getter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, (void (*)(id *, uint64_t, uint64_t))Object.subscript.getter);
}

uint64_t sub_22BCDCDF8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_22BCDCE14()
{
  return 16;
}

__n128 sub_22BCDCE20(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_22BCDCE2C(uint64_t a1, id *a2, uint64_t a3)
{
  key path getter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, (void (*)(id *, uint64_t, uint64_t))Object.subscript.getter);
}

uint64_t sub_22BCDCE48(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_22BCDCE64()
{
  return 16;
}

__n128 sub_22BCDCE70(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_22BCDCE7C(uint64_t a1, id *a2, uint64_t a3)
{
  key path getter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, (void (*)(id *, uint64_t, uint64_t))Object.subscript.getter);
}

uint64_t sub_22BCDCE98(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_22BCDCEB4()
{
  return 16;
}

__n128 sub_22BCDCEC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCDCED4()
{
  return 16;
}

__n128 sub_22BCDCEE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_22BCDCEEC(uint64_t a1, id *a2, uint64_t a3)
{
  key path getter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, (void (*)(id *, uint64_t, uint64_t))Object.subscript.getter);
}

uint64_t sub_22BCDCF08(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return key path setter for Object.subscript<A>(metadata:) : <A>ObjectA(a1, a2, a3, a4, (uint64_t (*)(char *, void **, uint64_t, uint64_t))Object.subscript.setter);
}

uint64_t sub_22BCDCF24()
{
  return 16;
}

__n128 sub_22BCDCF30(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCDCF44()
{
  return 16;
}

__n128 sub_22BCDCF50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCDCF5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimCopyTypeName();
  *a1 = result;
  return result;
}

uint64_t sub_22BCDCF88()
{
  return RIOPxrUsdPrimSetTypeName();
}

uint64_t sub_22BCDCF9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimGetSpecifier();
  *a1 = result;
  return result;
}

uint64_t sub_22BCDCFC8()
{
  return RIOPxrUsdPrimSetSpecifier();
}

uint64_t sub_22BCDCFDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Prim.propertyOrder.getter();
  *a1 = result;
  return result;
}

void sub_22BCDD004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for Prim.propertyOrder : Prim(a1, a2, a3, a4, MEMORY[0x24BE27610]);
}

uint64_t sub_22BCDD020@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimIsActive();
  *a1 = result;
  return result;
}

uint64_t sub_22BCDD04C()
{
  return RIOPxrUsdPrimSetActive();
}

uint64_t sub_22BCDD060@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Prim.appliedSchemas.getter();
  *a1 = result;
  return result;
}

void sub_22BCDD088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for Prim.propertyOrder : Prim(a1, a2, a3, a4, MEMORY[0x24BE275F8]);
}

uint64_t sub_22BCDD0A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdPrimGetTaggedAsEntity();
  *a1 = result;
  return result;
}

uint64_t sub_22BCDD0D0()
{
  return RIOPxrUsdPrimSetTaggedAsEntity();
}

uint64_t sub_22BCDD0E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Prim.childrenOrder.getter();
  *a1 = result;
  return result;
}

void sub_22BCDD10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for Prim.propertyOrder : Prim(a1, a2, a3, a4, MEMORY[0x24BE27600]);
}

uint64_t sub_22BCDD128()
{
  return Attribute.value.getter();
}

uint64_t sub_22BCDD148(uint64_t a1)
{
  return specialized Attribute.value.setter(a1);
}

uint64_t sub_22BCDD168()
{
  return 16;
}

__n128 sub_22BCDD174(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCDD180()
{
  return Attribute.subscript.getter();
}

uint64_t sub_22BCDD1A4(uint64_t a1)
{
  return specialized Attribute.subscript.setter(a1);
}

uint64_t sub_22BCDD1C8()
{
  return 16;
}

__n128 sub_22BCDD1D4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCDD1E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Relationship.targets.getter();
  *a1 = result;
  return result;
}

void sub_22BCDD208()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  Relationship.targets.setter(v0);
}

uint64_t sub_22BCDD238@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdAttributeCopyValue();
  if (!result)
    result = RIOPxrVtValueCreateEmptyValue();
  *a1 = result;
  return result;
}

uint64_t sub_22BCDD274()
{
  return RIOPxrUsdAttributeSetValue();
}

uint64_t sub_22BCDD294()
{
  return RIOPxrUsdAttributeSetValue();
}

uint64_t sub_22BCDD2AC()
{
  return 0;
}

uint64_t sub_22BCDD2BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdAttributeCopyColorSpace();
  *a1 = result;
  return result;
}

uint64_t sub_22BCDD2E8()
{
  return RIOPxrUsdAttributeSetColorSpace();
}

uint64_t sub_22BCDD2FC@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = *(uint64_t *)((char *)a1 + a2 - 8);
  v6 = *a1;
  v7 = type metadata accessor for Properties(0, *(uint64_t *)((char *)a1 + a2 - 24), a2, a3);
  return Properties.subscript.getter(v6, v7, v5, a4);
}

uint64_t sub_22BCDD358()
{
  return 24;
}

__n128 sub_22BCDD364(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCDD380()
{
  return 24;
}

__n128 sub_22BCDD38C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCDD3A0@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return keypath_get_69Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Properties.subscript.getter, a3);
}

uint64_t sub_22BCDD3AC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Properties.subscript(dynamicMember:) : <A>Properties<A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Properties.subscript.setter);
}

uint64_t sub_22BCDD3C8()
{
  return 8;
}

_QWORD *sub_22BCDD3D4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_22BCDD3E0@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return keypath_get_69Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized Properties.subscript.getter, a3);
}

uint64_t keypath_get_69Tm@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  v7 = type metadata accessor for Properties(0, *(uint64_t *)((char *)a1 + a2 - 8), a2, (uint64_t)a3);
  result = a3(v6, v7);
  *a4 = result;
  return result;
}

uint64_t sub_22BCDD440(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Properties.subscript(dynamicMember:) : <A>Properties<A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized Properties.subscript.setter);
}

uint64_t sub_22BCDD45C()
{
  return 8;
}

uint64_t sub_22BCDD468@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  return StaticTypePrim.subscript.getter(*a1, a2);
}

uint64_t sub_22BCDD48C(uint64_t a1)
{
  swift_retain();
  return specialized StaticTypePrim.subscript.setter(a1);
}

uint64_t sub_22BCDD4CC()
{
  return 16;
}

__n128 sub_22BCDD4D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCDD4E4@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return StaticTypePrim.subscript.getter(*a1, *(uint64_t *)((char *)a1 + a2 - 8), a2, a3, a4);
}

uint64_t sub_22BCDD518()
{
  return 24;
}

__n128 sub_22BCDD524(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCDD538@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return StaticTypePrim.subscript.getter(*(uint64_t **)a1, a2, *(_QWORD *)(a2 + a1 - 8), a3, *(double *)(a1 + 8));
}

uint64_t sub_22BCDD570()
{
  return 24;
}

__n128 sub_22BCDD57C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCDD590@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = StaticTypePrim.subscript.getter(*a1, (uint64_t)a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_22BCDD5BC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for StaticTypePrim.subscript(dynamicMember:) : <A>StaticTypePrim<A>A(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized StaticTypePrim.subscript.setter);
}

uint64_t sub_22BCDD5D8()
{
  return 8;
}

uint64_t sub_22BCDD5E4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = StaticTypePrim.subscript.getter(*a1, (uint64_t)a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_22BCDD610(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for StaticTypePrim.subscript(dynamicMember:) : <A>StaticTypePrim<A>A(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized StaticTypePrim.subscript.setter);
}

uint64_t sub_22BCDD62C()
{
  return 8;
}

uint64_t method lookup function for Object()
{
  return swift_lookUpClassMethod();
}

_QWORD *initializeBufferWithCopyOfBuffer for Object.Error(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for Object.Error(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for Object.Error(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **assignWithTake for Object.Error(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for Object.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Object.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Object.Error()
{
  return &type metadata for Object.Error;
}

uint64_t type metadata accessor for Property()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for Attribute()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for VariantSet()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for VariantSets()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for MaterialCollectionBinding()
{
  return objc_opt_self();
}

uint64_t method lookup function for MaterialCollectionBinding()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MaterialCollectionBinding.__allocating_init(materialBindingAPI:base:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata completion function for Properties()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Properties(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for Properties(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for Properties(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *assignWithCopy for Properties(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *initializeWithTake for Properties(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for Properties(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Properties(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_22BCDDCB0 + 4 * byte_22BD11330[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for Properties(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for StaticTypePrim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Properties(319, *(_QWORD *)(a1 + 80), a3, a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for StaticTypePrim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StaticTypePrim);
}

uint64_t method lookup function for StaticTypePrim()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StaticTypePrim.__allocating_init(prim:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of StaticTypePrim.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of StaticTypePrim.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of StaticTypePrim.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

ValueMetadata *type metadata accessor for PrimFlagsPredicate()
{
  return &type metadata for PrimFlagsPredicate;
}

ValueMetadata *type metadata accessor for PrimFlagsConjunctionPredicate()
{
  return &type metadata for PrimFlagsConjunctionPredicate;
}

ValueMetadata *type metadata accessor for PrimFlagsDisjunctionPredicate()
{
  return &type metadata for PrimFlagsDisjunctionPredicate;
}

uint64_t outlined init with copy of (URL, __REAsset)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;

  v75 = a7;
  v81 = a6;
  v73 = a2;
  v77 = a8;
  v78 = a9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityHideActionBuildOutAnimationType?);
  MEMORY[0x24BDAC7A8](v11);
  v61 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v59 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v58 - v15;
  v72 = type metadata accessor for __RKEntityActionAnimationStyle();
  v70 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v76 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for __RKEntityMoveEaseType();
  v67 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v74 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for __RKEntityMoveEase();
  v65 = *(_QWORD *)(v19 - 8);
  v66 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v71 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v69 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for __RKEntityActionSpecification();
  v79 = *(_QWORD *)(v23 - 8);
  v80 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v58 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v58 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityShowActionBuildInAnimationType?);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v58 - v36;
  if (a3 == 2003789939 && a4 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_retain();
    __RKEntityShowActionBuildInAnimationType.init(inputs:)((uint64_t)v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v37, v30, v31);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v69, v73, v64);
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v71, v75, v66);
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v74, v77, v68);
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v76, v78, v72);
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v34, v37, v31);
    __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)();
    v39 = v79;
    v38 = v80;
    (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v27, *MEMORY[0x24BDE69A0], v80);
    v40 = v81;
    v41 = *v81;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v40 = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1, v41);
      *v40 = v41;
    }
    v44 = *(_QWORD *)(v41 + 16);
    v43 = *(_QWORD *)(v41 + 24);
    if (v44 >= v43 >> 1)
    {
      v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v41);
      *v40 = v41;
    }
    *(_QWORD *)(v41 + 16) = v44 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v41+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v44, v27, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v37, v31);
  }
  else if (a3 == 1701079400 && a4 == 0xE400000000000000
         || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    swift_retain();
    v46 = v61;
    __RKEntityHideActionBuildOutAnimationType.init(inputs:)();
    v47 = v62;
    v48 = v63;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v46, 0, 1, v63);
    v49 = v60;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v60, v46, v48);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v69, v73, v64);
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v71, v75, v66);
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v74, v77, v68);
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v76, v78, v72);
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v59, v49, v48);
    v50 = v58;
    __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)();
    v52 = v79;
    v51 = v80;
    (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v50, *MEMORY[0x24BDE6998], v80);
    v53 = v81;
    v54 = *v81;
    v55 = swift_isUniquelyReferenced_nonNull_native();
    *v53 = v54;
    if ((v55 & 1) == 0)
    {
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v54 + 16) + 1, 1, v54);
      *v53 = v54;
    }
    v57 = *(_QWORD *)(v54 + 16);
    v56 = *(_QWORD *)(v54 + 24);
    if (v57 >= v56 >> 1)
    {
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1, v54);
      *v53 = v54;
    }
    *(_QWORD *)(v54 + 16) = v57 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v54+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v57, v50, v51);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v49, v48);
  }
  return result;
}

uint64_t specialized static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  char v76;

  v2 = type metadata accessor for __RKEntityGroupActionOrder();
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v67 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEaseType?);
  MEMORY[0x24BDAC7A8](v4);
  v69 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityMoveEaseType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityMoveEase?);
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for __RKEntityMoveEase();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v70 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for __RKEntityActionAnimationStyle();
  v73 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v72 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v20 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v20 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v33 = 0;
LABEL_12:
    v75 = v33;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v33, 1);
    return MEMORY[0x24BEE4AF8];
  }
  v63 = v7;
  v64 = v12;
  v21 = v11;
  v22 = v17;
  v23 = v6;
  v24 = (void *)RIOPxrUsdPrimCopyAttribute();
  v25 = RIOPxrUsdAttributeCopyValue();
  if (!v25)
  {
LABEL_11:
    v33 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v26 = (void *)v25;
  v27 = RIOPxrVtValueCopyToken();
  if (!v27)
  {

    goto LABEL_11;
  }
  v28 = (void *)v27;

  swift_release();
  v29 = (void *)RIOPxrTfTokenCopyString();
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v28, 0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v32 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v32 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  v36 = v23;
  v37 = v22;
  v38 = v21;
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v75);

  swift_release();
  v39 = v75;
  if (v76 == 1)
  {
    v74 = v75;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    v40 = v39;
LABEL_23:
    outlined consume of Result<Double, Object.Error>(v40, 1);
    return MEMORY[0x24BEE4AF8];
  }
  v41 = v19;
  v61 = v36;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v42 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v42 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v75);

  swift_release();
  v43 = v75;
  if ((v76 & 1) != 0)
  {
    v74 = v75;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    v40 = v43;
    goto LABEL_23;
  }
  swift_retain();
  __RKEntityActionAnimationStyle.init(inputs:)((uint64_t)v16);
  v60 = v39;
  v44 = v73;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v16, 0, 1, v37);
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v72, v16, v37);
  swift_retain();
  v45 = v71;
  __RKEntityMoveEase.init(inputs:)();
  v46 = v64;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v45, 0, 1, v38);
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v70, v45, v38);
  swift_retain();
  v47 = v69;
  __RKEntityMoveEaseType.init(inputs:)();
  v48 = v63;
  v49 = v61;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v47, 0, 1, v61);
  v50 = v68;
  v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v48 + 32))(v68, v47, v49);
  v75 = (void *)MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](v51);
  *(&v60 - 10) = (void *)v62;
  *(&v60 - 9) = v31;
  *(&v60 - 8) = v41;
  *(&v60 - 7) = &v75;
  *(&v60 - 6) = v60;
  *(&v60 - 5) = v43;
  *(&v60 - 4) = v52;
  *(&v60 - 3) = v50;
  v53 = v72;
  *(&v60 - 2) = v72;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:), (uint64_t)(&v60 - 12));
  swift_bridgeObjectRelease();
  v34 = (uint64_t)v75;
  if (*((_QWORD *)v75 + 2) < 2uLL)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v54 = type metadata accessor for __RKEntityActionSpecification();
    v55 = *(_QWORD *)(v54 - 8);
    v56 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_22BD0C360;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v67, *MEMORY[0x24BDE68D0], v66);
    swift_bridgeObjectRetain_n();
    v53 = v72;
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v55 + 104))(v57 + v56, *MEMORY[0x24BDE69C8], v54);
    swift_bridgeObjectRelease();
    v34 = v57;
  }
  v58 = v73;
  v59 = v70;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v61);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v59, v38);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v53, v37);
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unint64_t **)(v2 + 40), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t ObjectsChangeInfo.changedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ObjectsChangeInfo.changedInfoOnlyPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ObjectsChangeInfo.resyncedPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ObjectsChangeInfo.changedFields(_:)(id *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *v1;
  if (!*(_QWORD *)(v2 + 16))
    return MEMORY[0x24BEE4AF8];
  v3 = *a1;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = MEMORY[0x24BEE4AF8];
  }

  return v6;
}

uint64_t ObjectsChangeInfo.hasChangedFields(_:)(id *a1)
{
  uint64_t v1;
  id v2;
  char v3;
  char v4;

  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v2 = *a1;
    specialized __RawDictionaryStorage.find<A>(_:)(v2);
    v4 = v3;

  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t ObjectsChangeInfo.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v2 + 16))
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = MEMORY[0x22E2F5404](v2, &type metadata for SceneDescriptionFoundations.Path);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 32;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5 = 0x6465636E79736572;
  }
  else
  {
    v5 = 0;
  }
  v6 = (void *)0xE000000000000000;
  if (*(_QWORD *)(v1 + 16))
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = MEMORY[0x22E2F5404](v1, &type metadata for SceneDescriptionFoundations.Path);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8 = 0xD000000000000016;
    v6 = (void *)0x800000022BD0A770;
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t ObjectsChangeInfo.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t j;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t m;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t n;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ii;
  void *v38;
  uint64_t result;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  v4 = RIOPxrUsdNoticeObjectsChangedCopyStageRef();
  if (v4)
  {
    v5 = v4;
    type metadata accessor for Stage();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
  }
  else
  {
    v6 = 0;
  }
  v41 = v3;
  v7 = (void *)RIOPxrUsdNoticeObjectsChangedCopyResyncedPaths();
  v44 = 0;
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v8 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v7 = (void *)v2;
    else
      v7 = (void *)(v2 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v42 = v6;
    if (v9)
      goto LABEL_6;
LABEL_22:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    goto LABEL_23;
  }
  v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v42 = v6;
  if (!v9)
    goto LABEL_22;
LABEL_6:
  v44 = v2;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  v10 = v44;
  if ((v2 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v9; ++i)
    {
      v12 = MEMORY[0x22E2F57B8](i, v2);
      v44 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v10 = v44;
      }
      *(_QWORD *)(v10 + 16) = v14 + 1;
      *(_QWORD *)(v10 + 8 * v14 + 32) = v12;
    }
  }
  else
  {
    for (j = 0; j != v9; ++j)
    {
      v16 = *(void **)(v8 + 8 * j + 32);
      v44 = v10;
      v18 = *(_QWORD *)(v10 + 16);
      v17 = *(_QWORD *)(v10 + 24);
      v19 = v16;
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v10 = v44;
      }
      *(_QWORD *)(v10 + 16) = v18 + 1;
      *(_QWORD *)(v10 + 8 * v18 + 32) = v19;
    }
  }
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x24BEE4AF8];
LABEL_23:
  swift_bridgeObjectRetain();
  v7 = (void *)RIOPxrUsdNoticeObjectsChangedCopyChangedInfoOnlyPaths();
  v44 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v20 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v7 = (void *)v2;
    else
      v7 = (void *)(v2 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21)
    {
LABEL_25:
      v44 = v2;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
      if ((v21 & 0x8000000000000000) == 0)
      {
        v22 = v44;
        if ((v2 & 0xC000000000000001) != 0)
        {
          for (k = 0; k != v21; ++k)
          {
            v24 = MEMORY[0x22E2F57B8](k, v20);
            v44 = v22;
            v26 = *(_QWORD *)(v22 + 16);
            v25 = *(_QWORD *)(v22 + 24);
            if (v26 >= v25 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
              v22 = v44;
            }
            *(_QWORD *)(v22 + 16) = v26 + 1;
            *(_QWORD *)(v22 + 8 * v26 + 32) = v24;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v40 = a1;
          for (m = 0; m != v21; ++m)
          {
            v28 = *(void **)(v20 + 8 * m + 32);
            v44 = v22;
            v30 = *(_QWORD *)(v22 + 16);
            v29 = *(_QWORD *)(v22 + 24);
            v31 = v28;
            if (v30 >= v29 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
              v22 = v44;
            }
            *(_QWORD *)(v22 + 16) = v30 + 1;
            *(_QWORD *)(v22 + 8 * v30 + 32) = v31;
          }
          swift_bridgeObjectRelease();
          a1 = v40;
        }
        goto LABEL_42;
      }
LABEL_54:
      __break(1u);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      __break(1u);
      swift_bridgeObjectRelease();

      result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
  }
  else
  {
    v21 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
      goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  v22 = MEMORY[0x24BEE4AF8];
LABEL_42:
  v44 = v41;
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (n = 0; n != v32; ++n)
    {
      v43 = *(void **)(v10 + 8 * n + 32);
      v34 = v43;
      closure #1 in ObjectsChangeInfo.init(_:)(&v44, &v43);

    }
    swift_bridgeObjectRelease_n();
    v35 = v44;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35 = v41;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = v35;
  v36 = *(_QWORD *)(v22 + 16);
  if (v36)
  {
    swift_bridgeObjectRetain();
    for (ii = 0; ii != v36; ++ii)
    {
      v43 = *(void **)(v22 + 8 * ii + 32);
      v38 = v43;
      closure #1 in ObjectsChangeInfo.init(_:)(&v44, &v43);

    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    v35 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  *a1 = v35;
  a1[1] = v22;
  a1[2] = v10;
  a1[3] = v42;
  return result;
}

uint64_t closure #1 in ObjectsChangeInfo.init(_:)(uint64_t *a1, void **a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t k;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t m;
  unint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t j;
  unint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  char v46;
  char isUniquelyReferenced_nonNull_native;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = *a2;
  if ((RIOPxrSdfPathIsPropertyPath() & 1) == 0 && !RIOPxrSdfPathIsNamespacedPropertyPath())
  {
    v19 = v3;
    v26 = (void *)RIOPxrUsdNoticeObjectsChangedCopyChangedFields();
    type metadata accessor for RIOPxrTfTokenRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v16 = MEMORY[0x24BEE4AF8];
    if (!(MEMORY[0x24BEE4AF8] >> 62))
    {
      v27 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v27)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        v29 = MEMORY[0x24BEE4AF8];
        goto LABEL_41;
      }
LABEL_14:
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 & ~(v27 >> 63), 0);
      if (v27 < 0)
      {
        __break(1u);
        return result;
      }
      v49 = v19;
      v29 = (uint64_t)v18;
      if ((v16 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v27; ++i)
        {
          v31 = MEMORY[0x22E2F57B8](i, v16);
          v33 = *(_QWORD *)(v29 + 16);
          v32 = *(_QWORD *)(v29 + 24);
          if (v33 >= v32 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          *(_QWORD *)(v29 + 16) = v33 + 1;
          *(_QWORD *)(v29 + 8 * v33 + 32) = v31;
        }
      }
      else
      {
        for (j = 0; j != v27; ++j)
        {
          v40 = v18[2];
          v39 = v18[3];
          v41 = *(id *)(v16 + 8 * j + 32);
          if (v40 >= v39 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          v18[2] = v40 + 1;
          v18[v40 + 4] = v41;
        }
      }
      swift_bridgeObjectRelease();
      v19 = v49;
LABEL_41:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = *a1;
      *a1 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, (void *)v19, isUniquelyReferenced_nonNull_native);
      *a1 = v51;

      return swift_bridgeObjectRelease();
    }
LABEL_39:
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v27)
      goto LABEL_40;
    goto LABEL_14;
  }
  v4 = RIOPxrSdfPathCopyPrimPath();
  v5 = (void *)RIOPxrSdfPathCopyElementString();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = specialized Collection.dropFirst(_:)(1uLL, v6, v8);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = MEMORY[0x22E2F52FC](v9, v11, v13, v15);
  swift_bridgeObjectRelease();
  v48 = (void *)v4;
  v17 = (void *)RIOPxrUsdNoticeObjectsChangedCopyChangedFields();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v19 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
      goto LABEL_5;
  }
  else
  {
    v20 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_5:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
      if ((v20 & 0x8000000000000000) == 0)
      {
        v21 = v18;
        if ((v19 & 0xC000000000000001) != 0)
        {
          for (k = 0; k != v20; ++k)
          {
            v23 = MEMORY[0x22E2F57B8](k, v19);
            v25 = v21[2];
            v24 = v21[3];
            if (v25 >= v24 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
            v21[2] = v25 + 1;
            v21[v25 + 4] = v23;
          }
        }
        else
        {
          for (m = 0; m != v20; ++m)
          {
            v36 = v18[2];
            v35 = v18[3];
            v37 = *(id *)(v19 + 8 * m + 32);
            if (v36 >= v35 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v18[2] = v36 + 1;
            v18[v36 + 4] = v37;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      __break(1u);
      goto LABEL_39;
    }
  }
  swift_bridgeObjectRelease();
  v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_33:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v42 = RIOPxrTfTokenCreateWithCString();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  v44 = v21[2];
  v43 = v21[3];
  if (v44 >= v43 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v21);
  v21[2] = v44 + 1;
  v21[v44 + 4] = v42;
  v45 = v48;
  v46 = swift_isUniquelyReferenced_nonNull_native();
  v50 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v21, v45, v46);
  *a1 = v50;

  return swift_bridgeObjectRelease();
}

uint64_t ObjectsChangeInfo.stage.getter()
{
  return swift_retain();
}

uint64_t destroy for ObjectsChangeInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for ObjectsChangeInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ObjectsChangeInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ObjectsChangeInfo(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectsChangeInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectsChangeInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectsChangeInfo()
{
  return &type metadata for ObjectsChangeInfo;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

_QWORD *NamedPropertyDirtyState.__allocating_init(propertyName:)(void **a1)
{
  void *v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  id v5;

  v1 = *a1;
  type metadata accessor for NamedPropertyDirtyState();
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = v1;
  v3 = v1;
  v4 = MEMORY[0x24BEE4B08];
  v5 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v3, MEMORY[0x24BEE4B08]);

  v2[2] = v4;
  v2[3] = v5;
  return v2;
}

uint64_t PropertyDirtyState.propertyMetadataContainsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 144))(a1, 0);
}

uint64_t PropertyDirtyState.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static PropertyDirtyState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a2) & 1;
}

uint64_t PropertyDirtyState.isEqual(to:)(uint64_t a1)
{
  uint64_t v1;

  return specialized static Set.== infix(_:_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(a1 + 16));
}

uint64_t PropertyDirtyState.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PropertyDirtyState.Type);
  v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v1._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0xD000000000000020;
  v3._object = (void *)0x800000022BD0A790;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:core:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Class isa;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  if (!a2)
  {
    v5 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d105IO22TypeNamePrimDirtyStateC04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16fg2O5h88VG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13DescriptorRefaSgtcfc12generateCoreL_AQyFSo08I60TftX0aAKcfu_33_1208ebe0c1611b0e36169838b3b02464AkUTf3nnnpk_nTf1cn_n(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrTfTokenRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a2 = RIOBuilderDirtyPropertyDescriptorCreateWithMetadataDescriptors();

  }
  *(_QWORD *)(v4 + 24) = a2;
  return v4;
}

uint64_t PropertyDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t j;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;

  v2 = v1;
  v4 = (void *)MEMORY[0x22E2F6370]();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v18 = specialized Set.init<A>(_:)(v9);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 144))(v18, a1);
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v11 = MEMORY[0x22E2F57B8](i, v6);
        v13 = *(_QWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 24);
        if (v13 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        *(_QWORD *)(v9 + 16) = v13 + 1;
        *(_QWORD *)(v9 + 8 * v13 + 32) = v11;
      }
    }
    else
    {
      for (j = 0; j != v7; ++j)
      {
        v15 = *(_QWORD *)(v5 + 16);
        v16 = *(_QWORD *)(v5 + 24);
        v17 = *(id *)(v6 + 8 * j + 32);
        if (v15 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
        *(_QWORD *)(v5 + 16) = v15 + 1;
        *(_QWORD *)(v5 + 8 * v15 + 32) = v17;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t PropertyDirtyState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t PropertyDirtyState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int PropertyDirtyState.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 120))(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PropertyDirtyState()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 120))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PropertyDirtyState()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PropertyDirtyState()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 120))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertyDirtyState()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PropertyDirtyState(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*a2) & 1;
}

id NamedPropertyDirtyState.propertyName.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 32);
  *a1 = v2;
  return v2;
}

_QWORD *NamedPropertyDirtyState.__allocating_init(propertyName:propertyMetadataContainsAnyOf:)(void **a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  id v5;
  id v6;

  v3 = *a1;
  type metadata accessor for NamedPropertyDirtyState();
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = v3;
  v5 = v3;
  v6 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v5, a2);

  v4[2] = a2;
  v4[3] = v6;
  return v4;
}

uint64_t type metadata accessor for NamedPropertyDirtyState()
{
  return objc_opt_self();
}

uint64_t NamedPropertyDirtyState.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;

  v3 = *(void **)(v1 + 32);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v4 = v3;
  _CFObject.hash(into:)();

  v5 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t NamedPropertyDirtyState.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = v0;
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = v2;
    v4 = *(void **)(v0 + 32);
    v5 = *(void **)(v2 + 32);
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    swift_retain();
    v6 = v4;
    v7 = v5;
    v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v1 + 16);
      v10 = *(_QWORD *)(v3 + 16);
      swift_bridgeObjectRetain();
      v11 = specialized static Set.== infix(_:_:)(v9, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = 0;
    }
    swift_release();
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t NamedPropertyDirtyState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NamedPropertyDirtyState.Type);
  v1 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v2 = *(id *)(v0 + 32);
  v3 = (void *)RIOPxrTfTokenCopyString();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x747265706F727028;
  v9._object = (void *)0xEF203A656D614E79;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v10._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 0xD00000000000001FLL;
  v12._object = (void *)0x800000022BD0A7C0;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

id generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(void *a1, void *a2, uint64_t a3)
{
  id result;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  id v15;
  Class isa;
  uint64_t v17;

  if (a1)
    return a1;
  v5 = a2;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = a2;
    specialized ContiguousArray.reserveCapacity(_:)();
    result = (id)specialized Set.startIndex.getter(a3);
    v8 = (uint64_t)result;
    v10 = v9;
    v12 = v11 & 1;
    while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(a3 + 32))
    {
      if (((*(_QWORD *)(a3 + 56 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(a3 + 36) != (_DWORD)v10)
        goto LABEL_15;
      RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      result = (id)specialized _NativeSet.index(after:)(v8, v10, v12 & 1, a3);
      v8 = (uint64_t)result;
      v10 = v13;
      v12 = v14 & 1;
      if (!--v6)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant((uint64_t)result, v13, v14 & 1);
        v5 = a2;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    v15 = a2;
LABEL_12:
    type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v17 = RIOBuilderAnyValueDirtyPropertyDescriptorCreateWithNameAndMetadataDescriptors();

    return (id)v17;
  }
  return result;
}

void NamedPropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:core:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void NamedPropertyDirtyState.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t NamedPropertyDirtyState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t NamedPropertyDirtyState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t NamespacedPropertyDirtyState.propertyNamespace.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *NamespacedPropertyDirtyState.__allocating_init(propertyNamespace:propertyMetadataContainsAnyOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  id v7;

  type metadata accessor for NamespacedPropertyDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = a1;
  v6[5] = a2;
  swift_bridgeObjectRetain();
  v7 = generateCore #1 () in NamespacedPropertyDirtyState.init(propertyNamespace:propertyMetadataContainsAnyOf:core:)(0, a1, a2, a3);
  swift_bridgeObjectRelease();
  v6[2] = a3;
  v6[3] = v7;
  return v6;
}

uint64_t NamespacedPropertyDirtyState.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t NamespacedPropertyDirtyState.isEqual(to:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_dynamicCastClass();
  if (!v1)
    return 0;
  v2 = v1;
  v3 = v0[4] == *(_QWORD *)(v1 + 32) && v0[5] == *(_QWORD *)(v1 + 40);
  if (!v3 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  v4 = v0[2];
  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v4) = specialized static Set.== infix(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return v4 & 1;
}

uint64_t NamespacedPropertyDirtyState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NamespacedPropertyDirtyState.Type);
  v1 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x800000022BD0A7E0;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v7._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0xD000000000000020;
  v9._object = (void *)0x800000022BD0A800;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

id generateCore #1 () in NamespacedPropertyDirtyState.init(propertyNamespace:propertyMetadataContainsAnyOf:core:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  Class isa;
  uint64_t v17;
  void *v18;

  if (a1)
    return a1;
  v6 = MEMORY[0x22E2F5278](a2, a3);
  v7 = (void *)v6;
  v8 = *(_QWORD *)(a4 + 16);
  if (v8)
  {
    v18 = (void *)v6;
    specialized ContiguousArray.reserveCapacity(_:)();
    result = (id)specialized Set.startIndex.getter(a4);
    v9 = (uint64_t)result;
    v11 = v10;
    v13 = v12 & 1;
    while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(a4 + 32))
    {
      if (((*(_QWORD *)(a4 + 56 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_13;
      if (*(_DWORD *)(a4 + 36) != (_DWORD)v11)
        goto LABEL_14;
      RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      result = (id)specialized _NativeSet.index(after:)(v9, v11, v13 & 1, a4);
      v9 = (uint64_t)result;
      v11 = v14;
      v13 = v15 & 1;
      if (!--v8)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant((uint64_t)result, v14, v15 & 1);
        v7 = v18;
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_11:
    type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v17 = RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCreateWithNamespacePrefixAndMetadataDescriptors();

    return (id)v17;
  }
  return result;
}

void NamespacedPropertyDirtyState.__allocating_init(propertyMetadataContainsAnyOf:core:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NamespacedPropertyDirtyState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NamespacedPropertyDirtyState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NamespacedPropertyDirtyState()
{
  return objc_opt_self();
}

uint64_t base witness table accessor for Equatable in PropertyDirtyState(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, a2, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDirtyState, (uint64_t)&protocol conformance descriptor for PropertyDirtyState);
}

uint64_t type metadata accessor for PropertyDirtyState()
{
  return objc_opt_self();
}

uint64_t method lookup function for PropertyDirtyState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PropertyDirtyState.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PropertyDirtyState.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PropertyDirtyState.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t method lookup function for NamedPropertyDirtyState()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for NamespacedPropertyDirtyState()
{
  return swift_lookUpClassMethod();
}

_QWORD *specialized NamedPropertyDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t j;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = RIOBuilderAnyValueDirtyPropertyDescriptorCopyName();
  v3 = (void *)MEMORY[0x22E2F61D8](a1);
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v4 = MEMORY[0x24BEE4AF8];
  v5 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v6 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v17 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for NamedPropertyDirtyState();
    result = (_QWORD *)swift_allocObject();
    result[3] = a1;
    result[4] = v2;
    result[2] = v17;
    return result;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_16;
LABEL_3:
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = v4;
    if ((v5 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v6; ++i)
      {
        MEMORY[0x22E2F57B8](i, v5);
        v10 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        v12 = *(_QWORD *)(v8 + 16);
        v11 = *(_QWORD *)(v8 + 24);
        if (v12 >= v11 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        *(_QWORD *)(v8 + 16) = v12 + 1;
        *(_QWORD *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (j = 0; j != v6; ++j)
      {
        v14 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        v16 = *(_QWORD *)(v8 + 16);
        v15 = *(_QWORD *)(v8 + 24);
        if (v16 >= v15 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        *(_QWORD *)(v8 + 16) = v16 + 1;
        *(_QWORD *)(v8 + 8 * v16 + 32) = v14;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

Swift::String *specialized NamespacedPropertyDirtyState.__allocating_init(core:)(void *a1)
{
  void *v2;
  Swift::String v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String *result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t j;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = (void *)RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyNamespacePrefix();
  v3 = String.init(_:)(v2);
  v4 = (void *)MEMORY[0x22E2F61FC](a1);
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v18 = specialized Set.init<A>(_:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for NamespacedPropertyDirtyState();
    result = (Swift::String *)swift_allocObject();
    result[2] = v3;
    result[1]._countAndFlagsBits = v18;
    result[1]._object = a1;
    return result;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_16;
LABEL_3:
  result = (Swift::String *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        MEMORY[0x22E2F57B8](i, v6);
        v11 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        v13 = *(_QWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 24);
        if (v13 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        *(_QWORD *)(v9 + 16) = v13 + 1;
        *(_QWORD *)(v9 + 8 * v13 + 32) = v11;
      }
    }
    else
    {
      for (j = 0; j != v7; ++j)
      {
        v15 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        v17 = *(_QWORD *)(v9 + 16);
        v16 = *(_QWORD *)(v9 + 24);
        if (v17 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        *(_QWORD *)(v9 + 16) = v17 + 1;
        *(_QWORD *)(v9 + 8 * v17 + 32) = v15;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized Prim.attributeValue<A>(of:type:)()
{
  void *v0;
  uint64_t v1;
  void *v2;

  if (RIOPxrUsdPrimHasAttribute())
  {
    v0 = (void *)RIOPxrUsdPrimCopyAttribute();
    v1 = RIOPxrUsdAttributeCopyValue();
    if (v1)
    {
      v2 = (void *)v1;
      RIOPxrVtValueGetFloat3();

      return 0;
    }

  }
  return 0;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Bool;

  if (!RIOPxrUsdPrimHasAttribute())
    return 2;
  v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 2;
  }
  v2 = (void *)v1;
  Bool = RIOPxrVtValueGetBool();

  if (Bool)
    return 0;
  else
    return 2;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Float2;

  if (!RIOPxrUsdPrimHasAttribute())
    return 0;
  v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  v2 = (void *)v1;
  Float2 = RIOPxrVtValueGetFloat2();

  if (Float2)
    return 0;
  else
    return 0;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (!RIOPxrUsdPrimHasAttribute())
    return 0;
  v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  v2 = (void *)v1;
  v3 = RIOPxrVtValueCopyString();
  if (!v3)
  {

    return 0;
  }
  v4 = (void *)v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Double;

  if (!RIOPxrUsdPrimHasAttribute())
    return 0;
  v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  v2 = (void *)v1;
  Double = RIOPxrVtValueGetDouble();

  if (Double)
    return 0;
  else
    return 0;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  int Int32;

  if (!RIOPxrUsdPrimHasAttribute())
    return 0;
  v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

    return 0;
  }
  v2 = (void *)v1;
  Int32 = RIOPxrVtValueGetInt32();

  if (Int32)
    return 0;
  else
    return 0;
}

{
  void *v0;
  uint64_t v1;
  void *v2;

  if (RIOPxrUsdPrimHasAttribute())
  {
    v0 = (void *)RIOPxrUsdPrimCopyAttribute();
    v1 = RIOPxrUsdAttributeCopyValue();
    if (v1)
    {
      v2 = (void *)v1;
      RIOPxrVtValueGetQuatf();

      return 0;
    }

  }
  return 0;
}

unint64_t specialized Prim.attributeValue<A>(of:type:)()
{
  void *v0;
  uint64_t v1;
  void *v2;
  char Float;
  unsigned __int8 v4;

  if (!RIOPxrUsdPrimHasAttribute())
    goto LABEL_5;
  v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

LABEL_5:
    v4 = 1;
    return (unint64_t)v4 << 32;
  }
  v2 = (void *)v1;
  Float = RIOPxrVtValueGetFloat();

  v4 = Float ^ 1;
  return (unint64_t)v4 << 32;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char Int32;
  unsigned __int8 v4;

  if (!RIOPxrUsdPrimHasAttribute())
    goto LABEL_5;
  v0 = (void *)RIOPxrUsdPrimCopyAttribute();
  v1 = RIOPxrUsdAttributeCopyValue();
  if (!v1)
  {

LABEL_5:
    v4 = 1;
    return (unint64_t)v4 << 32;
  }
  v2 = (void *)v1;
  Int32 = RIOPxrVtValueGetInt32();

  v4 = Int32 ^ 1;
  return (unint64_t)v4 << 32;
}

void specialized Prim.attributeValue<A>(of:type:)(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  void *v4;
  char Double3;
  char v6;

  if (!RIOPxrUsdPrimHasAttribute())
    goto LABEL_5;
  v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3)
  {

LABEL_5:
    v6 = 1;
    goto LABEL_6;
  }
  v4 = (void *)v3;
  Double3 = RIOPxrVtValueGetDouble3();

  v6 = Double3 ^ 1;
LABEL_6:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v6;
}

void specialized Builder.addComponent<A>(component:)(uint64_t a1)
{
  specialized Builder.addComponent<A>(component:)(a1, (void (*)(_QWORD, double))MEMORY[0x24BDE6868]);
}

{
  specialized Builder.addComponent<A>(component:)(a1, (void (*)(_QWORD, double))MEMORY[0x24BDE6840]);
}

{
  specialized Builder.addComponent<A>(component:)(a1, (void (*)(_QWORD, double))MEMORY[0x24BDE7C90]);
}

{
  specialized Builder.addComponent<A>(component:)(a1, (void (*)(_QWORD, double))MEMORY[0x24BDE65F8]);
}

{
  specialized Builder.addComponent<A>(component:)(a1, (void (*)(_QWORD, double))MEMORY[0x24BDE65E0]);
}

void specialized Builder.addComponent<A>(component:)(uint64_t a1, void (*a2)(_QWORD, double))
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;

  v4 = type metadata accessor for __ComponentTypeRef();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(0, v6);
  dispatch thunk of static Component.__coreComponentType.getter();
  type metadata accessor for REComponentType(0);
  __ComponentTypeRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (REComponentClassFromType())
  {
    swift_beginAccess();
    v9 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.CoreReference);
    swift_endAccess();
    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(&v12, &v13);
      type metadata accessor for RIOBuilderRef(0);
      swift_dynamicCast();
      v10 = (void *)v11[1];
      RIOBuilderAddComponentByClass();

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t one-time initialization function for modelSortComponent()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.modelSortComponent = result;
  return result;
}

id one-time initialization function for priorityAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ModelSortGroupComponentBuilder.priorityAttributeName = (uint64_t)result;
  return result;
}

uint64_t ModelSortGroupComponentBuilder.inputDescriptors()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[6];
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD v17[6];
  char v18;

  v1 = *v0;
  v9 = MEMORY[0x24BEE4B08];
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = specialized closure #2 in ModelSortGroupComponentBuilder.inputDescriptors();
  v2[3] = 0;
  v2[4] = closure #1 in ImageBasedLightReceiverBuilder.inputDescriptors();
  v2[5] = 0;
  v2[6] = v1;
  v17[0] = 0xD000000000000018;
  v17[1] = 0x800000022BD0AA50;
  v17[2] = 0xD000000000000014;
  v17[3] = 0x800000022BD06D50;
  v17[4] = partial apply for closure #3 in ModelSortGroupComponentBuilder.inputDescriptors();
  v17[5] = v2;
  v18 = -127;
  swift_retain();
  specialized Set._Variant.insert(_:)((uint64_t)&v10, (uint64_t)v17);
  outlined consume of InputDescriptor(v10, v11, v12, v13, v14, v15, v16);
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v4 = static EntityBuilder.OutputName;
  v3 = *(_QWORD *)algn_255BED398;
  v5 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v5 != -1)
    swift_once();
  v10 = v4;
  v11 = v3;
  v12 = static EntityBuilder.OutputIdentifier;
  v13 = *(_QWORD *)algn_255BFA2C8;
  v14 = 0;
  v15 = 0;
  v16 = 112;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v7, (uint64_t)&v10);
  swift_release();
  outlined consume of InputDescriptor(v7[0], v7[1], v7[2], v7[3], (void *)v7[4], v7[5], v8);
  return v9;
}

uint64_t closure #3 in ModelSortGroupComponentBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v11 = *a2;
  v6 = a3(a1, &v11);
  if (!v6)
    return MEMORY[0x24BEE4B08];
  v7 = v6;
  swift_bridgeObjectRelease();
  if (one-time initialization token for entityRelationshipName != -1)
    swift_once();
  v11 = static ModelSortGroupComponentBuilder.entityRelationshipName;
  v8 = (id)static ModelSortGroupComponentBuilder.entityRelationshipName;
  v9 = a5(&v11, v7);

  swift_release();
  return v9;
}

uint64_t ModelSortGroupComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];
  _QWORD aBlock[6];

  v2 = *v1;
  v7[2] = a1;
  v7[4] = v2;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in ModelSortGroupComponentBuilder.run(inputs:);
  *(_QWORD *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_20;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in ModelSortGroupComponentBuilder.run(inputs:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(__int128 *, _QWORD);
  void *v44;
  id v45;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _BYTE *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v67 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroupComponent?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModelSortGroupComponent();
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModelSortGroup();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v66 = (char *)&v59 - v15;
  Inputs.prim.getter();
  v16 = (void *)RIOPxrUsdObjectCopyName();
  v17 = (void *)RIOPxrTfTokenCopyString();
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  if (one-time initialization token for infoID != -1)
    swift_once();
  v20 = (id)static ModelSortGroupComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_31:
    ModelSortGroupComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  v61 = v11;
  v21 = (void *)RIOPxrUsdPrimCopyAttribute();
  v22 = RIOPxrUsdAttributeCopyValue();
  if (!v22)
  {
    swift_bridgeObjectRelease();

    goto LABEL_31;
  }
  v23 = (void *)v22;
  v60 = v10;
  v24 = RIOPxrVtValueCopyToken();
  if (!v24)
  {
    swift_bridgeObjectRelease();

    goto LABEL_31;
  }
  v25 = (void *)v24;

  v26 = (void *)RIOPxrTfTokenCopyString();
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;

  if (v27 == 0xD000000000000016 && v29 == 0x800000022BD0AA30)
  {
    swift_bridgeObjectRelease();
    v30 = v61;
    goto LABEL_13;
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v30 = v61;
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_13:
  Inputs.subscript.getter(0xD000000000000018, 0x800000022BD0AA50, &v69);
  if (!v70)
  {
    outlined destroy of Any?((uint64_t)&v69, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v9, 1, 1, v60);
    goto LABEL_29;
  }
  v32 = v60;
  v33 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v9, v33 ^ 1u, 1, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v9, 1, v32) == 1)
  {
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for ModelSortGroup?);
  }
  v34 = v66;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v66, v9, v32);
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for modelSortComponent != -1)
        swift_once();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_22BD0C5C0;
      v49 = (void *)RIOPxrUsdObjectCopyPath();
      v50 = (void *)RIOPxrSdfPathCopyString();
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v53 = v52;

      v54 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v48 + 56) = MEMORY[0x24BEE0D00];
      v55 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v48 + 32) = v51;
      *(_QWORD *)(v48 + 40) = v53;
      *(_QWORD *)(v48 + 96) = v54;
      *(_QWORD *)(v48 + 104) = v55;
      v56 = v65;
      *(_QWORD *)(v48 + 64) = v55;
      *(_QWORD *)(v48 + 72) = v56;
      *(_QWORD *)(v48 + 80) = v19;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v66, v60);
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v36 = static EntityBuilder.OutputName;
  v35 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v36, v35, &v69);
  if (!v70)
  {
    outlined destroy of Any?((uint64_t)&v69, &demangling cache variable for type metadata for Any?);
    goto LABEL_37;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    v57 = v60;
    if (one-time initialization token for modelSortComponent != -1)
      swift_once();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v58 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v58 + 32) = v65;
    *(_QWORD *)(v58 + 40) = v19;
    os_log(_:dso:log:type:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v66, v57);
  }
  v37 = v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((RIOPxrUsdPrimIsActive() & 1) != 0)
  {
    v65 = v37;
    v67[17] = 1;
    Inputs.prim.getter();
    if (one-time initialization token for priorityAttributeName != -1)
      swift_once();
    v38 = (id)static ModelSortGroupComponentBuilder.priorityAttributeName;
    specialized Prim.attributeValue<A>(of:type:)();

    swift_release();
    if (specialized ModelSortGroupComponentBuilder.targetEntity(for:prim:)())
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v13, v66, v60);
      v39 = (uint64_t)v62;
      ModelSortGroupComponent.init(group:order:)();
      v41 = v63;
      v40 = v64;
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v42(v4, v39, v64);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v4, 0, 1, v40);
      v43 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v43(&v69, 0);
      v44 = v67;
      specialized Builder.addComponent<A>(component:)(v39, (void (*)(_QWORD, double))MEMORY[0x24BDE7BE8]);
      swift_beginAccess();
      v45 = objc_getAssociatedObject(v44, &static BuilderAssociatedKeys.OutputsReference);
      result = swift_endAccess();
      if (v45)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        outlined init with take of Any(&v68, &v69);
        type metadata accessor for Outputs();
        swift_dynamicCast();
        v70 = v40;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v69);
        v42((char *)boxed_opaque_existential_1, v39, v40);
        Outputs.subscript.setter((uint64_t)&v69, 0xD000000000000024, 0x800000022BD06DE0);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
        return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v66, v60);
      }
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v66, v60);
      swift_release();
      return swift_release();
    }
  }
  else
  {
    ModelSortGroupComponentBuilder.clear(inputs:)();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v60);
  }
  return result;
}

uint64_t ModelSortGroupComponentBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(__int128 *, _QWORD);
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroupComponent?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v4 = static EntityBuilder.OutputName;
  v5 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v4, v5, &v11);
  if (!v12)
  {
    outlined destroy of Any?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 17) & 1) == 0)
    return swift_release();
  Inputs.prim.getter();
  v6 = specialized ModelSortGroupComponentBuilder.targetEntity(for:prim:)();
  swift_release();
  if (!v6)
    return swift_release();
  v7 = type metadata accessor for ModelSortGroupComponent();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  v8 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v8(&v11, 0);
  swift_release();
  result = swift_release();
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

uint64_t type metadata accessor for ModelSortGroupComponentBuilder()
{
  return objc_opt_self();
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance ModelSortGroupComponentBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v5;

  v0 = specialized closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v5 = inited;
  specialized Array._endMutation()();
  v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupComponentBuilder()
{
  uint64_t v0;

  v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupComponentBuilder);
  swift_arrayDestroy();
  return v0;
}

uint64_t specialized closure #2 in ModelSortGroupComponentBuilder.inputDescriptors()()
{
  id v0;
  uint64_t PrimIfNeeded;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;

  if (!RIOPxrUsdStageHasPrimAtPrimPath())
    return 0;
  v0 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = PrimIfNeeded;
  if (one-time initialization token for infoID != -1)
    swift_once();
  v3 = (id)static ModelSortGroupComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  v4 = (void *)RIOPxrUsdPrimCopyAttribute();
  v5 = RIOPxrUsdAttributeCopyValue();
  if (!v5)
  {
    swift_release();

    return 0;
  }
  v6 = (void *)v5;
  v7 = RIOPxrVtValueCopyToken();
  if (!v7)
  {
    swift_release();

    return 0;
  }
  v8 = (void *)v7;

  v9 = v8;
  v10 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized closure #1 in closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter()
{
  void *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t inited;
  uint64_t v11;
  unint64_t v13;

  if (one-time initialization token for entityRelationshipName != -1)
    swift_once();
  v0 = (void *)static ModelSortGroupComponentBuilder.entityRelationshipName;
  type metadata accessor for NamedPropertyDirtyState();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = v0;
  v3 = MEMORY[0x24BEE4B08];
  v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x24BEE4B08]);

  v1[2] = v3;
  v1[3] = v4;
  v5 = one-time initialization token for priorityAttributeName;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = (void *)static ModelSortGroupComponentBuilder.priorityAttributeName;
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = v6;
  v8 = v6;
  v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  v7[2] = v3;
  v7[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C650;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v7;
  v13 = inited;
  specialized Array._endMutation()();
  v11 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t specialized closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  if (one-time initialization token for realityKitComponentTypeName != -1)
    swift_once();
  v0 = (void *)static ModelSortGroupComponentBuilder.realityKitComponentTypeName;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v0;
  v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = specialized closure #1 in closure #1 in ModelSortGroupComponentBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE4B08];
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v9 + 32) = v6;
  v12 = v9;
  specialized Array._endMutation()();
  v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v12);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized ModelSortGroupComponentBuilder.targetEntity(for:prim:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  char v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char v31;
  void *v32;
  id v33;
  id v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  id v41;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Entity.ChildCollection();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)v42 - v7;
  v8 = type metadata accessor for __EntityRef();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Entity();
  v13 = MEMORY[0x24BEE27D0];
  __AssetRef.__as<A>(_:)();
  v48[3] = v13;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
  v42[1] = v12;
  v14 = static Entity.__fromCore(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token?>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C760;
  v16 = (_QWORD *)(inited + 32);
  if (String.count.getter() < 1)
    v17 = (id)RIOPxrTfTokenEmpty();
  else
    v17 = (id)RIOPxrTfTokenCreateWithCString();
  *v16 = v17;
  if (String.count.getter() < 1)
    v18 = (id)RIOPxrTfTokenEmpty();
  else
    v18 = (id)RIOPxrTfTokenCreateWithCString();
  *(_QWORD *)(inited + 40) = v18;
  if (String.count.getter() < 1)
    v19 = (id)RIOPxrTfTokenEmpty();
  else
    v19 = (id)RIOPxrTfTokenCreateWithCString();
  *(_QWORD *)(inited + 48) = v19;
  if (Prim.parent.getter())
  {
    v20 = (void *)RIOPxrUsdPrimCopyTypeName();
    swift_release();
  }
  else
  {
    v20 = 0;
  }
  v21 = *(void **)(inited + 32);
  swift_bridgeObjectRetain();
  v44 = v1;
  if (v21)
  {
    if (v20)
    {
      v42[0] = inited + 32;
      v22 = v14;
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
      v23 = v21;
      v24 = v20;
      v25 = static _CFObject.== infix(_:_:)();

      if ((v25 & 1) != 0)
        goto LABEL_33;
      v26 = *(void **)(inited + 40);
      if (!v26)
      {
        v27 = 0;
        v14 = v22;
        v16 = (_QWORD *)v42[0];
        goto LABEL_30;
      }
LABEL_24:
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
      v29 = v26;
      v30 = v20;
      v31 = static _CFObject.== infix(_:_:)();

      if ((v31 & 1) == 0)
      {
        v32 = *(void **)(inited + 48);
        if (v32)
          goto LABEL_32;
        goto LABEL_44;
      }
LABEL_33:

      v14 = v22;
      goto LABEL_34;
    }
    v28 = v21;
  }
  else
  {
    if (!v20)
      goto LABEL_34;
    v28 = 0;
  }

  v26 = *(void **)(inited + 40);
  if (v26)
  {
    if (v20)
    {
      v42[0] = inited + 32;
      v22 = v14;
      goto LABEL_24;
    }
    v27 = v26;
  }
  else
  {
    if (!v20)
      goto LABEL_34;
    v27 = 0;
  }
LABEL_30:

  v32 = *(void **)(inited + 48);
  if (v32)
  {
    v42[0] = v16;
    v22 = v14;
    if (v20)
    {
LABEL_32:
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
      v33 = v32;
      v34 = v20;
      v35 = static _CFObject.== infix(_:_:)();

      if ((v35 & 1) != 0)
        goto LABEL_33;
LABEL_47:

      swift_bridgeObjectRelease();
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolsFoundations.Token?);
      swift_arrayDestroy();
      return v22;
    }
    v41 = v32;
LABEL_46:

    goto LABEL_47;
  }
  if (v20)
  {
    v42[0] = v16;
    v22 = v14;
LABEL_44:
    v41 = 0;
    goto LABEL_46;
  }
LABEL_34:
  swift_bridgeObjectRelease_n();
  v36 = v45;
  v22 = v14;
  HasHierarchy.children.getter();
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v36, v47);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7138], MEMORY[0x24BDE7148]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>();
  dispatch thunk of IteratorProtocol.next()();
  v37 = v48[0];
  if (!v48[0])
  {
LABEL_39:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
    return v22;
  }
  while (dispatch thunk of Entity.name.getter() != 0xD000000000000010 || v38 != 0x800000022BD0AA10)
  {
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
      goto LABEL_41;
    swift_release();
    dispatch thunk of IteratorProtocol.next()();
    v37 = v48[0];
    if (!v48[0])
      goto LABEL_39;
  }
  swift_bridgeObjectRelease();
LABEL_41:
  (*(void (**)(char *, uint64_t))(v44 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  swift_release();
  return v37;
}

unint64_t lazy protocol witness table accessor for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BDE7120], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in ModelSortGroupComponentBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in ModelSortGroupComponentBuilder.run(inputs:)(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_22BCE3E44()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t sub_22BCE3E6C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in ModelSortGroupComponentBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #3 in ModelSortGroupComponentBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 32));
}

uint64_t EditTarget.init(on:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    v3 = *(id *)(a1 + 16);
    v4 = RIOPxrUsdEditTargetCreateWithLayer();

    result = swift_release();
  }
  else
  {
    result = RIOPxrUsdEditTargetCreateEmpty();
    v4 = result;
  }
  *a2 = v4;
  return result;
}

uint64_t EditTarget.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdEditTargetCreateEmpty();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall EditTarget.isNull()()
{
  return RIOPxrUsdEditTargetIsNull();
}

Swift::Bool __swiftcall EditTarget.isValid()()
{
  return RIOPxrUsdEditTargetIsValid();
}

uint64_t EditTarget.layer()()
{
  uint64_t v0;
  uint64_t result;

  v0 = RIOPxrUsdEditTargetCopyLayer();
  type metadata accessor for SceneDescriptionFoundations.Layer();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t EditTarget.primSpec(for:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdEditTargetCopyPrimSpec();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for EditTarget()
{
  return &type metadata for EditTarget;
}

uint64_t specialized SIMD.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = 0uLL;
    v6 = 0uLL;
    if ((unint64_t)(v3 - 1) >= 0x10)
      v7 = 16;
    else
      v7 = v3 - 1;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    do
    {
      if ((unint64_t)(v3 - 1) > 0xF)
      {
        __break(1u);
        goto LABEL_11;
      }
      v14 = *(_QWORD *)(a1 + 8 * v4 + 32);
      v24 = v5;
      v25 = v6;
      v26 = v8;
      v27 = v9;
      v28 = v10;
      v29 = v11;
      v30 = v12;
      v31 = v13;
      *((_QWORD *)&v24 + (v4 & 0xF)) = v14;
      v12 = v30;
      v13 = v31;
      v10 = v28;
      v11 = v29;
      v8 = v26;
      v9 = v27;
      ++v4;
      v5 = v24;
      v6 = v25;
    }
    while (v3 != v4);
    v16 = v25;
    v17 = v26;
    v18 = v27;
    v19 = v28;
    v20 = v24;
    v21 = v29;
    v22 = v30;
    v23 = v31;
    result = swift_bridgeObjectRelease();
    if (v7 < 0xF)
      goto LABEL_12;
    *a2 = v20;
    a2[1] = v16;
    a2[2] = v17;
    a2[3] = v18;
    a2[4] = v19;
    a2[5] = v21;
    a2[6] = v22;
    a2[7] = v23;
  }
  else
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
LABEL_12:
    __break(1u);
  }
  return result;
}

RealityIO::Half __swiftcall Half.init()()
{
  _DWORD *v0;
  RealityIO::Half result;

  *v0 = 0;
  return result;
}

void __swiftcall Frame4D.asDouble4x4()(simd_double4x4 *__return_ptr retstr)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = v1[6];
  v3 = v1[7];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[1];
  *(_OWORD *)retstr->columns[0].f64 = *v1;
  *(_OWORD *)&retstr->columns[0].f64[2] = v8;
  *(_OWORD *)retstr->columns[1].f64 = v6;
  *(_OWORD *)&retstr->columns[1].f64[2] = v7;
  *(_OWORD *)retstr->columns[2].f64 = v4;
  *(_OWORD *)&retstr->columns[2].f64[2] = v5;
  *(_OWORD *)retstr->columns[3].f64 = v2;
  *(_OWORD *)&retstr->columns[3].f64[2] = v3;
}

uint64_t Frame4D.init(_:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = 0;
  v3 = 0uLL;
  v4 = 0uLL;
  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  while (1)
  {
    v12 = v2 >> 2;
    v13 = result;
    if (v2 >> 2)
    {
      v13 = result + 32;
      if (v12 != 1)
      {
        v13 = result + 64;
        if (v12 != 2)
        {
          v13 = result + 96;
          if ((v2 & 0x7FFFFFFFFFFFFFFCLL) != 0xC)
            break;
        }
      }
    }
    v11 = *(_QWORD *)(v13 + 8 * (v2 & 3));
    v14 = v3;
    v15 = v4;
    v16 = v5;
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    *((_QWORD *)&v14 + (v2 & 0xF)) = v11;
    v9 = v20;
    v10 = v21;
    v7 = v18;
    v8 = v19;
    v5 = v16;
    v6 = v17;
    ++v2;
    v3 = v14;
    v4 = v15;
    if (v2 == 16)
      goto LABEL_8;
  }
  __break(1u);
LABEL_8:
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v10;
  return result;
}

double Frame4D.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t TexCoord2.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  Point3.init()(v2, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  v4 = type metadata accessor for SIMD2();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t SIMD2.init(_:)(uint64_t a1, uint64_t a2)
{
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - v6;
  v11 = type metadata accessor for TexCoord2(0, v8, v9, v10);
  v14 = a1;
  Point3.subscript.getter(0, v11);
  Point3.subscript.getter(1, v11);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v7, v3);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v14, v11);
}

uint64_t TexCoord3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, double);
  uint64_t v6;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v5(v3, v4, v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  v6 = type metadata accessor for SIMD3();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
}

uint64_t SIMD3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))TexCoord3.subscript.getter, a3);
}

{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))Point3.subscript.getter, a3);
}

{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))Vector3.subscript.getter, a3);
}

{
  return SIMD3.init(_:)(a1, a2, (void (*)(uint64_t, uint64_t))Normal3.subscript.getter, a3);
}

uint64_t Color3.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  Color3.init()(v2, v2, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  v4 = type metadata accessor for SIMD3();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t SIMD3<>.init(_:)(uint64_t a1, uint64_t a2)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v18 = (char *)&v18 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - v11;
  v16 = type metadata accessor for Color3(0, v13, v14, v15);
  v19 = a1;
  Color3.red.getter();
  Color3.green.getter();
  Color3.blue.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v4, v12, v3);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v4, v9, v3);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v19, v16);
}

uint64_t Point3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

uint64_t SIMD3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD, double);
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v22 = a4;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v20[1] = (char *)v20 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v20 - v11;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v20 - v15;
  v18 = v17(0, v14);
  v21 = a1;
  a3(0, v18);
  a3(1, v18);
  a3(2, v18);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v7, v16, v6);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v7, v12, v6);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v21, v18);
}

uint64_t Vector3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

uint64_t Normal3.init(_:)(uint64_t a1)
{
  return TexCoord3.init(_:)(a1);
}

uint64_t Color4.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  Color3.init()(v2, v2, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.setter();
  v4 = type metadata accessor for SIMD4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t SIMD4<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v21[1] = (char *)v21 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v21[0] = (char *)v21 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v21 - v14;
  v19 = type metadata accessor for Color4(0, v16, v17, v18);
  v22 = a1;
  Color3.red.getter();
  Color3.green.getter();
  Color3.blue.getter();
  Color4.alpha.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v5, v15, v4);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v5, v12, v4);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v5, v21[0], v4);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v22, v19);
}

uint64_t ManagedColor.init(color:space:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v9 = *a2;
  v10 = *(int *)(type metadata accessor for ManagedColor(0, a3, a4, a5) + 44);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, a1, a3);
  *(_QWORD *)(a6 + v10) = v9;
  return result;
}

uint64_t Normal3.x.getter()
{
  return Normal3.x.getter();
}

{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t Normal3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t Normal3.z.getter()
{
  return Normal3.x.getter();
}

float specialized BinaryFloatingPoint.init<A>(_:)@<S0>(_DWORD *a1@<X8>)
{
  float result;
  uint64_t v3;

  specialized BinaryFloatingPoint.init<A>(_:)(&v3);
  result = *(float *)&v3;
  *a1 = v3;
  return result;
}

float specialized BinaryFloatingPoint.init<A>(_:)@<S0>(float *a1@<X8>)
{
  float result;
  float v3;

  specialized BinaryFloatingPoint.init<A>(_:)(&v3);
  result = v3;
  *a1 = v3;
  return result;
}

double specialized BinaryFloatingPoint.init<A>(_:)(float a1)
{
  return a1;
}

uint64_t Color3.red.getter()
{
  return Color3.red.getter();
}

{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t Color3.green.getter()
{
  return Color3.red.getter();
}

uint64_t Color3.blue.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.red.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.green.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.blue.getter()
{
  return Color3.red.getter();
}

uint64_t Color4.alpha.getter()
{
  return Color3.red.getter();
}

uint64_t Vector3.x.getter()
{
  return Normal3.x.getter();
}

uint64_t Vector3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t Vector3.z.getter()
{
  return Normal3.x.getter();
}

uint64_t Point3.x.getter()
{
  return Normal3.x.getter();
}

uint64_t Point3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t Point3.z.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord2.x.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord2.y.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord3.x.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord3.y.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord3.z.getter()
{
  return Normal3.x.getter();
}

uint64_t ManagedColor.init(_:)@<X0>(CGColor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;

  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!CGColorRef.components.getter())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_22BD0C770;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0x3FF0000000000000;
  }
  (*(void (**)(void))(a3 + 8))();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a2);
  specialized static ColorSpaces.ocioName(fromCGColor:)(a1);
  if (v14)
  {
    if (String.count.getter() < 1)
    {
      v15 = (id)RIOPxrTfTokenEmpty();
      swift_bridgeObjectRelease();

    }
    else
    {
      String.utf8CString.getter();
      v15 = (id)RIOPxrTfTokenCreateWithCString();
      swift_bridgeObjectRelease();

      swift_release();
    }
  }
  else
  {

    v15 = 0;
  }
  result = type metadata accessor for ManagedColor(0, a2, a3, a4);
  *(_QWORD *)(a5 + *(int *)(result + 44)) = v15;
  return result;
}

float static Float.from(cgFloat:)(double a1)
{
  return a1;
}

double Float.toCGFloat.getter(float a1)
{
  return a1;
}

float protocol witness for static CGFloatConvertable.from(cgFloat:) in conformance Float@<S0>(float *a1@<X8>, double a2@<D0>)
{
  float result;

  result = a2;
  *a1 = result;
  return result;
}

double protocol witness for CGFloatConvertable.toCGFloat.getter in conformance Float()
{
  uint64_t v0;

  return *(float *)v0;
}

void protocol witness for static CGFloatConvertable.from(cgFloat:) in conformance Double(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double protocol witness for CGFloatConvertable.toCGFloat.getter in conformance Double()
{
  uint64_t v0;

  return *(double *)v0;
}

float static Half.from(cgFloat:)@<S0>(float *a1@<X8>)
{
  float result;
  float v3;

  specialized BinaryFloatingPoint.init<A>(_:)(&v3);
  result = v3;
  *a1 = v3;
  return result;
}

double Half.toCGFloat.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

double protocol witness for CGFloatConvertable.toCGFloat.getter in conformance Half()
{
  float *v0;

  return specialized BinaryFloatingPoint.init<A>(_:)(*v0);
}

uint64_t Color3.red.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color3.red.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Color3.red.getter();
  return Color3.red.modify;
}

void Color3.red.modify(uint64_t **a1, char a2)
{
  Color3.red.modify(a1, a2, 0, (void (*)(void *, uint64_t, uint64_t))specialized Color3.red.setter);
}

uint64_t Color3.green.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color3.green.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Color3.green.getter();
  return Color3.green.modify;
}

void Color3.green.modify(uint64_t **a1, char a2)
{
  Color3.red.modify(a1, a2, 1, (void (*)(void *, uint64_t, uint64_t))specialized Color3.red.setter);
}

void Color3.red.modify(uint64_t **a1, char a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = (void *)(*a1)[3];
  v8 = (void *)(*a1)[4];
  if ((a2 & 1) != 0)
  {
    v9 = *v6;
    memcpy((void *)(*a1)[3], v8, v6[2]);
    v10 = v7;
    v11 = v9;
  }
  else
  {
    v11 = *v6;
    v10 = (void *)(*a1)[4];
  }
  a4(v10, v11, a3);
  free(v8);
  free(v7);
  free(v6);
}

uint64_t Color3.blue.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color3.blue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Color3.blue.getter();
  return Color3.blue.modify;
}

void Color3.blue.modify(uint64_t **a1, char a2)
{
  Color3.red.modify(a1, a2, 2, (void (*)(void *, uint64_t, uint64_t))specialized Color3.red.setter);
}

uint64_t Color3.scalarCount.getter()
{
  return 3;
}

uint64_t Color3.subscript.setter(uint64_t a1)
{
  return specialized Color4.subscript.setter(a1);
}

void (*Color3.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Color3.subscript.getter(a2, a3);
  return Color3.subscript.modify;
}

void Color3.subscript.modify(uint64_t **a1, char a2)
{
  Color3.subscript.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized Color4.subscript.setter);
}

Swift::Int Color3.hashValue.getter(uint64_t a1)
{
  return Color3.hashValue.getter(a1, (uint64_t)&protocol conformance descriptor for Color3<A>);
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance Color3<A>()
{
  return 3;
}

uint64_t protocol witness for SIMDStorage.init() in conformance Color3<A>(uint64_t a1, uint64_t a2)
{
  return Color3.init()(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 32));
}

uint64_t protocol witness for SIMDStorage.subscript.setter in conformance Color3<A>(uint64_t a1)
{
  return specialized Color4.subscript.setter(a1);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Color3<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Color3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Color3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color3<A>);
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Color3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color3<A>);
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color3<A>);
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Color3<A>);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color3<A>(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color3<A>, a1);
  return SIMD.description.getter();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Color3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color3<A>);
  return SIMD.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD, __n128);
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  __n128 v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v5 = a1;
  v33 = *(_QWORD *)(a3 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v34 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v31 = (char *)&v27 - v8;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15.n128_f64[0] = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v27 - v16;
  v18 = 0;
  v19 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v10 + 16);
  v20 = 1;
  v32 = v21;
  v29 = v19;
  v30 = v10;
  v28 = v22;
  v19((char *)&v27 - v16, v5, a3, v15);
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v19)(v13, a2, a3);
    if ((v20 & 1) != 0)
    {
      Color3.subscript.getter(v18, a3);
      v25 = *(void (**)(char *, uint64_t))(v10 + 8);
      v25(v17, a3);
      Color3.subscript.getter(v18, a3);
      v25(v13, a3);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      a2 = v28;
      v5 = v32;
      swift_getAssociatedConformanceWitness();
      v19 = v29;
      v10 = v30;
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else
    {
      v23 = *(void (**)(char *, uint64_t))(v10 + 8);
      v23(v13, a3);
      v23(v17, a3);
      v20 = 0;
    }
    if (++v18 == 3)
      break;
    v19(v17, v5, a3, v24);
  }
  return v20 & 1;
}

uint64_t Color3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  Color3.init()(v9, v8, v10);
  memcpy((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v7);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t Color4.red.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.red.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Color3.red.getter();
  return Color3.red.modify;
}

uint64_t Color4.green.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.green.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Color3.green.getter();
  return Color3.green.modify;
}

uint64_t Color4.blue.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.blue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Color3.blue.getter();
  return Color3.blue.modify;
}

uint64_t Color4.alpha.setter(uint64_t a1)
{
  return specialized Color3.red.setter(a1);
}

void (*Color4.alpha.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Color4.alpha.getter();
  return Color4.alpha.modify;
}

void Color4.alpha.modify(uint64_t **a1, char a2)
{
  Color3.red.modify(a1, a2, 3, (void (*)(void *, uint64_t, uint64_t))specialized Color3.red.setter);
}

uint64_t Color4.scalarCount.getter()
{
  return 4;
}

uint64_t Color3.init(val:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
}

uint64_t Color3.init()()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.init()();
}

uint64_t Color3.subscript.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t key path getter for Color3.subscript(_:) : <A>Color3<A>A(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a2;
  v7 = a4(0, *(uint64_t *)((char *)a2 + a3 - 24), *(uint64_t *)((char *)a2 + a3 - 16), *(uint64_t *)((char *)a2 + a3 - 8));
  return a5(v6, v7);
}

uint64_t key path setter for Color3.subscript(_:) : <A>Color3<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a5(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return specialized Color4.subscript.setter(a1);
}

uint64_t Color4.subscript.setter(uint64_t a1)
{
  return specialized Color4.subscript.setter(a1);
}

void (*Color4.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Color3.subscript.getter(a2, a3);
  return Color3.subscript.modify;
}

void Color3.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = (void *)(*a1)[4];
  v6 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v8 = *v4;
    v7 = v4[1];
    memcpy((void *)(*a1)[4], v6, v4[3]);
    v9 = v5;
    v10 = v8;
    v11 = v7;
  }
  else
  {
    v11 = v4[1];
    v10 = *v4;
    v9 = (void *)(*a1)[5];
  }
  a3(v9, v10, v11);
  free(v6);
  free(v5);
  free(v4);
}

Swift::Int Color4.hashValue.getter(uint64_t a1)
{
  return Color3.hashValue.getter(a1, (uint64_t)&protocol conformance descriptor for Color4<A>);
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance Color4<A>()
{
  return 4;
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Color4<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Color4.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Color4<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color4<A>);
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Color4<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color4<A>);
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color4<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color4<A>);
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Color4<A>);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color4<A>(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color4<A>, a1);
  return SIMD.description.getter();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Color4<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Color4<A>);
  return SIMD.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD, __n128);
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  __n128 v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  _QWORD v27[2];
  uint64_t v28;
  void (*v29)(_QWORD, _QWORD, _QWORD, __n128);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v5 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v27 - v9;
  v27[1] = *(_QWORD *)(v11 + 16);
  MEMORY[0x24BDAC7A8](v12);
  v32 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15.n128_f64[0] = MEMORY[0x24BDAC7A8](v14);
  v30 = v10;
  v31 = (char *)v27 - v16;
  v17 = 0;
  v33 = v18;
  v19 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v18 + 16);
  v20 = 1;
  v28 = v21;
  v29 = v19;
  v19(v10, v5, a3, v15);
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v19)(v7, a2, a3);
    if ((v20 & 1) != 0)
    {
      Color3.subscript.getter(v17, a3);
      v24 = a2;
      v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v10, a3);
      Color3.subscript.getter(v17, a3);
      v25(v7, a3);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      a2 = v24;
      v5 = v28;
      swift_getAssociatedConformanceWitness();
      v19 = v29;
      v10 = v30;
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else
    {
      v22 = *(void (**)(char *, uint64_t))(v33 + 8);
      v22(v7, a3);
      v22(v10, a3);
      v20 = 0;
    }
    if (++v17 == 4)
      break;
    v19(v10, v5, a3, v23);
  }
  return v20 & 1;
}

uint64_t Color4.init(_:_:_:_:)(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5)
{
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v9 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  Color3.init()(v11, v10, v12);
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v9);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v9);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t Color3.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t, double);
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = Color3.init()(v10, v10, v11);
  if (*(_QWORD *)(a1 + 16) < 3uLL)
  {
    __break(1u);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t, double))(a3 + 8);
    v13(a2, a3, *(double *)(a1 + 32));
    type metadata accessor for Color3(0, a2, a3, a4);
    specialized Color4.subscript.setter((uint64_t)v9);
    v13(a2, a3, *(double *)(a1 + 40));
    specialized Color4.subscript.setter((uint64_t)v9);
    v13(a2, a3, *(double *)(a1 + 48));
    specialized Color4.subscript.setter((uint64_t)v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Color3.components.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double (*v7)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 16);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22BD0C770;
  Color3.subscript.getter(0, a1);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(double (**)(uint64_t, uint64_t))(v6 + 16);
  *(double *)(v5 + 32) = v7(v2, v6);
  Color3.subscript.getter(1, a1);
  *(double *)(v5 + 40) = v7(v2, v6);
  Color3.subscript.getter(2, a1);
  *(double *)(v5 + 48) = v7(v2, v6);
  *(_QWORD *)(v5 + 56) = 0x3FF0000000000000;
  return v5;
}

uint64_t protocol witness for ColorProtocol.init(_:) in conformance Color3<A>(uint64_t a1, uint64_t *a2)
{
  return Color3.init(_:)(a1, a2[2], a2[3], a2[4]);
}

uint64_t Color4.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t, double);
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = Color3.init()(v10, v10, v11);
  if (*(_QWORD *)(a1 + 16) < 4uLL)
  {
    __break(1u);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t, double))(a3 + 8);
    v13(a2, a3, *(double *)(a1 + 32));
    type metadata accessor for Color4(0, a2, a3, a4);
    specialized Color4.subscript.setter((uint64_t)v9);
    v13(a2, a3, *(double *)(a1 + 40));
    specialized Color4.subscript.setter((uint64_t)v9);
    v13(a2, a3, *(double *)(a1 + 48));
    specialized Color4.subscript.setter((uint64_t)v9);
    v13(a2, a3, *(double *)(a1 + 56));
    specialized Color4.subscript.setter((uint64_t)v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Color4.components.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t, uint64_t);
  _QWORD v11[2];

  v2 = *(_QWORD *)(a1 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v11[1] = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_22BD0C770;
  Color3.subscript.getter(0, a1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(double (**)(uint64_t, uint64_t))(v8 + 16);
  *(double *)(v7 + 32) = v9(v2, v8);
  Color3.subscript.getter(1, a1);
  *(double *)(v7 + 40) = v9(v2, v8);
  Color3.subscript.getter(2, a1);
  *(double *)(v7 + 48) = v9(v2, v8);
  Color3.subscript.getter(3, a1);
  *(double *)(v7 + 56) = v9(v2, v8);
  return v7;
}

uint64_t protocol witness for ColorProtocol.init(_:) in conformance Color4<A>(uint64_t a1, uint64_t *a2)
{
  return Color4.init(_:)(a1, a2[2], a2[3], a2[4]);
}

void ManagedColor.cgColor.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  CGColorSpace *v13;
  CGColorRef v14;
  unint64_t v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16));
  v4 = *(void **)(v1 + *(int *)(a1 + 44));
  if (v4)
  {
    v5 = v4;
    v6 = (void *)RIOPxrTfTokenCopyString();
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v10;
  }
  v11 = (void *)MEMORY[0x22E2F5278](v7, v9);
  v12 = (__CFString *)(id)MEMORY[0x22E2F6100]();

  if (v12)
  {
    v13 = CGColorSpaceCreateWithName(v12);

    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_bridgeObjectRetain();
      v14 = CGColorCreate(v13, (const CGFloat *)(v3 + 32));
      swift_bridgeObjectRelease();

      if (v14)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v15 = *(_QWORD *)(v3 + 16);
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v15 == 1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v15 < 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v15 != 3)
  {
    v16 = *(double *)(v3 + 32);
    v17 = *(double *)(v3 + 40);
    v18 = *(double *)(v3 + 48);
    v19 = *(double *)(v3 + 56);
    swift_bridgeObjectRelease();
    CGColorCreateGenericRGB(v16, v17, v18, v19);
    return;
  }
LABEL_17:
  __break(1u);
}

uint64_t Frame4D.scalarCount.getter()
{
  return 16;
}

double Frame4D.subscript.getter(char a1)
{
  uint64_t v1;

  return *(double *)(v1 + 8 * (a1 & 0xF));
}

uint64_t Frame4D.subscript.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8 * result) = a2;
  return result;
}

uint64_t (*Frame4D.subscript.modify(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;

  a1[1] = a2;
  a1[2] = v2;
  *a1 = *(_QWORD *)(v2 + 8 * (a2 & 0xF));
  return Frame4D.subscript.modify;
}

__n128 Frame4D.init(val:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void Frame4D.init(columns:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>, __n128 a6@<Q4>, __n128 a7@<Q5>, __n128 a8@<Q6>, __n128 a9@<Q7>)
{
  a1[6] = a8;
  a1[7] = a9;
  a1[4] = a6;
  a1[5] = a7;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = a2;
  a1[1] = a3;
}

Swift::Int Frame4D.hashValue.getter()
{
  __int128 *v0;
  uint64_t i;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[8];

  v11 = v0[6];
  v12 = v0[7];
  v9 = v0[4];
  v10 = v0[5];
  v7 = v0[2];
  v8 = v0[3];
  v5 = *v0;
  v6 = v0[1];
  Hasher.init(_seed:)();
  for (i = 0; i != 16; ++i)
  {
    v13[0] = v5;
    v13[1] = v6;
    v13[2] = v7;
    v13[3] = v8;
    v13[4] = v9;
    v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    v2 = *((_QWORD *)v13 + (i & 0xF));
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v3 = v2;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance Frame4D()
{
  return 16;
}

double protocol witness for SIMDStorage.init() in conformance Frame4D@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double protocol witness for SIMDStorage.subscript.getter in conformance Frame4D@<D0>(char a1@<W0>, double *a2@<X8>)
{
  uint64_t v2;
  double result;

  result = *(double *)(v2 + 8 * (a1 & 0xF));
  *a2 = result;
  return result;
}

double protocol witness for SIMDStorage.subscript.setter in conformance Frame4D(double *a1, unsigned int a2)
{
  uint64_t v2;
  double result;

  result = *a1;
  *(double *)(v2 + 8 * a2) = *a1;
  return result;
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Frame4D(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;

  a1[1] = a2;
  a1[2] = v2;
  *a1 = *(_QWORD *)(v2 + 8 * (a2 & 0xF));
  return Frame4D.subscript.modify;
}

double Frame4D.subscript.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 8)) = *(_QWORD *)a1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Frame4D()
{
  lazy protocol witness table accessor for type Frame4D and conformance Frame4D();
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Frame4D()
{
  lazy protocol witness table accessor for type Frame4D and conformance Frame4D();
  return SIMD.init(from:)();
}

void protocol witness for Hashable.hash(into:) in conformance Frame4D()
{
  __int128 *v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[8];

  v1 = 0;
  v10 = v0[6];
  v11 = v0[7];
  v8 = v0[4];
  v9 = v0[5];
  v6 = v0[2];
  v7 = v0[3];
  v4 = *v0;
  v5 = v0[1];
  do
  {
    v12[0] = v4;
    v12[1] = v5;
    v12[2] = v6;
    v12[3] = v7;
    v12[4] = v8;
    v12[5] = v9;
    v12[6] = v10;
    v12[7] = v11;
    v2 = *((_QWORD *)v12 + (v1++ & 0xF));
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v3 = v2;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  while (v1 != 16);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Frame4D()
{
  __int128 *v0;
  uint64_t i;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[8];

  v11 = v0[6];
  v12 = v0[7];
  v9 = v0[4];
  v10 = v0[5];
  v7 = v0[2];
  v8 = v0[3];
  v5 = *v0;
  v6 = v0[1];
  Hasher.init(_seed:)();
  for (i = 0; i != 16; ++i)
  {
    v13[0] = v5;
    v13[1] = v6;
    v13[2] = v7;
    v13[3] = v8;
    v13[4] = v9;
    v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    v2 = *((_QWORD *)v13 + (i & 0xF));
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v3 = v2;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Frame4D()
{
  lazy protocol witness table accessor for type Frame4D and conformance Frame4D();
  return SIMD.description.getter();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Frame4D(unint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  double v20;
  _OWORD v21[8];
  _OWORD v22[8];

  v2 = 0;
  v4 = *(_OWORD *)(result + 96);
  v3 = *(_OWORD *)(result + 112);
  v6 = *(_OWORD *)(result + 64);
  v5 = *(_OWORD *)(result + 80);
  v8 = *(_OWORD *)(result + 32);
  v7 = *(_OWORD *)(result + 48);
  v10 = *(_OWORD *)result;
  v9 = *(_OWORD *)(result + 16);
  v12 = a2[6];
  v11 = a2[7];
  v14 = a2[4];
  v13 = a2[5];
  v16 = a2[2];
  v15 = a2[3];
  LOBYTE(result) = 1;
  v18 = *a2;
  v17 = a2[1];
  do
  {
    if ((result & 1) != 0)
    {
      v22[0] = v10;
      v22[1] = v9;
      v22[2] = v8;
      v22[3] = v7;
      v22[4] = v6;
      v22[5] = v5;
      v22[6] = v4;
      v22[7] = v3;
      v19 = 8 * (v2 & 0xF);
      v20 = *(double *)((char *)v22 + v19);
      v21[0] = v18;
      v21[1] = v17;
      v21[2] = v16;
      v21[3] = v15;
      v21[4] = v14;
      v21[5] = v13;
      v21[6] = v12;
      v21[7] = v11;
      result = v20 == *(double *)((char *)v21 + v19);
    }
    else
    {
      result = 0;
    }
    ++v2;
  }
  while (v2 != 16);
  return result;
}

uint64_t TexCoord2.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord2.x.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

void TexCoord2.x.modify(uint64_t **a1, char a2)
{
  Color3.red.modify(a1, a2, 0, (void (*)(void *, uint64_t, uint64_t))specialized TexCoord2.x.setter);
}

uint64_t TexCoord2.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord2.y.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

void TexCoord2.y.modify(uint64_t **a1, char a2)
{
  Color3.red.modify(a1, a2, 1, (void (*)(void *, uint64_t, uint64_t))specialized TexCoord2.x.setter);
}

uint64_t TexCoord2.z.getter()
{
  return Normal3.x.getter();
}

uint64_t TexCoord2.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord2.z.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

void TexCoord2.z.modify(uint64_t **a1, char a2)
{
  Color3.red.modify(a1, a2, 2, (void (*)(void *, uint64_t, uint64_t))specialized TexCoord2.x.setter);
}

uint64_t TexCoord2.scalarCount.getter()
{
  return 2;
}

uint64_t type metadata accessor for TexCoord2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TexCoord2);
}

uint64_t TexCoord2.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*TexCoord2.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

void TexCoord2.subscript.modify(uint64_t **a1, char a2)
{
  Color3.subscript.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized TexCoord3.subscript.setter);
}

Swift::Int TexCoord2.hashValue.getter(uint64_t a1)
{
  return Color3.hashValue.getter(a1, (uint64_t)&protocol conformance descriptor for TexCoord2<A>);
}

uint64_t protocol witness for SIMDStorage.subscript.setter in conformance TexCoord2<A>(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance TexCoord2<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = TexCoord2.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TexCoord2<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord2<A>);
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TexCoord2<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord2<A>);
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TexCoord2<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord2<A>);
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for TexCoord2<A>);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TexCoord2<A>(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord2<A>, a1);
  return SIMD.description.getter();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance TexCoord2<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord2<A>);
  return SIMD.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void (*v14)(char *, double);
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);

  v4 = a2;
  v22 = a1;
  v23 = a2;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = *(void (**)(char *, double))(v5 + 16);
  v14(v10, v13);
  ((void (*)(char *, uint64_t, uint64_t))v14)(v7, v4, a3);
  Point3.subscript.getter(0, a3);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, a3);
  Point3.subscript.getter(0, a3);
  v24 = v15;
  v15(v7, a3);
  v16 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  v21 = v16;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  LOBYTE(v4) = dispatch thunk of static Equatable.== infix(_:_:)();
  ((void (*)(char *, uint64_t, uint64_t))v14)(v10, v22, a3);
  ((void (*)(char *, uint64_t, uint64_t))v14)(v7, v23, a3);
  if ((v4 & 1) != 0)
  {
    Point3.subscript.getter(1, a3);
    v17 = v24;
    v24(v10, a3);
    Point3.subscript.getter(1, a3);
    v17(v7, a3);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    v19 = v24;
    v24(v7, a3);
    v19(v10, a3);
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t TexCoord2.init(_:_:)(const void *a1, const void *a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  Point3.init()(v6, v7);
  memcpy((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t TexCoord3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord3.x.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t TexCoord3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord3.y.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t TexCoord3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*TexCoord3.z.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t TexCoord3.scalarCount.getter()
{
  return 3;
}

uint64_t type metadata accessor for TexCoord3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TexCoord3);
}

uint64_t type metadata accessor for Color3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Color3);
}

uint64_t TexCoord3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*TexCoord3.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int TexCoord3.hashValue.getter(uint64_t a1)
{
  return Color3.hashValue.getter(a1, (uint64_t)&protocol conformance descriptor for TexCoord3<A>);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance TexCoord3<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = TexCoord3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TexCoord3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord3<A>);
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TexCoord3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord3<A>);
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TexCoord3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord3<A>);
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for TexCoord3<A>);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TexCoord3<A>(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord3<A>, a1);
  return SIMD.description.getter();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance TexCoord3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for TexCoord3<A>);
  return SIMD.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))TexCoord3.subscript.getter);
}

uint64_t TexCoord3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

{
  size_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, double);
  uint64_t v13;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v11(v9, v10, v8);
  memcpy((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v7);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t Point3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Point3.x.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t Point3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Point3.y.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t Point3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Point3.z.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t Point3.scalarCount.getter()
{
  return 3;
}

uint64_t type metadata accessor for Point3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Point3);
}

uint64_t Point3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*Point3.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int Point3.hashValue.getter(uint64_t a1)
{
  return Color3.hashValue.getter(a1, (uint64_t)&protocol conformance descriptor for Point3<A>);
}

uint64_t protocol witness for SIMDStorage.init() in conformance Point3<A>(uint64_t a1)
{
  return Point3.init()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Point3<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Point3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Point3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Point3<A>);
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Point3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Point3<A>);
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Point3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Point3<A>);
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Point3<A>);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Point3<A>(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Point3<A>, a1);
  return SIMD.description.getter();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Point3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Point3<A>);
  return SIMD.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Point3.subscript.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  __n128 v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  _QWORD v27[3];
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v30 = a5;
  v32 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v27 - v10;
  v27[1] = *(_QWORD *)(v12 + 16);
  MEMORY[0x24BDAC7A8](v13);
  v29 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x24BDAC7A8](v15);
  v27[2] = (char *)v27 - v17;
  v28 = v11;
  v18 = 0;
  v31 = v19;
  v21 = 1;
  v27[0] = *(_QWORD *)(v19 + 16);
  v20 = (void (*)(char *, uint64_t, uint64_t))v27[0];
  ((void (*)(char *, uint64_t, uint64_t, __n128))v27[0])(v11, v32, a3, v16);
  while (1)
  {
    v20(v8, a2, a3);
    if ((v21 & 1) != 0)
    {
      v24 = v30;
      v30(v18, a3);
      v25 = *(void (**)(char *, uint64_t))(v31 + 8);
      v25(v11, a3);
      v24(v18, a3);
      v25(v8, a3);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedConformanceWitness();
      v11 = v28;
      v20 = (void (*)(char *, uint64_t, uint64_t))v27[0];
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else
    {
      v22 = *(void (**)(char *, uint64_t))(v31 + 8);
      v22(v8, a3);
      v22(v11, a3);
      v21 = 0;
    }
    if (++v18 == 3)
      break;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v20)(v11, v32, a3, v23);
  }
  return v21 & 1;
}

uint64_t Point3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

uint64_t Vector3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Vector3.x.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t Vector3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Vector3.y.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t Vector3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Vector3.z.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t Vector3.scalarCount.getter()
{
  return 3;
}

uint64_t type metadata accessor for Vector3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Vector3);
}

uint64_t Vector3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*Vector3.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int Vector3.hashValue.getter(uint64_t a1)
{
  return Color3.hashValue.getter(a1, (uint64_t)&protocol conformance descriptor for Vector3<A>);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Vector3<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Vector3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Vector3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Vector3<A>);
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Vector3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Vector3<A>);
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Vector3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Vector3<A>);
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Vector3<A>);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Vector3<A>(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Vector3<A>, a1);
  return SIMD.description.getter();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Vector3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Vector3<A>);
  return SIMD.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Vector3.subscript.getter);
}

uint64_t Vector3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

uint64_t Normal3.x.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Normal3.x.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.x.getter();
  return TexCoord2.x.modify;
}

uint64_t Normal3.y.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Normal3.y.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.y.getter();
  return TexCoord2.y.modify;
}

uint64_t Normal3.z.setter(uint64_t a1)
{
  return specialized TexCoord2.x.setter(a1);
}

void (*Normal3.z.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v5[2] = v6;
  v5[3] = malloc(v6);
  v5[4] = malloc(v6);
  Point3.z.getter();
  return TexCoord2.z.modify;
}

uint64_t Normal3.scalarCount.getter()
{
  return 3;
}

uint64_t TexCoord2.init(val:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
}

uint64_t TexCoord2.init()()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.init()();
}

uint64_t TexCoord2.subscript.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.getter();
}

uint64_t type metadata accessor for Normal3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Normal3);
}

uint64_t type metadata accessor for Color4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Color4);
}

uint64_t type metadata accessor for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedColor);
}

uint64_t Normal3.subscript.setter(uint64_t a1)
{
  return specialized TexCoord3.subscript.setter(a1);
}

void (*Normal3.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v7[3] = v8;
  v7[4] = malloc(v8);
  v7[5] = malloc(v8);
  Point3.subscript.getter(a2, a3);
  return TexCoord2.subscript.modify;
}

Swift::Int Normal3.hashValue.getter(uint64_t a1)
{
  return Color3.hashValue.getter(a1, (uint64_t)&protocol conformance descriptor for Normal3<A>);
}

Swift::Int Color3.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x22E2F889C](a2, a1);
  SIMD.hash(into:)();
  return Hasher._finalize()();
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance Normal3<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Normal3.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Normal3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Normal3<A>);
  return SIMD.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Normal3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Normal3<A>);
  return SIMD.init(from:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Normal3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Normal3<A>);
  return SIMD.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Normal3<A>);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  MEMORY[0x22E2F889C](a4, a2);
  SIMD.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Normal3<A>(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Normal3<A>, a1);
  return SIMD.description.getter();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Normal3<A>()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for Normal3<A>);
  return SIMD.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TexCoord3<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Normal3.subscript.getter);
}

uint64_t Normal3.init(_:_:_:)(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  return TexCoord3.init(_:_:_:)(a1, a2, a3, a4);
}

float Half.underlyingValue.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void Half.underlyingValue.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*Half.underlyingValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
}

uint64_t static Half.exponentBitCount.getter()
{
  return 8;
}

uint64_t static Half.significandBitCount.getter()
{
  return 23;
}

uint64_t Half.exponentBitPattern.getter()
{
  unsigned int *v0;

  return ((unint64_t)*v0 >> 23);
}

uint64_t Half.significandBitPattern.getter()
{
  _DWORD *v0;

  return *v0 & 0x7FFFFF;
}

float Half.binade.getter@<S0>(float *a1@<X8>)
{
  float *v1;
  float v2;
  int v3;
  float v5;
  float result;

  v2 = *v1;
  v3 = (*(_DWORD *)v1 >> 23);
  if (v3 == 255)
  {
    v5 = NAN;
    goto LABEL_7;
  }
  if ((LODWORD(v2) & 0x7FFFFF) == 0 || v3 != 0)
  {
    LODWORD(v5) = LODWORD(v2) & 0xFF800000;
LABEL_7:
    result = v5;
    *a1 = v5;
    return result;
  }
  result = COERCE_FLOAT(COERCE_UNSIGNED_INT(*v1 * 8388600.0) & 0xFF800000) * 0.00000011921;
  *a1 = result;
  return result;
}

uint64_t Half.significandWidth.getter()
{
  _DWORD *v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *v0 & 0x7FFFFF;
  v2 = __clz(__rbit32(v1));
  if ((*v0 >> 23) && (*v0 >> 23) != 255)
  {
    v4 = 23 - v2;
    if (v1)
      return v4;
    else
      return 0;
  }
  else if ((*v0 & 0x7F800000) != 0 || v1 == 0)
  {
    return -1;
  }
  else
  {
    return 32 - (__clz(v1) + v2 + 1);
  }
}

void static Half.nan.getter(_DWORD *a1@<X8>)
{
  *a1 = 2143289344;
}

void static Half.signalingNaN.getter(_DWORD *a1@<X8>)
{
  *a1 = 2141192192;
}

void static Half.infinity.getter(_DWORD *a1@<X8>)
{
  *a1 = 2139095040;
}

void static Half.greatestFiniteMagnitude.getter(_DWORD *a1@<X8>)
{
  *a1 = 2139095039;
}

void static Half.pi.getter(_DWORD *a1@<X8>)
{
  *a1 = 1078530010;
}

float Half.ulp.getter@<S0>(float *a1@<X8>)
{
  _DWORD *v1;
  float result;
  float v3;

  if ((*v1 >> 23))
  {
    if ((*v1 >> 23) != 255)
    {
      result = COERCE_FLOAT(*v1 & 0x7F800000) * 0.00000011921;
      *a1 = result;
      return result;
    }
    v3 = NAN;
  }
  else
  {
    LODWORD(v3) = 1;
  }
  result = v3;
  *a1 = v3;
  return result;
}

void static Half.leastNormalMagnitude.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x800000;
}

void static Half.leastNonzeroMagnitude.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Half.sign.getter()
{
  _DWORD *v0;

  return *v0 >> 31;
}

uint64_t Half.exponent.getter()
{
  unsigned int *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;

  v1 = *v0;
  v2 = (v1 >> 23);
  if ((_DWORD)v2 == 255)
    return 0x7FFFFFFFFFFFFFFFLL;
  v4 = v1 & 0x7FFFFF;
  if (!(v2 | v4))
    return 0x8000000000000000;
  if ((_DWORD)v2)
    return v2 - 127;
  if (v4)
    return v2 - __clz(v4) - 118;
  __break(1u);
  return result;
}

uint64_t Half.significand.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  result = Float.significand.getter();
  *a1 = v3;
  return result;
}

void Half.nextUp.getter(float *a1@<X8>)
{
  float *v1;
  float v2;

  v2 = *v1 + 0.0;
  if (v2 < INFINITY)
    LODWORD(v2) += (SLODWORD(v2) >> 31) | 1;
  *a1 = v2;
}

BOOL Half.isNormal.getter()
{
  _DWORD *v0;

  return (*v0 >> 23) != 255 && (*v0 >> 23) != 0;
}

BOOL Half.isFinite.getter()
{
  _DWORD *v0;

  return (~*v0 & 0x7F800000) != 0;
}

BOOL Half.isZero.getter()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFFFF) == 0;
}

BOOL Half.isSubnormal.getter()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x7F800000) == 0;
}

BOOL Half.isInfinite.getter()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFFFF) == 2139095040;
}

BOOL Half.isNaN.getter()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFF) != 0 && (~*v0 & 0x7F800000) == 0;
}

BOOL Half.isSignalingNaN.getter()
{
  _DWORD *v0;

  return (~*v0 & 0x7F800000) == 0 && (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x400000) == 0;
}

uint64_t Half.isCanonical.getter()
{
  return 1;
}

RealityIO::Half __swiftcall Half.init(floatLiteral:)(RealityIO::Half floatLiteral)
{
  RealityIO::Half *v1;

  v1->underlyingValue = floatLiteral.underlyingValue;
  return floatLiteral;
}

uint64_t Half.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  float v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  _DWORD v15[4];

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    v12 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v13 = dispatch thunk of BinaryInteger._lowWord.getter();
    v10 = *(void (**)(char *, uint64_t))(v6 + 8);
    v10(v9, a2);
    if ((v12 & 1) != 0)
      v11 = (float)v13;
    else
      v11 = (float)(unint64_t)v13;
  }
  else
  {
    lazy protocol witness table accessor for type Float and conformance Float();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v10 = *(void (**)(char *, uint64_t))(v6 + 8);
    v10(v9, a2);
    v11 = *(float *)&v15[3];
  }
  result = ((uint64_t (*)(uint64_t, uint64_t))v10)(a1, a2);
  *(float *)a3 = v11;
  *(_BYTE *)(a3 + 4) = 0;
  return result;
}

void Half.init(sign:exponent:significand:)(char a1@<W0>, uint64_t a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  *a4 = specialized Float.init(sign:exponent:significand:)(a1 & 1, a2, *a3);
}

RealityIO::Half __swiftcall Half.init(integerLiteral:)(Swift::Int64 integerLiteral)
{
  float *v1;
  RealityIO::Half result;

  result.underlyingValue = (float)integerLiteral;
  *v1 = (float)integerLiteral;
  return result;
}

uint64_t Half.init(sign:exponentBitPattern:significandBitPattern:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, int a3@<W2>, int *a4@<X8>)
{
  *a4 = ((_DWORD)result << 31) | (a2 << 23) | a3 & 0x7FFFFF;
  return result;
}

float Half.magnitude.getter@<S0>(float *a1@<X8>)
{
  float *v1;
  float result;

  result = fabsf(*v1);
  *a1 = result;
  return result;
}

float static Half.* infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

float static Half.*= infix(_:_:)(float *a1, float *a2)
{
  float result;

  result = *a2 * *a1;
  *a1 = result;
  return result;
}

float static Half.+ infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

float static Half.- infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 - *a2;
  *a3 = result;
  return result;
}

float static Half./ infix(_:_:)@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 / *a2;
  *a3 = result;
  return result;
}

float static Half./= infix(_:_:)(float *a1, float *a2)
{
  float result;

  result = *a1 / *a2;
  *a1 = result;
  return result;
}

Swift::Float __swiftcall Half.distance(to:)(RealityIO::Half to)
{
  float *v1;
  float *v2;

  return *v1 - *v2;
}

RealityIO::Half __swiftcall Half.advanced(by:)(Swift::Float by)
{
  float *v1;
  float *v2;
  RealityIO::Half result;

  result.underlyingValue = *v2 + by;
  *v1 = result.underlyingValue;
  return result;
}

Swift::Bool __swiftcall Half.isEqual(to:)(RealityIO::Half to)
{
  float *v1;
  float *v2;

  return *v2 == *v1;
}

Swift::Bool __swiftcall Half.isLess(than:)(RealityIO::Half than)
{
  float *v1;
  float *v2;

  return *v2 < *v1;
}

Swift::Bool __swiftcall Half.isLessThanOrEqualTo(_:)(RealityIO::Half a1)
{
  float *v1;
  float *v2;

  return *v2 <= *v1;
}

Swift::Void __swiftcall Half.formRemainder(dividingBy:)(RealityIO::Half dividingBy)
{
  float *v1;
  float *v2;

  *v2 = remainderf(*v2, *v1);
}

Swift::Void __swiftcall Half.formTruncatingRemainder(dividingBy:)(RealityIO::Half dividingBy)
{
  float *v1;
  float *v2;

  *v2 = fmodf(*v2, *v1);
}

Swift::Void __swiftcall Half.formSquareRoot()()
{
  float *v0;

  *v0 = sqrtf(*v0);
}

Swift::Void __swiftcall Half.addProduct(_:_:)(RealityIO::Half a1, RealityIO::Half a2)
{
  float *v2;
  float *v3;
  float *v4;

  *v4 = *v4 + (float)(*v2 * *v3);
}

uint64_t Half.round(_:)(uint64_t a1)
{
  float *v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  float v9;
  uint64_t v10;

  v3 = type metadata accessor for FloatingPointRoundingRule();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, v3, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if ((_DWORD)result == *MEMORY[0x24BEE38D0])
  {
    *v1 = roundf(*v1);
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BEE38C8])
  {
    *v1 = rintf(*v1);
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BEE38E0])
  {
    v9 = *v1;
LABEL_7:
    *v1 = ceilf(v9);
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BEE38E8])
  {
    v9 = *v1;
LABEL_10:
    *v1 = floorf(v9);
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BEE38B8])
  {
    *v1 = truncf(*v1);
  }
  else
  {
    if ((_DWORD)result == *MEMORY[0x24BEE38C0])
    {
      v9 = *v1;
      if ((*(_DWORD *)v1 & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    Float._roundSlowPath(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

void Half.hash(into:)()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Half.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Half.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Half.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance Half.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Half.CodingKeys()
{
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Half.CodingKeys()
{
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Half.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Half.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Half.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Half.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Half.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t protocol witness for BinaryFloatingPoint.init(sign:exponentBitPattern:significandBitPattern:) in conformance Half@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, int *a4@<X8>)
{
  *a4 = ((_DWORD)result << 31) | (*a2 << 23) | *a3 & 0x7FFFFF;
  return result;
}

void protocol witness for BinaryFloatingPoint.init(_:) in conformance Half(float *a1@<X8>, float a2@<S0>)
{
  *a1 = a2;
}

uint64_t protocol witness for BinaryFloatingPoint.init<A>(_:) in conformance Half()
{
  return BinaryFloatingPoint.init<A>(_:)();
}

uint64_t protocol witness for BinaryFloatingPoint.init<A>(exactly:) in conformance Half()
{
  return BinaryFloatingPoint.init<A>(exactly:)();
}

uint64_t protocol witness for static BinaryFloatingPoint.exponentBitCount.getter in conformance Half()
{
  return 8;
}

uint64_t protocol witness for static BinaryFloatingPoint.significandBitCount.getter in conformance Half()
{
  return 23;
}

void protocol witness for BinaryFloatingPoint.exponentBitPattern.getter in conformance Half(_QWORD *a1@<X8>)
{
  unsigned int *v1;

  *a1 = ((unint64_t)*v1 >> 23);
}

void protocol witness for BinaryFloatingPoint.significandBitPattern.getter in conformance Half(int *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1 & 0x7FFFFF;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Half@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return Half.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Half(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Half.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void protocol witness for FloatingPoint.init(sign:exponent:significand:) in conformance Half(char a1@<W0>, uint64_t *a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  *a4 = specialized Float.init(sign:exponent:significand:)(a1 & 1, *a2, *a3);
}

void protocol witness for FloatingPoint.init(signOf:magnitudeOf:) in conformance Half(float *a1@<X0>, float *a2@<X1>, unsigned int *a3@<X8>)
{
  specialized BinaryFloatingPoint.init(signOf:magnitudeOf:)(a3, *a1, *a2);
}

void specialized BinaryFloatingPoint.init(signOf:magnitudeOf:)(unsigned int *a1@<X8>, float a2@<S0>, float a3@<S1>)
{
  *a1 = LODWORD(a2) & 0x80000000 | LODWORD(a3) & 0x7FFFFFFF;
}

uint64_t protocol witness for FloatingPoint.init(_:) in conformance Half()
{
  lazy protocol witness table accessor for type Half and conformance Half();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return static BinaryFloatingPoint<>._convert<A>(from:)();
}

uint64_t protocol witness for FloatingPoint.init<A>(_:) in conformance Half()
{
  lazy protocol witness table accessor for type Half and conformance Half();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return BinaryFloatingPoint<>.init<A>(_:)();
}

void protocol witness for static FloatingPoint.nan.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2143289344;
}

void protocol witness for static FloatingPoint.signalingNaN.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2141192192;
}

void protocol witness for static FloatingPoint.infinity.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2139095040;
}

void protocol witness for static FloatingPoint.greatestFiniteMagnitude.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 2139095039;
}

void protocol witness for static FloatingPoint.pi.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 1078530010;
}

void specialized static FloatingPoint.ulpOfOne.getter(_DWORD *a1@<X8>)
{
  *a1 = 872415232;
}

void protocol witness for static FloatingPoint.leastNormalMagnitude.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 0x800000;
}

void protocol witness for static FloatingPoint.leastNonzeroMagnitude.getter in conformance Half(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for FloatingPoint.sign.getter in conformance Half()
{
  _DWORD *v0;

  return *v0 >> 31;
}

uint64_t protocol witness for FloatingPoint.exponent.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Half.exponent.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for FloatingPoint.significand.getter in conformance Half@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  result = Float.significand.getter();
  *a1 = v3;
  return result;
}

float protocol witness for static FloatingPoint./ infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 / *a2;
  *a3 = result;
  return result;
}

float protocol witness for static FloatingPoint./= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result;

  result = *a1 / *a2;
  *a1 = result;
  return result;
}

void protocol witness for FloatingPoint.remainder(dividingBy:) in conformance Half(float *a1@<X0>, float *a2@<X8>)
{
  float *v2;

  *a2 = _stdlib_remainderf(*v2, *a1);
}

void protocol witness for FloatingPoint.formRemainder(dividingBy:) in conformance Half(float *a1)
{
  float *v1;

  *v1 = _stdlib_remainderf(*v1, *a1);
}

void protocol witness for FloatingPoint.truncatingRemainder(dividingBy:) in conformance Half(float *a1@<X0>, float *a2@<X8>)
{
  float *v2;

  *a2 = fmodf(*v2, *a1);
}

void protocol witness for FloatingPoint.formTruncatingRemainder(dividingBy:) in conformance Half(float *a1)
{
  float *v1;

  *v1 = fmodf(*v1, *a1);
}

void protocol witness for FloatingPoint.squareRoot() in conformance Half(float *a1@<X8>)
{
  float *v1;

  *a1 = _stdlib_squareRootf(*v1);
}

void protocol witness for FloatingPoint.formSquareRoot() in conformance Half()
{
  float *v0;

  *v0 = _stdlib_squareRootf(*v0);
}

float protocol witness for FloatingPoint.addingProduct(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float *v3;
  float result;

  result = *v3 + (float)(*a1 * *a2);
  *a3 = result;
  return result;
}

float protocol witness for FloatingPoint.addProduct(_:_:) in conformance Half(float *a1, float *a2)
{
  float *v2;
  float result;

  result = *v2 + (float)(*a1 * *a2);
  *v2 = result;
  return result;
}

float *protocol witness for static FloatingPoint.minimum(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;

  v3 = *result;
  v4 = *a2;
  if (*result > *a2 && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0))
    v3 = *a2;
  *a3 = v3;
  return result;
}

float *protocol witness for static FloatingPoint.maximum(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;

  v3 = *result;
  v4 = *a2;
  if (*a2 >= *result && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0))
    v3 = *a2;
  *a3 = v3;
  return result;
}

float *protocol witness for static FloatingPoint.minimumMagnitude(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;

  v3 = *result;
  v4 = *a2;
  if (fabsf(*result) > fabsf(*a2) && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0))
    v3 = *a2;
  *a3 = v3;
  return result;
}

float *protocol witness for static FloatingPoint.maximumMagnitude(_:_:) in conformance Half@<X0>(float *result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;

  v3 = *result;
  v4 = *a2;
  if (fabsf(*a2) >= fabsf(*result) && ((LODWORD(v4) & 0x7FFFFF) == 0 || (~LODWORD(v4) & 0x7F800000) != 0))
    v3 = *a2;
  *a3 = v3;
  return result;
}

uint64_t protocol witness for FloatingPoint.rounded(_:) in conformance Half@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2;
  return Half.round(_:)(a1);
}

void protocol witness for FloatingPoint.nextUp.getter in conformance Half(float *a1@<X8>)
{
  float *v1;
  float v2;

  v2 = *v1 + 0.0;
  if (v2 < INFINITY)
    LODWORD(v2) += (SLODWORD(v2) >> 31) | 1;
  *a1 = v2;
}

float protocol witness for FloatingPoint.nextDown.getter in conformance Half@<S0>(float *a1@<X8>)
{
  float *v1;
  float v2;
  float result;

  v2 = 0.0 - *v1;
  if (v2 < INFINITY)
    LODWORD(v2) += (SLODWORD(v2) >> 31) | 1;
  result = 0.0 - v2;
  *a1 = 0.0 - v2;
  return result;
}

BOOL protocol witness for FloatingPoint.isEqual(to:) in conformance Half(float *a1)
{
  float *v1;

  return *v1 == *a1;
}

BOOL protocol witness for FloatingPoint.isLess(than:) in conformance Half(float *a1)
{
  float *v1;

  return *v1 < *a1;
}

BOOL protocol witness for FloatingPoint.isLessThanOrEqualTo(_:) in conformance Half(float *a1)
{
  float *v1;

  return *v1 <= *a1;
}

uint64_t protocol witness for FloatingPoint.isTotallyOrdered(belowOrEqualTo:) in conformance Half(float *a1)
{
  float *v1;

  return specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(*a1, *v1);
}

uint64_t specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(float a1, float a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;
  _BOOL4 v9;

  if (a2 < a1)
    return 1;
  if ((LODWORD(a1) & 0x80000000) != 0)
  {
    if ((LODWORD(a2) & 0x80000000) != 0)
      goto LABEL_5;
    return LODWORD(a2) >> 31;
  }
  if ((LODWORD(a2) & 0x80000000) != 0)
    return LODWORD(a2) >> 31;
LABEL_5:
  v3 = (LODWORD(a2) >> 23);
  v4 = (LODWORD(a1) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = LODWORD(a1) & 0x7FFFFF;
  v8 = a2 >= 0.0 || v5 >= v6;
  if (v6 < v5)
    v9 = LODWORD(a2) >> 31;
  else
    v9 = v8;
  if (v3 < v4)
    v9 = a2 >= 0.0;
  if (v4 < v3)
    return LODWORD(a2) >> 31;
  else
    return v9;
}

BOOL protocol witness for FloatingPoint.isNormal.getter in conformance Half()
{
  _DWORD *v0;

  return (*v0 >> 23) != 255 && (*v0 >> 23) != 0;
}

BOOL protocol witness for FloatingPoint.isFinite.getter in conformance Half()
{
  _DWORD *v0;

  return (~*v0 & 0x7F800000) != 0;
}

BOOL protocol witness for FloatingPoint.isZero.getter in conformance Half()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFFFF) == 0;
}

BOOL protocol witness for FloatingPoint.isSubnormal.getter in conformance Half()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x7F800000) == 0;
}

BOOL protocol witness for FloatingPoint.isInfinite.getter in conformance Half()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFFFF) == 2139095040;
}

BOOL protocol witness for FloatingPoint.isNaN.getter in conformance Half()
{
  _DWORD *v0;

  return (*v0 & 0x7FFFFF) != 0 && (~*v0 & 0x7F800000) == 0;
}

BOOL protocol witness for FloatingPoint.isSignalingNaN.getter in conformance Half()
{
  _DWORD *v0;

  return (~*v0 & 0x7F800000) == 0 && (*v0 & 0x7FFFFF) != 0 && (*v0 & 0x400000) == 0;
}

uint64_t protocol witness for FloatingPoint.floatingPointClass.getter in conformance Half()
{
  float *v0;

  return specialized FloatingPoint.floatingPointClass.getter(*v0);
}

uint64_t specialized FloatingPoint.floatingPointClass.getter(float a1)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if (a1 < 0.0)
    v1 = 5;
  else
    v1 = 6;
  if (a1 < 0.0)
    v2 = 4;
  else
    v2 = 7;
  if ((LODWORD(a1) & 0x7FFFFF) != 0)
    v1 = v2;
  if (a1 < 0.0)
    v3 = 3;
  else
    v3 = 8;
  if (a1 < 0.0)
    v4 = 2;
  else
    v4 = 9;
  if ((LODWORD(a1) & 0x7FFFFF) != 0)
    v5 = (LODWORD(a1) >> 22) & 1;
  else
    v5 = v4;
  if ((LODWORD(a1) >> 23) != 255)
    v5 = v3;
  if ((LODWORD(a1) >> 23))
    return v5;
  else
    return v1;
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance Half@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float protocol witness for static SignedNumeric.- prefix(_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = 0.0 - *a1;
  *a2 = result;
  return result;
}

float protocol witness for SignedNumeric.negate() in conformance Half()
{
  float *v0;
  float result;

  result = 0.0 - *v0;
  *v0 = result;
  return result;
}

float protocol witness for Strideable.distance(to:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float *v2;
  float result;

  result = *a1 - *v2;
  *a2 = result;
  return result;
}

float protocol witness for Strideable.advanced(by:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float *v2;
  float result;

  result = *a1 + *v2;
  *a2 = result;
  return result;
}

float *protocol witness for static Strideable._step(after:from:by:) in conformance Half(float *result, uint64_t a2, char a3, float *a4, float *a5, float *a6)
{
  float v6;
  float v8;

  v6 = *a6;
  if ((a3 & 1) != 0)
  {
    v8 = v6 + *a4;
    goto LABEL_5;
  }
  if (!__OFADD__(a2++, 1))
  {
    v8 = *a5 + (float)(v6 * (float)a2);
LABEL_5:
    *result = v8;
    return (float *)a2;
  }
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Half()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Half()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Half()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

float protocol witness for Numeric.magnitude.getter in conformance Half@<S0>(float *a1@<X8>)
{
  float *v1;
  float result;

  result = fabsf(*v1);
  *a1 = result;
  return result;
}

float protocol witness for static Numeric.* infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

float protocol witness for static Numeric.*= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result;

  result = *a2 * *a1;
  *a1 = result;
  return result;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a1 <= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a2 <= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Half(float *a1, float *a2)
{
  return *a1 == *a2;
}

float protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

float protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result;

  result = *a2 + *a1;
  *a1 = result;
  return result;
}

float protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Half@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 - *a2;
  *a3 = result;
  return result;
}

float protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Half(float *a1, float *a2)
{
  float result;

  result = *a1 - *a2;
  *a1 = result;
  return result;
}

float protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance Half@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = (float)*a1;
  *a2 = result;
  return result;
}

uint64_t static HalfSIMDStorageSize2.get.getter()
{
  return 2;
}

uint64_t static HalfSIMDStorageSize4.get.getter()
{
  return 4;
}

uint64_t static HalfSIMDStorageSize8.get.getter()
{
  return 8;
}

uint64_t static HalfSIMDStorageSize16.get.getter()
{
  return 16;
}

uint64_t static HalfSIMDStorageSize32.get.getter()
{
  return 32;
}

uint64_t protocol witness for static HalfSIMDStorageSize.get.getter in conformance HalfSIMDStorageSize32()
{
  return 32;
}

uint64_t static HalfSIMDStorageSize64.get.getter()
{
  return 64;
}

uint64_t protocol witness for static HalfSIMDStorageSize.get.getter in conformance HalfSIMDStorageSize64()
{
  return 64;
}

uint64_t HalfSIMDStorage.scalarCount.getter(uint64_t a1)
{
  return specialized HalfSIMDStorage.scalarCount.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t HalfSIMDStorage.init()@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  int32x2_t v4;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(a1 + 8))();
  v4.i32[0] = 0;
  result = specialized Array.init(repeating:count:)(v3, v4);
  *a2 = result;
  return result;
}

unint64_t HalfSIMDStorage.subscript.getter@<X0>(unint64_t result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    *a2 = *(_DWORD *)(*(_QWORD *)v2 + 4 * result + 32);
    return result;
  }
  __break(1u);
  return result;
}

float key path getter for HalfSIMDStorage.subscript(_:) : <A>HalfSIMDStorage<A>A@<S0>(unint64_t *a1@<X1>, float *a2@<X8>)
{
  float result;
  float v4;

  HalfSIMDStorage.subscript.getter(*a1, &v4);
  result = v4;
  *a2 = v4;
  return result;
}

uint64_t key path setter for HalfSIMDStorage.subscript(_:) : <A>HalfSIMDStorage<A>A(int *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  int v5;

  v3 = *a3;
  v5 = *a1;
  return HalfSIMDStorage.subscript.setter(&v5, v3);
}

uint64_t HalfSIMDStorage.subscript.setter(int *a1, unint64_t a2)
{
  uint64_t *v2;
  int v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(_QWORD *)(v5 + 16) > a2)
  {
    *(_DWORD *)(v5 + 4 * a2 + 32) = v4;
    *v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*HalfSIMDStorage.subscript.modify(uint64_t (*result)(uint64_t a1, char a2), unint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;

  *((_QWORD *)result + 1) = a3;
  *((_QWORD *)result + 2) = v3;
  *(_QWORD *)result = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v3 + 16) > a2)
  {
    *((_DWORD *)result + 6) = *(_DWORD *)(*(_QWORD *)v3 + 4 * a2 + 32);
    return HalfSIMDStorage.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t HalfSIMDStorage.subscript.modify(uint64_t a1, char a2)
{
  unint64_t v3;
  int *v4;
  int v6;
  int v7;

  v3 = *(_QWORD *)a1;
  if ((a2 & 1) != 0)
  {
    v6 = *(_DWORD *)(a1 + 24);
    v4 = &v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 24);
    v4 = &v7;
  }
  return HalfSIMDStorage.subscript.setter(v4, v3);
}

uint64_t protocol witness for SIMDStorage.scalarCount.getter in conformance HalfSIMDStorage<A>(uint64_t a1)
{
  return specialized HalfSIMDStorage.scalarCount.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for SIMDStorage.init() in conformance HalfSIMDStorage<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return HalfSIMDStorage.init()(*(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for SIMDStorage.subscript.setter in conformance HalfSIMDStorage<A>(int *a1, unint64_t a2)
{
  int v3;

  v3 = *a1;
  return HalfSIMDStorage.subscript.setter(&v3, a2);
}

uint64_t (*protocol witness for SIMDStorage.subscript.modify in conformance HalfSIMDStorage<A>(uint64_t (**a1)(uint64_t a1, char a2), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)(uint64_t, char);

  v6 = (uint64_t (*)(uint64_t, char))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = HalfSIMDStorage.subscript.modify(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t specialized HalfSIMDStorage.scalarCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t specialized TexCoord3.subscript.setter(uint64_t a1)
{
  size_t v1;
  const void *v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t specialized Color4.subscript.setter(uint64_t a1)
{
  size_t v1;
  const void *v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t specialized Color3.red.setter(uint64_t a1)
{
  size_t v1;
  const void *v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t specialized TexCoord2.x.setter(uint64_t a1)
{
  size_t v1;
  const void *v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of SIMDStorage.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE4518], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

float specialized Float.init(sign:exponent:significand:)(char a1, uint64_t a2, float a3)
{
  float result;
  int v5;
  uint64_t v6;
  BOOL v7;

  result = -a3;
  if ((a1 & 1) == 0)
    result = a3;
  v5 = (LODWORD(a3) >> 23);
  if (v5 != 255 && v5 | LODWORD(a3) & 0x7FFFFF)
  {
    if (a2 >= -126)
    {
      if (a2 >= 128)
      {
        if (a2 >= 381)
          a2 = 381;
        do
        {
          a2 -= 127;
          result = result * 1.7014e38;
        }
        while ((unint64_t)a2 > 0x7F);
      }
    }
    else
    {
      if (a2 <= -378)
        v6 = -378;
      else
        v6 = a2;
      do
      {
        LODWORD(a2) = v6 + 126;
        result = result * 1.1755e-38;
        v7 = __CFADD__(v6, 252);
        v6 += 126;
      }
      while (!v7);
    }
    return result * COERCE_FLOAT((((_DWORD)a2 << 23) + 1065353216) & 0x7F800000);
  }
  return result;
}

float _stdlib_squareRootf(float a1)
{
  return sqrtf(a1);
}

unint64_t lazy protocol witness table accessor for type Half.CodingKeys and conformance Half.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half.CodingKeys, &unk_24F63D8C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half.CodingKeys, &unk_24F63D8C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half.CodingKeys, &unk_24F63D8C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys;
  if (!lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half.CodingKeys, &unk_24F63D8C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half.CodingKeys and conformance Half.CodingKeys);
  }
  return result;
}

void base witness table accessor for CustomStringConvertible in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Decodable in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Encodable in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Hashable in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for SIMDStorage in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void associated type witness table accessor for SIMD.MaskStorage : SIMD in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : FixedWidthInteger in Color3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : SignedInteger in Color3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>();
}

{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Encodable in Color3<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Hashable in Color3<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in Color3<A>();
}

void base witness table accessor for Equatable in Color3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for CustomStringConvertible in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Decodable in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Encodable in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Hashable in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for SIMDStorage in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void associated type witness table accessor for SIMD.MaskStorage : SIMD in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Equatable in Color4<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

unint64_t lazy protocol witness table accessor for type Frame4D and conformance Frame4D()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Frame4D, &type metadata for Frame4D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Frame4D, &type metadata for Frame4D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Frame4D, &type metadata for Frame4D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Frame4D, &type metadata for Frame4D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Frame4D, &type metadata for Frame4D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Frame4D, &type metadata for Frame4D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Frame4D, &type metadata for Frame4D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Frame4D and conformance Frame4D;
  if (!lazy protocol witness table cache variable for type Frame4D and conformance Frame4D)
  {
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Frame4D and conformance Frame4D);
  }
  return result;
}

uint64_t associated type witness table accessor for SIMD.MaskStorage : SIMD in Frame4D()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type SIMD16<Int64> and conformance SIMD16<A>, &demangling cache variable for type metadata for SIMD16<Int64>, MEMORY[0x24BEE4438]);
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE4048], MEMORY[0x24BEE4008]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE4030], MEMORY[0x24BEE4008]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Decodable in Frame4D()
{
  return MEMORY[0x24BEE1400];
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Encodable in Frame4D()
{
  return MEMORY[0x24BEE13D8];
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Hashable in Frame4D()
{
  return MEMORY[0x24BEE13E8];
}

void base witness table accessor for CustomStringConvertible in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Decodable in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Encodable in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Hashable in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for SIMDStorage in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void associated type witness table accessor for SIMD.MaskStorage : SIMD in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>();
}

{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Encodable in TexCoord2<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>();
}

uint64_t associated type witness table accessor for SIMDStorage.Scalar : Hashable in TexCoord2<A>()
{
  return associated type witness table accessor for SIMDStorage.Scalar : Decodable in TexCoord2<A>();
}

void base witness table accessor for Equatable in TexCoord2<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for CustomStringConvertible in TexCoord3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Decodable in TexCoord3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Encodable in TexCoord3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in TexCoord3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Hashable in TexCoord3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for SIMDStorage in TexCoord3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Equatable in TexCoord3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for CustomStringConvertible in Point3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Decodable in Point3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Encodable in Point3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in Point3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Hashable in Point3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for SIMDStorage in Point3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : FixedWidthInteger in Point3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for SIMD.MaskStorage.SIMDStorage.Scalar : SignedInteger in Point3<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void base witness table accessor for Equatable in Point3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for CustomStringConvertible in Vector3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Decodable in Vector3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Encodable in Vector3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in Vector3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Hashable in Vector3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for SIMDStorage in Vector3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Equatable in Vector3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for CustomStringConvertible in Normal3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Decodable in Normal3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Encodable in Normal3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in Normal3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Hashable in Normal3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for SIMDStorage in Normal3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Equatable in Normal3<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE1EB0], MEMORY[0x24BEE1E88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD16Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize16> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize16>, (uint64_t)&protocol conformance descriptor for HalfSIMDStorage<A>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD2Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize2> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize2>, (uint64_t)&protocol conformance descriptor for HalfSIMDStorage<A>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD32Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize32> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize32>, (uint64_t)&protocol conformance descriptor for HalfSIMDStorage<A>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD4Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize4> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize4>, (uint64_t)&protocol conformance descriptor for HalfSIMDStorage<A>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD64Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize64> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize64>, (uint64_t)&protocol conformance descriptor for HalfSIMDStorage<A>);
}

uint64_t associated type witness table accessor for SIMDScalar.SIMD8Storage : SIMDStorage in Half()
{
  return lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type HalfSIMDStorage<HalfSIMDStorageSize8> and conformance HalfSIMDStorage<A>, &demangling cache variable for type metadata for HalfSIMDStorage<HalfSIMDStorageSize8>, (uint64_t)&protocol conformance descriptor for HalfSIMDStorage<A>);
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in Half()
{
  return MEMORY[0x24BEE1560];
}

uint64_t associated type witness table accessor for Strideable.Stride : Comparable in Half()
{
  return MEMORY[0x24BEE1510];
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in Half()
{
  return MEMORY[0x24BEE1540];
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in Half()
{
  return MEMORY[0x24BEE4058];
}

uint64_t sub_22BCEBFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, type metadata accessor for Color3, (uint64_t (*)(uint64_t))Color3.red.getter);
}

uint64_t sub_22BCEBFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color3);
}

uint64_t sub_22BCEBFE0()
{
  return 24;
}

__n128 sub_22BCEBFEC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, type metadata accessor for Color3, (uint64_t (*)(uint64_t))Color3.green.getter);
}

uint64_t keypath_getTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = a4(0, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t sub_22BCEC060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color3);
}

uint64_t keypath_setTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a5(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return specialized Color3.red.setter(a1);
}

uint64_t sub_22BCEC0C0()
{
  return 24;
}

__n128 sub_22BCEC0CC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, type metadata accessor for Color3, (uint64_t (*)(uint64_t))Color3.blue.getter);
}

uint64_t sub_22BCEC0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color3);
}

uint64_t sub_22BCEC104()
{
  return 24;
}

__n128 sub_22BCEC110(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC124(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return key path getter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, type metadata accessor for Color3, Color3.subscript.getter);
}

uint64_t sub_22BCEC148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color3);
}

uint64_t sub_22BCEC164()
{
  return 24;
}

__n128 sub_22BCEC170(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.red.getter);
}

uint64_t sub_22BCEC198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color4);
}

uint64_t sub_22BCEC1A8()
{
  return 24;
}

__n128 sub_22BCEC1B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.green.getter);
}

uint64_t sub_22BCEC1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color4);
}

uint64_t sub_22BCEC1EC()
{
  return 24;
}

__n128 sub_22BCEC1F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.blue.getter);
}

uint64_t sub_22BCEC220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color4);
}

uint64_t sub_22BCEC230()
{
  return 24;
}

__n128 sub_22BCEC23C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, type metadata accessor for Color4, (uint64_t (*)(uint64_t))Color4.alpha.getter);
}

uint64_t sub_22BCEC264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color4);
}

uint64_t sub_22BCEC274()
{
  return 24;
}

__n128 sub_22BCEC280(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22BCEC294(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return key path getter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, type metadata accessor for Color4, (uint64_t (*)(uint64_t, uint64_t))Color4.subscript.getter);
}

uint64_t sub_22BCEC2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Color3.subscript(_:) : <A>Color3<A>A(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))type metadata accessor for Color4);
}

uint64_t sub_22BCEC2D4()
{
  return 24;
}

__n128 sub_22BCEC2E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

double sub_22BCEC2F4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *(double *)(a1 + 8 * (*a2 & 0xFLL));
  *a3 = result;
  return result;
}

double sub_22BCEC308(double *a1, uint64_t a2, unsigned int *a3)
{
  double result;

  result = *a1;
  *(double *)(a2 + 8 * *a3) = *a1;
  return result;
}

uint64_t sub_22BCEC318()
{
  return 0;
}

uint64_t sub_22BCEC328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t))TexCoord2.x.getter);
}

uint64_t sub_22BCEC33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2);
}

uint64_t sub_22BCEC34C()
{
  return 16;
}

__n128 sub_22BCEC358(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t))TexCoord2.y.getter);
}

uint64_t keypath_get_37Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD), uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = a4(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t sub_22BCEC3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2);
}

uint64_t keypath_set_38Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  a5(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return specialized TexCoord2.x.setter(a1);
}

uint64_t sub_22BCEC418()
{
  return 16;
}

__n128 sub_22BCEC424(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t))TexCoord2.z.getter);
}

uint64_t sub_22BCEC444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2);
}

uint64_t sub_22BCEC454()
{
  return 16;
}

__n128 sub_22BCEC460(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC46C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_49Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2, (uint64_t (*)(uint64_t, uint64_t))TexCoord2.subscript.getter);
}

uint64_t sub_22BCEC480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_50Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord2);
}

uint64_t sub_22BCEC48C()
{
  return 16;
}

__n128 sub_22BCEC498(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t))TexCoord3.x.getter);
}

uint64_t sub_22BCEC4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3);
}

uint64_t sub_22BCEC4C8()
{
  return 16;
}

__n128 sub_22BCEC4D4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t))TexCoord3.y.getter);
}

uint64_t sub_22BCEC4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3);
}

uint64_t sub_22BCEC504()
{
  return 16;
}

__n128 sub_22BCEC510(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t))TexCoord3.z.getter);
}

uint64_t sub_22BCEC530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3);
}

uint64_t sub_22BCEC540()
{
  return 16;
}

__n128 sub_22BCEC54C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC558(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_49Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3, (uint64_t (*)(uint64_t, uint64_t))TexCoord3.subscript.getter);
}

uint64_t keypath_get_49Tm(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a2;
  v7 = a4(0, *(uint64_t *)((char *)a2 + a3 - 16), *(uint64_t *)((char *)a2 + a3 - 8));
  return a5(v6, v7);
}

uint64_t sub_22BCEC5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_50Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TexCoord3);
}

uint64_t keypath_set_50Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  a5(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return specialized TexCoord3.subscript.setter(a1);
}

uint64_t sub_22BCEC61C()
{
  return 16;
}

__n128 sub_22BCEC628(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3, (uint64_t (*)(uint64_t))Point3.x.getter);
}

uint64_t sub_22BCEC648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3);
}

uint64_t sub_22BCEC658()
{
  return 16;
}

__n128 sub_22BCEC664(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3, (uint64_t (*)(uint64_t))Point3.y.getter);
}

uint64_t sub_22BCEC684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3);
}

uint64_t sub_22BCEC694()
{
  return 16;
}

__n128 sub_22BCEC6A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3, (uint64_t (*)(uint64_t))Point3.z.getter);
}

uint64_t sub_22BCEC6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3);
}

uint64_t sub_22BCEC6D0()
{
  return 16;
}

__n128 sub_22BCEC6DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC6E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_49Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3, Point3.subscript.getter);
}

uint64_t sub_22BCEC6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_50Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Point3);
}

uint64_t sub_22BCEC708()
{
  return 16;
}

__n128 sub_22BCEC714(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3, (uint64_t (*)(uint64_t))Vector3.x.getter);
}

uint64_t sub_22BCEC734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3);
}

uint64_t sub_22BCEC744()
{
  return 16;
}

__n128 sub_22BCEC750(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3, (uint64_t (*)(uint64_t))Vector3.y.getter);
}

uint64_t sub_22BCEC770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3);
}

uint64_t sub_22BCEC780()
{
  return 16;
}

__n128 sub_22BCEC78C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3, (uint64_t (*)(uint64_t))Vector3.z.getter);
}

uint64_t sub_22BCEC7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3);
}

uint64_t sub_22BCEC7BC()
{
  return 16;
}

__n128 sub_22BCEC7C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC7D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_49Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3, (uint64_t (*)(uint64_t, uint64_t))Vector3.subscript.getter);
}

uint64_t sub_22BCEC7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_50Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Vector3);
}

uint64_t sub_22BCEC7F4()
{
  return 16;
}

__n128 sub_22BCEC800(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3, (uint64_t (*)(uint64_t))Normal3.x.getter);
}

uint64_t sub_22BCEC820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3);
}

uint64_t sub_22BCEC830()
{
  return 16;
}

__n128 sub_22BCEC83C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3, (uint64_t (*)(uint64_t))Normal3.y.getter);
}

uint64_t sub_22BCEC85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3);
}

uint64_t sub_22BCEC86C()
{
  return 16;
}

__n128 sub_22BCEC878(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3, (uint64_t (*)(uint64_t))Normal3.z.getter);
}

uint64_t sub_22BCEC898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3);
}

uint64_t sub_22BCEC8A8()
{
  return 16;
}

__n128 sub_22BCEC8B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC8C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_get_49Tm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3, (uint64_t (*)(uint64_t, uint64_t))Normal3.subscript.getter);
}

uint64_t sub_22BCEC8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_50Tm(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Normal3);
}

uint64_t sub_22BCEC8E0()
{
  return 16;
}

__n128 sub_22BCEC8EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BCEC900()
{
  return 16;
}

__n128 sub_22BCEC90C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static CGFloatConvertable.from(cgFloat:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CGFloatConvertable.toCGFloat.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata instantiation function for Color3()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Color3()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Color3(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for Color3(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Color3(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Color3(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for Color3(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t dispatch thunk of ColorProtocol.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ColorProtocol.components.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata completion function for ManagedColor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ManagedColor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  void *v10;
  id v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = *(void **)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = v10;
    v11 = v10;
  }
  return v4;
}

void destroy for ManagedColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();

}

uint64_t initializeWithCopy for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFF8);
  v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  *v7 = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = v8;
  v10 = v8;

  return a1;
}

uint64_t initializeWithTake for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ManagedColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  *v7 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedColor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_22BCED2C4 + 4 * byte_22BD118AE[v10]))();
  }
}

void storeEnumTagSinglePayload for ManagedColor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_22BCED444()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x22BCED4C8);
}

void sub_22BCED44C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x22BCED454);
  JUMPOUT(0x22BCED4C8);
}

void sub_22BCED49C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x22BCED4C8);
}

void sub_22BCED4A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x22BCED4C8);
}

uint64_t sub_22BCED4AC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x22BCED4B8);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x22BCED4C8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

ValueMetadata *type metadata accessor for Frame4D()
{
  return &type metadata for Frame4D;
}

uint64_t type metadata instantiation function for TexCoord2()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for TexCoord2()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TexCoord2(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for TexCoord2(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TexCoord2(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TexCoord2(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for TexCoord2(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for Half()
{
  return &type metadata for Half;
}

uint64_t dispatch thunk of static HalfSIMDStorageSize.get.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize2()
{
  return &type metadata for HalfSIMDStorageSize2;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize4()
{
  return &type metadata for HalfSIMDStorageSize4;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize8()
{
  return &type metadata for HalfSIMDStorageSize8;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize16()
{
  return &type metadata for HalfSIMDStorageSize16;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize32()
{
  return &type metadata for HalfSIMDStorageSize32;
}

ValueMetadata *type metadata accessor for HalfSIMDStorageSize64()
{
  return &type metadata for HalfSIMDStorageSize64;
}

uint64_t type metadata accessor for HalfSIMDStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HalfSIMDStorage);
}

uint64_t storeEnumTagSinglePayload for Half.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BCEDBBC + 4 * byte_22BD118CB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BCEDBDC + 4 * byte_22BD118D0[v4]))();
}

_BYTE *sub_22BCEDBBC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BCEDBDC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCEDBE4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCEDBEC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCEDBF4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCEDBFC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Half.CodingKeys()
{
  return &unk_24F63D8C0;
}

uint64_t specialized Half.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x69796C7265646E75 && a2 == 0xEF65756C6156676ELL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t specialized Half.CodingKeys.stringValue.getter()
{
  return 0x69796C7265646E75;
}

uint64_t __RKEntityMoveEase.init(inputs:)()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  void *v12;
  Swift::String v14;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v12 = 0;
LABEL_12:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v12, 1);
    goto LABEL_13;
  }
  v1 = (void *)RIOPxrUsdPrimCopyAttribute();
  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2)
  {
LABEL_11:
    v12 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v3 = (void *)v2;
  v4 = RIOPxrVtValueCopyToken();
  if (!v4)
  {

    goto LABEL_11;
  }
  v5 = (void *)v4;

  swift_release();
  v6 = (void *)RIOPxrTfTokenCopyString();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v5, 0);
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  v10 = specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v14);
  if (v10 != 4)
  {
    v11 = v10;
    swift_release();
    __asm { BR              X10 }
  }
LABEL_13:
  lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError();
  swift_allocError();
  swift_willThrow();
  return swift_release();
}

void sub_22BCEE0A8()
{
  JUMPOUT(0x22BCEE0B0);
}

uint64_t __RKEntityMoveEaseType.init(inputs:)()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  void *v12;
  Swift::String v14;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v12 = 0;
LABEL_12:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v12, 1);
    goto LABEL_13;
  }
  v1 = (void *)RIOPxrUsdPrimCopyAttribute();
  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2)
  {
LABEL_11:
    v12 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v3 = (void *)v2;
  v4 = RIOPxrVtValueCopyToken();
  if (!v4)
  {

    goto LABEL_11;
  }
  v5 = (void *)v4;

  swift_release();
  v6 = (void *)RIOPxrTfTokenCopyString();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v5, 0);
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  v10 = specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v14);
  if (v10 != 4)
  {
    v11 = v10;
    swift_release();
    __asm { BR              X10 }
  }
LABEL_13:
  lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError();
  swift_allocError();
  swift_willThrow();
  return swift_release();
}

void sub_22BCEE2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BDE66F8];
  v2 = type metadata accessor for __RKEntityMoveEaseType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
  JUMPOUT(0x22BCEE2D8);
}

void sub_22BCEE304()
{
  JUMPOUT(0x22BCEE30CLL);
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError, &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError, &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

unint64_t specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEaseTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityMoveEase.MoveEaseLoadingError, &type metadata for __RKEntityMoveEase.MoveEaseLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityMoveEase.MoveEaseLoadingError, &type metadata for __RKEntityMoveEase.MoveEaseLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEase.MoveEaseLoadingError()
{
  return &type metadata for __RKEntityMoveEase.MoveEaseLoadingError;
}

uint64_t storeEnumTagSinglePayload for __RKEntityMoveEase.MoveEaseLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BCEE468 + 4 * byte_22BD13260[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BCEE488 + 4 * byte_22BD13265[v4]))();
}

_BYTE *sub_22BCEE468(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BCEE488(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCEE490(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCEE498(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCEE4A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCEE4A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  return &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
}

void one-time initialization function for OutputName(uint64_t a1)
{
  one-time initialization function for OutputName(a1, MEMORY[0x24BE26510], &static EntityBuilder.OutputName, algn_255BED398);
}

uint64_t static EntityBuilder.OutputName.getter()
{
  uint64_t v0;

  if (one-time initialization token for OutputName != -1)
    swift_once();
  v0 = static EntityBuilder.OutputName;
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for OutputIdentifier(uint64_t a1)
{
  one-time initialization function for OutputName(a1, MEMORY[0x24BE26508], &static EntityBuilder.OutputIdentifier, algn_255BFA2C8);
}

void one-time initialization function for OutputName(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, _QWORD *a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (void *)a2();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  *a3 = v7;
  *a4 = v9;
}

uint64_t EntityBuilder.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return v0;
}

uint64_t EntityBuilder.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return swift_deallocClassInstance();
}

uint64_t EntityProxy.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity;
  __AssetRef.__as<A>(_:)();
  RERelease();
  v3 = type metadata accessor for __EntityRef();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t EntityProxy.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity;
  __AssetRef.__as<A>(_:)();
  RERelease();
  v2 = type metadata accessor for __EntityRef();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t EntityProxy.coreEntityRef.getter()
{
  uint64_t v1;

  __AssetRef.__as<A>(_:)();
  return v1;
}

uint64_t EntityProxy.name.getter()
{
  __AssetRef.__as<A>(_:)();
  REEntityGetName();
  return String.init(cString:)();
}

uint64_t EntityProxy.parent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t Parent;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v0 = type metadata accessor for __EntityRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BEE27D0];
  __AssetRef.__as<A>(_:)();
  Parent = REEntityGetParent();
  if (!Parent)
    return 0;
  v6 = Parent;
  type metadata accessor for EntityProxy();
  v7 = swift_allocObject();
  v9[3] = v4;
  v9[0] = v6;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v7 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity, v3, v0);
  RERetain();
  return v7;
}

uint64_t type metadata accessor for EntityProxy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for EntityProxy;
  if (!type metadata singleton initialization cache for EntityProxy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for EntityBuilder()
{
  return objc_opt_self();
}

uint64_t ObjC metadata update function for EntityProxy()
{
  return type metadata accessor for EntityProxy();
}

uint64_t type metadata completion function for EntityProxy()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for __EntityRef();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for EntityProxy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EntityProxy.coreEntityRef.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of EntityProxy.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of EntityProxy.parent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t EntityBuilder.generateSwiftOutput(for:inputs:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t OutputEntity;
  uint64_t v6;
  void *v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  id v10;
  _QWORD v11[6];
  __int128 aBlock;
  __int128 v13;
  uint64_t (*v14)();
  uint64_t v15;
  __int128 v16;

  OutputEntity = RIOBuilderEntityBuilderGetOutputEntity();
  if (OutputEntity)
  {
    v11[2] = v2;
    v11[3] = a1;
    v11[4] = a2;
    v11[5] = MEMORY[0x24BDAC7A8](OutputEntity);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = partial apply for closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:);
    *(_QWORD *)(v6 + 24) = v11;
    v14 = partial apply for thunk for @callee_guaranteed () -> ();
    v15 = v6;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v13 = thunk for @escaping @callee_guaranteed () -> ();
    *((_QWORD *)&v13 + 1) = &block_descriptor_21;
    v7 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v7);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return result;
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  swift_beginAccess();
  v10 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (!v10)
    goto LABEL_8;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v16, &aBlock);
  type metadata accessor for Outputs();
  swift_dynamicCast();
  aBlock = 0u;
  v13 = 0u;
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&aBlock, a1, a2);
  return swift_release();
}

uint64_t closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = type metadata accessor for __EntityRef();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v12 = objc_getAssociatedObject(a1, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v17, &v18);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    v14 = type metadata accessor for EntityProxy();
    v15 = swift_allocObject();
    v19 = MEMORY[0x24BEE27D0];
    *(_QWORD *)&v18 = a4;
    swift_bridgeObjectRetain();
    static __EntityRef.__fromCore(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity, v11, v8);
    RERetain();
    v19 = v14;
    *(_QWORD *)&v18 = v15;
    Outputs.subscript.setter((uint64_t)&v18, a2, a3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:)()
{
  uint64_t v0;

  return closure #1 in EntityBuilder.generateSwiftOutput(for:inputs:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_22BCEEDC0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t __RKEntityEmphasisAnimationType.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v5 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v5 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v14 = 0;
LABEL_12:
    v16[1] = v14;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v14, 1);
    goto LABEL_13;
  }
  v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  v7 = RIOPxrUsdAttributeCopyValue();
  if (!v7)
  {
LABEL_11:
    v14 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v8 = (void *)v7;
  v9 = RIOPxrVtValueCopyToken();
  if (!v9)
  {

    goto LABEL_11;
  }
  v10 = (void *)v9;

  swift_release();
  v11 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v10, 0);
  __RKEntityEmphasisAnimationType.init(rawValue:)();
  v12 = type metadata accessor for __RKEntityEmphasisAnimationType();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v4, 1, v12) == 1)
  {
    outlined destroy of __RKEntityEmphasisAnimationType?((uint64_t)v4);
LABEL_13:
    lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v4, v12);
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

uint64_t outlined destroy of __RKEntityEmphasisAnimationType?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BCEF11C + 4 * byte_22BD13460[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BCEF13C + 4 * byte_22BD13465[v4]))();
}

_BYTE *sub_22BCEF11C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BCEF13C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCEF144(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCEF14C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCEF154(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCEF15C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
}

uint64_t specialized static ColorSpaces.ocioName(fromCGColor:)(CGColor *a1)
{
  CGColorSpace *v1;
  CGColorSpace *v2;
  __CFString *v3;
  id v4;
  id v5;

  v1 = CGColorGetColorSpace(a1);
  if (v1)
  {
    v2 = v1;
    v3 = (__CFString *)CGColorSpaceCopyName(v1);

    if (v3)
    {
      v4 = (id)MEMORY[0x22E2F610C](v3);
      if (v4)
      {
        v5 = v4;
        static Array._conditionallyBridgeFromObjectiveC(_:result:)();

      }
    }
  }
  return 0;
}

uint64_t one-time initialization function for rioAudio()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.rioAudio);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.rioAudio);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:)(__n128 a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  __n128 v19;

  v19 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __RKEntityActionSpecification();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  __RKEntityForceActionArguments.init(target:force:velocity:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BDE69C0], v10);
  v14 = *a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
    *a4 = v14;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v14);
    *a4 = v14;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v17, v13, v10);
}

uint64_t specialized static ActionBuilder.generateImpulseActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[4];
  char v19;

  v0 = type metadata accessor for __RKEntityGroupActionOrder();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)v18);

  v5 = swift_release();
  v6 = (void *)v18[0];
  v7 = v18[1];
  v8 = v18[2];
  if ((v19 & 1) != 0)
  {
    v9 = v18[3];
    v17[1] = v18[0];
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Vector3<Double>, Object.Error>(v6, v7, v8, v9, 1);
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    v18[0] = MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](v5);
    v17[-4] = v18;
    *(_OWORD *)&v17[-2] = v11;
    if (one-time initialization token for OutputName != -1)
      swift_once();
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:), (uint64_t)&v17[-6]);
    v10 = v18[0];
    if (*(_QWORD *)(v18[0] + 16) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v12 = type metadata accessor for __RKEntityActionSpecification();
      v13 = *(_QWORD *)(v12 - 8);
      v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_22BD0C360;
      (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE68D0], v0);
      swift_bridgeObjectRetain();
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v13 + 104))(v15 + v14, *MEMORY[0x24BDE69C8], v12);
      swift_bridgeObjectRelease();
      return v15;
    }
  }
  return v10;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateImpulseActionSpecifications(inputs:)(*(__n128 *)(v2 + 32), a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t specialized Builder.generateOutputs()()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t result;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;

  v1 = v0;
  swift_beginAccess();
  v2 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.CoreReference);
  result = swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v9, &v10);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    v4 = (void *)RIOBuilderOutputsCreate();

    v5 = (id)RIOBuilderOutputsGetSwiftObject();
    type metadata accessor for Outputs();
    if (v5)
    {
      v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      v6 = (uint64_t)Outputs.init(core:)((uint64_t)v4);
    }
    v7 = (void *)v6;
    swift_beginAccess();
    swift_retain();
    objc_setAssociatedObject(v1, &static BuilderAssociatedKeys.OutputsReference, v7, (void *)1);
    swift_endAccess();

    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _BaseBuilder.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return v0;
}

uint64_t _BaseBuilder.stageSubscription.getter()
{
  void *v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v0 = (void *)RIOBuilderCopyDirtyStageSubscription();
  v1 = (void *)RIOBuilderDirtyStageSubscriptionCopyDirtyStageDescriptors();
  type metadata accessor for RIOBuilderDirtyStageDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v2 = MEMORY[0x24BEE4AF8];
  v3 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v4 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
LABEL_12:
    v9 = specialized Set.init<A>(_:)(v8);

    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_11;
LABEL_3:
  v10 = v2;
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x22E2F57B8](v6, v3);
      else
        v7 = *(id *)(v3 + 8 * v6 + 32);
      ++v6;
      specialized StageDirtyState.__allocating_init(core:)((uint64_t)v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v4 != v6);
    v8 = v10;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

unint64_t _BaseBuilder.buildOrder.getter@<X0>(_BYTE *a1@<X8>)
{
  unint64_t result;

  result = RIOBuilderCopyBuildOrder();
  if (result >= 4)
  {
    type metadata accessor for RIOBuilderBuildOrder(0);
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    *a1 = result;
  }
  return result;
}

uint64_t _BaseBuilder.inputDescriptors()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v0 = (void *)RIOBuilderCopyInputsDescriptor();
  v1 = (void *)RIOBuilderInputsDescriptorCopyInputDescriptors();
  *(_QWORD *)&v32 = 0;
  type metadata accessor for RIOBuilderInputDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v2 = MEMORY[0x24BEE4AF8];
  v3 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v4 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v25 = specialized Set.init<A>(_:)(v6);

    swift_bridgeObjectRelease();
    return v25;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_16;
LABEL_3:
  v36 = v2;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = v36;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v7 = 0;
      do
      {
        v8 = MEMORY[0x22E2F57B8](v7, v3);
        static InputDescriptor.create(from:)(v8, (uint64_t)&v32);
        swift_unknownObjectRelease();
        v9 = v32;
        v10 = v33;
        v11 = v34;
        v12 = v35;
        v36 = v6;
        v14 = *(_QWORD *)(v6 + 16);
        v13 = *(_QWORD *)(v6 + 24);
        if (v14 >= v13 >> 1)
        {
          v28 = v33;
          v30 = v32;
          v26 = v34;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          v11 = v26;
          v10 = v28;
          v9 = v30;
          v6 = v36;
        }
        ++v7;
        *(_QWORD *)(v6 + 16) = v14 + 1;
        v15 = v6 + 56 * v14;
        *(_OWORD *)(v15 + 32) = v9;
        *(_OWORD *)(v15 + 48) = v10;
        *(_OWORD *)(v15 + 64) = v11;
        *(_BYTE *)(v15 + 80) = v12;
      }
      while (v4 != v7);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(id *)(v3 + 8 * v16 + 32);
        static InputDescriptor.create(from:)((uint64_t)v17, (uint64_t)&v32);

        v18 = v32;
        v19 = v33;
        v20 = v34;
        v21 = v35;
        v36 = v6;
        v23 = *(_QWORD *)(v6 + 16);
        v22 = *(_QWORD *)(v6 + 24);
        if (v23 >= v22 >> 1)
        {
          v29 = v33;
          v31 = v32;
          v27 = v34;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          v20 = v27;
          v19 = v29;
          v18 = v31;
          v6 = v36;
        }
        ++v16;
        *(_QWORD *)(v6 + 16) = v23 + 1;
        v24 = v6 + 56 * v23;
        *(_OWORD *)(v24 + 32) = v18;
        *(_OWORD *)(v24 + 48) = v19;
        *(_OWORD *)(v24 + 64) = v20;
        *(_BYTE *)(v24 + 80) = v21;
      }
      while (v4 != v16);
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t _BaseBuilder.outputDescriptors()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v0 = (void *)RIOBuilderCopyOutputsDescriptor();
  v1 = (void *)RIOBuilderOutputsDescriptorCopyOutputDescriptors();
  type metadata accessor for RIOBuilderOutputDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v2 = MEMORY[0x24BEE4AF8];
  v3 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v4 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    v35 = specialized Set.init<A>(_:)(v2);

    swift_bridgeObjectRelease();
    return v35;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v36 = v0;
    v37 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v6 = 0;
      do
      {
        MEMORY[0x22E2F57B8](v6, v3);
        v7 = (void *)RIOBuilderOutputDescriptorCopyOutputName();
        v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v10 = v9;

        v11 = (void *)RIOBuilderOutputDescriptorCopyOutputIdentifier();
        v12 = (void *)RIOPxrTfTokenCopyString();
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v15 = v14;

        v16 = RIOBuilderOutputDescriptorCopyOptionality();
        swift_unknownObjectRelease();
        v18 = *(_QWORD *)(v2 + 16);
        v17 = *(_QWORD *)(v2 + 24);
        if (v18 >= v17 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        ++v6;
        *(_QWORD *)(v2 + 16) = v18 + 1;
        v19 = v2 + 40 * v18;
        *(_QWORD *)(v19 + 32) = v8;
        *(_QWORD *)(v19 + 40) = v10;
        *(_QWORD *)(v19 + 48) = v13;
        *(_QWORD *)(v19 + 56) = v15;
        *(_BYTE *)(v19 + 64) = v16 == 0;
        v3 = v37;
      }
      while (v4 != v6);
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = *(id *)(v3 + 8 * v20 + 32);
        v22 = (void *)RIOBuilderOutputDescriptorCopyOutputName();
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v25 = v24;

        v26 = (void *)RIOBuilderOutputDescriptorCopyOutputIdentifier();
        v27 = (void *)RIOPxrTfTokenCopyString();
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v30 = v29;

        v31 = RIOBuilderOutputDescriptorCopyOptionality();
        v33 = *(_QWORD *)(v2 + 16);
        v32 = *(_QWORD *)(v2 + 24);
        if (v33 >= v32 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        ++v20;
        *(_QWORD *)(v2 + 16) = v33 + 1;
        v34 = v2 + 40 * v33;
        *(_QWORD *)(v34 + 32) = v23;
        *(_QWORD *)(v34 + 40) = v25;
        *(_QWORD *)(v34 + 48) = v28;
        *(_QWORD *)(v34 + 56) = v30;
        *(_BYTE *)(v34 + 64) = v31 == 0;
        v3 = v37;
      }
      while (v4 != v20);
    }
    swift_bridgeObjectRelease();
    v0 = v36;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t _BaseBuilder.clear(inputs:)()
{
  return RIOBuilderSetSwiftObject();
}

uint64_t _BaseBuilder.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  RIOBuilderSetSwiftObject();

  return swift_deallocClassInstance();
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Capsule.radius.modify in conformance Schema;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x22E2F57B8](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22E2F57B8](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for TimelineBuilder.Error;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _BaseBuilder()
{
  return objc_opt_self();
}

uint64_t method lookup function for _BaseBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _BaseBuilder.stageSubscription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of _BaseBuilder.buildOrder.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of _BaseBuilder.inputDescriptors()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of _BaseBuilder.outputDescriptors()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of _BaseBuilder.run(inputs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of _BaseBuilder.clear(inputs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t specialized static _BaseBuilder.create(from:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;

  v2 = (id)RIOBuilderGetSwiftObject();
  if (!v2)
    goto LABEL_7;
  v3 = (uint64_t)v2;
  swift_getObjectType();
  if (swift_conformsToProtocol2())
    v4 = v3;
  else
    v4 = 0;
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_7:
    v5 = (void *)RIOBuilderCopyIdentifier();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    if ((static _CFObject.== infix(_:_:)() & 1) != 0)
    {
      type metadata accessor for EntityBuilder();
      v4 = swift_allocObject();
      *(_QWORD *)(v4 + 16) = a1;
      swift_beginAccess();
      v6 = a1;
      v7 = (void *)swift_retain();
      objc_setAssociatedObject(v7, &static BuilderAssociatedKeys.CoreReference, v6, (void *)1);
      swift_endAccess();
      swift_release();
      RIOBuilderSetSwiftObject();
      swift_retain();
      specialized Builder.generateOutputs()();
      swift_release();

    }
    else
    {

      return 0;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Path.string.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrSdfPathCopyString();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t SceneDescriptionFoundations.Path.parentPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCopyParentPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.isEmpty.getter()
{
  return RIOPxrSdfPathIsEmpty();
}

uint64_t SceneDescriptionFoundations.AssetPath.string.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

void *SceneDescriptionFoundations.AssetPath.referencedData.getter()
{
  id *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *v0;
  v2 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v3 = (void *)RIOPxrUtilsCopyCFDataWithArAssetPath();
  swift_release();
  if (v3)
  {
    v4 = v3;
    v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error();
    swift_allocError();
    swift_willThrow();
  }
  return v3;
}

Swift::String __swiftcall SceneDescriptionFoundations.Path.name()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v0 = (void *)RIOPxrSdfPathCopyName();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  v4 = v1;
  v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *);
  uint64_t result;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v13);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  return result;
}

uint64_t static SceneDescriptionFoundations.Path.Empty.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateEmptyPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)((uint64_t (*)(uint64_t))MEMORY[0x24BE26CE0], a1);
}

uint64_t static SceneDescriptionFoundations.AssetPath.Empty.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfAssetPathCreateEmptyPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)((uint64_t (*)(uint64_t))MEMORY[0x24BE268A0], a1);
}

uint64_t SceneDescriptionFoundations.Path.init(string:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)((uint64_t (*)(uint64_t))MEMORY[0x24BE26CE0], a1);
}

uint64_t static SceneDescriptionFoundations.Path.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static SceneDescriptionFoundations.Path.== infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

uint64_t SceneDescriptionFoundations.Path.isPropertyPath.getter()
{
  return RIOPxrSdfPathIsPropertyPath();
}

uint64_t SceneDescriptionFoundations.Path.isNamespacedPropertyPath.getter()
{
  return RIOPxrSdfPathIsNamespacedPropertyPath();
}

uint64_t SceneDescriptionFoundations.Path.primPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCopyPrimPath();
  *a1 = result;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Path.elementString()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v0 = (void *)RIOPxrSdfPathCopyElementString();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  v4 = v1;
  v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t static SceneDescriptionFoundations.Path.< infix(_:_:)()
{
  return RIOPxrSdfPathIsLessThan();
}

uint64_t SceneDescriptionFoundations.Path.description.getter()
{
  return SceneDescriptionFoundations.Path.description.getter(MEMORY[0x24BE26C30]);
}

uint64_t SceneDescriptionFoundations.Path.debugDescription.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *v0;
  v2 = (void *)RIOPxrSdfPathCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A687461503CLL;
}

void SceneDescriptionFoundations.Path.hash(into:)(uint64_t a1)
{
  SceneDescriptionFoundations.Path.hash(into:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

Swift::Int SceneDescriptionFoundations.Path.hashValue.getter()
{
  return SceneDescriptionFoundations.Path.hashValue.getter((uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, a4, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.Path()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (void *)RIOPxrSdfPathCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance SceneDescriptionFoundations.Path()
{
  return RIOPxrSdfPathIsLessThan();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path((uint64_t (*)(uint64_t))MEMORY[0x24BE26CE0], a1);
}

uint64_t SceneDescriptionFoundations.Path.init(stringLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)((uint64_t (*)(uint64_t))MEMORY[0x24BE26CE0], a1);
}

uint64_t static SceneDescriptionFoundations.Path.AbsoluteRoot.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateAbsoluteRootPath();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.Path.ReflexiveRelative.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateReflexiveRelativePath();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall String.isIsValidPathIdentifier()()
{
  uint64_t v0;
  uint64_t v1;

  return String.isIsValidPathIdentifier()(v0, v1, MEMORY[0x24BE26D80]);
}

Swift::Bool __swiftcall String.isValidNamespacedPathIdentifier()()
{
  uint64_t v0;
  uint64_t v1;

  return String.isIsValidPathIdentifier()(v0, v1, MEMORY[0x24BE26D88]);
}

Swift::Bool __swiftcall String.isValidPath()()
{
  uint64_t v0;
  uint64_t v1;

  return String.isIsValidPathIdentifier()(v0, v1, MEMORY[0x24BE26D90]);
}

uint64_t String.isIsValidPathIdentifier()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = String.utf8CString.getter();
  v5 = a3(v4 + 32);
  swift_release();
  return v5;
}

uint64_t SceneDescriptionFoundations.Path.pathElementCount.getter()
{
  return RIOPxrSdfPathGetPathElementCount();
}

uint64_t SceneDescriptionFoundations.Path.isAbsolutePath.getter()
{
  return RIOPxrSdfPathIsAbsolutePath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimPath.getter()
{
  return RIOPxrSdfPathIsPrimPath();
}

uint64_t SceneDescriptionFoundations.Path.isAbsoluteRootOrPrimPath.getter()
{
  return RIOPxrSdfPathIsAbsoluteRootOrPrimPath();
}

uint64_t SceneDescriptionFoundations.Path.isRootPrimPath.getter()
{
  return RIOPxrSdfPathIsRootPrimPath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimPropertyPath.getter()
{
  return RIOPxrSdfPathIsPrimPropertyPath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimVariantSelectionPath.getter()
{
  return RIOPxrSdfPathIsPrimVariantSelectionPath();
}

uint64_t SceneDescriptionFoundations.Path.isPrimOrPrimVariantSelectionPath.getter()
{
  return RIOPxrSdfPathIsPrimOrPrimVariantSelectionPath();
}

uint64_t SceneDescriptionFoundations.Path.containsPrimVariantSelection.getter()
{
  return RIOPxrSdfPathContainsPrimVariantSelection();
}

uint64_t SceneDescriptionFoundations.Path.containsPropertyElements.getter()
{
  return RIOPxrSdfPathContainsPropertyElements();
}

uint64_t SceneDescriptionFoundations.Path.containsTargetPath.getter()
{
  return RIOPxrSdfPathContainsTargetPath();
}

uint64_t SceneDescriptionFoundations.Path.isRelationalAttributePath.getter()
{
  return RIOPxrSdfPathIsRelationalAttributePath();
}

uint64_t SceneDescriptionFoundations.Path.isTargetPath.getter()
{
  return RIOPxrSdfPathIsTargetPath();
}

uint64_t SceneDescriptionFoundations.Path.isMapperPath.getter()
{
  return RIOPxrSdfPathIsMapperPath();
}

uint64_t SceneDescriptionFoundations.Path.isMapperArgPath.getter()
{
  return RIOPxrSdfPathIsMapperArgPath();
}

uint64_t SceneDescriptionFoundations.Path.isExpressionPath.getter()
{
  return RIOPxrSdfPathIsExpressionPath();
}

uint64_t SceneDescriptionFoundations.Path.prefixes()()
{
  return SceneDescriptionFoundations.Path.prefixes()(MEMORY[0x24BE26C18]);
}

uint64_t SceneDescriptionFoundations.Path.targetPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCopyTargetPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.allTargetPathsRecursively()()
{
  return SceneDescriptionFoundations.Path.prefixes()(MEMORY[0x24BE26BF0]);
}

uint64_t SceneDescriptionFoundations.Path.prefixes()(uint64_t (*a1)(_QWORD))
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  id v15;

  v2 = (void *)a1(*v1);
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v3 = MEMORY[0x24BEE4AF8];
  v4 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v5 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v3;
    if ((v4 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v5; ++i)
      {
        v9 = MEMORY[0x22E2F57B8](i, v4);
        v11 = *(_QWORD *)(v7 + 16);
        v10 = *(_QWORD *)(v7 + 24);
        if (v11 >= v10 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        *(_QWORD *)(v7 + 16) = v11 + 1;
        *(_QWORD *)(v7 + 8 * v11 + 32) = v9;
      }
    }
    else
    {
      for (j = 0; j != v5; ++j)
      {
        v13 = *(_QWORD *)(v3 + 16);
        v14 = *(_QWORD *)(v3 + 24);
        v15 = *(id *)(v4 + 8 * j + 32);
        if (v13 >= v14 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
        *(_QWORD *)(v3 + 16) = v13 + 1;
        *(_QWORD *)(v3 + 8 * v13 + 32) = v15;
      }
    }
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

Swift::tuple_String_String __swiftcall SceneDescriptionFoundations.Path.variantSelection()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::tuple_String_String result;

  v0 = (void *)RIOPxrSdfPathCopyVariantSelection();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v1 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
    v3 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 40);
    v4 = MEMORY[0x24BEE4AF8] + 32 + 16 * v1;
    v5 = *(_QWORD *)(v4 - 16);
    v6 = *(_QWORD *)(v4 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
    v2 = 0;
    v6 = 0xE000000000000000;
    v3 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  v7 = v2;
  v8 = (void *)v3;
  v9 = v5;
  v10 = (void *)v6;
  result._1._object = v10;
  result._1._countAndFlagsBits = v9;
  result._0._object = v8;
  result._0._countAndFlagsBits = v7;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.primOrPrimVariantSelectionPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCopyPrimOrPrimVariantSelectionPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.absoluteRootOrPrimPath()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCopyAbsoluteRootOrPrimPath();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Path.hasPrefix(_:)(Swift::String a1)
{
  void *v1;
  char HasPrefix;

  String.utf8CString.getter();
  v1 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  HasPrefix = RIOPxrSdfPathHasPrefix();

  return HasPrefix;
}

uint64_t SceneDescriptionFoundations.Path.hasPrefix(_:)()
{
  return RIOPxrSdfPathHasPrefix();
}

void SceneDescriptionFoundations.Path.replaceName(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyReplacingName;

  v1 = *v0;
  CopyReplacingName = RIOPxrSdfPathCreateCopyReplacingName();

  *v0 = (void *)CopyReplacingName;
}

uint64_t SceneDescriptionFoundations.Path.replacingName(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyReplacingName();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Path.stripAllVariantSelections()()
{
  void **v0;
  void *v1;
  uint64_t CopyStrippingAllVariantSelections;

  v1 = *v0;
  CopyStrippingAllVariantSelections = RIOPxrSdfPathCreateCopyStrippingAllVariantSelections();

  *v0 = (void *)CopyStrippingAllVariantSelections;
}

uint64_t SceneDescriptionFoundations.Path.strippingAllVariantSelections()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyStrippingAllVariantSelections();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.append(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingPath;

  v1 = *v0;
  CopyAppendingPath = RIOPxrSdfPathCreateCopyAppendingPath();

  *v0 = (void *)CopyAppendingPath;
}

uint64_t SceneDescriptionFoundations.Path.appending(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingPath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendChild(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingChild;

  v1 = *v0;
  CopyAppendingChild = RIOPxrSdfPathCreateCopyAppendingChild();

  *v0 = (void *)CopyAppendingChild;
}

uint64_t SceneDescriptionFoundations.Path.appendingChild(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingChild();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendProperty(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingProperty;

  v1 = *v0;
  CopyAppendingProperty = RIOPxrSdfPathCreateCopyAppendingProperty();

  *v0 = (void *)CopyAppendingProperty;
}

uint64_t SceneDescriptionFoundations.Path.appendingProperty(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingProperty();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Path.appendVariantSelection(variantSet:variant:)(Swift::String variantSet, Swift::String variant)
{
  void **v2;
  void *v3;
  uint64_t CopyAppendingVariantSelection;

  v3 = *v2;
  String.utf8CString.getter();
  String.utf8CString.getter();
  CopyAppendingVariantSelection = RIOPxrSdfPathCreateCopyAppendingVariantSelection();

  swift_release();
  swift_release();
  *v2 = (void *)CopyAppendingVariantSelection;
}

uint64_t SceneDescriptionFoundations.Path.appendingVariantSelection(variantSet:variant:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t CopyAppendingVariantSelection;
  uint64_t result;

  String.utf8CString.getter();
  String.utf8CString.getter();
  CopyAppendingVariantSelection = RIOPxrSdfPathCreateCopyAppendingVariantSelection();
  swift_release();
  result = swift_release();
  *a1 = CopyAppendingVariantSelection;
  return result;
}

void SceneDescriptionFoundations.Path.appendTarget(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingTarget;

  v1 = *v0;
  CopyAppendingTarget = RIOPxrSdfPathCreateCopyAppendingTarget();

  *v0 = (void *)CopyAppendingTarget;
}

uint64_t SceneDescriptionFoundations.Path.appendingTarget(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingTarget();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendRelationalAttribute(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingRelationalAttribute;

  v1 = *v0;
  CopyAppendingRelationalAttribute = RIOPxrSdfPathCreateCopyAppendingRelationalAttribute();

  *v0 = (void *)CopyAppendingRelationalAttribute;
}

uint64_t SceneDescriptionFoundations.Path.appendingRelationalAttribute(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingRelationalAttribute();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.replaceTargetPath(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyReplacingTargetPath;

  v1 = *v0;
  CopyReplacingTargetPath = RIOPxrSdfPathCreateCopyReplacingTargetPath();

  *v0 = (void *)CopyReplacingTargetPath;
}

uint64_t SceneDescriptionFoundations.Path.replacingTargetPath(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyReplacingTargetPath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendMapper(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingMapper;

  v1 = *v0;
  CopyAppendingMapper = RIOPxrSdfPathCreateCopyAppendingMapper();

  *v0 = (void *)CopyAppendingMapper;
}

uint64_t SceneDescriptionFoundations.Path.appendingMapper(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingMapper();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendMapperArg(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingMapperArg;

  v1 = *v0;
  CopyAppendingMapperArg = RIOPxrSdfPathCreateCopyAppendingMapperArg();

  *v0 = (void *)CopyAppendingMapperArg;
}

uint64_t SceneDescriptionFoundations.Path.appendingMapperArg(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingMapperArg();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Path.appendExpression()()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingExpression;

  v1 = *v0;
  CopyAppendingExpression = RIOPxrSdfPathCreateCopyAppendingExpression();

  *v0 = (void *)CopyAppendingExpression;
}

uint64_t SceneDescriptionFoundations.Path.appendingExpression()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingExpression();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.appendElement(_:)()
{
  void **v0;
  void *v1;
  uint64_t CopyAppendingElementToken;

  v1 = *v0;
  CopyAppendingElementToken = RIOPxrSdfPathCreateCopyAppendingElementToken();

  *v0 = (void *)CopyAppendingElementToken;
}

uint64_t SceneDescriptionFoundations.Path.appendingElement(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyAppendingElementToken();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.replacePrefix(_:with:fixTargetPaths:)()
{
  void **v0;
  void *v1;
  uint64_t CopyReplacingPrefix;

  v1 = *v0;
  CopyReplacingPrefix = RIOPxrSdfPathCreateCopyReplacingPrefix();

  *v0 = (void *)CopyReplacingPrefix;
}

uint64_t SceneDescriptionFoundations.Path.replacingPrefix(_:with:fixTargetPaths:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyReplacingPrefix();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Path.commonPrefix(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCopyCommonPrefix();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.makeAbsolutePath(with:)()
{
  void **v0;
  void *v1;
  uint64_t CopyMakingAbsolutePath;

  v1 = *v0;
  CopyMakingAbsolutePath = RIOPxrSdfPathCreateCopyMakingAbsolutePath();

  *v0 = (void *)CopyMakingAbsolutePath;
}

uint64_t SceneDescriptionFoundations.Path.makingAbsolutePath(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyMakingAbsolutePath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.makeRelativePath(with:)()
{
  void **v0;
  void *v1;
  uint64_t CopyMakingRelativePath;

  v1 = *v0;
  CopyMakingRelativePath = RIOPxrSdfPathCreateCopyMakingRelativePath();

  *v0 = (void *)CopyMakingRelativePath;
}

uint64_t SceneDescriptionFoundations.Path.makingRelativePath(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfPathCreateCopyMakingRelativePath();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Path.removeCommonSuffix(_:stopAtRootPrim:)(void **a1)
{
  void **v1;
  void *v3;
  void *v4;
  void *CopyRemovingCommonSuffix;
  uint64_t v6;
  uint64_t v7;
  id EmptyPath;
  unint64_t v9;
  id v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *a1;
  CopyRemovingCommonSuffix = (void *)RIOPxrSdfPathCreateCopyRemovingCommonSuffix();
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v6 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
    swift_bridgeObjectRelease();
    v11 = RIOPxrSdfPathCreateEmptyPath();

    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      EmptyPath = *(id *)(v6 + 32);
      swift_bridgeObjectRelease();
      v9 = v7 - 1;
      if (!__OFSUB__(v7, 1))
      {
        if ((v9 & 0x8000000000000000) == 0)
        {
          if (v9 < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            v10 = *(id *)(v6 + 32 + 8 * v9);
LABEL_9:
            v11 = (uint64_t)v10;

            swift_bridgeObjectRelease();
LABEL_12:
            *v1 = EmptyPath;
            *a1 = (void *)v11;
            return;
          }
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  EmptyPath = (id)MEMORY[0x22E2F57B8](0, v6);
  swift_bridgeObjectRelease();
  if (!__OFSUB__(v7, 1))
  {
    v10 = (id)MEMORY[0x22E2F57B8](v7 - 1, v6);
    goto LABEL_9;
  }
LABEL_19:
  __break(1u);
}

uint64_t SceneDescriptionFoundations.Path.removingCommonSuffix(_:stopAtRootPrim:)(uint64_t *a1, _QWORD *a2)
{
  void *CopyRemovingCommonSuffix;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t j;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t EmptyPath;

  CopyRemovingCommonSuffix = (void *)RIOPxrSdfPathCreateCopyRemovingCommonSuffix();
  type metadata accessor for RIOPxrSdfPathRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v18 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v18)
    {
LABEL_15:
      v19 = (void *)v9[4];
      *a1 = (uint64_t)v19;
      v20 = (void *)v9[v18 + 3];
      v21 = v19;
      v22 = v20;
      result = swift_bridgeObjectRelease();
LABEL_19:
      *a2 = v22;
      return result;
    }
LABEL_18:
    EmptyPath = RIOPxrSdfPathCreateEmptyPath();
    swift_bridgeObjectRelease();
    *a1 = EmptyPath;
    result = RIOPxrSdfPathCreateEmptyPath();
    v22 = (id)result;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_17;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v11 = MEMORY[0x22E2F57B8](i, v6);
        v13 = v9[2];
        v12 = v9[3];
        if (v13 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9[2] = v13 + 1;
        v9[v13 + 4] = v11;
      }
    }
    else
    {
      for (j = 0; j != v7; ++j)
      {
        v15 = v5[2];
        v16 = v5[3];
        v17 = *(id *)(v6 + 8 * j + 32);
        if (v15 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
        v5[2] = v15 + 1;
        v5[v15 + 4] = v17;
      }
    }
    swift_bridgeObjectRelease();
    v18 = v9[2];
    if (v18)
      goto LABEL_15;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.conciseRelativePaths()(uint64_t a1)
{
  return Array<A>.conciseRelativePaths()(a1, MEMORY[0x24BE26BB8]);
}

uint64_t Array<A>.removeDescendentPaths()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = Array<A>.removingDescendentPaths()(*v0);
  result = swift_bridgeObjectRelease();
  *v0 = v1;
  return result;
}

uint64_t Array<A>.removingDescendentPaths()(uint64_t a1)
{
  return Array<A>.conciseRelativePaths()(a1, MEMORY[0x24BE26BC8]);
}

uint64_t Array<A>.conciseRelativePaths()(uint64_t a1, uint64_t (*a2)(Class))
{
  Class isa;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t j;
  unint64_t v15;
  unint64_t v16;
  id v17;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for RIOPxrSdfPathRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = (void *)a2(isa);

  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v11 = MEMORY[0x22E2F57B8](i, v6);
        v13 = *(_QWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 24);
        if (v13 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        *(_QWORD *)(v9 + 16) = v13 + 1;
        *(_QWORD *)(v9 + 8 * v13 + 32) = v11;
      }
    }
    else
    {
      for (j = 0; j != v7; ++j)
      {
        v15 = *(_QWORD *)(v5 + 16);
        v16 = *(_QWORD *)(v5 + 24);
        v17 = *(id *)(v6 + 8 * j + 32);
        if (v15 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
        *(_QWORD *)(v5 + 16) = v15 + 1;
        *(_QWORD *)(v5 + 8 * v15 + 32) = v17;
      }
    }
    swift_bridgeObjectRelease();
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.removeAncestorPaths()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = Array<A>.removingAncestorPaths()(*v0);
  result = swift_bridgeObjectRelease();
  *v0 = v1;
  return result;
}

uint64_t Array<A>.removingAncestorPaths()(uint64_t a1)
{
  return Array<A>.conciseRelativePaths()(a1, MEMORY[0x24BE26BC0]);
}

uint64_t static SceneDescriptionFoundations.AssetPath.Error.== infix(_:_:)()
{
  return 1;
}

void SceneDescriptionFoundations.AssetPath.Error.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int SceneDescriptionFoundations.AssetPath.Error.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t static SceneDescriptionFoundations.AssetPath.< infix(_:_:)()
{
  return RIOPxrSdfAssetPathIsLessThan();
}

uint64_t SceneDescriptionFoundations.AssetPath.description.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t SceneDescriptionFoundations.AssetPath.assetPath.getter()
{
  return SceneDescriptionFoundations.Path.description.getter(MEMORY[0x24BE26890]);
}

uint64_t SceneDescriptionFoundations.Path.description.getter(uint64_t (*a1)(void))
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (void *)a1();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t SceneDescriptionFoundations.AssetPath.debugDescription.getter()
{
  void **v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[2];

  v1 = *v0;
  strcpy((char *)v10, "<AssetPath: ");
  v2 = v1;
  v3 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v10[0];
}

uint64_t static SceneDescriptionFoundations.AssetPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static SceneDescriptionFoundations.Path.== infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

uint64_t static SceneDescriptionFoundations.Path.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  a3(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a4, a3, a5);
  return static _CFObject.== infix(_:_:)() & 1;
}

void SceneDescriptionFoundations.AssetPath.hash(into:)(uint64_t a1)
{
  SceneDescriptionFoundations.Path.hash(into:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

void SceneDescriptionFoundations.Path.hash(into:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  void **v4;
  void *v8;
  id v9;

  v8 = *v4;
  a2(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a3, a2, a4);
  v9 = v8;
  _CFObject.hash(into:)();

}

Swift::Int SceneDescriptionFoundations.AssetPath.hashValue.getter()
{
  return SceneDescriptionFoundations.Path.hashValue.getter((uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

Swift::Int SceneDescriptionFoundations.Path.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  void **v3;
  void *v7;
  id v8;

  v7 = *v3;
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a2, a1, a3);
  v8 = v7;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, a4, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  a5(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a6, a5, a7);
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.AssetPath()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  void **v5;
  void *v9;
  id v10;

  v9 = *v5;
  Hasher.init(_seed:)();
  a3(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a4, a3, a5);
  v10 = v9;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  void **v6;
  void *v10;
  id v11;

  v10 = *v6;
  a4(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a5, a4, a6);
  v11 = v10;
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, &lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  void **v6;
  void *v10;
  id v11;

  v10 = *v6;
  Hasher.init(_seed:)();
  a4(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a5, a4, a6);
  v11 = v10;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrSdfAssetPathIsLessThan();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.AssetPath@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path((uint64_t (*)(uint64_t))MEMORY[0x24BE268A0], a1);
}

uint64_t SceneDescriptionFoundations.AssetPath.init(stringLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)((uint64_t (*)(uint64_t))MEMORY[0x24BE268A0], a1);
}

uint64_t SceneDescriptionFoundations.Path.init(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v5 = a1(v4 + 32);
  result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance SceneDescriptionFoundations.Path@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v5 = a1(v4 + 32);
  result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.init(assetPath:)@<X0>(uint64_t *a1@<X8>)
{
  return SceneDescriptionFoundations.Path.init(_:)((uint64_t (*)(uint64_t))MEMORY[0x24BE268A0], a1);
}

uint64_t SceneDescriptionFoundations.AssetPath.init(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v2 = RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath();
  swift_release();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.init(assetPath:resolvedPath:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v2 = RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath();
  swift_release();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t SceneDescriptionFoundations.AssetPath.isEmpty.getter()
{
  return RIOPxrSdfAssetPathIsEmpty();
}

uint64_t SceneDescriptionFoundations.AssetPath.resolvedPath.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.AssetPath.Error, &type metadata for SceneDescriptionFoundations.AssetPath.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.AssetPath.Error, &type metadata for SceneDescriptionFoundations.AssetPath.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error);
  }
  return result;
}

void SceneDescriptionFoundations.AssetPath.dependencies.getter(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = (void *)RIOPxrUsdUtilsCopyAllDependencies();
  v3 = (void *)RIODependencyDescriptorCopyLayers();
  type metadata accessor for RIOPxrSdfLayerRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v4 = MEMORY[0x24BEE4AF8];
  v5 = MEMORY[0x24BEE4AF8];
  v6 = (void *)RIODependencyDescriptorCopyAssets();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v7 = (void *)RIODependencyDescriptorCopyUnresolvedPaths();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  *a1 = v5;
  a1[1] = v4;
  a1[2] = v4;
}

void SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v3;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[7];
  uint64_t v15;
  void *v16;

  v7 = *v3;
  v8 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v9 = (void *)RIOPxrArAssetCreate();
  v10 = swift_release();
  if (v9)
  {
    v16 = v9;
    MEMORY[0x24BDAC7A8](v10);
    v14[2] = a3;
    v14[3] = v9;
    v14[4] = a1;
    v14[5] = a2;
    type metadata accessor for RIOPxrArAssetRef(0);
    v12 = v11;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)partial apply for closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:), (uint64_t)v14, v12, v13, a3, MEMORY[0x24BEE3F20], (uint64_t)&v15);

  }
  else
  {
    lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t CFDataNoCopy;
  void *v7;
  uint64_t v8;
  uint64_t result;

  CFDataNoCopy = RIOPxrArAssetCreateCFDataNoCopy();
  if (CFDataNoCopy)
  {
    v7 = (void *)CFDataNoCopy;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath.Error and conformance SceneDescriptionFoundations.AssetPath.Error();
  v8 = swift_allocError();
  result = swift_willThrow();
  *a5 = v8;
  return result;
}

uint64_t SceneDescriptionFoundations.Dependencies.layers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SceneDescriptionFoundations.Dependencies.assets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SceneDescriptionFoundations.Dependencies.unresolvedPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in SceneDescriptionFoundations.AssetPath.withReferencedData<A>(_:)(v1[3], v1[4], v1[5], v1[2], a1);
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.AssetPath, &type metadata for SceneDescriptionFoundations.AssetPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.AssetPath, &type metadata for SceneDescriptionFoundations.AssetPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.AssetPath, &type metadata for SceneDescriptionFoundations.AssetPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.AssetPath and conformance SceneDescriptionFoundations.AssetPath);
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Path()
{
  return &type metadata for SceneDescriptionFoundations.Path;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.AssetPath()
{
  return &type metadata for SceneDescriptionFoundations.AssetPath;
}

uint64_t storeEnumTagSinglePayload for SceneDescriptionFoundations.AssetPath.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BCF2FCC + 4 * byte_22BD13580[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BCF2FEC + 4 * byte_22BD13585[v4]))();
}

_BYTE *sub_22BCF2FCC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BCF2FEC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCF2FF4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCF2FFC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCF3004(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCF300C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.AssetPath.Error()
{
  return &type metadata for SceneDescriptionFoundations.AssetPath.Error;
}

uint64_t destroy for SceneDescriptionFoundations.Dependencies()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for SceneDescriptionFoundations.Dependencies(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SceneDescriptionFoundations.Dependencies(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SceneDescriptionFoundations.Dependencies(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneDescriptionFoundations.Dependencies(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneDescriptionFoundations.Dependencies(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Dependencies()
{
  return &type metadata for SceneDescriptionFoundations.Dependencies;
}

uint64_t SceneDescriptionFoundations.Reference.description.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  uint64_t result;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;

  v1 = *v0;
  v2 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 3944256;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  v8 = v1;
  result = RIOPxrSdfReferenceCopyPrimPath();
  if (result)
  {
    v10 = (void *)result;

    v11 = v10;
    v12 = (void *)RIOPxrSdfPathCopyString();
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 62;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    return 64;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SceneDescriptionFoundations.Reference.assetPath.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t SceneDescriptionFoundations.Reference.primPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfReferenceCopyPrimPath();
  if (result)
    *a1 = result;
  else
    __break(1u);
  return result;
}

uint64_t SceneDescriptionFoundations.Reference.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  _QWORD v3[2];

  strcpy((char *)v3, "<Reference: ");
  v0._countAndFlagsBits = SceneDescriptionFoundations.Reference.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t static SceneDescriptionFoundations.Reference.< infix(_:_:)()
{
  return RIOPxrSdfReferenceIsLessThan();
}

uint64_t static SceneDescriptionFoundations.Reference.== infix(_:_:)()
{
  return RIOPxrSdfReferenceIsEqual();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan() ^ 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsLessThan();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Reference()
{
  return RIOPxrSdfReferenceIsEqual();
}

void SceneDescriptionFoundations.Reference.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int SceneDescriptionFoundations.Reference.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef)
  {
    type metadata accessor for RIOPxrSdfReferenceRef(255);
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfReferenceRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.Reference()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.Reference()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.Reference()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfReferenceRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef();
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t SceneDescriptionFoundations.Reference.init(_:_:)@<X0>(void **a1@<X2>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v4 = RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath();

  result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t SceneDescriptionFoundations.Reference.init(assetPath:primPath:)@<X0>(void **a1@<X2>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v4 = RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath();

  result = swift_release();
  *a2 = v4;
  return result;
}

void key path getter for SceneDescriptionFoundations.Reference.assetPath : SceneDescriptionFoundations.Reference(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  *a2 = v5;
  a2[1] = v7;
}

uint64_t key path setter for SceneDescriptionFoundations.Reference.assetPath : SceneDescriptionFoundations.Reference()
{
  String.utf8CString.getter();
  RIOPxrSdfReferenceSetAssetPath();
  return swift_release();
}

uint64_t SceneDescriptionFoundations.Reference.assetPath.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  RIOPxrSdfReferenceSetAssetPath();
  return swift_release();
}

uint64_t (*SceneDescriptionFoundations.Reference.assetPath.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v1;
  v3 = (void *)RIOPxrSdfReferenceCopyAssetPathString();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return SceneDescriptionFoundations.Reference.assetPath.modify;
}

uint64_t SceneDescriptionFoundations.Reference.assetPath.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if ((a2 & 1) != 0)
  {
    RIOPxrSdfReferenceSetAssetPath();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    RIOPxrSdfReferenceSetAssetPath();
  }
  return swift_release();
}

void key path getter for SceneDescriptionFoundations.Reference.primPath : SceneDescriptionFoundations.Reference(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = RIOPxrSdfReferenceCopyPrimPath();
  if (v4)
  {
    v5 = v4;

    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
}

void SceneDescriptionFoundations.Reference.primPath.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrSdfReferenceSetPrimPath();

}

void (*SceneDescriptionFoundations.Reference.primPath.modify(void (**a1)(id *a1)))(id *a1)
{
  void (*v1)(id *);
  void (*result)(id *);

  a1[1] = v1;
  result = (void (*)(id *))RIOPxrSdfReferenceCopyPrimPath();
  if (result)
  {
    *a1 = result;
    return SceneDescriptionFoundations.Reference.primPath.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SceneDescriptionFoundations.Reference.primPath.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrSdfReferenceSetPrimPath();

}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.Reference, &type metadata for SceneDescriptionFoundations.Reference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Reference and conformance SceneDescriptionFoundations.Reference);
  }
  return result;
}

uint64_t sub_22BCF3AD8()
{
  return RIOPxrSdfReferenceSetPrimPath();
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Reference()
{
  return &type metadata for SceneDescriptionFoundations.Reference;
}

uint64_t closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:)(double a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;

  v27 = a3;
  v26 = a5;
  v7 = type metadata accessor for __RKEntitySpinDirectionType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for __RKEntityActionSpecification();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v26, v11, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDE6930], v7);
  __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, *MEMORY[0x24BDE69A8], v15);
  v20 = *a6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
    *a6 = v20;
  }
  v23 = *(_QWORD *)(v20 + 16);
  v22 = *(_QWORD *)(v20 + 24);
  if (v23 >= v22 >> 1)
  {
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v20);
    *a6 = v20;
  }
  *(_QWORD *)(v20 + 16) = v23 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v20+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v23, v19, v15);
}

uint64_t specialized static ActionBuilder.generateSpinActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD *v9;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;

  v0 = type metadata accessor for __RKEntityGroupActionOrder();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v23);

  swift_release();
  v5 = v23;
  if (v24 == 1)
  {
    v28 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v6 = v5;
LABEL_11:
    outlined consume of Result<Double, Object.Error>(v6, 1);
    return MEMORY[0x24BEE4AF8];
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v7 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v7 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v23);

  swift_release();
  v8 = v23;
  if (v24 == 1)
  {
    v28 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v6 = v8;
    goto LABEL_11;
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v11 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v11 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v23);

  v12 = swift_release();
  v13 = v23;
  v14 = v24;
  v15 = v25;
  if ((v27 & 1) != 0)
  {
    v16 = v26;
    v28 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Vector3<Double>, Object.Error>(v13, v14, v15, v16, 1);
    return MEMORY[0x24BEE4AF8];
  }
  v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](v12);
  *(&v23 - 6) = v17;
  *(&v23 - 5) = v5;
  *(&v23 - 4) = v8;
  *((_OWORD *)&v23 - 1) = v18;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:), (uint64_t)(&v23 - 8));
  v9 = v23;
  if (v23[2] >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v19 = type metadata accessor for __RKEntityActionSpecification();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22BD0C360;
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE68D0], v0);
    swift_bridgeObjectRetain();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v20 + 104))(v22 + v21, *MEMORY[0x24BDE69C8], v19);
    swift_bridgeObjectRelease();
    return v22;
  }
  return (uint64_t)v9;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateSpinActionSpecifications(inputs:)(*(double *)(v2 + 24), *(double *)(v2 + 32), *(__n128 *)(v2 + 48), a1, a2, *(unint64_t **)(v2 + 16));
}

void static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  int HasAttribute;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  void *EmptyValue;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD, uint64_t);
  unsigned int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t SwiftObject;
  uint64_t ServiceLocator;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  void **v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  NSObject *v93;
  _BOOL4 v94;
  uint64_t v95;
  uint8_t *v96;
  id v97;
  id v98;
  char v99;
  char v100;
  void *v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;

  v2 = type metadata accessor for __RKAudioSpatialModeSelection();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityAudioActionType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v10 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v10 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v20 = 0;
LABEL_12:
    v115 = (uint64_t)v20;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
LABEL_13:
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v20, 1);
    return;
  }
  v113 = v3;
  v11 = (void *)RIOPxrUsdPrimCopyAttribute();
  v12 = RIOPxrUsdAttributeCopyValue();
  if (!v12)
  {
LABEL_11:
    v20 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v13 = (void *)v12;
  v112 = v7;
  v14 = RIOPxrVtValueCopyToken();
  if (!v14)
  {

    goto LABEL_11;
  }
  v15 = (void *)v14;

  swift_release();
  v16 = (void *)RIOPxrTfTokenCopyString();
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v19 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v19 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v20 = 0;
LABEL_23:
    v115 = (uint64_t)v20;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v111 = v18;
  v21 = (void *)RIOPxrUsdPrimCopyAttribute();
  v22 = RIOPxrUsdAttributeCopyValue();
  if (!v22)
  {
LABEL_22:
    v20 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_23;
  }
  v23 = (void *)v22;
  v24 = RIOPxrVtValueCopyToken();
  if (!v24)
  {

    goto LABEL_22;
  }
  v25 = (void *)v24;

  swift_release();
  v26 = (void *)RIOPxrTfTokenCopyString();
  v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v109 = v27;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v25, 0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v28 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v28 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v115);

  swift_release();
  v29 = (void *)v115;
  if (v116 == 1)
  {
    v117 = v115;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<Double, Object.Error>(v29, 1);
    return;
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
    v30 = (id)RIOPxrTfTokenEmpty();
  else
    v30 = (id)RIOPxrTfTokenCreateWithCString();
  v31 = v30;
  HasAttribute = RIOPxrUsdPrimHasAttribute();
  v33 = HasAttribute;
  if (!HasAttribute)
  {

    swift_release();
    v115 = 0;
    outlined copy of Object.Error(0);
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    v35 = 0;
LABEL_53:
    outlined consume of Result<AnyAttribute, Object.Error>(v35, v33 ^ 1);
    return;
  }
  v101 = v29;
  v34 = RIOPxrUsdPrimCopyAttribute();

  swift_release();
  type metadata accessor for AnyAttribute();
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = v34;
  swift_retain();
  EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue)
    EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  v37 = (void *)RIOPxrVtValueCopyAssetPath();

  if (!v37)
  {
    outlined consume of Result<AnyAttribute, Object.Error>(v35, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  v38 = (void *)RIOPxrUsdAttributeCopyValue();
  if (!v38)
    v38 = (void *)RIOPxrVtValueCreateEmptyValue();
  v103 = v37;
  v104 = v35;
  v39 = (void *)RIOPxrVtValueCopyAssetPath();

  v40 = v113;
  if (!v39)
  {
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v102 = v39;
  v41 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v106 = v43;
  v107 = v42;

  v105 = swift_allocObject();
  *(_DWORD *)(v105 + 16) = 0;
  v44 = *(void (**)(char *, _QWORD, uint64_t))(v112 + 104);
  v44(v9, *MEMORY[0x24BDE6878], v6);
  v45 = v110;
  v46 = v111;
  if (v110 == 0x6573756170 && v111 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v47 = (unsigned int *)MEMORY[0x24BDE6888];
LABEL_41:
    v48 = v108;
    v49 = v109;
LABEL_42:
    (*(void (**)(char *, uint64_t))(v112 + 8))(v9, v6);
    v44(v9, *v47, v6);
    goto LABEL_43;
  }
  if (v45 == 1886352499 && v46 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v47 = (unsigned int *)MEMORY[0x24BDE6880];
    goto LABEL_41;
  }
  v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v48 = v108;
  v49 = v109;
  if ((v99 & 1) != 0)
  {
    v47 = (unsigned int *)MEMORY[0x24BDE6880];
    goto LABEL_42;
  }
LABEL_43:
  v50 = *(void (**)(char *, _QWORD, uint64_t))(v40 + 104);
  v50(v5, *MEMORY[0x24BDE6948], v2);
  if (v48 == 0x6C616974617073 && v49 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v51 = (unsigned int *)MEMORY[0x24BDE6950];
LABEL_47:
    v52 = v106;
LABEL_48:
    (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v2);
    v53 = ((uint64_t (*)(char *, _QWORD, uint64_t))v50)(v5, *v51, v2);
    goto LABEL_49;
  }
  if (v48 == 0x69746170536E6F6ELL && v49 == 0xEA00000000006C61)
  {
    swift_bridgeObjectRelease();
    v51 = (unsigned int *)MEMORY[0x24BDE6958];
    goto LABEL_47;
  }
  v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v53 = swift_bridgeObjectRelease();
  v52 = v106;
  if ((v100 & 1) != 0)
  {
    v51 = (unsigned int *)MEMORY[0x24BDE6958];
    goto LABEL_48;
  }
LABEL_49:
  v115 = 93;
  v116 = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](v53);
  *(&v101 - 2) = &v115;
  v54 = v107;
  specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)(&v101 - 4), v107, v52);
  if ((v55 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v63 = v54;
    v65 = v52;
  }
  else
  {
    swift_bridgeObjectRetain();
    v56 = String.subscript.getter();
    v58 = v57;
    v60 = v59;
    v62 = v61;
    swift_bridgeObjectRelease();
    v63 = MEMORY[0x22E2F52FC](v56, v58, v60, v62);
    v65 = v64;
    swift_bridgeObjectRelease();
  }
  v66 = HIBYTE(v65) & 0xF;
  if ((v65 & 0x2000000000000000) == 0)
    v66 = v63 & 0xFFFFFFFFFFFFLL;
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_22BD0C360;
    v83 = v103;
    v84 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v87 = v86;

    *(_QWORD *)(v82 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v82 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v82 + 32) = v85;
    *(_QWORD *)(v82 + 40) = v87;
    type metadata accessor for OS_os_log();
    v88 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    v89 = v104;
    outlined consume of Result<AnyAttribute, Object.Error>(v104, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v89, 0);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v9, v6);
LABEL_77:
    swift_release();
    return;
  }
  v110 = v63;
  v67 = (id)RIOBuilderInputsGetImportSession();
  if (!v67)
    goto LABEL_85;
  v68 = v67;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_86:
    __break(1u);
    return;
  }
  swift_retain();
  ServiceLocator = REEngineGetServiceLocator();
  v71 = MEMORY[0x22E2F60DC](ServiceLocator);
  v111 = SwiftObject;
  if (!v71)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = v113;
    if (one-time initialization token for rioAudio != -1)
      swift_once();
    v91 = type metadata accessor for Logger();
    __swift_project_value_buffer(v91, (uint64_t)static Logger.rioAudio);
    v92 = static os_log_type_t.error.getter();
    v93 = Logger.logObject.getter();
    v94 = os_log_type_enabled(v93, v92);
    v95 = v112;
    if (v94)
    {
      v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v96 = 0;
      _os_log_impl(&dword_22BC20000, v93, v92, "generateAudioActionSpecifications could not get an AssetManager.", v96, 2u);
      MEMORY[0x22E2F898C](v96, -1, -1);
    }

    v97 = v104;
    outlined consume of Result<AnyAttribute, Object.Error>(v104, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v97, 0);
    swift_release();

    (*(void (**)(char *, uint64_t))(v90 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v9, v6);
    goto LABEL_77;
  }
  v109 = v71;
  v72 = swift_allocObject();
  *(_QWORD *)(v72 + 16) = 0;
  v108 = v72 + 16;
  *(_QWORD *)(v72 + 24) = 0xE000000000000000;
  v73 = swift_allocObject();
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)(v73 + 16) = 0;
  *(_WORD *)(v73 + 32) = -256;
  v74 = (_QWORD *)swift_allocObject();
  v75 = v106;
  v74[2] = v107;
  v74[3] = v75;
  v74[4] = v105;
  v74[5] = v73;
  v76 = v110;
  v74[6] = v109;
  v74[7] = v76;
  v77 = v114;
  v74[8] = v65;
  v74[9] = v77;
  v74[10] = a1;
  v74[11] = v72;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v78 = closure #3 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(a1, (uint64_t)partial apply for closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:), (uint64_t)v74, v73 + 16);
  v115 = MEMORY[0x24BEE4AF8];
  if ((v78 & 1) != 0)
  {
    v114 = &v101;
    MEMORY[0x24BDAC7A8](v78);
    *(&v101 - 6) = &v115;
    *(&v101 - 5) = (void *)v108;
    *(&v101 - 4) = v9;
    v79 = v101;
    *(&v101 - 3) = v5;
    *(&v101 - 2) = v79;
    v80 = v113;
    if (one-time initialization token for OutputName != -1)
      swift_once();
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:), (uint64_t)(&v101 - 8));
    v81 = v104;
    outlined consume of Result<AnyAttribute, Object.Error>(v104, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v81, 0);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

  }
  else
  {
    v98 = v104;
    outlined consume of Result<AnyAttribute, Object.Error>(v104, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v98, 0);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v80 = v113;
  }
  (*(void (**)(char *, uint64_t))(v80 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v9, v6);
  swift_release();
}

void one-time initialization function for savedRef()
{
  static ActionBuilder.savedRef = MEMORY[0x24BEE4AF8];
}

void closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t SwiftObject;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _QWORD aBlock[6];

  String.utf8CString.getter();
  swift_beginAccess();
  v13 = (void *)RIOPxrUtilsCopyCFDataWithArAssetPath();
  swift_endAccess();
  swift_release();
  if (!v13)
  {
    swift_beginAccess();
    v39 = *(_QWORD *)(a4 + 16);
    v40 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 16) = a1;
    *(_QWORD *)(a4 + 24) = a2;
    v41 = *(unsigned __int16 *)(a4 + 32);
    v42 = 256;
LABEL_16:
    *(_WORD *)(a4 + 32) = v42;
    outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(v39, v40, v41);
    swift_bridgeObjectRetain();
    return;
  }
  String.utf8CString.getter();
  v14 = REAudioFileAssetCreateWithMappedDataNullable();
  swift_release();
  if (!v14)
  {

    swift_beginAccess();
    v39 = *(_QWORD *)(a4 + 16);
    v40 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 16) = a1;
    *(_QWORD *)(a4 + 24) = a2;
    v41 = *(unsigned __int16 *)(a4 + 32);
    v42 = 257;
    goto LABEL_16;
  }
  if (one-time initialization token for savedRef != -1)
    swift_once();
  swift_beginAccess();
  v15 = (_QWORD *)static ActionBuilder.savedRef;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  static ActionBuilder.savedRef = (uint64_t)v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    static ActionBuilder.savedRef = (uint64_t)v15;
  }
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
    static ActionBuilder.savedRef = (uint64_t)v15;
  }
  v15[2] = v18 + 1;
  v15[v18 + 4] = v14;
  swift_endAccess();
  v19 = (id)RIOBuilderInputsGetImportSession();
  if (!v19)
  {
    __break(1u);
    goto LABEL_18;
  }
  v20 = v19;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_retain();
  swift_beginAccess();
  RIOImportSessionQueueAssetForLoad();
  swift_release();
  v22 = (id)RIOBuilderInputsGetImportSession();
  if (v22)
  {
    v23 = v22;
    v24 = RIOImportSessionGetSwiftObject();

    if (v24)
    {
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = v14;
      v26 = (void **)(v24 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_retain();
      swift_beginAccess();
      v27 = *v26;
      aBlock[4] = partial apply for closure #1 in closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_18;
      v28 = _Block_copy(aBlock);
      v29 = v27;
      swift_retain();
      swift_release();
      RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue();
      _Block_release(v28);
      swift_release();
      swift_release();

      v30 = (void *)REAssetHandleCopyAssetIdentifierString();
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v33 = v32;

      swift_beginAccess();
      *(_QWORD *)(a10 + 16) = v31;
      *(_QWORD *)(a10 + 24) = v33;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v35 = *(_QWORD *)(a10 + 16);
      v34 = *(_QWORD *)(a10 + 24);
      swift_beginAccess();
      v36 = *(_QWORD *)(a4 + 16);
      v37 = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 16) = v35;
      *(_QWORD *)(a4 + 24) = v34;
      v38 = *(unsigned __int16 *)(a4 + 32);
      *(_WORD *)(a4 + 32) = 0;
      swift_bridgeObjectRetain();
      outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(v36, v37, v38);
      return;
    }
    goto LABEL_20;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t closure #3 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[6];

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v18[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v18[5] = v7;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed () -> ();
  v18[3] = &block_descriptor_22;
  v8 = _Block_copy(v18);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    v10 = *(unsigned __int16 *)(a4 + 16);
    if (v10 >> 8 <= 0xFE)
    {
      if ((v10 & 0x100) == 0)
        return 1;
      v12 = *(_QWORD *)a4;
      v11 = *(void **)(a4 + 8);
      outlined copy of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(v12, (uint64_t)v11, v10, 1);
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_22BD0C360;
      v14 = description.getter in AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(v12, v11, v10 & 1);
      v16 = v15;
      *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v13 + 32) = v14;
      *(_QWORD *)(v13 + 40) = v16;
      type metadata accessor for OS_os_log();
      v17 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(v12, (uint64_t)v11, v10);
      swift_bridgeObjectRelease();

    }
    return 0;
  }
  return result;
}

uint64_t description.getter in AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, void *a2, char a3)
{
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;

  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(72);
    v6 = 0xD000000000000046;
    v5 = 0x800000022BD0AB80;
  }
  else
  {
    _StringGuts.grow(_:)(56);
    v5 = 0x800000022BD0ABD0;
    v6 = 0xD000000000000036;
  }
  String.append(_:)(*(Swift::String *)&v6);
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  return 0;
}

uint64_t closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;

  v36 = a6;
  v37 = a3;
  v33 = a5;
  v30 = a2;
  v6 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v32 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for __RKAudioSpatialModeSelection();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __RKEntityAudioActionType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for __RKEntityActionSpecification();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v30, v13);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v33, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v36, v31);
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v32, *MEMORY[0x24BDE6D98], v35);
  swift_bridgeObjectRetain();
  v21 = v37;
  __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x24BDE69B8], v17);
  v22 = *v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v21 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
    *v21 = v22;
  }
  v25 = *(_QWORD *)(v22 + 16);
  v24 = *(_QWORD *)(v22 + 24);
  if (v25 >= v24 >> 1)
  {
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
    *v21 = v22;
  }
  *(_QWORD *)(v22 + 16) = v25 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(v22+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v25, v20, v17);
}

id outlined copy of Object.Error(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t sub_22BCF5940()
{
  return swift_deallocObject();
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v12[2];

  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  while (1)
  {
    v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    v9 = a1(v12);
    if (v4)
      break;
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v7;
    if (v7 < 0x4000)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_22BCF5A54()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_22BCF5A78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int16 *)(v0 + 32);
  if (v1 >> 8 <= 0xFE)
    outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1, BYTE1(v1) & 1);
  return swift_deallocObject();
}

uint64_t outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined consume of CompileSession.LoadError();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_22BCF5AC4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)()
{
  uint64_t *v0;

  closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11]);
}

uint64_t partial apply for closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #4 in static ActionBuilder.generateAudioActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_22BCF5B54()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t outlined copy of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined copy of CompileSession.LoadError();
  else
    return swift_bridgeObjectRetain();
}

uint64_t outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (BYTE1(a3) != 255)
    return outlined consume of Result<String, AudioLoadError #1 in static ActionBuilder.generateAudioActionSpecifications(inputs:)>(result, a2, a3, BYTE1(a3) & 1);
  return result;
}

uint64_t sub_22BCF5BA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in static ActionBuilder.generateAudioActionSpecifications(inputs:)()
{
  return REAudioFileAssetCompleteLoad();
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _BYTE v5[32];
  uint64_t v6;

  v6 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2)
    return v6;
  for (i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v5);
    type metadata accessor for EntityProxy();
    if (!swift_dynamicCast())
      break;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2)
      return v6;
  }
  swift_release();
  swift_release();
  return 0;
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for [__RKEntityActionSpecification]);
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, void (*a2)(BOOL, uint64_t, uint64_t), uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  a2(0, v6, 0);
  v7 = v14;
  if (v6)
  {
    for (i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v13);
      __swift_instantiateConcreteTypeFromMangledName(a3);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        a2(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v14;
      }
      v10 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      if (v10 >= v9 >> 1)
      {
        a2(v9 > 1, v10 + 1, 1);
        v7 = v14;
      }
      *(_QWORD *)(v7 + 16) = v10 + 1;
      *(_QWORD *)(v7 + 8 * v10 + 32) = v12;
      if (!--v6)
        return v7;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v7;
}

void Inputs.createIBLAsset(on:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *EmptyValue;
  void *v11;
  id v12;
  void *v13;
  char *v14;
  uint64_t v15;
  char v17;
  id v18;
  void *v19;
  uint64_t SwiftObject;
  uint64_t ServiceLocator;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AssetRef?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v33 - v4;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue)
    EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  v11 = (void *)RIOPxrVtValueCopyAssetPath();

  if (!v11)
    goto LABEL_6;
  if ((RIOPxrSdfAssetPathIsEmpty() & 1) != 0)
  {

LABEL_6:
    if (one-time initialization token for importTextures != -1)
      swift_once();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    return;
  }
  v12 = v11;
  v13 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = v9;

  URL.init(fileURLWithPath:)();
  v14 = v34;
  swift_bridgeObjectRelease();
  if (URL.pathExtension.getter() == 0x657974696C616572 && v15 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      v18 = (id)RIOBuilderInputsGetImportSession();
      if (v18)
      {
        v19 = v18;
        SwiftObject = RIOImportSessionGetSwiftObject();

        if (SwiftObject)
        {
          ServiceLocator = REEngineGetServiceLocator();
          if (MEMORY[0x22E2F60DC]() && MEMORY[0x22E2F60E8](ServiceLocator))
          {
            if (RIOBuilderInputsCreateCubeMapTextureAsset())
            {
              REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable();

              (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
              return;
            }
            if (one-time initialization token for importTextures == -1)
              goto LABEL_24;
          }
          else if (one-time initialization token for importTextures == -1)
          {
LABEL_24:
            static os_log_type_t.error.getter();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            v27 = swift_allocObject();
            *(_OWORD *)(v27 + 16) = xmmword_22BD0C360;
            v28 = v12;
            v29 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
            v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v32 = v31;

            *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE0D00];
            *(_QWORD *)(v27 + 64) = lazy protocol witness table accessor for type String and conformance String();
            *(_QWORD *)(v27 + 32) = v30;
            *(_QWORD *)(v27 + 40) = v32;
            os_log(_:dso:log:type:_:)();

            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
            return;
          }
          swift_once();
          goto LABEL_24;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
  }
  type metadata accessor for EnvironmentResource();
  v22 = v12;
  v23 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static EnvironmentResource.__load(contentsOf:withName:)();
  swift_bridgeObjectRelease();
  dispatch thunk of EnvironmentResource.coreIBLAsset.getter();
  v24 = type metadata accessor for __AssetRef();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v5, 1, v24) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for __AssetRef?);
  }
  else
  {
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v24);
    RERetain();
  }
  dispatch thunk of EnvironmentResource.coreIBLAsset.getter();
  if (v26(v2, 1, v24) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
    swift_release();

    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for __AssetRef?);
  }
  else
  {
    __AssetRef.__as<A>(_:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v2, v24);
  }
}

uint64_t one-time initialization function for importTextures()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.importTextures = result;
  return result;
}

uint64_t Inputs.primPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOBuilderInputsCopyPrimPath();
  if (result)
    *a1 = result;
  else
    __break(1u);
  return result;
}

uint64_t Inputs.prim.getter()
{
  uint64_t result;
  void *v1;
  void *v2;
  id v3;
  uint64_t PrimIfNeeded;

  result = RIOBuilderInputsCopyStage();
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v1 = (void *)result;
  result = RIOBuilderInputsCopyPrimPath();
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v2 = (void *)result;
  if (RIOPxrUsdStageHasPrimAtPrimPath())
  {
    v3 = (id)RIOPxrTfTokenEmpty();
    PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

    v2 = v3;
  }
  else
  {
    PrimIfNeeded = RIOPxrUsdPrimCreateEmpty();
  }

  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = PrimIfNeeded;
  return result;
}

uint64_t Inputs.stage.getter()
{
  uint64_t result;
  uint64_t v1;

  result = RIOBuilderInputsCopyStage();
  if (result)
  {
    v1 = result;
    type metadata accessor for Stage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id Inputs.stageDelta.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v7;

  v2 = v1[3];
  v3 = v1[4];
  v4 = (void *)v1[5];
  v7 = (id)v1[6];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return v7;
}

uint64_t Inputs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = (_QWORD *)Inputs.fetchBuildersAndOutputNames(key:)(a1, a2);
  v6 = v5;
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
LABEL_8:
    result = swift_bridgeObjectRelease();
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  v7 = v4[4];
  v8 = v4[5];
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (!v6[2])
  {
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  v10 = v6[4];
  v9 = v6[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ObjectType = swift_getObjectType();
  v12 = Builder.outputs.getter(ObjectType, v8);
  MEMORY[0x24BDAC7A8](v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  if (v17)
  {
    outlined init with take of Any(&v16, a3);
LABEL_5:
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  outlined destroy of Any?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
  swift_getObjectType();
  if (swift_conformsToProtocol2())
    v14 = v7;
  else
    v14 = 0;
  if (!v14)
  {
    *a3 = 0u;
    a3[1] = 0u;
    goto LABEL_5;
  }
  swift_unknownObjectRetain();
  EntityBuilder.generateSwiftOutput(for:inputs:)(v10, v9);
  v15 = Builder.outputs.getter(ObjectType, v8);
  MEMORY[0x24BDAC7A8](v15);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_unknownObjectRelease_n();
}

uint64_t Inputs.accumulatedValues(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = Inputs.fetchBuildersAndOutputNames(key:)(a1, a2);
  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    if (v5 <= *(_QWORD *)(v3 + 16))
    {
      v6 = 0;
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v18 = v3;
      v19 = result;
      while (1)
      {
        v22 = v5;
        v9 = *(_QWORD *)(v4 + v6 + 32);
        v8 = *(_QWORD *)(v4 + v6 + 40);
        v21 = v6;
        v10 = *(_QWORD *)(v3 + v6 + 32);
        v11 = *(_QWORD *)(v3 + v6 + 40);
        ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        v20 = v8;
        v13 = Builder.outputs.getter(ObjectType, v8);
        MEMORY[0x24BDAC7A8](v13);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();
        if (v26)
        {
          outlined init with take of Any(&v25, &v23);
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for Any?);
          swift_getObjectType();
          if (swift_conformsToProtocol2())
            v14 = v9;
          else
            v14 = 0;
          if (v14)
          {
            swift_unknownObjectRetain();
            EntityBuilder.generateSwiftOutput(for:inputs:)(v10, v11);
            v15 = Builder.outputs.getter(ObjectType, v20);
            MEMORY[0x24BDAC7A8](v15);
            OS_dispatch_queue.sync<A>(execute:)();
            swift_bridgeObjectRelease();
            swift_release();
            swift_unknownObjectRelease();
            goto LABEL_14;
          }
          v23 = 0u;
          v24 = 0u;
        }
        swift_bridgeObjectRelease();
LABEL_14:
        v4 = v19;
        if (*((_QWORD *)&v24 + 1))
        {
          outlined init with take of Any(&v23, &v25);
          outlined init with copy of Any((uint64_t)&v25, (uint64_t)&v23);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          v17 = v7[2];
          v16 = v7[3];
          if (v17 >= v16 >> 1)
            v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v7);
          v7[2] = v17 + 1;
          outlined init with take of Any(&v23, &v7[4 * v17 + 4]);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);
        }
        else
        {
          swift_unknownObjectRelease();
          outlined destroy of Any?((uint64_t)&v23, &demangling cache variable for type metadata for Any?);
        }
        v6 = v21 + 16;
        v5 = v22 - 1;
        v3 = v18;
        if (v22 == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)v7;
        }
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

void Inputs.importSession.getter()
{
  id v0;
  void *v1;
  uint64_t SwiftObject;

  v0 = (id)RIOBuilderInputsGetImportSession();
  if (v0)
  {
    v1 = v0;
    SwiftObject = RIOImportSessionGetSwiftObject();

    if (SwiftObject)
    {
      swift_retain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t Inputs.getEntity(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  Inputs.subscript.getter(a1, a2, &v4);
  if (v5)
  {
    type metadata accessor for EntityProxy();
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v4, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t Inputs.getEntities(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = Inputs.accumulatedValues(forKey:)(a1, a2);
  v3 = specialized _arrayConditionalCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  if (v3)
    return v3;
  else
    return MEMORY[0x24BEE4AF8];
}

void Inputs.performBlockLaterWithEntity(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t SwiftObject;
  _QWORD *v9;
  void **v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD aBlock[6];

  v6 = (id)RIOBuilderInputsGetImportSession();
  if (v6)
  {
    v7 = v6;
    SwiftObject = RIOImportSessionGetSwiftObject();

    if (SwiftObject)
    {
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = a1;
      v9[3] = a2;
      v9[4] = a3;
      v10 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
      swift_retain();
      swift_beginAccess();
      v11 = *v10;
      aBlock[4] = partial apply for closure #1 in Inputs.performBlockLaterWithEntity(_:_:);
      aBlock[5] = v9;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_23;
      v12 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      v13 = v11;
      swift_retain();
      swift_release();
      RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue();
      _Block_release(v12);
      swift_release();
      swift_release();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in Inputs.performBlockLaterWithEntity(_:_:)(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for Entity();
  static Entity.__fromCore(_:)();
  a2();
  return swift_release();
}

uint64_t Inputs.performBlockSyncOnEngineQueue(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t result;
  _QWORD v7[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v7[4] = partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
  v7[5] = v4;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_9_0;
  v5 = _Block_copy(v7);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v5);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

void Inputs.StageDelta.init(core:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t j;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = a1;
  v4 = (void *)RIOBuilderStageDeltaCopyDirtyMetadata();
  *(_QWORD *)&v22 = 0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v18 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    v19 = (void *)RIOBuilderStageDeltaCopyPrimDelta();
    Inputs.PrimDelta.init(core:)(v19, (uint64_t *)&v22);

    v20 = v23;
    v21 = v22;
    *(_QWORD *)a2 = v18;
    *(_OWORD *)(a2 + 8) = v21;
    *(_QWORD *)(a2 + 24) = v20;
    *(_QWORD *)(a2 + 32) = v3;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_16;
LABEL_3:
  *(_QWORD *)&v22 = v5;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = v22;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = MEMORY[0x22E2F57B8](i, v6);
        *(_QWORD *)&v22 = v8;
        v12 = *(_QWORD *)(v8 + 16);
        v11 = *(_QWORD *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v8 = v22;
        }
        *(_QWORD *)(v8 + 16) = v12 + 1;
        *(_QWORD *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (j = 0; j != v7; ++j)
      {
        v14 = *(void **)(v6 + 8 * j + 32);
        *(_QWORD *)&v22 = v8;
        v15 = *(_QWORD *)(v8 + 16);
        v16 = *(_QWORD *)(v8 + 24);
        v17 = v14;
        if (v15 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
          v8 = v22;
        }
        *(_QWORD *)(v8 + 16) = v15 + 1;
        *(_QWORD *)(v8 + 8 * v15 + 32) = v17;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t Inputs.fetchBuildersAndOutputNames(key:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  NSArray v5;
  NSArray v6;
  void *v7;
  int AllBuildersAndOutputNamesProvidingValuesWithName;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t i;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t j;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = MEMORY[0x24BEE4AF8];
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = (void *)MEMORY[0x22E2F5278](a1, a2);
  AllBuildersAndOutputNamesProvidingValuesWithName = RIOBuilderInputsGetAllBuildersAndOutputNamesProvidingValuesWithName();

  if (!AllBuildersAndOutputNamesProvidingValuesWithName)
  {

    return MEMORY[0x24BEE4AF8];
  }
  type metadata accessor for RIOBuilderRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RIOBuilderRef]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Builder);
  lazy protocol witness table accessor for type [RIOBuilderRef] and conformance [A]();
  v9 = Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for CFStringRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v10 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  v11 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    goto LABEL_18;
LABEL_4:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
  if (v11 < 0)
    __break(1u);
  v12 = v4;
  if ((v4 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v11; ++i)
    {
      v14 = (void *)MEMORY[0x22E2F57B8](i, v10);
      v15 = String.init(_:)(v14);
      v17 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      if (v17 >= v16 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v12 + 16) = v17 + 1;
      *(Swift::String *)(v12 + 16 * v17 + 32) = v15;
    }
  }
  else
  {
    for (j = 0; j != v11; ++j)
    {
      v19 = String.init(_:)(*(id *)(v4 + 8 * j + 32));
      v21 = *(_QWORD *)(v4 + 16);
      v20 = *(_QWORD *)(v4 + 24);
      if (v21 >= v20 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      *(_QWORD *)(v4 + 16) = v21 + 1;
      *(Swift::String *)(v4 + 16 * v21 + 32) = v19;
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  v22 = *(_QWORD *)(v9 + 16);
  v23 = *(_QWORD *)(v12 + 16);

  if (v22 != v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v9;
}

uint64_t closure #1 in Inputs.fetchBuildersAndOutputNames(key:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = (id)RIOBuilderGetSwiftObject();
  if (!v4)
    goto LABEL_10;
  v5 = (uint64_t)v4;
  swift_getObjectType();
  v6 = swift_conformsToProtocol2();
  if (v6)
    v7 = v6;
  else
    v7 = 0;
  if (v6)
    result = v5;
  else
    result = 0;
  if (!result)
  {
    swift_unknownObjectRelease();
LABEL_10:
    result = specialized static _BaseBuilder.create(from:)(v3);
  }
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t Inputs.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t Inputs.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Inputs.createStandardTextureAsset(on:for:)()
{
  return RIOBuilderInputsCreateStandardTextureAsset();
}

uint64_t Inputs.createCubeMapTextureAsset(on:for:)()
{
  return RIOBuilderInputsCreateCubeMapTextureAsset();
}

uint64_t Inputs.StageDelta.dirtyMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

id Inputs.StageDelta.primDelta.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  id v4;

  v2 = v1[2];
  v4 = (id)v1[3];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t Inputs.StageDelta.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = (void *)v1[3];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v7 = v5;
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v6);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t static Inputs.StageDelta.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  char v10;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (void *)a1[3];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (void *)a2[3];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v7;
    if ((specialized static Set.== infix(_:_:)(v2, v5) & 1) != 0)
      v10 = specialized static Set.== infix(_:_:)(v3, v6);
    else
      v10 = 0;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t static Inputs.PrimDelta.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) != 0)
    return specialized static Set.== infix(_:_:)(v2, v3);
  else
    return 0;
}

uint64_t Inputs.PrimDelta.init(core:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t j;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a1;
  v4 = (void *)RIOBuilderPrimDeltaCopyDirtyMetadata();
  *(_QWORD *)&v40 = 0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_16;
LABEL_3:
  *(_QWORD *)&v40 = v5;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v9 = v40;
  if ((v6 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v7; ++i)
    {
      v11 = MEMORY[0x22E2F57B8](i, v6);
      *(_QWORD *)&v40 = v9;
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = v40;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      *(_QWORD *)(v9 + 8 * v13 + 32) = v11;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    for (j = 0; j != v7; ++j)
    {
      v15 = *(void **)(v6 + 8 * j + 32);
      *(_QWORD *)&v40 = v9;
      v17 = *(_QWORD *)(v9 + 16);
      v16 = *(_QWORD *)(v9 + 24);
      v18 = v15;
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v9 = v40;
      }
      *(_QWORD *)(v9 + 16) = v17 + 1;
      *(_QWORD *)(v9 + 8 * v17 + 32) = v18;
    }
    swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  v19 = specialized Set.init<A>(_:)(v9);
  swift_bridgeObjectRelease();
  v20 = (void *)RIOBuilderPrimDeltaCopyPropertyDeltas();
  *(_QWORD *)&v40 = 0;
  type metadata accessor for RIOBuilderPropertyDeltaRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v5 >> 62))
  {
    v21 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
      goto LABEL_19;
LABEL_32:
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24BEE4AF8];
LABEL_33:
    v36 = specialized Set.init<A>(_:)(v22);

    result = swift_bridgeObjectRelease();
    *a2 = v19;
    a2[1] = v36;
    a2[2] = (uint64_t)v3;
    return result;
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v21)
    goto LABEL_32;
LABEL_19:
  v42 = v5;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v39 = v19;
    v22 = v42;
    if ((v5 & 0xC000000000000001) != 0)
    {
      v23 = 0;
      do
      {
        v24 = (void *)MEMORY[0x22E2F57B8](v23, v5);
        Inputs.PropertyDelta.init(core:)(v24, (uint64_t *)&v40);
        v25 = v40;
        v26 = v41;
        v42 = v22;
        v28 = *(_QWORD *)(v22 + 16);
        v27 = *(_QWORD *)(v22 + 24);
        if (v28 >= v27 >> 1)
        {
          v37 = v40;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          v25 = v37;
          v22 = v42;
        }
        ++v23;
        *(_QWORD *)(v22 + 16) = v28 + 1;
        v29 = v22 + 24 * v28;
        *(_OWORD *)(v29 + 32) = v25;
        *(_QWORD *)(v29 + 48) = v26;
      }
      while (v21 != v23);
    }
    else
    {
      v30 = 0;
      do
      {
        Inputs.PropertyDelta.init(core:)(*(id *)(v5 + 8 * v30 + 32), (uint64_t *)&v40);
        v31 = v40;
        v32 = v41;
        v42 = v22;
        v34 = *(_QWORD *)(v22 + 16);
        v33 = *(_QWORD *)(v22 + 24);
        if (v34 >= v33 >> 1)
        {
          v38 = v40;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          v31 = v38;
          v22 = v42;
        }
        ++v30;
        *(_QWORD *)(v22 + 16) = v34 + 1;
        v35 = v22 + 24 * v34;
        *(_OWORD *)(v35 + 32) = v31;
        *(_QWORD *)(v35 + 48) = v32;
      }
      while (v21 != v30);
    }
    swift_bridgeObjectRelease();
    v19 = v39;
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Int Inputs.StageDelta.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  __int128 v7[4];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = (void *)v0[3];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v5 = v4;
  specialized Set.hash(into:)((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Inputs.StageDelta()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  __int128 v7[4];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = (void *)v0[3];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v5 = v4;
  specialized Set.hash(into:)((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Inputs.StageDelta(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = (void *)v1[3];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v7 = v5;
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v6);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Inputs.StageDelta()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  __int128 v7[4];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = (void *)v0[3];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v5 = v4;
  specialized Set.hash(into:)((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Inputs.StageDelta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  char v10;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (void *)a1[3];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (void *)a2[3];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v7;
    if ((specialized static Set.== infix(_:_:)(v2, v5) & 1) != 0)
      v10 = specialized static Set.== infix(_:_:)(v3, v6);
    else
      v10 = 0;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t Inputs.PrimDelta.propertyDeltas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Inputs.PrimDelta.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

void Inputs.PropertyDelta.init(core:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t j;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1;
  v4 = (void *)RIOBuilderPropertyDeltaCopyDirtyMetadata();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v17 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    v18 = RIOBuilderPropertyDeltaCopyPropertyName();

    *a2 = v17;
    a2[1] = v18;
    a2[2] = (uint64_t)v3;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_16;
LABEL_3:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = MEMORY[0x22E2F57B8](i, v6);
        v12 = *(_QWORD *)(v8 + 16);
        v11 = *(_QWORD *)(v8 + 24);
        if (v12 >= v11 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        *(_QWORD *)(v8 + 16) = v12 + 1;
        *(_QWORD *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (j = 0; j != v7; ++j)
      {
        v14 = *(_QWORD *)(v5 + 16);
        v15 = *(_QWORD *)(v5 + 24);
        v16 = *(id *)(v6 + 8 * j + 32);
        if (v14 >= v15 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
        *(_QWORD *)(v5 + 16) = v14 + 1;
        *(_QWORD *)(v5 + 8 * v14 + 32) = v16;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
}

Swift::Int Inputs.PrimDelta.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Inputs.PrimDelta()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Inputs.PrimDelta(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Inputs.PrimDelta()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Inputs.PrimDelta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) != 0)
    return specialized static Set.== infix(_:_:)(v2, v3);
  else
    return 0;
}

uint64_t Inputs.PropertyDelta.dirtyMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

id Inputs.PropertyDelta.propertyName.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

void Inputs.PropertyDelta.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *v1;
  v4 = (void *)v1[1];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  v5 = v4;
  _CFObject.hash(into:)();

}

uint64_t static Inputs.PropertyDelta.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;

  v2 = (void *)a1[1];
  v3 = (void *)a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  v4 = v2;
  v5 = v3;
  v6 = static _CFObject.== infix(_:_:)();

  return v6 & 1;
}

Swift::Int Inputs.PropertyDelta.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v3, v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Inputs.PropertyDelta()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v3, v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Inputs.PropertyDelta(uint64_t a1)
{
  uint64_t *v1;

  specialized Set.hash(into:)(a1, *v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Inputs.PropertyDelta()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v3, v1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Inputs.PropertyDelta(uint64_t *a1, uint64_t *a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;

  v2 = (void *)a1[1];
  v3 = (void *)a2[1];
  if ((specialized static Set.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  v4 = v2;
  v5 = v3;
  v6 = static _CFObject.== infix(_:_:)();

  return v6 & 1;
}

uint64_t partial apply for closure #1 in Outputs.subscript.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Outputs.subscript.getter(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_22BCF8870()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Inputs.performBlockLaterWithEntity(_:_:)()
{
  uint64_t v0;

  return closure #1 in Inputs.performBlockLaterWithEntity(_:_:)(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t sub_22BCF88C0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Inputs.StageDelta and conformance Inputs.StageDelta()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Inputs.StageDelta and conformance Inputs.StageDelta;
  if (!lazy protocol witness table cache variable for type Inputs.StageDelta and conformance Inputs.StageDelta)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Inputs.StageDelta, &type metadata for Inputs.StageDelta);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.StageDelta and conformance Inputs.StageDelta);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Inputs.PrimDelta and conformance Inputs.PrimDelta()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Inputs.PrimDelta and conformance Inputs.PrimDelta;
  if (!lazy protocol witness table cache variable for type Inputs.PrimDelta and conformance Inputs.PrimDelta)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Inputs.PrimDelta, &type metadata for Inputs.PrimDelta);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.PrimDelta and conformance Inputs.PrimDelta);
  }
  return result;
}

uint64_t type metadata accessor for Inputs()
{
  return objc_opt_self();
}

uint64_t method lookup function for Inputs()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Inputs.primPath.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of Inputs.prim.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of Inputs.stage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of Inputs.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of Inputs.accumulatedValues(forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Inputs.importSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of Inputs.getEntity(forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of Inputs.getEntities(forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Inputs.performBlockLaterWithEntity(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of Inputs.performBlockSyncOnEngineQueue(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

void destroy for Inputs.StageDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for Inputs.StageDelta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v4;
  v7 = v5;
  return a1;
}

_QWORD *assignWithCopy for Inputs.StageDelta(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[3];
  v5 = (void *)a1[3];
  a1[3] = v4;
  v6 = v4;

  v7 = (void *)a2[4];
  v8 = (void *)a1[4];
  a1[4] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for Inputs.StageDelta(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for Inputs.StageDelta(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Inputs.StageDelta(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Inputs.StageDelta()
{
  return &type metadata for Inputs.StageDelta;
}

void destroy for Inputs.PrimDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeBufferWithCopyOfBuffer for Inputs.PrimDelta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for Inputs.PrimDelta(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for Inputs.PrimDelta(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for Inputs.PrimDelta()
{
  return &type metadata for Inputs.PrimDelta;
}

void destroy for Inputs.PropertyDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *initializeBufferWithCopyOfBuffer for Inputs.PropertyDelta(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v3;
  v6 = v4;
  return a1;
}

_QWORD *assignWithCopy for Inputs.PropertyDelta(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for Inputs.PropertyDelta(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for Inputs.PropertyDelta()
{
  return &type metadata for Inputs.PropertyDelta;
}

unint64_t lazy protocol witness table accessor for type [RIOBuilderRef] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [RIOBuilderRef] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RIOBuilderRef] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RIOBuilderRef]);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RIOBuilderRef] and conformance [A]);
  }
  return result;
}

uint64_t closure #1 in Outputs.subscript.getterpartial apply@<X0>(_OWORD *a1@<X8>)
{
  return partial apply for closure #1 in Outputs.subscript.getter(a1);
}

uint64_t __RKEntityActionAnimationStyle.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v5 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v5 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v14 = 0;
LABEL_12:
    v16[1] = v14;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v14, 1);
    goto LABEL_13;
  }
  v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  v7 = RIOPxrUsdAttributeCopyValue();
  if (!v7)
  {
LABEL_11:
    v14 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v8 = (void *)v7;
  v9 = RIOPxrVtValueCopyToken();
  if (!v9)
  {

    goto LABEL_11;
  }
  v10 = (void *)v9;

  swift_release();
  v11 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v10, 0);
  __RKEntityActionAnimationStyle.init(rawValue:)();
  v12 = type metadata accessor for __RKEntityActionAnimationStyle();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v4, 1, v12) == 1)
  {
    outlined destroy of __RKEntityActionAnimationStyle?((uint64_t)v4);
LABEL_13:
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v4, v12);
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError, &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError, &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

uint64_t outlined destroy of __RKEntityActionAnimationStyle?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionAnimationStyle.AnimationStyleLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BCF92B0 + 4 * asc_22BD13CB0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BCF92D0 + 4 * byte_22BD13CB5[v4]))();
}

_BYTE *sub_22BCF92B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BCF92D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCF92D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCF92E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BCF92E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BCF92F0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  return &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
}

uint64_t closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  unint64_t *v24;
  unint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a4;
  v35 = a5;
  v31 = a2;
  v32 = a3;
  v33 = type metadata accessor for __RKEntityEmphasisAnimationType();
  v5 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityActionAnimationStyle();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for __RKEntityActionSpecification();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22 = v18;
  v21(v15, v31, v12);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v24 = v32;
  v23(v11, v34, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v35, v33);
  __RKEntityEmphasisActionArguments.init(target:duration:iterations:animationStyle:emphasisAnimationType:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, *MEMORY[0x24BDE69D8], v22);
  v25 = *v24;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v24 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1, v25);
    *v24 = v25;
  }
  v28 = *(_QWORD *)(v25 + 16);
  v27 = *(_QWORD *)(v25 + 24);
  if (v28 >= v27 >> 1)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v25);
    *v24 = v25;
  }
  *(_QWORD *)(v25 + 16) = v28 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(v25+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v28, v20, v22);
}

uint64_t specialized static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;

  v0 = type metadata accessor for __RKEntityGroupActionOrder();
  v26 = *(_QWORD *)(v0 - 8);
  v27 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v28 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionAnimationStyle?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for __RKEntityActionAnimationStyle();
  v5 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityEmphasisAnimationType?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __RKEntityEmphasisAnimationType();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v14 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v14 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v32);

  swift_release();
  v15 = v32;
  if ((v33 & 1) != 0)
  {
    v31 = v32;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v15, 1);
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_retain();
    __RKEntityEmphasisAnimationType.init(inputs:)((uint64_t)v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    swift_retain();
    __RKEntityActionAnimationStyle.init(inputs:)((uint64_t)v4);
    v18 = v30;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v4, 0, 1, v30);
    v19 = v29;
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v29, v4, v18);
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](v20);
    *(&v25 - 4) = (uint64_t)&v32;
    *(&v25 - 3) = (uint64_t)v15;
    *(&v25 - 2) = (uint64_t)v19;
    *(&v25 - 1) = (uint64_t)v13;
    if (one-time initialization token for OutputName != -1)
      swift_once();
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:), (uint64_t)(&v25 - 6));
    v16 = (uint64_t)v32;
    if (v32[2] < 2uLL)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v21 = type metadata accessor for __RKEntityActionSpecification();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_22BD0C360;
      (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x24BDE68D0], v27);
      swift_bridgeObjectRetain_n();
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v22 + 104))(v24 + v23, *MEMORY[0x24BDE69C8], v21);
      swift_bridgeObjectRelease();
      v16 = v24;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void BehaviorSchema.triggers.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7372656767697274;
  a1[1] = 0xE800000000000000;
}

void BehaviorSchema.actions.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x736E6F69746361;
  a1[1] = 0xE700000000000000;
}

void BehaviorSchema.exclusive.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x766973756C637865;
  a1[1] = 0xE900000000000065;
}

void CollideTriggerSchema.colliders.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x726564696C6C6F63;
  a1[1] = 0xE900000000000073;
}

void ProximityToCameraTriggerSchema.distance.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x65636E6174736964;
  a1[1] = 0xE800000000000000;
}

void AudioActionSchema.audio.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69647561;
  a1[1] = 0xE500000000000000;
}

void AudioActionSchema.type.getter(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

void AudioActionSchema.gain.getter(_QWORD *a1@<X8>)
{
  *a1 = 1852399975;
  a1[1] = 0xE400000000000000;
}

void AudioActionSchema.auralMode.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x646F4D6C61727561;
  a1[1] = 0xE900000000000065;
}

void AudioActionSchema.multiplePerformOperation.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000022BD06E10;
}

void ChangeSceneActionSchema.scene.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x656E656373;
  a1[1] = 0xE500000000000000;
}

void EmphasisActionSchema.motionType.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x79546E6F69746F6DLL;
  a1[1] = 0xEA00000000006570;
}

void EmphasisActionSchema.style.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x656C797473;
  a1[1] = 0xE500000000000000;
}

void GroupActionSchema.loops.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x73706F6F6CLL;
  a1[1] = 0xE500000000000000;
}

void GroupActionSchema.performCount.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "performCount");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void GroupActionSchema.actions.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x736E6F69746361;
  a1[1] = 0xE700000000000000;
}

void ImpulseActionSchema.velocity.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x797469636F6C6576;
  a1[1] = 0xE800000000000000;
}

void LookAtCameraActionSchema.front.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x746E6F7266;
  a1[1] = 0xE500000000000000;
}

void LookAtCameraActionSchema.upVector.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x726F746365567075;
  a1[1] = 0xE800000000000000;
}

void NotificationActionSchema.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
}

void OrbitActionSchema.alignToPath.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x506F546E67696C61;
  a1[1] = 0xEB00000000687461;
}

void OrbitActionSchema.center.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7265746E6563;
  a1[1] = 0xE600000000000000;
}

void SpinActionSchema.infoID.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
}

void SpinActionSchema.affectedObjects.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
}

void SpinActionSchema.duration.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
}

void SpinActionSchema.revolutions.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6974756C6F766572;
  a1[1] = 0xEB00000000736E6FLL;
}

uint64_t SpinActionSchema.revolutions.setter()
{
  return swift_bridgeObjectRelease();
}

void StartAnimationSchema.start.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7472617473;
  a1[1] = 0xE500000000000000;
}

void StartAnimationSchema.reversed.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6465737265766572;
  a1[1] = 0xE800000000000000;
}

void StartAnimationSchema.animationSpeed.getter(char *a1@<X8>)
{
  strcpy(a1, "animationSpeed");
  a1[15] = -18;
}

void StartAnimationSchema.reverses.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7365737265766572;
  a1[1] = 0xE800000000000000;
}

void TransformActionSchema.relativeToObject.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000022BD06FF0;
}

void TransformActionSchema.xformTarget.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7261546D726F6678;
  a1[1] = 0xEB00000000746567;
}

void VisibilityActionSchema.moveDistance.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "moveDistance");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t (*CollideTriggerSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*CollideTriggerSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*CollideTriggerSchema.colliders.modify(_QWORD *a1))()
{
  *a1 = 0x726564696C6C6F63;
  a1[1] = 0xE900000000000073;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationTriggerSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationTriggerSchema.identifier.modify(_QWORD *a1))()
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
  return destroy for RelationshipMetadata;
}

uint64_t (*ProximityToCameraTriggerSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ProximityToCameraTriggerSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*ProximityToCameraTriggerSchema.distance.modify(_QWORD *a1))()
{
  *a1 = 0x65636E6174736964;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SceneTransitionTriggerSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SceneTransitionTriggerSchema.type.modify(_QWORD *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TapTriggerSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TapTriggerSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.audio.modify(_QWORD *a1))()
{
  *a1 = 0x6F69647561;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.auralMode.modify(_QWORD *a1))()
{
  *a1 = 0x646F4D6C61727561;
  a1[1] = 0xE900000000000065;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.gain.modify(_QWORD *a1))()
{
  *a1 = 1852399975;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.multiplePerformOperation.modify(_QWORD *a1))()
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000022BD06E10;
  return destroy for RelationshipMetadata;
}

uint64_t (*AudioActionSchema.type.modify(_QWORD *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ChangeSceneActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ChangeSceneActionSchema.scene.modify(_QWORD *a1))()
{
  *a1 = 0x656E656373;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.motionType.modify(_QWORD *a1))()
{
  *a1 = 0x79546E6F69746F6DLL;
  a1[1] = 0xEA00000000006570;
  return destroy for RelationshipMetadata;
}

uint64_t (*EmphasisActionSchema.style.modify(_QWORD *a1))()
{
  *a1 = 0x656C797473;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.actions.modify(_QWORD *a1))()
{
  *a1 = 0x736E6F69746361;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.loops.modify(_QWORD *a1))()
{
  *a1 = 0x73706F6F6CLL;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.performCount.modify(uint64_t a1))()
{
  strcpy((char *)a1, "performCount");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for RelationshipMetadata;
}

uint64_t (*GroupActionSchema.type.modify(_QWORD *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ImpulseActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*ImpulseActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*ImpulseActionSchema.velocity.modify(_QWORD *a1))()
{
  *a1 = 0x797469636F6C6576;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.front.modify(_QWORD *a1))()
{
  *a1 = 0x746E6F7266;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*LookAtCameraActionSchema.upVector.modify(_QWORD *a1))()
{
  *a1 = 0x726F746365567075;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*NotificationActionSchema.identifier.modify(_QWORD *a1))()
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.axis.modify(_QWORD *a1))()
{
  *a1 = 1936291937;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.center.modify(_QWORD *a1))()
{
  *a1 = 0x7265746E6563;
  a1[1] = 0xE600000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.revolutions.modify(_QWORD *a1))()
{
  *a1 = 0x6974756C6F766572;
  a1[1] = 0xEB00000000736E6FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*OrbitActionSchema.alignToPath.modify(_QWORD *a1))()
{
  *a1 = 0x506F546E67696C61;
  a1[1] = 0xEB00000000687461;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

void SpinActionSchema.axis.getter(_QWORD *a1@<X8>)
{
  *a1 = 1936291937;
  a1[1] = 0xE400000000000000;
}

uint64_t (*SpinActionSchema.axis.modify(_QWORD *a1))()
{
  *a1 = 1936291937;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*SpinActionSchema.revolutions.modify(_QWORD *a1))()
{
  *a1 = 0x6974756C6F766572;
  a1[1] = 0xEB00000000736E6FLL;
  return destroy for AttributeMetadata;
}

uint64_t (*StartAnimationSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.multiplePerformOperation.modify(_QWORD *a1))()
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000022BD06E10;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.animationSpeed.modify(char *a1))()
{
  strcpy(a1, "animationSpeed");
  a1[15] = -18;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.reversed.modify(_QWORD *a1))()
{
  *a1 = 0x6465737265766572;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.reverses.modify(_QWORD *a1))()
{
  *a1 = 0x7365737265766572;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*StartAnimationSchema.start.modify(_QWORD *a1))()
{
  *a1 = 0x7472617473;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

void TransformActionSchema.easeType.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6570795465736165;
  a1[1] = 0xE800000000000000;
}

uint64_t (*TransformActionSchema.easeType.modify(_QWORD *a1))()
{
  *a1 = 0x6570795465736165;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.relativeToObject.modify(_QWORD *a1))()
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000022BD06FF0;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.type.modify(_QWORD *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*TransformActionSchema.xformTarget.modify(_QWORD *a1))()
{
  *a1 = 0x7261546D726F6678;
  a1[1] = 0xEB00000000746567;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.affectedObjects.modify(_QWORD *a1))()
{
  *a1 = 0x6465746365666661;
  a1[1] = 0xEF737463656A624FLL;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.easeType.modify(_QWORD *a1))()
{
  *a1 = 0x6570795465736165;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.motionType.modify(_QWORD *a1))()
{
  *a1 = 0x79546E6F69746F6DLL;
  a1[1] = 0xEA00000000006570;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.moveDistance.modify(uint64_t a1))()
{
  strcpy((char *)a1, "moveDistance");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.style.modify(_QWORD *a1))()
{
  *a1 = 0x656C797473;
  a1[1] = 0xE500000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*VisibilityActionSchema.type.modify(_QWORD *a1))()
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*WaitActionSchema.infoID.modify(_QWORD *a1))()
{
  *a1 = 0x64693A6F666E69;
  a1[1] = 0xE700000000000000;
  return destroy for RelationshipMetadata;
}

uint64_t (*WaitActionSchema.duration.modify(_QWORD *a1))()
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
  return destroy for RelationshipMetadata;
}

_QWORD *sub_22BCFAB84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))CollideTriggerSchema.infoID.getter, a1);
}

uint64_t sub_22BCFAB90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))CollideTriggerSchema.infoID.setter);
}

uint64_t sub_22BCFABAC()
{
  return 16;
}

__n128 sub_22BCFABB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFABC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))CollideTriggerSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFABD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))CollideTriggerSchema.affectedObjects.setter);
}

uint64_t sub_22BCFABEC()
{
  return 16;
}

__n128 sub_22BCFABF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAC04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))CollideTriggerSchema.colliders.getter, a1);
}

uint64_t sub_22BCFAC10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))CollideTriggerSchema.colliders.setter);
}

uint64_t sub_22BCFAC2C()
{
  return 16;
}

__n128 sub_22BCFAC38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAC44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))NotificationTriggerSchema.infoID.getter, a1);
}

uint64_t sub_22BCFAC50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))NotificationTriggerSchema.infoID.setter);
}

uint64_t sub_22BCFAC6C()
{
  return 16;
}

__n128 sub_22BCFAC78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAC84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))NotificationTriggerSchema.identifier.getter, a1);
}

uint64_t sub_22BCFAC90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))NotificationTriggerSchema.identifier.setter);
}

uint64_t sub_22BCFACAC()
{
  return 16;
}

__n128 sub_22BCFACB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFACC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ProximityToCameraTriggerSchema.infoID.getter, a1);
}

uint64_t sub_22BCFACD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ProximityToCameraTriggerSchema.infoID.setter);
}

uint64_t sub_22BCFACEC()
{
  return 16;
}

__n128 sub_22BCFACF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAD04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ProximityToCameraTriggerSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFAD10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ProximityToCameraTriggerSchema.affectedObjects.setter);
}

uint64_t sub_22BCFAD2C()
{
  return 16;
}

__n128 sub_22BCFAD38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAD44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ProximityToCameraTriggerSchema.distance.getter, a1);
}

uint64_t sub_22BCFAD50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ProximityToCameraTriggerSchema.distance.setter);
}

uint64_t sub_22BCFAD6C()
{
  return 16;
}

__n128 sub_22BCFAD78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAD84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))SceneTransitionTriggerSchema.infoID.getter, a1);
}

uint64_t sub_22BCFAD90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))SceneTransitionTriggerSchema.infoID.setter);
}

uint64_t sub_22BCFADAC()
{
  return 16;
}

__n128 sub_22BCFADB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFADC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))SceneTransitionTriggerSchema.type.getter, a1);
}

uint64_t sub_22BCFADD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))SceneTransitionTriggerSchema.type.setter);
}

uint64_t sub_22BCFADEC()
{
  return 16;
}

__n128 sub_22BCFADF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAE04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TapTriggerSchema.infoID.getter, a1);
}

uint64_t sub_22BCFAE10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TapTriggerSchema.infoID.setter);
}

uint64_t sub_22BCFAE2C()
{
  return 16;
}

__n128 sub_22BCFAE38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAE44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TapTriggerSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFAE50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TapTriggerSchema.affectedObjects.setter);
}

uint64_t sub_22BCFAE6C()
{
  return 16;
}

__n128 sub_22BCFAE78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAE84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))AudioActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFAE90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))AudioActionSchema.infoID.setter);
}

uint64_t sub_22BCFAEAC()
{
  return 16;
}

__n128 sub_22BCFAEB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAEC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))AudioActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFAED0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))AudioActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFAEEC()
{
  return 16;
}

__n128 sub_22BCFAEF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAF04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))AudioActionSchema.audio.getter, a1);
}

uint64_t sub_22BCFAF10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))AudioActionSchema.audio.setter);
}

uint64_t sub_22BCFAF2C()
{
  return 16;
}

__n128 sub_22BCFAF38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAF44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))AudioActionSchema.auralMode.getter, a1);
}

uint64_t sub_22BCFAF50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))AudioActionSchema.auralMode.setter);
}

uint64_t sub_22BCFAF6C()
{
  return 16;
}

__n128 sub_22BCFAF78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAF84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))AudioActionSchema.gain.getter, a1);
}

uint64_t sub_22BCFAF90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))AudioActionSchema.gain.setter);
}

uint64_t sub_22BCFAFAC()
{
  return 16;
}

__n128 sub_22BCFAFB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFAFC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))AudioActionSchema.multiplePerformOperation.getter, a1);
}

uint64_t sub_22BCFAFD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))AudioActionSchema.multiplePerformOperation.setter);
}

uint64_t sub_22BCFAFEC()
{
  return 16;
}

__n128 sub_22BCFAFF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB004@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))AudioActionSchema.type.getter, a1);
}

uint64_t sub_22BCFB010(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))AudioActionSchema.type.setter);
}

uint64_t sub_22BCFB02C()
{
  return 16;
}

__n128 sub_22BCFB038(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB044@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ChangeSceneActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB050(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ChangeSceneActionSchema.infoID.setter);
}

uint64_t sub_22BCFB06C()
{
  return 16;
}

__n128 sub_22BCFB078(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB084@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ChangeSceneActionSchema.scene.getter, a1);
}

uint64_t sub_22BCFB090(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ChangeSceneActionSchema.scene.setter);
}

uint64_t sub_22BCFB0AC()
{
  return 16;
}

__n128 sub_22BCFB0B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB0C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))EmphasisActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB0D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))EmphasisActionSchema.infoID.setter);
}

uint64_t sub_22BCFB0EC()
{
  return 16;
}

__n128 sub_22BCFB0F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB104@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))EmphasisActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFB110(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))EmphasisActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFB12C()
{
  return 16;
}

__n128 sub_22BCFB138(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB144@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))EmphasisActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFB150(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))EmphasisActionSchema.duration.setter);
}

uint64_t sub_22BCFB16C()
{
  return 16;
}

__n128 sub_22BCFB178(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB184@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))EmphasisActionSchema.motionType.getter, a1);
}

uint64_t sub_22BCFB190(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))EmphasisActionSchema.motionType.setter);
}

uint64_t sub_22BCFB1AC()
{
  return 16;
}

__n128 sub_22BCFB1B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB1C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))EmphasisActionSchema.style.getter, a1);
}

uint64_t sub_22BCFB1D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))EmphasisActionSchema.style.setter);
}

uint64_t sub_22BCFB1EC()
{
  return 16;
}

__n128 sub_22BCFB1F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB204@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))GroupActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB210(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))GroupActionSchema.infoID.setter);
}

uint64_t sub_22BCFB22C()
{
  return 16;
}

__n128 sub_22BCFB238(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB244@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))GroupActionSchema.actions.getter, a1);
}

uint64_t sub_22BCFB250(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))GroupActionSchema.actions.setter);
}

uint64_t sub_22BCFB26C()
{
  return 16;
}

__n128 sub_22BCFB278(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB284@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))GroupActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFB290(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))GroupActionSchema.duration.setter);
}

uint64_t sub_22BCFB2AC()
{
  return 16;
}

__n128 sub_22BCFB2B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB2C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))GroupActionSchema.loops.getter, a1);
}

uint64_t sub_22BCFB2D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))GroupActionSchema.loops.setter);
}

uint64_t sub_22BCFB2EC()
{
  return 16;
}

__n128 sub_22BCFB2F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB304@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))GroupActionSchema.performCount.getter, a1);
}

uint64_t sub_22BCFB310(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))GroupActionSchema.performCount.setter);
}

uint64_t sub_22BCFB32C()
{
  return 16;
}

__n128 sub_22BCFB338(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB344@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))GroupActionSchema.type.getter, a1);
}

uint64_t sub_22BCFB350(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))GroupActionSchema.type.setter);
}

uint64_t sub_22BCFB36C()
{
  return 16;
}

__n128 sub_22BCFB378(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB384@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ImpulseActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB390(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ImpulseActionSchema.infoID.setter);
}

uint64_t sub_22BCFB3AC()
{
  return 16;
}

__n128 sub_22BCFB3B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB3C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ImpulseActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFB3D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ImpulseActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFB3EC()
{
  return 16;
}

__n128 sub_22BCFB3F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB404@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))ImpulseActionSchema.velocity.getter, a1);
}

uint64_t sub_22BCFB410(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))ImpulseActionSchema.velocity.setter);
}

uint64_t sub_22BCFB42C()
{
  return 16;
}

__n128 sub_22BCFB438(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB444@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))LookAtCameraActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB450(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))LookAtCameraActionSchema.infoID.setter);
}

uint64_t sub_22BCFB46C()
{
  return 16;
}

__n128 sub_22BCFB478(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB484@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))LookAtCameraActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFB490(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))LookAtCameraActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFB4AC()
{
  return 16;
}

__n128 sub_22BCFB4B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB4C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))LookAtCameraActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFB4D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))LookAtCameraActionSchema.duration.setter);
}

uint64_t sub_22BCFB4EC()
{
  return 16;
}

__n128 sub_22BCFB4F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB504@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))LookAtCameraActionSchema.front.getter, a1);
}

uint64_t sub_22BCFB510(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))LookAtCameraActionSchema.front.setter);
}

uint64_t sub_22BCFB52C()
{
  return 16;
}

__n128 sub_22BCFB538(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB544@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))LookAtCameraActionSchema.upVector.getter, a1);
}

uint64_t sub_22BCFB550(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))LookAtCameraActionSchema.upVector.setter);
}

uint64_t sub_22BCFB56C()
{
  return 16;
}

__n128 sub_22BCFB578(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB584@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))NotificationActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB590(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))NotificationActionSchema.infoID.setter);
}

uint64_t sub_22BCFB5AC()
{
  return 16;
}

__n128 sub_22BCFB5B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB5C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))NotificationActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFB5D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))NotificationActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFB5EC()
{
  return 16;
}

__n128 sub_22BCFB5F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB604@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))NotificationActionSchema.identifier.getter, a1);
}

uint64_t sub_22BCFB610(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))NotificationActionSchema.identifier.setter);
}

uint64_t sub_22BCFB62C()
{
  return 16;
}

__n128 sub_22BCFB638(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB644@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))OrbitActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB650(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))OrbitActionSchema.infoID.setter);
}

uint64_t sub_22BCFB66C()
{
  return 16;
}

__n128 sub_22BCFB678(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB684@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))OrbitActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFB690(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))OrbitActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFB6AC()
{
  return 16;
}

__n128 sub_22BCFB6B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB6C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))OrbitActionSchema.axis.getter, a1);
}

uint64_t sub_22BCFB6D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))OrbitActionSchema.axis.setter);
}

uint64_t sub_22BCFB6EC()
{
  return 16;
}

__n128 sub_22BCFB6F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB704@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))OrbitActionSchema.center.getter, a1);
}

uint64_t sub_22BCFB710(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))OrbitActionSchema.center.setter);
}

uint64_t sub_22BCFB72C()
{
  return 16;
}

__n128 sub_22BCFB738(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB744@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))OrbitActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFB750(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))OrbitActionSchema.duration.setter);
}

uint64_t sub_22BCFB76C()
{
  return 16;
}

__n128 sub_22BCFB778(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB784@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))OrbitActionSchema.revolutions.getter, a1);
}

uint64_t sub_22BCFB790(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))OrbitActionSchema.revolutions.setter);
}

uint64_t sub_22BCFB7AC()
{
  return 16;
}

__n128 sub_22BCFB7B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB7C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))OrbitActionSchema.alignToPath.getter, a1);
}

uint64_t sub_22BCFB7D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))OrbitActionSchema.alignToPath.setter);
}

uint64_t sub_22BCFB7EC()
{
  return 16;
}

__n128 sub_22BCFB7F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB804@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))SpinActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB810(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))SpinActionSchema.infoID.setter);
}

uint64_t sub_22BCFB82C()
{
  return 16;
}

__n128 sub_22BCFB838(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB844@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))SpinActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFB850(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))SpinActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFB86C()
{
  return 16;
}

__n128 sub_22BCFB878(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB884@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))SpinActionSchema.axis.getter, a1);
}

uint64_t sub_22BCFB890(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))SpinActionSchema.axis.setter);
}

uint64_t sub_22BCFB8AC()
{
  return 16;
}

__n128 sub_22BCFB8B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB8C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))SpinActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFB8D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))SpinActionSchema.duration.setter);
}

uint64_t sub_22BCFB8EC()
{
  return 16;
}

__n128 sub_22BCFB8F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB904@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))SpinActionSchema.revolutions.getter, a1);
}

uint64_t sub_22BCFB910(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))SpinActionSchema.revolutions.setter);
}

uint64_t sub_22BCFB92C()
{
  return 16;
}

__n128 sub_22BCFB938(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB944@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.infoID.getter, a1);
}

uint64_t sub_22BCFB950(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.infoID.setter);
}

uint64_t sub_22BCFB96C()
{
  return 16;
}

__n128 sub_22BCFB978(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB984@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFB990(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.affectedObjects.setter);
}

uint64_t sub_22BCFB9AC()
{
  return 16;
}

__n128 sub_22BCFB9B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFB9C4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.multiplePerformOperation.getter, a1);
}

uint64_t sub_22BCFB9D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.multiplePerformOperation.setter);
}

uint64_t sub_22BCFB9EC()
{
  return 16;
}

__n128 sub_22BCFB9F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBA04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.animationSpeed.getter, a1);
}

uint64_t sub_22BCFBA10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.animationSpeed.setter);
}

uint64_t sub_22BCFBA2C()
{
  return 16;
}

__n128 sub_22BCFBA38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBA44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.duration.getter, a1);
}

uint64_t sub_22BCFBA50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.duration.setter);
}

uint64_t sub_22BCFBA6C()
{
  return 16;
}

__n128 sub_22BCFBA78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBA84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.reversed.getter, a1);
}

uint64_t sub_22BCFBA90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.reversed.setter);
}

uint64_t sub_22BCFBAAC()
{
  return 16;
}

__n128 sub_22BCFBAB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBAC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.reverses.getter, a1);
}

uint64_t sub_22BCFBAD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.reverses.setter);
}

uint64_t sub_22BCFBAEC()
{
  return 16;
}

__n128 sub_22BCFBAF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBB04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))StartAnimationSchema.start.getter, a1);
}

uint64_t sub_22BCFBB10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))StartAnimationSchema.start.setter);
}

uint64_t sub_22BCFBB2C()
{
  return 16;
}

__n128 sub_22BCFBB38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBB44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TransformActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFBB50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TransformActionSchema.infoID.setter);
}

uint64_t sub_22BCFBB6C()
{
  return 16;
}

__n128 sub_22BCFBB78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBB84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TransformActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFBB90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TransformActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFBBAC()
{
  return 16;
}

__n128 sub_22BCFBBB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBBC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TransformActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFBBD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TransformActionSchema.duration.setter);
}

uint64_t sub_22BCFBBEC()
{
  return 16;
}

__n128 sub_22BCFBBF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBC04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TransformActionSchema.easeType.getter, a1);
}

uint64_t sub_22BCFBC10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TransformActionSchema.easeType.setter);
}

uint64_t sub_22BCFBC2C()
{
  return 16;
}

__n128 sub_22BCFBC38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBC44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TransformActionSchema.relativeToObject.getter, a1);
}

uint64_t sub_22BCFBC50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TransformActionSchema.relativeToObject.setter);
}

uint64_t sub_22BCFBC6C()
{
  return 16;
}

__n128 sub_22BCFBC78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBC84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TransformActionSchema.type.getter, a1);
}

uint64_t sub_22BCFBC90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TransformActionSchema.type.setter);
}

uint64_t sub_22BCFBCAC()
{
  return 16;
}

__n128 sub_22BCFBCB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBCC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))TransformActionSchema.xformTarget.getter, a1);
}

uint64_t sub_22BCFBCD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))TransformActionSchema.xformTarget.setter);
}

uint64_t sub_22BCFBCEC()
{
  return 16;
}

__n128 sub_22BCFBCF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBD04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFBD10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.infoID.setter);
}

uint64_t sub_22BCFBD2C()
{
  return 16;
}

__n128 sub_22BCFBD38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBD44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.affectedObjects.getter, a1);
}

uint64_t sub_22BCFBD50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.affectedObjects.setter);
}

uint64_t sub_22BCFBD6C()
{
  return 16;
}

__n128 sub_22BCFBD78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBD84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFBD90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.duration.setter);
}

uint64_t sub_22BCFBDAC()
{
  return 16;
}

__n128 sub_22BCFBDB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBDC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.easeType.getter, a1);
}

uint64_t sub_22BCFBDD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.easeType.setter);
}

uint64_t sub_22BCFBDEC()
{
  return 16;
}

__n128 sub_22BCFBDF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBE04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.motionType.getter, a1);
}

uint64_t sub_22BCFBE10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.motionType.setter);
}

uint64_t sub_22BCFBE2C()
{
  return 16;
}

__n128 sub_22BCFBE38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBE44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.moveDistance.getter, a1);
}

uint64_t sub_22BCFBE50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.moveDistance.setter);
}

uint64_t sub_22BCFBE6C()
{
  return 16;
}

__n128 sub_22BCFBE78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBE84@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.style.getter, a1);
}

uint64_t sub_22BCFBE90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.style.setter);
}

uint64_t sub_22BCFBEAC()
{
  return 16;
}

__n128 sub_22BCFBEB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBEC4@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))VisibilityActionSchema.type.getter, a1);
}

uint64_t sub_22BCFBED0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))VisibilityActionSchema.type.setter);
}

uint64_t sub_22BCFBEEC()
{
  return 16;
}

__n128 sub_22BCFBEF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBF04@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))WaitActionSchema.infoID.getter, a1);
}

uint64_t sub_22BCFBF10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))WaitActionSchema.infoID.setter);
}

uint64_t sub_22BCFBF2C()
{
  return 16;
}

__n128 sub_22BCFBF38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_22BCFBF44@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(_QWORD *__return_ptr))WaitActionSchema.duration.getter, a1);
}

uint64_t sub_22BCFBF50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RigidSchema.xformTranslateOp : <A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))WaitActionSchema.duration.setter);
}

uint64_t sub_22BCFBF6C()
{
  return 16;
}

__n128 sub_22BCFBF78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a2, v5, v7);
  v10 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
    *a3 = v10;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v10);
    *a3 = v10;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13, v9, v5);
}

uint64_t closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v7 = type metadata accessor for __RKEntityTriggerSpecification();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
  v12 = *(int *)(v11 + 48);
  v13 = *(int *)(v11 + 64);
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, a2, v14);
  *(_QWORD *)&v10[v12] = *a4;
  *(_QWORD *)&v10[v13] = MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDE6BA8], v7);
  v15 = *a3;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *a3 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v15);
    *a3 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v18, v10, v7);
}

uint64_t specialized static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)()
{
  uint64_t v0;
  _QWORD v2[4];
  _BYTE v3[16];
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v0 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  v4 = &v6;
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(0x726564696C6C6F63, 0xE900000000000073, (uint64_t)partial apply for closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:), (uint64_t)v3);
  if (*(_QWORD *)(v6 + 16))
  {
    v5 = v0;
    MEMORY[0x24BDAC7A8](v6);
    v2[2] = &v5;
    v2[3] = &v6;
    if (one-time initialization token for OutputName != -1)
      swift_once();
    specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:), (uint64_t)v2);
    v0 = v5;
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t partial apply for closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t partial apply for closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(_QWORD **)(v2 + 24));
}

unint64_t SceneDescriptionFoundations.AttributeSpec.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v0 = (void *)RIOPxrSdfAttributeSpecCopyLayer();
  v1 = (void *)RIOPxrSdfLayerCopyIdentifier();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000019;
}

unint64_t SceneDescriptionFoundations.AttributeSpec.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = SceneDescriptionFoundations.AttributeSpec.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000010;
}

Swift::Bool __swiftcall SceneDescriptionFoundations.AttributeSpec.hasColorSpace()()
{
  return RIOPxrSdfAttributeSpecHasColorSpace();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.AttributeSpec.isBlocked()()
{
  return RIOPxrSdfAttributeSpecIsBlocked();
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.AttributeSpec()
{
  return &type metadata for SceneDescriptionFoundations.AttributeSpec;
}

uint64_t key path getter for Outputs.subscript(_:) : Outputs()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t key path setter for Outputs.subscript(_:) : Outputs(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[32];

  v4 = *a3;
  v3 = a3[1];
  outlined init with copy of Any?(a1, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return Outputs.subscript.setter((uint64_t)v6, v4, v3);
}

uint64_t Outputs.subscript.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t closure #1 in Outputs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  char v11;

  result = swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)a4);
    }
    else
    {
      *a4 = 0u;
      a4[1] = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t Outputs.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  _QWORD v13[6];
  _BYTE v14[32];

  v4 = v3;
  v7 = a1;
  v8 = *(NSObject **)(v3 + 16);
  outlined init with copy of Any?(a1, (uint64_t)v14);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  v9[3] = a2;
  v9[4] = a3;
  outlined init with take of Any?((uint64_t)v14, (uint64_t)(v9 + 5));
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in Outputs.subscript.setter;
  *(_QWORD *)(v10 + 24) = v9;
  v13[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v13[5] = v10;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  v13[3] = &block_descriptor_24;
  v11 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  outlined destroy of Any?(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in Outputs.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  _BYTE v11[24];
  uint64_t v12;

  outlined init with copy of Any?(a4, (uint64_t)v11);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v11, a2, a3);
  swift_endAccess();
  outlined init with copy of Any?(a4, (uint64_t)v11);
  if (v12)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7 = (void *)MEMORY[0x22E2F5278]();
      swift_bridgeObjectRelease();
      v8 = objc_msgSend(v7, sel_UTF8String);
      v9 = v7;
      if (v8)
      {
        v10 = (void *)MEMORY[0x22E2F5278](a2, a3);
        RIOBuilderOutputsStoreValueWithName();

      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11);
  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22BCFCB6C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_0(v0 + 40);
  return swift_deallocObject();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in Outputs.subscript.setter()
{
  uint64_t *v0;

  closure #1 in Outputs.subscript.setter(v0[2], v0[3], v0[4], (uint64_t)(v0 + 5));
}

uint64_t sub_22BCFCC00()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

void (*Outputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[9] = a3;
  v7[10] = v3;
  v7[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  OS_dispatch_queue.sync<A>(execute:)();
  return Outputs.subscript.modify;
}

void Outputs.subscript.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[9];
    v4 = v2[8];
    outlined init with copy of Any?(*a1, (uint64_t)(v2 + 4));
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)(v2 + 4), v4, v3);
    outlined destroy of Any?((uint64_t)v2);
  }
  else
  {
    v5 = v2[9];
    v6 = v2[8];
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)v2, v6, v5);
  }
  free(v2);
}

_QWORD *Outputs.init(core:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v9);
  type metadata accessor for OS_dispatch_queue();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE5750], v4);
  v2[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2[3] = a1;
  v2[4] = v10;
  RIOBuilderOutputsSetSwiftObject();
  return v2;
}

uint64_t Outputs.deinit()
{
  uint64_t v0;

  RIOBuilderOutputsSetSwiftObject();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Outputs.__deallocating_deinit()
{
  uint64_t v0;

  RIOBuilderOutputsSetSwiftObject();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_22BCFCF38()
{
  return 0;
}

uint64_t type metadata accessor for Outputs()
{
  return objc_opt_self();
}

uint64_t method lookup function for Outputs()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Outputs.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of Outputs.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of Outputs.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

id AudioConstants.AudioFile.CalibrationMode.levelToken.getter@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  id result;

  if (*v1 <= 1u)
  {
    if (String.count.getter() >= 1)
      goto LABEL_5;
LABEL_6:
    result = (id)RIOPxrTfTokenEmpty();
    goto LABEL_7;
  }
  if (String.count.getter() < 1)
    goto LABEL_6;
LABEL_5:
  result = (id)RIOPxrTfTokenCreateWithCString();
LABEL_7:
  *a1 = result;
  return result;
}

void AudioConstants.AudioFile.Normalization.init(rawValue:)(id *a1@<X0>, char *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  char v6;
  char v7;
  id v8;
  void *v9;
  char v10;

  v3 = *a1;
  if (String.count.getter() < 1)
    v4 = (id)RIOPxrTfTokenEmpty();
  else
    v4 = (id)RIOPxrTfTokenCreateWithCString();
  v5 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  v6 = static _CFObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {

    v7 = 0;
  }
  else
  {
    if (String.count.getter() < 1)
      v8 = (id)RIOPxrTfTokenEmpty();
    else
      v8 = (id)RIOPxrTfTokenCreateWithCString();
    v9 = v8;
    v10 = static _CFObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
      v7 = 1;
    else
      v7 = 2;
  }
  *a2 = v7;
}

void AudioConstants.AudioFile.CalibrationMode.init(rawValue:)(id *a1@<X0>, char *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  char v6;
  char v7;
  id v8;
  void *v9;
  char v10;
  id v11;
  void *v12;
  char v13;

  v3 = *a1;
  if (String.count.getter() < 1)
    v4 = (id)RIOPxrTfTokenEmpty();
  else
    v4 = (id)RIOPxrTfTokenCreateWithCString();
  v5 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  v6 = static _CFObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {

    v7 = 0;
  }
  else
  {
    if (String.count.getter() < 1)
      v8 = (id)RIOPxrTfTokenEmpty();
    else
      v8 = (id)RIOPxrTfTokenCreateWithCString();
    v9 = v8;
    v10 = static _CFObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {

      v7 = 1;
    }
    else
    {
      if (String.count.getter() < 1)
        v11 = (id)RIOPxrTfTokenEmpty();
      else
        v11 = (id)RIOPxrTfTokenCreateWithCString();
      v12 = v11;
      v13 = static _CFObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
        v7 = 2;
      else
        v7 = 3;
    }
  }
  *a2 = v7;
}

float AudioConstants.AudioFile.CalibrationMode.defaultValue.getter()
{
  _BYTE *v0;
  float result;

  result = 80.0;
  if (*v0 != 1)
    return 0.0;
  return result;
}

id static AudioConstants.AudioFile.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static AudioConstants.AudioFile.primType, a1);
}

id one-time initialization function for assetPath()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.assetPath = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.assetPath.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for assetPath, (void **)&static AudioConstants.AudioFile.assetPath, a1);
}

id one-time initialization function for mixGroup()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.mixGroup = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.mixGroup.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for mixGroup, (void **)&static AudioConstants.AudioFile.mixGroup, a1);
}

id one-time initialization function for loadingStrategy()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.loadingStrategy = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.loadingStrategy.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for loadingStrategy, (void **)&static AudioConstants.AudioFile.loadingStrategy, a1);
}

id one-time initialization function for shouldLoop()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.shouldLoop = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.shouldLoop.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for shouldLoop, (void **)&static AudioConstants.AudioFile.shouldLoop, a1);
}

id one-time initialization function for randomizeStart()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.randomizeStart = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.randomizeStart.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for randomizeStart, (void **)&static AudioConstants.AudioFile.randomizeStart, a1);
}

id one-time initialization function for calibrationMode()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.calibrationMode = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.calibrationMode.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for calibrationMode, (void **)&static AudioConstants.AudioFile.calibrationMode, a1);
}

void *static AudioConstants.AudioFile.CalibrationMode.allCases.getter()
{
  return &outlined read-only object #0 of static AudioConstants.AudioFile.CalibrationMode.allCases.getter;
}

id AudioConstants.AudioFile.CalibrationMode.rawValue.getter@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  id result;

  if (!*v1)
  {
    if (String.count.getter() >= 1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*v1 == 1)
  {
    if (String.count.getter() >= 1)
      goto LABEL_8;
LABEL_9:
    result = (id)RIOPxrTfTokenEmpty();
    goto LABEL_10;
  }
  if (String.count.getter() < 1)
    goto LABEL_9;
LABEL_8:
  result = (id)RIOPxrTfTokenCreateWithCString();
LABEL_10:
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioConstants.AudioFile.CalibrationMode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioConstants.AudioFile.CalibrationMode()
{
  char *v0;
  char v1;
  void *v2;
  void *v4;
  char v5;

  v1 = *v0;
  Hasher.init(_seed:)();
  v5 = v1;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v4);
  v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioConstants.AudioFile.CalibrationMode()
{
  char *v0;
  id v1;
  void *v2;
  char v3;

  v3 = *v0;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v2);
  v1 = v2;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioConstants.AudioFile.CalibrationMode()
{
  char *v0;
  char v1;
  void *v2;
  void *v4;
  char v5;

  v1 = *v0;
  Hasher.init(_seed:)();
  v5 = v1;
  AudioConstants.AudioFile.CalibrationMode.rawValue.getter(&v4);
  v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.CalibrationMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.CalibrationMode;
}

id one-time initialization function for normalization()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.normalization = (uint64_t)result;
  return result;
}

id static AudioConstants.AudioFile.normalization.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for normalization, (void **)&static AudioConstants.AudioFile.normalization, a1);
}

void *static AudioConstants.AudioFile.Normalization.allCases.getter()
{
  return &outlined read-only object #0 of static AudioConstants.AudioFile.Normalization.allCases.getter;
}

id AudioConstants.AudioFile.Normalization.rawValue.getter@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  id result;

  if ((*v1 & 1) != 0)
  {
    if (String.count.getter() >= 1)
      goto LABEL_5;
LABEL_6:
    result = (id)RIOPxrTfTokenEmpty();
    goto LABEL_7;
  }
  if (String.count.getter() < 1)
    goto LABEL_6;
LABEL_5:
  result = (id)RIOPxrTfTokenCreateWithCString();
LABEL_7:
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioConstants.AudioFile.Normalization(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioConstants.AudioFile.Normalization()
{
  char *v0;
  char v1;
  void *v2;
  void *v4;
  char v5;

  v1 = *v0;
  Hasher.init(_seed:)();
  v5 = v1;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v4);
  v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioConstants.AudioFile.Normalization()
{
  char *v0;
  id v1;
  void *v2;
  char v3;

  v3 = *v0;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v2);
  v1 = v2;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioConstants.AudioFile.Normalization()
{
  char *v0;
  char v1;
  void *v2;
  void *v4;
  char v5;

  v1 = *v0;
  Hasher.init(_seed:)();
  v5 = v1;
  AudioConstants.AudioFile.Normalization.rawValue.getter(&v4);
  v2 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.Normalization(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AudioConstants.AudioFile.Normalization;
}

uint64_t static AudioConstants.AudioFile.shouldLoopDefault.getter()
{
  return 0;
}

uint64_t static AudioConstants.AudioFile.randomizeStartDefault.getter()
{
  return 0;
}

void static AudioConstants.AudioFile.calibrationModeDefault.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AudioConstants.AudioFile.normalizationDefault.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

id static AudioConstants.AudioFileGroup.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static AudioConstants.AudioFileGroup.primType, a1);
}

id static AudioConstants.MixGroup.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static AudioConstants.MixGroup.primType, a1);
}

id one-time initialization function for gain()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.MixGroup.gain = (uint64_t)result;
  return result;
}

id static AudioConstants.MixGroup.gain.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for gain, (void **)&static AudioConstants.MixGroup.gain, a1);
}

id one-time initialization function for speed()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.MixGroup.speed = (uint64_t)result;
  return result;
}

id static AudioConstants.MixGroup.speed.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for speed, (void **)&static AudioConstants.MixGroup.speed, a1);
}

id one-time initialization function for mute()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.MixGroup.mute = (uint64_t)result;
  return result;
}

id static AudioConstants.MixGroup.mute.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for mute, (void **)&static AudioConstants.MixGroup.mute, a1);
}

double static AudioConstants.MixGroup.gainDefault.getter()
{
  return 0.0;
}

double static AudioConstants.MixGroup.speedDefault.getter()
{
  return 1.0;
}

uint64_t static AudioConstants.MixGroup.muteDefault.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode;
  if (!lazy protocol witness table cache variable for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for AudioConstants.AudioFile.CalibrationMode, &type metadata for AudioConstants.AudioFile.CalibrationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioConstants.AudioFile.CalibrationMode and conformance AudioConstants.AudioFile.CalibrationMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AudioConstants.AudioFile.CalibrationMode()
{
  return lazy protocol witness table accessor for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A](&lazy protocol witness table cache variable for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A], &demangling cache variable for type metadata for [AudioConstants.AudioFile.CalibrationMode]);
}

unint64_t lazy protocol witness table accessor for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization;
  if (!lazy protocol witness table cache variable for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for AudioConstants.AudioFile.Normalization, &type metadata for AudioConstants.AudioFile.Normalization);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioConstants.AudioFile.Normalization and conformance AudioConstants.AudioFile.Normalization);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AudioConstants.AudioFile.Normalization()
{
  return lazy protocol witness table accessor for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A](&lazy protocol witness table cache variable for type [AudioConstants.AudioFile.Normalization] and conformance [A], &demangling cache variable for type metadata for [AudioConstants.AudioFile.Normalization]);
}

uint64_t lazy protocol witness table accessor for type [AudioConstants.AudioFile.CalibrationMode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioConstants()
{
  return &type metadata for AudioConstants;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFile()
{
  return &type metadata for AudioConstants.AudioFile;
}

uint64_t storeEnumTagSinglePayload for AudioConstants.AudioFile.CalibrationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22BCFDF70 + 4 * byte_22BD141B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22BCFDFA4 + 4 * byte_22BD141B0[v4]))();
}

uint64_t sub_22BCFDFA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCFDFAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22BCFDFB4);
  return result;
}

uint64_t sub_22BCFDFC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22BCFDFC8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22BCFDFCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCFDFD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFile.CalibrationMode()
{
  return &type metadata for AudioConstants.AudioFile.CalibrationMode;
}

uint64_t getEnumTagSinglePayload for AudioConstants.AudioFile.Normalization(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioConstants.AudioFile.Normalization(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22BCFE0CC + 4 * byte_22BD141BF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22BCFE100 + 4 * byte_22BD141BA[v4]))();
}

uint64_t sub_22BCFE100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCFE108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22BCFE110);
  return result;
}

uint64_t sub_22BCFE11C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22BCFE124);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22BCFE128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCFE130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AudioConstants.AudioFile.Normalization(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFile.Normalization()
{
  return &type metadata for AudioConstants.AudioFile.Normalization;
}

ValueMetadata *type metadata accessor for AudioConstants.AudioFileGroup()
{
  return &type metadata for AudioConstants.AudioFileGroup;
}

ValueMetadata *type metadata accessor for AudioConstants.MixGroup()
{
  return &type metadata for AudioConstants.MixGroup;
}

uint64_t ObjectsChangeNoticePublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[5];

  v5 = type metadata accessor for ObjectsChangeNoticeSubscription(0, a2, a3, a4);
  swift_allocObject();
  v6 = specialized ObjectsChangeNoticeSubscription.init(_:)(a1);
  v8[3] = v5;
  v8[4] = MEMORY[0x22E2F889C](&protocol conformance descriptor for ObjectsChangeNoticeSubscription<A>, v5);
  v8[0] = v6;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
}

uint64_t type metadata accessor for ObjectsChangeNoticeSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectsChangeNoticeSubscription);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance ObjectsChangeNoticePublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ObjectsChangeNoticePublisher.receive<A>(subscriber:)(a1, a2, a3, a4);
}

uint64_t closure #1 in ObjectsChangeNoticeSubscription.init(_:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 16))
    {
      v2 = (uint64_t *)(result + 24);
      swift_beginAccess();
      v3 = *(_QWORD *)(v1 + 24);
      static Subscribers.Demand.unlimited.getter();
      result = static Subscribers.Demand.== infix(_:_:)();
      if ((result & 1) != 0)
        goto LABEL_6;
      if (v3 < 0)
      {
        __break(1u);
        goto LABEL_26;
      }
      if (v3)
      {
LABEL_6:
        swift_beginAccess();
        v4 = *v2;
        static Subscribers.Demand.unlimited.getter();
        if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
        {
LABEL_13:
          swift_endAccess();
          ObjectsChangeInfo.init(_:)(&v10);
          v6 = dispatch thunk of Subscriber.receive(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_beginAccess();
          v7 = *v2;
          static Subscribers.Demand.unlimited.getter();
          if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
          {
LABEL_22:
            swift_endAccess();
            return swift_release();
          }
          static Subscribers.Demand.unlimited.getter();
          v8 = static Subscribers.Demand.== infix(_:_:)();
          v9 = static Subscribers.Demand.unlimited.getter();
          if ((v8 & 1) != 0)
          {
LABEL_21:
            *v2 = v9;
            goto LABEL_22;
          }
          result = static Subscribers.Demand.== infix(_:_:)();
          if ((result & 1) != 0)
          {
LABEL_19:
            v9 = static Subscribers.Demand.unlimited.getter();
            goto LABEL_21;
          }
          if (((v7 | v6) & 0x8000000000000000) == 0)
          {
            v9 = v7 + v6;
            if (!__OFADD__(v7, v6))
            {
              if ((v9 & 0x8000000000000000) == 0)
                goto LABEL_21;
LABEL_29:
              __break(1u);
              return result;
            }
            goto LABEL_19;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        static Subscribers.Demand.unlimited.getter();
        result = static Subscribers.Demand.== infix(_:_:)();
        if ((result & 1) != 0)
        {
          v5 = static Subscribers.Demand.unlimited.getter();
LABEL_12:
          *v2 = v5;
          goto LABEL_13;
        }
        if ((v4 & 0x8000000000000000) == 0)
        {
          if (v4)
          {
            v5 = v4 - 1;
            goto LABEL_12;
          }
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t ObjectsChangeNoticeSubscription.request(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;

  v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    return swift_endAccess();
  static Subscribers.Demand.unlimited.getter();
  v5 = static Subscribers.Demand.== infix(_:_:)();
  v6 = static Subscribers.Demand.unlimited.getter();
  if ((v5 & 1) != 0)
  {
LABEL_9:
    *v3 = v6;
    return swift_endAccess();
  }
  result = static Subscribers.Demand.== infix(_:_:)();
  if ((result & 1) != 0)
    goto LABEL_7;
  if ((v4 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = v4 + a1;
  if (__OFADD__(v4, a1))
  {
LABEL_7:
    v6 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t ObjectsChangeNoticeSubscription.cancel()()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (result)
    return RIOCancellableCancel();
  return result;
}

uint64_t ObjectsChangeNoticeSubscription.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + direct field offset for ObjectsChangeNoticeSubscription.combineIdentifier;
  v2 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Subscription.request(_:) in conformance ObjectsChangeNoticeSubscription<A>(uint64_t a1)
{
  return ObjectsChangeNoticeSubscription.request(_:)(a1);
}

uint64_t protocol witness for Cancellable.cancel() in conformance ObjectsChangeNoticeSubscription<A>()
{
  return ObjectsChangeNoticeSubscription.cancel()();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance ObjectsChangeNoticeSubscription<A>@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + direct field offset for ObjectsChangeNoticeSubscription.combineIdentifier;
  v4 = type metadata accessor for CombineIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

_QWORD *specialized ObjectsChangeNoticeSubscription.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v1[2] = 0;
  v1[3] = static Subscribers.Demand.none.getter();
  CombineIdentifier.init()();
  v7 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = (char *)swift_allocObject();
  *((_QWORD *)v9 + 2) = v4;
  *((_QWORD *)v9 + 3) = *(_QWORD *)(v3 + 88);
  *((_QWORD *)v9 + 4) = v7;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v9[v8], (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in ObjectsChangeNoticeSubscription.init(_:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  aBlock[3] = &block_descriptor_25;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v11 = RIOPxrUsdNoticeObjectsChangedAddNoticeCallback();
  _Block_release(v10);
  swift_release();
  v12 = (void *)v1[2];
  v1[2] = v11;

  return v1;
}

ValueMetadata *type metadata accessor for ObjectsChangeNoticePublisher()
{
  return &type metadata for ObjectsChangeNoticePublisher;
}

uint64_t type metadata completion function for ObjectsChangeNoticeSubscription()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void base witness table accessor for Cancellable in ObjectsChangeNoticeSubscription<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for CustomCombineIdentifierConvertible in ObjectsChangeNoticeSubscription<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

uint64_t sub_22BCFE834()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_22BCFE858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ObjectsChangeNoticeSubscription.init(_:)()
{
  return closure #1 in ObjectsChangeNoticeSubscription.init(_:)();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

void OutputDescriptor.hash(into:)()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 32);
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int OutputDescriptor.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OutputDescriptor()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance OutputDescriptor()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 32);
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OutputDescriptor()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized static OutputDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  char v9;
  uint64_t result;
  char v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 32);
  v8 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    if (v2 == v5 && v3 == v6)
      return v4 ^ v7 ^ 1u;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v12 & 1) != 0)
      return v4 ^ v7 ^ 1u;
  }
  return result;
}

uint64_t destroy for OutputDescriptor()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OutputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OutputDescriptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OutputDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for OutputDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OutputDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OutputDescriptor()
{
  return &type metadata for OutputDescriptor;
}

uint64_t closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;

  v30 = a5;
  v31 = a6;
  v28 = a3;
  v29 = a4;
  v7 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for __RKEntityActionSpecification();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v21 = v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v20, v11, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
  __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, *MEMORY[0x24BDE6990], v15);
  v22 = *v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v21 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
    *v21 = v22;
  }
  v25 = *(_QWORD *)(v22 + 16);
  v24 = *(_QWORD *)(v22 + 24);
  if (v25 >= v24 >> 1)
  {
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
    *v21 = v22;
  }
  *(_QWORD *)(v22 + 16) = v25 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v22+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v25, v19, v15);
}

uint64_t specialized static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  char v35;

  v0 = type metadata accessor for __RKEntityGroupActionOrder();
  v32 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v10 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v10 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  v11 = v34;
  if (v35 == 1)
  {
    v33 = v34;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v12 = v11;
LABEL_23:
    outlined consume of Result<Double, Object.Error>(v12, 1);
    return MEMORY[0x24BEE4AF8];
  }
  v31 = v2;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v13 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v13 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  v14 = v34;
  if (v35 == 1)
    goto LABEL_22;
  v30 = v34;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v15 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v15 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  v14 = v34;
  if (v35 == 1)
    goto LABEL_22;
  v29 = (uint64_t)v34;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v16 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v16 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  v14 = v34;
  if (v35 == 1)
    goto LABEL_22;
  v28 = v34;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v17 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v17 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  v18 = v31;
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v34);

  swift_release();
  v14 = v34;
  if ((v35 & 1) != 0)
  {
LABEL_22:
    v33 = v14;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v12 = v14;
    goto LABEL_23;
  }
  swift_retain();
  __RKEntityActionMultiplePerformBehavior.init(inputs:)((uint64_t)v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](v21);
  *(&v27 - 8) = (uint64_t)&v34;
  *(&v27 - 7) = (uint64_t)v9;
  v22 = (uint64_t)v30;
  *(&v27 - 6) = (uint64_t)v11;
  *(&v27 - 5) = v22;
  *((_BYTE *)&v27 - 32) = v29 & 1;
  *(&v27 - 3) = (uint64_t)v28;
  *((_BYTE *)&v27 - 16) = v14 & 1;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:), (uint64_t)(&v27 - 10));
  v19 = (uint64_t)v34;
  if (v34[2] < 2uLL)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v23 = type metadata accessor for __RKEntityActionSpecification();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_22BD0C360;
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v18, *MEMORY[0x24BDE68D0], v0);
    swift_bridgeObjectRetain_n();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v24 + 104))(v26 + v25, *MEMORY[0x24BDE69C8], v23);
    swift_bridgeObjectRelease();
    v19 = v26;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t outlined destroy of __RKEntityActionMultiplePerformBehavior?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 48), *(unsigned __int8 *)(v2 + 64));
}

BOOL static SceneDescriptionFoundations.Variability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SceneDescriptionFoundations.Variability.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SceneDescriptionFoundations.Variability.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.Variability(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.Variability, &type metadata for SceneDescriptionFoundations.Variability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Variability and conformance SceneDescriptionFoundations.Variability);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SceneDescriptionFoundations.Variability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22BCFF880 + 4 * byte_22BD145CD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22BCFF8B4 + 4 * asc_22BD145C8[v4]))();
}

uint64_t sub_22BCFF8B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCFF8BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22BCFF8C4);
  return result;
}

uint64_t sub_22BCFF8D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22BCFF8D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22BCFF8DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BCFF8E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.Variability()
{
  return &type metadata for SceneDescriptionFoundations.Variability;
}

uint64_t specialized RIOPxrVtValueRef.mapUSDValue<A>()()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  v0 = RIOPxrVtValueCopyString();
  if (v0)
  {
    v1 = (void *)v0;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  if (swift_dynamicCast())
    return v3;
  else
    return 0;
}

void one-time initialization function for ResourceNameOutputName()
{
  strcpy((char *)&static ReferenceImageBuilder.ResourceNameOutputName, "resource_name");
  unk_255BFA306 = -4864;
}

void one-time initialization function for GroupNameOutputName()
{
  strcpy((char *)&static ReferenceImageBuilder.GroupNameOutputName, "resource_group");
  unk_255BFA317 = -18;
}

void one-time initialization function for ResourceNameOutputIdentifier()
{
  strcpy((char *)&static ReferenceImageBuilder.ResourceNameOutputIdentifier, "resourceName");
  unk_255BFA325 = 0;
  unk_255BFA326 = -5120;
}

void one-time initialization function for GroupNameOutputIdentifier()
{
  strcpy((char *)&static ReferenceImageBuilder.GroupNameOutputIdentifier, "resourceGroup");
  unk_255BFA336 = -4864;
}

uint64_t closure #1 in ReferenceImageBuilder.stageSubscription.getter()
{
  id v0;
  id v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v1;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = closure #1 in closure #1 in ReferenceImageBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE4B08];
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v9 + 32) = v6;
  v12 = v9;
  specialized Array._endMutation()();
  v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v12);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t closure #1 in closure #1 in ReferenceImageBuilder.stageSubscription.getter()
{
  id v0;
  void *v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t inited;
  uint64_t v12;
  unint64_t v14;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  type metadata accessor for NamedPropertyDirtyState();
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = v1;
  v3 = v1;
  v4 = MEMORY[0x24BEE4B08];
  v5 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v3, MEMORY[0x24BEE4B08]);

  v2[2] = v4;
  v2[3] = v5;
  swift_retain();
  if (String.count.getter() < 1)
    v6 = (id)RIOPxrTfTokenEmpty();
  else
    v6 = (id)RIOPxrTfTokenCreateWithCString();
  v7 = v6;
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = v7;
  v9 = v7;
  v10 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v9, v4);

  v8[2] = v4;
  v8[3] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C650;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v8;
  v14 = inited;
  specialized Array._endMutation()();
  v12 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v14);
  swift_bridgeObjectRelease();
  swift_release();
  return v12;
}

void closure #1 in ReferenceImageBuilder.ImageReferenceState.init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int HasCustomLayerMetaData;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = RIOBuilderInputsCopyStage();
  if (!v4)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = (void *)v4;
  v6 = (void *)RIOPxrUsdStageCopyRootLayer();
  HasCustomLayerMetaData = RIOPxrSdfLayerHasCustomLayerMetaData();

  if (!HasCustomLayerMetaData)
    goto LABEL_12;
  v8 = RIOBuilderInputsCopyStage();
  if (!v8)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v9 = (void *)v8;
  if (String.count.getter() < 1)
    v10 = (id)RIOPxrTfTokenEmpty();
  else
    v10 = (id)RIOPxrTfTokenCreateWithCString();
  v11 = v10;
  v12 = (void *)RIOPxrUsdStageCopyRootLayer();
  v13 = (void *)RIOPxrSdfLayerCopyCustomLayerDataValue();

  if (!v13)
  {

    goto LABEL_12;
  }
  v14 = specialized RIOPxrVtValueRef.mapUSDValue<A>()();
  v16 = v15;

  if (!v16)
    goto LABEL_12;
  v20[0] = v14;
  v20[1] = v16;
  Regex.init(_regexString:version:)();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type Regex<Substring> and conformance Regex<A>();
  v17 = BidirectionalCollection<>.starts<A>(with:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
LABEL_12:
    v18 = RIOBuilderInputsCopyStage();
    if (v18)
    {
      v19 = (void *)v18;
      RIOPxrUsdStageGetMetersPerUnit();

      return;
    }
    goto LABEL_15;
  }
}

uint64_t ReferenceImageBuilder.run(inputs:)()
{
  void *v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  __int128 v19;
  uint64_t v20;
  _QWORD v21[8];
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  swift_retain();
  specialized ReferenceImageBuilder.ImageReferenceState.init(_:)(v21);
  result = outlined init with take of ReferenceImageBuilder.ImageReferenceState?((uint64_t)v21, (uint64_t)&v22);
  if (!v23)
    return result;
  v4 = v25;
  v3 = v26;
  v6 = v27;
  v5 = v28;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD998]), sel_initWithCGImage_orientation_physicalWidth_, v24, 1, v22);
  dispatch thunk of __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)();
  v8 = (void *)MEMORY[0x22E2F5278]();
  objc_msgSend(v7, sel_setName_, v8);

  v9 = v7;
  dispatch thunk of __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)();
  swift_bridgeObjectRelease();

  swift_beginAccess();
  v10 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (!v10)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v17 = v4;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v18, &v19);
  type metadata accessor for Outputs();
  swift_dynamicCast();
  if (one-time initialization token for ResourceNameOutputName != -1)
    swift_once();
  v11 = static ReferenceImageBuilder.ResourceNameOutputName;
  v12 = unk_255BFA300;
  v13 = MEMORY[0x24BEE0D00];
  v20 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v19 = v6;
  *((_QWORD *)&v19 + 1) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v19, v11, v12);
  swift_release();
  swift_beginAccess();
  v14 = objc_getAssociatedObject(v1, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (!v14)
    goto LABEL_11;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v18, &v19);
  swift_dynamicCast();
  if (one-time initialization token for GroupNameOutputName != -1)
    swift_once();
  v15 = static ReferenceImageBuilder.GroupNameOutputName;
  v16 = unk_255BFA310;
  v20 = v13;
  *(_QWORD *)&v19 = v17;
  *((_QWORD *)&v19 + 1) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v19, v15, v16);
  swift_release();
  return outlined release of ReferenceImageBuilder.ImageReferenceState?((uint64_t)v21);
}

uint64_t type metadata accessor for ReferenceImageBuilder()
{
  return objc_opt_self();
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance ReferenceImageBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v5;

  v0 = closure #1 in ReferenceImageBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v5 = inited;
  specialized Array._endMutation()();
  v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

void specialized static CGImageRef.image(with:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

CGImageRef sub_22BD00360(uint64_t a1, uint64_t a2)
{
  const __CFData *isa;
  CGImageSource *v3;
  size_t PrimaryImageIndex;
  CGImageRef ImageAtIndex;

  if ((a2 & 0xFF000000000000) == 0)
    return 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = CGImageSourceCreateWithData(isa, 0);

  if (!v3)
    return 0;
  PrimaryImageIndex = CGImageSourceGetPrimaryImageIndex(v3);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v3, PrimaryImageIndex, 0);

  return ImageAtIndex;
}

Swift::Int specialized ReferenceImageBuilder.outputDescriptors()()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5C0;
  if (one-time initialization token for ResourceNameOutputName != -1)
    swift_once();
  v2 = static ReferenceImageBuilder.ResourceNameOutputName;
  v1 = unk_255BFA300;
  v3 = one-time initialization token for ResourceNameOutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v5 = static ReferenceImageBuilder.ResourceNameOutputIdentifier;
  v4 = unk_255BFA320;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  *(_BYTE *)(inited + 64) = 0;
  v6 = one-time initialization token for GroupNameOutputName;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v8 = static ReferenceImageBuilder.GroupNameOutputName;
  v7 = unk_255BFA310;
  v9 = one-time initialization token for GroupNameOutputIdentifier;
  swift_bridgeObjectRetain();
  if (v9 != -1)
    swift_once();
  v11 = static ReferenceImageBuilder.GroupNameOutputIdentifier;
  v10 = unk_255BFA330;
  *(_QWORD *)(inited + 72) = v8;
  *(_QWORD *)(inited + 80) = v7;
  *(_QWORD *)(inited + 88) = v11;
  *(_QWORD *)(inited + 96) = v10;
  *(_BYTE *)(inited + 104) = 0;
  swift_bridgeObjectRetain();
  v12 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v12;
}

void specialized ReferenceImageBuilder.ImageReferenceState.init(_:)(_QWORD *a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *EmptyValue;
  void *v11;
  void *v12;
  char Float;
  void *v14;
  char v15;
  void *CFDataNoCopy;
  void *v17;
  void *v18;
  void *v19;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
    v2 = (id)RIOPxrTfTokenEmpty();
  else
    v2 = (id)RIOPxrTfTokenCreateWithCString();
  v3 = v2;
  if (!RIOPxrUsdPrimHasAttribute())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
LABEL_18:
    swift_release();
    swift_release();
    v14 = 0;
    v15 = 1;
LABEL_19:
    outlined consume of Result<AnyAttribute, Object.Error>(v14, v15);
    goto LABEL_20;
  }
  v4 = RIOPxrUsdPrimCopyAttribute();

  type metadata accessor for AnyAttribute();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v4;
  if (String.count.getter() <= 0)
    v6 = (id)RIOPxrTfTokenEmpty();
  else
    v6 = (id)RIOPxrTfTokenCreateWithCString();
  v7 = v6;
  if (!RIOPxrUsdPrimHasAttribute())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    goto LABEL_18;
  }
  v8 = RIOPxrUsdPrimCopyAttribute();

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue)
    EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  v11 = (void *)RIOPxrVtValueCopyAssetPath();
  if (!v11)
  {
    swift_release();

    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);
    swift_release();
    goto LABEL_20;
  }

  v12 = (void *)RIOPxrUsdAttributeCopyValue();
  if (!v12)
    v12 = (void *)RIOPxrVtValueCreateEmptyValue();
  Float = RIOPxrVtValueGetFloat();

  if ((Float & 1) == 0)
  {

    swift_release();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);
    v14 = v5;
    v15 = 0;
    goto LABEL_19;
  }
  closure #1 in ReferenceImageBuilder.ImageReferenceState.init(_:)();
  v17 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  v18 = v11;
  v19 = (void *)RIOPxrArAssetCreate();
  swift_release();
  if (v19)
  {
    CFDataNoCopy = (void *)RIOPxrArAssetCreateCFDataNoCopy();
    if (!CFDataNoCopy)
    {
      outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
      outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);

      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_21;
    }
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();

    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(v5, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v9, 0);
    swift_bridgeObjectRelease();
    swift_release();

  }
LABEL_20:
  CFDataNoCopy = 0;
LABEL_21:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = CFDataNoCopy;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
}

uint64_t specialized ReferenceImageBuilder.clear(inputs:)()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;

  v1 = v0;
  swift_beginAccess();
  v2 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (!v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v9, &v10);
  type metadata accessor for Outputs();
  swift_dynamicCast();
  if (one-time initialization token for ResourceNameOutputName != -1)
    swift_once();
  v4 = static ReferenceImageBuilder.ResourceNameOutputName;
  v5 = unk_255BFA300;
  v10 = 0u;
  v11 = 0u;
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v10, v4, v5);
  swift_release();
  swift_beginAccess();
  v6 = objc_getAssociatedObject(v1, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (!v6)
    goto LABEL_9;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v9, &v10);
  swift_dynamicCast();
  if (one-time initialization token for GroupNameOutputName != -1)
    swift_once();
  v7 = static ReferenceImageBuilder.GroupNameOutputName;
  v8 = unk_255BFA310;
  v10 = 0u;
  v11 = 0u;
  swift_bridgeObjectRetain();
  Outputs.subscript.setter((uint64_t)&v10, v7, v8);
  return swift_release();
}

uint64_t outlined init with take of ReferenceImageBuilder.ImageReferenceState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReferenceImageBuilder.ImageReferenceState?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of ReferenceImageBuilder.ImageReferenceState?(uint64_t a1)
{
  outlined consume of ReferenceImageBuilder.ImageReferenceState?(*(_QWORD *)a1, *(void **)(a1 + 8), *(void **)(a1 + 16));
  return a1;
}

uint64_t outlined consume of ReferenceImageBuilder.ImageReferenceState?(uint64_t a1, void *a2, void *a3)
{
  uint64_t result;

  if (a2)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Regex<Substring> and conformance Regex<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<Substring>);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE7460], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>);
  }
  return result;
}

uint64_t destroy for ReferenceImageBuilder.ImageReferenceState(uint64_t a1)
{

  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = v3;
  v8 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceImageBuilder.ImageReferenceState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReferenceImageBuilder.ImageReferenceState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReferenceImageBuilder.ImageReferenceState()
{
  return &type metadata for ReferenceImageBuilder.ImageReferenceState;
}

uint64_t closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;

  v31 = a4;
  v32 = a5;
  v33 = a3;
  v30 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for __RKEntityActionSpecification();
  v16 = *(_QWORD *)(v29 - 8);
  v17 = MEMORY[0x24BDAC7A8](v29);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v20(v15, v30, v12, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v7, v32, v12);
  v21 = v33;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  v22 = v29;
  __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimation:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, *MEMORY[0x24BDE6990], v22);
  v23 = *v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v21 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
    *v21 = v23;
  }
  v26 = *(_QWORD *)(v23 + 16);
  v25 = *(_QWORD *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v23);
    *v21 = v23;
  }
  *(_QWORD *)(v23 + 16) = v26 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v23+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v26, v19, v22);
}

uint64_t specialized static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  void *v21;
  int HasPrimAtPrimPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(unint64_t, _QWORD, uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v52 = type metadata accessor for __RKEntityGroupActionOrder();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v51 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x24BDAC7A8](v3);
  v49 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  v46 = v11;
  v47 = v13;
  v48 = a1;
  v19 = v52;
  v44 = v8;
  v45 = v6;
  if (!*(_QWORD *)(v16 + 16))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v43 = v5;
  v20 = *(id *)(v16 + 32);
  swift_bridgeObjectRelease();
  result = RIOBuilderInputsCopyStage();
  if (result)
  {
    v21 = (void *)result;
    HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

    if (HasPrimAtPrimPath)
    {
      v42 = v20;
      v23 = (uint64_t)v46;
      Inputs.identifierForEntity(withInputKey:)(0x6F6974616D696E61, 0xEF797469746E456ELL, (uint64_t)v46);
      v24 = v47;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v23, 1, v12) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v15, v23, v12);
        swift_retain();
        v25 = v49;
        __RKEntityActionMultiplePerformBehavior.init(inputs:)(v49);
        v26 = v45;
        v27 = v43;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v25, 0, 1, v43);
        v28 = v44;
        v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 32))(v44, v25, v27);
        v53 = MEMORY[0x24BEE4AF8];
        MEMORY[0x24BDAC7A8](v29);
        *(&v41 - 4) = (uint64_t)&v53;
        *(&v41 - 3) = (uint64_t)v28;
        *(&v41 - 2) = (uint64_t)v15;
        v30 = v51;
        v31 = v19;
        if (one-time initialization token for OutputName != -1)
          swift_once();
        specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:), (uint64_t)(&v41 - 6));
        v17 = v53;
        v32 = v50;
        if (*(_QWORD *)(v53 + 16) < 2uLL)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
          v33 = type metadata accessor for __RKEntityActionSpecification();
          v34 = *(_QWORD *)(v33 - 8);
          v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
          v36 = swift_allocObject();
          *(_OWORD *)(v36 + 16) = xmmword_22BD0C360;
          (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v30, *MEMORY[0x24BDE68D0], v31);
          swift_bridgeObjectRetain_n();
          __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
          v37 = *(void (**)(unint64_t, _QWORD, uint64_t))(v34 + 104);
          v38 = v36 + v35;
          v28 = v44;
          v26 = v45;
          v37(v38, *MEMORY[0x24BDE69C8], v33);
          swift_bridgeObjectRelease();
          v17 = v36;
        }
        v39 = v43;
        v40 = v47;

        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v39);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v12);
        swift_bridgeObjectRelease();
        return v17;
      }

      outlined destroy of Any?(v23, &demangling cache variable for type metadata for UUID?);
    }
    else
    {

    }
    return MEMORY[0x24BEE4AF8];
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:)(double a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  void (*v25)(char *, _QWORD, uint64_t);
  unint64_t *v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  __n128 v36;
  int v37;

  v37 = a8;
  v36 = a3;
  v34 = a7;
  v35 = a6;
  v33 = a5;
  v8 = type metadata accessor for __RKEntitySpinDirectionType();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v32 - v17;
  v19 = type metadata accessor for __RKEntityActionSpecification();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v24(v18, v33, v12, v21);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v15, v34, v12);
  v25 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v26 = v35;
  v25(v11, *MEMORY[0x24BDE6930], v8);
  __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v23, *MEMORY[0x24BDE6978], v19);
  v27 = *v26;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v26 = v27;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
    *v26 = v27;
  }
  v30 = *(_QWORD *)(v27 + 16);
  v29 = *(_QWORD *)(v27 + 24);
  if (v30 >= v29 >> 1)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v27);
    *v26 = v27;
  }
  *(_QWORD *)(v27 + 16) = v30 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))(v27+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v30, v23, v19);
}

_QWORD *specialized static ActionBuilder.generateOrbitActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  _QWORD *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;

  v0 = type metadata accessor for __RKEntityGroupActionOrder();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  v47 = v1;
  v48 = v10;
  v49 = v8;
  if (!*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRelease();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v46 = v7;
  v12 = *(id *)(v11 + 32);
  swift_bridgeObjectRelease();
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v13 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v13 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  v14 = v3;
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  v15 = v50;
  if (v51 == 1)
  {
    v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    v16 = v15;
LABEL_23:
    outlined consume of Result<Double, Object.Error>(v16, 1);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v45 = v12;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v17 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v17 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  v18 = v50;
  if (v51 == 1)
  {
    v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    v16 = v18;
    goto LABEL_23;
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v19 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v19 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  v20 = v45;
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  v22 = v50;
  v21 = v51;
  if (v54 == 1)
  {
    v23 = v52;
    v24 = v53;
    v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    outlined consume of Result<Vector3<Double>, Object.Error>(v22, v21, v23, v24, 1);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v43 = v52;
  *(_QWORD *)&v44 = v51;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v25 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v25 = (id)RIOPxrTfTokenCreateWithCString();
    v20 = v45;
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v50);

  swift_release();
  v26 = v50;
  if (v51 == 1)
  {
    v55 = v50;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();

    v16 = v26;
    goto LABEL_23;
  }
  v45 = v50;
  Inputs.identifierForEntity(withInputKey:)(0x6E457265746E6563, 0xEC00000079746974, (uint64_t)v6);
  v29 = v49;
  v30 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v6, 1, v46) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6);

    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v31 = v43;
  v43 = v31;
  *(_QWORD *)&v32 = v22;
  *((_QWORD *)&v32 + 1) = v44;
  v44 = v32;
  v33 = v48;
  v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 32))(v48, v6, v30);
  v50 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(double *)&v35 = MEMORY[0x24BDAC7A8](v34);
  *((_QWORD *)&v43 - 8) = &v50;
  *((_QWORD *)&v43 - 7) = v33;
  *((_QWORD *)&v43 - 6) = v15;
  *((_QWORD *)&v43 - 5) = v18;
  *(&v43 - 2) = v35;
  *((_BYTE *)&v43 - 16) = v45 & 1;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:), (uint64_t)(&v43 - 5));
  v27 = v50;
  v36 = v47;
  if (v50[2] < 2uLL)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v37 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v38 = type metadata accessor for __RKEntityActionSpecification();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_22BD0C360;
    (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v14, *MEMORY[0x24BDE68D0], v37);
    swift_bridgeObjectRetain_n();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v39 + 104))(v41 + v40, *MEMORY[0x24BDE69C8], v38);
    swift_bridgeObjectRelease();
    v27 = (_QWORD *)v41;
  }
  v42 = v48;

  (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v46);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generateOrbitActionSpecifications(inputs:)(*(double *)(v2 + 32), *(double *)(v2 + 40), *(__n128 *)(v2 + 48), a1, a2, *(unint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 64));
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x24BDCD748]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x24BDCD810]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x24BDCD898]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t URL.deletingPathExtension()()
{
  return MEMORY[0x24BDCD908]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x24BDCD968]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCDCD8]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t type metadata accessor for __RealityFileError()
{
  return MEMORY[0x24BDE5F60]();
}

uint64_t static __AssetRef.__fromCore(_:)()
{
  return MEMORY[0x24BDE5F70]();
}

uint64_t __AssetRef.__as<A>(_:)()
{
  return MEMORY[0x24BDE5F78]();
}

uint64_t type metadata accessor for __AssetRef()
{
  return MEMORY[0x24BDE5F80]();
}

uint64_t static __SceneRef.__fromCore(_:)()
{
  return MEMORY[0x24BDE5F90]();
}

uint64_t type metadata accessor for __SceneRef()
{
  return MEMORY[0x24BDE5FA0]();
}

uint64_t ModelEntity.init(_coreEntity:)()
{
  return MEMORY[0x24BDE6010]();
}

uint64_t ModelEntity.init()()
{
  return MEMORY[0x24BDE6030]();
}

uint64_t type metadata accessor for ModelEntity()
{
  return MEMORY[0x24BDE6038]();
}

uint64_t __EngineRef.__as<A>(_:)()
{
  return MEMORY[0x24BDE6060]();
}

uint64_t type metadata accessor for __EngineRef()
{
  return MEMORY[0x24BDE6068]();
}

uint64_t __EntityRef.__validInteractionIdentifier.getter()
{
  return MEMORY[0x24BDE6070]();
}

uint64_t static __EntityRef.__fromCore(_:)()
{
  return MEMORY[0x24BDE6078]();
}

uint64_t __EntityRef.__as<A>(_:)()
{
  return MEMORY[0x24BDE6080]();
}

uint64_t type metadata accessor for __EntityRef()
{
  return MEMORY[0x24BDE6088]();
}

uint64_t AnchorEntity.init(_coreEntity:)()
{
  return MEMORY[0x24BDE60C0]();
}

uint64_t AnchorEntity.init()()
{
  return MEMORY[0x24BDE60D8]();
}

uint64_t type metadata accessor for AnchorEntity()
{
  return MEMORY[0x24BDE60E0]();
}

uint64_t HasHierarchy.parent.getter()
{
  return MEMORY[0x24BDE6108]();
}

uint64_t HasHierarchy.children.getter()
{
  return MEMORY[0x24BDE6118]();
}

uint64_t HasHierarchy.setParent(_:preservingWorldTransform:)()
{
  return MEMORY[0x24BDE6120]();
}

uint64_t HasBodyTracking.bodyTracking.setter()
{
  return MEMORY[0x24BDE6378]();
}

uint64_t __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter()
{
  return MEMORY[0x24BDE63B8]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS()
{
  return MEMORY[0x24BDE63C0]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter()
{
  return MEMORY[0x24BDE63D8]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.version.getter()
{
  return MEMORY[0x24BDE63E0]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:)()
{
  return MEMORY[0x24BDE63E8]();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter()
{
  return MEMORY[0x24BDE63F0]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget()
{
  return MEMORY[0x24BDE63F8]();
}

uint64_t __REAssetBundle.ExportOptions.deploymentTarget.getter()
{
  return MEMORY[0x24BDE6410]();
}

uint64_t static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)()
{
  return MEMORY[0x24BDE6420]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement()
{
  return MEMORY[0x24BDE6428]();
}

uint64_t type metadata accessor for __REAssetBundle.ExportOptions()
{
  return MEMORY[0x24BDE6438]();
}

uint64_t dispatch thunk of __REAssetService.__handle.getter()
{
  return MEMORY[0x24BDE64C0]();
}

uint64_t __RKScenePhysics.Registration.componentType.getter()
{
  return MEMORY[0x24BDE64C8]();
}

uint64_t static __RKScenePhysics.registration.getter()
{
  return MEMORY[0x24BDE64D0]();
}

uint64_t __RKScenePhysics.gravity.setter()
{
  return MEMORY[0x24BDE64D8]();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return MEMORY[0x24BDE64E0]();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.getter()
{
  return MEMORY[0x24BDE64E8]();
}

uint64_t dispatch thunk of __ServiceLocator.engine.getter()
{
  return MEMORY[0x24BDE6500]();
}

uint64_t static __ServiceLocator.shared.getter()
{
  return MEMORY[0x24BDE6508]();
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return MEMORY[0x24BDE6510]();
}

uint64_t static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  return MEMORY[0x24BDE6518]();
}

uint64_t AnimationResource.definition.getter()
{
  return MEMORY[0x24BDE6520]();
}

uint64_t static AnimationResource.generate(with:)()
{
  return MEMORY[0x24BDE6528]();
}

uint64_t AnimationResource.repeat(duration:)()
{
  return MEMORY[0x24BDE6530]();
}

uint64_t type metadata accessor for AnimationResource()
{
  return MEMORY[0x24BDE6538]();
}

uint64_t BodyTrackedEntity.init(_coreEntity:)()
{
  return MEMORY[0x24BDE6548]();
}

uint64_t type metadata accessor for BodyTrackedEntity()
{
  return MEMORY[0x24BDE6558]();
}

uint64_t type metadata accessor for CollisionComponent()
{
  return MEMORY[0x24BDE65B0]();
}

uint64_t SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)()
{
  return MEMORY[0x24BDE65C8]();
}

uint64_t SpotLightComponent.Shadow.init(depthBias:cullMode:zNear:zFar:)()
{
  return MEMORY[0x24BDE65D0]();
}

uint64_t type metadata accessor for SpotLightComponent.Shadow()
{
  return MEMORY[0x24BDE65E0]();
}

uint64_t type metadata accessor for SpotLightComponent()
{
  return MEMORY[0x24BDE65F8]();
}

uint64_t __AssetLoadRequest.__allocating_init(serviceLocator:)()
{
  return MEMORY[0x24BDE6608]();
}

Swift::Void __swiftcall __AssetLoadRequest.waitForCompletion()()
{
  MEMORY[0x24BDE6610]();
}

uint64_t __AssetLoadRequest.add(asset:)()
{
  return MEMORY[0x24BDE6618]();
}

{
  return MEMORY[0x24BDE6620]();
}

uint64_t type metadata accessor for __AssetLoadRequest()
{
  return MEMORY[0x24BDE6628]();
}

uint64_t __ComponentTypeRef.__as<A>(_:)()
{
  return MEMORY[0x24BDE6630]();
}

uint64_t type metadata accessor for __ComponentTypeRef()
{
  return MEMORY[0x24BDE6638]();
}

uint64_t type metadata accessor for __RKEntityMoveEase()
{
  return MEMORY[0x24BDE6650]();
}

uint64_t dispatch thunk of EnvironmentResource.coreIBLAsset.getter()
{
  return MEMORY[0x24BDE6660]();
}

uint64_t static EnvironmentResource.__load(contentsOf:withName:)()
{
  return MEMORY[0x24BDE6668]();
}

uint64_t type metadata accessor for EnvironmentResource()
{
  return MEMORY[0x24BDE6670]();
}

uint64_t static __SceneResourceCache.attachImportedScenesForSceneChangeToEntity(importedScenes:entity:)()
{
  return MEMORY[0x24BDE66B0]();
}

uint64_t type metadata accessor for __SceneResourceCache()
{
  return MEMORY[0x24BDE66B8]();
}

uint64_t BodyTrackingComponent.init()()
{
  return MEMORY[0x24BDE66C0]();
}

uint64_t type metadata accessor for BodyTrackingComponent()
{
  return MEMORY[0x24BDE66C8]();
}

uint64_t type metadata accessor for __RKEntityMoveEaseType()
{
  return MEMORY[0x24BDE6700]();
}

uint64_t __SceneImportOperation.__ImportedScene.init(sceneIdentifier:sceneName:sceneAsset:sceneActive:)()
{
  return MEMORY[0x24BDE6710]();
}

uint64_t type metadata accessor for __SceneImportOperation.__ImportedScene()
{
  return MEMORY[0x24BDE6718]();
}

uint64_t static AnimationTimingFunction.cubicBezier(controlPoint1:controlPoint2:)()
{
  return MEMORY[0x24BDE6728]();
}

uint64_t static AnimationTimingFunction.easeIn.getter()
{
  return MEMORY[0x24BDE6730]();
}

uint64_t static AnimationTimingFunction.linear.getter()
{
  return MEMORY[0x24BDE6738]();
}

uint64_t static AnimationTimingFunction.default.getter()
{
  return MEMORY[0x24BDE6740]();
}

uint64_t static AnimationTimingFunction.easeOut.getter()
{
  return MEMORY[0x24BDE6748]();
}

uint64_t static AnimationTimingFunction.easeInOut.getter()
{
  return MEMORY[0x24BDE6750]();
}

uint64_t type metadata accessor for AnimationTimingFunction()
{
  return MEMORY[0x24BDE6758]();
}

uint64_t type metadata accessor for __RKEntityMoveSelection()
{
  return MEMORY[0x24BDE67C8]();
}

uint64_t __RKWaitActionArguments.init(duration:)()
{
  return MEMORY[0x24BDE67D8]();
}

uint64_t __RKWaitActionArguments.duration.getter()
{
  return MEMORY[0x24BDE67E0]();
}

uint64_t type metadata accessor for __RKWaitActionArguments()
{
  return MEMORY[0x24BDE67E8]();
}

uint64_t type metadata accessor for DirectionalLightComponent.Shadow.ShadowProjectionType()
{
  return MEMORY[0x24BDE6818]();
}

uint64_t DirectionalLightComponent.Shadow.init(shadowProjection:depthBias:cullMode:)()
{
  return MEMORY[0x24BDE6820]();
}

uint64_t type metadata accessor for DirectionalLightComponent.Shadow()
{
  return MEMORY[0x24BDE6840]();
}

uint64_t DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)()
{
  return MEMORY[0x24BDE6850]();
}

uint64_t type metadata accessor for DirectionalLightComponent()
{
  return MEMORY[0x24BDE6868]();
}

uint64_t __RKEntityAudioActionType.rawValue.getter()
{
  return MEMORY[0x24BDE6890]();
}

uint64_t type metadata accessor for __RKEntityAudioActionType()
{
  return MEMORY[0x24BDE6898]();
}

uint64_t type metadata accessor for __RKEntityGroupActionOrder()
{
  return MEMORY[0x24BDE68E0]();
}

uint64_t type metadata accessor for __RKEntityProximityTrigger.ExitType()
{
  return MEMORY[0x24BDE68F8]();
}

uint64_t type metadata accessor for __RKEntitySpinDirectionType()
{
  return MEMORY[0x24BDE6938]();
}

uint64_t type metadata accessor for __RKAudioSpatialModeSelection()
{
  return MEMORY[0x24BDE6960]();
}

uint64_t type metadata accessor for __RKEntityActionSpecification()
{
  return MEMORY[0x24BDE69E8]();
}

uint64_t __RKEntityHideActionArguments.animationStyle.getter()
{
  return MEMORY[0x24BDE69F8]();
}

uint64_t __RKEntityHideActionArguments.buildOutAnimationType.getter()
{
  return MEMORY[0x24BDE6A00]();
}

uint64_t __RKEntityHideActionArguments.ease.getter()
{
  return MEMORY[0x24BDE6A08]();
}

uint64_t __RKEntityHideActionArguments.target.getter()
{
  return MEMORY[0x24BDE6A10]();
}

uint64_t __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)()
{
  return MEMORY[0x24BDE6A18]();
}

uint64_t __RKEntityHideActionArguments.distance.getter()
{
  return MEMORY[0x24BDE6A20]();
}

uint64_t __RKEntityHideActionArguments.duration.getter()
{
  return MEMORY[0x24BDE6A28]();
}

uint64_t __RKEntityHideActionArguments.easeType.getter()
{
  return MEMORY[0x24BDE6A30]();
}

uint64_t type metadata accessor for __RKEntityHideActionArguments()
{
  return MEMORY[0x24BDE6A38]();
}

uint64_t __RKEntityShowActionArguments.animationStyle.getter()
{
  return MEMORY[0x24BDE6A40]();
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.getter()
{
  return MEMORY[0x24BDE6A48]();
}

uint64_t __RKEntityShowActionArguments.ease.getter()
{
  return MEMORY[0x24BDE6A50]();
}

uint64_t __RKEntityShowActionArguments.target.getter()
{
  return MEMORY[0x24BDE6A58]();
}

uint64_t __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)()
{
  return MEMORY[0x24BDE6A60]();
}

uint64_t __RKEntityShowActionArguments.distance.getter()
{
  return MEMORY[0x24BDE6A68]();
}

uint64_t __RKEntityShowActionArguments.duration.getter()
{
  return MEMORY[0x24BDE6A70]();
}

uint64_t __RKEntityShowActionArguments.easeType.getter()
{
  return MEMORY[0x24BDE6A78]();
}

uint64_t type metadata accessor for __RKEntityShowActionArguments()
{
  return MEMORY[0x24BDE6A80]();
}

uint64_t __RKEntitySpinActionArguments.iterations.getter()
{
  return MEMORY[0x24BDE6A88]();
}

uint64_t __RKEntitySpinActionArguments.axis.getter()
{
  return MEMORY[0x24BDE6A90]();
}

uint64_t __RKEntitySpinActionArguments.target.getter()
{
  return MEMORY[0x24BDE6A98]();
}

uint64_t __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)()
{
  return MEMORY[0x24BDE6AA0]();
}

uint64_t __RKEntitySpinActionArguments.duration.getter()
{
  return MEMORY[0x24BDE6AA8]();
}

uint64_t __RKEntitySpinActionArguments.direction.getter()
{
  return MEMORY[0x24BDE6AB0]();
}

uint64_t type metadata accessor for __RKEntitySpinActionArguments()
{
  return MEMORY[0x24BDE6AB8]();
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.getter()
{
  return MEMORY[0x24BDE6AC0]();
}

uint64_t __RKChangeSceneActionArguments.init(sceneRoot:targetSceneIdentifier:)()
{
  return MEMORY[0x24BDE6AC8]();
}

uint64_t type metadata accessor for __RKChangeSceneActionArguments()
{
  return MEMORY[0x24BDE6AD0]();
}

uint64_t __RKEntityActionAnimationStyle.init(rawValue:)()
{
  return MEMORY[0x24BDE6AD8]();
}

uint64_t __RKEntityActionAnimationStyle.rawValue.getter()
{
  return MEMORY[0x24BDE6AE0]();
}

uint64_t type metadata accessor for __RKEntityActionAnimationStyle()
{
  return MEMORY[0x24BDE6AE8]();
}

uint64_t __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)()
{
  return MEMORY[0x24BDE6AF8]();
}

uint64_t __RKEntityActionGroupArguments.order.getter()
{
  return MEMORY[0x24BDE6B00]();
}

uint64_t __RKEntityActionGroupArguments.actions.getter()
{
  return MEMORY[0x24BDE6B08]();
}

uint64_t __RKEntityActionGroupArguments.exclusive.getter()
{
  return MEMORY[0x24BDE6B10]();
}

uint64_t __RKEntityActionGroupArguments.loopCount.getter()
{
  return MEMORY[0x24BDE6B18]();
}

uint64_t type metadata accessor for __RKEntityActionGroupArguments()
{
  return MEMORY[0x24BDE6B20]();
}

uint64_t __RKEntityAudioActionArguments.spatialMode.getter()
{
  return MEMORY[0x24BDE6B28]();
}

uint64_t __RKEntityAudioActionArguments.multiplePerformBehavior.getter()
{
  return MEMORY[0x24BDE6B30]();
}

uint64_t __RKEntityAudioActionArguments.path.getter()
{
  return MEMORY[0x24BDE6B38]();
}

uint64_t __RKEntityAudioActionArguments.type.getter()
{
  return MEMORY[0x24BDE6B40]();
}

uint64_t __RKEntityAudioActionArguments.loops.getter()
{
  return MEMORY[0x24BDE6B48]();
}

uint64_t __RKEntityAudioActionArguments.target.getter()
{
  return MEMORY[0x24BDE6B50]();
}

uint64_t __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)()
{
  return MEMORY[0x24BDE6B58]();
}

uint64_t __RKEntityAudioActionArguments.volume.getter()
{
  return MEMORY[0x24BDE6B60]();
}

uint64_t type metadata accessor for __RKEntityAudioActionArguments()
{
  return MEMORY[0x24BDE6B68]();
}

uint64_t __RKEntityForceActionArguments.target.getter()
{
  return MEMORY[0x24BDE6B70]();
}

uint64_t __RKEntityForceActionArguments.init(target:force:velocity:)()
{
  return MEMORY[0x24BDE6B78]();
}

uint64_t __RKEntityForceActionArguments.velocity.getter()
{
  return MEMORY[0x24BDE6B80]();
}

uint64_t type metadata accessor for __RKEntityForceActionArguments()
{
  return MEMORY[0x24BDE6B88]();
}

uint64_t type metadata accessor for __RKEntityTriggerSpecification()
{
  return MEMORY[0x24BDE6BC0]();
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.getter()
{
  return MEMORY[0x24BDE6BD0]();
}

uint64_t __RKEntityCustomActionArguments.target.getter()
{
  return MEMORY[0x24BDE6BD8]();
}

uint64_t __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)()
{
  return MEMORY[0x24BDE6BE0]();
}

uint64_t type metadata accessor for __RKEntityCustomActionArguments()
{
  return MEMORY[0x24BDE6BE8]();
}

uint64_t __RKEntityEmphasisAnimationType.init(rawValue:)()
{
  return MEMORY[0x24BDE6BF0]();
}

uint64_t __RKEntityEmphasisAnimationType.rawValue.getter()
{
  return MEMORY[0x24BDE6BF8]();
}

uint64_t type metadata accessor for __RKEntityEmphasisAnimationType()
{
  return MEMORY[0x24BDE6C00]();
}

uint64_t __RKEntityEmphasisActionArguments.animationStyle.getter()
{
  return MEMORY[0x24BDE6C10]();
}

uint64_t __RKEntityEmphasisActionArguments.emphasisAnimationType.getter()
{
  return MEMORY[0x24BDE6C18]();
}

uint64_t __RKEntityEmphasisActionArguments.target.getter()
{
  return MEMORY[0x24BDE6C20]();
}

uint64_t __RKEntityEmphasisActionArguments.init(target:duration:iterations:animationStyle:emphasisAnimationType:)()
{
  return MEMORY[0x24BDE6C28]();
}

uint64_t __RKEntityEmphasisActionArguments.duration.getter()
{
  return MEMORY[0x24BDE6C30]();
}

uint64_t type metadata accessor for __RKEntityEmphasisActionArguments()
{
  return MEMORY[0x24BDE6C38]();
}

uint64_t __RKEntityInteractionSpecification.action.getter()
{
  return MEMORY[0x24BDE6C40]();
}

uint64_t __RKEntityInteractionSpecification.init(trigger:action:)()
{
  return MEMORY[0x24BDE6C48]();
}

uint64_t __RKEntityInteractionSpecification.trigger.getter()
{
  return MEMORY[0x24BDE6C50]();
}

uint64_t type metadata accessor for __RKEntityInteractionSpecification()
{
  return MEMORY[0x24BDE6C58]();
}

uint64_t __RKEntityTransformActionArguments.orientation.getter()
{
  return MEMORY[0x24BDE6C68]();
}

uint64_t __RKEntityTransformActionArguments.relativeToEntity.getter()
{
  return MEMORY[0x24BDE6C70]();
}

uint64_t __RKEntityTransformActionArguments.ease.getter()
{
  return MEMORY[0x24BDE6C78]();
}

uint64_t __RKEntityTransformActionArguments.scale.getter()
{
  return MEMORY[0x24BDE6C80]();
}

uint64_t __RKEntityTransformActionArguments.target.getter()
{
  return MEMORY[0x24BDE6C88]();
}

uint64_t __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)()
{
  return MEMORY[0x24BDE6C90]();
}

uint64_t __RKEntityTransformActionArguments.duration.getter()
{
  return MEMORY[0x24BDE6C98]();
}

uint64_t __RKEntityTransformActionArguments.easeType.getter()
{
  return MEMORY[0x24BDE6CA0]();
}

uint64_t __RKEntityTransformActionArguments.location.getter()
{
  return MEMORY[0x24BDE6CA8]();
}

uint64_t __RKEntityTransformActionArguments.moveType.getter()
{
  return MEMORY[0x24BDE6CB0]();
}

uint64_t type metadata accessor for __RKEntityTransformActionArguments()
{
  return MEMORY[0x24BDE6CB8]();
}

uint64_t __RKEntityOrbitEntityActionArguments.orbitalAxis.getter()
{
  return MEMORY[0x24BDE6CC0]();
}

uint64_t __RKEntityOrbitEntityActionArguments.pivotTarget.getter()
{
  return MEMORY[0x24BDE6CC8]();
}

uint64_t __RKEntityOrbitEntityActionArguments.orientToPath.getter()
{
  return MEMORY[0x24BDE6CD0]();
}

uint64_t __RKEntityOrbitEntityActionArguments.spinDirection.getter()
{
  return MEMORY[0x24BDE6CD8]();
}

uint64_t __RKEntityOrbitEntityActionArguments.target.getter()
{
  return MEMORY[0x24BDE6CE0]();
}

uint64_t __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)()
{
  return MEMORY[0x24BDE6CE8]();
}

uint64_t __RKEntityOrbitEntityActionArguments.duration.getter()
{
  return MEMORY[0x24BDE6CF0]();
}

uint64_t __RKEntityOrbitEntityActionArguments.rotations.getter()
{
  return MEMORY[0x24BDE6CF8]();
}

uint64_t type metadata accessor for __RKEntityOrbitEntityActionArguments()
{
  return MEMORY[0x24BDE6D00]();
}

uint64_t __RKEntityLookAtCameraActionArguments.target.getter()
{
  return MEMORY[0x24BDE6D08]();
}

uint64_t __RKEntityLookAtCameraActionArguments.init(target:duration:animationDuration:direction:rotation:upVector:loops:)()
{
  return MEMORY[0x24BDE6D10]();
}

uint64_t __RKEntityLookAtCameraActionArguments.duration.getter()
{
  return MEMORY[0x24BDE6D18]();
}

uint64_t __RKEntityLookAtCameraActionArguments.upVector.getter()
{
  return MEMORY[0x24BDE6D20]();
}

uint64_t __RKEntityLookAtCameraActionArguments.direction.getter()
{
  return MEMORY[0x24BDE6D28]();
}

uint64_t type metadata accessor for __RKEntityLookAtCameraActionArguments()
{
  return MEMORY[0x24BDE6D30]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipStart.getter()
{
  return MEMORY[0x24BDE6D38]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipDuration.getter()
{
  return MEMORY[0x24BDE6D40]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipReversed.getter()
{
  return MEMORY[0x24BDE6D48]();
}

uint64_t __RKEntityStartAnimateActionArguments.clipReverses.getter()
{
  return MEMORY[0x24BDE6D50]();
}

uint64_t __RKEntityStartAnimateActionArguments.animationSpeed.getter()
{
  return MEMORY[0x24BDE6D58]();
}

uint64_t __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter()
{
  return MEMORY[0x24BDE6D60]();
}

uint64_t __RKEntityStartAnimateActionArguments.target.getter()
{
  return MEMORY[0x24BDE6D68]();
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimation:)()
{
  return MEMORY[0x24BDE6D70]();
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)()
{
  return MEMORY[0x24BDE6D78]();
}

uint64_t __RKEntityStartAnimateActionArguments.loopCount.getter()
{
  return MEMORY[0x24BDE6D80]();
}

uint64_t type metadata accessor for __RKEntityStartAnimateActionArguments()
{
  return MEMORY[0x24BDE6D88]();
}

uint64_t type metadata accessor for __RKEntityActionMultiplePerformBehavior()
{
  return MEMORY[0x24BDE6DA8]();
}

uint64_t type metadata accessor for __RKEntityShowActionBuildInAnimationType()
{
  return MEMORY[0x24BDE6E08]();
}

uint64_t type metadata accessor for __RKEntityHideActionBuildOutAnimationType()
{
  return MEMORY[0x24BDE6E68]();
}

uint64_t dispatch thunk of Scene.containsChangeSceneActions()()
{
  return MEMORY[0x24BDE6E78]();
}

uint64_t static Scene.__fromCore(_:)()
{
  return MEMORY[0x24BDE6E98]();
}

uint64_t Scene.__sceneIdentifier.getter()
{
  return MEMORY[0x24BDE6ED0]();
}

uint64_t Scene.__sceneIdentifier.setter()
{
  return MEMORY[0x24BDE6ED8]();
}

uint64_t dispatch thunk of Scene.name.getter()
{
  return MEMORY[0x24BDE6EE8]();
}

uint64_t static Scene.fromCore(_:)()
{
  return MEMORY[0x24BDE6F08]();
}

uint64_t type metadata accessor for Scene()
{
  return MEMORY[0x24BDE6F20]();
}

uint64_t Entity.coreEntity.getter()
{
  return MEMORY[0x24BDE6F28]();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return MEMORY[0x24BDE6F30]();
}

Swift::Void __swiftcall Entity.setLoadContext(fileName:)(Swift::String fileName)
{
  MEMORY[0x24BDE6F40](fileName._countAndFlagsBits, fileName._object);
}

uint64_t static Entity.__fromCore(_:)()
{
  return MEMORY[0x24BDE7030]();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return MEMORY[0x24BDE7038]();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  return MEMORY[0x24BDE7040]();
}

uint64_t Entity.ComponentSet.set<A>(_:)()
{
  return MEMORY[0x24BDE7080]();
}

uint64_t type metadata accessor for Entity.ComponentSet()
{
  return MEMORY[0x24BDE7098]();
}

uint64_t Entity.ComponentSet.subscript.getter()
{
  return MEMORY[0x24BDE70A8]();
}

uint64_t Entity.ComponentSet.subscript.setter()
{
  return MEMORY[0x24BDE70B0]();
}

uint64_t Entity.__interactions.modify()
{
  return MEMORY[0x24BDE70B8]();
}

uint64_t Entity.__interactions.setter()
{
  return MEMORY[0x24BDE70C0]();
}

uint64_t type metadata accessor for Entity.ChildCollection()
{
  return MEMORY[0x24BDE7138]();
}

uint64_t Entity.ChildCollection.subscript.getter()
{
  return MEMORY[0x24BDE7158]();
}

uint64_t Entity.__interactionIdentifier.getter()
{
  return MEMORY[0x24BDE7168]();
}

uint64_t Entity.__interactionIdentifier.setter()
{
  return MEMORY[0x24BDE7170]();
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:)(Swift::Bool recursive)
{
  MEMORY[0x24BDE7178](recursive);
}

uint64_t dispatch thunk of Entity.name.getter()
{
  return MEMORY[0x24BDE7190]();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return MEMORY[0x24BDE7198]();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)()
{
  return MEMORY[0x24BDE71A8]();
}

uint64_t type metadata accessor for Entity()
{
  return MEMORY[0x24BDE71E8]();
}

uint64_t dispatch thunk of __Engine.__coreEngine.getter()
{
  return MEMORY[0x24BDE7238]();
}

uint64_t __Engine.queue.getter()
{
  return MEMORY[0x24BDE7240]();
}

uint64_t dispatch thunk of static Component.__coreComponentType.getter()
{
  return MEMORY[0x24BDE7250]();
}

uint64_t dispatch thunk of static Component.componentName.getter()
{
  return MEMORY[0x24BDE7260]();
}

uint64_t static Component.registerComponentProxy(componentName:)()
{
  return MEMORY[0x24BDE7270]();
}

uint64_t Transform.init(matrix:)()
{
  return MEMORY[0x24BDE72D0]();
}

uint64_t static __REAsset.__fromHandle(_:)()
{
  return MEMORY[0x24BDE7308]();
}

uint64_t dispatch thunk of __REAsset.__handle.getter()
{
  return MEMORY[0x24BDE7310]();
}

uint64_t type metadata accessor for __REAsset()
{
  return MEMORY[0x24BDE7318]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t BindTarget.EntityPath.billboardBlendFactor.getter()
{
  return MEMORY[0x24BDE7358]();
}

uint64_t BindTarget.EntityPath.entity(_:)()
{
  return MEMORY[0x24BDE7360]();
}

uint64_t BindTarget.EntityPath.opacity.getter()
{
  return MEMORY[0x24BDE7368]();
}

uint64_t BindTarget.EntityPath.transform.getter()
{
  return MEMORY[0x24BDE7370]();
}

uint64_t type metadata accessor for BindTarget.EntityPath()
{
  return MEMORY[0x24BDE7378]();
}

uint64_t static BindTarget.entity(_:)()
{
  return MEMORY[0x24BDE7390]();
}

uint64_t type metadata accessor for BindTarget()
{
  return MEMORY[0x24BDE73A8]();
}

uint64_t SpinAction.init(revolutions:localAxis:timingFunction:isAdditive:)()
{
  return MEMORY[0x24BDE73E8]();
}

uint64_t type metadata accessor for SpinAction()
{
  return MEMORY[0x24BDE73F8]();
}

uint64_t AnimationView.source.getter()
{
  return MEMORY[0x24BDE7440]();
}

uint64_t type metadata accessor for AnimationView()
{
  return MEMORY[0x24BDE7448]();
}

uint64_t ImpulseAction.init(targetEntity:linearImpulse:)()
{
  return MEMORY[0x24BDE7458]();
}

uint64_t type metadata accessor for ImpulseAction()
{
  return MEMORY[0x24BDE7468]();
}

uint64_t AnimationGroup.init(group:name:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  return MEMORY[0x24BDE7478]();
}

uint64_t AnimationGroup.group.getter()
{
  return MEMORY[0x24BDE7480]();
}

uint64_t type metadata accessor for AnimationGroup()
{
  return MEMORY[0x24BDE7490]();
}

uint64_t static FromToByAction.TransformMode.default.getter()
{
  return MEMORY[0x24BDE7608]();
}

uint64_t FromToByAction.init(from:to:timing:isAdditive:)()
{
  return MEMORY[0x24BDE7620]();
}

uint64_t FromToByAction<>.init(by:timing:isAdditive:)()
{
  return MEMORY[0x24BDE7628]();
}

uint64_t FromToByAction<>.init(from:to:mode:timing:isAdditive:)()
{
  return MEMORY[0x24BDE7630]();
}

uint64_t type metadata accessor for ModelSortGroup.DepthPass()
{
  return MEMORY[0x24BDE7658]();
}

uint64_t ModelSortGroup.init(depthPass:)()
{
  return MEMORY[0x24BDE7668]();
}

uint64_t type metadata accessor for ModelSortGroup()
{
  return MEMORY[0x24BDE7670]();
}

uint64_t BillboardAction.Transition.init(duration:timingFunction:)()
{
  return MEMORY[0x24BDE76A8]();
}

uint64_t type metadata accessor for BillboardAction.Transition()
{
  return MEMORY[0x24BDE76B0]();
}

uint64_t BillboardAction.init(transitionIn:transitionOut:)()
{
  return MEMORY[0x24BDE76B8]();
}

uint64_t type metadata accessor for BillboardAction()
{
  return MEMORY[0x24BDE76C8]();
}

uint64_t EmphasizeAction.init(motionType:style:isAdditive:)()
{
  return MEMORY[0x24BDE76D8]();
}

uint64_t type metadata accessor for EmphasizeAction.EmphasisMotionType()
{
  return MEMORY[0x24BDE7720]();
}

uint64_t type metadata accessor for EmphasizeAction.EmphasisAnimationStyle()
{
  return MEMORY[0x24BDE7740]();
}

uint64_t type metadata accessor for EmphasizeAction()
{
  return MEMORY[0x24BDE7750]();
}

uint64_t PlayAudioAction.init(targetEntity:audioResourceName:gain:useControlledPlayback:)()
{
  return MEMORY[0x24BDE7760]();
}

uint64_t type metadata accessor for PlayAudioAction()
{
  return MEMORY[0x24BDE7770]();
}

uint64_t static AnimationFillMode.forwards.getter()
{
  return MEMORY[0x24BDE7870]();
}

uint64_t type metadata accessor for AnimationFillMode()
{
  return MEMORY[0x24BDE7878]();
}

uint64_t OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:isOrientedToPath:isAdditive:)()
{
  return MEMORY[0x24BDE78D0]();
}

uint64_t type metadata accessor for OrbitEntityAction()
{
  return MEMORY[0x24BDE78E0]();
}

uint64_t NotificationAction.init(name:customArguments:)()
{
  return MEMORY[0x24BDE7910]();
}

uint64_t type metadata accessor for NotificationAction()
{
  return MEMORY[0x24BDE7920]();
}

uint64_t dispatch thunk of AnimationDefinition.delay.getter()
{
  return MEMORY[0x24BDE7948]();
}

uint64_t dispatch thunk of AnimationDefinition.duration.getter()
{
  return MEMORY[0x24BDE7950]();
}

uint64_t type metadata accessor for AnimationRepeatMode()
{
  return MEMORY[0x24BDE7968]();
}

uint64_t PlayAnimationAction.init(animationName:targetEntity:transitionDuration:blendLayer:separateAnimatedValue:useParentedControllers:handoffType:)()
{
  return MEMORY[0x24BDE79B0]();
}

uint64_t type metadata accessor for PlayAnimationAction()
{
  return MEMORY[0x24BDE79C0]();
}

uint64_t static AnimationHandoffType.snapshotAndReplace(applyToAllLayers:)()
{
  return MEMORY[0x24BDE79C8]();
}

uint64_t static AnimationHandoffType.stop.getter()
{
  return MEMORY[0x24BDE79D0]();
}

uint64_t static AnimationHandoffType.compose.getter()
{
  return MEMORY[0x24BDE79D8]();
}

uint64_t static AnimationHandoffType.default.getter()
{
  return MEMORY[0x24BDE79E0]();
}

uint64_t static AnimationHandoffType.replace(applyToAllLayers:)()
{
  return MEMORY[0x24BDE79E8]();
}

uint64_t type metadata accessor for AnimationHandoffType()
{
  return MEMORY[0x24BDE79F0]();
}

uint64_t CustomComponentProxy.init(with:)()
{
  return MEMORY[0x24BDE7A00]();
}

uint64_t static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)()
{
  return MEMORY[0x24BDE7A08]();
}

uint64_t type metadata accessor for CustomComponentProxy()
{
  return MEMORY[0x24BDE7A10]();
}

uint64_t static ActionEntityResolution.sourceEntity.getter()
{
  return MEMORY[0x24BDE7A58]();
}

uint64_t type metadata accessor for ActionEntityResolution()
{
  return MEMORY[0x24BDE7A68]();
}

uint64_t type metadata accessor for MaterialParameterTypes.FaceCulling()
{
  return MEMORY[0x24BDE7A88]();
}

uint64_t SetEntityEnabledAction.init(targetEntity:isEnabled:)()
{
  return MEMORY[0x24BDE7A98]();
}

uint64_t type metadata accessor for SetEntityEnabledAction()
{
  return MEMORY[0x24BDE7AA8]();
}

uint64_t ModelSortGroupComponent.init(group:order:)()
{
  return MEMORY[0x24BDE7BE0]();
}

uint64_t type metadata accessor for ModelSortGroupComponent()
{
  return MEMORY[0x24BDE7BE8]();
}

uint64_t SetEntityPropertyAction.init(targetEntity:key:value:)()
{
  return MEMORY[0x24BDE7C48]();
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.setter()
{
  return MEMORY[0x24BDE7C78]();
}

uint64_t AnimationLibraryComponent.animations.modify()
{
  return MEMORY[0x24BDE7C80]();
}

uint64_t AnimationLibraryComponent.init()()
{
  return MEMORY[0x24BDE7C88]();
}

uint64_t type metadata accessor for AnimationLibraryComponent()
{
  return MEMORY[0x24BDE7C90]();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createSchemePrefix(with:)()
{
  return MEMORY[0x24BDE7D00]();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)()
{
  return MEMORY[0x24BDE7D08]();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)()
{
  return MEMORY[0x24BDE7D10]();
}

uint64_t static __USDARReferenceProvidingPlugin.instance(for:)()
{
  return MEMORY[0x24BDE7D18]();
}

uint64_t type metadata accessor for __USDARReferenceProvidingPlugin()
{
  return MEMORY[0x24BDE7D20]();
}

uint64_t __RKEntityPlayTimelineActionArguments.init(target:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)()
{
  return MEMORY[0x24BDE7D30]();
}

uint64_t Regex.init(_regexString:version:)()
{
  return MEMORY[0x24BEE73C0]();
}

uint64_t Regex.firstMatch(in:)()
{
  return MEMORY[0x24BEE73C8]();
}

uint64_t Regex.Match.subscript.getter()
{
  return MEMORY[0x24BEE7408]();
}

uint64_t Regex.Match.output.getter()
{
  return MEMORY[0x24BEE7420]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x24BEE76E8]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t CombineIdentifier.init()()
{
  return MEMORY[0x24BDB9418]();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return MEMORY[0x24BDB9420]();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return MEMORY[0x24BDB9A30]();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return MEMORY[0x24BDB9A38]();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return MEMORY[0x24BDB9AB0]();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return MEMORY[0x24BDB9AB8]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x24BDB9AC0]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x24BDB9C78]();
}

uint64_t PassthroughSubject.receive<A>(subscriber:)()
{
  return MEMORY[0x24BDB9C80]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x24BDB9C90]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t BinaryFloatingPoint.init<A>(exactly:)()
{
  return MEMORY[0x24BEE0218]();
}

uint64_t BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x24BEE0228]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x24BEE0240]();
}

uint64_t BinaryFloatingPoint<>.init<A>(_:)()
{
  return MEMORY[0x24BEE0248]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCF818]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x24BEE75F0]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCFB30](a1);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x24BEE0B78]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE0B80]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x24BEE0BE8]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CD0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t Sequence.flatMap<A>(_:)()
{
  return MEMORY[0x24BEE0ED8]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x24BEE0F40]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFBB0]();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFBC0]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC08]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC58]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x24BEE1370]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC80]();
}

uint64_t Float.significand.getter()
{
  return MEMORY[0x24BEE1490]();
}

uint64_t Float._roundSlowPath(_:)()
{
  return MEMORY[0x24BEE1498]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x24BDCFCC0]();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFCD0]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Set.Index._asCocoa.modify()
{
  return MEMORY[0x24BEE1608]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x24BEE1908]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t CGColorRef.components.getter()
{
  return MEMORY[0x24BDBD758]();
}

uint64_t static simd_quatf.identity.getter()
{
  return MEMORY[0x24BDE7D80]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return MEMORY[0x24BEE5678]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x24BEE5BD0]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x24BEE7978]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x24BDD0600]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return MEMORY[0x24BEE5E68]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x24BEE22F8]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return MEMORY[0x24BEE2308]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x24BEE2320]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x24BEE2328]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x24BEE2348]();
}

uint64_t __CocoaSet.isEqual(to:)()
{
  return MEMORY[0x24BEE2350]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x24BEE2360]();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return MEMORY[0x24BEE2370]();
}

uint64_t AnyHashable.hash(into:)()
{
  return MEMORY[0x24BEE23B8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t dispatch thunk of SIMDStorage.init()()
{
  return MEMORY[0x24BEE2488]();
}

uint64_t dispatch thunk of SIMDStorage.subscript.getter()
{
  return MEMORY[0x24BEE2490]();
}

uint64_t dispatch thunk of SIMDStorage.subscript.setter()
{
  return MEMORY[0x24BEE2498]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t OpaquePointer.hashValue.getter()
{
  return MEMORY[0x24BEE27C0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2950](a1);
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x24BEE2EA8]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x24BEE2EE0]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x24BEE2F08]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x24BEE2F18]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE3090]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x24BEE30D0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t _arrayConditionalCast<A, B>(_:)()
{
  return MEMORY[0x24BEE3280]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3368]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34B8]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x24BEE38F0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x24BEE3A28]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t SIMD.description.getter()
{
  return MEMORY[0x24BEE3E90]();
}

uint64_t SIMD.init(arrayLiteral:)()
{
  return MEMORY[0x24BEE3E98]();
}

uint64_t SIMD.init(from:)()
{
  return MEMORY[0x24BEE3EA0]();
}

uint64_t SIMD.hash(into:)()
{
  return MEMORY[0x24BEE3EA8]();
}

uint64_t SIMD.encode(to:)()
{
  return MEMORY[0x24BEE3EB0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD0730]();
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD0758]();
}

uint64_t type metadata accessor for SIMD2()
{
  return MEMORY[0x24BEE40C8]();
}

uint64_t SIMD3<>.cgColor.getter()
{
  return MEMORY[0x24BDE7DA8]();
}

uint64_t type metadata accessor for SIMD3()
{
  return MEMORY[0x24BEE40F8]();
}

uint64_t type metadata accessor for SIMD4()
{
  return MEMORY[0x24BEE4158]();
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD07A0]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x24BEE42C8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x24BEE4310](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x24BEE4318](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x24BEE4408]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD07D0]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD0810]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x24BDBDA78](space, components);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDAA8](red, green, blue, alpha);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDAF0](color);
}

CFStringRef CGColorSpaceCopyName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x24BDBDB60](space);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDBB8](name);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9170](data, options);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x24BDD9190](isrc);
}

uint64_t GetCoreRealityIOBundleVersion()
{
  return MEMORY[0x24BE26398]();
}

uint64_t IsCoreRIOBundleVersionValid()
{
  return MEMORY[0x24BE263A0]();
}

uint64_t REAnchorComponentGetComponentType()
{
  return MEMORY[0x24BE20300]();
}

uint64_t REAnchoringComponentGetComponentType()
{
  return MEMORY[0x24BE20388]();
}

uint64_t REAnchoringComponentSetDescriptorAlignment()
{
  return MEMORY[0x24BE20448]();
}

uint64_t REAnchoringComponentSetDescriptorBounds()
{
  return MEMORY[0x24BE20458]();
}

uint64_t REAnchoringComponentSetDescriptorClassification()
{
  return MEMORY[0x24BE20468]();
}

uint64_t REAnchoringComponentSetDescriptorResourceGroup()
{
  return MEMORY[0x24BE20478]();
}

uint64_t REAnchoringComponentSetDescriptorResourceName()
{
  return MEMORY[0x24BE20480]();
}

uint64_t REAnchoringComponentSetDescriptorTransform()
{
  return MEMORY[0x24BE20490]();
}

uint64_t REAnchoringComponentSetDescriptorType()
{
  return MEMORY[0x24BE20498]();
}

uint64_t REAnchoringComponentSetIsRequired()
{
  return MEMORY[0x24BE204A0]();
}

uint64_t REAnchoringComponentSetScaleFactor()
{
  return MEMORY[0x24BE204B8]();
}

uint64_t REAssetHandleCopyAssetIdentifierString()
{
  return MEMORY[0x24BE207C0]();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return MEMORY[0x24BE20920]();
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable()
{
  return MEMORY[0x24BE20978]();
}

uint64_t REAssetManagerSceneAssetCreate()
{
  return MEMORY[0x24BE20A40]();
}

uint64_t REAssetWithMetadataCreate()
{
  return MEMORY[0x24BE20B38]();
}

uint64_t REAssetWithMetadataSetConfigurationNames()
{
  return MEMORY[0x24BE20B40]();
}

uint64_t REAssetWithMetadataSetLabel()
{
  return MEMORY[0x24BE20B48]();
}

uint64_t REAudioFileAssetCompleteLoad()
{
  return MEMORY[0x24BE20B98]();
}

uint64_t REAudioFileAssetConfigurationCreate()
{
  return MEMORY[0x24BE20BA8]();
}

uint64_t REAudioFileAssetConfigurationDestroy()
{
  return MEMORY[0x24BE20BB0]();
}

uint64_t REAudioFileAssetConfigurationGetCalibrationLevel()
{
  return MEMORY[0x24BE20BB8]();
}

uint64_t REAudioFileAssetConfigurationGetCalibrationMode()
{
  return MEMORY[0x24BE20BC0]();
}

uint64_t REAudioFileAssetConfigurationGetMixGroupName()
{
  return MEMORY[0x24BE20BC8]();
}

uint64_t REAudioFileAssetConfigurationGetNormalizationMode()
{
  return MEMORY[0x24BE20BD0]();
}

uint64_t REAudioFileAssetConfigurationGetRandomizeStart()
{
  return MEMORY[0x24BE20BD8]();
}

uint64_t REAudioFileAssetConfigurationGetShouldLoop()
{
  return MEMORY[0x24BE20BE0]();
}

uint64_t REAudioFileAssetConfigurationGetStreaming()
{
  return MEMORY[0x24BE20BE8]();
}

uint64_t REAudioFileAssetConfigurationSetCalibrationLevel()
{
  return MEMORY[0x24BE20BF0]();
}

uint64_t REAudioFileAssetConfigurationSetCalibrationMode()
{
  return MEMORY[0x24BE20BF8]();
}

uint64_t REAudioFileAssetConfigurationSetMixGroupName()
{
  return MEMORY[0x24BE20C10]();
}

uint64_t REAudioFileAssetConfigurationSetNormalizationMode()
{
  return MEMORY[0x24BE20C18]();
}

uint64_t REAudioFileAssetConfigurationSetRandomizeStart()
{
  return MEMORY[0x24BE20C20]();
}

uint64_t REAudioFileAssetConfigurationSetShouldLoop()
{
  return MEMORY[0x24BE20C28]();
}

uint64_t REAudioFileAssetConfigurationSetStreaming()
{
  return MEMORY[0x24BE20C30]();
}

uint64_t REAudioFileAssetCreateWithMappedDataAndConfiguration()
{
  return MEMORY[0x24BE20C50]();
}

uint64_t REAudioFileAssetCreateWithMappedDataNullable()
{
  return MEMORY[0x24BE20C58]();
}

uint64_t REAudioFileAssetGetLayoutTag()
{
  return MEMORY[0x24BE20C90]();
}

uint64_t REAudioFileGroupAssetCreateWithFileAssets()
{
  return MEMORY[0x24BE20D18]();
}

uint64_t REAudioMixGroupsComponentAddMixGroup()
{
  return MEMORY[0x24BE20DA0]();
}

uint64_t REAudioMixGroupsComponentCreateMixGroupID()
{
  return MEMORY[0x24BE20DA8]();
}

uint64_t REAudioMixGroupsComponentGetComponentType()
{
  return MEMORY[0x24BE20DB8]();
}

uint64_t REAudioMixGroupsComponentRemoveGroup()
{
  return MEMORY[0x24BE20DD0]();
}

uint64_t REBallSocketJointComponentGetComponentType()
{
  return MEMORY[0x24BE20F28]();
}

uint64_t REBodyTrackingComponentGetComponentType()
{
  return MEMORY[0x24BE212C8]();
}

uint64_t REColliderComponentGetComponentType()
{
  return MEMORY[0x24BE21518]();
}

uint64_t REComponentClassFromName()
{
  return MEMORY[0x24BE216B0]();
}

uint64_t REComponentClassFromType()
{
  return MEMORY[0x24BE216B8]();
}

uint64_t REComponentClassFromTypeInfo()
{
  return MEMORY[0x24BE216C0]();
}

uint64_t REComponentClassGetName()
{
  return MEMORY[0x24BE216C8]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x24BE216F8]();
}

uint64_t REComponentMarkDirty()
{
  return MEMORY[0x24BE21708]();
}

uint64_t RECustomComponentGetObject()
{
  return MEMORY[0x24BE218E0]();
}

uint64_t REDebugMeshComponentGetComponentType()
{
  return MEMORY[0x24BE219D8]();
}

uint64_t REDirectionalLightComponentGetComponentType()
{
  return MEMORY[0x24BE21BA0]();
}

uint64_t REEngineGetServiceLocator()
{
  return MEMORY[0x24BE21F50]();
}

uint64_t REEntityAddComponentByClass()
{
  return MEMORY[0x24BE22000]();
}

uint64_t REEntityAddCustomComponent()
{
  return MEMORY[0x24BE22010]();
}

uint64_t REEntityGetChild()
{
  return MEMORY[0x24BE22080]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x24BE220A8]();
}

uint64_t REEntityGetCustomComponent()
{
  return MEMORY[0x24BE220B8]();
}

uint64_t REEntityGetName()
{
  return MEMORY[0x24BE220C8]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x24BE220D8]();
}

uint64_t REEntityGetOrAddCustomComponent()
{
  return MEMORY[0x24BE220E0]();
}

uint64_t REEntityGetParent()
{
  return MEMORY[0x24BE220E8]();
}

uint64_t REEntityInsertChild()
{
  return MEMORY[0x24BE22118]();
}

uint64_t REEntityRemoveComponentByClass()
{
  return MEMORY[0x24BE22160]();
}

uint64_t REEntityRemoveCustomComponent()
{
  return MEMORY[0x24BE22168]();
}

uint64_t REGlobalTypeRegistryWithReadLock()
{
  return MEMORY[0x24BE225C8]();
}

uint64_t REHingeJointComponentGetComponentType()
{
  return MEMORY[0x24BE22638]();
}

uint64_t REImageBasedLightComponentGetComponentType()
{
  return MEMORY[0x24BE227B0]();
}

uint64_t REImageBasedLightComponentSetBlendIBLsFactor()
{
  return MEMORY[0x24BE227E8]();
}

uint64_t REImageBasedLightComponentSetBlendRotationEnabled()
{
  return MEMORY[0x24BE227F0]();
}

uint64_t REImageBasedLightComponentSetEnableBlend()
{
  return MEMORY[0x24BE227F8]();
}

uint64_t REImageBasedLightComponentSetGlobalIBL()
{
  return MEMORY[0x24BE22800]();
}

uint64_t REImageBasedLightComponentSetIBLBlendNullable()
{
  return MEMORY[0x24BE22810]();
}

uint64_t REImageBasedLightComponentSetIBLNullable()
{
  return MEMORY[0x24BE22818]();
}

uint64_t REImageBasedLightComponentSetIntensityExponent()
{
  return MEMORY[0x24BE22820]();
}

uint64_t REImageBasedLightComponentSetMixColor()
{
  return MEMORY[0x24BE22828]();
}

uint64_t REImageBasedLightComponentSetMixFactor()
{
  return MEMORY[0x24BE22830]();
}

uint64_t REImageBasedLightComponentSetRotationEnabled()
{
  return MEMORY[0x24BE22838]();
}

uint64_t REImageBasedLightReceiverComponentGetComponentType()
{
  return MEMORY[0x24BE22840]();
}

uint64_t REImageBasedLightReceiverComponentSetIBLEntity()
{
  return MEMORY[0x24BE22850]();
}

uint64_t REMeshComponentGetComponentType()
{
  return MEMORY[0x24BE23300]();
}

uint64_t REMeshSortingComponentGetComponentType()
{
  return MEMORY[0x24BE233F0]();
}

uint64_t REMotionStateComponentGetComponentType()
{
  return MEMORY[0x24BE23440]();
}

uint64_t RENetworkComponentGetComponentType()
{
  return MEMORY[0x24BE23490]();
}

uint64_t RENetworkMarkComponentDirty()
{
  return MEMORY[0x24BE234E8]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x24BE237A0]();
}

uint64_t REPinComponentGetComponentType()
{
  return MEMORY[0x24BE23968]();
}

uint64_t REPointLightComponentGetComponentType()
{
  return MEMORY[0x24BE239E8]();
}

uint64_t RERealityFileAssetWriteReportCreate()
{
  return MEMORY[0x24BE23C90]();
}

uint64_t RERealityFileAssetWriteReportGetError()
{
  return MEMORY[0x24BE23C98]();
}

uint64_t RERealityFileWriterCertifyFreeOfChangeSceneActions()
{
  return MEMORY[0x24BE23D70]();
}

uint64_t RERealityFileWriterClose()
{
  return MEMORY[0x24BE23D78]();
}

uint64_t RERealityFileWriterCreateWithParameters()
{
  return MEMORY[0x24BE23D80]();
}

uint64_t RERealityFileWriterGetVersionFromDeploymentTarget()
{
  return MEMORY[0x24BE23D98]();
}

uint64_t RERealityFileWriterOpen()
{
  return MEMORY[0x24BE23DA0]();
}

uint64_t RERealityFileWriterSetConfigurationSetNames()
{
  return MEMORY[0x24BE23DB0]();
}

uint64_t RERealityFileWriterWriteAssetArrayAndDependencies()
{
  return MEMORY[0x24BE23DD0]();
}

uint64_t RERealityFileWritingParametersCreate()
{
  return MEMORY[0x24BE23DE0]();
}

uint64_t RERealityFileWritingParametersSetMajorVersion()
{
  return MEMORY[0x24BE23DF0]();
}

uint64_t RERelease()
{
  return MEMORY[0x24BE23EA8]();
}

uint64_t RERetain()
{
  return MEMORY[0x24BE240A0]();
}

uint64_t RERigidBodyComponentGetComponentType()
{
  return MEMORY[0x24BE24128]();
}

uint64_t RESceneAddEntity()
{
  return MEMORY[0x24BE24270]();
}

uint64_t RESceneCreate()
{
  return MEMORY[0x24BE24290]();
}

uint64_t RESceneGetEntitiesArray()
{
  return MEMORY[0x24BE24318]();
}

uint64_t RESceneGetName()
{
  return MEMORY[0x24BE24338]();
}

uint64_t RESceneLoadFromAsset()
{
  return MEMORY[0x24BE24420]();
}

uint64_t RESceneUnderstandingComponentGetComponentType()
{
  return MEMORY[0x24BE24488]();
}

uint64_t REServiceLocatorGetAssetManager()
{
  return MEMORY[0x24BE24530]();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return MEMORY[0x24BE24598]();
}

uint64_t RESpotLightComponentGetComponentType()
{
  return MEMORY[0x24BE24888]();
}

uint64_t RETextureImportGetCGColorSpaceFromOCIOString()
{
  return MEMORY[0x24BE24DA0]();
}

uint64_t RETextureImportGetOCIOStringArrayFromCGColorSpace()
{
  return MEMORY[0x24BE24DA8]();
}

uint64_t RETextureImportOperationGetImageUTType()
{
  return MEMORY[0x24BE24DF8]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x24BE25690]();
}

uint64_t RETypeInfoGetID()
{
  return MEMORY[0x24BE25788]();
}

uint64_t RETypeInfoGetName()
{
  return MEMORY[0x24BE25798]();
}

uint64_t RETypeInfoGetSubClass()
{
  return MEMORY[0x24BE257C8]();
}

uint64_t RETypeInfoGetSubClassCount()
{
  return MEMORY[0x24BE257D0]();
}

uint64_t RETypeRegistryGetTypeInfoByTypeName()
{
  return MEMORY[0x24BE25828]();
}

uint64_t REVirtualEnvironmentProbeComponentAddResource()
{
  return MEMORY[0x24BE26160]();
}

uint64_t REVirtualEnvironmentProbeComponentClearResources()
{
  return MEMORY[0x24BE26168]();
}

uint64_t REVirtualEnvironmentProbeComponentGetComponentType()
{
  return MEMORY[0x24BE26170]();
}

uint64_t REVirtualEnvironmentProbeComponentGetResourceCount()
{
  return MEMORY[0x24BE26190]();
}

uint64_t REVirtualEnvironmentProbeComponentSetIntensityExponent()
{
  return MEMORY[0x24BE26198]();
}

uint64_t REVirtualEnvironmentProbeComponentSetRelativeWeight()
{
  return MEMORY[0x24BE261A0]();
}

uint64_t REVirtualEnvironmentProbeComponentSetResource()
{
  return MEMORY[0x24BE261A8]();
}

uint64_t RIOBuilderAddComponent()
{
  return MEMORY[0x24BE263A8]();
}

uint64_t RIOBuilderAddComponentByClass()
{
  return MEMORY[0x24BE263B0]();
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x24BE263B8]();
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCopyName()
{
  return MEMORY[0x24BE263C0]();
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCreateWithNameAndMetadataDescriptors()
{
  return MEMORY[0x24BE263C8]();
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x24BE263D0]();
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyNamespacePrefix()
{
  return MEMORY[0x24BE263D8]();
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCreateWithNamespacePrefixAndMetadataDescriptors()
{
  return MEMORY[0x24BE263E0]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyChildPrimType()
{
  return MEMORY[0x24BE263E8]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x24BE263F0]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x24BE263F8]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x24BE26400]();
}

uint64_t RIOBuilderChildPrimInputDescriptorCreate()
{
  return MEMORY[0x24BE26408]();
}

uint64_t RIOBuilderCopyBuildOrder()
{
  return MEMORY[0x24BE26410]();
}

uint64_t RIOBuilderCopyDirtyStageSubscription()
{
  return MEMORY[0x24BE26418]();
}

uint64_t RIOBuilderCopyIdentifier()
{
  return MEMORY[0x24BE26420]();
}

uint64_t RIOBuilderCopyInputsDescriptor()
{
  return MEMORY[0x24BE26428]();
}

uint64_t RIOBuilderCopyOutputsDescriptor()
{
  return MEMORY[0x24BE26430]();
}

uint64_t RIOBuilderCopyPrim()
{
  return MEMORY[0x24BE26438]();
}

uint64_t RIOBuilderCopyPrimPath()
{
  return MEMORY[0x24BE26440]();
}

uint64_t RIOBuilderCreateWithBuilderInfo()
{
  return MEMORY[0x24BE26448]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x24BE26450]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x24BE26458]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x24BE26460]();
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCreate()
{
  return MEMORY[0x24BE26468]();
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCopyCallbackFunction()
{
  return MEMORY[0x24BE26470]();
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCopyInputName()
{
  return MEMORY[0x24BE26478]();
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCreate()
{
  return MEMORY[0x24BE26480]();
}

uint64_t RIOBuilderDescendantPrimInputDescriptorCreate()
{
  return MEMORY[0x24BE26488]();
}

uint64_t RIOBuilderDescendantPrimsInputDescriptorCreate()
{
  return MEMORY[0x24BE26490]();
}

uint64_t RIOBuilderDirtyMetadataDescriptorCopyMetadata()
{
  return MEMORY[0x24BE26498]();
}

uint64_t RIOBuilderDirtyMetadataDescriptorCreateWithMetadata()
{
  return MEMORY[0x24BE264A0]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x24BE264A8]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyPropertyDescriptors()
{
  return MEMORY[0x24BE264B0]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyType()
{
  return MEMORY[0x24BE264B8]();
}

uint64_t RIOBuilderDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors()
{
  return MEMORY[0x24BE264C0]();
}

uint64_t RIOBuilderDirtyPropertyDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x24BE264C8]();
}

uint64_t RIOBuilderDirtyPropertyDescriptorCopyType()
{
  return MEMORY[0x24BE264D0]();
}

uint64_t RIOBuilderDirtyPropertyDescriptorCreateWithMetadataDescriptors()
{
  return MEMORY[0x24BE264D8]();
}

uint64_t RIOBuilderDirtyStageDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x24BE264E0]();
}

uint64_t RIOBuilderDirtyStageDescriptorCopyPrimDescriptors()
{
  return MEMORY[0x24BE264E8]();
}

uint64_t RIOBuilderDirtyStageDescriptorCreateWithPrimDescriptorsAndMetadataDescriptors()
{
  return MEMORY[0x24BE264F0]();
}

uint64_t RIOBuilderDirtyStageSubscriptionCopyDirtyStageDescriptors()
{
  return MEMORY[0x24BE264F8]();
}

uint64_t RIOBuilderDirtyStageSubscriptionCreateWithDirtyStageDescriptors()
{
  return MEMORY[0x24BE26500]();
}

uint64_t RIOBuilderEntityBuilderGetOutputEntity()
{
  return MEMORY[0x24BE26518]();
}

uint64_t RIOBuilderEntityGeneratingPrimDescriptorCreate()
{
  return MEMORY[0x24BE26520]();
}

uint64_t RIOBuilderEntityGeneratingPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x24BE26528]();
}

uint64_t RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x24BE26530]();
}

uint64_t RIOBuilderEntityGeneratingPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x24BE26538]();
}

uint64_t RIOBuilderGetSwiftObject()
{
  return MEMORY[0x24BE26540]();
}

uint64_t RIOBuilderInputDescriptorCopyType()
{
  return MEMORY[0x24BE26548]();
}

uint64_t RIOBuilderInputsCopyPrimPath()
{
  return MEMORY[0x24BE26550]();
}

uint64_t RIOBuilderInputsCopyStage()
{
  return MEMORY[0x24BE26558]();
}

uint64_t RIOBuilderInputsCopyStageDelta()
{
  return MEMORY[0x24BE26560]();
}

uint64_t RIOBuilderInputsCreateCubeMapTextureAsset()
{
  return MEMORY[0x24BE26568]();
}

uint64_t RIOBuilderInputsCreateStandardTextureAsset()
{
  return MEMORY[0x24BE26570]();
}

uint64_t RIOBuilderInputsDescriptorCopyInputDescriptors()
{
  return MEMORY[0x24BE26578]();
}

uint64_t RIOBuilderInputsDescriptorCreateWithInputDescriptors()
{
  return MEMORY[0x24BE26580]();
}

uint64_t RIOBuilderInputsGetAllBuildersAndOutputNamesProvidingValuesWithName()
{
  return MEMORY[0x24BE26588]();
}

uint64_t RIOBuilderInputsGetImportSession()
{
  return MEMORY[0x24BE26590]();
}

uint64_t RIOBuilderInputsPerformBlockSyncOnEngineQueue()
{
  return MEMORY[0x24BE26598]();
}

uint64_t RIOBuilderOutputDescriptorCopyOptionality()
{
  return MEMORY[0x24BE265A0]();
}

uint64_t RIOBuilderOutputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x24BE265A8]();
}

uint64_t RIOBuilderOutputDescriptorCopyOutputName()
{
  return MEMORY[0x24BE265B0]();
}

uint64_t RIOBuilderOutputDescriptorCreateWithNameAndOutputIdentifierAndOptionality()
{
  return MEMORY[0x24BE265B8]();
}

uint64_t RIOBuilderOutputsCreate()
{
  return MEMORY[0x24BE265C0]();
}

uint64_t RIOBuilderOutputsDescriptorCopyOutputDescriptors()
{
  return MEMORY[0x24BE265C8]();
}

uint64_t RIOBuilderOutputsDescriptorCreateWithOutputDescriptors()
{
  return MEMORY[0x24BE265D0]();
}

uint64_t RIOBuilderOutputsGetSwiftObject()
{
  return MEMORY[0x24BE265D8]();
}

uint64_t RIOBuilderOutputsSetSwiftObject()
{
  return MEMORY[0x24BE265E0]();
}

uint64_t RIOBuilderOutputsStoreValueWithName()
{
  return MEMORY[0x24BE265E8]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x24BE265F0]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x24BE265F8]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x24BE26600]();
}

uint64_t RIOBuilderParentPrimInputDescriptorCreate()
{
  return MEMORY[0x24BE26608]();
}

uint64_t RIOBuilderPrimDeltaCopyDirtyMetadata()
{
  return MEMORY[0x24BE26610]();
}

uint64_t RIOBuilderPrimDeltaCopyPropertyDeltas()
{
  return MEMORY[0x24BE26618]();
}

uint64_t RIOBuilderPropertyDeltaCopyDirtyMetadata()
{
  return MEMORY[0x24BE26620]();
}

uint64_t RIOBuilderPropertyDeltaCopyPropertyName()
{
  return MEMORY[0x24BE26628]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x24BE26630]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x24BE26638]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x24BE26640]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyPropertyNameOnCurrentPrimWithRelationship()
{
  return MEMORY[0x24BE26648]();
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCreate()
{
  return MEMORY[0x24BE26650]();
}

uint64_t RIOBuilderSetSwiftObject()
{
  return MEMORY[0x24BE26658]();
}

uint64_t RIOBuilderStageDeltaCopyDirtyMetadata()
{
  return MEMORY[0x24BE26660]();
}

uint64_t RIOBuilderStageDeltaCopyPrimDelta()
{
  return MEMORY[0x24BE26668]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyInputName()
{
  return MEMORY[0x24BE26670]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyOptionality()
{
  return MEMORY[0x24BE26678]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyOutputIdentifier()
{
  return MEMORY[0x24BE26680]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyPrimPath()
{
  return MEMORY[0x24BE26688]();
}

uint64_t RIOBuilderStaticPrimInputDescriptorCreate()
{
  return MEMORY[0x24BE26690]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCopyMetadataDescriptors()
{
  return MEMORY[0x24BE26698]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCopyPropertyDescriptors()
{
  return MEMORY[0x24BE266A0]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCopyTypeNames()
{
  return MEMORY[0x24BE266A8]();
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors()
{
  return MEMORY[0x24BE266B0]();
}

uint64_t RIOCancellableCancel()
{
  return MEMORY[0x24BE266B8]();
}

uint64_t RIODependencyDescriptorCopyAssets()
{
  return MEMORY[0x24BE266C0]();
}

uint64_t RIODependencyDescriptorCopyLayers()
{
  return MEMORY[0x24BE266C8]();
}

uint64_t RIODependencyDescriptorCopyUnresolvedPaths()
{
  return MEMORY[0x24BE266D0]();
}

uint64_t RIOImportSessionAssetInfoMetadataKey()
{
  return MEMORY[0x24BE266F0]();
}

uint64_t RIOImportSessionCopyExtraAssetTags()
{
  return MEMORY[0x24BE266F8]();
}

uint64_t RIOImportSessionCopySceneAssetName()
{
  return MEMORY[0x24BE26700]();
}

uint64_t RIOImportSessionCopySceneName()
{
  return MEMORY[0x24BE26708]();
}

uint64_t RIOImportSessionCopyStatistics()
{
  return MEMORY[0x24BE26710]();
}

uint64_t RIOImportSessionCreateSingleUseImporterWithStage()
{
  return MEMORY[0x24BE26718]();
}

uint64_t RIOImportSessionCreateSingleUseImporterWithURL()
{
  return MEMORY[0x24BE26720]();
}

uint64_t RIOImportSessionCreateWithEngine()
{
  return MEMORY[0x24BE26728]();
}

uint64_t RIOImportSessionCreateWithStage()
{
  return MEMORY[0x24BE26730]();
}

uint64_t RIOImportSessionCreateWithURL()
{
  return MEMORY[0x24BE26738]();
}

uint64_t RIOImportSessionCreateWithURLWithErrorReporting()
{
  return MEMORY[0x24BE26740]();
}

uint64_t RIOImportSessionDumpDiagnostics()
{
  return MEMORY[0x24BE26750]();
}

uint64_t RIOImportSessionGatherFaultRecords()
{
  return MEMORY[0x24BE26758]();
}

uint64_t RIOImportSessionGatherMeshEstimates()
{
  return MEMORY[0x24BE26760]();
}

uint64_t RIOImportSessionGetEngineRef()
{
  return MEMORY[0x24BE26778]();
}

uint64_t RIOImportSessionGetEntityAtPrimPath()
{
  return MEMORY[0x24BE26780]();
}

uint64_t RIOImportSessionGetExtraAssetWithTag()
{
  return MEMORY[0x24BE26788]();
}

uint64_t RIOImportSessionGetInstanceCount()
{
  return MEMORY[0x24BE26790]();
}

uint64_t RIOImportSessionGetLoadSubdsAsSubds()
{
  return MEMORY[0x24BE26798]();
}

uint64_t RIOImportSessionGetPrimPathForEntity()
{
  return MEMORY[0x24BE267A0]();
}

uint64_t RIOImportSessionGetRootEntity()
{
  return MEMORY[0x24BE267A8]();
}

uint64_t RIOImportSessionGetSceneCount()
{
  return MEMORY[0x24BE267B0]();
}

uint64_t RIOImportSessionGetStage()
{
  return MEMORY[0x24BE267B8]();
}

uint64_t RIOImportSessionGetSwiftObject()
{
  return MEMORY[0x24BE267C0]();
}

uint64_t RIOImportSessionIsSceneActive()
{
  return MEMORY[0x24BE267C8]();
}

uint64_t RIOImportSessionOverridePrimPathToEntityForSceneAssetEntities()
{
  return MEMORY[0x24BE267D0]();
}

uint64_t RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue()
{
  return MEMORY[0x24BE267D8]();
}

uint64_t RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue()
{
  return MEMORY[0x24BE267E0]();
}

uint64_t RIOImportSessionPrimPathMetadataKey()
{
  return MEMORY[0x24BE267E8]();
}

uint64_t RIOImportSessionQueueAssetForLoad()
{
  return MEMORY[0x24BE267F0]();
}

uint64_t RIOImportSessionRegisterAudioAsset()
{
  return MEMORY[0x24BE267F8]();
}

uint64_t RIOImportSessionRegisterBuilderGenerator()
{
  return MEMORY[0x24BE26800]();
}

uint64_t RIOImportSessionReloadAsset()
{
  return MEMORY[0x24BE26808]();
}

uint64_t RIOImportSessionRemoveExtraAssetWithTag()
{
  return MEMORY[0x24BE26810]();
}

uint64_t RIOImportSessionResolvedPathMetadataKey()
{
  return MEMORY[0x24BE26818]();
}

uint64_t RIOImportSessionSetBundleInfo()
{
  return MEMORY[0x24BE26828]();
}

uint64_t RIOImportSessionSetExtraAssetWithTag()
{
  return MEMORY[0x24BE26830]();
}

uint64_t RIOImportSessionSetIsLoadModelUseCase()
{
  return MEMORY[0x24BE26838]();
}

uint64_t RIOImportSessionSetOriginalUrl()
{
  return MEMORY[0x24BE26848]();
}

uint64_t RIOImportSessionSetRegistrationForScenes()
{
  return MEMORY[0x24BE26850]();
}

uint64_t RIOImportSessionSetSceneUpdatePassCompletion()
{
  return MEMORY[0x24BE26858]();
}

uint64_t RIOImportSessionSetSwiftObject()
{
  return MEMORY[0x24BE26860]();
}

uint64_t RIOImportSessionUpdate()
{
  return MEMORY[0x24BE26868]();
}

uint64_t RIOImportSessionUpdateSynchronouslyOnEngineQueue()
{
  return MEMORY[0x24BE26878]();
}

uint64_t RIOPxrArAssetCreate()
{
  return MEMORY[0x24BE26880]();
}

uint64_t RIOPxrArAssetCreateCFDataNoCopy()
{
  return MEMORY[0x24BE26888]();
}

uint64_t RIOPxrSdfAssetPathAssetPathCopyString()
{
  return MEMORY[0x24BE26890]();
}

uint64_t RIOPxrSdfAssetPathCreateEmptyPath()
{
  return MEMORY[0x24BE26898]();
}

uint64_t RIOPxrSdfAssetPathCreateFromCString()
{
  return MEMORY[0x24BE268A0]();
}

uint64_t RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath()
{
  return MEMORY[0x24BE268A8]();
}

uint64_t RIOPxrSdfAssetPathIsEmpty()
{
  return MEMORY[0x24BE268B0]();
}

uint64_t RIOPxrSdfAssetPathIsLessThan()
{
  return MEMORY[0x24BE268B8]();
}

uint64_t RIOPxrSdfAssetPathResolvedPathCopyString()
{
  return MEMORY[0x24BE268C0]();
}

uint64_t RIOPxrSdfAttributeSpecCopyLayer()
{
  return MEMORY[0x24BE268C8]();
}

uint64_t RIOPxrSdfAttributeSpecHasColorSpace()
{
  return MEMORY[0x24BE268D0]();
}

uint64_t RIOPxrSdfAttributeSpecIsBlocked()
{
  return MEMORY[0x24BE268D8]();
}

uint64_t RIOPxrSdfLayerClear()
{
  return MEMORY[0x24BE268F0]();
}

uint64_t RIOPxrSdfLayerClearAllCustomLayerMetaData()
{
  return MEMORY[0x24BE268F8]();
}

uint64_t RIOPxrSdfLayerClearColorConfiguration()
{
  return MEMORY[0x24BE26900]();
}

uint64_t RIOPxrSdfLayerClearColorManagementSystem()
{
  return MEMORY[0x24BE26908]();
}

uint64_t RIOPxrSdfLayerClearCustomLayerData()
{
  return MEMORY[0x24BE26910]();
}

uint64_t RIOPxrSdfLayerClearDefaultPrim()
{
  return MEMORY[0x24BE26918]();
}

uint64_t RIOPxrSdfLayerClearEndTimeCode()
{
  return MEMORY[0x24BE26920]();
}

uint64_t RIOPxrSdfLayerClearFramePrecision()
{
  return MEMORY[0x24BE26928]();
}

uint64_t RIOPxrSdfLayerClearFramesPerSecond()
{
  return MEMORY[0x24BE26930]();
}

uint64_t RIOPxrSdfLayerClearOwner()
{
  return MEMORY[0x24BE26938]();
}

uint64_t RIOPxrSdfLayerClearSessionOwner()
{
  return MEMORY[0x24BE26940]();
}

uint64_t RIOPxrSdfLayerClearStartTimeCode()
{
  return MEMORY[0x24BE26948]();
}

uint64_t RIOPxrSdfLayerClearTimeCodesPerSecond()
{
  return MEMORY[0x24BE26950]();
}

uint64_t RIOPxrSdfLayerCopyAbsolutePath()
{
  return MEMORY[0x24BE26958]();
}

uint64_t RIOPxrSdfLayerCopyColorConfiguration()
{
  return MEMORY[0x24BE26968]();
}

uint64_t RIOPxrSdfLayerCopyColorManagementSystem()
{
  return MEMORY[0x24BE26970]();
}

uint64_t RIOPxrSdfLayerCopyCustomLayerDataValue()
{
  return MEMORY[0x24BE26980]();
}

uint64_t RIOPxrSdfLayerCopyDefaultPrim()
{
  return MEMORY[0x24BE26988]();
}

uint64_t RIOPxrSdfLayerCopyDocumentation()
{
  return MEMORY[0x24BE26998]();
}

uint64_t RIOPxrSdfLayerCopyExportString()
{
  return MEMORY[0x24BE269A0]();
}

uint64_t RIOPxrSdfLayerCopyIdentifier()
{
  return MEMORY[0x24BE269B0]();
}

uint64_t RIOPxrSdfLayerCopyOwner()
{
  return MEMORY[0x24BE269B8]();
}

uint64_t RIOPxrSdfLayerCopySessionOwner()
{
  return MEMORY[0x24BE269D0]();
}

uint64_t RIOPxrSdfLayerCopySubLayerPaths()
{
  return MEMORY[0x24BE269D8]();
}

uint64_t RIOPxrSdfLayerCreateAnonymous()
{
  return MEMORY[0x24BE269E0]();
}

uint64_t RIOPxrSdfLayerCreateIdentifier()
{
  return MEMORY[0x24BE269E8]();
}

uint64_t RIOPxrSdfLayerCreateOrFindRelativeToLayer()
{
  return MEMORY[0x24BE269F0]();
}

uint64_t RIOPxrSdfLayerExportWithFilePath()
{
  return MEMORY[0x24BE269F8]();
}

uint64_t RIOPxrSdfLayerExportWithURL()
{
  return MEMORY[0x24BE26A00]();
}

uint64_t RIOPxrSdfLayerFlattenSubGraphInPlace()
{
  return MEMORY[0x24BE26A08]();
}

uint64_t RIOPxrSdfLayerGetEndTimeCode()
{
  return MEMORY[0x24BE26A10]();
}

uint64_t RIOPxrSdfLayerGetFramePrecision()
{
  return MEMORY[0x24BE26A18]();
}

uint64_t RIOPxrSdfLayerGetFramesPerSecond()
{
  return MEMORY[0x24BE26A20]();
}

uint64_t RIOPxrSdfLayerGetHasOwnedSubLayers()
{
  return MEMORY[0x24BE26A28]();
}

uint64_t RIOPxrSdfLayerGetMetadata()
{
  return MEMORY[0x24BE26A30]();
}

uint64_t RIOPxrSdfLayerGetNumSubLayerPaths()
{
  return MEMORY[0x24BE26A38]();
}

uint64_t RIOPxrSdfLayerGetStartTimeCode()
{
  return MEMORY[0x24BE26A40]();
}

uint64_t RIOPxrSdfLayerGetTimeCodesPerSecond()
{
  return MEMORY[0x24BE26A48]();
}

uint64_t RIOPxrSdfLayerHasColorConfiguration()
{
  return MEMORY[0x24BE26A50]();
}

uint64_t RIOPxrSdfLayerHasColorManagementSystem()
{
  return MEMORY[0x24BE26A58]();
}

uint64_t RIOPxrSdfLayerHasCustomLayerMetaData()
{
  return MEMORY[0x24BE26A60]();
}

uint64_t RIOPxrSdfLayerHasEndTimeCode()
{
  return MEMORY[0x24BE26A68]();
}

uint64_t RIOPxrSdfLayerHasFramePrecision()
{
  return MEMORY[0x24BE26A70]();
}

uint64_t RIOPxrSdfLayerHasFramesPerSecond()
{
  return MEMORY[0x24BE26A78]();
}

uint64_t RIOPxrSdfLayerHasOwner()
{
  return MEMORY[0x24BE26A80]();
}

uint64_t RIOPxrSdfLayerHasSessionOwner()
{
  return MEMORY[0x24BE26A88]();
}

uint64_t RIOPxrSdfLayerHasStartTimeCode()
{
  return MEMORY[0x24BE26A90]();
}

uint64_t RIOPxrSdfLayerHasTimeCodesPerSecond()
{
  return MEMORY[0x24BE26A98]();
}

uint64_t RIOPxrSdfLayerIsAnonymous()
{
  return MEMORY[0x24BE26AA0]();
}

uint64_t RIOPxrSdfLayerIsEmpty()
{
  return MEMORY[0x24BE26AA8]();
}

uint64_t RIOPxrSdfLayerReload()
{
  return MEMORY[0x24BE26AB0]();
}

uint64_t RIOPxrSdfLayerReplicationReceive()
{
  return MEMORY[0x24BE26AB8]();
}

uint64_t RIOPxrSdfLayerReplicationStartSending()
{
  return MEMORY[0x24BE26AC0]();
}

uint64_t RIOPxrSdfLayerReplicationStopSending()
{
  return MEMORY[0x24BE26AC8]();
}

uint64_t RIOPxrSdfLayerSave()
{
  return MEMORY[0x24BE26AD0]();
}

uint64_t RIOPxrSdfLayerSetColorConfiguration()
{
  return MEMORY[0x24BE26AD8]();
}

uint64_t RIOPxrSdfLayerSetColorManagementSystem()
{
  return MEMORY[0x24BE26AE0]();
}

uint64_t RIOPxrSdfLayerSetCustomLayerData()
{
  return MEMORY[0x24BE26AF0]();
}

uint64_t RIOPxrSdfLayerSetDefaultPrim()
{
  return MEMORY[0x24BE26AF8]();
}

uint64_t RIOPxrSdfLayerSetEndTimeCode()
{
  return MEMORY[0x24BE26B08]();
}

uint64_t RIOPxrSdfLayerSetFramePrecision()
{
  return MEMORY[0x24BE26B10]();
}

uint64_t RIOPxrSdfLayerSetFramesPerSecond()
{
  return MEMORY[0x24BE26B18]();
}

uint64_t RIOPxrSdfLayerSetHasOwnedSubLayers()
{
  return MEMORY[0x24BE26B20]();
}

uint64_t RIOPxrSdfLayerSetMetadata()
{
  return MEMORY[0x24BE26B30]();
}

uint64_t RIOPxrSdfLayerSetStartTimeCode()
{
  return MEMORY[0x24BE26B48]();
}

uint64_t RIOPxrSdfLayerSetSubLayerPathsWithStrings()
{
  return MEMORY[0x24BE26B50]();
}

uint64_t RIOPxrSdfLayerSetTimeCodesPerSecond()
{
  return MEMORY[0x24BE26B58]();
}

uint64_t RIOPxrSdfLayerTransferContent()
{
  return MEMORY[0x24BE26B60]();
}

uint64_t RIOPxrSdfNamespaceEditCopyCurrentPath()
{
  return MEMORY[0x24BE26B68]();
}

uint64_t RIOPxrSdfNamespaceEditCopyNewPath()
{
  return MEMORY[0x24BE26B70]();
}

uint64_t RIOPxrSdfNamespaceEditCreateEmpty()
{
  return MEMORY[0x24BE26B78]();
}

uint64_t RIOPxrSdfNamespaceEditCreateFromPaths()
{
  return MEMORY[0x24BE26B80]();
}

uint64_t RIOPxrSdfNamespaceEditCreateRemove()
{
  return MEMORY[0x24BE26B88]();
}

uint64_t RIOPxrSdfNamespaceEditCreateRename()
{
  return MEMORY[0x24BE26B90]();
}

uint64_t RIOPxrSdfNamespaceEditCreateReorder()
{
  return MEMORY[0x24BE26B98]();
}

uint64_t RIOPxrSdfNamespaceEditCreateReparent()
{
  return MEMORY[0x24BE26BA0]();
}

uint64_t RIOPxrSdfNamespaceEditCreateReparentAndRename()
{
  return MEMORY[0x24BE26BA8]();
}

uint64_t RIOPxrSdfNamespaceEditGetIndex()
{
  return MEMORY[0x24BE26BB0]();
}

uint64_t RIOPxrSdfPathContainsPrimVariantSelection()
{
  return MEMORY[0x24BE26BD0]();
}

uint64_t RIOPxrSdfPathContainsPropertyElements()
{
  return MEMORY[0x24BE26BD8]();
}

uint64_t RIOPxrSdfPathContainsTargetPath()
{
  return MEMORY[0x24BE26BE0]();
}

uint64_t RIOPxrSdfPathCopyAbsoluteRootOrPrimPath()
{
  return MEMORY[0x24BE26BE8]();
}

uint64_t RIOPxrSdfPathCopyCommonPrefix()
{
  return MEMORY[0x24BE26BF8]();
}

uint64_t RIOPxrSdfPathCopyElementString()
{
  return MEMORY[0x24BE26C00]();
}

uint64_t RIOPxrSdfPathCopyName()
{
  return MEMORY[0x24BE26C08]();
}

uint64_t RIOPxrSdfPathCopyParentPath()
{
  return MEMORY[0x24BE26C10]();
}

uint64_t RIOPxrSdfPathCopyPrimOrPrimVariantSelectionPath()
{
  return MEMORY[0x24BE26C20]();
}

uint64_t RIOPxrSdfPathCopyPrimPath()
{
  return MEMORY[0x24BE26C28]();
}

uint64_t RIOPxrSdfPathCopyString()
{
  return MEMORY[0x24BE26C30]();
}

uint64_t RIOPxrSdfPathCopyTargetPath()
{
  return MEMORY[0x24BE26C38]();
}

uint64_t RIOPxrSdfPathCopyVariantSelection()
{
  return MEMORY[0x24BE26C40]();
}

uint64_t RIOPxrSdfPathCreateAbsoluteRootPath()
{
  return MEMORY[0x24BE26C48]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingChild()
{
  return MEMORY[0x24BE26C50]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingElementToken()
{
  return MEMORY[0x24BE26C58]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingExpression()
{
  return MEMORY[0x24BE26C60]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapper()
{
  return MEMORY[0x24BE26C68]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapperArg()
{
  return MEMORY[0x24BE26C70]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingPath()
{
  return MEMORY[0x24BE26C78]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingProperty()
{
  return MEMORY[0x24BE26C80]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingRelationalAttribute()
{
  return MEMORY[0x24BE26C88]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingTarget()
{
  return MEMORY[0x24BE26C90]();
}

uint64_t RIOPxrSdfPathCreateCopyAppendingVariantSelection()
{
  return MEMORY[0x24BE26C98]();
}

uint64_t RIOPxrSdfPathCreateCopyMakingAbsolutePath()
{
  return MEMORY[0x24BE26CA0]();
}

uint64_t RIOPxrSdfPathCreateCopyMakingRelativePath()
{
  return MEMORY[0x24BE26CA8]();
}

uint64_t RIOPxrSdfPathCreateCopyRemovingCommonSuffix()
{
  return MEMORY[0x24BE26CB0]();
}

uint64_t RIOPxrSdfPathCreateCopyReplacingName()
{
  return MEMORY[0x24BE26CB8]();
}

uint64_t RIOPxrSdfPathCreateCopyReplacingPrefix()
{
  return MEMORY[0x24BE26CC0]();
}

uint64_t RIOPxrSdfPathCreateCopyReplacingTargetPath()
{
  return MEMORY[0x24BE26CC8]();
}

uint64_t RIOPxrSdfPathCreateCopyStrippingAllVariantSelections()
{
  return MEMORY[0x24BE26CD0]();
}

uint64_t RIOPxrSdfPathCreateEmptyPath()
{
  return MEMORY[0x24BE26CD8]();
}

uint64_t RIOPxrSdfPathCreateFromCString()
{
  return MEMORY[0x24BE26CE0]();
}

uint64_t RIOPxrSdfPathCreateReflexiveRelativePath()
{
  return MEMORY[0x24BE26CE8]();
}

uint64_t RIOPxrSdfPathGetPathElementCount()
{
  return MEMORY[0x24BE26CF0]();
}

uint64_t RIOPxrSdfPathHasPrefix()
{
  return MEMORY[0x24BE26CF8]();
}

uint64_t RIOPxrSdfPathIsAbsolutePath()
{
  return MEMORY[0x24BE26D00]();
}

uint64_t RIOPxrSdfPathIsAbsoluteRootOrPrimPath()
{
  return MEMORY[0x24BE26D08]();
}

uint64_t RIOPxrSdfPathIsEmpty()
{
  return MEMORY[0x24BE26D10]();
}

uint64_t RIOPxrSdfPathIsExpressionPath()
{
  return MEMORY[0x24BE26D18]();
}

uint64_t RIOPxrSdfPathIsLessThan()
{
  return MEMORY[0x24BE26D20]();
}

uint64_t RIOPxrSdfPathIsMapperArgPath()
{
  return MEMORY[0x24BE26D28]();
}

uint64_t RIOPxrSdfPathIsMapperPath()
{
  return MEMORY[0x24BE26D30]();
}

uint64_t RIOPxrSdfPathIsNamespacedPropertyPath()
{
  return MEMORY[0x24BE26D38]();
}

uint64_t RIOPxrSdfPathIsPrimOrPrimVariantSelectionPath()
{
  return MEMORY[0x24BE26D40]();
}

uint64_t RIOPxrSdfPathIsPrimPath()
{
  return MEMORY[0x24BE26D48]();
}

uint64_t RIOPxrSdfPathIsPrimPropertyPath()
{
  return MEMORY[0x24BE26D50]();
}

uint64_t RIOPxrSdfPathIsPrimVariantSelectionPath()
{
  return MEMORY[0x24BE26D58]();
}

uint64_t RIOPxrSdfPathIsPropertyPath()
{
  return MEMORY[0x24BE26D60]();
}

uint64_t RIOPxrSdfPathIsRelationalAttributePath()
{
  return MEMORY[0x24BE26D68]();
}

uint64_t RIOPxrSdfPathIsRootPrimPath()
{
  return MEMORY[0x24BE26D70]();
}

uint64_t RIOPxrSdfPathIsTargetPath()
{
  return MEMORY[0x24BE26D78]();
}

uint64_t RIOPxrSdfPrimSpecCopyAttribute()
{
  return MEMORY[0x24BE26D98]();
}

uint64_t RIOPxrSdfPrimSpecCopyLayer()
{
  return MEMORY[0x24BE26DA0]();
}

uint64_t RIOPxrSdfPrimSpecCopyPath()
{
  return MEMORY[0x24BE26DA8]();
}

uint64_t RIOPxrSdfPrimSpecGetSpecifier()
{
  return MEMORY[0x24BE26DB0]();
}

uint64_t RIOPxrSdfReferenceCopyAssetPathString()
{
  return MEMORY[0x24BE26DB8]();
}

uint64_t RIOPxrSdfReferenceCopyPrimPath()
{
  return MEMORY[0x24BE26DC0]();
}

uint64_t RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath()
{
  return MEMORY[0x24BE26DC8]();
}

uint64_t RIOPxrSdfReferenceIsEqual()
{
  return MEMORY[0x24BE26DD0]();
}

uint64_t RIOPxrSdfReferenceIsLessThan()
{
  return MEMORY[0x24BE26DD8]();
}

uint64_t RIOPxrSdfReferenceSetAssetPath()
{
  return MEMORY[0x24BE26DE0]();
}

uint64_t RIOPxrSdfReferenceSetPrimPath()
{
  return MEMORY[0x24BE26DE8]();
}

uint64_t RIOPxrSdfValueTypeNameCopyToken()
{
  return MEMORY[0x24BE26DF0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPath()
{
  return MEMORY[0x24BE26DF8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPathArray()
{
  return MEMORY[0x24BE26E00]();
}

uint64_t RIOPxrSdfValueTypeNameCreateBool()
{
  return MEMORY[0x24BE26E08]();
}

uint64_t RIOPxrSdfValueTypeNameCreateBoolArray()
{
  return MEMORY[0x24BE26E10]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3d()
{
  return MEMORY[0x24BE26E18]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3dArray()
{
  return MEMORY[0x24BE26E20]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3f()
{
  return MEMORY[0x24BE26E28]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3fArray()
{
  return MEMORY[0x24BE26E30]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3h()
{
  return MEMORY[0x24BE26E38]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3hArray()
{
  return MEMORY[0x24BE26E40]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4d()
{
  return MEMORY[0x24BE26E48]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4dArray()
{
  return MEMORY[0x24BE26E50]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4f()
{
  return MEMORY[0x24BE26E58]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4fArray()
{
  return MEMORY[0x24BE26E60]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4h()
{
  return MEMORY[0x24BE26E68]();
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4hArray()
{
  return MEMORY[0x24BE26E70]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble()
{
  return MEMORY[0x24BE26E78]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2()
{
  return MEMORY[0x24BE26E80]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2Array()
{
  return MEMORY[0x24BE26E88]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3()
{
  return MEMORY[0x24BE26E90]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3Array()
{
  return MEMORY[0x24BE26E98]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4()
{
  return MEMORY[0x24BE26EA0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4Array()
{
  return MEMORY[0x24BE26EA8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateDoubleArray()
{
  return MEMORY[0x24BE26EB0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat()
{
  return MEMORY[0x24BE26EB8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2()
{
  return MEMORY[0x24BE26EC0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2Array()
{
  return MEMORY[0x24BE26EC8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3()
{
  return MEMORY[0x24BE26ED0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3Array()
{
  return MEMORY[0x24BE26ED8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4()
{
  return MEMORY[0x24BE26EE0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4Array()
{
  return MEMORY[0x24BE26EE8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFloatArray()
{
  return MEMORY[0x24BE26EF0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4d()
{
  return MEMORY[0x24BE26EF8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4dArray()
{
  return MEMORY[0x24BE26F00]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf()
{
  return MEMORY[0x24BE26F08]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2()
{
  return MEMORY[0x24BE26F10]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2Array()
{
  return MEMORY[0x24BE26F18]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3()
{
  return MEMORY[0x24BE26F20]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3Array()
{
  return MEMORY[0x24BE26F28]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4()
{
  return MEMORY[0x24BE26F30]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4Array()
{
  return MEMORY[0x24BE26F38]();
}

uint64_t RIOPxrSdfValueTypeNameCreateHalfArray()
{
  return MEMORY[0x24BE26F40]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2()
{
  return MEMORY[0x24BE26F48]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2Array()
{
  return MEMORY[0x24BE26F50]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3()
{
  return MEMORY[0x24BE26F58]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32()
{
  return MEMORY[0x24BE26F60]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32Array()
{
  return MEMORY[0x24BE26F68]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3Array()
{
  return MEMORY[0x24BE26F70]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4()
{
  return MEMORY[0x24BE26F78]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4Array()
{
  return MEMORY[0x24BE26F80]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64()
{
  return MEMORY[0x24BE26F88]();
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64Array()
{
  return MEMORY[0x24BE26F90]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2d()
{
  return MEMORY[0x24BE26F98]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2dArray()
{
  return MEMORY[0x24BE26FA0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3d()
{
  return MEMORY[0x24BE26FA8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3dArray()
{
  return MEMORY[0x24BE26FB0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4d()
{
  return MEMORY[0x24BE26FB8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4dArray()
{
  return MEMORY[0x24BE26FC0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3d()
{
  return MEMORY[0x24BE26FC8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3dArray()
{
  return MEMORY[0x24BE26FD0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3f()
{
  return MEMORY[0x24BE26FD8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3fArray()
{
  return MEMORY[0x24BE26FE0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3h()
{
  return MEMORY[0x24BE26FE8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3hArray()
{
  return MEMORY[0x24BE26FF0]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3d()
{
  return MEMORY[0x24BE26FF8]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3dArray()
{
  return MEMORY[0x24BE27000]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3f()
{
  return MEMORY[0x24BE27008]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3fArray()
{
  return MEMORY[0x24BE27010]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3h()
{
  return MEMORY[0x24BE27018]();
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3hArray()
{
  return MEMORY[0x24BE27020]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatd()
{
  return MEMORY[0x24BE27028]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatdArray()
{
  return MEMORY[0x24BE27030]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatf()
{
  return MEMORY[0x24BE27038]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatfArray()
{
  return MEMORY[0x24BE27040]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuath()
{
  return MEMORY[0x24BE27048]();
}

uint64_t RIOPxrSdfValueTypeNameCreateQuathArray()
{
  return MEMORY[0x24BE27050]();
}

uint64_t RIOPxrSdfValueTypeNameCreateString()
{
  return MEMORY[0x24BE27058]();
}

uint64_t RIOPxrSdfValueTypeNameCreateStringArray()
{
  return MEMORY[0x24BE27060]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2d()
{
  return MEMORY[0x24BE27068]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2dArray()
{
  return MEMORY[0x24BE27070]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2f()
{
  return MEMORY[0x24BE27078]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2fArray()
{
  return MEMORY[0x24BE27080]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2h()
{
  return MEMORY[0x24BE27088]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2hArray()
{
  return MEMORY[0x24BE27090]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3d()
{
  return MEMORY[0x24BE27098]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3dArray()
{
  return MEMORY[0x24BE270A0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3f()
{
  return MEMORY[0x24BE270A8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3fArray()
{
  return MEMORY[0x24BE270B0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3h()
{
  return MEMORY[0x24BE270B8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3hArray()
{
  return MEMORY[0x24BE270C0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateToken()
{
  return MEMORY[0x24BE270C8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateTokenArray()
{
  return MEMORY[0x24BE270D0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32()
{
  return MEMORY[0x24BE270D8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32Array()
{
  return MEMORY[0x24BE270E0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64()
{
  return MEMORY[0x24BE270E8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64Array()
{
  return MEMORY[0x24BE270F0]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8()
{
  return MEMORY[0x24BE270F8]();
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8Array()
{
  return MEMORY[0x24BE27100]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3d()
{
  return MEMORY[0x24BE27108]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3dArray()
{
  return MEMORY[0x24BE27110]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3f()
{
  return MEMORY[0x24BE27118]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3fArray()
{
  return MEMORY[0x24BE27120]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3h()
{
  return MEMORY[0x24BE27128]();
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3hArray()
{
  return MEMORY[0x24BE27130]();
}

uint64_t RIOPxrSdrRegistryCopyNodeNames()
{
  return MEMORY[0x24BE27138]();
}

uint64_t RIOPxrSdrRegistryGetShaderNodeByName()
{
  return MEMORY[0x24BE27140]();
}

uint64_t RIOPxrSdrShaderNodeCopyFamily()
{
  return MEMORY[0x24BE27148]();
}

uint64_t RIOPxrSdrShaderPropertyCopyDefaultValue()
{
  return MEMORY[0x24BE27180]();
}

uint64_t RIOPxrSdrShaderPropertyCopyName()
{
  return MEMORY[0x24BE27190]();
}

uint64_t RIOPxrSdrShaderPropertyCopyType()
{
  return MEMORY[0x24BE27198]();
}

uint64_t RIOPxrSdrShaderPropertyGetArraySize()
{
  return MEMORY[0x24BE271A0]();
}

uint64_t RIOPxrSdrShaderPropertyIsArray()
{
  return MEMORY[0x24BE271A8]();
}

uint64_t RIOPxrSdrShaderPropertyIsConnectable()
{
  return MEMORY[0x24BE271B0]();
}

uint64_t RIOPxrTfTokenCopyString()
{
  return MEMORY[0x24BE271B8]();
}

uint64_t RIOPxrTfTokenCopyTypeSchemaPropertyNames()
{
  return MEMORY[0x24BE271C0]();
}

uint64_t RIOPxrTfTokenCreateWithCString()
{
  return MEMORY[0x24BE271C8]();
}

uint64_t RIOPxrTfTokenEmpty()
{
  return MEMORY[0x24BE271D0]();
}

uint64_t RIOPxrTfTokenGetLength()
{
  return MEMORY[0x24BE271D8]();
}

uint64_t RIOPxrTfTokenIsEmpty()
{
  return MEMORY[0x24BE271E0]();
}

uint64_t RIOPxrTfTokenIsImmortal()
{
  return MEMORY[0x24BE271E8]();
}

uint64_t RIOPxrUsdAttributeAddConnection()
{
  return MEMORY[0x24BE271F0]();
}

uint64_t RIOPxrUsdAttributeBlock()
{
  return MEMORY[0x24BE271F8]();
}

uint64_t RIOPxrUsdAttributeClear()
{
  return MEMORY[0x24BE27200]();
}

uint64_t RIOPxrUsdAttributeClearAll()
{
  return MEMORY[0x24BE27208]();
}

uint64_t RIOPxrUsdAttributeClearColorSpace()
{
  return MEMORY[0x24BE27210]();
}

uint64_t RIOPxrUsdAttributeClearConnections()
{
  return MEMORY[0x24BE27218]();
}

uint64_t RIOPxrUsdAttributeCopyColorSpace()
{
  return MEMORY[0x24BE27220]();
}

uint64_t RIOPxrUsdAttributeCopyTimeSamples()
{
  return MEMORY[0x24BE27230]();
}

uint64_t RIOPxrUsdAttributeCopyTypeName()
{
  return MEMORY[0x24BE27238]();
}

uint64_t RIOPxrUsdAttributeCopyValue()
{
  return MEMORY[0x24BE27240]();
}

uint64_t RIOPxrUsdAttributeGetVariability()
{
  return MEMORY[0x24BE27248]();
}

uint64_t RIOPxrUsdAttributeHasAuthoredConnections()
{
  return MEMORY[0x24BE27250]();
}

uint64_t RIOPxrUsdAttributeHasAuthoredValue()
{
  return MEMORY[0x24BE27258]();
}

uint64_t RIOPxrUsdAttributeHasColorSpace()
{
  return MEMORY[0x24BE27260]();
}

uint64_t RIOPxrUsdAttributeHasValue()
{
  return MEMORY[0x24BE27268]();
}

uint64_t RIOPxrUsdAttributeRemoveConnection()
{
  return MEMORY[0x24BE27270]();
}

uint64_t RIOPxrUsdAttributeSetColorSpace()
{
  return MEMORY[0x24BE27278]();
}

uint64_t RIOPxrUsdAttributeSetConnections()
{
  return MEMORY[0x24BE27280]();
}

uint64_t RIOPxrUsdAttributeSetValue()
{
  return MEMORY[0x24BE27288]();
}

uint64_t RIOPxrUsdEditTargetCopyLayer()
{
  return MEMORY[0x24BE27290]();
}

uint64_t RIOPxrUsdEditTargetCopyPrimSpec()
{
  return MEMORY[0x24BE27298]();
}

uint64_t RIOPxrUsdEditTargetCreateEmpty()
{
  return MEMORY[0x24BE272A0]();
}

uint64_t RIOPxrUsdEditTargetCreateWithLayer()
{
  return MEMORY[0x24BE272A8]();
}

uint64_t RIOPxrUsdEditTargetIsNull()
{
  return MEMORY[0x24BE272B0]();
}

uint64_t RIOPxrUsdEditTargetIsValid()
{
  return MEMORY[0x24BE272B8]();
}

uint64_t RIOPxrUsdGeomXformableXformQueryCopyTimeSamples()
{
  return MEMORY[0x24BE272C0]();
}

uint64_t RIOPxrUsdGeomXformableXformQueryGetLocalTransformation()
{
  return MEMORY[0x24BE272C8]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedAddNoticeCallback()
{
  return MEMORY[0x24BE272D0]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyChangedFields()
{
  return MEMORY[0x24BE272D8]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyChangedInfoOnlyPaths()
{
  return MEMORY[0x24BE272E0]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyResyncedPaths()
{
  return MEMORY[0x24BE272E8]();
}

uint64_t RIOPxrUsdNoticeObjectsChangedCopyStageRef()
{
  return MEMORY[0x24BE272F0]();
}

uint64_t RIOPxrUsdObjectAccessibilityInfoDictionarySetValue()
{
  return MEMORY[0x24BE27300]();
}

uint64_t RIOPxrUsdObjectClearColorSpace()
{
  return MEMORY[0x24BE27308]();
}

uint64_t RIOPxrUsdObjectClearMetadata()
{
  return MEMORY[0x24BE27310]();
}

uint64_t RIOPxrUsdObjectCopyColorSpace()
{
  return MEMORY[0x24BE27328]();
}

uint64_t RIOPxrUsdObjectCopyMetadata()
{
  return MEMORY[0x24BE27338]();
}

uint64_t RIOPxrUsdObjectCopyName()
{
  return MEMORY[0x24BE27340]();
}

uint64_t RIOPxrUsdObjectCopyPath()
{
  return MEMORY[0x24BE27348]();
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryClearValue()
{
  return MEMORY[0x24BE27358]();
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryCopyValue()
{
  return MEMORY[0x24BE27360]();
}

uint64_t RIOPxrUsdObjectCustomDataDictionarySetValue()
{
  return MEMORY[0x24BE27368]();
}

uint64_t RIOPxrUsdObjectHasMetadataValue()
{
  return MEMORY[0x24BE27370]();
}

uint64_t RIOPxrUsdObjectIsValid()
{
  return MEMORY[0x24BE27378]();
}

uint64_t RIOPxrUsdObjectMetadataCopyValue()
{
  return MEMORY[0x24BE27380]();
}

uint64_t RIOPxrUsdObjectMetadataSetValue()
{
  return MEMORY[0x24BE27388]();
}

uint64_t RIOPxrUsdObjectSetColorSpace()
{
  return MEMORY[0x24BE27398]();
}

uint64_t RIOPxrUsdObjectUiInfoDictionarySetValue()
{
  return MEMORY[0x24BE273B0]();
}

uint64_t RIOPxrUsdPrimAddAppliedSchema()
{
  return MEMORY[0x24BE273B8]();
}

uint64_t RIOPxrUsdPrimAddReference()
{
  return MEMORY[0x24BE273C0]();
}

uint64_t RIOPxrUsdPrimClearActive()
{
  return MEMORY[0x24BE273C8]();
}

uint64_t RIOPxrUsdPrimClearChildrenReorder()
{
  return MEMORY[0x24BE273D0]();
}

uint64_t RIOPxrUsdPrimClearInstanceable()
{
  return MEMORY[0x24BE273D8]();
}

uint64_t RIOPxrUsdPrimClearPropertyOrder()
{
  return MEMORY[0x24BE273E0]();
}

uint64_t RIOPxrUsdPrimClearSpecializes()
{
  return MEMORY[0x24BE273E8]();
}

uint64_t RIOPxrUsdPrimCopyAttribute()
{
  return MEMORY[0x24BE273F8]();
}

uint64_t RIOPxrUsdPrimCopyFilteredDescendants()
{
  return MEMORY[0x24BE27438]();
}

uint64_t RIOPxrUsdPrimCopyParent()
{
  return MEMORY[0x24BE27440]();
}

uint64_t RIOPxrUsdPrimCopyPrototype()
{
  return MEMORY[0x24BE27458]();
}

uint64_t RIOPxrUsdPrimCopyRelationship()
{
  return MEMORY[0x24BE27460]();
}

uint64_t RIOPxrUsdPrimCopyStage()
{
  return MEMORY[0x24BE27470]();
}

uint64_t RIOPxrUsdPrimCopyTypeName()
{
  return MEMORY[0x24BE27478]();
}

uint64_t RIOPxrUsdPrimCopyVariantSets()
{
  return MEMORY[0x24BE27488]();
}

uint64_t RIOPxrUsdPrimCreateAttribute()
{
  return MEMORY[0x24BE27490]();
}

uint64_t RIOPxrUsdPrimCreateCreateRelationship()
{
  return MEMORY[0x24BE27498]();
}

uint64_t RIOPxrUsdPrimCreateEmpty()
{
  return MEMORY[0x24BE274A0]();
}

uint64_t RIOPxrUsdPrimEvaluateEntityOnExport()
{
  return MEMORY[0x24BE274A8]();
}

uint64_t RIOPxrUsdPrimFlagsConjunctionPredicateCreate()
{
  return MEMORY[0x24BE274B0]();
}

uint64_t RIOPxrUsdPrimFlagsConjunctionPredicateToRIOPxrUsdPrimFlagsPredicate()
{
  return MEMORY[0x24BE274B8]();
}

uint64_t RIOPxrUsdPrimFlagsCreateAllPrimsPredicate()
{
  return MEMORY[0x24BE274C0]();
}

uint64_t RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm()
{
  return MEMORY[0x24BE274C8]();
}

uint64_t RIOPxrUsdPrimFlagsCreateConjunctionPredicateNegation()
{
  return MEMORY[0x24BE274D0]();
}

uint64_t RIOPxrUsdPrimFlagsCreateDefaultPredicate()
{
  return MEMORY[0x24BE274D8]();
}

uint64_t RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm()
{
  return MEMORY[0x24BE274E0]();
}

uint64_t RIOPxrUsdPrimFlagsCreateDisjunctionPredicateNegation()
{
  return MEMORY[0x24BE274E8]();
}

uint64_t RIOPxrUsdPrimFlagsDisjunctionPredicateCreate()
{
  return MEMORY[0x24BE274F0]();
}

uint64_t RIOPxrUsdPrimFlagsDisjunctionPredicateToRIOPxrUsdPrimFlagsPredicate()
{
  return MEMORY[0x24BE274F8]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies()
{
  return MEMORY[0x24BE27500]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreate()
{
  return MEMORY[0x24BE27508]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreateContradiction()
{
  return MEMORY[0x24BE27510]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreateTautology()
{
  return MEMORY[0x24BE27518]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateCreateWithTerm()
{
  return MEMORY[0x24BE27520]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal()
{
  return MEMORY[0x24BE27528]();
}

uint64_t RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim()
{
  return MEMORY[0x24BE27530]();
}

uint64_t RIOPxrUsdPrimGetPropertyOrder()
{
  return MEMORY[0x24BE27538]();
}

uint64_t RIOPxrUsdPrimGetRootLayerSpecifier()
{
  return MEMORY[0x24BE27540]();
}

uint64_t RIOPxrUsdPrimGetSpecifier()
{
  return MEMORY[0x24BE27548]();
}

uint64_t RIOPxrUsdPrimGetTaggedAsEntity()
{
  return MEMORY[0x24BE27550]();
}

uint64_t RIOPxrUsdPrimHasAttribute()
{
  return MEMORY[0x24BE27558]();
}

uint64_t RIOPxrUsdPrimHasAuthoredActive()
{
  return MEMORY[0x24BE27560]();
}

uint64_t RIOPxrUsdPrimHasAuthoredInstanceable()
{
  return MEMORY[0x24BE27568]();
}

uint64_t RIOPxrUsdPrimHasAuthoredType()
{
  return MEMORY[0x24BE27570]();
}

uint64_t RIOPxrUsdPrimHasAuthoredTypeOnLayer()
{
  return MEMORY[0x24BE27578]();
}

uint64_t RIOPxrUsdPrimHasProperty()
{
  return MEMORY[0x24BE27580]();
}

uint64_t RIOPxrUsdPrimHasRelationship()
{
  return MEMORY[0x24BE27588]();
}

uint64_t RIOPxrUsdPrimHasVariantSets()
{
  return MEMORY[0x24BE27590]();
}

uint64_t RIOPxrUsdPrimIsAType()
{
  return MEMORY[0x24BE27598]();
}

uint64_t RIOPxrUsdPrimIsActive()
{
  return MEMORY[0x24BE275A0]();
}

uint64_t RIOPxrUsdPrimIsEntityConvertible()
{
  return MEMORY[0x24BE275A8]();
}

uint64_t RIOPxrUsdPrimIsInstance()
{
  return MEMORY[0x24BE275B0]();
}

uint64_t RIOPxrUsdPrimIsInstanceProxy()
{
  return MEMORY[0x24BE275B8]();
}

uint64_t RIOPxrUsdPrimIsInstanceable()
{
  return MEMORY[0x24BE275C0]();
}

uint64_t RIOPxrUsdPrimIsPrototype()
{
  return MEMORY[0x24BE275C8]();
}

uint64_t RIOPxrUsdPrimIsPseudoRoot()
{
  return MEMORY[0x24BE275D0]();
}

uint64_t RIOPxrUsdPrimRemoveAppliedSchema()
{
  return MEMORY[0x24BE275D8]();
}

uint64_t RIOPxrUsdPrimRemoveProperty()
{
  return MEMORY[0x24BE275E0]();
}

uint64_t RIOPxrUsdPrimSetActive()
{
  return MEMORY[0x24BE275F0]();
}

uint64_t RIOPxrUsdPrimSetInstanceable()
{
  return MEMORY[0x24BE27608]();
}

uint64_t RIOPxrUsdPrimSetReferences()
{
  return MEMORY[0x24BE27618]();
}

uint64_t RIOPxrUsdPrimSetSpecializes()
{
  return MEMORY[0x24BE27620]();
}

uint64_t RIOPxrUsdPrimSetSpecifier()
{
  return MEMORY[0x24BE27628]();
}

uint64_t RIOPxrUsdPrimSetTaggedAsEntity()
{
  return MEMORY[0x24BE27630]();
}

uint64_t RIOPxrUsdPrimSetTypeName()
{
  return MEMORY[0x24BE27638]();
}

uint64_t RIOPxrUsdPropertyCopyBaseName()
{
  return MEMORY[0x24BE27640]();
}

uint64_t RIOPxrUsdPropertyCopyNamespace()
{
  return MEMORY[0x24BE27648]();
}

uint64_t RIOPxrUsdPropertyCopyPropertyStack()
{
  return MEMORY[0x24BE27650]();
}

uint64_t RIOPxrUsdPropertyCopySplitName()
{
  return MEMORY[0x24BE27658]();
}

uint64_t RIOPxrUsdPropertyIsAuthored()
{
  return MEMORY[0x24BE27660]();
}

uint64_t RIOPxrUsdPropertyIsAuthoredAt()
{
  return MEMORY[0x24BE27668]();
}

uint64_t RIOPxrUsdRelationshipClearTargets()
{
  return MEMORY[0x24BE27670]();
}

uint64_t RIOPxrUsdRelationshipSetTargets()
{
  return MEMORY[0x24BE27680]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBind()
{
  return MEMORY[0x24BE27688]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBindCollection()
{
  return MEMORY[0x24BE27690]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingCollectionPath()
{
  return MEMORY[0x24BE27698]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingMaterialPath()
{
  return MEMORY[0x24BE276A0]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingPrimCollectionName()
{
  return MEMORY[0x24BE276A8]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength()
{
  return MEMORY[0x24BE276B0]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindings()
{
  return MEMORY[0x24BE276B8]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding()
{
  return MEMORY[0x24BE276D0]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef()
{
  return MEMORY[0x24BE276D8]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength()
{
  return MEMORY[0x24BE276E0]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding()
{
  return MEMORY[0x24BE276E8]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbind()
{
  return MEMORY[0x24BE276F0]();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbindCollection()
{
  return MEMORY[0x24BE276F8]();
}

uint64_t RIOPxrUsdStageClearDefaultPrim()
{
  return MEMORY[0x24BE27700]();
}

uint64_t RIOPxrUsdStageClearDiagnostics()
{
  return MEMORY[0x24BE27708]();
}

uint64_t RIOPxrUsdStageClearUsdErrors()
{
  return MEMORY[0x24BE27710]();
}

uint64_t RIOPxrUsdStageCopyColorConfiguration()
{
  return MEMORY[0x24BE27718]();
}

uint64_t RIOPxrUsdStageCopyColorManagementSystem()
{
  return MEMORY[0x24BE27720]();
}

uint64_t RIOPxrUsdStageCopyDefaultPrim()
{
  return MEMORY[0x24BE27728]();
}

uint64_t RIOPxrUsdStageCopyEditTarget()
{
  return MEMORY[0x24BE27730]();
}

uint64_t RIOPxrUsdStageCopyFlattenedUSDA()
{
  return MEMORY[0x24BE27740]();
}

uint64_t RIOPxrUsdStageCopyPseudoRootPrim()
{
  return MEMORY[0x24BE27748]();
}

uint64_t RIOPxrUsdStageCopyRootLayer()
{
  return MEMORY[0x24BE27750]();
}

uint64_t RIOPxrUsdStageCopyUSDA()
{
  return MEMORY[0x24BE27760]();
}

uint64_t RIOPxrUsdStageCopyUpAxis()
{
  return MEMORY[0x24BE27768]();
}

uint64_t RIOPxrUsdStageCopyUsedLayers()
{
  return MEMORY[0x24BE27770]();
}

uint64_t RIOPxrUsdStageCreateInMemory()
{
  return MEMORY[0x24BE27780]();
}

uint64_t RIOPxrUsdStageCreatePrimIfNeeded()
{
  return MEMORY[0x24BE27790]();
}

uint64_t RIOPxrUsdStageCreateWithFilePathWithErrorReporting()
{
  return MEMORY[0x24BE277A0]();
}

uint64_t RIOPxrUsdStageCreateWithFileURL()
{
  return MEMORY[0x24BE277A8]();
}

uint64_t RIOPxrUsdStageCreateWithFileURLWithErrorReporting()
{
  return MEMORY[0x24BE277B0]();
}

uint64_t RIOPxrUsdStageCreateWithInMemoryBuffer()
{
  return MEMORY[0x24BE277B8]();
}

uint64_t RIOPxrUsdStageCreateWithInMemoryDataBufferWithErrorReporting()
{
  return MEMORY[0x24BE277C0]();
}

uint64_t RIOPxrUsdStageEqual()
{
  return MEMORY[0x24BE277D0]();
}

uint64_t RIOPxrUsdStageExportWithFileURL()
{
  return MEMORY[0x24BE277D8]();
}

uint64_t RIOPxrUsdStageGatherDiagnostics()
{
  return MEMORY[0x24BE277E0]();
}

uint64_t RIOPxrUsdStageGetEndTimeCode()
{
  return MEMORY[0x24BE277E8]();
}

uint64_t RIOPxrUsdStageGetEntityTaggingEditMode()
{
  return MEMORY[0x24BE277F0]();
}

uint64_t RIOPxrUsdStageGetFramesPerSecond()
{
  return MEMORY[0x24BE277F8]();
}

uint64_t RIOPxrUsdStageGetIncludeUnusedMaterials()
{
  return MEMORY[0x24BE27800]();
}

uint64_t RIOPxrUsdStageGetMetersPerUnit()
{
  return MEMORY[0x24BE27808]();
}

uint64_t RIOPxrUsdStageGetStartTimeCode()
{
  return MEMORY[0x24BE27810]();
}

uint64_t RIOPxrUsdStageGetTimeCodesPerSecond()
{
  return MEMORY[0x24BE27818]();
}

uint64_t RIOPxrUsdStageGetUsdError()
{
  return MEMORY[0x24BE27820]();
}

uint64_t RIOPxrUsdStageGetUsdErrors()
{
  return MEMORY[0x24BE27828]();
}

uint64_t RIOPxrUsdStageHasAuthoredTimeCodeRange()
{
  return MEMORY[0x24BE27830]();
}

uint64_t RIOPxrUsdStageHasPrimAtPrimPath()
{
  return MEMORY[0x24BE27838]();
}

uint64_t RIOPxrUsdStageIsSupportedFile()
{
  return MEMORY[0x24BE27840]();
}

uint64_t RIOPxrUsdStageLoadThenUnload()
{
  return MEMORY[0x24BE27848]();
}

uint64_t RIOPxrUsdStageReload()
{
  return MEMORY[0x24BE27850]();
}

uint64_t RIOPxrUsdStageRemovePrim()
{
  return MEMORY[0x24BE27858]();
}

uint64_t RIOPxrUsdStageSave()
{
  return MEMORY[0x24BE27860]();
}

uint64_t RIOPxrUsdStageSetColorConfiguration()
{
  return MEMORY[0x24BE27868]();
}

uint64_t RIOPxrUsdStageSetColorManagementSystem()
{
  return MEMORY[0x24BE27870]();
}

uint64_t RIOPxrUsdStageSetDefaultPrim()
{
  return MEMORY[0x24BE27878]();
}

uint64_t RIOPxrUsdStageSetDiagnosticChangeNotification()
{
  return MEMORY[0x24BE27880]();
}

uint64_t RIOPxrUsdStageSetEditTarget()
{
  return MEMORY[0x24BE27888]();
}

uint64_t RIOPxrUsdStageSetEndTimeCode()
{
  return MEMORY[0x24BE27890]();
}

uint64_t RIOPxrUsdStageSetEntityTaggingEditMode()
{
  return MEMORY[0x24BE27898]();
}

uint64_t RIOPxrUsdStageSetFramesPerSecond()
{
  return MEMORY[0x24BE278A0]();
}

uint64_t RIOPxrUsdStageSetIncludeUnusedMaterials()
{
  return MEMORY[0x24BE278A8]();
}

uint64_t RIOPxrUsdStageSetMetersPerUnit()
{
  return MEMORY[0x24BE278B0]();
}

uint64_t RIOPxrUsdStageSetStartTimeCode()
{
  return MEMORY[0x24BE278B8]();
}

uint64_t RIOPxrUsdStageSetTimeCodesPerSecond()
{
  return MEMORY[0x24BE278C0]();
}

uint64_t RIOPxrUsdStageSetUpAxis()
{
  return MEMORY[0x24BE278C8]();
}

uint64_t RIOPxrUsdUtilsCopyAllDependencies()
{
  return MEMORY[0x24BE278D0]();
}

uint64_t RIOPxrUsdUtilsCreateTopLevelEntityFromStage()
{
  return MEMORY[0x24BE278E8]();
}

uint64_t RIOPxrUsdUtilsModifyAssetPaths()
{
  return MEMORY[0x24BE278F0]();
}

uint64_t RIOPxrUsdUtilsSdfCopySpec()
{
  return MEMORY[0x24BE278F8]();
}

uint64_t RIOPxrUsdUtilsStageGetRealityKitOptionBool()
{
  return MEMORY[0x24BE27900]();
}

uint64_t RIOPxrUsdVariantSetAddVariant()
{
  return MEMORY[0x24BE27910]();
}

uint64_t RIOPxrUsdVariantSetClearVariantSelection()
{
  return MEMORY[0x24BE27918]();
}

uint64_t RIOPxrUsdVariantSetCopyEditTarget()
{
  return MEMORY[0x24BE27920]();
}

uint64_t RIOPxrUsdVariantSetCopyPrim()
{
  return MEMORY[0x24BE27930]();
}

uint64_t RIOPxrUsdVariantSetCopyVariantNames()
{
  return MEMORY[0x24BE27938]();
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelection()
{
  return MEMORY[0x24BE27948]();
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelectionOnLayer()
{
  return MEMORY[0x24BE27950]();
}

uint64_t RIOPxrUsdVariantSetIsValid()
{
  return MEMORY[0x24BE27958]();
}

uint64_t RIOPxrUsdVariantSetSetVariantSelection()
{
  return MEMORY[0x24BE27960]();
}

uint64_t RIOPxrUsdVariantSetsCopyAllVariantSelections()
{
  return MEMORY[0x24BE27968]();
}

uint64_t RIOPxrUsdVariantSetsCopySetNames()
{
  return MEMORY[0x24BE27970]();
}

uint64_t RIOPxrUsdVariantSetsCopyVariantSelection()
{
  return MEMORY[0x24BE27978]();
}

uint64_t RIOPxrUsdVariantSetsCopyVariantSet()
{
  return MEMORY[0x24BE27980]();
}

uint64_t RIOPxrUsdVariantSetsSetSelection()
{
  return MEMORY[0x24BE27998]();
}

uint64_t RIOPxrUtilsCopyCFDataWithArAssetPath()
{
  return MEMORY[0x24BE279A0]();
}

uint64_t RIOPxrUtilsResetDefaultArResolver()
{
  return MEMORY[0x24BE279A8]();
}

uint64_t RIOPxrVtValueCopyAssetPath()
{
  return MEMORY[0x24BE279B0]();
}

uint64_t RIOPxrVtValueCopyBoolArray()
{
  return MEMORY[0x24BE279C0]();
}

uint64_t RIOPxrVtValueCopyDictionary()
{
  return MEMORY[0x24BE279C8]();
}

uint64_t RIOPxrVtValueCopyDouble2Array()
{
  return MEMORY[0x24BE279D0]();
}

uint64_t RIOPxrVtValueCopyDouble3Array()
{
  return MEMORY[0x24BE279D8]();
}

uint64_t RIOPxrVtValueCopyDouble4Array()
{
  return MEMORY[0x24BE279E0]();
}

uint64_t RIOPxrVtValueCopyFloat2Array()
{
  return MEMORY[0x24BE279F0]();
}

uint64_t RIOPxrVtValueCopyFloat3Array()
{
  return MEMORY[0x24BE279F8]();
}

uint64_t RIOPxrVtValueCopyFloat4Array()
{
  return MEMORY[0x24BE27A00]();
}

uint64_t RIOPxrVtValueCopyHalf2Array()
{
  return MEMORY[0x24BE27A10]();
}

uint64_t RIOPxrVtValueCopyHalf3Array()
{
  return MEMORY[0x24BE27A18]();
}

uint64_t RIOPxrVtValueCopyHalf4Array()
{
  return MEMORY[0x24BE27A20]();
}

uint64_t RIOPxrVtValueCopyInt2Array()
{
  return MEMORY[0x24BE27A30]();
}

uint64_t RIOPxrVtValueCopyInt32Array()
{
  return MEMORY[0x24BE27A38]();
}

uint64_t RIOPxrVtValueCopyInt3Array()
{
  return MEMORY[0x24BE27A40]();
}

uint64_t RIOPxrVtValueCopyInt4Array()
{
  return MEMORY[0x24BE27A48]();
}

uint64_t RIOPxrVtValueCopyMatrix2dArray()
{
  return MEMORY[0x24BE27A58]();
}

uint64_t RIOPxrVtValueCopyMatrix3dArray()
{
  return MEMORY[0x24BE27A60]();
}

uint64_t RIOPxrVtValueCopyMatrix4dArray()
{
  return MEMORY[0x24BE27A68]();
}

uint64_t RIOPxrVtValueCopyPath()
{
  return MEMORY[0x24BE27A70]();
}

uint64_t RIOPxrVtValueCopyString()
{
  return MEMORY[0x24BE27A90]();
}

uint64_t RIOPxrVtValueCopyStringArray()
{
  return MEMORY[0x24BE27A98]();
}

uint64_t RIOPxrVtValueCopyToken()
{
  return MEMORY[0x24BE27AA0]();
}

uint64_t RIOPxrVtValueCreateEmptyValue()
{
  return MEMORY[0x24BE27AC8]();
}

uint64_t RIOPxrVtValueCreateWithAssetPath()
{
  return MEMORY[0x24BE27AD0]();
}

uint64_t RIOPxrVtValueCreateWithBool()
{
  return MEMORY[0x24BE27AE0]();
}

uint64_t RIOPxrVtValueCreateWithBoolArray()
{
  return MEMORY[0x24BE27AE8]();
}

uint64_t RIOPxrVtValueCreateWithCString()
{
  return MEMORY[0x24BE27AF0]();
}

uint64_t RIOPxrVtValueCreateWithDictionary()
{
  return MEMORY[0x24BE27AF8]();
}

uint64_t RIOPxrVtValueCreateWithDouble()
{
  return MEMORY[0x24BE27B00]();
}

uint64_t RIOPxrVtValueCreateWithDouble2()
{
  return MEMORY[0x24BE27B08]();
}

uint64_t RIOPxrVtValueCreateWithDouble2Array()
{
  return MEMORY[0x24BE27B10]();
}

uint64_t RIOPxrVtValueCreateWithDouble3()
{
  return MEMORY[0x24BE27B18]();
}

uint64_t RIOPxrVtValueCreateWithDouble3Array()
{
  return MEMORY[0x24BE27B20]();
}

uint64_t RIOPxrVtValueCreateWithDouble4()
{
  return MEMORY[0x24BE27B28]();
}

uint64_t RIOPxrVtValueCreateWithDouble4Array()
{
  return MEMORY[0x24BE27B30]();
}

uint64_t RIOPxrVtValueCreateWithDoubleArray()
{
  return MEMORY[0x24BE27B38]();
}

uint64_t RIOPxrVtValueCreateWithFloat()
{
  return MEMORY[0x24BE27B40]();
}

uint64_t RIOPxrVtValueCreateWithFloat2()
{
  return MEMORY[0x24BE27B48]();
}

uint64_t RIOPxrVtValueCreateWithFloat2Array()
{
  return MEMORY[0x24BE27B50]();
}

uint64_t RIOPxrVtValueCreateWithFloat3()
{
  return MEMORY[0x24BE27B58]();
}

uint64_t RIOPxrVtValueCreateWithFloat3Array()
{
  return MEMORY[0x24BE27B60]();
}

uint64_t RIOPxrVtValueCreateWithFloat4()
{
  return MEMORY[0x24BE27B68]();
}

uint64_t RIOPxrVtValueCreateWithFloat4Array()
{
  return MEMORY[0x24BE27B70]();
}

uint64_t RIOPxrVtValueCreateWithFloatArray()
{
  return MEMORY[0x24BE27B78]();
}

uint64_t RIOPxrVtValueCreateWithHalf()
{
  return MEMORY[0x24BE27B80]();
}

uint64_t RIOPxrVtValueCreateWithHalf2()
{
  return MEMORY[0x24BE27B88]();
}

uint64_t RIOPxrVtValueCreateWithHalf2Array()
{
  return MEMORY[0x24BE27B90]();
}

uint64_t RIOPxrVtValueCreateWithHalf3()
{
  return MEMORY[0x24BE27B98]();
}

uint64_t RIOPxrVtValueCreateWithHalf3Array()
{
  return MEMORY[0x24BE27BA0]();
}

uint64_t RIOPxrVtValueCreateWithHalf4()
{
  return MEMORY[0x24BE27BA8]();
}

uint64_t RIOPxrVtValueCreateWithHalf4Array()
{
  return MEMORY[0x24BE27BB0]();
}

uint64_t RIOPxrVtValueCreateWithHalfArray()
{
  return MEMORY[0x24BE27BB8]();
}

uint64_t RIOPxrVtValueCreateWithInt2()
{
  return MEMORY[0x24BE27BC0]();
}

uint64_t RIOPxrVtValueCreateWithInt2Array()
{
  return MEMORY[0x24BE27BC8]();
}

uint64_t RIOPxrVtValueCreateWithInt3()
{
  return MEMORY[0x24BE27BD0]();
}

uint64_t RIOPxrVtValueCreateWithInt32()
{
  return MEMORY[0x24BE27BD8]();
}

uint64_t RIOPxrVtValueCreateWithInt32Array()
{
  return MEMORY[0x24BE27BE0]();
}

uint64_t RIOPxrVtValueCreateWithInt3Array()
{
  return MEMORY[0x24BE27BE8]();
}

uint64_t RIOPxrVtValueCreateWithInt4()
{
  return MEMORY[0x24BE27BF0]();
}

uint64_t RIOPxrVtValueCreateWithInt4Array()
{
  return MEMORY[0x24BE27BF8]();
}

uint64_t RIOPxrVtValueCreateWithInt64()
{
  return MEMORY[0x24BE27C00]();
}

uint64_t RIOPxrVtValueCreateWithMatrix2d()
{
  return MEMORY[0x24BE27C10]();
}

uint64_t RIOPxrVtValueCreateWithMatrix2dArray()
{
  return MEMORY[0x24BE27C18]();
}

uint64_t RIOPxrVtValueCreateWithMatrix2f()
{
  return MEMORY[0x24BE27C20]();
}

uint64_t RIOPxrVtValueCreateWithMatrix3d()
{
  return MEMORY[0x24BE27C28]();
}

uint64_t RIOPxrVtValueCreateWithMatrix3dArray()
{
  return MEMORY[0x24BE27C30]();
}

uint64_t RIOPxrVtValueCreateWithMatrix3f()
{
  return MEMORY[0x24BE27C38]();
}

uint64_t RIOPxrVtValueCreateWithMatrix4d()
{
  return MEMORY[0x24BE27C40]();
}

uint64_t RIOPxrVtValueCreateWithMatrix4dArray()
{
  return MEMORY[0x24BE27C48]();
}

uint64_t RIOPxrVtValueCreateWithMatrix4f()
{
  return MEMORY[0x24BE27C50]();
}

uint64_t RIOPxrVtValueCreateWithQuatd()
{
  return MEMORY[0x24BE27C58]();
}

uint64_t RIOPxrVtValueCreateWithQuatdArray()
{
  return MEMORY[0x24BE27C60]();
}

uint64_t RIOPxrVtValueCreateWithQuatf()
{
  return MEMORY[0x24BE27C68]();
}

uint64_t RIOPxrVtValueCreateWithQuatfArray()
{
  return MEMORY[0x24BE27C70]();
}

uint64_t RIOPxrVtValueCreateWithStringArray()
{
  return MEMORY[0x24BE27C78]();
}

uint64_t RIOPxrVtValueCreateWithToken()
{
  return MEMORY[0x24BE27C80]();
}

uint64_t RIOPxrVtValueCreateWithTokenArray()
{
  return MEMORY[0x24BE27C88]();
}

uint64_t RIOPxrVtValueCreateWithUInt32()
{
  return MEMORY[0x24BE27C90]();
}

uint64_t RIOPxrVtValueCreateWithUInt32Array()
{
  return MEMORY[0x24BE27C98]();
}

uint64_t RIOPxrVtValueCreateWithUInt64()
{
  return MEMORY[0x24BE27CA0]();
}

uint64_t RIOPxrVtValueCreateWithUInt8()
{
  return MEMORY[0x24BE27CB0]();
}

uint64_t RIOPxrVtValueCreateWithUInt8Array()
{
  return MEMORY[0x24BE27CB8]();
}

uint64_t RIOPxrVtValueGetBool()
{
  return MEMORY[0x24BE27CC0]();
}

uint64_t RIOPxrVtValueGetDouble()
{
  return MEMORY[0x24BE27CC8]();
}

uint64_t RIOPxrVtValueGetDouble2()
{
  return MEMORY[0x24BE27CD0]();
}

uint64_t RIOPxrVtValueGetDouble3()
{
  return MEMORY[0x24BE27CD8]();
}

uint64_t RIOPxrVtValueGetDouble4()
{
  return MEMORY[0x24BE27CE0]();
}

uint64_t RIOPxrVtValueGetFloat()
{
  return MEMORY[0x24BE27CE8]();
}

uint64_t RIOPxrVtValueGetFloat2()
{
  return MEMORY[0x24BE27CF0]();
}

uint64_t RIOPxrVtValueGetFloat3()
{
  return MEMORY[0x24BE27CF8]();
}

uint64_t RIOPxrVtValueGetFloat4()
{
  return MEMORY[0x24BE27D00]();
}

uint64_t RIOPxrVtValueGetHalf2()
{
  return MEMORY[0x24BE27D08]();
}

uint64_t RIOPxrVtValueGetHalf3()
{
  return MEMORY[0x24BE27D10]();
}

uint64_t RIOPxrVtValueGetHalf4()
{
  return MEMORY[0x24BE27D18]();
}

uint64_t RIOPxrVtValueGetInt2()
{
  return MEMORY[0x24BE27D20]();
}

uint64_t RIOPxrVtValueGetInt3()
{
  return MEMORY[0x24BE27D28]();
}

uint64_t RIOPxrVtValueGetInt32()
{
  return MEMORY[0x24BE27D30]();
}

uint64_t RIOPxrVtValueGetInt4()
{
  return MEMORY[0x24BE27D38]();
}

uint64_t RIOPxrVtValueGetInt64()
{
  return MEMORY[0x24BE27D40]();
}

uint64_t RIOPxrVtValueGetMatrix2d()
{
  return MEMORY[0x24BE27D48]();
}

uint64_t RIOPxrVtValueGetMatrix3d()
{
  return MEMORY[0x24BE27D50]();
}

uint64_t RIOPxrVtValueGetMatrix4d()
{
  return MEMORY[0x24BE27D58]();
}

uint64_t RIOPxrVtValueGetQuatd()
{
  return MEMORY[0x24BE27D60]();
}

uint64_t RIOPxrVtValueGetQuatf()
{
  return MEMORY[0x24BE27D68]();
}

uint64_t RIOPxrVtValueGetUInt32()
{
  return MEMORY[0x24BE27D70]();
}

uint64_t RIOPxrVtValueGetUInt8()
{
  return MEMORY[0x24BE27D80]();
}

uint64_t RIOPxrVtValueIsEmpty()
{
  return MEMORY[0x24BE27D88]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

float remainderf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAFB30](a1, a2);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x24BEE4C48]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x24BEE4ED8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x24BEE4F20]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x24BEE4FF0]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x24BEE4FF8]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x24BEE5000]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

