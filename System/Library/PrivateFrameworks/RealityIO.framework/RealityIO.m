ValueMetadata *type metadata accessor for SceneDescriptionFoundations()
{
  return &type metadata for SceneDescriptionFoundations;
}

void type metadata accessor for RIOCancellableRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOCancellableRef);
}

void type metadata accessor for RIOBuilderOutputsRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderOutputsRef);
}

void type metadata accessor for RIOPxrSdfAttributeSpecRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfAttributeSpecRef);
}

void type metadata accessor for RIOBuilderPropertyDeltaRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderPropertyDeltaRef);
}

void type metadata accessor for RIOBuilderPrimDeltaRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderPrimDeltaRef);
}

void type metadata accessor for RIOBuilderStageDeltaRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderStageDeltaRef);
}

void type metadata accessor for RIOBuilderInputsRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderInputsRef);
}

void type metadata accessor for RIOBuilderRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderRef);
}

void type metadata accessor for RIOPxrUsdEditTargetRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdEditTargetRef);
}

void type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderDirtyPropertyDescriptorRef);
}

void type metadata accessor for RIOPxrUsdPrimFlagsDisjunctionPredicateRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdPrimFlagsDisjunctionPredicateRef);
}

void type metadata accessor for RIOPxrUsdPrimFlagsConjunctionPredicateRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdPrimFlagsConjunctionPredicateRef);
}

void type metadata accessor for RIOPxrUsdPrimFlagsPredicateRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdPrimFlagsPredicateRef);
}

void type metadata accessor for RIOPxrUsdVariantSetsRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdVariantSetsRef);
}

void type metadata accessor for RIOPxrUsdVariantSetRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdVariantSetRef);
}

void type metadata accessor for RIOPxrSdrShaderPropertyRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdrShaderPropertyRef);
}

void type metadata accessor for RIOPxrSdrShaderNodeRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdrShaderNodeRef);
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for CFDataRef);
}

void type metadata accessor for RIOPxrUsdStageRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdStageRef);
}

void type metadata accessor for RIOBuilderDirtyPrimDescriptorRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderDirtyPrimDescriptorRef);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float2x2(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_float2x2(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for simd_float2x2(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_float2x2);
}

void type metadata accessor for RIOPxrArAssetRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrArAssetRef);
}

void type metadata accessor for RIOBuilderOutputDescriptorRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderOutputDescriptorRef);
}

void type metadata accessor for RIOBuilderInputDescriptorRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderInputDescriptorRef);
}

void type metadata accessor for RIOBuilderBuildOrder(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderBuildOrder);
}

void type metadata accessor for RIOBuilderDirtyStageDescriptorRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderDirtyStageDescriptorRef);
}

void type metadata accessor for RIOPxrSdfReferenceRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfReferenceRef);
}

void type metadata accessor for RIOPxrSdfPrimSpecRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfPrimSpecRef);
}

void type metadata accessor for RIOPxrUsdShadeMaterialBindingAPICollectionBindingRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdShadeMaterialBindingAPICollectionBindingRef);
}

void type metadata accessor for RETypeID(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RETypeID);
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for REComponentClassPtr(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REComponentClassPtr(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for REComponentClassPtr(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for REComponentClassPtr);
}

void type metadata accessor for RIOImportSessionRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOImportSessionRef);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for RIOPxrSdfNamespaceEditRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfNamespaceEditRef);
}

void type metadata accessor for RIOPxrSdfAssetPathRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfAssetPathRef);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_float4x4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_float4x4);
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float3x3(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_float3x3(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_float3x3);
}

void type metadata accessor for RIOPxrSdfLayerRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfLayerRef);
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for CFErrorRef);
}

void type metadata accessor for RIOPxrVtValueRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrVtValueRef);
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_quatf);
}

uint64_t initializeBufferWithCopyOfBuffer for simd_quatd(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_quatd(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_quatd(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for simd_quatd(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_quatd);
}

void type metadata accessor for simd_double2x2(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_double2x2);
}

__n128 __swift_memcpy96_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double3x3(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_double3x3(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for simd_double3x3(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_double3x3);
}

__n128 __swift_memcpy128_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double4x4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_double4x4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for simd_double4x4(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for simd_double4x4);
}

void type metadata accessor for RIOPxrSdfValueTypeNameRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfValueTypeNameRef);
}

void type metadata accessor for REComponentType(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for REComponentType);
}

void type metadata accessor for RIOPxrSdfPathRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrSdfPathRef);
}

void type metadata accessor for REEngineClockMode(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for REEngineClockMode);
}

void type metadata accessor for REEngineServiceMask(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for REEngineServiceMask);
}

void type metadata accessor for RIOPxrTfTokenRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrTfTokenRef);
}

void type metadata accessor for RIOPxrUsdObjectRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOPxrUsdObjectRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrTfTokenRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrTfTokenRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrTfTokenRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrTfTokenRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance REStartupOptions@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance REStartupOptions(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance REStartupOptions(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance REStartupOptions@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfValueTypeNameRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfValueTypeNameRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfValueTypeNameRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfValueTypeNameRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfPathRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfPathRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfPathRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfPathRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfPathRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfLayerRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfLayerRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfLayerRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfLayerRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfLayerRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOPxrSdfLayerRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance REComponentClassPtr()
{
  return OpaquePointer.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance REComponentClassPtr()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REComponentClassPtr()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REComponentClassPtr(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOImportSessionRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOImportSessionRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOImportSessionRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOImportSessionRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOImportSessionRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfAssetPathRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfAssetPathRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfAssetPathRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfAssetPathRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrSdfReferenceRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfReferenceRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrSdfReferenceRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfReferenceRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrSdfReferenceRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOPxrSdfReferenceRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrTfTokenRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrTfTokenRef, a3);
  return static _CFObject.== infix(_:_:)();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REEngineServiceMask(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance REEngineServiceMask(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance REEngineServiceMask(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance REEngineServiceMask@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance REEngineServiceMask(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance REEngineServiceMask@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance REEngineServiceMask(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance REEngineServiceMask(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance REEngineServiceMask(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance REEngineServiceMask()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance REEngineServiceMask()
{
  return SetAlgebra.init<A>(_:)();
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance REEngineServiceMask(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfPathRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfPathRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfLayerRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfLayerRef, a3);
  return static _CFObject.== infix(_:_:)();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance REComponentClassPtr@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REComponentClassPtr(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOImportSessionRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOImportSessionRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RIOPxrUsdObjectRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrUsdObjectRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RIOPxrUsdObjectRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrUsdObjectRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrUsdObjectRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RIOPxrTfTokenRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  MEMORY[0x22E2F889C](a4, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfAssetPathRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfAssetPathRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrSdfReferenceRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfReferenceRef, a3);
  return static _CFObject.== infix(_:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REEngineServiceMask(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance REEngineServiceMask@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance REComponentClassPtr()
{
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RIOPxrUsdObjectRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrUsdObjectRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in RIOPxrUsdObjectRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
}

uint64_t base witness table accessor for Equatable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22E2F889C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t base witness table accessor for RawRepresentable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t base witness table accessor for SetAlgebra in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfValueTypeNameRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfValueTypeNameRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfLayerRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfLayerRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfLayerRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfLayerRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfLayerRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfLayerRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfAssetPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2F889C](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in RIOImportSessionRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
}

uint64_t base witness table accessor for RawRepresentable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfReferenceRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfReferenceRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfReferenceRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfReferenceRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfReferenceRef and conformance RIOPxrSdfReferenceRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfReferenceRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfReferenceRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfAssetPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfAssetPathRef and conformance RIOPxrSdfAssetPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfAssetPathRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

uint64_t base witness table accessor for Hashable in RIOImportSessionRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrSdfPathRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrUsdObjectRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
}

uint64_t base witness table accessor for Equatable in RIOPxrTfTokenRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrSdfValueTypeNameRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfValueTypeNameRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef);
}

uint64_t base witness table accessor for Hashable in RIOPxrTfTokenRef()
{
  return lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for RIOBuilderDirtyMetadataDescriptorRef);
}

void type metadata accessor for CFSetRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for CFSetRef);
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
  type metadata accessor for RIOCancellableRef(a1, &lazy cache variable for type metadata for CGImageRef);
}

void type metadata accessor for RIOCancellableRef(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t __RKEntityActionMultiplePerformBehavior.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::Int v13;
  unsigned int *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v15 = 0;
LABEL_14:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 1);
    goto LABEL_15;
  }
  v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_13:
    v15 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_14;
  }
  v5 = (void *)v4;
  v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_13;
  }
  v7 = (void *)v6;

  swift_release();
  v8 = (void *)RIOPxrTfTokenCopyString();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  v13 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionMultiplePerformBehaviorUSD.init(rawValue:), v12);
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_release();
    v14 = (unsigned int *)MEMORY[0x24BDE6DA0];
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    swift_release();
    v14 = (unsigned int *)MEMORY[0x24BDE6D90];
    goto LABEL_18;
  }
  if (v13 != 1)
  {
LABEL_15:
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  v14 = (unsigned int *)MEMORY[0x24BDE6D98];
LABEL_18:
  v17 = *v14;
  v18 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a1, v17, v18);
}

unint64_t lazy protocol witness table accessor for type Object.Error and conformance Object.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Object.Error and conformance Object.Error;
  if (!lazy protocol witness table cache variable for type Object.Error and conformance Object.Error)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Object.Error, &type metadata for Object.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Object.Error and conformance Object.Error);
  }
  return result;
}

void outlined consume of Result<ToolsFoundations.Token, Object.Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    outlined consume of Object.Error(a1);
  else

}

void outlined consume of Object.Error(id a1)
{
  if ((unint64_t)a1 >= 2)

}

unint64_t lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError, &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError, &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BC238C4 + 4 * asc_22BD0C280[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BC238E4 + 4 * byte_22BD0C285[v4]))();
}

_BYTE *sub_22BC238C4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BC238E4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC238EC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC238F4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC238FC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC23904(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return 0;
}

ValueMetadata *type metadata accessor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
}

uint64_t closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t, double);
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  id v40;

  v39 = a3;
  v40 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v36 - v15;
  v17 = type metadata accessor for __RKEntityActionSpecification();
  v37 = *(_QWORD *)(v17 - 8);
  v38 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v21(v16, a2, v10, v18);
  ((void (*)(char *, uint64_t, uint64_t))v21)(v13, a2, v10);
  v22 = a4;
  v23 = (void *)RIOPxrSdfPathCopyString();
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36[0] = v25;
  v36[1] = v24;

  ((void (*)(char *, uint64_t, uint64_t))v21)(v9, a2, v10);
  v26 = v39;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  v27 = v40;
  v28 = (void *)RIOPxrSdfPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v29 = v37;
  v30 = v38;
  __RKEntityPlayTimelineActionArguments.init(target:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v20, *MEMORY[0x24BDE6988], v30);
  v31 = *v26;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v26 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
    *v26 = v31;
  }
  v34 = *(_QWORD *)(v31 + 16);
  v33 = *(_QWORD *)(v31 + 24);
  if (v34 >= v33 >> 1)
  {
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v31);
    *v26 = v31;
  }
  *(_QWORD *)(v31 + 16) = v34 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v29 + 32))(v31+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v34, v20, v30);
}

uint64_t specialized static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v0 = type metadata accessor for __RKEntityGroupActionOrder();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_10;
  v6 = *(id *)(v4 + 32);
  swift_bridgeObjectRelease();
  v7 = specialized Inputs.pathsForRelationship(named:requestContext:)();
  if (!*(_QWORD *)(v7 + 16))
  {

LABEL_10:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v8 = *(id *)(v7 + 32);
  v9 = swift_bridgeObjectRelease();
  v15[0] = MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](v9);
  v15[-4] = v15;
  v15[-3] = v6;
  v15[-2] = v8;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:), (uint64_t)&v15[-6]);
  v10 = v15[0];
  if (*(_QWORD *)(v15[0] + 16) < 2uLL)
  {
    swift_bridgeObjectRetain();
    v14 = v10;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v11 = type metadata accessor for __RKEntityActionSpecification();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_22BD0C360;
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE68D0], v0);
    swift_bridgeObjectRetain();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v12 + 104))(v14 + v13, *MEMORY[0x24BDE69C8], v11);
  }

  swift_bridgeObjectRelease();
  return v14;
}

uint64_t partial apply for closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22E2F8884]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void AudioFileGroupBuilder.run(inputs:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t SwiftObject;
  uint64_t ServiceLocator;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  id v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void *v35;
  id v36;
  _QWORD v37[9];
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[7];

  v2 = v1;
  v4 = Inputs.prim.getter();
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (id)RIOBuilderInputsGetImportSession();
  if (!v6)
  {
    __break(1u);
    goto LABEL_37;
  }
  v7 = v6;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  swift_retain();
  ServiceLocator = REEngineGetServiceLocator();
  v10 = MEMORY[0x22E2F60DC](ServiceLocator);
  if (!v10)
  {
    if (one-time initialization token for rioAudio == -1)
    {
LABEL_19:
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.rioAudio);
      v21 = static os_log_type_t.error.getter();
      v22 = Logger.logObject.getter();
      v23 = v21;
      if (os_log_type_enabled(v22, v21))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_22BC20000, v22, v23, "AudioFileGroupBuilder could not get an AssetManager.", v24, 2u);
        MEMORY[0x22E2F898C](v24, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      swift_release();
      return;
    }
LABEL_35:
    swift_once();
    goto LABEL_19;
  }
  v11 = v10;
  v12 = Prim.children.getter();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  if (v12 >> 62)
  {
    v13 = _CocoaArrayWrapper.endIndex.getter();
    v43 = v11;
    if (v13)
      goto LABEL_6;
LABEL_24:
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
    goto LABEL_25;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v43 = v11;
  if (!v13)
    goto LABEL_24;
LABEL_6:
  v40 = v1;
  v41 = SwiftObject;
  v42 = v4;
  type metadata accessor for RIOPxrTfTokenRef(0);
  if (v13 < 1)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v38 = a1;
  v39 = v5;
  for (i = 0; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0)
      MEMORY[0x22E2F57B8](i, v12);
    else
      swift_retain();
    v15 = (void *)RIOPxrUsdPrimCopyTypeName();
    if (one-time initialization token for primType != -1)
      swift_once();
    v16 = (void *)static AudioConstants.AudioFile.primType;
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    v17 = v16;
    v18 = static _CFObject.== infix(_:_:)();

    if ((v18 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v19 = aBlock[0];
  v4 = v42;
  v2 = v40;
  a1 = v38;
LABEL_25:
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v19);
  v26 = v25;
  swift_release();
  v27 = swift_release();
  if (*(_QWORD *)(v26 + 16))
  {
    MEMORY[0x24BDAC7A8](v27);
    v37[2] = v2;
    v37[3] = a1;
    v37[4] = v26;
    v37[5] = v43;
    v37[6] = v4;
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for closure #3 in AudioFileGroupBuilder.run(inputs:);
    *(_QWORD *)(v28 + 24) = v37;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor;
    v29 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v29);
    LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    if ((v29 & 1) == 0)
      return;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  v30 = (id)RIOBuilderInputsGetImportSession();
  if (!v30)
    goto LABEL_38;
  v31 = v30;
  v32 = RIOImportSessionGetSwiftObject();

  if (!v32)
  {
LABEL_39:
    __break(1u);
    return;
  }
  v33 = v2[4];
  swift_retain();
  if (v33)
  {
    swift_bridgeObjectRetain();
    RERelease();
    v34 = (void **)(v32 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v35 = *v34;
    String.utf8CString.getter();
    v36 = v35;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_bridgeObjectRelease();

    swift_release();
  }
  v2[3] = 0;
  v2[4] = 0;
  v2[5] = 0;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
}

void closure #3 in AudioFileGroupBuilder.run(inputs:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t SwiftObject;
  uint64_t v8;
  void **v9;
  void *v10;
  id v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int LayoutTag;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  void **v36;
  void *v37;
  id v38;
  uint64_t v39;

  v5 = (id)RIOBuilderInputsGetImportSession();
  if (!v5)
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = v5;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = a1[4];
  swift_retain();
  if (v8)
  {
    swift_bridgeObjectRetain();
    RERelease();
    v9 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v10 = *v9;
    String.utf8CString.getter();
    v11 = v10;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_bridgeObjectRelease();

    swift_release();
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  swift_release();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a3 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v39 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    v13 = v39;
    v14 = a3 + 32;
    v15 = v12;
    do
    {
      LayoutTag = REAudioFileAssetGetLayoutTag();
      v18 = *(_QWORD *)(v39 + 16);
      v17 = *(_QWORD *)(v39 + 24);
      if (v18 >= v17 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      *(_QWORD *)(v39 + 16) = v18 + 1;
      *(_DWORD *)(v39 + 4 * v18 + 32) = LayoutTag;
      v14 += 8;
      --v15;
    }
    while (v15);
  }
  v19 = specialized Set.init<A>(_:)(v13);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRelease();
  if (v20 == 1)
  {
    v21 = (void *)RIOPxrUsdObjectCopyName();
    v22 = (void *)RIOPxrTfTokenCopyString();
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

    v26 = (void *)MEMORY[0x22E2F5278](v23, v25);
    swift_bridgeObjectRelease();
    v27 = REAudioFileGroupAssetCreateWithFileAssets();

    v28 = (void *)RIOPxrUsdObjectCopyPath();
    v29 = (void *)RIOPxrSdfPathCopyString();
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    if (v27)
    {
      a1[3] = v30;
      a1[4] = v32;
      a1[5] = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v33 = (id)RIOBuilderInputsGetImportSession();
      if (v33)
      {
        v34 = v33;
        v35 = RIOImportSessionGetSwiftObject();

        if (v35)
        {
          v36 = (void **)(v35 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
          swift_retain();
          swift_beginAccess();
          v37 = *v36;
          String.utf8CString.getter();
          v38 = v37;
          RIOImportSessionSetExtraAssetWithTag();
          swift_bridgeObjectRelease();
          swift_release();

          swift_release();
          return;
        }
        goto LABEL_20;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
  }
}

void AudioFileGroupBuilder.clear(inputs:)()
{
  _QWORD *v0;
  id v1;
  void *v2;
  uint64_t SwiftObject;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v1 = (id)RIOBuilderInputsGetImportSession();
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = v1;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v4 = v0[4];
  swift_retain();
  if (v4)
  {
    swift_bridgeObjectRetain();
    RERelease();
    v5 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v6 = *v5;
    String.utf8CString.getter();
    v7 = v6;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_bridgeObjectRelease();

    swift_release();
  }
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = 0;
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t AudioFileGroupBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioFileGroupBuilder()
{
  return objc_opt_self();
}

void protocol witness for Builder.buildOrder.getter in conformance AudioFileGroupBuilder(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t protocol witness for Builder.inputDescriptors() in conformance AudioFileGroupBuilder()
{
  uint64_t inited;
  void *v1;
  id v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  if (one-time initialization token for primType != -1)
    swift_once();
  v1 = (void *)static AudioConstants.AudioFile.primType;
  *(_QWORD *)(inited + 32) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 40) = 0x800000022BD06D30;
  *(_QWORD *)(inited + 48) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 56) = 0x800000022BD06D30;
  *(_QWORD *)(inited + 64) = v1;
  *(_QWORD *)(inited + 72) = 1;
  *(_BYTE *)(inited + 80) = 32;
  v2 = v1;
  v3 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v3;
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance AudioFileGroupBuilder()
{
  return MEMORY[0x24BEE4B08];
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[4];
  uint64_t v25;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v25 = v8;
      type metadata accessor for StageDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      result = 0;
      *a1 = *(_QWORD *)&v24[0];
      return result;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    *(_QWORD *)&v24[0] = v22;
    if (*(_QWORD *)(v22 + 24) <= *(_QWORD *)(v22 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v23 = *(_QWORD *)&v24[0];
    }
    else
    {
      v23 = v22;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v23);
    *v3 = v23;
  }
  else
  {
    Hasher.init(_seed:)();
    v10 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v24, v10);
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v24, v11);
    swift_bridgeObjectRelease();
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      v15 = ~v13;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v17 = *(_QWORD *)(v16 + 24);
        v18 = *(_QWORD *)(a2 + 24);
        swift_retain();
        if ((specialized static Set.== infix(_:_:)(v17, v18) & 1) != 0)
        {
          v19 = specialized static Set.== infix(_:_:)(*(_QWORD *)(v16 + 16), *(_QWORD *)(a2 + 16));
          swift_release();
          if ((v19 & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            *a1 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v14);
            swift_retain();
            return 0;
          }
        }
        else
        {
          swift_release();
        }
        v14 = (v14 + 1) & v15;
      }
      while (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v24[0] = *v3;
    *v3 = 0x8000000000000000;
    v21 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v21, v14, isUniquelyReferenced_nonNull_native);
    *v3 = *(_QWORD *)&v24[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(_QWORD *);
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  Swift::Int v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v20;
  _QWORD v21[10];

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v21[9] = v8;
      type metadata accessor for PrimDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      result = 0;
      *a1 = v21[0];
      return result;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v21[0] = v17;
    if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v18 = v21[0];
    }
    else
    {
      v18 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v18);
    *v3 = v18;
  }
  else
  {
    Hasher.init(_seed:)();
    v10 = *(void (**)(_QWORD *))(*(_QWORD *)a2 + 128);
    swift_bridgeObjectRetain();
    v10(v21);
    v11 = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 136);
      swift_retain();
      LOBYTE(v14) = v14(a2);
      swift_release();
      if ((v14 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      v15 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v15;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v16 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 136);
        swift_retain();
        LOBYTE(v16) = v16(a2);
        swift_release();
        if ((v16 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v2;
    *v2 = 0x8000000000000000;
    v20 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v20, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v21[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(_QWORD *);
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  Swift::Int v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v20;
  _QWORD v21[10];

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v21[9] = v8;
      type metadata accessor for PropertyDirtyState();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21[0];
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v21[0] = v17;
    if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v18 = v21[0];
    }
    else
    {
      v18 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v18);
    *v3 = v18;
  }
  else
  {
    Hasher.init(_seed:)();
    v10 = *(void (**)(_QWORD *))(*(_QWORD *)a2 + 120);
    swift_bridgeObjectRetain();
    v10(v21);
    v11 = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 128);
      swift_retain();
      LOBYTE(v14) = v14(a2);
      swift_release();
      if ((v14 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      v15 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v15;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v16 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 128);
        swift_retain();
        LOBYTE(v16) = v16(a2);
        swift_release();
        if ((v16 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v2;
    *v2 = 0x8000000000000000;
    v20 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v20, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v21[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _OWORD v23[3];
  char v24;
  _QWORD v25[7];
  _BYTE v26[56];

  outlined init with take of InputDescriptor(a2, (uint64_t)v26);
  v5 = *v2;
  outlined init with take of InputDescriptor(a2, (uint64_t)v25);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  InputDescriptor.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = ~v7;
    while (1)
    {
      v10 = *(_QWORD *)(v5 + 48) + 56 * v8;
      v11 = *(_BYTE *)(v10 + 48);
      v23[0] = *(_OWORD *)v10;
      v23[1] = *(_OWORD *)(v10 + 16);
      v23[2] = *(_OWORD *)(v10 + 32);
      v24 = v11;
      specialized static InputDescriptor.== infix(_:_:)((uint64_t)v23);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    outlined retain of InputDescriptor(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of InputDescriptor);
    v15 = *(_QWORD *)(*v2 + 48) + 56 * v8;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    v20 = *(void **)(v15 + 32);
    v21 = *(_QWORD *)(v15 + 40);
    v22 = *(_BYTE *)(v15 + 48);
    *(_QWORD *)a1 = *(_QWORD *)v15;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v19;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v21;
    *(_BYTE *)(a1 + 48) = v22;
    outlined copy of InputDescriptor(v16, v17, v18, v19, v20, v21, v22);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with take of InputDescriptor((uint64_t)v26, (uint64_t)v23);
    v25[0] = *v2;
    *v2 = 0x8000000000000000;
    outlined retain of InputDescriptor((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of InputDescriptor);
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v23, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v25[0];
    swift_bridgeObjectRelease();
    outlined init with take of InputDescriptor((uint64_t)v23, a1);
    return 1;
  }
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v28;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  unsigned __int8 v36;

  outlined init with take of OutputDescriptor(a2, (uint64_t)v35);
  v3 = v35[0];
  v4 = v35[1];
  v5 = v35[2];
  v6 = v35[3];
  v7 = v36;
  v28 = v2;
  v8 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v32 = v6;
  v33 = v5;
  String.hash(into:)();
  v31 = v7;
  Hasher._combine(_:)(v7);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  v12 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v8 + 48);
    do
    {
      v15 = v14 + 40 * v11;
      v16 = *(_QWORD *)(v15 + 16);
      v17 = *(_QWORD *)(v15 + 24);
      v18 = *(unsigned __int8 *)(v15 + 32);
      v19 = *(_QWORD *)v15 == v3 && *(_QWORD *)(v15 + 8) == v4;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v16 == v33 && v17 == v32)
        {
          if (v31 == v18)
            goto LABEL_16;
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v31 ^ v18) & 1) == 0)
        {
LABEL_16:
          swift_bridgeObjectRelease();
          outlined release of OutputDescriptor(a2);
          v21 = *(_QWORD *)(*v28 + 48) + 40 * v11;
          v23 = *(_QWORD *)v21;
          v22 = *(_QWORD *)(v21 + 8);
          v24 = *(_QWORD *)(v21 + 16);
          v25 = *(_QWORD *)(v21 + 24);
          LOBYTE(v21) = *(_BYTE *)(v21 + 32);
          *(_QWORD *)a1 = v23;
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = v24;
          *(_QWORD *)(a1 + 24) = v25;
          *(_BYTE *)(a1 + 32) = v21;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          return 0;
        }
      }
      v11 = (v11 + 1) & v13;
    }
    while (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v34 = *v28;
  *v28 = 0x8000000000000000;
  outlined retain of OutputDescriptor(a2);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v11, isUniquelyReferenced_nonNull_native);
  *v28 = v34;
  swift_bridgeObjectRelease();
  outlined init with take of OutputDescriptor(a2, a1);
  return 1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for ImportSession.EvaluationFault(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ImportSession.EvaluationFault.hash(into:)();
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v20 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      outlined init with copy of ImportSession.EvaluationFault(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9);
      specialized static ImportSession.EvaluationFault.== infix(_:_:)((uint64_t)v9, a2);
      v17 = v16;
      outlined destroy of ImportSession.EvaluationFault((uint64_t)v9);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of ImportSession.EvaluationFault(a2);
    outlined init with copy of ImportSession.EvaluationFault(*(_QWORD *)(*v3 + 48) + v15 * v13, v20);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of ImportSession.EvaluationFault(a2, (uint64_t)v9);
    v21 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v21;
    swift_bridgeObjectRelease();
    outlined init with take of ImportSession.EvaluationFault(a2, a1);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x22E2F5A7C](*(_QWORD *)(v6 + 40), a2, 4);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  id v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  void *v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  id v19;
  uint64_t v21;

  v3 = v2;
  v5 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
  swift_bridgeObjectRetain();
  v6 = a2;
  _CFObject.hash(into:)();

  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v5 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v9);
    v11 = static _CFObject.== infix(_:_:)();

    if ((v11 & 1) != 0)
    {
LABEL_6:

      swift_bridgeObjectRelease();
      v15 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v9);
      *a1 = v15;
      v16 = v15;
      return 0;
    }
    v12 = ~v8;
    while (1)
    {
      v9 = (v9 + 1) & v12;
      if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        break;
      v13 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v9);
      v14 = static _CFObject.== infix(_:_:)();

      if ((v14 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  v19 = v6;
  specialized _NativeSet.insertNew(_:at:isUnique:)(v19, v9, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = v19;
  return 1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  void *v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  id v18;
  uint64_t v20;

  v3 = v2;
  v5 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  swift_bridgeObjectRetain();
  _CFObject.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v8);
    v10 = static _CFObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {
LABEL_6:

      swift_bridgeObjectRelease();
      v14 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v8);
      *a1 = v14;
      v15 = v14;
      return 0;
    }
    v11 = ~v7;
    while (1)
    {
      v8 = (v8 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      v12 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v8);
      v13 = static _CFObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = *v3;
  *v3 = 0x8000000000000000;
  v18 = a2;
  specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v18, v8, isUniquelyReferenced_nonNull_native);
  *v3 = v20;
  swift_bridgeObjectRelease();
  *a1 = v18;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  id v26;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for RIOPxrSdfPathRef(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v28;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v29 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      v22 = v29;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v22);
    *v3 = v22;
    swift_bridgeObjectRelease();
    *a1 = v8;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    swift_bridgeObjectRetain();
    _CFObject.hash(into:)();
    v11 = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = static _CFObject.== infix(_:_:)();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = static _CFObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *v3;
    *v3 = 0x8000000000000000;
    v25 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v25, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v30;
    swift_bridgeObjectRelease();
    *a1 = v25;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  char v25;
  char v27;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Stage.MissingReference.hash(into:)();
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  v45 = (uint64_t)a2;
  v46 = a1;
  v44 = v3;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v11 = ~v8;
    v12 = *(_QWORD *)(v6 + 48);
    v13 = *(unsigned __int8 *)a2;
    v14 = a2[1];
    v15 = a2[2];
    v54 = a2[4];
    v55 = v15;
    v47 = a2[5];
    v49 = a2[3];
    v50 = a2[6];
    v48 = a2[8];
    v41 = a2[9];
    v42 = a2[7];
    v43 = a2[10];
    v56 = v14;
    do
    {
      v16 = (_QWORD *)(v12 + 88 * v9);
      if (*(unsigned __int8 *)v16 != v13)
        goto LABEL_4;
      v18 = v16[3];
      v17 = v16[4];
      v19 = v16[5];
      v20 = v16[6];
      v21 = v16[8];
      v52 = v16[7];
      v51 = v16[9];
      v53 = v16[10];
      if (v16[1] != v14 || v16[2] != v15)
      {
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v15 = v55;
        v14 = v56;
        if ((v23 & 1) == 0)
          goto LABEL_4;
      }
      if (v17)
      {
        if (!v54)
          goto LABEL_4;
        if (v18 != v49 || v17 != v54)
        {
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = v55;
          v14 = v56;
          if ((v25 & 1) == 0)
            goto LABEL_4;
        }
      }
      else if (v54)
      {
        goto LABEL_4;
      }
      if (v20)
      {
        if (!v50)
          goto LABEL_4;
        if (v19 != v47 || v20 != v50)
        {
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = v55;
          v14 = v56;
          if ((v27 & 1) == 0)
            goto LABEL_4;
        }
      }
      else if (v50)
      {
        goto LABEL_4;
      }
      if (v21)
      {
        if (!v48)
          goto LABEL_4;
        if (v52 != v42 || v21 != v48)
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = v55;
          v14 = v56;
          if ((v29 & 1) == 0)
            goto LABEL_4;
        }
      }
      else if (v48)
      {
        goto LABEL_4;
      }
      if (v53)
      {
        if (v43)
        {
          if (v51 == v41 && v53 == v43
            || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(), v15 = v55, v14 = v56, (v30 & 1) != 0))
          {
LABEL_43:
            swift_bridgeObjectRelease();
            outlined release of Stage.MissingReference(v45);
            v31 = *(_QWORD *)(*v44 + 48) + 88 * v9;
            v32 = *(_QWORD *)(v31 + 8);
            v33 = *(_QWORD *)(v31 + 16);
            v34 = *(_QWORD *)(v31 + 24);
            v35 = *(_QWORD *)(v31 + 80);
            *(_BYTE *)v46 = *(_BYTE *)v31;
            *(_QWORD *)(v46 + 8) = v32;
            *(_QWORD *)(v46 + 16) = v33;
            *(_QWORD *)(v46 + 24) = v34;
            v36 = *(_OWORD *)(v31 + 48);
            *(_OWORD *)(v46 + 32) = *(_OWORD *)(v31 + 32);
            *(_OWORD *)(v46 + 48) = v36;
            *(_OWORD *)(v46 + 64) = *(_OWORD *)(v31 + 64);
            *(_QWORD *)(v46 + 80) = v35;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            return 0;
          }
        }
      }
      else if (!v43)
      {
        goto LABEL_43;
      }
LABEL_4:
      v9 = (v9 + 1) & v11;
    }
    while (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57 = *v44;
  *v44 = 0x8000000000000000;
  outlined retain of Stage.MissingReference(v45);
  specialized _NativeSet.insertNew(_:at:isUnique:)(v45, v9, isUniquelyReferenced_nonNull_native);
  *v44 = v57;
  swift_bridgeObjectRelease();
  v39 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v46 + 48) = v39;
  *(_OWORD *)(v46 + 64) = *(_OWORD *)(v45 + 64);
  *(_QWORD *)(v46 + 80) = *(_QWORD *)(v45 + 80);
  v40 = *(_OWORD *)(v45 + 16);
  result = 1;
  *(_OWORD *)v46 = *(_OWORD *)v45;
  *(_OWORD *)(v46 + 16) = v40;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  char v26;
  uint64_t *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  id v35;
  void *v36;
  _QWORD *v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40[9];

  v5 = v4;
  v10 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v40, a2);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v39 = a3;
  _CFObject.hash(into:)();
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10 + 56;
  v37 = v5;
  v38 = a1;
  v36 = a4;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v15 = ~v12;
    do
    {
      v16 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 24 * v13);
      v18 = *v16;
      v17 = (void *)v16[1];
      v19 = (void *)v16[2];
      swift_bridgeObjectRetain();
      v20 = v17;
      v21 = v19;
      if ((specialized static Set.== infix(_:_:)(v18, a2) & 1) != 0)
      {
        v22 = v10;
        v23 = a2;
        v24 = v20;
        v25 = v39;
        v26 = static _CFObject.== infix(_:_:)();

        swift_bridgeObjectRelease();
        a2 = v23;
        v10 = v22;

        if ((v26 & 1) != 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v27 = (uint64_t *)(*(_QWORD *)(*v37 + 48) + 24 * v13);
          v28 = (void *)v27[1];
          v29 = (void *)v27[2];
          *v38 = *v27;
          v38[1] = (uint64_t)v28;
          v38[2] = (uint64_t)v29;
          swift_bridgeObjectRetain();
          v30 = v28;
          v31 = v29;
          return 0;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      v13 = (v13 + 1) & v15;
    }
    while (((*(_QWORD *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v40[0] = *v37;
  *v37 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  v34 = v39;
  v35 = v36;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v34, (uint64_t)v35, v13, isUniquelyReferenced_nonNull_native);
  *v37 = v40[0];
  swift_bridgeObjectRelease();
  *v38 = a2;
  v38[1] = (uint64_t)v34;
  result = 1;
  v38[2] = (uint64_t)v35;
  return result;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v10[4];
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v12 = v2;
    __CocoaSet.makeIterator()();
    v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for StageDirtyState();
      do
      {
        *(_QWORD *)&v10[0] = v4;
        swift_dynamicCast();
        v2 = v12;
        if (*(_QWORD *)(v12 + 24) <= *(_QWORD *)(v12 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v12;
        }
        v5 = v11;
        Hasher.init(_seed:)();
        v6 = *(_QWORD *)(v5 + 24);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)(v10, v6);
        swift_bridgeObjectRelease();
        v7 = *(_QWORD *)(v5 + 16);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)((uint64_t)v10, v7);
        swift_bridgeObjectRelease();
        Hasher._finalize()();
        v8 = _HashTable.nextHole(atOrAfter:)();
        *(_QWORD *)(v2 + 56 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v5;
        ++*(_QWORD *)(v2 + 16);
        v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD v16[10];
  uint64_t v17;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v17 = v2;
    __CocoaSet.makeIterator()();
    v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for PrimDirtyState();
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        v2 = v17;
        if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v17;
        }
        v5 = v16[9];
        Hasher.init(_seed:)();
        (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 128))(v16);
        result = Hasher._finalize()();
        v7 = v2 + 56;
        v8 = -1 << *(_BYTE *)(v2 + 32);
        v9 = result & ~v8;
        v10 = v9 >> 6;
        if (((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          v11 = __clz(__rbit64((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v12 = 0;
          v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v14 = v10 == v13;
            if (v10 == v13)
              v10 = 0;
            v12 |= v14;
            v15 = *(_QWORD *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(_QWORD *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11) = v5;
        ++*(_QWORD *)(v2 + 16);
        v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD v16[10];
  uint64_t v17;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v17 = v2;
    __CocoaSet.makeIterator()();
    v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for PropertyDirtyState();
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        v2 = v17;
        if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v17;
        }
        v5 = v16[9];
        Hasher.init(_seed:)();
        (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 120))(v16);
        result = Hasher._finalize()();
        v7 = v2 + 56;
        v8 = -1 << *(_BYTE *)(v2 + 32);
        v9 = result & ~v8;
        v10 = v9 >> 6;
        if (((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          v11 = __clz(__rbit64((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v12 = 0;
          v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v14 = v10 == v13;
            if (v10 == v13)
              v10 = 0;
            v12 |= v14;
            v15 = *(_QWORD *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(_QWORD *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11) = v5;
        ++*(_QWORD *)(v2 + 16);
        v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for RIOPxrSdfPathRef(0);
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
        _CFObject.hash(into:)();
        result = Hasher._finalize()();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

unint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v22 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v18 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v18 >= v9)
          goto LABEL_21;
        v19 = v6[v18];
        ++v12;
        if (!v19)
        {
          v12 = v18 + 1;
          if (v18 + 1 >= v9)
            goto LABEL_21;
          v19 = v6[v12];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v9)
            {
LABEL_21:
              swift_release();
              v21 = 1 << *(_BYTE *)(v2 + 32);
              if (v21 > 63)
                bzero((void *)(v2 + 56), ((unint64_t)(v21 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v6 = -1 << v21;
              v1 = v22;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v19 = v6[v20];
            if (!v19)
            {
              while (1)
              {
                v12 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_27;
                if (v12 >= v9)
                  goto LABEL_21;
                v19 = v6[v12];
                ++v20;
                if (v19)
                  goto LABEL_20;
              }
            }
            v12 = v20;
          }
        }
LABEL_20:
        v8 = (v19 - 1) & v19;
        v14 = __clz(__rbit64(v19)) + (v12 << 6);
      }
      v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      v16 = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)(v23, v16);
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(v15 + 16);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)((uint64_t)v23, v17);
      swift_bridgeObjectRelease();
      Hasher._finalize()();
      result = _HashTable.nextHole(atOrAfter:)();
      *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * result) = v15;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  char v23[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Inputs.PropertyDelta>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v21 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v17 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v17 >= v8)
          goto LABEL_23;
        v18 = v21[v17];
        ++v11;
        if (!v18)
        {
          v11 = v17 + 1;
          if (v17 + 1 >= v8)
            goto LABEL_23;
          v18 = v21[v11];
          if (!v18)
          {
            v11 = v17 + 2;
            if (v17 + 2 >= v8)
              goto LABEL_23;
            v18 = v21[v11];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v8)
              {
LABEL_23:
                swift_release();
                v20 = 1 << *(_BYTE *)(v2 + 32);
                if (v20 > 63)
                  bzero(v21, ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v21 = -1 << v20;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v21[v19];
              if (!v18)
              {
                while (1)
                {
                  v11 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_29;
                  if (v11 >= v8)
                    goto LABEL_23;
                  v18 = v21[v11];
                  ++v19;
                  if (v18)
                    goto LABEL_22;
                }
              }
              v11 = v19;
            }
          }
        }
LABEL_22:
        v7 = (v18 - 1) & v18;
        v13 = __clz(__rbit64(v18)) + (v11 << 6);
      }
      v14 = *(_QWORD *)(v2 + 48) + 24 * v13;
      v15 = *(_QWORD *)(v14 + 16);
      v22 = *(_OWORD *)v14;
      Hasher.init(_seed:)();
      specialized Set.hash(into:)((uint64_t)v23, v22);
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
      _CFObject.hash(into:)();
      Hasher._finalize()();
      result = _HashTable.nextHole(atOrAfter:)();
      *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v16 = *(_QWORD *)(v4 + 48) + 24 * result;
      *(_OWORD *)v16 = v22;
      *(_QWORD *)(v16 + 16) = v15;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_31;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_31;
          v17 = v6[v12];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v9)
            {
LABEL_31:
              swift_release();
              v1 = v0;
              v27 = 1 << *(_BYTE *)(v2 + 32);
              if (v27 > 63)
                bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v6 = -1 << v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v17 = v6[v18];
            if (!v17)
            {
              while (1)
              {
                v12 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_37;
                if (v12 >= v9)
                  goto LABEL_31;
                v17 = v6[v12];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v12 = v18;
          }
        }
LABEL_21:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      (*(void (**)(char *))(*(_QWORD *)v19 + 128))(v28);
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v35 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v34 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    v36 = v2;
    while (1)
    {
      if (v7)
      {
        v37 = (v7 - 1) & v7;
        v38 = v10;
        v13 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v34)
          goto LABEL_33;
        v15 = v35[v14];
        v16 = v10 + 1;
        if (!v15)
        {
          v16 = v10 + 2;
          if (v10 + 2 >= v34)
            goto LABEL_33;
          v15 = v35[v16];
          if (!v15)
          {
            v16 = v10 + 3;
            if (v10 + 3 >= v34)
              goto LABEL_33;
            v15 = v35[v16];
            if (!v15)
            {
              v17 = v10 + 4;
              if (v10 + 4 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v33 = 1 << *(_BYTE *)(v2 + 32);
                if (v33 > 63)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v35[v17];
              if (!v15)
              {
                while (1)
                {
                  v16 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v16 >= v34)
                    goto LABEL_33;
                  v15 = v35[v16];
                  ++v17;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v16 = v10 + 4;
            }
          }
        }
LABEL_23:
        v37 = (v15 - 1) & v15;
        v38 = v16;
        v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 56 * v13;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      v24 = *(_QWORD *)(v18 + 32);
      v23 = *(_QWORD *)(v18 + 40);
      v25 = *(_BYTE *)(v18 + 48);
      Hasher.init(_seed:)();
      InputDescriptor.hash(into:)();
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v4 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v8 + 8 * v28);
        }
        while (v32 == -1);
        v11 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 56 * v11;
      *(_QWORD *)v12 = v19;
      *(_QWORD *)(v12 + 8) = v20;
      *(_QWORD *)(v12 + 16) = v21;
      *(_QWORD *)(v12 + 24) = v22;
      *(_QWORD *)(v12 + 32) = v24;
      *(_QWORD *)(v12 + 40) = v23;
      *(_BYTE *)(v12 + 48) = v25;
      ++*(_QWORD *)(v4 + 16);
      v2 = v36;
      v7 = v37;
      v10 = v38;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
      result = MEMORY[0x22E2F5A7C](*(_QWORD *)(v4 + 40), v18, 4);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      (*(void (**)(char *))(*(_QWORD *)v19 + 120))(v28);
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v27 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v7 = (unint64_t)(v4 + 63) >> 6;
    v8 = v2 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v6)
      {
        v12 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v7)
          goto LABEL_33;
        v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v7)
            goto LABEL_33;
          v15 = v27[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v7)
              goto LABEL_33;
            v15 = v27[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v7)
              {
LABEL_33:
                swift_release();
                v26 = 1 << *(_BYTE *)(v1 + 32);
                if (v26 > 63)
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v26;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_39;
                  if (v10 >= v7)
                    goto LABEL_33;
                  v15 = v27[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_23:
        v6 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      v17 = *(void **)(*(_QWORD *)(v1 + 48) + 8 * v13);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrSdfPathRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
      v18 = v17;
      _CFObject.hash(into:)();

      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v18;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v5 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v6 = ~(-1 << v4);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v1 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    v9 = v2 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v5[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v5[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v5[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v26 = 1 << *(_BYTE *)(v1 + 32);
                if (v26 > 63)
                  bzero((void *)(v1 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v5 = -1 << v26;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v16 = v5[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v5[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
      _CFObject.hash(into:)();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt8 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t i;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    for (i = v2; ; v2 = i)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_33;
        v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_33;
          v16 = v33[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_33;
            v16 = v33[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v31 = 1 << *(_BYTE *)(v2 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v32)
                    goto LABEL_33;
                  v16 = v33[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 40 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      v23 = *(_BYTE *)(v18 + 32);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      String.hash(into:)();
      String.hash(into:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v4 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 40 * v11;
      *(_QWORD *)v12 = v19;
      *(_QWORD *)(v12 + 8) = v20;
      *(_QWORD *)(v12 + 16) = v21;
      *(_QWORD *)(v12 + 24) = v22;
      *(_BYTE *)(v12 + 32) = v23;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[11];
  int64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v27[7] = *(_QWORD *)(v2 - 8);
  v27[8] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v27[6] = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v27[4] = *(_QWORD *)(v4 - 8);
  v27[5] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v27[3] = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v27[9] = *(_QWORD *)(v6 - 8);
  v27[10] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v27[2] = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  v31 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v27 - v12;
  v14 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
  v15 = static _SetStorage.resize(original:capacity:move:)();
  v32 = v14;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_26;
  v27[0] = v0;
  v16 = 1 << *(_BYTE *)(v32 + 32);
  v17 = *(_QWORD *)(v32 + 56);
  v29 = (_QWORD *)(v32 + 56);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v28 = (unint64_t)(v16 + 63) >> 6;
  swift_retain();
  v30 = v13;
  v27[1] = v8;
  if (v19)
  {
    v20 = __clz(__rbit64(v19));
    goto LABEL_20;
  }
  if (v28 > 1)
  {
    v21 = v29[1];
    v22 = 1;
    if (v21)
      goto LABEL_19;
    v22 = 2;
    if (v28 > 2)
    {
      v21 = v29[2];
      if (v21)
        goto LABEL_19;
      v22 = 3;
      if (v28 > 3)
      {
        v21 = v29[3];
        if (!v21)
        {
          v23 = 4;
          if (v28 > 4)
          {
            v21 = v29[4];
            if (v21)
            {
              v22 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
              {
                __break(1u);
                JUMPOUT(0x22BC28CC0);
              }
              if (v22 >= v28)
                break;
              v21 = v29[v22];
              ++v23;
              if (v21)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v20 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_20:
        outlined init with take of ImportSession.EvaluationFault(*(_QWORD *)(v32 + 48) + *(_QWORD *)(v31 + 72) * v20, (uint64_t)v13);
        Hasher.init(_seed:)();
        outlined init with copy of ImportSession.EvaluationFault((uint64_t)v13, (uint64_t)v10);
        v24 = (char *)&loc_22BC289E8 + *((int *)qword_22BC28CC0 + swift_getEnumCaseMultiPayload());
        __asm { BR              X9 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = (uint64_t *)v27[0];
  v25 = 1 << *(_BYTE *)(v32 + 32);
  if (v25 > 63)
    bzero(v29, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v25;
  *(_QWORD *)(v32 + 16) = 0;
LABEL_26:
  result = swift_release();
  *v1 = v15;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v5 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v6 = ~(-1 << v4);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v1 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    v9 = v2 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v5[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v5[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v5[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v26 = 1 << *(_BYTE *)(v1 + 32);
                if (v26 > 63)
                  bzero((void *)(v1 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v5 = -1 << v26;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v16 = v5[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v5[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrSdfPathRef(0);
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
      _CFObject.hash(into:)();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Stage.MissingReference>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v39 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v37 = v1;
    v38 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    v40 = v2;
    v41 = v4;
    while (1)
    {
      if (v7)
      {
        v42 = (v7 - 1) & v7;
        v44 = v10;
        v14 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          return result;
        }
        if (v15 >= v38)
          goto LABEL_44;
        v16 = v39[v15];
        v17 = v10 + 1;
        if (!v16)
        {
          v17 = v10 + 2;
          if (v10 + 2 >= v38)
            goto LABEL_44;
          v16 = v39[v17];
          if (!v16)
          {
            v17 = v10 + 3;
            if (v10 + 3 >= v38)
              goto LABEL_44;
            v16 = v39[v17];
            if (!v16)
            {
              v18 = v10 + 4;
              if (v10 + 4 >= v38)
              {
LABEL_44:
                swift_release();
                v1 = v37;
                v36 = 1 << *(_BYTE *)(v2 + 32);
                if (v36 > 63)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v39[v18];
              if (!v16)
              {
                while (1)
                {
                  v17 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_50;
                  if (v17 >= v38)
                    goto LABEL_44;
                  v16 = v39[v17];
                  ++v18;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v17 = v10 + 4;
            }
          }
        }
LABEL_23:
        v42 = (v16 - 1) & v16;
        v44 = v17;
        v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      v19 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 88 * v14);
      v20 = *(unsigned __int8 *)v19;
      v21 = v19[1];
      v22 = v19[2];
      v24 = v19[3];
      v23 = v19[4];
      v25 = v19[5];
      v26 = v19[6];
      v27 = v19[7];
      v45 = v19[9];
      v46 = v19[8];
      v47 = v19[10];
      Hasher.init(_seed:)();
      v43 = v20;
      Hasher._combine(_:)(v20);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v23)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        v28 = v24;
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = v24;
        Hasher._combine(_:)(0);
      }
      if (v26)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      if (v46)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v47)
          goto LABEL_32;
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v47)
        {
LABEL_32:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
      }
      Hasher._combine(_:)(0);
LABEL_35:
      result = Hasher._finalize()();
      v4 = v41;
      v29 = -1 << *(_BYTE *)(v41 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v8 + 8 * (v30 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v8 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        v12 = v47;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        v12 = v47;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_49;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v8 + 8 * v31);
        }
        while (v35 == -1);
        v11 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v13 = *(_QWORD *)(v41 + 48) + 88 * v11;
      v10 = v44;
      *(_BYTE *)v13 = v43;
      *(_QWORD *)(v13 + 8) = v21;
      *(_QWORD *)(v13 + 16) = v22;
      *(_QWORD *)(v13 + 24) = v28;
      *(_QWORD *)(v13 + 32) = v23;
      *(_QWORD *)(v13 + 40) = v25;
      *(_QWORD *)(v13 + 48) = v26;
      *(_QWORD *)(v13 + 56) = v27;
      *(_QWORD *)(v13 + 64) = v46;
      *(_QWORD *)(v13 + 72) = v45;
      *(_QWORD *)(v13 + 80) = v12;
      ++*(_QWORD *)(v41 + 16);
      v2 = v40;
      v7 = v42;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  __int128 v7[4];

  Hasher.init(_seed:)();
  v4 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v7, v4);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

{
  unint64_t result;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 128))(v5);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

{
  unint64_t result;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 120))(v5);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

{
  unint64_t result;

  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
  _CFObject.hash(into:)();
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  Swift::Int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22[4];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_15;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  v10 = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v22, v10);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v22, v11);
  swift_bridgeObjectRelease();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    type metadata accessor for StageDirtyState();
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
      v15 = *(_QWORD *)(v14 + 24);
      v16 = *(_QWORD *)(v6 + 24);
      swift_retain();
      if ((specialized static Set.== infix(_:_:)(v15, v16) & 1) != 0)
      {
        v17 = specialized static Set.== infix(_:_:)(*(_QWORD *)(v14 + 16), *(_QWORD *)(v6 + 16));
        result = swift_release();
        if ((v17 & 1) != 0)
        {
          result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {
        result = swift_release();
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = v6;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
  return result;
}

{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(Swift::Int);
  uint64_t v11;
  uint64_t (*v12)(Swift::Int);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE v17[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 128))(v17);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for PrimDirtyState();
    v10 = *(uint64_t (**)(Swift::Int))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 136);
    swift_retain();
    LOBYTE(v10) = v10(v5);
    result = swift_release();
    if ((v10 & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v12 = *(uint64_t (**)(Swift::Int))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 136);
        swift_retain();
        LOBYTE(v12) = v12(v5);
        result = swift_release();
        if ((v12 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(Swift::Int);
  uint64_t v11;
  uint64_t (*v12)(Swift::Int);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE v17[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 120))(v17);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for PropertyDirtyState();
    v10 = *(uint64_t (**)(Swift::Int))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 128);
    swift_retain();
    LOBYTE(v10) = v10(v5);
    result = swift_release();
    if ((v10 & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v12 = *(uint64_t (**)(Swift::Int))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 128);
        swift_retain();
        LOBYTE(v12) = v12(v5);
        result = swift_release();
        if ((v12 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

{
  uint64_t *v3;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v5 = (unsigned __int8 *)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_51;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_51;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Stage.MissingReference.hash(into:)();
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  v10 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v8 + 48);
    v13 = *v5;
    v14 = *((_QWORD *)v5 + 1);
    v15 = *((_QWORD *)v5 + 2);
    v46 = *((_QWORD *)v5 + 4);
    v47 = v15;
    v37 = *((_QWORD *)v5 + 5);
    v41 = *((_QWORD *)v5 + 6);
    v42 = ~v9;
    v35 = *((_QWORD *)v5 + 7);
    v38 = *((_QWORD *)v5 + 8);
    v39 = *((_QWORD *)v5 + 3);
    v34 = *((_QWORD *)v5 + 9);
    v36 = *((_QWORD *)v5 + 10);
    v48 = v14;
    do
    {
      v16 = (_QWORD *)(v12 + 88 * a2);
      if (*(unsigned __int8 *)v16 != v13)
        goto LABEL_11;
      result = v16[1];
      v17 = v16[3];
      v18 = v16[4];
      v20 = v16[5];
      v19 = v16[6];
      v21 = v16[8];
      v44 = v16[7];
      v43 = v16[9];
      v45 = v16[10];
      if (result != v14 || v16[2] != v15)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        v15 = v47;
        v14 = v48;
        v11 = v42;
        if ((result & 1) == 0)
          goto LABEL_11;
      }
      if (v18)
      {
        if (!v46)
          goto LABEL_11;
        if (v17 != v39 || v18 != v46)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = v47;
          v14 = v48;
          v11 = v42;
          if ((result & 1) == 0)
            goto LABEL_11;
        }
      }
      else if (v46)
      {
        goto LABEL_11;
      }
      if (v19)
      {
        if (!v41)
          goto LABEL_11;
        if (v20 != v37 || v19 != v41)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = v47;
          v14 = v48;
          v11 = v42;
          if ((result & 1) == 0)
            goto LABEL_11;
        }
      }
      else if (v41)
      {
        goto LABEL_11;
      }
      if (v21)
      {
        if (!v38)
          goto LABEL_11;
        if (v44 != v35 || v21 != v38)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = v47;
          v14 = v48;
          v11 = v42;
          if ((result & 1) == 0)
            goto LABEL_11;
        }
      }
      else if (v38)
      {
        goto LABEL_11;
      }
      if (v45)
      {
        if (v36)
        {
          if (v43 == v34 && v45 == v36
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                v15 = v47,
                v14 = v48,
                v11 = v42,
                (result & 1) != 0))
          {
LABEL_50:
            result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!v36)
      {
        goto LABEL_50;
      }
LABEL_11:
      a2 = (a2 + 1) & v11;
    }
    while (((*(_QWORD *)(v10 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_51:
  v26 = *v40;
  *(_QWORD *)(*v40 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v27 = *(_QWORD *)(v26 + 48) + 88 * a2;
  v28 = *((_OWORD *)v5 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v5;
  *(_OWORD *)(v27 + 16) = v28;
  *(_QWORD *)(v27 + 80) = *((_QWORD *)v5 + 10);
  v29 = *((_OWORD *)v5 + 4);
  v30 = *((_OWORD *)v5 + 2);
  *(_OWORD *)(v27 + 48) = *((_OWORD *)v5 + 3);
  *(_OWORD *)(v27 + 64) = v29;
  *(_OWORD *)(v27 + 32) = v30;
  v31 = *(_QWORD *)(v26 + 16);
  v32 = __OFADD__(v31, 1);
  v33 = v31 + 1;
  if (v32)
    __break(1u);
  else
    *(_QWORD *)(v26 + 16) = v33;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _OWORD v23[3];
  char v24;
  _BYTE v25[56];
  _BYTE v26[56];

  v4 = v3;
  outlined init with take of InputDescriptor(a1, (uint64_t)v26);
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v9 > v8)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v10 = *v4;
  outlined init with take of InputDescriptor(a1, (uint64_t)v25);
  Hasher.init(_seed:)();
  InputDescriptor.hash(into:)();
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = *(_QWORD *)(v10 + 48) + 56 * a2;
      v15 = *(_BYTE *)(v14 + 48);
      v16 = *(_OWORD *)(v14 + 16);
      v23[0] = *(_OWORD *)v14;
      v23[1] = v16;
      v23[2] = *(_OWORD *)(v14 + 32);
      v24 = v15;
      specialized static InputDescriptor.== infix(_:_:)((uint64_t)v23);
      if ((v17 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of InputDescriptor(a1, *(_QWORD *)(v18 + 48) + 56 * a2);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    *(_QWORD *)(v18 + 16) = v22;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  Swift::UInt8 v31[4];
  uint64_t v32;
  _QWORD v33[4];
  unsigned __int8 v34;

  outlined init with take of OutputDescriptor(a1, (uint64_t)v33);
  v7 = v33[0];
  v8 = v33[1];
  v9 = v33[3];
  v32 = v33[2];
  *(_DWORD *)v31 = v34;
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  v30 = a1;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_24;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_24;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(v31[0]);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v12 + 48);
    do
    {
      v18 = v17 + 40 * a2;
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      v21 = *(unsigned __int8 *)(v18 + 32);
      v22 = *(_QWORD *)v18 == v7 && *(_QWORD *)(v18 + 8) == v8;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v19 == v32 && v20 == v9)
        {
          if (*(_DWORD *)v31 == v21)
            goto LABEL_23;
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((*(_DWORD *)v31 ^ v21) & 1) == 0)
        {
LABEL_23:
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_24:
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of OutputDescriptor(v30, *(_QWORD *)(v24 + 48) + 40 * a2);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v14 = *v4;
  Hasher.init(_seed:)();
  ImportSession.EvaluationFault.hash(into:)();
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26 = v8;
    v17 = ~v16;
    v18 = *(_QWORD *)(v9 + 72);
    do
    {
      outlined init with copy of ImportSession.EvaluationFault(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v11);
      specialized static ImportSession.EvaluationFault.== infix(_:_:)((uint64_t)v11, a1);
      v20 = v19;
      outlined destroy of ImportSession.EvaluationFault((uint64_t)v11);
      if ((v20 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of ImportSession.EvaluationFault(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v9 + 72) * a2);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = MEMORY[0x22E2F5A7C](*(_QWORD *)(*v3 + 40), v5, 4);
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_DWORD *)(v10 + 4 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v12 + 48) + 4 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(void *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  Swift::Int v11;
  uint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
  v10 = a1;
  _CFObject.hash(into:)();

  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v14 = static _CFObject.== infix(_:_:)();

    if ((v14 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v15 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v17 = static _CFObject.== infix(_:_:)();

        if ((v17 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = a1;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  _CFObject.hash(into:)();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v13 = static _CFObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v15 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v16 = static _CFObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
  _CFObject.hash(into:)();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v13 = static _CFObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v15 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v16 = static _CFObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  char v31[72];

  v7 = *(_QWORD *)(*v5 + 16);
  v8 = *(_QWORD *)(*v5 + 24);
  if (v8 > v7 && (a5 & 1) != 0)
    goto LABEL_15;
  if ((a5 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v5;
  Hasher.init(_seed:)();
  specialized Set.hash(into:)((uint64_t)v31, a1);
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  _CFObject.hash(into:)();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a4 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      v13 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 24 * a4);
      v15 = *v13;
      v14 = (void *)v13[1];
      v16 = (void *)v13[2];
      swift_bridgeObjectRetain();
      v17 = v14;
      v18 = v16;
      if ((specialized static Set.== infix(_:_:)(v15, a1) & 1) != 0)
      {
        v19 = v17;
        v20 = a2;
        v21 = static _CFObject.== infix(_:_:)();

        swift_bridgeObjectRelease();
        if ((v21 & 1) != 0)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      a4 = (a4 + 1) & v12;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_15:
  v22 = *v27;
  *(_QWORD *)(*v27 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v23 = (uint64_t *)(*(_QWORD *)(v22 + 48) + 24 * a4);
  *v23 = a1;
  v23[1] = (uint64_t)a2;
  v23[2] = a3;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v26;
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v14)
      goto LABEL_26;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_26;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
        break;
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = (void *)swift_retain();
  }
  v19 = v17 + 2;
  if (v19 >= v14)
    goto LABEL_26;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v13)
      goto LABEL_28;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_28;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
      {
        v9 = v26 + 2;
        if (v26 + 2 >= v13)
          goto LABEL_28;
        v27 = *(_QWORD *)(v6 + 8 * v9);
        if (!v27)
          break;
      }
    }
LABEL_27:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 56 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(void **)(v17 + 32);
    v23 = *(_QWORD *)(v17 + 40);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    v25 = *(_BYTE *)(v17 + 48);
    *(_QWORD *)v24 = *(_QWORD *)v17;
    *(_QWORD *)(v24 + 8) = v19;
    *(_QWORD *)(v24 + 16) = v20;
    *(_QWORD *)(v24 + 24) = v21;
    *(_QWORD *)(v24 + 32) = v22;
    *(_QWORD *)(v24 + 40) = v23;
    *(_BYTE *)(v24 + 48) = v25;
    result = outlined copy of InputDescriptor(v18, v19, v20, v21, v22, v23, v25);
  }
  v28 = v26 + 3;
  if (v28 >= v13)
    goto LABEL_28;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_28;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
      {
        v9 = v23 + 2;
        if (v23 + 2 >= v13)
          goto LABEL_28;
        v24 = *(_QWORD *)(v6 + 8 * v9);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    LOBYTE(v17) = *(_BYTE *)(v17 + 32);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v22 = v19;
    *(_QWORD *)(v22 + 8) = v18;
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(v22 + 24) = v21;
    *(_BYTE *)(v22 + 32) = v17;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 3;
  if (v25 >= v13)
    goto LABEL_28;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for ImportSession.EvaluationFault(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    outlined init with copy of ImportSession.EvaluationFault(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    result = (void *)outlined init with take of ImportSession.EvaluationFault((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Stage.MissingReference>);
  v28 = v0;
  v1 = *v0;
  v2 = static _SetStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v28 = v3;
    return result;
  }
  result = (void *)(v2 + 56);
  v5 = v1 + 56;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 56), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v25 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v12)
      goto LABEL_28;
    v26 = *(_QWORD *)(v5 + 8 * v25);
    ++v8;
    if (!v26)
    {
      v8 = v25 + 1;
      if (v25 + 1 >= v12)
        goto LABEL_28;
      v26 = *(_QWORD *)(v5 + 8 * v8);
      if (!v26)
      {
        v8 = v25 + 2;
        if (v25 + 2 >= v12)
          goto LABEL_28;
        v26 = *(_QWORD *)(v5 + 8 * v8);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v11 = (v26 - 1) & v26;
    v14 = __clz(__rbit64(v26)) + (v8 << 6);
LABEL_12:
    v15 = 88 * v14;
    v16 = *(_QWORD *)(v1 + 48) + v15;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 24);
    v20 = *(_QWORD *)(v16 + 80);
    v21 = *(_QWORD *)(v3 + 48) + v15;
    v22 = *(_OWORD *)(v16 + 32);
    v23 = *(_OWORD *)(v16 + 48);
    v24 = *(_OWORD *)(v16 + 64);
    *(_BYTE *)v21 = *(_BYTE *)v16;
    *(_QWORD *)(v21 + 8) = v17;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = v19;
    *(_OWORD *)(v21 + 32) = v22;
    *(_OWORD *)(v21 + 48) = v23;
    *(_OWORD *)(v21 + 64) = v24;
    *(_QWORD *)(v21 + 80) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 3;
  if (v27 >= v12)
    goto LABEL_28;
  v26 = *(_QWORD *)(v5 + 8 * v27);
  if (v26)
  {
    v8 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v8 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v8 >= v12)
      goto LABEL_28;
    v26 = *(_QWORD *)(v5 + 8 * v8);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Inputs.PropertyDelta>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(void **)(v17 + 16);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    v24 = *(_OWORD *)v17;
    *(_OWORD *)v19 = *(_OWORD *)v17;
    *(_QWORD *)(v19 + 16) = v18;
    swift_bridgeObjectRetain();
    v20 = *((id *)&v24 + 1);
    result = v18;
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  __int128 v22[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StageDirtyState>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_22:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  v21 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain_n();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v18 >= v9)
      goto LABEL_21;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v9)
        goto LABEL_21;
      v19 = *(_QWORD *)(v6 + 8 * v12);
      if (!v19)
        break;
    }
LABEL_20:
    v8 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_7:
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    v16 = *(_QWORD *)(v15 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v22, v16);
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v15 + 16);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v22, v17);
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    result = _HashTable.nextHole(atOrAfter:)();
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * result) = v15;
    ++*(_QWORD *)(v4 + 16);
  }
  v20 = v18 + 2;
  if (v20 >= v9)
  {
LABEL_21:
    swift_release_n();
    v1 = v21;
    goto LABEL_22;
  }
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v12 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v9)
      goto LABEL_21;
    v19 = *(_QWORD *)(v6 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_24:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Inputs.PropertyDelta>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v21 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_7;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v8)
      goto LABEL_23;
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v8)
        goto LABEL_23;
      v19 = *(_QWORD *)(v21 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v8)
          goto LABEL_23;
        v19 = *(_QWORD *)(v21 + 8 * v11);
        if (!v19)
          break;
      }
    }
LABEL_22:
    v7 = (v19 - 1) & v19;
    v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_7:
    v14 = *(_QWORD *)(v2 + 48) + 24 * v13;
    v15 = *(void **)(v14 + 16);
    v22 = *(_OWORD *)v14;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    *((id *)&v22 + 1);
    v16 = v15;
    specialized Set.hash(into:)((uint64_t)v23, v22);
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    Hasher._finalize()();
    result = _HashTable.nextHole(atOrAfter:)();
    *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = *(_QWORD *)(v4 + 48) + 24 * result;
    *(_OWORD *)v17 = v22;
    *(_QWORD *)(v17 + 16) = v16;
    ++*(_QWORD *)(v4 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v8)
  {
LABEL_23:
    swift_release();
    v1 = v0;
    goto LABEL_24;
  }
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v8)
      goto LABEL_23;
    v19 = *(_QWORD *)(v21 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_32:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain_n();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_21;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v15 >= v27)
      goto LABEL_30;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_30;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v17 = v15 + 2;
        if (v17 >= v27)
        {
LABEL_30:
          result = swift_release_n();
          v1 = v0;
          goto LABEL_32;
        }
        v16 = *(_QWORD *)(v6 + 8 * v17);
        v11 = v17;
        if (!v16)
          break;
      }
    }
LABEL_20:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_21:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    v19 = *(void (**)(char *))(*(_QWORD *)v18 + 128);
    swift_retain();
    v19(v28);
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_30;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v33 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v34 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  v35 = v2;
  while (1)
  {
    if (v7)
    {
      v36 = (v7 - 1) & v7;
      v37 = v10;
      v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v34)
      goto LABEL_33;
    v15 = *(_QWORD *)(v33 + 8 * v14);
    v16 = v10 + 1;
    if (!v15)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v34)
        goto LABEL_33;
      v15 = *(_QWORD *)(v33 + 8 * v16);
      if (!v15)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v34)
          goto LABEL_33;
        v15 = *(_QWORD *)(v33 + 8 * v16);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v36 = (v15 - 1) & v15;
    v37 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 56 * v13;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(void **)(v18 + 32);
    v24 = *(_QWORD *)(v18 + 40);
    v25 = *(_BYTE *)(v18 + 48);
    Hasher.init(_seed:)();
    outlined copy of InputDescriptor(v19, v20, v21, v22, v23, v24, v25);
    InputDescriptor.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v4 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v8 + 8 * v28);
      }
      while (v32 == -1);
      v11 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 56 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v20;
    *(_QWORD *)(v12 + 16) = v21;
    *(_QWORD *)(v12 + 24) = v22;
    *(_QWORD *)(v12 + 32) = v23;
    *(_QWORD *)(v12 + 40) = v24;
    *(_BYTE *)(v12 + 48) = v25;
    ++*(_QWORD *)(v4 + 16);
    v2 = v35;
    v7 = v36;
    v10 = v37;
  }
  v17 = v10 + 4;
  if (v10 + 4 >= v34)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v33 + 8 * v17);
  if (v15)
  {
    v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v34)
      goto LABEL_33;
    v15 = *(_QWORD *)(v33 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    result = MEMORY[0x22E2F5A7C](*(_QWORD *)(v4 + 40), v18, 4);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v27)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    v19 = *(void (**)(char *))(*(_QWORD *)v18 + 120);
    swift_retain();
    v19(v28);
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v27)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    v19 = v18;
    _CFObject.hash(into:)();

    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v27)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    v19 = v18;
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt8 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t i;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v32 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  for (i = v2; ; v2 = i)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v32)
      goto LABEL_33;
    v16 = *(_QWORD *)(v31 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v32)
        goto LABEL_33;
      v16 = *(_QWORD *)(v31 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v32)
          goto LABEL_33;
        v16 = *(_QWORD *)(v31 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 40 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_BYTE *)(v18 + 32);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    String.hash(into:)();
    Hasher._combine(_:)(v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v4 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v8 + 8 * v26);
      }
      while (v30 == -1);
      v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 40 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v20;
    *(_QWORD *)(v12 + 16) = v21;
    *(_QWORD *)(v12 + 24) = v22;
    *(_BYTE *)(v12 + 32) = v23;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v31 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v32)
      goto LABEL_33;
    v16 = *(_QWORD *)(v31 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  _QWORD v26[11];
  _QWORD *v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v26[7] = *(_QWORD *)(v2 - 8);
  v26[8] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v26[6] = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v26[4] = *(_QWORD *)(v4 - 8);
  v26[5] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v26[3] = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v26[9] = *(_QWORD *)(v6 - 8);
  v26[10] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v26[2] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImportSession.EvaluationFault(0);
  v31 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v26 - v12;
  v14 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
  v15 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v14 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v26[0] = v0;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = *(_QWORD *)(v14 + 56);
  v27 = (_QWORD *)(v14 + 56);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v28 = (unint64_t)(v16 + 63) >> 6;
  swift_retain();
  v29 = v13;
  v30 = v14;
  v26[1] = v8;
  if (v19)
  {
    v20 = __clz(__rbit64(v19));
    goto LABEL_20;
  }
  if (v28 > 1)
  {
    v21 = v27[1];
    v22 = 1;
    if (v21)
      goto LABEL_19;
    v22 = 2;
    if (v28 > 2)
    {
      v21 = v27[2];
      if (v21)
        goto LABEL_19;
      v22 = 3;
      if (v28 > 3)
      {
        v21 = v27[3];
        if (!v21)
        {
          v23 = 4;
          if (v28 > 4)
          {
            v21 = v27[4];
            if (v21)
            {
              v22 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
              {
                __break(1u);
                JUMPOUT(0x22BC2E4D0);
              }
              if (v22 >= v28)
                break;
              v21 = v27[v22];
              ++v23;
              if (v21)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v20 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_20:
        outlined init with copy of ImportSession.EvaluationFault(*(_QWORD *)(v14 + 48) + *(_QWORD *)(v31 + 72) * v20, (uint64_t)v13);
        Hasher.init(_seed:)();
        outlined init with copy of ImportSession.EvaluationFault((uint64_t)v13, (uint64_t)v10);
        v24 = (char *)&loc_22BC2E218 + *((int *)qword_22BC2E4D0 + swift_getEnumCaseMultiPayload());
        __asm { BR              X9 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = (uint64_t *)v26[0];
LABEL_23:
  *v1 = v15;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RIOPxrSdfPathRef>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v27)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    v19 = v18;
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  _QWORD *v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Stage.MissingReference>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_45:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v35 = v1;
  v36 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v37 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  v38 = v2;
  v39 = v4;
  while (1)
  {
    if (v7)
    {
      v40 = (v7 - 1) & v7;
      v42 = v10;
      v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v14 >= v37)
      goto LABEL_43;
    v15 = *(_QWORD *)(v36 + 8 * v14);
    v16 = v10 + 1;
    if (!v15)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v37)
        goto LABEL_43;
      v15 = *(_QWORD *)(v36 + 8 * v16);
      if (!v15)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v37)
          goto LABEL_43;
        v15 = *(_QWORD *)(v36 + 8 * v16);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v40 = (v15 - 1) & v15;
    v42 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 88 * v13);
    v19 = *(unsigned __int8 *)v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = v18[4];
    v24 = v18[6];
    v25 = v18[8];
    v44 = v18[7];
    v45 = v18[5];
    v26 = v18[10];
    v43 = v18[9];
    Hasher.init(_seed:)();
    v41 = v19;
    Hasher._combine(_:)(v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v23)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      v27 = v22;
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = v22;
      Hasher._combine(_:)(0);
    }
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v25)
        goto LABEL_29;
    }
    else
    {
      Hasher._combine(_:)(0);
      if (v25)
      {
LABEL_29:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v26)
          goto LABEL_30;
        goto LABEL_33;
      }
    }
    Hasher._combine(_:)(0);
    if (v26)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
LABEL_33:
    Hasher._combine(_:)(0);
LABEL_34:
    result = Hasher._finalize()();
    v4 = v39;
    v28 = -1 << *(_BYTE *)(v39 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v8 + 8 * (v29 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v8 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v8 + 8 * v30);
      }
      while (v34 == -1);
      v11 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v39 + 48) + 88 * v11;
    v10 = v42;
    *(_BYTE *)v12 = v41;
    *(_QWORD *)(v12 + 8) = v20;
    *(_QWORD *)(v12 + 16) = v21;
    *(_QWORD *)(v12 + 24) = v27;
    *(_QWORD *)(v12 + 32) = v23;
    *(_QWORD *)(v12 + 40) = v45;
    *(_QWORD *)(v12 + 48) = v24;
    *(_QWORD *)(v12 + 56) = v44;
    *(_QWORD *)(v12 + 64) = v25;
    *(_QWORD *)(v12 + 72) = v43;
    *(_QWORD *)(v12 + 80) = v26;
    ++*(_QWORD *)(v39 + 16);
    v2 = v38;
    v7 = v40;
  }
  v17 = v10 + 4;
  if (v10 + 4 >= v37)
  {
LABEL_43:
    result = swift_release_n();
    v1 = v35;
    goto LABEL_45;
  }
  v15 = *(_QWORD *)(v36 + 8 * v17);
  if (v15)
  {
    v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v37)
      goto LABEL_43;
    v15 = *(_QWORD *)(v36 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized AudioFileGroupBuilder.stageSubscription.getter()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for primType != -1)
    swift_once();
  v0 = (void *)static AudioConstants.AudioFileGroup.primType;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v0;
  v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = MEMORY[0x24BEE4B08];
  v6 = MEMORY[0x24BEE4B08];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      v6 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    else
      v6 = MEMORY[0x24BEE4B08];
  }
  type metadata accessor for TypeNamePrimDirtyState();
  v7 = (_QWORD *)swift_allocObject();
  v7[5] = v4;
  swift_bridgeObjectRetain();
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v6, v5);
  swift_bridgeObjectRelease();
  v7[2] = v5;
  v7[3] = v6;
  v7[4] = v8;
  v15 = v5;
  swift_retain_n();
  specialized Set._Variant.insert(_:)(&v14, (uint64_t)v7);
  swift_release_n();
  swift_release();
  v9 = v15;
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v10 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v5, v9, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v11 + 32) = v10;
  v15 = v11;
  specialized Array._endMutation()();
  v12 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v15);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t outlined init with take of InputDescriptor(uint64_t a1, uint64_t a2)
{
  __swift_memcpy49_8(a2, a1);
  return a2;
}

id outlined copy of InputDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned __int8 a7)
{
  id result;

  switch(a7 >> 4)
  {
    case 0:
    case 1:
    case 7:
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 2:
    case 3:
    case 5:
    case 6:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = a5;
      break;
    case 4:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_5:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 8:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined retain of InputDescriptor(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

void outlined consume of InputDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned __int8 a7)
{
  switch(a7 >> 4)
  {
    case 0:
    case 1:
    case 7:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2:
    case 3:
    case 5:
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t SwiftObject;
  void *v10;
  void *v11;
  void **v12;
  void *v13;
  id v14;
  uint64_t ExtraAssetWithTag;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2)
    goto LABEL_22;
LABEL_3:
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v4 = 4;
  while (1)
  {
    v19 = v3;
    v5 = v4 - 4;
    if ((a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x22E2F57B8](v4 - 4, a1);
      v6 = v4 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_20;
    }
    else
    {
      swift_retain();
      v6 = v4 - 3;
      if (__OFADD__(v5, 1))
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    v7 = (id)RIOBuilderInputsGetImportSession();
    if (!v7)
      break;
    v8 = v7;
    v18 = v6;
    SwiftObject = RIOImportSessionGetSwiftObject();

    if (!SwiftObject)
      goto LABEL_24;
    swift_retain();
    v10 = (void *)RIOPxrUsdObjectCopyPath();
    v11 = (void *)RIOPxrSdfPathCopyString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v12 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v13 = *v12;
    String.utf8CString.getter();
    v14 = v13;
    ExtraAssetWithTag = RIOImportSessionGetExtraAssetWithTag();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    if (ExtraAssetWithTag)
    {
      v3 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      v17 = v3[2];
      v16 = v3[3];
      if (v17 >= v16 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v3);
      v3[2] = v17 + 1;
      v3[v17 + 4] = ExtraAssetWithTag;
    }
    else
    {
      v3 = v19;
    }
    ++v4;
    if (v18 == v2)
      goto LABEL_22;
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void partial apply for closure #3 in AudioFileGroupBuilder.run(inputs:)()
{
  uint64_t v0;

  closure #3 in AudioFileGroupBuilder.run(inputs:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_22BC2F85C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t outlined init with take of OutputDescriptor(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

uint64_t outlined retain of OutputDescriptor(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of OutputDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of Stage.MissingReference(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Stage.MissingReference(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of ImportSession.EvaluationFault(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ImportSession.EvaluationFault(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ImportSession.EvaluationFault(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ImportSession.EvaluationFault(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:)(float a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v7 = type metadata accessor for __RKEntityTriggerSpecification();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
  v12 = *(int *)(v11 + 48);
  v13 = &v10[*(int *)(v11 + 64)];
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, a3, v14);
  *(float *)&v10[v12] = a1;
  v15 = *MEMORY[0x24BDE68F0];
  v16 = type metadata accessor for __RKEntityProximityTrigger.ExitType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDE6BB0], v7);
  v17 = *a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    *a4 = v17;
  }
  v20 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  if (v20 >= v19 >> 1)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
    *a4 = v17;
  }
  *(_QWORD *)(v17 + 16) = v20 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v20, v10, v7);
}

uint64_t ToolsFoundations.Token.stringValue.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrTfTokenCopyString();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t static ToolsFoundations.Token.== infix(_:_:)()
{
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  return static _CFObject.== infix(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef;
  if (!lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef)
  {
    type metadata accessor for RIOPxrTfTokenRef(255);
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrTfTokenRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef;
  if (!lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef)
  {
    type metadata accessor for RIOPxrTfTokenRef(255);
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrTfTokenRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef);
  }
  return result;
}

uint64_t ToolsFoundations.Token.description.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (void *)RIOPxrTfTokenCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ToolsFoundations.Token.debugDescription.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *v0;
  v2 = (void *)RIOPxrTfTokenCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A6E656B6F543CLL;
}

void ToolsFoundations.Token.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int ToolsFoundations.Token.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToolsFoundations.Token()
{
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolsFoundations.Token()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (void *)RIOPxrTfTokenCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolsFoundations.Token()
{
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ToolsFoundations.Token()
{
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolsFoundations.Token()
{
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance ToolsFoundations.Token(void **a1, void **a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Comparable.<= infix(_:_:)(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v3 = a2;
  v4 = (void *)RIOPxrTfTokenCopyString();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = a1;
  v9 = (void *)RIOPxrTfTokenCopyString();
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (v5 == v10 && v7 == v12)
  {
    swift_bridgeObjectRelease_n();
    v13 = 1;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v14 ^ 1;
  }
  return v13 & 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance ToolsFoundations.Token(void **a1, void **a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Comparable.>= infix(_:_:)(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v3 = a1;
  v4 = (void *)RIOPxrTfTokenCopyString();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = a2;
  v9 = (void *)RIOPxrTfTokenCopyString();
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (v5 == v10 && v7 == v12)
  {
    swift_bridgeObjectRelease_n();
    v13 = 1;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v14 ^ 1;
  }
  return v13 & 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ToolsFoundations.Token(void **a1, void **a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Comparable.> infix(_:_:)(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = a2;
  v4 = (void *)RIOPxrTfTokenCopyString();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = a1;
  v9 = (void *)RIOPxrTfTokenCopyString();
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (v5 == v10 && v7 == v12)
    v13 = 0;
  else
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

id ToolsFoundations.Token.init(stringLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id result;

  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    result = (id)RIOPxrTfTokenEmpty();
    v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v2 = RIOPxrTfTokenCreateWithCString();
    result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

id protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance ToolsFoundations.Token@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id result;

  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    result = (id)RIOPxrTfTokenEmpty();
    v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v2 = RIOPxrTfTokenCreateWithCString();
    result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

id static ToolsFoundations.Token.Empty.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = (id)RIOPxrTfTokenEmpty();
  *a1 = result;
  return result;
}

id ToolsFoundations.Token.init(string:immortal:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id result;

  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    result = (id)RIOPxrTfTokenEmpty();
    v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v2 = RIOPxrTfTokenCreateWithCString();
    result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

id ToolsFoundations.Token.init(string:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id result;

  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    result = (id)RIOPxrTfTokenEmpty();
    v2 = (uint64_t)result;
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v2 = RIOPxrTfTokenCreateWithCString();
    result = (id)swift_release();
  }
  *a1 = v2;
  return result;
}

uint64_t ToolsFoundations.Token.isImmortal.getter()
{
  return RIOPxrTfTokenIsImmortal();
}

uint64_t ToolsFoundations.Token.isEmpty.getter()
{
  return RIOPxrTfTokenIsEmpty();
}

uint64_t ToolsFoundations.Token.count.getter()
{
  return RIOPxrTfTokenGetLength();
}

uint64_t *ToolsFoundations.Token.swap(_:)(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *result;
  *result = *v1;
  *v1 = v2;
  return result;
}

uint64_t specialized static ToolsFoundations.Token.< infix(_:_:)(id *a1, void **a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v2 = *a2;
  v3 = *a1;
  v4 = (void *)RIOPxrTfTokenCopyString();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = v2;
  v9 = (void *)RIOPxrTfTokenCopyString();
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (v5 == v10 && v7 == v12)
    v14 = 0;
  else
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14 & 1;
}

unint64_t lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for ToolsFoundations.Token, &type metadata for ToolsFoundations.Token);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for ToolsFoundations.Token, &type metadata for ToolsFoundations.Token);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for ToolsFoundations.Token, &type metadata for ToolsFoundations.Token);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token;
  if (!lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for ToolsFoundations.Token, &type metadata for ToolsFoundations.Token);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolsFoundations.Token and conformance ToolsFoundations.Token);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in ToolsFoundations.Token()
{
  return MEMORY[0x24BEE0D80];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in ToolsFoundations.Token()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in ToolsFoundations.Token()
{
  return MEMORY[0x24BEE0D88];
}

ValueMetadata *type metadata accessor for ToolsFoundations.Token()
{
  return &type metadata for ToolsFoundations.Token;
}

uint64_t closure #1 in closure #1 in AudioMixGroupBuilder.stageSubscription.getter()
{
  void *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t inited;
  uint64_t v16;
  unint64_t v18;

  if (one-time initialization token for gain != -1)
    swift_once();
  v0 = (void *)static AudioConstants.MixGroup.gain;
  type metadata accessor for NamedPropertyDirtyState();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = v0;
  v3 = MEMORY[0x24BEE4B08];
  v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x24BEE4B08]);

  v1[2] = v3;
  v1[3] = v4;
  v5 = one-time initialization token for speed;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = (void *)static AudioConstants.MixGroup.speed;
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = v6;
  v8 = v6;
  v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  v7[2] = v3;
  v7[3] = v9;
  v10 = one-time initialization token for mute;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = (void *)static AudioConstants.MixGroup.mute;
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = v11;
  v13 = v11;
  v14 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v13, v3);

  v12[2] = v3;
  v12[3] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5B0;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 48) = v12;
  v18 = inited;
  specialized Array._endMutation()();
  v16 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v18);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v16;
}

uint64_t AudioMixGroupBuilder.run(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ComponentByClass;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  int v11;
  char Float;
  id v13;
  void *v14;
  float v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  char Bool;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char isEscapingClosureAtFileLocation;
  _QWORD v29[6];
  int v30;
  float v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 aBlock;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v0 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v0, v1, &aBlock);
  if (!v37)
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __AssetRef.__as<A>(_:)();
  REAudioMixGroupsComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass)
    return swift_release();
  v3 = ComponentByClass;
  Inputs.prim.getter();
  v4 = (void *)RIOPxrUsdObjectCopyName();
  v5 = (void *)RIOPxrTfTokenCopyString();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  if (one-time initialization token for gain != -1)
    swift_once();
  *(_QWORD *)&aBlock = static AudioConstants.MixGroup.gain;
  v9 = (id)static AudioConstants.MixGroup.gain;
  v10 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  v11 = 0;
  if (v10)
  {
    LODWORD(aBlock) = 0;
    Float = RIOPxrVtValueGetFloat();

    if ((Float & 1) != 0)
      v11 = aBlock;
  }
  if (one-time initialization token for speed != -1)
    swift_once();
  *(_QWORD *)&aBlock = static AudioConstants.MixGroup.speed;
  v13 = (id)static AudioConstants.MixGroup.speed;
  v14 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  v15 = 1.0;
  if (v14)
  {
    LODWORD(aBlock) = 0;
    v16 = RIOPxrVtValueGetFloat();

    if ((v16 & 1) != 0)
      v15 = *(float *)&aBlock;
  }
  if (one-time initialization token for mute != -1)
    swift_once();
  *(_QWORD *)&aBlock = static AudioConstants.MixGroup.mute;
  v17 = (id)static AudioConstants.MixGroup.mute;
  v18 = (void *)specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)();

  v33 = v34;
  v19 = v8;
  if (v18 && (LOBYTE(aBlock) = 0, Bool = RIOPxrVtValueGetBool(), v18, (Bool & 1) != 0))
  {
    v21 = v6;
    v22 = aBlock;
  }
  else
  {
    v21 = v6;
    v22 = 0;
  }
  v24 = swift_allocObject();
  v25 = swift_weakInit();
  MEMORY[0x24BDAC7A8](v25);
  v29[2] = v24;
  v29[3] = v3;
  v29[4] = v21;
  v29[5] = v19;
  v30 = v11;
  v31 = v15;
  v32 = v22;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for closure #1 in AudioMixGroupBuilder.run(inputs:);
  *(_QWORD *)(v26 + 24) = v29;
  v38 = thunk for @callee_guaranteed () -> ()partial apply;
  v39 = v26;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v36 = thunk for @escaping @callee_guaranteed () -> ();
  v37 = &block_descriptor_10;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v27);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in AudioMixGroupBuilder.run(inputs:)(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t Strong;
  uint64_t MixGroupID;
  int v13;
  uint64_t v14;
  uint64_t result;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong
    || (MixGroupID = *(_QWORD *)(Strong + 24), v13 = *(unsigned __int8 *)(Strong + 32), swift_release(), v13 == 1))
  {
    MixGroupID = REAudioMixGroupsComponentCreateMixGroupID();
  }
  v14 = String.utf8CString.getter();
  MEMORY[0x22E2F5D7C](a4, MixGroupID, v14 + 32, a7 & 1, a1, a2);
  swift_release();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    *(_QWORD *)(result + 24) = MixGroupID;
    *(_BYTE *)(result + 32) = 0;
    return swift_release();
  }
  return result;
}

uint64_t AudioMixGroupBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ComponentByClass;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  char isEscapingClosureAtFileLocation;
  _QWORD v11[5];
  __int128 aBlock;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;

  v1 = v0;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v3 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v3, &aBlock);
  if (!v14)
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_9;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    result = swift_bridgeObjectRelease();
LABEL_10:
    *(_QWORD *)(v1 + 24) = 0;
    v6 = (_BYTE *)(v1 + 32);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  __AssetRef.__as<A>(_:)();
  REAudioMixGroupsComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    result = swift_release();
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_BYTE *)(v1 + 32);
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    result = swift_release();
    *(_QWORD *)(v1 + 24) = v5;
LABEL_11:
    *v6 = 1;
    return result;
  }
  v11[2] = MEMORY[0x24BDAC7A8](ComponentByClass);
  v11[3] = v5;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in AudioMixGroupBuilder.clear(inputs:);
  *(_QWORD *)(v8 + 24) = v11;
  v15 = partial apply for thunk for @callee_guaranteed () -> ();
  v16 = v8;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed () -> ();
  v14 = &block_descriptor_0;
  v9 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    *(_QWORD *)(v1 + 24) = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AudioMixGroupBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioMixGroupBuilder()
{
  return objc_opt_self();
}

uint64_t specialized AudioMixGroupBuilder.stageSubscription.getter()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;

  if (one-time initialization token for primType != -1)
    swift_once();
  v0 = (void *)static AudioConstants.MixGroup.primType;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v0;
  v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = closure #1 in closure #1 in AudioMixGroupBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE4B08];
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v9 + 32) = v6;
  v15 = v9;
  specialized Array._endMutation()();
  swift_retain();
  v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v15);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v11 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v10, 0);
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v12 + 32) = v11;
  v16 = v12;
  specialized Array._endMutation()();
  v13 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v16);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t specialized AudioMixGroupBuilder.inputDescriptors()()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5C0;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v5 = static EntityBuilder.OutputIdentifier;
  v4 = *(_QWORD *)algn_255BFA2C8;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_QWORD *)(inited + 56) = v4;
  *(_BYTE *)(inited + 80) = 112;
  *(_QWORD *)(inited + 88) = 0xD000000000000017;
  *(_QWORD *)(inited + 96) = 0x800000022BD06F10;
  *(_QWORD *)(inited + 104) = 0xD000000000000017;
  *(_QWORD *)(inited + 112) = 0x800000022BD06F10;
  *(_OWORD *)(inited + 120) = xmmword_22BD0C5D0;
  *(_BYTE *)(inited + 136) = 16;
  swift_bridgeObjectRetain();
  v6 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v6;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in AudioMixGroupBuilder.clear(inputs:)()
{
  return REAudioMixGroupsComponentRemoveGroup();
}

uint64_t sub_22BC314CC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t specialized AudioMixGroupBuilder.getAttribute(named:fromPrim:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t EmptyValue;

  if (RIOPxrUsdPrimHasAttribute())
  {
    v0 = RIOPxrUsdPrimCopyAttribute();
    type metadata accessor for AnyAttribute();
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = v0;
    EmptyValue = RIOPxrUsdAttributeCopyValue();
    if (!EmptyValue)
      EmptyValue = RIOPxrVtValueCreateEmptyValue();
    outlined consume of Result<AnyAttribute, Object.Error>(v1, 0);
  }
  else
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  return EmptyValue;
}

uint64_t sub_22BC315B8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioMixGroupBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in AudioMixGroupBuilder.run(inputs:)(*(float *)(v0 + 48), *(float *)(v0 + 52), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 56));
}

uint64_t sub_22BC315F0()
{
  return swift_deallocObject();
}

void outlined consume of Result<AnyAttribute, Object.Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    outlined consume of Object.Error(a1);
  else
    swift_release();
}

uint64_t static Utils.isCoreRIOBundleVersionValid()()
{
  return IsCoreRIOBundleVersionValid();
}

uint64_t closure #1 in static Utils.getDigest(of:salt:length:encoding:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v4 = swift_allocObject();
  v5 = MEMORY[0x24BEE4260];
  *(_OWORD *)(v4 + 16) = xmmword_22BD0C360;
  v6 = MEMORY[0x24BEE42B0];
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = v6;
  *(_BYTE *)(v4 + 32) = v3;
  result = String.init(format:_:)();
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5107_s9RealityIO5UtilsC9getDigest2of4salt6length8encodingSSSgSS_SSSiSS10FoundationE8EncodingVtFZSSs5UInt8VXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for SHA256Digest();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, v7, MEMORY[0x24BDC6300]);
  v8 = dispatch thunk of Sequence.underestimatedCount.getter();
  v36 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  v9 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  result = dispatch thunk of Sequence.makeIterator()();
  if ((v8 & 0x8000000000000000) == 0)
  {
    v11 = v35;
    if (v8)
    {
      v12 = v34;
      v30 = *(_QWORD *)(v34 + 16);
      v13 = v35;
      while (v30 != v13)
      {
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_24;
        if (v13 >= *(_QWORD *)(v12 + 16))
          goto LABEL_25;
        v31[0] = *(_BYTE *)(v12 + v13 + 32);
        v31[1] = 0;
        result = closure #1 in static Utils.getDigest(of:salt:length:encoding:)(v31, &v32);
        if (v1)
        {
LABEL_21:
          swift_release();
          goto LABEL_22;
        }
        v14 = v11;
        v16 = v32;
        v15 = v33;
        v36 = v9;
        v18 = *(_QWORD *)(v9 + 16);
        v17 = *(_QWORD *)(v9 + 24);
        if (v18 >= v17 >> 1)
        {
          v29 = v12;
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v12 = v29;
          v9 = v36;
        }
        *(_QWORD *)(v9 + 16) = v18 + 1;
        v19 = v9 + 16 * v18;
        *(_QWORD *)(v19 + 32) = v16;
        *(_QWORD *)(v19 + 40) = v15;
        ++v13;
        --v8;
        v11 = v14;
        if (!v8)
        {
          v35 = v13;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      v13 = v35;
LABEL_14:
      v20 = v34;
      v21 = *(_QWORD *)(v34 + 16);
      if (v13 == v21)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return v9;
      }
      while (v13 < v21)
      {
        v22 = *(_BYTE *)(v20 + 32 + v13);
        v35 = v13 + 1;
        v31[0] = v22;
        result = closure #1 in static Utils.getDigest(of:salt:length:encoding:)(v31, &v32);
        if (v1)
          goto LABEL_21;
        v23 = v32;
        v24 = v33;
        v36 = v9;
        v26 = *(_QWORD *)(v9 + 16);
        v25 = *(_QWORD *)(v9 + 24);
        if (v26 >= v25 >> 1)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          v9 = v36;
        }
        *(_QWORD *)(v9 + 16) = v26 + 1;
        v27 = v9 + 16 * v26;
        *(_QWORD *)(v27 + 32) = v23;
        *(_QWORD *)(v27 + 40) = v24;
        v13 = v35;
        v21 = *(_QWORD *)(v20 + 16);
        if (v35 == v21)
          goto LABEL_22;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static Utils.relativePath(base:path:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a3;
  v27 = a4;
  v24 = a1;
  v25 = a2;
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  if ((BidirectionalCollection<>.starts<A>(with:)() & 1) != 0)
  {
    v26 = a3;
    v27 = a4;
    v24 = a1;
    v25 = a2;
    v11 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.range<A>(of:options:range:locale:)();
    v13 = v12;
    v15 = v14;
    outlined destroy of Locale?((uint64_t)v10);
    if ((v15 & 1) != 0)
      v13 = 15;
    swift_bridgeObjectRetain();
    v16 = specialized Collection.subscript.getter(v13, a3, a4);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRelease();
    a3 = MEMORY[0x22E2F52FC](v16, v18, v20, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a3;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

uint64_t Utils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Utils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  if (v5)
    RIOPxrSdfLayerReplicationReceive();
  return swift_release();
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t specialized static Utils.getDigest(of:salt:length:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  unint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for SHA256();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for SHA256Digest();
  MEMORY[0x24BDAC7A8](v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a3;
  v8._object = a4;
  String.append(_:)(v8);
  String.data(using:allowLossyConversion:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v10 >> 60 != 15)
  {
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    dispatch thunk of HashFunction.init()();
    __asm { BR              X10 }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE5E60], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t type metadata accessor for Utils()
{
  return objc_opt_self();
}

uint64_t method lookup function for Utils()
{
  return swift_lookUpClassMethod();
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22E2F8890](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void one-time initialization function for OutputName()
{
  static ActionBuilder.OutputName = 0x736E6F69746341;
  *(_QWORD *)algn_255BF9F68 = 0xE700000000000000;
}

{
  static TimelineTrackAndActionBuilder.OutputName = 0x6B63617254;
  *(_QWORD *)algn_255BF9FE8 = 0xE500000000000000;
}

{
  static TimelineBuilder.OutputName = 0x656E696C656D6954;
  *(_QWORD *)algn_255BF9FF8 = 0xE900000000000073;
}

{
  static TriggerBuilder.OutputName = 0x7372656767697254;
  *(_QWORD *)algn_255BFA008 = 0xE800000000000000;
}

{
  static BehaviorBuilder.OutputName = 0x726F697661686542;
  *(_QWORD *)algn_255BFA0D8 = 0xE800000000000000;
}

uint64_t closure #1 in ActionBuilder.inputDescriptors()()
{
  id v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRetain();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (RIOPxrUsdPrimHasRelationship())
  {
    v1 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = v1;
    v3 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
    v4 = specialized Set.init<A>(_:)(v3);
    swift_bridgeObjectRelease();
    return v4;
  }
  else
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t closure #2 in ActionBuilder.inputDescriptors()()
{
  id v0;
  uint64_t PrimIfNeeded;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;

  if (!RIOPxrUsdStageHasPrimAtPrimPath())
    return 0;
  v0 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = PrimIfNeeded;
  if (String.count.getter() < 1)
    v3 = (id)RIOPxrTfTokenEmpty();
  else
    v3 = (id)RIOPxrTfTokenCreateWithCString();
  v4 = v3;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
    swift_release();

    return 0;
  }
  v7 = (void *)v6;
  v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {
    swift_release();

    return 0;
  }
  v9 = (void *)v8;

  v10 = v9;
  v11 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized closure #3 in ActionBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (!closure #2 in ActionBuilder.inputDescriptors()())
    return MEMORY[0x24BEE4B08];
  v2 = v0;
  v3 = v1;
  if (one-time initialization token for actionTypesUsingAffectedObjects != -1)
    swift_once();
  v4 = static ActionBuilder.actionTypesUsingAffectedObjects;
  swift_bridgeObjectRetain();
  v5 = specialized Set.contains(_:)(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    v6 = closure #1 in ActionBuilder.inputDescriptors()();
  else
    v6 = MEMORY[0x24BEE4B08];
  swift_release();
  return v6;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized closure #4 in ActionBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (closure #2 in ActionBuilder.inputDescriptors()())
  {
    if (v0 == 0x70756F7247 && v1 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        v2 = MEMORY[0x24BEE4B08];
        goto LABEL_9;
      }
    }
    v2 = closure #1 in ActionBuilder.inputDescriptors()();
LABEL_9:
    swift_release();
    return v2;
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t specialized closure #5 in ActionBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;

  if (!closure #2 in ActionBuilder.inputDescriptors()())
    return MEMORY[0x24BEE4B08];
  if (v0 == 0x746962724FLL && v1 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x24BEE4B08];
    }
  }
  if (String.count.getter() < 1)
    v3 = (id)RIOPxrTfTokenEmpty();
  else
    v3 = (id)RIOPxrTfTokenCreateWithCString();
  v4 = v3;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x24BEE4B08];
  }
  v5 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v7 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v6, 0);
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  v8 = *(id *)(v7 + 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v8;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v11 = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  return v11;
}

uint64_t specialized closure #6 in ActionBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;

  if (!closure #2 in ActionBuilder.inputDescriptors()())
    return MEMORY[0x24BEE4B08];
  if (v0 == 0x726F66736E617254 && v1 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x24BEE4B08];
    }
  }
  if (String.count.getter() < 1)
    v3 = (id)RIOPxrTfTokenEmpty();
  else
    v3 = (id)RIOPxrTfTokenCreateWithCString();
  v4 = v3;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x24BEE4B08];
  }
  v5 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v7 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v6, 0);
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  v8 = *(id *)(v7 + 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v8;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v11 = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  return v11;
}

uint64_t specialized closure #7 in ActionBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;

  if (!closure #2 in ActionBuilder.inputDescriptors()())
    return MEMORY[0x24BEE4B08];
  if (v0 == 0xD000000000000012 && v1 == 0x800000022BD06FD0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x24BEE4B08];
    }
  }
  if (String.count.getter() < 1)
    v3 = (id)RIOPxrTfTokenEmpty();
  else
    v3 = (id)RIOPxrTfTokenCreateWithCString();
  v4 = v3;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x24BEE4B08];
  }
  v5 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v7 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v6, 0);
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  v8 = *(id *)(v7 + 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v8;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v11 = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  return v11;
}

uint64_t specialized closure #8 in ActionBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id EmptyPath;
  uint64_t v13;
  uint64_t inited;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;

  v19 = *a2;
  v2 = closure #2 in ActionBuilder.inputDescriptors()();
  if (!v2)
    return MEMORY[0x24BEE4B08];
  v5 = v2;
  if (v3 == 0x635365676E616843 && v4 == 0xEB00000000656E65)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      swift_release();
      return MEMORY[0x24BEE4B08];
    }
  }
  if (String.count.getter() < 1)
    v7 = (id)RIOPxrTfTokenEmpty();
  else
    v7 = (id)RIOPxrTfTokenCreateWithCString();
  v8 = v7;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    v19 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x24BEE4B08];
  }
  v9 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v9;
  v11 = Relationship.targets.getter();
  if (*(_QWORD *)(v11 + 16))
  {
    EmptyPath = *(id *)(v11 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
  }
  outlined consume of Result<AnyAttribute, Object.Error>(v10, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = RIOPxrSdfPathCopyParentPath();
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v13 = v16;
  swift_setDeallocating();
  swift_arrayDestroy();
  v19 = v13;
  if (specialized static ActionBuilder.findSceneRoot(from:)(v5))
  {
    v17 = (void *)RIOPxrUsdObjectCopyPath();
    specialized Set._Variant.insert(_:)(&v18, v17);
    swift_release();

    swift_release();
    return v19;
  }
  else
  {

    swift_release();
  }
  return v13;
}

uint64_t ActionBuilder.run(inputs:)(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  void (*v17)(_OWORD *__return_ptr, __int128 *);
  uint64_t v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;

  v2 = v1;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v23 = 0;
LABEL_18:
    *(_QWORD *)&v25 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v23, 1);
    return specialized ActionBuilder.clear(inputs:)();
  }
  v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
LABEL_17:
    v23 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_18;
  }
  v7 = (void *)v6;
  v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {

    goto LABEL_17;
  }
  v9 = (void *)v8;

  swift_release();
  v10 = (void *)RIOPxrTfTokenCopyString();
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v9, 0);
  if (one-time initialization token for actionTypeToActionSpecificationsGenerator != -1)
    swift_once();
  swift_beginAccess();
  v14 = static ActionBuilder.actionTypeToActionSpecificationsGenerator;
  if (!*((_QWORD *)static ActionBuilder.actionTypeToActionSpecificationsGenerator + 2))
    goto LABEL_21;
  swift_bridgeObjectRetain();
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    swift_endAccess();
    swift_bridgeObjectRelease();
    return specialized ActionBuilder.clear(inputs:)();
  }
  v17 = *(void (**)(_OWORD *__return_ptr, __int128 *))(v14[7] + 16 * v15);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease_n();
  *(_QWORD *)&v25 = a1;
  v17(v24, &v25);
  swift_release();
  v18 = *(_QWORD *)&v24[0];
  swift_beginAccess();
  v19 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v24, &v25);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1)
      swift_once();
    v21 = static ActionBuilder.OutputName;
    v22 = *(_QWORD *)algn_255BF9F68;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    *(_QWORD *)&v25 = v18;
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)&v25, v21, v22);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for actionTypesUsingAffectedObjects()
{
  uint64_t inited;
  Swift::Int v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C630;
  *(_QWORD *)(inited + 32) = 0x6F69647541;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = 0x7A69736168706D45;
  *(_QWORD *)(inited + 56) = 0xE900000000000065;
  *(_QWORD *)(inited + 64) = 0x65736C75706D49;
  *(_QWORD *)(inited + 72) = 0xE700000000000000;
  strcpy((char *)(inited + 80), "LookAtCamera");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  strcpy((char *)(inited + 96), "Notification");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(_QWORD *)(inited + 112) = 0x746962724FLL;
  *(_QWORD *)(inited + 120) = 0xE500000000000000;
  strcpy((char *)(inited + 128), "PlayTimeline");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(_QWORD *)(inited + 144) = 1852403795;
  *(_QWORD *)(inited + 152) = 0xE400000000000000;
  strcpy((char *)(inited + 160), "StartAnimation");
  *(_BYTE *)(inited + 175) = -18;
  *(_QWORD *)(inited + 176) = 0x726F66736E617254;
  *(_QWORD *)(inited + 184) = 0xE90000000000006DLL;
  *(_QWORD *)(inited + 192) = 0xD000000000000012;
  *(_QWORD *)(inited + 200) = 0x800000022BD06FD0;
  *(_QWORD *)(inited + 208) = 0x696C696269736956;
  *(_QWORD *)(inited + 216) = 0xEA00000000007974;
  v1 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  result = swift_arrayDestroy();
  static ActionBuilder.actionTypesUsingAffectedObjects = v1;
  return result;
}

{
  uint64_t inited;
  Swift::Int v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C760;
  *(_QWORD *)(inited + 32) = 0x6564696C6C6F43;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = 0xD000000000000011;
  *(_QWORD *)(inited + 56) = 0x800000022BD07B00;
  *(_QWORD *)(inited + 64) = 0x7574736547706154;
  *(_QWORD *)(inited + 72) = 0xEA00000000006572;
  v1 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  result = swift_arrayDestroy();
  static TriggerBuilder.actionTypesUsingAffectedObjects = v1;
  return result;
}

void *one-time initialization function for actionTypeToActionSpecificationsGenerator()
{
  uint64_t inited;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (_:))>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C640;
  *(_QWORD *)(inited + 32) = 0x6F69647541;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0x635365676E616843;
  *(_QWORD *)(inited + 72) = 0xEB00000000656E65;
  *(_QWORD *)(inited + 80) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0x7A69736168706D45;
  *(_QWORD *)(inited + 104) = 0xE900000000000065;
  *(_QWORD *)(inited + 112) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0x70756F7247;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  *(_QWORD *)(inited + 144) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0x65736C75706D49;
  *(_QWORD *)(inited + 168) = 0xE700000000000000;
  *(_QWORD *)(inited + 176) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 184) = 0;
  strcpy((char *)(inited + 192), "LookAtCamera");
  *(_BYTE *)(inited + 205) = 0;
  *(_WORD *)(inited + 206) = -5120;
  *(_QWORD *)(inited + 208) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 216) = 0;
  strcpy((char *)(inited + 224), "Notification");
  *(_BYTE *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(_QWORD *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 248) = 0;
  *(_QWORD *)(inited + 256) = 0x746962724FLL;
  *(_QWORD *)(inited + 264) = 0xE500000000000000;
  *(_QWORD *)(inited + 272) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 280) = 0;
  strcpy((char *)(inited + 288), "PlayTimeline");
  *(_BYTE *)(inited + 301) = 0;
  *(_WORD *)(inited + 302) = -5120;
  *(_QWORD *)(inited + 304) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 312) = 0;
  *(_QWORD *)(inited + 320) = 1852403795;
  *(_QWORD *)(inited + 328) = 0xE400000000000000;
  *(_QWORD *)(inited + 336) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 344) = 0;
  strcpy((char *)(inited + 352), "StartAnimation");
  *(_BYTE *)(inited + 367) = -18;
  *(_QWORD *)(inited + 368) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 376) = 0;
  *(_QWORD *)(inited + 384) = 0x726F66736E617254;
  *(_QWORD *)(inited + 392) = 0xE90000000000006DLL;
  *(_QWORD *)(inited + 400) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 408) = 0;
  *(_QWORD *)(inited + 416) = 0xD000000000000012;
  *(_QWORD *)(inited + 424) = 0x800000022BD06FD0;
  *(_QWORD *)(inited + 432) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 440) = 0;
  *(_QWORD *)(inited + 448) = 0x696C696269736956;
  *(_QWORD *)(inited + 456) = 0xEA00000000007974;
  *(_QWORD *)(inited + 464) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 472) = 0;
  *(_QWORD *)(inited + 480) = 1953063255;
  *(_QWORD *)(inited + 488) = 0xE400000000000000;
  *(_QWORD *)(inited + 496) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification]);
  *(_QWORD *)(inited + 504) = 0;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  static ActionBuilder.actionTypeToActionSpecificationsGenerator = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])(a1, (uint64_t (*)(uint64_t))static ActionBuilder.generateAudioActionSpecifications(inputs:), a2);
}

{
  return specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])(a1, (uint64_t (*)(uint64_t))static ActionBuilder.generateGroupActionSpecifications(inputs:), a2);
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generateTransformActionSpecifications(inputs:)(*a1);
  *a2 = result;
  return result;
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generateTransformAnimationActionSpecifications(inputs:)(*a1);
  *a2 = result;
  return result;
}

void specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized static ActionBuilder.generateChangeSceneActionSpecifications(inputs:)(*a1);
  *a2 = v3;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized static ActionBuilder.generateEmphasizeActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generateImpulseActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generateLookAtCameraActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generateNotificationActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generatePlayTimelineActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generateSpinActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = specialized static ActionBuilder.generateStartAnimationActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = implicit closure #15 in variable initialization expression of static ActionBuilder.actionTypeToActionSpecificationsGenerator();
  *a1 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a1;
  type metadata accessor for ActionBuilder();
  result = a2(v5);
  *a3 = result;
  return result;
}

_QWORD *specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = specialized static ActionBuilder.generateOrbitActionSpecifications(inputs:)();
  *a1 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityActionSpecification])@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized static ActionBuilder.generateVisibilityActionSpecifications(inputs:)(*a1);
  *a2 = result;
  return result;
}

uint64_t implicit closure #15 in variable initialization expression of static ActionBuilder.actionTypeToActionSpecificationsGenerator()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v7;
  char v8;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v7);

  swift_release();
  v1 = v7;
  if ((v8 & 1) != 0)
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v1, 1);
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v3 = type metadata accessor for __RKEntityActionSpecification();
    v4 = *(_QWORD *)(v3 - 8);
    v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_22BD0C360;
    __RKWaitActionArguments.init(duration:)();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v4 + 104))(v2 + v5, *MEMORY[0x24BDE69B0], v3);
  }
  return v2;
}

uint64_t ActionBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActionBuilder()
{
  return objc_opt_self();
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance ActionBuilder()
{
  uint64_t inited;
  uint64_t v1;
  Swift::Int v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = *(_QWORD *)algn_255BF9F68;
  *(_QWORD *)(inited + 32) = static ActionBuilder.OutputName;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 56) = 0x800000022BD06F70;
  *(_BYTE *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t specialized ActionBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v23 = (unint64_t)v0;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v23 = inited;
  specialized Array._endMutation()();
  v3 = v23;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = MEMORY[0x24BEE4B08];
  v6 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  swift_retain();
  if (String.count.getter() < 1)
    v7 = (id)RIOPxrTfTokenEmpty();
  else
    v7 = (id)RIOPxrTfTokenCreateWithCString();
  v8 = v7;
  type metadata accessor for NamedPropertyDirtyState();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = v8;
  v10 = v8;
  v11 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v10, v5);

  v9[2] = v5;
  v9[3] = v11;
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v12 + 32) = v9;
  v23 = v12;
  specialized Array._endMutation()();
  v13 = v23;
  swift_retain();
  v14 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for PrimDirtyState();
  swift_allocObject();
  v15 = PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(v5, v14, 0);
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v16 + 32) = v15;
  v23 = v16;
  specialized Array._endMutation()();
  v17 = v23;
  swift_retain();
  v18 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v17);
  swift_bridgeObjectRelease();
  swift_release();
  swift_allocObject();
  v19 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v5, v18, 0);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_22BD0C650;
  *(_QWORD *)(v20 + 32) = v6;
  *(_QWORD *)(v20 + 40) = v19;
  v23 = v20;
  specialized Array._endMutation()();
  v21 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v23);
  swift_bridgeObjectRelease();
  swift_release();
  return v21;
}

uint64_t specialized ActionBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[6];
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t (*v10)(uint64_t, uint64_t *);
  uint64_t v11;
  unsigned __int8 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  unsigned __int8 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD v38[6];
  char v39;

  v6 = MEMORY[0x24BEE4B08];
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = static EntityBuilder.OutputName;
  v0 = *(_QWORD *)algn_255BED398;
  v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v38[0] = v1;
  v38[1] = v0;
  v38[2] = static EntityBuilder.OutputIdentifier;
  v38[3] = *(_QWORD *)algn_255BFA2C8;
  v38[4] = specialized closure #3 in ActionBuilder.inputDescriptors();
  v38[5] = 0;
  v39 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v32, (uint64_t)v38);
  outlined consume of InputDescriptor(v32, *((uint64_t *)&v32 + 1), v33, v34, v35, v36, v37);
  v32 = xmmword_22BD0C660;
  v33 = 0xD00000000000001FLL;
  v34 = 0x800000022BD06F70;
  v35 = specialized closure #4 in ActionBuilder.inputDescriptors();
  v36 = 0;
  v37 = -127;
  specialized Set._Variant.insert(_:)((uint64_t)&v26, (uint64_t)&v32);
  outlined consume of InputDescriptor(v26, *((uint64_t *)&v26 + 1), v27, v28, v29, v30, v31);
  v26 = xmmword_22BD0C670;
  v27 = static EntityBuilder.OutputIdentifier;
  v28 = *(_QWORD *)algn_255BFA2C8;
  v29 = specialized closure #5 in ActionBuilder.inputDescriptors();
  v30 = 0;
  v31 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v19, (uint64_t)&v26);
  outlined consume of InputDescriptor(v19, v20, v21, v22, v23, v24, v25);
  v19 = 0xD000000000000010;
  v20 = 0x800000022BD06F90;
  v21 = static EntityBuilder.OutputIdentifier;
  v22 = *(_QWORD *)algn_255BFA2C8;
  v23 = specialized closure #6 in ActionBuilder.inputDescriptors();
  v24 = 0;
  v25 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v13, (uint64_t)&v19);
  outlined consume of InputDescriptor(v13, *((uint64_t *)&v13 + 1), v14, v15, v16, v17, v18);
  v13 = xmmword_22BD0C680;
  v14 = static EntityBuilder.OutputIdentifier;
  v15 = *(_QWORD *)algn_255BFA2C8;
  v16 = specialized closure #7 in ActionBuilder.inputDescriptors();
  v17 = 0;
  v18 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v7, (uint64_t)&v13);
  outlined consume of InputDescriptor(v7, v8, v9, *((uint64_t *)&v9 + 1), v10, v11, v12);
  v7 = 0xD000000000000011;
  v8 = 0x800000022BD06FB0;
  v9 = xmmword_22BD0C690;
  v10 = specialized closure #8 in ActionBuilder.inputDescriptors();
  v11 = 0;
  v12 = -127;
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)&v7);
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t specialized ActionBuilder.clear(inputs:)()
{
  void *v0;
  id v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v6[2];

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v5, v6);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1)
      swift_once();
    v3 = static ActionBuilder.OutputName;
    v4 = *(_QWORD *)algn_255BF9F68;
    memset(v6, 0, sizeof(v6));
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)v6, v3, v4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void outlined consume of Result<Double, Object.Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    outlined consume of Object.Error(a1);
}

id one-time initialization function for infoID()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightReceiverBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static VirtualEnvironmentProbeComponentBuilder.infoID = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ModelSortGroupComponentBuilder.infoID = (uint64_t)result;
  return result;
}

id one-time initialization function for realityKitComponentTypeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightReceiverBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static VirtualEnvironmentProbeComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ModelSortGroupComponentBuilder.realityKitComponentTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for colorAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.colorAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.colorAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for intensityAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.intensityAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.intensityAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for realWorldProxyAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.realWorldProxyAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowStructName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowStructName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.shadowStructName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowEnabledAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowEnabledAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.shadowEnabledAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowDistanceAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowDistanceAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowDepthBiasAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowDepthBiasAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.shadowDepthBiasAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowCullModeAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowCullModeAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.shadowCullModeAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowProjectionTypeAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowProjectionTypeAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowZBoundsAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowZBoundsAttributeName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.shadowZBoundsAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for shadowOrthographicScaleAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static DirectionalLightComponentBuilder.shadowOrthographicScaleAttributeName = (uint64_t)result;
  return result;
}

uint64_t DirectionalLightComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];
  _QWORD aBlock[6];

  v2 = *v1;
  v7[2] = a1;
  v7[4] = v2;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in DirectionalLightComponentBuilder.run(inputs:);
  *(_QWORD *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_1;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in DirectionalLightComponentBuilder.run(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(int8x16_t *, _QWORD);
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  char v69;
  uint64_t v70;
  id v72;
  char v73;
  id v74;
  unint64_t v75;
  float v76;
  id v77;
  id v78;
  uint64_t v79;
  char v80;
  char v81;
  id v82;
  unint64_t v83;
  float v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int8x8_t v90;
  int8x8_t v91;
  char v92;
  unsigned int *v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(int8x16_t *, _QWORD);
  void (*v112)(int8x16_t *, _QWORD);
  id v113[3];
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  int8x16_t v131;
  uint64_t v132;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent.Shadow?);
  MEMORY[0x24BDAC7A8](v3);
  v122 = (char *)v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DirectionalLightComponent.Shadow();
  v123 = *(_QWORD *)(v5 - 8);
  v124 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v117 = (char *)v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  MEMORY[0x24BDAC7A8](v7);
  v116 = (uint64_t)v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v120 = (uint64_t)v113 - v10;
  v119 = type metadata accessor for DirectionalLightComponent.Shadow.ShadowProjectionType();
  v121 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v115 = (char *)v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v118 = (char *)v113 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent?);
  MEMORY[0x24BDAC7A8](v14);
  v125 = (char *)v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DirectionalLightComponent();
  v127 = *(_QWORD *)(v16 - 8);
  v128 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v126 = (char *)v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for __EntityRef();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (unint64_t)v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = Inputs.prim.getter();
  v23 = (void *)RIOPxrUsdObjectCopyName();
  v24 = (void *)RIOPxrTfTokenCopyString();
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  if (one-time initialization token for infoID != -1)
    swift_once();
  v28 = (id)static DirectionalLightComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_41:
    DirectionalLightComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  v114 = a2;
  v129 = v22;
  v29 = (void *)RIOPxrUsdPrimCopyAttribute();
  v30 = RIOPxrUsdAttributeCopyValue();
  if (!v30)
  {
    swift_bridgeObjectRelease();

    goto LABEL_41;
  }
  v31 = (void *)v30;
  v32 = RIOPxrVtValueCopyToken();
  if (!v32)
  {
    swift_bridgeObjectRelease();

    goto LABEL_41;
  }
  v33 = (void *)v32;

  v34 = (void *)RIOPxrTfTokenCopyString();
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  if (v35 == 0xD00000000000001BLL && v37 == 0x800000022BD070E0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
LABEL_13:
  if (one-time initialization token for OutputName != -1)
LABEL_84:
    swift_once();
  v39 = static EntityBuilder.OutputName;
  v40 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v39, v40, &v131);
  if (v132)
  {
    type metadata accessor for EntityProxy();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v41 = v130;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0)
      {
        DirectionalLightComponentBuilder.clear(inputs:)();
        swift_release();
        return swift_release();
      }
      v113[2] = v41;
      Inputs.prim.getter();
      if (one-time initialization token for colorAttributeName != -1)
        swift_once();
      v42 = (id)static DirectionalLightComponentBuilder.colorAttributeName;
      v43 = specialized Prim.attributeValue<A>(of:type:)();
      v45 = v44;
      v47 = v46;

      swift_release();
      v48.i32[0] = 0;
      v49.i32[0] = v47 & 1;
      v50 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v49, v48), 0);
      v49.i64[0] = v43;
      v49.i64[1] = v45;
      v131 = vbslq_s8(v50, v49, (int8x16_t)xmmword_22BD0C6D0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      lazy protocol witness table accessor for type Float and conformance Float();
      v51 = (void *)SIMD3<>.cgColor.getter();
      Inputs.prim.getter();
      if (one-time initialization token for intensityAttributeName != -1)
        swift_once();
      v52 = (id)static DirectionalLightComponentBuilder.intensityAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for realWorldProxyAttributeName != -1)
        swift_once();
      v53 = (id)static DirectionalLightComponentBuilder.realWorldProxyAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      *(_BYTE *)(v114 + 17) = 1;
      type metadata accessor for Entity();
      v54 = MEMORY[0x24BEE27D0];
      __AssetRef.__as<A>(_:)();
      v132 = v54;
      static __EntityRef.__fromCore(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v131);
      v55 = (void *)static Entity.__fromCore(_:)();
      (*(void (**)(unint64_t, unint64_t))(v19 + 8))(v21, v18);
      v56 = v51;
      v57 = (uint64_t)v126;
      DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)();
      v58 = v127;
      v59 = v128;
      v60 = v125;
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v125, v57, v128);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v60, 0, 1, v59);
      v113[1] = v55;
      v61 = (void (*)(int8x16_t *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v61(&v131, 0);
      specialized Builder.addComponent<A>(component:)(v57);
      v62 = Prim.children.getter();
      v21 = v62;
      if (v62 >> 62)
      {
        swift_bridgeObjectRetain();
        v25 = _CocoaArrayWrapper.endIndex.getter();
        if (v25)
          goto LABEL_25;
      }
      else
      {
        v25 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v25)
        {
LABEL_25:
          v113[0] = v56;
          type metadata accessor for RIOPxrTfTokenRef(0);
          v18 = v21 & 0xC000000000000001;
          v19 = 4;
          v27 = &unk_255BF9000;
          while (1)
          {
            v63 = v19 - 4;
            if (v18)
            {
              v64 = MEMORY[0x22E2F57B8](v19 - 4, v21);
              v65 = v19 - 3;
              if (__OFADD__(v63, 1))
                goto LABEL_83;
            }
            else
            {
              v64 = swift_retain();
              v65 = v19 - 3;
              if (__OFADD__(v63, 1))
              {
LABEL_83:
                __break(1u);
                goto LABEL_84;
              }
            }
            v125 = (char *)v64;
            v66 = (void *)RIOPxrUsdObjectCopyName();
            if (one-time initialization token for shadowStructName != -1)
              swift_once();
            v67 = (void *)static DirectionalLightComponentBuilder.shadowStructName;
            lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
            v68 = v67;
            v69 = static _CFObject.== infix(_:_:)();

            if ((v69 & 1) != 0)
              break;
            swift_release();
            ++v19;
            if (v65 == v25)
            {
              swift_bridgeObjectRelease_n();
              v56 = v113[0];
              goto LABEL_94;
            }
          }
          swift_bridgeObjectRelease_n();
          if (one-time initialization token for shadowEnabledAttributeName != -1)
            swift_once();
          v72 = (id)static DirectionalLightComponentBuilder.shadowEnabledAttributeName;
          v73 = specialized Prim.attributeValue<A>(of:type:)();

          v56 = v113[0];
          if (v73 == 2 || (v73 & 1) == 0)
          {
            swift_release();
            goto LABEL_94;
          }
          if (one-time initialization token for shadowDistanceAttributeName != -1)
            swift_once();
          v74 = (id)static DirectionalLightComponentBuilder.shadowDistanceAttributeName;
          v75 = specialized Prim.attributeValue<A>(of:type:)();

          if ((v75 & 0x100000000) != 0)
            v76 = 5.0;
          else
            v76 = *(float *)&v75;
          if (one-time initialization token for shadowDepthBiasAttributeName != -1)
            swift_once();
          v77 = (id)static DirectionalLightComponentBuilder.shadowDepthBiasAttributeName;
          specialized Prim.attributeValue<A>(of:type:)();

          if (one-time initialization token for shadowZBoundsAttributeName != -1)
            swift_once();
          v78 = (id)static DirectionalLightComponentBuilder.shadowZBoundsAttributeName;
          v79 = specialized Prim.attributeValue<A>(of:type:)();
          v81 = v80;

          if (one-time initialization token for shadowOrthographicScaleAttributeName != -1)
            swift_once();
          v82 = (id)static DirectionalLightComponentBuilder.shadowOrthographicScaleAttributeName;
          v83 = specialized Prim.attributeValue<A>(of:type:)();

          if ((v83 & 0x100000000) != 0)
            v84 = 1.0;
          else
            v84 = *(float *)&v83;
          if (one-time initialization token for shadowProjectionTypeAttributeName != -1)
            swift_once();
          v85 = (id)static DirectionalLightComponentBuilder.shadowProjectionTypeAttributeName;
          v86 = specialized Prim.attributeValue<A>(of:type:)();
          v88 = v87;

          v89 = v118;
          if (v88)
          {
            if (v86 == 0x6465786946 && v88 == 0xE500000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_69:
              v90.i32[0] = 0;
              v91.i32[0] = v81 & 1;
              *(int8x8_t *)v89 = vbsl_s8(vdup_lane_s8(vceq_s8(v91, v90), 0), (int8x8_t)v79, (int8x8_t)0x412000003C23D70ALL);
              *((float *)v89 + 2) = v84;
              v93 = (unsigned int *)MEMORY[0x24BDE6808];
              goto LABEL_71;
            }
            v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v92 & 1) != 0)
              goto LABEL_69;
          }
          *(float *)v89 = v76;
          v93 = (unsigned int *)MEMORY[0x24BDE6810];
LABEL_71:
          v94 = v120;
          (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v89, *v93, v119);
          if (one-time initialization token for shadowCullModeAttributeName != -1)
            swift_once();
          v95 = (id)static DirectionalLightComponentBuilder.shadowCullModeAttributeName;
          v96 = specialized Prim.attributeValue<A>(of:type:)();
          v98 = v97;

          if (v98)
          {
            if (v96 == 1801675074 && v98 == 0xE400000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v99 = (unsigned int *)MEMORY[0x24BDE7A70];
LABEL_78:
              v100 = *v99;
              v101 = type metadata accessor for MaterialParameterTypes.FaceCulling();
              v102 = *(_QWORD *)(v101 - 8);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 104))(v94, v100, v101);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v102 + 56))(v94, 0, 1, v101);
LABEL_91:
              v105 = v118;
              v106 = v119;
              (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v115, v118, v119);
              outlined init with copy of MaterialParameterTypes.FaceCulling?(v94, v116);
              v107 = (uint64_t)v117;
              DirectionalLightComponent.Shadow.init(shadowProjection:depthBias:cullMode:)();
              v109 = v122;
              v108 = v123;
              v110 = v124;
              (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v107, v124);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v110);
              v111 = (void (*)(int8x16_t *, _QWORD))dispatch thunk of Entity.components.modify();
              Entity.ComponentSet.subscript.setter();
              v111(&v131, 0);
              specialized Builder.addComponent<A>(component:)(v107);
              swift_release();

              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v110);
              outlined destroy of Any?(v120, &demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
              (*(void (**)(char *, uint64_t))(v121 + 8))(v105, v106);
              return (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v126, v128);
            }
            if (v96 == 0x746E6F7246 && v98 == 0xE500000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v99 = (unsigned int *)MEMORY[0x24BDE7A80];
              goto LABEL_78;
            }
            if (v96 == 1701736270 && v98 == 0xE400000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_89:
              v99 = (unsigned int *)MEMORY[0x24BDE7A78];
              goto LABEL_78;
            }
            v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v103 & 1) != 0)
              goto LABEL_89;
          }
          v104 = type metadata accessor for MaterialParameterTypes.FaceCulling();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v94, 1, 1, v104);
          goto LABEL_91;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_94:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v122, 1, 1, v124);
      v112 = (void (*)(int8x16_t *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v112(&v131, 0);
      swift_release();

      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v126, v128);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v131, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for lightComponent != -1)
    swift_once();
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v70 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v70 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v70 + 32) = v25;
  *(_QWORD *)(v70 + 40) = v27;
  os_log(_:dso:log:type:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t DirectionalLightComponentBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(__int128 *, _QWORD);
  uint64_t v16;
  void (*v17)(__int128 *, _QWORD);
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent.Shadow?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DirectionalLightComponent?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __EntityRef();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v11 = static EntityBuilder.OutputName;
  v12 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v11, v12, &v20);
  if (!v21)
  {
    outlined destroy of Any?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 17) & 1) == 0)
    return swift_release();
  type metadata accessor for Entity();
  v13 = MEMORY[0x24BEE27D0];
  __AssetRef.__as<A>(_:)();
  v21 = v13;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
  static Entity.__fromCore(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14 = type metadata accessor for DirectionalLightComponent();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  v15 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v15(&v20, 0);
  v16 = type metadata accessor for DirectionalLightComponent.Shadow();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v3, 1, 1, v16);
  v17 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v17(&v20, 0);
  swift_release();
  result = swift_release();
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

uint64_t DirectionalLightComponentBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DirectionalLightComponentBuilder()
{
  return objc_opt_self();
}

uint64_t specialized DirectionalLightComponentBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  if (one-time initialization token for realityKitComponentTypeName != -1)
    swift_once();
  v9 = static DirectionalLightComponentBuilder.realityKitComponentTypeName;
  v0 = (id)static DirectionalLightComponentBuilder.realityKitComponentTypeName;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()();
  v3 = v9;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v9 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized DirectionalLightComponentBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v5[6];
  unsigned __int8 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[6];
  char v15;

  v7 = MEMORY[0x24BEE4B08];
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = static EntityBuilder.OutputName;
  v0 = *(_QWORD *)algn_255BED398;
  v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v14[0] = v1;
  v14[1] = v0;
  v14[2] = static EntityBuilder.OutputIdentifier;
  v14[3] = *(_QWORD *)algn_255BFA2C8;
  v14[4] = 0;
  v14[5] = 0;
  v15 = 112;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v8, (uint64_t)v14);
  outlined consume of InputDescriptor(v8, *((uint64_t *)&v8 + 1), v9, v10, v11, v12, v13);
  if (String.count.getter() < 1)
    v3 = (id)RIOPxrTfTokenEmpty();
  else
    v3 = (id)RIOPxrTfTokenCreateWithCString();
  v8 = xmmword_22BD0C6E0;
  v9 = 0xD000000000000020;
  v10 = 0x800000022BD07090;
  v11 = v3;
  v12 = 1;
  v13 = 32;
  specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)&v8);
  outlined consume of InputDescriptor(v5[0], v5[1], v5[2], v5[3], (void *)v5[4], v5[5], v6);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t partial apply for closure #1 in DirectionalLightComponentBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in DirectionalLightComponentBuilder.run(inputs:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_22BC361A4()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE1538], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

uint64_t outlined init with copy of MaterialParameterTypes.FaceCulling?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  if (a3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v7 = i - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x22E2F57B8](i - 4, a3);
          v9 = i - 3;
          if (__OFADD__(v7, 1))
            goto LABEL_17;
        }
        else
        {
          v8 = *(_QWORD *)(a3 + 8 * i);
          swift_retain();
          v9 = i - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        v14 = v8;
        a1(&v13, &v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        v10 = swift_release();
        if (v13)
        {
          MEMORY[0x22E2F53D4](v10);
          if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return v15;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AnimationResourceC04animG0_Si11trackNumbertG_AHs5NeverOTg504_s10d5Kit17fg42CSiACIggyo_AC04animD0_Si11trackNumbertACs5K104OIegnrzr_TR03_s9a60IO15TimelineBuilderC3run6inputsyAA6InputsC_tFyyXEfU_0A3Kit17cd7CAJ_SitQ3U3_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    do
    {
      v4 += 16;
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

uint64_t one-time initialization function for timeline()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.timeline = result;
  return result;
}

id one-time initialization function for timingFunction()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ToolsFoundations.Token.timingFunction = (uint64_t)result;
  return result;
}

id one-time initialization function for targetPathAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ToolsFoundations.Token.targetPathAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for transformMode()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ToolsFoundations.Token.transformMode = (uint64_t)result;
  return result;
}

id one-time initialization function for pivotEntity()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ToolsFoundations.Token.pivotEntity = (uint64_t)result;
  return result;
}

id one-time initialization function for realityKitStruct()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ToolsFoundations.Token.realityKitStruct = (uint64_t)result;
  return result;
}

uint64_t closure #1 in TimelineTrackAndActionBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t inited;
  uint64_t v12;
  unint64_t v14;

  if (one-time initialization token for primType != -1)
    swift_once();
  v14 = static TimelineConstants.Timeline.primType;
  v0 = (id)static TimelineConstants.Timeline.primType;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  v2 = one-time initialization token for primType;
  swift_retain();
  if (v2 != -1)
    swift_once();
  v14 = static TimelineConstants.Track.primType;
  v3 = (id)static TimelineConstants.Track.primType;
  v4 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  v5 = one-time initialization token for primType;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v14 = static TimelineConstants.Action.primType;
  v6 = (id)static TimelineConstants.Action.primType;
  v7 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  v8 = one-time initialization token for realityKitStruct;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v14 = static ToolsFoundations.Token.realityKitStruct;
  v9 = (id)static ToolsFoundations.Token.realityKitStruct;
  v10 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C740;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v4;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v10;
  v14 = inited;
  specialized Array._endMutation()();
  v12 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v14);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v12;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance TimelineTrackAndActionBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v5;

  v0 = closure #1 in TimelineTrackAndActionBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v5 = inited;
  specialized Array._endMutation()();
  v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for Builder.inputDescriptors() in conformance TimelineTrackAndActionBuilder()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v5 = static EntityBuilder.OutputIdentifier;
  v4 = *(_QWORD *)algn_255BFA2C8;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_QWORD *)(inited + 56) = v4;
  *(_BYTE *)(inited + 80) = 112;
  swift_bridgeObjectRetain();
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v7 = v6;
  swift_setDeallocating();
  swift_arrayDestroy();
  return v7;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance TimelineTrackAndActionBuilder()
{
  uint64_t inited;
  uint64_t v1;
  Swift::Int v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = *(_QWORD *)algn_255BF9FE8;
  *(_QWORD *)(inited + 32) = static TimelineTrackAndActionBuilder.OutputName;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 0xD000000000000027;
  *(_QWORD *)(inited + 56) = 0x800000022BD071F0;
  *(_BYTE *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t closure #1 in TimelineBuilder.inputDescriptors()()
{
  id v0;
  uint64_t PrimIfNeeded;
  uint64_t inited;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!RIOPxrUsdStageHasPrimAtPrimPath())
    return MEMORY[0x24BEE4B08];
  v0 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = PrimIfNeeded;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_22BD0C5C0;
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v4 = (void *)static ToolsFoundations.Token.targetPathAttributeName;
  *(_QWORD *)(v3 + 32) = static ToolsFoundations.Token.targetPathAttributeName;
  v5 = one-time initialization token for pivotEntity;
  v6 = v4;
  if (v5 != -1)
    swift_once();
  v7 = (void *)static ToolsFoundations.Token.pivotEntity;
  *(_QWORD *)(v3 + 40) = static ToolsFoundations.Token.pivotEntity;
  v8 = v7;
  v9 = Prim.descendants.getter();
  v10 = specialized Sequence.flatMap<A>(_:)(v9, v3);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  v11 = specialized Set.init<A>(_:)(v10);
  swift_bridgeObjectRelease();
  swift_setDeallocating();

  return v11;
}

uint64_t TimelineBuilder.createActions(for:inputs:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  id v7;
  char v8;
  uint64_t result;
  id v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unint64_t v17;
  uint64_t v18;

  v3 = v2;
  v5 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (one-time initialization token for primType != -1)
    swift_once();
  v6 = (void *)static TimelineConstants.Track.primType;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v7 = v6;
  v8 = static _CFObject.== infix(_:_:)();

  result = 0;
  if ((v8 & 1) != 0)
  {
    if (String.count.getter() < 1)
      v10 = (id)RIOPxrTfTokenEmpty();
    else
      v10 = (id)RIOPxrTfTokenCreateWithCString();
    v11 = v10;
    v12 = specialized Prim.attributeValue<A>(of:type:)();

    if (v12 == 2 || (v12 & 1) != 0)
    {
      v13 = Prim.children.getter();
      swift_retain();
      swift_retain();
      v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO4PrimCG_Say0D3Kit17AnimationResourceCGs5NeverOTg503_s9d57IO15TimelineBuilderC13createActions3for6inputsSay0A3Kit17hi7CGSgAA4F22C_AA6InputsCtFAjMXEfU_AF0mN0CAF0W0CTf1cn_nTf4ngg_n(v13, v3, a2);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v18 = MEMORY[0x24BEE4AF8];
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v17 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v17);
        }
        swift_bridgeObjectRelease_n();
        return v18;
      }
      else
      {
        swift_bridgeObjectRelease();
        return MEMORY[0x24BEE4AF8];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TimelineBuilder.timingFunction(for:)(uint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  char v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v39;

  v2 = Prim.children.getter();
  v3 = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
LABEL_42:
    swift_bridgeObjectRelease_n();
LABEL_43:
    v24 = type metadata accessor for AnimationTimingFunction();
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v26 = a1;
    v27 = 1;
LABEL_44:
    v25(v26, v27, 1, v24);
    return;
  }
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_42;
LABEL_3:
  type metadata accessor for RIOPxrTfTokenRef(0);
  v6 = v5;
  v7 = 4;
  while (1)
  {
    v8 = v7 - 4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      MEMORY[0x22E2F57B8](v7 - 4, v3);
      v9 = v7 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_32;
    }
    else
    {
      swift_retain();
      v9 = v7 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    v10 = (void *)RIOPxrUsdObjectCopyName();
    if (one-time initialization token for timingFunction != -1)
      swift_once();
    v11 = (void *)static ToolsFoundations.Token.timingFunction;
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    v12 = v11;
    v13 = static _CFObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
      break;
    swift_release();
    ++v7;
    if (v9 == v4)
      goto LABEL_42;
  }
  swift_bridgeObjectRelease_n();
  if (String.count.getter() < 1)
    v14 = (id)RIOPxrTfTokenEmpty();
  else
    v14 = (id)RIOPxrTfTokenCreateWithCString();
  v15 = v14;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    goto LABEL_43;
  }
  v16 = (void *)RIOPxrUsdPrimCopyAttribute();
  v17 = RIOPxrUsdAttributeCopyValue();
  if (!v17)
  {
    swift_release();

    goto LABEL_43;
  }
  v18 = (void *)v17;
  v19 = RIOPxrVtValueCopyToken();
  if (!v19)
  {
    swift_release();

    goto LABEL_43;
  }
  v20 = (void *)v19;

  v39 = v20;
  v21 = (void *)RIOPxrTfTokenCopyString();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v22;

  if (v3 == 0x746C7561666564 && v6 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = a1;
    static AnimationTimingFunction.default.getter();
LABEL_24:

    swift_release();
    v24 = type metadata accessor for AnimationTimingFunction();
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v26 = v23;
    v27 = 0;
    goto LABEL_44;
  }
  if (v3 == 0x6E4965736165 && v6 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = a1;
    static AnimationTimingFunction.easeIn.getter();
    goto LABEL_24;
  }
LABEL_33:
  if (v3 == 0x754F6E4965736165 && v6 == 0xE900000000000074
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = a1;
    static AnimationTimingFunction.easeInOut.getter();
    goto LABEL_24;
  }
  if (v3 == 0x74754F65736165 && v6 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = a1;
    static AnimationTimingFunction.easeOut.getter();
    goto LABEL_24;
  }
  if (v3 == 0x7261656E696CLL && v6 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = a1;
    static AnimationTimingFunction.linear.getter();
    goto LABEL_24;
  }
  if (v3 == 0x7A65426369627563 && v6 == 0xEB00000000726569)
  {
    swift_bridgeObjectRelease();
LABEL_53:
    if (String.count.getter() < 1)
      v29 = (id)RIOPxrTfTokenEmpty();
    else
      v29 = (id)RIOPxrTfTokenCreateWithCString();
    v31 = v29;
    specialized Prim.attributeValue<A>(of:type:)();

    if (String.count.getter() < 1)
      v32 = (id)RIOPxrTfTokenEmpty();
    else
      v32 = (id)RIOPxrTfTokenCreateWithCString();
    v33 = v32;
    specialized Prim.attributeValue<A>(of:type:)();

    __asm { FMOV            V2.2S, #1.0 }
    v23 = a1;
    static AnimationTimingFunction.cubicBezier(controlPoint1:controlPoint2:)();
    goto LABEL_24;
  }
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
    goto LABEL_53;
  v30 = type metadata accessor for AnimationTimingFunction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a1, 1, 1, v30);
  swift_release();

}

uint64_t TimelineBuilder.transformMode(for:inputs:)@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  char v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;

  v4 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v67 - v8;
  v10 = Prim.children.getter();
  v11 = v10;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
      goto LABEL_3;
LABEL_51:
    swift_bridgeObjectRelease_n();
    goto LABEL_52;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12)
    goto LABEL_51;
LABEL_3:
  v68 = v9;
  v69 = a1;
  v67 = v6;
  v70 = a2;
  type metadata accessor for RIOPxrTfTokenRef(0);
  v14 = v13;
  v15 = v11 & 0xC000000000000001;
  v16 = 4;
  while (1)
  {
    v17 = v16 - 4;
    if (v15)
    {
      MEMORY[0x22E2F57B8](v16 - 4, v11);
      v18 = v16 - 3;
      if (__OFADD__(v17, 1))
        goto LABEL_33;
    }
    else
    {
      swift_retain();
      v18 = v16 - 3;
      if (__OFADD__(v17, 1))
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v19 = (void *)RIOPxrUsdObjectCopyName();
    if (one-time initialization token for transformMode != -1)
      swift_once();
    v20 = (void *)static ToolsFoundations.Token.transformMode;
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    v21 = v20;
    v22 = static _CFObject.== infix(_:_:)();

    if ((v22 & 1) != 0)
      break;
    swift_release();
    ++v16;
    if (v18 == v12)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease_n();
  if (String.count.getter() < 1)
    v23 = (id)RIOPxrTfTokenEmpty();
  else
    v23 = (id)RIOPxrTfTokenCreateWithCString();
  v24 = v23;
  v15 = v69;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

LABEL_28:
    a2 = v70;
LABEL_52:
    static FromToByAction.TransformMode.default.getter();
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
    v51 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
    v52 = a2;
    return v51(v52, 0, 1, v50);
  }
  v25 = (void *)RIOPxrUsdPrimCopyAttribute();
  v26 = RIOPxrUsdAttributeCopyValue();
  if (!v26)
  {
    swift_release();

    goto LABEL_28;
  }
  v27 = (void *)v26;
  v28 = RIOPxrVtValueCopyToken();
  if (!v28)
  {
    swift_release();

    goto LABEL_28;
  }
  v29 = (void *)v28;

  v11 = v29;
  v30 = (void *)RIOPxrTfTokenCopyString();
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v31;

  if (v12 == 0x746E65726170 && v14 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {

    swift_release();
    swift_bridgeObjectRelease();
    v32 = (unsigned int *)MEMORY[0x24BDE7600];
LABEL_24:
    v33 = *v32;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
    v35 = *(_QWORD *)(v34 - 8);
    v36 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 104))(v70, v33, v34);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
  }
  if (v12 == 0x6C61636F6CLL && v14 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {

    swift_release();
    swift_bridgeObjectRelease();
    v32 = (unsigned int *)MEMORY[0x24BDE75F0];
    goto LABEL_24;
  }
LABEL_34:
  if (v12 == 0x65766974616C6572 && v14 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (String.count.getter() < 1)
      v38 = (id)RIOPxrTfTokenEmpty();
    else
      v38 = (id)RIOPxrTfTokenCreateWithCString();
    v39 = v38;
    if (RIOPxrUsdPrimHasRelationship())
    {
      v40 = RIOPxrUsdPrimCopyRelationship();

      type metadata accessor for Relationship();
      v41 = (_QWORD *)swift_allocObject();
      v41[2] = v40;
      v42 = Relationship.targets.getter();
      outlined consume of Result<AnyAttribute, Object.Error>(v41, 0);
      if (*(_QWORD *)(v42 + 16))
      {
        v43 = *(id *)(v42 + 32);
        swift_bridgeObjectRelease();
        v71 = v43;
        v44 = v43;
        v45 = (uint64_t)v68;
        TimelineBuilder.createBindPath(from:inputs:)(&v71, v15, (uint64_t)v68);

        v54 = (uint64_t)v67;
        outlined init with copy of TimelineBuilder.BindPathWrapper(v45, (uint64_t)v67);
        v55 = type metadata accessor for BindTarget.EntityPath();
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55) == 1)
        {
          v57 = v70;
          static ActionEntityResolution.sourceEntity.getter();

          swift_release();
          outlined destroy of TimelineBuilder.BindPathWrapper(v45);
          v58 = *MEMORY[0x24BDE7610];
          v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
          v60 = *(_QWORD *)(v59 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 104))(v57, v58, v59);
          v48 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56);
          v49 = v57;
        }
        else
        {
          outlined destroy of TimelineBuilder.BindPathWrapper(v45);

          swift_release();
          v62 = v70;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v70, v54, v55);
          v63 = *MEMORY[0x24BDE7A60];
          v64 = type metadata accessor for ActionEntityResolution();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v62, v63, v64);
          v65 = *MEMORY[0x24BDE7610];
          v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
          v66 = *(_QWORD *)(v59 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 104))(v62, v65, v59);
          v48 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56);
          v49 = v62;
        }
        v47 = v59;
        return v48(v49, 0, 1, v47);
      }
      swift_bridgeObjectRelease();
    }
    else
    {

      v71 = 0;
      lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
      swift_willThrowTypedImpl();
      outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    }
    v46 = v70;
    static FromToByAction.TransformMode.default.getter();

    swift_release();
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
    v48 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56);
    v49 = v46;
    return v48(v49, 0, 1, v47);
  }
  if (v12 == 0x656E656373 && v14 == 0xE500000000000000)
  {

    swift_release();
    swift_bridgeObjectRelease();
LABEL_56:
    v32 = (unsigned int *)MEMORY[0x24BDE75F8];
    goto LABEL_24;
  }
  v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v53 & 1) != 0)
  {

    swift_release();
    goto LABEL_56;
  }
  v61 = v70;
  static FromToByAction.TransformMode.default.getter();

  swift_release();
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  v51 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
  v52 = v61;
  return v51(v52, 0, 1, v50);
}

uint64_t TimelineBuilder.createBindPath(rootEntity:targetEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v44 = a3;
  v5 = type metadata accessor for BindTarget.EntityPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget.EntityPath?);
  MEMORY[0x24BDAC7A8](v8);
  v43 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)&v42 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v42 - v13;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v42 - v16;
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v6 + 56);
  v50 = v6;
  v49((char *)&v42 - v16, 1, 1, v5, v15);
  type metadata accessor for Entity();
  swift_retain();
  v18 = MEMORY[0x24BEE4AF8];
  v46 = xmmword_22BD0C360;
  while (1)
  {
    v19 = HasHierarchy.parent.getter();
    if (v19)
    {
      v51 = a1;
      v52 = v19;
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x24BDE71E8], MEMORY[0x24BDE7200]);
      swift_retain();
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v20 & 1) != 0)
        break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = v46;
    *(_QWORD *)(v21 + 32) = dispatch thunk of Entity.name.getter();
    *(_QWORD *)(v21 + 40) = v22;
    v52 = v21;
    specialized Array.append<A>(contentsOf:)(v18);
    v18 = v52;
    v23 = HasHierarchy.parent.getter();
    if (!v23)
      break;
    v24 = v23;
    swift_release();
    a2 = v24;
  }
  v42 = a2;
  *(_QWORD *)&v46 = v18;
  v25 = *(_QWORD *)(v18 + 16);
  v26 = (uint64_t)v48;
  if (v25)
  {
    v27 = (uint64_t *)(v46 + 40);
    v28 = (uint64_t)v47;
    do
    {
      v32 = *(v27 - 1);
      v31 = *v27;
      v33 = (uint64_t)v17;
      outlined init with copy of BindTarget.EntityPath?((uint64_t)v17, v28);
      v34 = v5;
      v35 = v50;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v28, 1, v34) == 1)
      {
        swift_bridgeObjectRetain();
        outlined destroy of Any?(v28, &demangling cache variable for type metadata for BindTarget.EntityPath?);
        static BindTarget.entity(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        v29 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v45, v28, v34);
        swift_bridgeObjectRetain();
        MEMORY[0x22E2F4D50](v32, v31);
        swift_bridgeObjectRelease();
        v30 = v29;
        v26 = (uint64_t)v48;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v34);
      }
      v5 = v34;
      v27 += 2;
      v17 = (char *)v33;
      outlined destroy of Any?(v33, &demangling cache variable for type metadata for BindTarget.EntityPath?);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49)(v26, 0, 1, v5);
      outlined init with take of BindTarget.EntityPath?(v26, v33);
      --v25;
    }
    while (v25);
  }
  swift_release();
  swift_bridgeObjectRelease();
  v36 = v43;
  outlined init with take of BindTarget.EntityPath?((uint64_t)v17, v43);
  v37 = v50;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v36, 1, v5) == 1)
  {
    outlined destroy of Any?(v36, &demangling cache variable for type metadata for BindTarget.EntityPath?);
    v38 = 1;
    v39 = v44;
  }
  else
  {
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32);
    v39 = v44;
    v40(v44, v36, v5);
    v38 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49)(v39, v38, 1, v5);
}

void TimelineBuilder.createBindPath(from:inputs:)(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t SwiftObject;
  uint64_t EntityAtPrimPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD v37[2];
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __EntityRef?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __EntityRef();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v37 - v13;
  v15 = *a1;
  if (!*a1)
  {
    lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error();
    swift_allocError();
    *v31 = 0;
LABEL_14:
    swift_willThrow();
    return;
  }
  v39 = v12;
  v41 = a3;
  v16 = *(_QWORD *)(a2 + 56);
  v42 = v15;
  v40 = v16;
  v17 = (id)RIOBuilderInputsGetImportSession();
  if (!v17)
  {
    __break(1u);
    goto LABEL_22;
  }
  v18 = v17;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_retain();
  swift_beginAccess();
  EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
  if (!EntityAtPrimPath)
  {
    swift_release();
    lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error();
    swift_allocError();
    *v32 = v15;
    goto LABEL_14;
  }
  v21 = EntityAtPrimPath;
  v22 = type metadata accessor for Entity();
  v44 = MEMORY[0x24BEE27D0];
  *(_QWORD *)&v43 = v21;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v43);
  v37[1] = v22;
  v23 = static Entity.__fromCore(_:)();
  v38 = *(void (**)(char *, uint64_t))(v10 + 8);
  v38(v14, v9);
  swift_release();
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v24 = static EntityBuilder.OutputName;
  v25 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v24, v25, &v43);
  v26 = v41;
  if (!v44)
  {
    outlined destroy of Any?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_17;
  }
  v27 = v45;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, v27 + OBJC_IVAR____TtC9RealityIO11EntityProxy_reEntity, v9);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_17:
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for __EntityRef?);
    goto LABEL_18;
  }
  v28 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v29 = v39;
  v28((uint64_t)v39, v8, v9);
  static Entity.__fromCore(_:)();
  v30 = HasHierarchy.parent.getter();
  swift_release();
  if (v30)
  {
    TimelineBuilder.createBindPath(rootEntity:targetEntity:)(v30, v23, v26);

    swift_release();
    swift_release();
    v38(v29, v9);
    return;
  }
  v38(v29, v9);
LABEL_18:
  v33 = RIOBuilderInputsCopyPrimPath();
  if (v33)
  {
    v34 = (void *)v33;
    v45 = v33;
    SceneDescriptionFoundations.Path.deletingLastPathComponent()((uint64_t *)&v43);

    v35 = v43;
    lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error();
    swift_allocError();
    *v36 = v35;
    swift_willThrow();
    swift_release();

    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t TimelineBuilder.createAnimationAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  double v35;
  char v36;
  char v37;
  double v38;
  id v39;
  void *v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  void *v54;
  id v55;
  void *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  id v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  unint64_t v69;
  BOOL v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  char v78;
  void *v79;
  id v80;
  char v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  void *v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  char v98;
  _BYTE v99[4];
  int v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  void *v120;
  uint64_t v121;

  v117 = a2;
  v3 = type metadata accessor for PlayAnimationAction();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v99[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for ActionEntityResolution();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v109 = &v99[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v99[-v11];
  v13 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v13);
  v107 = &v99[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v119 = &v99[-v16];
  v17 = type metadata accessor for AnimationHandoffType();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v108 = &v99[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v20);
  v22 = &v99[-v21];
  v23 = String.count.getter();
  v115 = v8;
  v110 = v12;
  if (v23 < 1)
    v24 = (id)RIOPxrTfTokenEmpty();
  else
    v24 = (id)RIOPxrTfTokenCreateWithCString();
  v25 = v24;
  v106 = (void *)specialized Prim.attributeValue<A>(of:type:)();
  v27 = v26;

  if (!v27)
    return 0;
  v114 = v27;
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v28 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v29 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = v29;
    v111 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v30, 0);
  }
  else
  {

    v120 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    v111 = MEMORY[0x24BEE4AF8];
  }
  v32 = String.count.getter();
  v105 = v3;
  if (v32 < 1)
    v33 = (id)RIOPxrTfTokenEmpty();
  else
    v33 = (id)RIOPxrTfTokenCreateWithCString();
  v34 = v33;
  v35 = COERCE_DOUBLE(specialized Prim.attributeValue<A>(of:type:)());
  v37 = v36;

  if ((v37 & 1) != 0)
    v38 = 0.0;
  else
    v38 = v35;
  if (String.count.getter() < 1)
    v39 = (id)RIOPxrTfTokenEmpty();
  else
    v39 = (id)RIOPxrTfTokenCreateWithCString();
  v40 = v39;
  v41 = specialized Prim.attributeValue<A>(of:type:)();
  v43 = v42;

  if ((v43 & 1) != 0)
    v44 = 0;
  else
    v44 = v41;
  v45 = String.count.getter();
  v113 = v17;
  v102 = v7;
  if (v45 < 1)
    v46 = (id)RIOPxrTfTokenEmpty();
  else
    v46 = (id)RIOPxrTfTokenCreateWithCString();
  v47 = v46;
  v118 = v22;
  v112 = v18;
  v100 = specialized Prim.attributeValue<A>(of:type:)();

  v48 = Prim.children.getter();
  v49 = v48;
  v116 = a1;
  v104 = v4;
  v103 = v6;
  v101 = v44;
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v50)
      goto LABEL_28;
  }
  else
  {
    v50 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v50)
    {
LABEL_28:
      type metadata accessor for RIOPxrTfTokenRef(0);
      v51 = 4;
      while (1)
      {
        v52 = (_BYTE *)(v51 - 4);
        if ((v49 & 0xC000000000000001) != 0)
        {
          MEMORY[0x22E2F57B8](v51 - 4, v49);
          v53 = v51 - 3;
          if (__OFADD__(v52, 1))
            goto LABEL_82;
        }
        else
        {
          swift_retain();
          v53 = v51 - 3;
          if (__OFADD__(v52, 1))
          {
LABEL_82:
            __break(1u);
            goto LABEL_83;
          }
        }
        v54 = (void *)RIOPxrUsdObjectCopyName();
        v55 = String.count.getter() < 1
            ? (id)RIOPxrTfTokenEmpty()
            : (id)RIOPxrTfTokenCreateWithCString();
        v56 = v55;
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
        v57 = static _CFObject.== infix(_:_:)();

        if ((v57 & 1) != 0)
          break;
        swift_release();
        ++v51;
        if (v53 == v50)
          goto LABEL_39;
      }
      swift_bridgeObjectRelease_n();
      if (String.count.getter() < 1)
        v60 = (id)RIOPxrTfTokenEmpty();
      else
        v60 = (id)RIOPxrTfTokenCreateWithCString();
      v61 = v60;
      specialized Prim.attributeValue<A>(of:type:)();

      v62 = String.count.getter();
      v52 = v119;
      if (v62 < 1)
        v63 = (id)RIOPxrTfTokenEmpty();
      else
        v63 = (id)RIOPxrTfTokenCreateWithCString();
      v64 = v63;
      if (RIOPxrUsdPrimHasAttribute())
      {
        v65 = (void *)RIOPxrUsdPrimCopyAttribute();
        v66 = RIOPxrUsdAttributeCopyValue();
        if (v66)
        {
          v67 = (void *)v66;
          v68 = (void *)RIOPxrVtValueCopyToken();

          v69 = 0x800000022BD07950;
          v70 = 0x800000022BD07950 == 0xE700000000000000;
          if (!v68)
          {
            v72 = 0xD000000000000012;
            v52 = v119;
            goto LABEL_55;
          }
          v71 = (void *)RIOPxrTfTokenCopyString();
          v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v69 = v73;

          v70 = v69 == 0xE700000000000000;
          if (v72 != 0x65736F706D6F43)
          {
            v52 = v119;
            goto LABEL_55;
          }
          v52 = v119;
          if (v69 == 0xE700000000000000)
          {
LABEL_56:
            swift_bridgeObjectRelease();
            static AnimationHandoffType.compose.getter();
LABEL_61:
            swift_release();
            v59 = v112;
            v58 = v113;
            goto LABEL_62;
          }
LABEL_55:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_56;
          if (v72 == 1886352467 && v69 == 0xE400000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            static AnimationHandoffType.stop.getter();
            goto LABEL_61;
          }
          if (v72 == 0x6563616C706552 && v70 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            static AnimationHandoffType.replace(applyToAllLayers:)();
            goto LABEL_61;
          }
          if (v72 == 0xD000000000000012 && v69 == 0x800000022BD07970)
          {
            swift_bridgeObjectRelease();
            v59 = v112;
            v58 = v113;
            v74 = v117;
            v75 = v111;
            goto LABEL_84;
          }
LABEL_83:
          v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v59 = v112;
          v58 = v113;
          v74 = v117;
          v75 = v111;
          if ((v98 & 1) != 0)
LABEL_84:
            static AnimationHandoffType.snapshotAndReplace(applyToAllLayers:)();
          else
            static AnimationHandoffType.default.getter();
          swift_release();
          goto LABEL_63;
        }

      }
      else
      {
        v65 = v64;
      }

      v69 = 0x800000022BD07950;
      v70 = 0x800000022BD07950 == 0xE700000000000000;
      v72 = 0xD000000000000012;
      goto LABEL_55;
    }
  }
LABEL_39:
  swift_bridgeObjectRelease_n();
  static AnimationHandoffType.default.getter();
  v59 = v112;
  v58 = v113;
  v52 = v119;
LABEL_62:
  v74 = v117;
  v75 = v111;
LABEL_63:
  if (String.count.getter() < 1)
    v76 = (id)RIOPxrTfTokenEmpty();
  else
    v76 = (id)RIOPxrTfTokenCreateWithCString();
  v77 = v76;
  v78 = specialized Prim.attributeValue<A>(of:type:)();

  if (*(_QWORD *)(v75 + 16))
  {
    v79 = *(void **)(v75 + 32);
    v80 = v79;
  }
  else
  {
    v79 = 0;
  }
  swift_bridgeObjectRelease();
  v120 = v79;
  TimelineBuilder.createBindPath(from:inputs:)(&v120, v74, (uint64_t)v52);
  v81 = (v78 == 2) | v78;

  v82 = v107;
  outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v52, (uint64_t)v107);
  v83 = type metadata accessor for BindTarget.EntityPath();
  v84 = *(_QWORD *)(v83 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83) == 1)
  {
    v85 = v110;
    static ActionEntityResolution.sourceEntity.getter();
    v86 = v102;
    v87 = v115;
  }
  else
  {
    v85 = v110;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 32))(v110, v82, v83);
    v87 = v115;
    v86 = v102;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v115 + 104))(v85, *MEMORY[0x24BDE7A60], v102);
  }
  v120 = v106;
  v121 = v114;
  swift_bridgeObjectRetain();
  v88._countAndFlagsBits = 0xD000000000000018;
  v88._object = (void *)0x800000022BD07330;
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89 = v120;
  v90 = v121;
  v91 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v87 + 16);
  v92 = v109;
  v91(v109, v85, v86);
  v93 = v108;
  v94 = v118;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v108, v118, v58);
  v95 = v81 & 1;
  v96 = (uint64_t)v103;
  MEMORY[0x22E2F4F3C](v89, v90, v92, v101, v100 & 1, v95, v93, v38);
  v31 = specialized TimelineBuilder.handleLooping(action:for:)(v96, v116, (uint64_t (*)(_QWORD, double))MEMORY[0x24BDE79C0], MEMORY[0x24BDE79B8]);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v96, v105);
  (*(void (**)(_BYTE *, uint64_t))(v115 + 8))(v85, v86);
  outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v119);
  (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v94, v58);
  return v31;
}

uint64_t TimelineBuilder.createTimelineAction(for:inputs:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t result;
  void *v30;
  int HasPrimAtPrimPath;
  void *v32;
  id v33;
  void *PrimIfNeeded;
  uint64_t inited;
  id v36;
  void *v37;
  char v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  id v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  id v71;

  v68 = a2;
  v3 = type metadata accessor for AnimationHandoffType();
  MEMORY[0x24BDAC7A8](v3);
  v62 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PlayAnimationAction();
  v64 = *(_QWORD *)(v5 - 8);
  v65 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v63 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionEntityResolution();
  v66 = *(_QWORD *)(v7 - 8);
  v67 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v58 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimelineBuilder.BindPathWrapper?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v58 - v21;
  if (String.count.getter() < 1)
    v23 = (id)RIOPxrTfTokenEmpty();
  else
    v23 = (id)RIOPxrTfTokenCreateWithCString();
  v24 = v23;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    v69 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  v25 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v25;
  v27 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v26, 0);
  if (!*(_QWORD *)(v27 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v59 = v12;
  v60 = a1;
  v28 = *(id *)(v27 + 32);
  swift_bridgeObjectRelease();
  result = RIOBuilderInputsCopyStage();
  if (result)
  {
    v30 = (void *)result;
    HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

    if (!HasPrimAtPrimPath)
    {

      return 0;
    }
    v61 = v28;
    result = RIOBuilderInputsCopyStage();
    if (result)
    {
      v32 = (void *)result;
      v33 = (id)RIOPxrTfTokenEmpty();
      PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

      type metadata accessor for Prim();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = PrimIfNeeded;
      if (String.count.getter() < 1)
        v36 = (id)RIOPxrTfTokenEmpty();
      else
        v36 = (id)RIOPxrTfTokenCreateWithCString();
      v37 = v36;
      v58 = inited;
      v38 = specialized Prim.attributeValue<A>(of:type:)();

      if (v38 == 2 || (v38 & 1) != 0)
      {
        v39 = v61;
        v71 = v61;
        SceneDescriptionFoundations.Path.deletingLastPathComponent()((uint64_t *)&v69);
        v40 = v69;
        TimelineBuilder.createBindPath(from:inputs:)(&v69, (uint64_t)v68, (uint64_t)v15);
        v68 = v40;

        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
        outlined init with take of TimelineBuilder.BindPathWrapper((uint64_t)v15, (uint64_t)v22);
        outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v22, (uint64_t)v19);
        v42 = type metadata accessor for BindTarget.EntityPath();
        v43 = *(_QWORD *)(v42 - 8);
        v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v19, 1, v42);
        v45 = v59;
        if (v44 == 1)
        {
          static ActionEntityResolution.sourceEntity.getter();
          v47 = v66;
          v46 = v67;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v59, v19, v42);
          v47 = v66;
          v46 = v67;
          (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v45, *MEMORY[0x24BDE7A60], v67);
        }
        v48 = v39;
        v49 = (void *)RIOPxrSdfPathCopyString();
        v50 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v52 = v51;

        v69 = v50;
        v70 = v52;
        swift_bridgeObjectRetain();
        v53._object = (void *)0x800000022BD07330;
        v53._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54 = v69;
        v55 = v70;
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v9, v45, v46);
        v56 = v62;
        static AnimationHandoffType.compose.getter();
        v57 = (uint64_t)v63;
        MEMORY[0x22E2F4F3C](v54, v55, v9, 0, 1, 1, v56, 0.0);
        v41 = specialized TimelineBuilder.handleLooping(action:for:)(v57, v60, (uint64_t (*)(_QWORD, double))MEMORY[0x24BDE79C0], MEMORY[0x24BDE79B8]);

        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v57, v65);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
        outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v22);
        return v41;
      }

      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t default argument 6 of static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  type metadata accessor for AnimationFillMode();
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7878], MEMORY[0x24BDE7888]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode], MEMORY[0x24BEE12C8]);
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t TimelineBuilder.createAudioAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  double v29;
  char v30;
  char v31;
  double v32;
  id v33;
  void *v34;
  int v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v46[12];
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;

  v4 = type metadata accessor for PlayAudioAction();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v46[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ActionEntityResolution();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v46[-v12];
  v14 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v46[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v19 = &v46[-v18];
  v20 = String.count.getter();
  v50 = v5;
  v53 = a2;
  if (v20 < 1)
    v21 = (id)RIOPxrTfTokenEmpty();
  else
    v21 = (id)RIOPxrTfTokenCreateWithCString();
  v22 = v21;
  v23 = specialized Prim.attributeValue<A>(of:type:)();
  v25 = v24;

  if (!v25)
    return v25;
  v26 = String.count.getter();
  v48 = v23;
  v49 = v4;
  if (v26 < 1)
    v27 = (id)RIOPxrTfTokenEmpty();
  else
    v27 = (id)RIOPxrTfTokenCreateWithCString();
  v28 = v27;
  v29 = COERCE_DOUBLE(specialized Prim.attributeValue<A>(of:type:)());
  v31 = v30;

  if ((v31 & 1) != 0)
    v32 = 0.0;
  else
    v32 = v29;
  if (String.count.getter() < 1)
    v33 = (id)RIOPxrTfTokenEmpty();
  else
    v33 = (id)RIOPxrTfTokenCreateWithCString();
  v34 = v33;
  v35 = specialized Prim.attributeValue<A>(of:type:)();

  v47 = v35 == 2;
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v36 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    v54 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
LABEL_21:
    v40 = 0;
    goto LABEL_22;
  }
  v37 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = v37;
  v39 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v38, 0);
  if (!*(_QWORD *)(v39 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v40 = *(id *)(v39 + 32);
  swift_bridgeObjectRelease();
LABEL_22:
  v54 = v40;
  TimelineBuilder.createBindPath(from:inputs:)(&v54, v53, (uint64_t)v19);
  LODWORD(v53) = v47 | v35;
  outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v19, (uint64_t)v16);
  v41 = type metadata accessor for BindTarget.EntityPath();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v41) == 1)
  {
    static ActionEntityResolution.sourceEntity.getter();
    v44 = v51;
    v43 = v52;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 32))(v13, v16, v41);
    v44 = v51;
    v43 = v52;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v51 + 104))(v13, *MEMORY[0x24BDE7A60], v52);
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v10, v13, v43);
  MEMORY[0x22E2F4EB8](v10, v48, v25, v53 & 1, v32);
  v25 = specialized TimelineBuilder.handleLooping(action:for:)((uint64_t)v7, a1, (uint64_t (*)(_QWORD, double))MEMORY[0x24BDE7770], MEMORY[0x24BDE7768]);

  (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v7, v49);
  (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v13, v43);
  outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v19);
  return v25;
}

uint64_t TimelineBuilder.createEmphasizeAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  int HasAttribute;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  void *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;

  v90 = a2;
  v103 = a1;
  v2 = type metadata accessor for AnimationRepeatMode();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v86 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for AnimationFillMode();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v93 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for BindTarget();
  v9 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v92 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for EmphasizeAction();
  v96 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for EmphasizeAction.EmphasisAnimationStyle();
  v98 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v99 = (char *)&v82 - v17;
  v18 = type metadata accessor for EmphasizeAction.EmphasisMotionType();
  v102 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v101 = (char *)&v82 - v22;
  if (String.count.getter() < 1)
    v23 = (id)RIOPxrTfTokenEmpty();
  else
    v23 = (id)RIOPxrTfTokenCreateWithCString();
  v24 = v23;
  v87 = v3;
  v88 = v2;
  v97 = v11;
  HasAttribute = RIOPxrUsdPrimHasAttribute();
  v89 = v9;
  if (!HasAttribute)
  {
    v26 = v24;
LABEL_14:

    v95 = 0;
    goto LABEL_15;
  }
  v26 = (void *)RIOPxrUsdPrimCopyAttribute();
  v27 = RIOPxrUsdAttributeCopyValue();
  if (!v27)
  {

    goto LABEL_14;
  }
  v28 = (void *)v27;
  v94 = v13;
  v29 = (void *)RIOPxrVtValueCopyToken();

  if (!v29)
  {
    v95 = 0;
    v13 = v94;
    goto LABEL_15;
  }
  v30 = v29;
  v31 = (void *)RIOPxrTfTokenCopyString();
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = v33;
  v95 = v30;

  if (!v34)
    goto LABEL_88;
  v13 = v94;
  if (v32 == 7368560 && v34 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    v35 = (unsigned int *)MEMORY[0x24BDE76E0];
    goto LABEL_16;
  }
  if (v32 == 0x6B6E696C62 && v34 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v35 = (unsigned int *)MEMORY[0x24BDE76F8];
    goto LABEL_16;
  }
  if (v32 == 0x65636E756F62 && v34 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v35 = (unsigned int *)MEMORY[0x24BDE7710];
    goto LABEL_16;
  }
  if (v32 == 1885957222 && v34 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v35 = (unsigned int *)MEMORY[0x24BDE76E8];
    goto LABEL_16;
  }
  if (v32 == 0x74616F6C66 && v34 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v35 = (unsigned int *)MEMORY[0x24BDE7700];
    goto LABEL_16;
  }
  if (v32 == 0x656C6767696ALL && v34 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v35 = (unsigned int *)MEMORY[0x24BDE7718];
    goto LABEL_16;
  }
  if (v32 == 0x65736C7570 && v34 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v35 = (unsigned int *)MEMORY[0x24BDE7708];
    v13 = v94;
    goto LABEL_16;
  }
  if (v32 != 1852403827 || v34 != 0xE400000000000000)
  {
    v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v81 & 1) != 0)
      goto LABEL_87;
LABEL_88:
    v13 = v94;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_87:
  v35 = (unsigned int *)MEMORY[0x24BDE76F0];
  v13 = v94;
LABEL_16:
  (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, *v35, v18);
  if (String.count.getter() < 1)
    v36 = (id)RIOPxrTfTokenEmpty();
  else
    v36 = (id)RIOPxrTfTokenCreateWithCString();
  v37 = v36;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    v38 = v37;
LABEL_29:

    v94 = 0;
LABEL_30:
    v50 = (uint64_t)v93;
LABEL_34:
    v49 = (unsigned int *)MEMORY[0x24BDE7730];
    goto LABEL_35;
  }
  v38 = (void *)RIOPxrUsdPrimCopyAttribute();
  v39 = RIOPxrUsdAttributeCopyValue();
  if (!v39)
  {

    goto LABEL_29;
  }
  v40 = (void *)v39;
  v41 = v8;
  v83 = v18;
  v42 = v13;
  v43 = (void *)RIOPxrVtValueCopyToken();

  if (!v43)
  {
    v94 = 0;
    goto LABEL_33;
  }
  v44 = v43;
  v45 = (void *)RIOPxrTfTokenCopyString();
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  v94 = v44;
  if (!v48)
  {
LABEL_33:
    v13 = v42;
    v18 = v83;
    v50 = (uint64_t)v93;
    v8 = v41;
    goto LABEL_34;
  }
  v13 = v42;
  if (v46 == 0x6369736162 && v48 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v49 = (unsigned int *)MEMORY[0x24BDE7730];
    v18 = v83;
    v50 = (uint64_t)v93;
    v8 = v41;
    goto LABEL_35;
  }
  v8 = v41;
  if (v46 == 0x6C756679616C70 && v48 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v49 = (unsigned int *)MEMORY[0x24BDE7738];
    v18 = v83;
    v50 = (uint64_t)v93;
    goto LABEL_35;
  }
  v18 = v83;
  if (v46 != 1684826487 || v48 != 0xE400000000000000)
  {
    v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v80 & 1) != 0)
      goto LABEL_66;
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
LABEL_66:
  v49 = (unsigned int *)MEMORY[0x24BDE7728];
  v50 = (uint64_t)v93;
LABEL_35:
  v51 = v98;
  v52 = v99;
  v53 = v100;
  (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v99, *v49, v100);
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v20, v101, v18);
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v15, v52, v53);
  EmphasizeAction.init(motionType:style:isAdditive:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1)
    v54 = (id)RIOPxrTfTokenEmpty();
  else
    v54 = (id)RIOPxrTfTokenCreateWithCString();
  v55 = v54;
  specialized Prim.attributeValue<A>(of:type:)();

  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v56 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v57 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v58 = (_QWORD *)swift_allocObject();
    v58[2] = v57;
    v59 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v58, 0);
    if (*(_QWORD *)(v59 + 16))
    {
      v60 = *(void **)(v59 + 32);
      v61 = v60;
    }
    else
    {
      v60 = 0;
    }
    v64 = v91;
    swift_bridgeObjectRelease();
    v65 = v92;
    closure #1 in TimelineBuilder.createEmphasizeAction(for:inputs:)(v60, v90, v92);
    v83 = v18;
    v103 = type metadata accessor for AnimationResource();
    v66 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v8, v65, v64);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v8, 0, 1, v64);
    static AnimationFillMode.forwards.getter();
    v67 = v50;
    v68 = v87;
    v69 = v86;
    v70 = v88;
    (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, *MEMORY[0x24BDE7958], v88);
    v93 = v8;
    v79 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v67, v85);
    outlined destroy of Any?((uint64_t)v93, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v92, v91);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v13, v97);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v83);
  }
  else
  {

    v104 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v62 = (void *)swift_allocError();
    *v63 = 0;
    v71 = v13;
    static os_log_type_t.error.getter();
    v72 = v97;
    if (one-time initialization token for timeline != -1)
      swift_once();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_22BD0C360;
    v104 = v62;
    v74 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v75 = String.init<A>(describing:)();
    v77 = v76;
    *(_QWORD *)(v73 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v73 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v73 + 32) = v75;
    *(_QWORD *)(v73 + 40) = v77;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v96 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v18);
    return 0;
  }
  return v79;
}

void closure #1 in TimelineBuilder.createEmphasizeAction(for:inputs:)(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v7 = type metadata accessor for BindTarget.EntityPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v19 - v15;
  v20 = a1;
  TimelineBuilder.createBindPath(from:inputs:)(&v20, a2, (uint64_t)&v19 - v15);
  if (!v3)
  {
    outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v16, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
    {
      outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v16);
      v17 = *MEMORY[0x24BDE73A0];
      v18 = type metadata accessor for BindTarget();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a3, v17, v18);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
      BindTarget.EntityPath.transform.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v16);
    }
  }
}

uint64_t TimelineBuilder.createImpulseAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  void *v88;

  v85 = a2;
  v2 = type metadata accessor for AnimationFillMode();
  v70 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v76 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for AnimationRepeatMode();
  v75 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v73 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for ImpulseAction();
  v69 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BindTarget.EntityPath();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v68 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for BindTarget();
  v82 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v81 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for ActionEntityResolution();
  v80 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v86 = (char *)&v67 - v17;
  v18 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v67 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v87 = (uint64_t)&v67 - v25;
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  v26 = String.count.getter();
  v77 = v2;
  v78 = v9;
  v72 = v7;
  if (v26 < 1)
    v27 = (id)RIOPxrTfTokenEmpty();
  else
    v27 = (id)RIOPxrTfTokenCreateWithCString();
  v28 = v27;
  v29 = specialized Prim.attributeValue<A>(of:type:)();
  v31 = v30;
  v33 = v32;

  if ((v33 & 1) != 0)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TimelineBuilder.createImpulseAction(for:inputs:));
  }
  else
  {
    *(_QWORD *)&v34 = v29;
    *((_QWORD *)&v34 + 1) = v31;
  }
  v71 = v34;
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v35 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v36 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = v36;
    v38 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v37, 0);
    if (*(_QWORD *)(v38 + 16))
    {
      v39 = *(void **)(v38 + 32);
      v40 = v39;
    }
    else
    {
      v39 = 0;
    }
    v43 = v85;
    swift_bridgeObjectRelease();
    v88 = v39;
    v44 = v87;
    TimelineBuilder.createBindPath(from:inputs:)(&v88, v43, v87);
    outlined init with copy of TimelineBuilder.BindPathWrapper(v44, (uint64_t)v23);
    v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v45(v23, 1, v10) == 1)
    {
      static ActionEntityResolution.sourceEntity.getter();
      v46 = v83;
      v47 = v80;
    }
    else
    {
      v48 = v86;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v86, v23, v10);
      v47 = v80;
      v49 = v48;
      v44 = v87;
      v46 = v83;
      (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v49, *MEMORY[0x24BDE7A60], v83);
    }
    outlined init with copy of TimelineBuilder.BindPathWrapper(v44, (uint64_t)v20);
    if (v45(v20, 1, v10) == 1)
    {
      v51 = v81;
      v50 = v82;
      v52 = v84;
      (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, *MEMORY[0x24BDE73A0], v84);
    }
    else
    {
      v53 = v68;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v68, v20, v10);
      v51 = v81;
      BindTarget.EntityPath.transform.getter();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v53, v10);
      v52 = v84;
      v50 = v82;
    }
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v15, v86, v46);
    ImpulseAction.init(targetEntity:linearImpulse:)();
    v85 = type metadata accessor for AnimationResource();
    v54 = (uint64_t)v72;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v72, v51, v52);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v54, 0, 1, v52);
    v55 = v75;
    v56 = v73;
    (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v73, *MEMORY[0x24BDE7958], v79);
    v88 = (void *)MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7878], MEMORY[0x24BDE7888]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode], MEMORY[0x24BEE12C8]);
    v57 = v76;
    v58 = v77;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v59 = v74;
    v66 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    (*(void (**)(char *, uint64_t))(v70 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v79);
    outlined destroy of Any?(v54, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v78, v59);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v84);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v86, v83);
    outlined destroy of TimelineBuilder.BindPathWrapper(v87);
  }
  else
  {

    v88 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v41 = (void *)swift_allocError();
    *v42 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1)
      swift_once();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_22BD0C360;
    v88 = v41;
    v61 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v62 = String.init<A>(describing:)();
    v64 = v63;
    *(_QWORD *)(v60 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v60 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v60 + 32) = v62;
    *(_QWORD *)(v60 + 40) = v64;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return 0;
  }
  return v66;
}

uint64_t TimelineBuilder.createLookAtTransition(for:attributeName:)(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v19;
  _BYTE v20[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for AnimationTimingFunction();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v20[-v11];
  v13 = *a2;
  v14 = Prim.children.getter();
  v15 = v13;
  v16 = specialized Sequence.first(where:)(v14);
  swift_bridgeObjectRelease();

  if (v16)
  {
    if (String.count.getter() < 1)
      v17 = (id)RIOPxrTfTokenEmpty();
    else
      v17 = (id)RIOPxrTfTokenCreateWithCString();
    v19 = v17;
    specialized Prim.attributeValue<A>(of:type:)();

    TimelineBuilder.timingFunction(for:)((uint64_t)v5);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      static AnimationTimingFunction.default.getter();
      outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for AnimationTimingFunction?);
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v12, v5, v6);
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v9, v12, v6);
    BillboardAction.Transition.init(duration:timingFunction:)();
    swift_release();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  }
  else
  {
    static AnimationTimingFunction.default.getter();
    return BillboardAction.Transition.init(duration:timingFunction:)();
  }
}

uint64_t TimelineBuilder.createLookAtAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void (*v35)(char *, char *, uint64_t);
  id v36;
  void *v37;
  unint64_t v38;
  int v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void *v82[2];

  v76 = a2;
  v68 = type metadata accessor for AnimationRepeatMode();
  v75 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v74 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AnimationFillMode();
  v67 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v6);
  v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for BindTarget.EntityPath();
  v8 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v64 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BindTarget();
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v69 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v79 = (uint64_t)&v61 - v16;
  v17 = type metadata accessor for BillboardAction();
  v77 = *(_QWORD *)(v17 - 8);
  v78 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v81 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BillboardAction.Transition();
  v80 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v61 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v61 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v61 - v29;
  if (String.count.getter() < 1)
    v31 = (id)RIOPxrTfTokenEmpty();
  else
    v31 = (id)RIOPxrTfTokenCreateWithCString();
  v32 = v31;
  v82[0] = v31;
  TimelineBuilder.createLookAtTransition(for:attributeName:)(a1, v82);

  if (String.count.getter() < 1)
    v33 = (id)RIOPxrTfTokenEmpty();
  else
    v33 = (id)RIOPxrTfTokenCreateWithCString();
  v34 = v33;
  v82[0] = v33;
  TimelineBuilder.createLookAtTransition(for:attributeName:)(a1, v82);

  v35 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
  v35(v24, v30, v19);
  v35(v21, v27, v19);
  BillboardAction.init(transitionIn:transitionOut:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1)
    v36 = (id)RIOPxrTfTokenEmpty();
  else
    v36 = (id)RIOPxrTfTokenCreateWithCString();
  v37 = v36;
  v38 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v38 & 0x100000000) != 0)
    v39 = 0;
  else
    v39 = v38;
  v65 = v39;
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v40 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v41 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v42 = (_QWORD *)swift_allocObject();
    v42[2] = v41;
    v43 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v42, 0);
    if (*(_QWORD *)(v43 + 16))
    {
      v44 = *(id *)(v43 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
  else
  {

    v82[0] = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
  }
  v44 = 0;
LABEL_21:
  v82[0] = v44;
  v45 = v79;
  TimelineBuilder.createBindPath(from:inputs:)(v82, v76, v79);
  outlined init with copy of TimelineBuilder.BindPathWrapper(v45, (uint64_t)v14);
  v46 = v66;
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v66);
  v63 = v4;
  v62 = v27;
  v61 = v30;
  if (v47 == 1)
  {
    v49 = v69;
    v48 = v70;
    v50 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v69, *MEMORY[0x24BDE7388], v71);
  }
  else
  {
    v51 = v64;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v64, v14, v46);
    v49 = v69;
    BindTarget.EntityPath.billboardBlendFactor.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v51, v46);
    v48 = v70;
    v50 = v71;
  }
  type metadata accessor for AnimationResource();
  v52 = v72;
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v72, v49, v50);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v52, 0, 1, v50);
  static AnimationFillMode.forwards.getter();
  v53 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, *MEMORY[0x24BDE7958], v68);
  v54 = v78;
  v55 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

  v56 = v63;
  v57 = v62;
  v58 = v61;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v53);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v56);
  outlined destroy of Any?(v72, &demangling cache variable for type metadata for BindTarget?);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v71);
  outlined destroy of TimelineBuilder.BindPathWrapper(v79);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v81, v54);
  v59 = *(void (**)(char *, uint64_t))(v80 + 8);
  v59(v57, v19);
  v59(v58, v19);
  return v55;
}

uint64_t TimelineBuilder.createOrbitAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  __int128 v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  unint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  id v73;
  int HasRelationship;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  id v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, _QWORD, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  int v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  __int128 v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;

  v129 = a2;
  v2 = type metadata accessor for AnimationRepeatMode();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v113 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for AnimationFillMode();
  v110 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v125 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v6);
  v109 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for BindTarget.EntityPath();
  v122 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v108 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for BindTarget();
  v126 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v116 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OrbitEntityAction();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActionEntityResolution();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v121 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v128 = (char *)&v102 - v18;
  v19 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v19);
  v112 = (uint64_t)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v118 = (uint64_t)&v102 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v102 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v130 = (uint64_t)&v102 - v27;
  v28 = String.count.getter();
  v114 = v2;
  if (v28 < 1)
    v29 = (id)RIOPxrTfTokenEmpty();
  else
    v29 = (id)RIOPxrTfTokenCreateWithCString();
  v30 = v29;
  specialized Prim.attributeValue<A>(of:type:)();

  v31 = String.count.getter();
  v127 = v15;
  v123 = v10;
  if (v31 < 1)
    v32 = (id)RIOPxrTfTokenEmpty();
  else
    v32 = (id)RIOPxrTfTokenCreateWithCString();
  v33 = v32;
  v34 = specialized Prim.attributeValue<A>(of:type:)();
  v36 = v35;
  v38 = v37;

  if ((v38 & 1) != 0)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TimelineBuilder.createOrbitAction(for:inputs:));
  }
  else
  {
    *(_QWORD *)&v39 = v34;
    *((_QWORD *)&v39 + 1) = v36;
  }
  v120 = v39;
  if (String.count.getter() < 1)
    v40 = (id)RIOPxrTfTokenEmpty();
  else
    v40 = (id)RIOPxrTfTokenCreateWithCString();
  v41 = v40;
  v119 = specialized Prim.attributeValue<A>(of:type:)();

  v42 = String.count.getter();
  v117 = v3;
  if (v42 < 1)
    v43 = (id)RIOPxrTfTokenEmpty();
  else
    v43 = (id)RIOPxrTfTokenCreateWithCString();
  v44 = v43;
  if (RIOPxrUsdPrimHasAttribute())
  {
    v45 = (void *)RIOPxrUsdPrimCopyAttribute();
    v46 = RIOPxrUsdAttributeCopyValue();
    if (v46)
    {
      v47 = (void *)v46;
      v48 = (void *)RIOPxrVtValueCopyToken();

      if (v48)
        goto LABEL_27;
      goto LABEL_23;
    }

  }
  else
  {
    v45 = v44;
  }

LABEL_23:
  if (String.count.getter() < 1)
    v49 = (id)RIOPxrTfTokenEmpty();
  else
    v49 = (id)RIOPxrTfTokenCreateWithCString();
  v48 = v49;
LABEL_27:
  if (String.count.getter() < 1)
    v50 = (id)RIOPxrTfTokenEmpty();
  else
    v50 = (id)RIOPxrTfTokenCreateWithCString();
  v51 = v50;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  static _CFObject.== infix(_:_:)();

  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1)
    v52 = (id)RIOPxrTfTokenEmpty();
  else
    v52 = (id)RIOPxrTfTokenCreateWithCString();
  v53 = v52;
  v54 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v54 & 0x100000000) != 0)
    v55 = 0;
  else
    v55 = v54;
  if (one-time initialization token for pivotEntity != -1)
    swift_once();
  v56 = (id)static ToolsFoundations.Token.pivotEntity;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v105 = v55;
    v107 = v14;
    v57 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v58 = (_QWORD *)swift_allocObject();
    v58[2] = v57;
    v59 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v58, 0);
    if (*(_QWORD *)(v59 + 16))
    {
      v60 = *(void **)(v59 + 32);
      v61 = v60;
    }
    else
    {
      v60 = 0;
    }
    v64 = v130;
    swift_bridgeObjectRelease();
    v131 = v60;
    TimelineBuilder.createBindPath(from:inputs:)(&v131, v129, v64);
    v106 = v13;
    v65 = v11;
    outlined init with copy of TimelineBuilder.BindPathWrapper(v64, (uint64_t)v25);
    v66 = v122;
    v67 = v124;
    v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48);
    if (v103(v25, 1, v124) == 1)
    {
      v68 = v128;
      static ActionEntityResolution.sourceEntity.getter();
      v69 = v107;
      v70 = v127;
    }
    else
    {
      v71 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
      v68 = v128;
      v71(v128, v25, v67);
      v70 = v127;
      v69 = v107;
      (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v68, *MEMORY[0x24BDE7A60], v107);
    }
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v121, v68, v69);
    v104 = v65;
    OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:isOrientedToPath:isAdditive:)();
    v72 = v126;
    if (one-time initialization token for targetPathAttributeName != -1)
      swift_once();
    v73 = (id)static ToolsFoundations.Token.targetPathAttributeName;
    HasRelationship = RIOPxrUsdPrimHasRelationship();
    v75 = v128;
    if (HasRelationship)
    {
      v76 = RIOPxrUsdPrimCopyRelationship();

      v77 = (_QWORD *)swift_allocObject();
      v77[2] = v76;
      v78 = Relationship.targets.getter();
      outlined consume of Result<AnyAttribute, Object.Error>(v77, 0);
      if (*(_QWORD *)(v78 + 16))
      {
        v79 = *(void **)(v78 + 32);
        v80 = v79;
      }
      else
      {
        v79 = 0;
      }
      v82 = v117;
      swift_bridgeObjectRelease();
      v131 = v79;
      v83 = v118;
      TimelineBuilder.createBindPath(from:inputs:)(&v131, v129, v118);
      v91 = v112;
      outlined init with copy of TimelineBuilder.BindPathWrapper(v83, v112);
      v92 = v124;
      if (v103((char *)v91, 1, v124) == 1)
      {
        v93 = v115;
        (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v116, *MEMORY[0x24BDE73A0], v115);
        v94 = (uint64_t)v109;
      }
      else
      {
        v95 = v122;
        v96 = v91;
        v97 = v108;
        (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v108, v96, v92);
        BindTarget.EntityPath.transform.getter();
        (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v92);
        v94 = (uint64_t)v109;
        v93 = v115;
      }
      type metadata accessor for AnimationResource();
      v98 = v126;
      (*(void (**)(uint64_t, char *, uint64_t))(v126 + 16))(v94, v116, v93);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v94, 0, 1, v93);
      static AnimationFillMode.forwards.getter();
      v99 = *(void (**)(char *, _QWORD, uint64_t))(v82 + 104);
      v100 = v113;
      v101 = v114;
      v99(v113, *MEMORY[0x24BDE7958], v114);
      v89 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

      (*(void (**)(char *, uint64_t))(v117 + 8))(v100, v101);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v125, v111);
      outlined destroy of Any?(v94, &demangling cache variable for type metadata for BindTarget?);
      (*(void (**)(char *, uint64_t))(v126 + 8))(v116, v115);
      outlined destroy of TimelineBuilder.BindPathWrapper(v118);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v123);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v128, v107);
      outlined destroy of TimelineBuilder.BindPathWrapper(v130);
      return v89;
    }

    v131 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v62 = (void *)swift_allocError();
    *v81 = 0;

    (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v123);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v75, v107);
    outlined destroy of TimelineBuilder.BindPathWrapper(v130);
  }
  else
  {

    v131 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v62 = (void *)swift_allocError();
    *v63 = 0;
  }
  static os_log_type_t.error.getter();
  if (one-time initialization token for timeline != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_22BD0C360;
  v131 = v62;
  v85 = v62;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v86 = String.init<A>(describing:)();
  v88 = v87;
  *(_QWORD *)(v84 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v84 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v84 + 32) = v86;
  *(_QWORD *)(v84 + 40) = v88;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t TimelineBuilder.createSpinAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  __int128 v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  char v48;
  __int128 v49;
  char *v50;
  id v51;
  void *v52;
  unint64_t v53;
  int v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  void *v94;

  v86 = a2;
  v2 = type metadata accessor for AnimationRepeatMode();
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v83 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for AnimationFillMode();
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v82 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v5);
  v81 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for BindTarget.EntityPath();
  v7 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v74 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for BindTarget();
  v9 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v90 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v73 - v15;
  v89 = type metadata accessor for SpinAction();
  v87 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v92 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AnimationTimingFunction();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v93 = (char *)&v73 - v26;
  v27 = String.count.getter();
  v88 = v16;
  v77 = v7;
  if (v27 < 1)
    v28 = (id)RIOPxrTfTokenEmpty();
  else
    v28 = (id)RIOPxrTfTokenCreateWithCString();
  v29 = v28;
  specialized Prim.attributeValue<A>(of:type:)();

  v30 = String.count.getter();
  v79 = v9;
  if (v30 < 1)
    v31 = (id)RIOPxrTfTokenEmpty();
  else
    v31 = (id)RIOPxrTfTokenCreateWithCString();
  v32 = v31;
  v33 = specialized Prim.attributeValue<A>(of:type:)();
  v35 = v34;
  v37 = v36;

  if ((v37 & 1) != 0)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TimelineBuilder.createSpinAction(for:inputs:));
  }
  else
  {
    *(_QWORD *)&v38 = v33;
    *((_QWORD *)&v38 + 1) = v35;
  }
  v91 = v38;
  TimelineBuilder.timingFunction(for:)((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    static AnimationTimingFunction.default.getter();
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for AnimationTimingFunction?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v93, v20, v21);
  }
  if (String.count.getter() < 1)
    v39 = (id)RIOPxrTfTokenEmpty();
  else
    v39 = (id)RIOPxrTfTokenCreateWithCString();
  v40 = v39;
  if (RIOPxrUsdPrimHasAttribute())
  {
    v41 = (void *)RIOPxrUsdPrimCopyAttribute();
    v42 = RIOPxrUsdAttributeCopyValue();
    if (v42)
    {
      v43 = (void *)v42;
      v44 = (void *)RIOPxrVtValueCopyToken();

      if (v44)
        goto LABEL_27;
      goto LABEL_23;
    }

  }
  else
  {
    v41 = v40;
  }

LABEL_23:
  if (String.count.getter() < 1)
    v45 = (id)RIOPxrTfTokenEmpty();
  else
    v45 = (id)RIOPxrTfTokenCreateWithCString();
  v44 = v45;
LABEL_27:
  if (String.count.getter() < 1)
    v46 = (id)RIOPxrTfTokenEmpty();
  else
    v46 = (id)RIOPxrTfTokenCreateWithCString();
  v47 = v46;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v48 = static _CFObject.== infix(_:_:)();

  if ((v48 & 1) != 0)
  {
    *(float32x2_t *)&v49 = vsub_f32(0, *(float32x2_t *)&v91);
    *((float *)&v49 + 2) = 0.0 - *((float *)&v91 + 2);
    HIDWORD(v49) = 0;
    v91 = v49;
  }
  v50 = v90;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v93, v21);
  SpinAction.init(revolutions:localAxis:timingFunction:isAdditive:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1)
    v51 = (id)RIOPxrTfTokenEmpty();
  else
    v51 = (id)RIOPxrTfTokenCreateWithCString();
  v52 = v51;
  v53 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v53 & 0x100000000) != 0)
    v54 = 0;
  else
    v54 = v53;
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v55 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v56 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v57 = (_QWORD *)swift_allocObject();
    v57[2] = v56;
    v58 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v57, 0);
    if (*(_QWORD *)(v58 + 16))
    {
      v59 = *(id *)(v58 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
  }
  else
  {

    v94 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
  }
  v59 = 0;
LABEL_46:
  v94 = v59;
  v60 = (uint64_t)v88;
  TimelineBuilder.createBindPath(from:inputs:)(&v94, v86, (uint64_t)v88);
  LODWORD(v91) = v54;
  v61 = v13;
  outlined init with copy of TimelineBuilder.BindPathWrapper(v60, (uint64_t)v13);
  v62 = v77;
  v63 = v78;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v13, 1, v78) == 1)
  {
    v64 = v79;
    v65 = v80;
    (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v50, *MEMORY[0x24BDE73A0], v80);
  }
  else
  {
    v66 = v74;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v74, v61, v63);
    BindTarget.EntityPath.transform.getter();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v66, v63);
    v64 = v79;
    v65 = v80;
  }
  type metadata accessor for AnimationResource();
  v67 = v81;
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v81, v50, v65);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v67, 0, 1, v65);
  static AnimationFillMode.forwards.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v83, *MEMORY[0x24BDE7958], v85);
  v68 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

  v69 = v76;
  v70 = v75;
  v71 = v87;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v82, v69);
  outlined destroy of Any?(v81, &demangling cache variable for type metadata for BindTarget?);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v90, v80);
  outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v88);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v92, v89);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v93, v21);
  return v68;
}

uint64_t TimelineBuilder.createEnableAction(for:inputs:enabled:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;

  LODWORD(v49) = a3;
  v51 = type metadata accessor for AnimationFillMode();
  v48 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AnimationRepeatMode();
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for SetEntityEnabledAction();
  v47 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ActionEntityResolution();
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v47 - v17;
  v19 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v47 - v23;
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v25 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v26 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = v26;
    v28 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v27, 0);
    if (*(_QWORD *)(v28 + 16))
    {
      v29 = *(void **)(v28 + 32);
      v30 = v29;
    }
    else
    {
      v29 = 0;
    }
    swift_bridgeObjectRelease();
    v57 = v29;
    TimelineBuilder.createBindPath(from:inputs:)(&v57, a2, (uint64_t)v24);

    outlined init with copy of TimelineBuilder.BindPathWrapper((uint64_t)v24, (uint64_t)v21);
    v33 = type metadata accessor for BindTarget.EntityPath();
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v21, 1, v33) == 1)
    {
      static ActionEntityResolution.sourceEntity.getter();
      v36 = v55;
      v35 = v56;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v18, v21, v33);
      v36 = v55;
      v35 = v56;
      (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v18, *MEMORY[0x24BDE7A60], v56);
    }
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v15, v18, v35);
    SetEntityEnabledAction.init(targetEntity:isEnabled:)();
    v49 = type metadata accessor for AnimationResource();
    v37 = type metadata accessor for BindTarget();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v10, 1, 1, v37);
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v7, *MEMORY[0x24BDE7958], v54);
    v57 = (void *)MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7878], MEMORY[0x24BDE7888]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode], MEMORY[0x24BEE12C8]);
    v38 = v51;
    v39 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v46 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v38);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v54);
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v52);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v56);
    outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v24);
  }
  else
  {

    v57 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v31 = (void *)swift_allocError();
    *v32 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1)
      swift_once();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_22BD0C360;
    v57 = v31;
    v41 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v42 = String.init<A>(describing:)();
    v44 = v43;
    *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v40 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v40 + 32) = v42;
    *(_QWORD *)(v40 + 40) = v44;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return 0;
  }
  return v46;
}

uint64_t TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  v3 = type metadata accessor for ActionEntityResolution();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v10 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v11 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v11;
    v13 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v12, 0);
    if (*(_QWORD *)(v13 + 16))
    {
      v14 = *(void **)(v13 + 32);
      v15 = v14;
    }
    else
    {
      v14 = 0;
    }
    swift_bridgeObjectRelease();
    v28 = v14;
    TimelineBuilder.createBindPath(from:inputs:)(&v28, a2, (uint64_t)v9);
    static ActionEntityResolution.sourceEntity.getter();
    v24 = specialized TimelineBuilder.startTimeAndDuration(for:)();
    v25 = Prim.children.getter();
    MEMORY[0x24BDAC7A8](v25);
    *(&v27 - 4) = (uint64_t)v6;
    *(&v27 - 3) = 0x3FA1111111111111;
    *((double *)&v27 - 2) = v24;
    v26 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:), (uint64_t)(&v27 - 6), v25);
    swift_bridgeObjectRelease();

    outlined destroy of TimelineBuilder.BindPathWrapper((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {

    v28 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v16 = (void *)swift_allocError();
    *v17 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1)
      swift_once();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_22BD0C360;
    v28 = v16;
    v19 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v20 = String.init<A>(describing:)();
    v22 = v21;
    *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
  return v26;
}

void closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;

  v46 = a1;
  v51 = type metadata accessor for AnimationFillMode();
  v45 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v49 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for AnimationRepeatMode();
  v52 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v48 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionEntityResolution();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (String.count.getter() < 1)
    v14 = (id)RIOPxrTfTokenEmpty();
  else
    v14 = (id)RIOPxrTfTokenCreateWithCString();
  v15 = v14;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    v53 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    v23 = 0;
    goto LABEL_21;
  }
  v43 = a2;
  v16 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v16;
  v18 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v17, 0);
  if (!*(_QWORD *)(v18 + 16))
  {
    swift_bridgeObjectRelease();
    v23 = 0;
    a2 = v43;
    goto LABEL_21;
  }
  v19 = *(id *)(v18 + 32);
  swift_bridgeObjectRelease();
  v20 = (void *)RIOPxrSdfPathCopyString();
  v42[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v42[1] = v21;

  if (String.count.getter() < 1)
    v22 = (id)RIOPxrTfTokenEmpty();
  else
    v22 = (id)RIOPxrTfTokenCreateWithCString();
  v24 = v22;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    v53 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
LABEL_16:
    v30 = 0;
    v32 = 0xE000000000000000;
    goto LABEL_17;
  }
  v25 = RIOPxrUsdPrimCopyRelationship();

  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v25;
  v27 = Relationship.targets.getter();
  outlined consume of Result<AnyAttribute, Object.Error>(v26, 0);
  if (!*(_QWORD *)(v27 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v28 = *(id *)(v27 + 32);
  swift_bridgeObjectRelease();
  v29 = (void *)RIOPxrSdfPathCopyString();
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v32 = v31;

LABEL_17:
  v33 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v46, v8);
  v53 = v30;
  v54 = v32;
  SetEntityPropertyAction.init(targetEntity:key:value:)();
  v46 = type metadata accessor for AnimationResource();
  v34 = type metadata accessor for BindTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v7, 1, 1, v34);
  v35 = v48;
  v36 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v48, *MEMORY[0x24BDE7958], v50);
  v53 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7878], MEMORY[0x24BDE7888]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode], MEMORY[0x24BEE12C8]);
  v37 = v49;
  v38 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type SetEntityPropertyAction<String> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<String>, MEMORY[0x24BDE7C58]);
  v39 = v47;
  v40 = v55;
  v41 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  if (v40)
  {

    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v36);
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v39);
    v23 = 0;
  }
  else
  {
    v23 = v41;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v36);
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v39);
  }
  a2 = v43;
LABEL_21:
  *a2 = v23;
}

uint64_t TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  int v31;
  id v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD v61[2];
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;

  v5 = a1 & 1;
  v6 = type metadata accessor for AnimationRepeatMode();
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AnimationFillMode();
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v12);
  v72 = (uint64_t)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for BindTarget.EntityPath();
  v14 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v62 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BindTarget();
  v69 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v71 = (char *)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v73 = (uint64_t)v61 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
  v24 = *(_QWORD *)(v23 - 8);
  v74 = v23;
  v75 = v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  v27 = String.count.getter();
  v66 = v8;
  if (v27 < 1)
    v28 = (id)RIOPxrTfTokenEmpty();
  else
    v28 = (id)RIOPxrTfTokenCreateWithCString();
  v29 = v28;
  v30 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v30 & 0x100000000) != 0)
    v31 = 0;
  else
    v31 = v30;
  closure #1 in TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)(v3, v5, a3, (uint64_t)v26);
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v32 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v33 = v11;
    v34 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v35 = (_QWORD *)swift_allocObject();
    v35[2] = v34;
    v36 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v35, 0);
    if (*(_QWORD *)(v36 + 16))
    {
      v37 = *(void **)(v36 + 32);
      v38 = v37;
    }
    else
    {
      v37 = 0;
    }
    v42 = v71;
    v41 = v72;
    swift_bridgeObjectRelease();
    v76 = v37;
    v43 = v73;
    TimelineBuilder.createBindPath(from:inputs:)(&v76, a3, v73);
    v61[1] = v31;
    outlined init with copy of TimelineBuilder.BindPathWrapper(v43, (uint64_t)v20);
    v52 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v20, 1, v65) == 1)
    {
      v53 = v69;
      v54 = v70;
      (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v42, *MEMORY[0x24BDE73A0], v70);
    }
    else
    {
      v55 = v62;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v62, v20, v52);
      BindTarget.EntityPath.transform.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v55, v52);
      v53 = v69;
      v54 = v70;
    }
    v65 = type metadata accessor for AnimationResource();
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v41, v42, v54);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v41, 0, 1, v54);
    static AnimationFillMode.forwards.getter();
    v57 = v66;
    v56 = v67;
    v58 = v33;
    v59 = v68;
    (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v66, *MEMORY[0x24BDE7958], v68);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type FromToByAction<Transform> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Transform>, MEMORY[0x24BDE7640]);
    v60 = v74;
    v50 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v59);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v58, v64);
    outlined destroy of Any?(v72, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v71, v70);
    outlined destroy of TimelineBuilder.BindPathWrapper(v73);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v26, v60);
  }
  else
  {

    v76 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v39 = (void *)swift_allocError();
    *v40 = 0;
    v44 = v74;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1)
      swift_once();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_22BD0C360;
    v76 = v39;
    v46 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v47 = String.init<A>(describing:)();
    v49 = v48;
    *(_QWORD *)(v45 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v45 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v45 + 32) = v47;
    *(_QWORD *)(v45 + 40) = v49;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v75 + 8))(v26, v44);
    return 0;
  }
  return v50;
}

uint64_t closure #1 in TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;

  v24 = a1;
  v25 = a3;
  v29 = a2;
  v30 = a4;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AnimationTimingFunction();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v24 - v19;
  v26 = specialized TimelineBuilder.transform(for:)();
  v27 = v21;
  v28 = v22;
  TimelineBuilder.timingFunction(for:)((uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    static AnimationTimingFunction.default.getter();
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for AnimationTimingFunction?);
    if ((v29 & 1) != 0)
    {
LABEL_3:
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
      FromToByAction<>.init(by:timing:isAdditive:)();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    if ((v29 & 1) != 0)
      goto LABEL_3;
  }
  TimelineBuilder.transformMode(for:inputs:)(v25, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    static FromToByAction.TransformMode.default.getter();
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  }
  v32 = 0u;
  v33 = 0u;
  v31 = 0u;
  v34 = 1;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
  FromToByAction<>.init(from:to:mode:timing:isAdditive:)();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
}

uint64_t TimelineBuilder.createShowOrHideAction(showOrHide:for:inputs:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  id v33;
  void *v34;
  unint64_t v35;
  int v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _DWORD v63[4];
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  float v81;

  v76 = a3;
  v4 = type metadata accessor for AnimationRepeatMode();
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AnimationFillMode();
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v72 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v8);
  v71 = (uint64_t)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BindTarget.EntityPath();
  v65 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v64 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BindTarget();
  v69 = *(_QWORD *)(v12 - 8);
  v70 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v68 = (char *)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v77 = (uint64_t)v63 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
  v78 = *(_QWORD *)(v19 - 8);
  v79 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationTimingFunction?);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for AnimationTimingFunction();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)v63 - v30;
  TimelineBuilder.timingFunction(for:)((uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    static AnimationTimingFunction.default.getter();
    outlined destroy of Any?((uint64_t)v24, &demangling cache variable for type metadata for AnimationTimingFunction?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v31, v24, v25);
  }
  LODWORD(v80) = 0;
  BYTE4(v80) = 1;
  v32 = 0.0;
  if ((a1 & 1) == 0)
    v32 = 1.0;
  v81 = v32;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v31, v25);
  FromToByAction.init(from:to:timing:isAdditive:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1)
    v33 = (id)RIOPxrTfTokenEmpty();
  else
    v33 = (id)RIOPxrTfTokenCreateWithCString();
  v34 = v33;
  v35 = specialized Prim.attributeValue<A>(of:type:)();

  if ((v35 & 0x100000000) != 0)
    v36 = 0;
  else
    v36 = v35;
  if (one-time initialization token for targetPathAttributeName != -1)
    swift_once();
  v37 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v38 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v39 = (_QWORD *)swift_allocObject();
    v39[2] = v38;
    v40 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v39, 0);
    v41 = *(_QWORD *)(v40 + 16);
    v63[3] = v36;
    if (v41)
    {
      v42 = *(void **)(v40 + 32);
      v43 = v42;
    }
    else
    {
      v42 = 0;
    }
    v46 = v76;
    swift_bridgeObjectRelease();
    v80 = v42;
    v47 = v77;
    TimelineBuilder.createBindPath(from:inputs:)(&v80, v46, v77);
    outlined init with copy of TimelineBuilder.BindPathWrapper(v47, (uint64_t)v16);
    v57 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v16, 1, v10) == 1)
    {
      v59 = v68;
      v58 = v69;
      v60 = v70;
      (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, *MEMORY[0x24BDE7398], v70);
    }
    else
    {
      v61 = v64;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v64, v16, v10);
      v59 = v68;
      BindTarget.EntityPath.opacity.getter();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v61, v10);
      v58 = v69;
      v60 = v70;
    }
    v76 = type metadata accessor for AnimationResource();
    v62 = v71;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v71, v59, v60);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v62, 0, 1, v60);
    static AnimationFillMode.forwards.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, *MEMORY[0x24BDE7958], v75);
    lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type FromToByAction<Float> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Float>, MEMORY[0x24BDE7640]);
    v55 = v79;
    v53 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();

    v54 = v78;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v72, v67);
    outlined destroy of Any?(v71, &demangling cache variable for type metadata for BindTarget?);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
    outlined destroy of TimelineBuilder.BindPathWrapper(v77);
  }
  else
  {

    v80 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v44 = (void *)swift_allocError();
    *v45 = 0;
    static os_log_type_t.error.getter();
    if (one-time initialization token for timeline != -1)
      swift_once();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_22BD0C360;
    v80 = v44;
    v49 = v44;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v50 = String.init<A>(describing:)();
    v52 = v51;
    *(_QWORD *)(v48 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v48 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v48 + 32) = v50;
    *(_QWORD *)(v48 + 40) = v52;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    v53 = 0;
    v54 = v78;
    v55 = v79;
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v55);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v25);
  return v53;
}

uint64_t TimelineBuilder.createAction(for:inputs:)(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  id v6;
  char v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v4 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (one-time initialization token for primType != -1)
    swift_once();
  v5 = (void *)static TimelineConstants.Action.primType;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
  v6 = v5;
  v7 = static _CFObject.== infix(_:_:)();

  if ((v7 & 1) == 0)
    return MEMORY[0x24BEE4AF8];
  v8 = String.count.getter() < 1
     ? (id)RIOPxrTfTokenEmpty()
     : (id)RIOPxrTfTokenCreateWithCString();
  v9 = v8;
  v10 = specialized Prim.attributeValue<A>(of:type:)();
  v12 = v11;

  if (!v12)
    return MEMORY[0x24BEE4AF8];
  if (String.count.getter() < 1)
    v13 = (id)RIOPxrTfTokenEmpty();
  else
    v13 = (id)RIOPxrTfTokenCreateWithCString();
  v14 = v13;
  v15 = specialized Prim.attributeValue<A>(of:type:)();

  if (v15 != 2 && (v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  if (v10 == 0x6F6974616D696E61 && v12 == 0xE90000000000006ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createAnimationAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
LABEL_18:
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_22BD0C380;
    *(_QWORD *)(v18 + 32) = v17;
    v26 = v18;
    specialized Array._endMutation()();
    return v26;
  }
  if (v10 == 0x6F69647561 && v12 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createAudioAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 0x7A69736168706D65 && v12 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createEmphasizeAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 0x656C62616E65 && v12 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v20 = a1;
    v21 = (uint64_t)a2;
    v22 = 1;
    goto LABEL_33;
  }
  if (v10 == 0x656C6261736964 && v12 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v20 = a1;
    v21 = (uint64_t)a2;
    v22 = 0;
LABEL_33:
    v16 = TimelineBuilder.createEnableAction(for:inputs:enabled:)(v20, v21, v22);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 0x65736C75706D69 && v12 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createImpulseAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 0x74416B6F6F6CLL && v12 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createLookAtAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 0x746962726FLL && v12 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createOrbitAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 1852403827 && v12 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createSpinAction(for:inputs:)(a1, (uint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 0x6163696669746F6ELL && v12 == 0xEC0000006E6F6974
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = specialized TimelineBuilder.createNotificationAction(for:inputs:)(a1);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if (v10 == 0x656E696C656D6974 && v12 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = TimelineBuilder.createTimelineAction(for:inputs:)(a1, a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  if ((v10 != 0xD000000000000010 || v12 != 0x800000022BD07530)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v10 == 0x6F5465766F6DLL && v12 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v23 = 0;
    }
    else
    {
      if ((v10 != 0x794265766F6DLL || v12 != 0xE600000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v10 == 2003789939 && v12 == 0xE400000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v24 = 0;
        }
        else
        {
          if (v10 == 1701079400 && v12 == 0xE400000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v25 & 1) == 0)
              return MEMORY[0x24BEE4AF8];
          }
          v24 = 1;
        }
        v16 = TimelineBuilder.createShowOrHideAction(showOrHide:for:inputs:)(v24, a1, (uint64_t)a2);
        if (!v16)
          return MEMORY[0x24BEE4AF8];
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      v23 = 1;
    }
    v16 = TimelineBuilder.createFromToByTransformAction(toOrBy:for:inputs:)(v23, a1, (unint64_t)a2);
    if (!v16)
      return MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  return TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(a1, (uint64_t)a2);
}

uint64_t TimelineBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];
  _QWORD aBlock[6];

  v2 = *v1;
  v7[2] = a1;
  v7[4] = v2;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in TimelineBuilder.run(inputs:);
  *(_QWORD *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_2;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in TimelineBuilder.run(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint8_t *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t result;
  void *v49;
  char v50;
  NSObject *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(__int128 *, _QWORD);
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  __int128 v102;
  uint64_t v103;
  void (*v104)(__int128 *, _QWORD);
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  os_log_type_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint8_t *v122;
  os_log_type_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD v133[2];
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  void (*v136)(char *, uint64_t);
  void (*v137)(uint64_t, uint64_t);
  os_log_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint8_t *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v145 = type metadata accessor for AnimationFillMode();
  MEMORY[0x24BDAC7A8](v145);
  v147 = (char *)v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for AnimationRepeatMode();
  v143 = *(_QWORD *)(v144 - 8);
  MEMORY[0x24BDAC7A8](v144);
  v146 = (char *)v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationLibraryComponent?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for Entity.ComponentSet();
  v153 = *(_QWORD *)(v148 - 8);
  MEMORY[0x24BDAC7A8](v148);
  v142 = (char *)v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v152 = (char *)v133 - v11;
  v151 = type metadata accessor for AnimationLibraryComponent();
  v12 = *(_QWORD *)(v151 - 8);
  MEMORY[0x24BDAC7A8](v151);
  v149 = (char *)v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v150 = (char *)v133 - v15;
  v16 = Inputs.prim.getter();
  v17 = (void *)RIOPxrUsdObjectCopyName();
  v19 = (char *)RIOPxrTfTokenCopyString();
  v154 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v155 = v18;

  LOBYTE(v19) = static os_log_type_t.info.getter();
  if (one-time initialization token for timeline != -1)
LABEL_60:
    swift_once();
  v20 = static OS_os_log.timeline;
  v21 = v19;
  if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, (os_log_type_t)v19))
  {
    swift_retain_n();
    v22 = v16;
    v23 = swift_slowAlloc();
    v138 = v20;
    v24 = (uint8_t *)v23;
    v139 = swift_slowAlloc();
    *(_QWORD *)&v156 = v139;
    v141 = a1;
    *(_DWORD *)v24 = 136315138;
    v137 = (void (*)(uint64_t, uint64_t))(v24 + 4);
    v25 = (void *)RIOPxrUsdObjectCopyPath();
    v26 = a2;
    v27 = (void *)RIOPxrSdfPathCopyString();
    v28 = v12;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v140 = v8;
    v31 = v30;

    v16 = v22;
    a2 = v26;
    v32 = v29;
    v12 = v28;
    v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, (uint64_t *)&v156);
    a1 = v141;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v8 = v140;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22BC20000, v138, v21, "Begin TimelineBuilder for prim at path: %s", v24, 0xCu);
    v33 = v139;
    swift_arrayDestroy();
    MEMORY[0x22E2F898C](v33, -1, -1);
    MEMORY[0x22E2F898C](v24, -1, -1);
  }
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_22BD0C5C0;
      v38 = (void *)RIOPxrUsdObjectCopyPath();
      v39 = (void *)RIOPxrSdfPathCopyString();
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v42 = v41;

      v43 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v37 + 56) = MEMORY[0x24BEE0D00];
      v44 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v37 + 32) = v40;
      *(_QWORD *)(v37 + 40) = v42;
      *(_QWORD *)(v37 + 96) = v43;
      *(_QWORD *)(v37 + 104) = v44;
      v45 = v154;
      *(_QWORD *)(v37 + 64) = v44;
      *(_QWORD *)(v37 + 72) = v45;
      *(_QWORD *)(v37 + 80) = v155;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v34 = static EntityBuilder.OutputName;
  v35 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v34, v35, &v156);
  if (!v157)
  {
    outlined destroy of Any?((uint64_t)&v156, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v46 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v46 + 64) = lazy protocol witness table accessor for type String and conformance String();
    v47 = v155;
    *(_QWORD *)(v46 + 32) = v154;
    *(_QWORD *)(v46 + 40) = v47;
    os_log(_:dso:log:type:_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v140 = (char *)v159;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (String.count.getter() < 1)
    v36 = (id)RIOPxrTfTokenEmpty();
  else
    v36 = (id)RIOPxrTfTokenCreateWithCString();
  v49 = v36;
  v50 = specialized Prim.attributeValue<A>(of:type:)();

  if (v50 != 2 && (v50 & 1) == 0)
  {
    specialized TimelineBuilder.clear(inputs:)();
    swift_release();
    return swift_release();
  }
  type metadata accessor for Entity();
  v51 = static Entity.__fromCore(_:)();
  v52 = v152;
  v138 = v51;
  dispatch thunk of Entity.components.getter();
  v53 = v151;
  Entity.ComponentSet.subscript.getter();
  v136 = *(void (**)(char *, uint64_t))(v153 + 8);
  v136(v52, v148);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v53) == 1)
  {
    v54 = v150;
    AnimationLibraryComponent.init()();
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for AnimationLibraryComponent?);
  }
  else
  {
    v54 = v150;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v150, v8, v53);
  }
  v55 = (uint64_t)v149;
  v135 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v135(v149, v54, v53);
  specialized Builder.addComponent<A>(component:)(v55);
  v137 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v137(v55, v53);
  v139 = v16;
  v56 = Prim.children.getter();
  swift_retain();
  swift_retain();
  v57 = 0;
  specialized Sequence.compactMap<A>(_:)(v56, a2, (void *)a1);
  swift_bridgeObjectRelease();
  swift_release();
  v58 = swift_release();
  MEMORY[0x24BDAC7A8](v58);
  v60 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say10RealityKit17AnimationResourceCG_Sits5NeverOTg509_sSiSay10d5Kit17fg10CGSiIgyod_j8AD_Sits5H11OIegnrzr_TRSiAJSiIgyod_Tf1cn_nTf4ng_n(0, v59, (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #1 in TimelineBuilder.run(inputs:));
  swift_bridgeObjectRelease();
  v61 = v60;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v156 = MEMORY[0x24BEE4AF8];
  v62 = *(void **)(v61 + 16);
  if (v62)
  {
    v134 = 0;
    v152 = (char *)(v61 + 32);
    v133[1] = v61;
    swift_bridgeObjectRetain();
    v63 = 0;
    v141 = (uint64_t)v62;
    while (1)
    {
      v64 = &v152[16 * v63];
      a1 = *(_QWORD *)v64;
      v16 = *((_QWORD *)v64 + 1);
      if (*(_QWORD *)v64 >> 62)
      {
        swift_bridgeObjectRetain();
        a2 = _CocoaArrayWrapper.endIndex.getter();
        if (!a2)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          v8 = v19;
          goto LABEL_27;
        }
      }
      else
      {
        a2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!a2)
          goto LABEL_26;
      }
      v154 = a1;
      v159 = (uint64_t)v19;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0);
      if (a2 < 0)
      {
        __break(1u);
        goto LABEL_60;
      }
      v153 = v63;
      v8 = (char *)v159;
      v65 = v154;
      if ((v154 & 0xC000000000000001) != 0)
      {
        v66 = 0;
        do
        {
          v12 = MEMORY[0x22E2F57B8](v66, v65);
          v159 = (uint64_t)v8;
          v68 = *((_QWORD *)v8 + 2);
          v67 = *((_QWORD *)v8 + 3);
          if (v68 >= v67 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
            v65 = v154;
            v8 = (char *)v159;
          }
          ++v66;
          *((_QWORD *)v8 + 2) = v68 + 1;
          v69 = &v8[16 * v68];
          *((_QWORD *)v69 + 4) = v12;
          *((_QWORD *)v69 + 5) = v16;
        }
        while (a2 != v66);
        swift_bridgeObjectRelease();
      }
      else
      {
        v70 = 0;
        v155 = (uint8_t *)(v154 + 32);
        v71 = *(_QWORD *)(v159 + 16);
        v72 = 16 * v71;
        do
        {
          v73 = *(_QWORD *)&v155[8 * v70];
          v159 = (uint64_t)v8;
          v74 = *((_QWORD *)v8 + 3);
          v12 = v71 + v70 + 1;
          swift_retain();
          if (v71 + v70 >= v74 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v71 + v70 + 1, 1);
            v8 = (char *)v159;
          }
          ++v70;
          *((_QWORD *)v8 + 2) = v12;
          v75 = &v8[v72];
          *((_QWORD *)v75 + 4) = v73;
          *((_QWORD *)v75 + 5) = v16;
          v72 += 16;
        }
        while (a2 != v70);
        swift_bridgeObjectRelease();
        v19 = (char *)MEMORY[0x24BEE4AF8];
        v62 = (void *)v141;
      }
      v63 = v153;
LABEL_27:
      ++v63;
      specialized Array.append<A>(contentsOf:)((uint64_t)v8);
      if ((void *)v63 == v62)
      {
        swift_bridgeObjectRelease_n();
        v76 = v156;
        v57 = v134;
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRelease();
  v76 = MEMORY[0x24BEE4AF8];
LABEL_47:
  *(_QWORD *)&v156 = v76;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((_QWORD **)&v156);
  if (v57)
    goto LABEL_70;
  swift_bridgeObjectRelease();
  v77 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AnimationResourceC04animG0_Si11trackNumbertG_AHs5NeverOTg504_s10d5Kit17fg42CSiACIggyo_AC04animD0_Si11trackNumbertACs5K104OIegnrzr_TR03_s9a60IO15TimelineBuilderC3run6inputsyAA6InputsC_tFyyXEfU_0A3Kit17cd7CAJ_SitQ3U3_Tf3nnnpf_nTf1cn_n(v156);
  swift_release();
  if (v77 >> 62)
  {
    swift_bridgeObjectRetain();
    v78 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v78)
      goto LABEL_50;
  }
  else
  {
    v78 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v78)
    {
LABEL_50:
      v159 = (uint64_t)v19;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78 & ~(v78 >> 63), 0);
      if ((v78 & 0x8000000000000000) == 0)
      {
        v79 = 0;
        v80 = v159;
        do
        {
          if ((v77 & 0xC000000000000001) != 0)
            MEMORY[0x22E2F57B8](v79, v77);
          else
            swift_retain();
          AnimationResource.definition.getter();
          swift_release();
          v159 = v80;
          v82 = *(_QWORD *)(v80 + 16);
          v81 = *(_QWORD *)(v80 + 24);
          if (v82 >= v81 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
            v80 = v159;
          }
          ++v79;
          *(_QWORD *)(v80 + 16) = v82 + 1;
          outlined init with take of AnimationDefinition(&v156, v80 + 40 * v82 + 32);
        }
        while (v78 != v79);
        goto LABEL_62;
      }
      __break(1u);
LABEL_70:
      result = swift_release();
      __break(1u);
      return result;
    }
  }
LABEL_62:
  swift_bridgeObjectRelease();
  type metadata accessor for AnimationResource();
  (*(void (**)(char *, _QWORD, uint64_t))(v143 + 104))(v146, *MEMORY[0x24BDE7958], v144);
  v159 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7878], MEMORY[0x24BDE7888]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v157 = type metadata accessor for AnimationGroup();
  v158 = MEMORY[0x24BDE7488];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v156);
  AnimationGroup.init(group:name:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  v83 = static AnimationResource.generate(with:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v156);
  v84 = (void *)RIOPxrUsdObjectCopyPath();
  v85 = (void *)RIOPxrSdfPathCopyString();
  v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v88 = v87;

  specialized TimelineBuilder.printDebug(_:key:)(v83, v86, v88);
  swift_bridgeObjectRelease();
  v89 = (void *)RIOPxrUsdObjectCopyPath();
  v90 = (void *)RIOPxrSdfPathCopyString();
  v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v93 = v92;

  swift_retain();
  v94 = v150;
  v95 = (void (*)(__int128 *, _QWORD))AnimationLibraryComponent.animations.modify();
  MEMORY[0x22E2F5020](v83, v91, v93);
  v95(&v156, 0);
  v96 = (void *)RIOPxrUsdObjectCopyPath();
  v97 = (void *)RIOPxrSdfPathCopyString();
  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v100 = v99;

  *(_QWORD *)&v156 = v98;
  *((_QWORD *)&v156 + 1) = v100;
  swift_bridgeObjectRetain();
  v101._object = (void *)0x800000022BD07330;
  v101._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  v102 = v156;
  v103 = AnimationResource.repeat(duration:)();
  v104 = (void (*)(__int128 *, _QWORD))AnimationLibraryComponent.animations.modify();
  MEMORY[0x22E2F5020](v103, v102, *((_QWORD *)&v102 + 1));
  v104(&v156, 0);
  v105 = v142;
  dispatch thunk of Entity.components.getter();
  v106 = v149;
  v107 = v151;
  v108 = v135;
  v135(v149, v94, v151);
  Entity.ComponentSet.set<A>(_:)();
  v137((uint64_t)v106, v107);
  v136(v105, v148);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v109 = swift_allocObject();
  *(_OWORD *)(v109 + 16) = xmmword_22BD0C360;
  v108(v106, v94, v107);
  v110 = String.init<A>(describing:)();
  v112 = v111;
  *(_QWORD *)(v109 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v109 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v109 + 32) = v110;
  *(_QWORD *)(v109 + 40) = v112;
  v113 = &unk_255BF9000;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  v114 = static os_log_type_t.info.getter();
  v115 = static OS_os_log.timeline;
  v116 = v114;
  if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, v114))
  {
    swift_retain_n();
    v117 = (uint8_t *)swift_slowAlloc();
    v118 = swift_slowAlloc();
    *(_DWORD *)v117 = 136315138;
    v155 = v117 + 4;
    *(_QWORD *)&v156 = v118;
    Entity.entityPath.getter();
    v119 = MEMORY[0x22E2F5404]();
    v121 = v120;
    swift_bridgeObjectRelease();
    v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v121, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22BC20000, v115, v116, "Storing onto entity with path: %s", v117, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2F898C](v118, -1, -1);
    v122 = v117;
    v113 = &unk_255BF9000;
    MEMORY[0x22E2F898C](v122, -1, -1);
  }
  swift_release();
  v123 = static os_log_type_t.info.getter();
  v124 = *((_QWORD *)v113 + 507);
  v125 = v123;
  if (os_log_type_enabled(v124, v123))
  {
    swift_retain_n();
    v126 = (uint8_t *)swift_slowAlloc();
    v127 = swift_slowAlloc();
    *(_DWORD *)v126 = 136315138;
    v155 = v126 + 4;
    *(_QWORD *)&v156 = v127;
    v128 = (void *)RIOPxrUsdObjectCopyPath();
    v129 = (void *)RIOPxrSdfPathCopyString();
    v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v132 = v131;

    v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v132, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22BC20000, v124, v125, "End TimelineBuilder for prim at path: %s", v126, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2F898C](v127, -1, -1);
    MEMORY[0x22E2F898C](v126, -1, -1);
  }
  swift_release();
  swift_release();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v137)(v150, v151);
}

unint64_t closure #2 in closure #1 in TimelineBuilder.run(inputs:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

_QWORD *Entity.entityPath.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  type metadata accessor for Entity();
  if (HasHierarchy.parent.getter())
  {
    v0 = (_QWORD *)Entity.entityPath.getter();
    swift_release();
  }
  else
  {
    v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v1 = dispatch thunk of Entity.name.getter();
  v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0[2] + 1, 1, v0);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[2 * v6];
  v7[4] = v1;
  v7[5] = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance TimelineBuilder()
{
  uint64_t inited;
  uint64_t v1;
  Swift::Int v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = *(_QWORD *)algn_255BF9FF8;
  *(_QWORD *)(inited + 32) = static TimelineBuilder.OutputName;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 0xD000000000000021;
  *(_QWORD *)(inited + 56) = 0x800000022BD07220;
  *(_BYTE *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

id one-time initialization function for primType()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static TimelineConstants.Timeline.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static TimelineConstants.Track.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static TimelineConstants.Action.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static MeshSortingConstants.MeshSortingGroup.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFile.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.AudioFileGroup.primType = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AudioConstants.MixGroup.primType = (uint64_t)result;
  return result;
}

id static TimelineConstants.Timeline.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static TimelineConstants.Timeline.primType, a1);
}

id static TimelineConstants.Track.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static TimelineConstants.Track.primType, a1);
}

id static TimelineConstants.Action.primType.getter@<X0>(void **a1@<X8>)
{
  return static TimelineConstants.Timeline.primType.getter(&one-time initialization token for primType, (void **)&static TimelineConstants.Action.primType, a1);
}

id static TimelineConstants.Timeline.primType.getter@<X0>(_QWORD *a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  void *v5;

  if (*a1 != -1)
    swift_once();
  v5 = *a2;
  *a3 = *a2;
  return v5;
}

uint64_t type metadata accessor for TimelineTrackAndActionBuilder()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TimelineBuilder()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TimelineConstants()
{
  return &type metadata for TimelineConstants;
}

ValueMetadata *type metadata accessor for TimelineConstants.Timeline()
{
  return &type metadata for TimelineConstants.Timeline;
}

ValueMetadata *type metadata accessor for TimelineConstants.Track()
{
  return &type metadata for TimelineConstants.Track;
}

ValueMetadata *type metadata accessor for TimelineConstants.Action()
{
  return &type metadata for TimelineConstants.Action;
}

uint64_t specialized static Array<A>.getValueOpt(from:time:)()
{
  uint64_t result;
  void *v1;
  uint64_t v2;
  void *v3;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    v2 = RIOPxrVtValueCopyStringArray();
    if (v2)
    {
      v3 = (void *)v2;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();

      return MEMORY[0x24BEE4AF8];
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x24BDE69E8]);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x24BDE6BC0]);
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for ImportSession.EvaluationFault(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x22E2F57C4](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, _QWORD *a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;

  if (!a1[2] || (v51 = a2[2]) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v50 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a2[4];
  v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)*a4;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_30;
  v16 = v11;
  if (v10[3] >= v15)
  {
    if ((a3 & 1) != 0)
    {
      v19 = a1;
      if ((v11 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v19 = a1;
      if ((v16 & 1) != 0)
        goto LABEL_11;
    }
LABEL_14:
    v22 = (_QWORD *)*a4;
    *(_QWORD *)(*a4 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v23 = (uint64_t *)(v22[6] + 16 * v12);
    *v23 = v7;
    v23[1] = v6;
    v24 = (_QWORD *)(v22[7] + 16 * v12);
    *v24 = v8;
    v24[1] = v9;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v22[2] = v27;
    if (v50 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return;
    }
    if (v19[2] < 2uLL)
      goto LABEL_32;
    if (v51 == 1)
      goto LABEL_18;
    v28 = v19 + 7;
    v29 = a2 + 7;
    for (i = 2; ; ++i)
    {
      v32 = *(v28 - 1);
      v31 = *v28;
      swift_bridgeObjectRetain();
      v33 = *(v29 - 1);
      v34 = *v29;
      v35 = (_QWORD *)*a4;
      swift_bridgeObjectRetain();
      v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
      v38 = v35[2];
      v39 = (v37 & 1) == 0;
      v26 = __OFADD__(v38, v39);
      v40 = v38 + v39;
      if (v26)
        break;
      v41 = v37;
      if (v35[3] < v40)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, 1);
        v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
        if ((v41 & 1) != (v42 & 1))
          goto LABEL_33;
      }
      if ((v41 & 1) != 0)
        goto LABEL_11;
      v43 = (_QWORD *)*a4;
      *(_QWORD *)(*a4 + 8 * (v36 >> 6) + 64) |= 1 << v36;
      v44 = (uint64_t *)(v43[6] + 16 * v36);
      *v44 = v32;
      v44[1] = v31;
      v45 = (_QWORD *)(v43[7] + 16 * v36);
      *v45 = v33;
      v45[1] = v34;
      v46 = v43[2];
      v26 = __OFADD__(v46, 1);
      v47 = v46 + 1;
      if (v26)
        goto LABEL_31;
      v43[2] = v47;
      if (v50 == i)
        goto LABEL_18;
      if (i >= a1[2])
        goto LABEL_32;
      if (v51 == i)
        goto LABEL_18;
      v29 += 2;
      v28 += 2;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a3 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    v19 = a1;
    if ((v16 & 1) == 0)
      goto LABEL_14;
LABEL_11:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_34;
  }
LABEL_33:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_34:
  _StringGuts.grow(_:)(30);
  v48._object = (void *)0x800000022BD075A0;
  v48._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v48);
  _print_unlocked<A, B>(_:_:)();
  v49._countAndFlagsBits = 39;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  Swift::Int v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  Swift::Int v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  Swift::Int v118;
  Swift::Int v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  Swift::Int v123;
  _QWORD *v124;
  char *__dst;
  uint64_t v126;
  Swift::Int v127;
  Swift::Int v128;
  uint64_t v129;
  _QWORD v130[3];
  uint64_t v131;
  uint64_t v132;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_158;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_166;
  v123 = v3;
  v118 = result;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_123:
      v117 = v8;
      if (v13 >= 2)
      {
        v109 = *v2;
        do
        {
          v110 = v13 - 2;
          if (v13 < 2)
            goto LABEL_153;
          if (!v109)
            goto LABEL_165;
          v111 = *(_QWORD *)&v11[16 * v110 + 32];
          v112 = *(_QWORD *)&v11[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v109 + 16 * v111), (char *)(v109 + 16 * *(_QWORD *)&v11[16 * v13 + 16]), v109 + 16 * v112, __dst);
          if (v1)
            break;
          if (v112 < v111)
            goto LABEL_154;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if (v110 >= *((_QWORD *)v11 + 2))
            goto LABEL_155;
          v113 = &v11[16 * v110 + 32];
          *(_QWORD *)v113 = v111;
          *((_QWORD *)v113 + 1) = v112;
          v114 = *((_QWORD *)v11 + 2);
          if (v13 > v114)
            goto LABEL_156;
          memmove(&v11[16 * v13 + 16], &v11[16 * v13 + 32], 16 * (v114 - v13));
          *((_QWORD *)v11 + 2) = v114 - 1;
          v13 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_134:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v117 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v117 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v117 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v115 = v2;
  v116 = *v2 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v12 = v123;
  v129 = *v2;
  while (1)
  {
    v14 = v9 + 1;
    v122 = v11;
    if (v9 + 1 >= v12)
      goto LABEL_53;
    v15 = *(_QWORD *)(v10 + 16 * v14 + 8);
    v16 = *(_QWORD *)(v10 + 16 * v9 + 8);
    swift_retain();
    swift_retain();
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.duration.getter();
    v18 = v17;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.duration.getter();
    v20 = v19;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    if (v18 != v20)
    {
      LODWORD(v132) = v18 < v20;
      swift_release();
      swift_release();
LABEL_21:
      v25 = v9 + 1;
      v10 = v129;
      goto LABEL_22;
    }
    v132 = v16;
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.delay.getter();
    v22 = v21;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    AnimationResource.definition.getter();
    __swift_project_boxed_opaque_existential_1(v130, v131);
    dispatch thunk of AnimationDefinition.delay.getter();
    v24 = v23;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
    swift_release();
    swift_release();
    if (v22 < v24)
    {
      LODWORD(v132) = 1;
      goto LABEL_21;
    }
    v25 = v9 + 1;
    v10 = v129;
    if (v22 == v24)
    {
      v26 = v9 + 2;
      if (v15 >= v132)
      {
        if (v26 >= v123)
        {
LABEL_52:
          v14 = v26;
          goto LABEL_53;
        }
        LODWORD(v132) = 0;
      }
      else
      {
        if (v26 >= v123)
          goto LABEL_38;
        LODWORD(v132) = 1;
      }
LABEL_23:
      v120 = v9;
      v27 = (uint64_t *)(v116 + 16 * v26);
      v28 = v26;
      while (1)
      {
        v126 = *v27;
        v29 = *(_QWORD *)(v10 + 16 * v25 + 8);
        swift_retain();
        swift_retain();
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        v31 = v30;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        v33 = v32;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        if (v31 < v33)
        {
          swift_release();
          swift_release();
        }
        else
        {
          if (v31 != v33)
          {
            swift_release();
            swift_release();
LABEL_33:
            v11 = v122;
            v10 = v129;
            if ((v132 & 1) != 0)
            {
              v26 = v28;
              v9 = v120;
              goto LABEL_37;
            }
            goto LABEL_26;
          }
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v130, v131);
          dispatch thunk of AnimationDefinition.delay.getter();
          v35 = v34;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v130, v131);
          dispatch thunk of AnimationDefinition.delay.getter();
          v37 = v36;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
          swift_release();
          swift_release();
          if (v35 >= v37 && (v35 != v37 || v126 >= v29))
            goto LABEL_33;
        }
        v11 = v122;
        v10 = v129;
        if ((v132 & 1) == 0)
        {
          v14 = v28;
          v9 = v120;
          goto LABEL_53;
        }
LABEL_26:
        v27 += 2;
        v26 = v28 + 1;
        v25 = v28;
        v28 = v26;
        if (v26 >= v123)
        {
          v9 = v120;
          goto LABEL_36;
        }
      }
    }
    LODWORD(v132) = 0;
LABEL_22:
    v26 = v9 + 2;
    if (v9 + 2 < v123)
      goto LABEL_23;
LABEL_36:
    v28 = v26;
    v14 = v26;
    if ((_DWORD)v132)
      break;
LABEL_53:
    if (v14 >= v123)
      goto LABEL_75;
    if (__OFSUB__(v14, v9))
      goto LABEL_157;
    if (v14 - v9 >= v118)
      goto LABEL_75;
    v45 = v9 + v118;
    if (__OFADD__(v9, v118))
      goto LABEL_159;
    if (v45 >= v123)
      v45 = v123;
    if (v45 < v9)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if (v14 == v45)
      goto LABEL_75;
    v46 = (_QWORD *)(v10 + 16 * v14);
    v119 = v45;
    v121 = v9;
    while (2)
    {
      v47 = *(_QWORD *)(v10 + 16 * v14 + 8);
      v48 = v9;
      v124 = v46;
      v127 = v14;
      while (1)
      {
        v132 = *(v46 - 1);
        swift_retain();
        swift_retain();
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        v50 = v49;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.duration.getter();
        v52 = v51;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        if (v50 >= v52)
          break;
        swift_release();
        swift_release();
        v53 = v127;
        v10 = v129;
LABEL_71:
        if (!v10)
          goto LABEL_162;
        v58 = *v46;
        v47 = v46[1];
        *(_OWORD *)v46 = *((_OWORD *)v46 - 1);
        *(v46 - 1) = v47;
        *(v46 - 2) = v58;
        v46 -= 2;
        if (v53 == ++v48)
          goto LABEL_62;
      }
      if (v50 == v52)
      {
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.delay.getter();
        v55 = v54;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v130, v131);
        dispatch thunk of AnimationDefinition.delay.getter();
        v57 = v56;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
        swift_release();
        swift_release();
        v53 = v127;
        v10 = v129;
        if (v55 >= v57 && (v55 != v57 || v47 >= v132))
          goto LABEL_62;
        goto LABEL_71;
      }
      swift_release();
      swift_release();
      v53 = v127;
      v10 = v129;
LABEL_62:
      v14 = v53 + 1;
      v46 = v124 + 2;
      v9 = v121;
      if (v14 != v119)
        continue;
      break;
    }
    v14 = v119;
    v11 = v122;
LABEL_75:
    if (v14 < v9)
      goto LABEL_152;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v60 = *((_QWORD *)v11 + 2);
    v59 = *((_QWORD *)v11 + 3);
    v13 = v60 + 1;
    v10 = v129;
    if (v60 >= v59 >> 1)
    {
      v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v11);
      v10 = v129;
      v11 = v108;
    }
    *((_QWORD *)v11 + 2) = v13;
    v61 = v11 + 32;
    v62 = &v11[16 * v60 + 32];
    *(_QWORD *)v62 = v9;
    *((_QWORD *)v62 + 1) = v14;
    v128 = v14;
    if (v60)
    {
      while (2)
      {
        v63 = v13 - 1;
        if (v13 >= 4)
        {
          v68 = &v61[16 * v13];
          v69 = *((_QWORD *)v68 - 8);
          v70 = *((_QWORD *)v68 - 7);
          v74 = __OFSUB__(v70, v69);
          v71 = v70 - v69;
          if (v74)
            goto LABEL_141;
          v73 = *((_QWORD *)v68 - 6);
          v72 = *((_QWORD *)v68 - 5);
          v74 = __OFSUB__(v72, v73);
          v66 = v72 - v73;
          v67 = v74;
          if (v74)
            goto LABEL_142;
          v75 = v13 - 2;
          v76 = &v61[16 * v13 - 32];
          v78 = *(_QWORD *)v76;
          v77 = *((_QWORD *)v76 + 1);
          v74 = __OFSUB__(v77, v78);
          v79 = v77 - v78;
          if (v74)
            goto LABEL_144;
          v74 = __OFADD__(v66, v79);
          v80 = v66 + v79;
          if (v74)
            goto LABEL_147;
          if (v80 >= v71)
          {
            v98 = &v61[16 * v63];
            v100 = *(_QWORD *)v98;
            v99 = *((_QWORD *)v98 + 1);
            v74 = __OFSUB__(v99, v100);
            v101 = v99 - v100;
            if (v74)
              goto LABEL_151;
            v91 = v66 < v101;
          }
          else
          {
LABEL_94:
            if ((v67 & 1) != 0)
              goto LABEL_143;
            v75 = v13 - 2;
            v81 = &v61[16 * v13 - 32];
            v83 = *(_QWORD *)v81;
            v82 = *((_QWORD *)v81 + 1);
            v84 = __OFSUB__(v82, v83);
            v85 = v82 - v83;
            v86 = v84;
            if (v84)
              goto LABEL_146;
            v87 = &v61[16 * v63];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v74 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v74)
              goto LABEL_149;
            if (__OFADD__(v85, v90))
              goto LABEL_150;
            if (v85 + v90 < v66)
              goto LABEL_106;
            v91 = v66 < v90;
          }
          if (v91)
            v63 = v75;
        }
        else
        {
          if (v13 == 3)
          {
            v65 = *((_QWORD *)v11 + 4);
            v64 = *((_QWORD *)v11 + 5);
            v74 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            v67 = v74;
            goto LABEL_94;
          }
          v92 = *((_QWORD *)v11 + 4);
          v93 = *((_QWORD *)v11 + 5);
          v74 = __OFSUB__(v93, v92);
          v85 = v93 - v92;
          v86 = v74;
LABEL_106:
          if ((v86 & 1) != 0)
            goto LABEL_145;
          v94 = &v61[16 * v63];
          v96 = *(_QWORD *)v94;
          v95 = *((_QWORD *)v94 + 1);
          v74 = __OFSUB__(v95, v96);
          v97 = v95 - v96;
          if (v74)
            goto LABEL_148;
          if (v97 < v85)
            goto LABEL_15;
        }
        v102 = v63 - 1;
        if (v63 - 1 >= v13)
        {
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        if (!v10)
          goto LABEL_163;
        v103 = &v61[16 * v102];
        v104 = *(_QWORD *)v103;
        v105 = &v61[16 * v63];
        v106 = *((_QWORD *)v105 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 16 * *(_QWORD *)v103), (char *)(v10 + 16 * *(_QWORD *)v105), v10 + 16 * v106, __dst);
        if (v1)
          goto LABEL_134;
        if (v106 < v104)
          goto LABEL_138;
        if (v63 > *((_QWORD *)v11 + 2))
          goto LABEL_139;
        *(_QWORD *)v103 = v104;
        *(_QWORD *)&v61[16 * v102 + 8] = v106;
        v107 = *((_QWORD *)v11 + 2);
        if (v63 >= v107)
          goto LABEL_140;
        v13 = v107 - 1;
        memmove(&v61[16 * v63], v105 + 16, 16 * (v107 - 1 - v63));
        *((_QWORD *)v11 + 2) = v107 - 1;
        v10 = v129;
        if (v107 <= 2)
          goto LABEL_15;
        continue;
      }
    }
    v13 = 1;
LABEL_15:
    v12 = v123;
    v9 = v128;
    if (v128 >= v123)
    {
      v8 = v117;
      v2 = v115;
      goto LABEL_123;
    }
  }
LABEL_37:
  if (v28 >= v9)
  {
LABEL_38:
    if (v9 < v26)
    {
      v38 = 16 * v26;
      v39 = 16 * v9;
      v40 = v26;
      v41 = v9;
      while (1)
      {
        if (v41 != --v40)
        {
          if (!v10)
            goto LABEL_164;
          v42 = v10 + v38;
          v43 = *(_QWORD *)(v10 + v39);
          v44 = *(_QWORD *)(v10 + v39 + 8);
          *(_OWORD *)(v10 + v39) = *(_OWORD *)(v10 + v38 - 16);
          *(_QWORD *)(v42 - 16) = v43;
          *(_QWORD *)(v42 - 8) = v44;
        }
        ++v41;
        v38 -= 16;
        v39 += 16;
        if (v41 >= v40)
          goto LABEL_52;
      }
    }
    goto LABEL_52;
  }
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v18 = result;
  if (a3 != a2)
  {
    v20 = *a4;
    v4 = (_QWORD *)(*a4 + 16 * a3);
LABEL_5:
    v5 = *(_QWORD *)(v20 + 16 * a3 + 8);
    v6 = v18;
    v19 = v4;
    v21 = a3;
    while (1)
    {
      v24 = *(v4 - 1);
      swift_retain();
      swift_retain();
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v22, v23);
      dispatch thunk of AnimationDefinition.duration.getter();
      v8 = v7;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v22, v23);
      dispatch thunk of AnimationDefinition.duration.getter();
      v10 = v9;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      if (v8 >= v10)
      {
        if (v8 != v10)
        {
          swift_release();
          result = swift_release();
          v11 = v21;
LABEL_4:
          a3 = v11 + 1;
          v4 = v19 + 2;
          if (a3 == a2)
            return result;
          goto LABEL_5;
        }
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v22, v23);
        dispatch thunk of AnimationDefinition.delay.getter();
        v13 = v12;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v22, v23);
        dispatch thunk of AnimationDefinition.delay.getter();
        v15 = v14;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
        swift_release();
        result = swift_release();
        v11 = v21;
        if (v13 >= v15 && (v13 != v15 || v5 >= v24))
          goto LABEL_4;
      }
      else
      {
        swift_release();
        result = swift_release();
        v11 = v21;
      }
      if (!v20)
        break;
      v16 = *v4;
      v5 = v4[1];
      *(_OWORD *)v4 = *((_OWORD *)v4 - 1);
      *(v4 - 1) = v5;
      *(v4 - 2) = v16;
      v4 -= 2;
      if (v11 == ++v6)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  char *v37;
  uint64_t result;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v47;
  _QWORD v48[3];
  uint64_t v49;
  char *v50;
  const void *v51;
  char *v52;

  v4 = a2;
  v5 = __src;
  v6 = a2 - __src;
  v7 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v7 = a2 - __src;
  v8 = v7 >> 4;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 4;
  v52 = __src;
  v51 = __dst;
  v42 = __dst;
  if (v8 >= v10 >> 4)
  {
    if (v9 < -15)
      goto LABEL_55;
    if (__dst != a2 || &a2[16 * v11] <= __dst)
    {
      memmove(__dst, a2, 16 * v11);
      __dst = v42;
    }
    v23 = &__dst[16 * v11];
    v50 = v23;
    v52 = v4;
    if (v5 >= v4 || v9 < 16)
    {
LABEL_54:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v52, &v51, &v50);
      return 1;
    }
    v24 = (char *)(a3 - 16);
    v25 = v4;
    v39 = v5;
    while (1)
    {
      v45 = v24 + 16;
      v47 = v23;
      v26 = *((_QWORD *)v23 - 1);
      v23 -= 16;
      v27 = *((_QWORD *)v25 - 1);
      v25 -= 16;
      v40 = v27;
      v41 = v26;
      swift_retain();
      swift_retain();
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v48, v49);
      dispatch thunk of AnimationDefinition.duration.getter();
      v29 = v28;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
      AnimationResource.definition.getter();
      __swift_project_boxed_opaque_existential_1(v48, v49);
      dispatch thunk of AnimationDefinition.duration.getter();
      v31 = v30;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
      if (v29 < v31)
        break;
      if (v29 == v31)
      {
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.delay.getter();
        v34 = v33;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.delay.getter();
        v36 = v35;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        swift_release();
        swift_release();
        v32 = (unint64_t)v39;
        if (v34 < v36 || v34 == v36 && v41 < v40)
          goto LABEL_46;
      }
      else
      {
        swift_release();
        swift_release();
        v32 = (unint64_t)v39;
      }
      v50 = v23;
      v37 = v42;
      if (v45 < v47 || v24 >= v47 || v45 != v47)
        *(_OWORD *)v24 = *(_OWORD *)v23;
      v25 = v4;
      if ((unint64_t)v4 <= v32)
        goto LABEL_54;
LABEL_38:
      v24 -= 16;
      v4 = v25;
      if (v23 <= v37)
        goto LABEL_54;
    }
    swift_release();
    swift_release();
    v32 = (unint64_t)v39;
LABEL_46:
    v23 = v47;
    v37 = v42;
    if (v45 != v4 || v24 >= v4)
      *(_OWORD *)v24 = *(_OWORD *)v25;
    v52 = v25;
    if ((unint64_t)v25 <= v32)
      goto LABEL_54;
    goto LABEL_38;
  }
  if (v6 >= -15)
  {
    if (__dst != __src || &__src[16 * v8] <= __dst)
    {
      memmove(__dst, __src, 16 * v8);
      __dst = v42;
    }
    v43 = &__dst[16 * v8];
    v50 = v43;
    if ((unint64_t)v4 < a3 && v6 >= 16)
    {
      while (1)
      {
        v44 = *((_QWORD *)v4 + 1);
        v12 = *((_QWORD *)__dst + 1);
        v13 = __dst;
        swift_retain();
        swift_retain();
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.duration.getter();
        v15 = v14;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        AnimationResource.definition.getter();
        __swift_project_boxed_opaque_existential_1(v48, v49);
        dispatch thunk of AnimationDefinition.duration.getter();
        v17 = v16;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        if (v15 >= v17)
        {
          if (v15 != v17)
          {
            swift_release();
            swift_release();
LABEL_23:
            if (v5 != v13)
              *(_OWORD *)v5 = *(_OWORD *)v13;
            __dst = v13 + 16;
            v51 = v13 + 16;
            v22 = v4;
            goto LABEL_26;
          }
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v48, v49);
          dispatch thunk of AnimationDefinition.delay.getter();
          v19 = v18;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
          AnimationResource.definition.getter();
          __swift_project_boxed_opaque_existential_1(v48, v49);
          dispatch thunk of AnimationDefinition.delay.getter();
          v21 = v20;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
          swift_release();
          swift_release();
          if (v19 >= v21 && (v19 != v21 || v44 >= v12))
            goto LABEL_23;
        }
        else
        {
          swift_release();
          swift_release();
        }
        v22 = v4 + 16;
        __dst = v13;
        if (v5 < v4 || v5 >= v22 || v5 != v4)
          *(_OWORD *)v5 = *(_OWORD *)v4;
LABEL_26:
        v5 += 16;
        v52 = v5;
        if (__dst < v43)
        {
          v4 = v22;
          if ((unint64_t)v22 < a3)
            continue;
        }
        goto LABEL_54;
      }
    }
    goto LABEL_54;
  }
LABEL_55:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Half>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationResource] and conformance [A], &demangling cache variable for type metadata for [AnimationResource], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationResource]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for AnimationResource();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [RIOBuilderDirtyStageDescriptorRef] and conformance [A], &demangling cache variable for type metadata for [RIOBuilderDirtyStageDescriptorRef], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RIOBuilderDirtyStageDescriptorRef]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for RIOBuilderDirtyStageDescriptorRef(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

double specialized TimelineBuilder.startTimeAndDuration(for:)()
{
  id v0;
  void *v1;
  double v2;
  char v3;
  char v4;
  id v5;
  void *v6;
  double v7;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  v2 = COERCE_DOUBLE(specialized Prim.attributeValue<A>(of:type:)());
  v4 = v3;

  if (String.count.getter() < 1)
    v5 = (id)RIOPxrTfTokenEmpty();
  else
    v5 = (id)RIOPxrTfTokenCreateWithCString();
  v6 = v5;
  if ((v4 & 1) != 0)
    v7 = 0.0;
  else
    v7 = v2;
  specialized Prim.attributeValue<A>(of:type:)();

  return v7;
}

uint64_t specialized TimelineBuilder.handleLooping(action:for:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, double), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for AnimationFillMode();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AnimationRepeatMode();
  v25 = *(_QWORD *)(v9 - 8);
  v26 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a3(0, v13);
  v28 = v16;
  v29 = a4;
  v22[1] = a4;
  __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(void))(*(_QWORD *)(v16 - 8) + 16))();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  if (String.count.getter() < 1)
    v17 = (id)RIOPxrTfTokenEmpty();
  else
    v17 = (id)RIOPxrTfTokenCreateWithCString();
  v18 = v17;
  specialized Prim.attributeValue<A>(of:type:)();

  __swift_project_boxed_opaque_existential_1(v27, v28);
  type metadata accessor for AnimationResource();
  v19 = type metadata accessor for BindTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v15, 1, 1, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v11, *MEMORY[0x24BDE7960], v26);
  default argument 6 of static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  v20 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v26);
  outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for BindTarget?);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
  return v20;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;

  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      type metadata accessor for RIOPxrTfTokenRef(0);
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x22E2F57B8](v3 - 4, a1);
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_13;
        }
        else
        {
          v5 = *(_QWORD *)(a1 + 8 * v3);
          swift_retain();
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        v7 = (void *)RIOPxrUsdObjectCopyName();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
        v8 = static _CFObject.== infix(_:_:)();

        if ((v8 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
        swift_release();
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized TimelineBuilder.createNotificationAction(for:inputs:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  id v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v2 = (_QWORD *)type metadata accessor for AnimationFillMode();
  v54 = *(v2 - 1);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AnimationRepeatMode();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NotificationAction();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v55 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for targetPathAttributeName != -1)
LABEL_50:
    swift_once();
  v56 = a1;
  v15 = (id)static ToolsFoundations.Token.targetPathAttributeName;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    v57 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  v16 = RIOPxrUsdPrimCopyRelationship();

  type metadata accessor for Relationship();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v16;
  Relationship.targets.getter();
  swift_bridgeObjectRelease();
  outlined consume of Result<AnyAttribute, Object.Error>(v17, 0);
  v18 = String.count.getter();
  v53 = v11;
  if (v18 <= 0)
    v19 = (id)RIOPxrTfTokenEmpty();
  else
    v19 = (id)RIOPxrTfTokenCreateWithCString();
  a1 = (uint64_t)v19;
  v48 = specialized Prim.attributeValue<A>(of:type:)();
  v22 = v21;

  v47 = v22;
  if (!v22)
    return 0;
  v44 = v13;
  v51 = v12;
  v46 = v4;
  v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v24 = Prim.children.getter();
  v4 = v24;
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      a1 = v24;
    else
      a1 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v25 = (uint64_t)v53;
  v45 = v8;
  v52 = v2;
  v49 = v6;
  v50 = v5;
  if (!v13)
  {
    swift_bridgeObjectRelease_n();
    v28 = v46;
    goto LABEL_45;
  }
  v43 = v23;
  type metadata accessor for RIOPxrTfTokenRef(0);
  v5 = v4 & 0xC000000000000001;
  v8 = 4;
  while (1)
  {
    v11 = (char *)(v8 - 4);
    if (v5)
    {
      v6 = MEMORY[0x22E2F57B8](v8 - 4, v4);
      v12 = v8 - 3;
      if (__OFADD__(v11, 1))
        goto LABEL_49;
    }
    else
    {
      v6 = *(_QWORD *)(v4 + 8 * v8);
      swift_retain();
      v12 = v8 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
    }
    v26 = (void *)RIOPxrUsdPrimCopyTypeName();
    v27 = String.count.getter() < 1
        ? (id)RIOPxrTfTokenEmpty()
        : (_QWORD *)RIOPxrTfTokenCreateWithCString();
    v2 = v27;
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    a1 = static _CFObject.== infix(_:_:)();

    if ((a1 & 1) != 0)
      break;
    swift_release();
    ++v8;
    if (v12 == v13)
    {
      swift_bridgeObjectRelease_n();
      v28 = v46;
      v6 = v49;
      v5 = v50;
      v25 = (uint64_t)v53;
      goto LABEL_45;
    }
  }
  swift_bridgeObjectRelease_n();
  v29 = String.count.getter();
  v25 = (uint64_t)v53;
  if (v29 < 1)
    v30 = (id)RIOPxrTfTokenEmpty();
  else
    v30 = (id)RIOPxrTfTokenCreateWithCString();
  v31 = v30;
  v28 = v46;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

LABEL_44:
    v6 = v49;
    v5 = v50;
    goto LABEL_45;
  }
  v32 = (void *)RIOPxrUsdPrimCopyAttribute();
  v33 = (_QWORD *)specialized static Array<A>.getValueOpt(from:time:)();

  if (!v33)
  {
    swift_release();
    goto LABEL_44;
  }
  if (String.count.getter() < 1)
    v34 = (id)RIOPxrTfTokenEmpty();
  else
    v34 = (id)RIOPxrTfTokenCreateWithCString();
  v35 = v34;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();
    swift_bridgeObjectRelease();

    goto LABEL_44;
  }
  v36 = (void *)RIOPxrUsdPrimCopyAttribute();
  v37 = (_QWORD *)specialized static Array<A>.getValueOpt(from:time:)();

  if (!v37)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  if (v37[2] >= v33[2])
    v38 = v33[2];
  else
    v38 = v37[2];
  if (v38)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v39 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v39 = MEMORY[0x24BEE4B00];
  }
  v57 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v33, v37, 1, &v57);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v49;
  v5 = v50;
LABEL_45:
  NotificationAction.init(name:customArguments:)();
  specialized TimelineBuilder.startTimeAndDuration(for:)();
  type metadata accessor for AnimationResource();
  v40 = type metadata accessor for BindTarget();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v25, 1, 1, v40);
  v41 = v45;
  (*(void (**)(uint64_t, _QWORD, unint64_t))(v6 + 104))(v45, *MEMORY[0x24BDE7958], v5);
  v57 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7878], MEMORY[0x24BDE7888]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v20 = static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  (*(void (**)(uint64_t, _QWORD *))(v54 + 8))(v28, v52);
  (*(void (**)(uint64_t, unint64_t))(v49 + 8))(v41, v50);
  outlined destroy of Any?(v25, &demangling cache variable for type metadata for BindTarget?);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v55, v51);
  return v20;
}

__n128 specialized TimelineBuilder.transform(for:)()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  int8x16_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v15;
  int8x16_t v16;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  specialized Prim.attributeValue<A>(of:type:)();

  if (String.count.getter() < 1)
    v2 = (id)RIOPxrTfTokenEmpty();
  else
    v2 = (id)RIOPxrTfTokenCreateWithCString();
  v3 = v2;
  specialized Prim.attributeValue<A>(of:type:)();

  if (String.count.getter() < 1)
    v4 = (id)RIOPxrTfTokenEmpty();
  else
    v4 = (id)RIOPxrTfTokenCreateWithCString();
  v6 = v4;
  v5.i32[0] = 0;
  v15 = v5;
  v7 = specialized Prim.attributeValue<A>(of:type:)();
  v9 = v8;
  v11 = v10;

  v12.i32[0] = v11 & 1;
  v13.i64[0] = v7;
  v13.i64[1] = v9;
  v16 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v12, v15), 0), v13, (int8x16_t)xmmword_22BD0C6D0);
  static simd_quatf.identity.getter();
  return (__n128)v16;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO4PrimCG_Say0D3Kit17AnimationResourceCGs5NeverOTg503_s9d57IO15TimelineBuilderC13createActions3for6inputsSay0A3Kit17hi7CGSgAA4F22C_AA6InputsCtFAjMXEfU_AF0mN0CAF0W0CTf1cn_nTf4ngg_n(unint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  NSObject *log;
  uint64_t v26;
  os_log_type_t type;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v6)
      break;
    v32 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    result = v32;
    v29 = v5 & 0xC000000000000001;
    v24 = a3;
    while (v6 != v8)
    {
      v30 = result;
      if (v29)
      {
        v9 = MEMORY[0x22E2F57B8](v8, v5);
      }
      else
      {
        v9 = *(_QWORD *)(v5 + 8 * v8 + 32);
        swift_retain();
      }
      v10 = static os_log_type_t.info.getter();
      if (one-time initialization token for timeline != -1)
        swift_once();
      v11 = static OS_os_log.timeline;
      if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, v10))
      {
        swift_retain_n();
        v26 = swift_slowAlloc();
        v28 = swift_slowAlloc();
        v31 = v28;
        *(_DWORD *)v26 = 136315138;
        v12 = (void *)RIOPxrUsdObjectCopyPath();
        type = v10;
        v13 = v6;
        v14 = a2;
        v15 = (void *)RIOPxrSdfPathCopyString();
        log = v11;
        v16 = v5;
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v19 = v18;

        a3 = v24;
        a2 = v14;
        v6 = v13;
        v20 = v17;
        v5 = v16;
        *(_QWORD *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v31);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22BC20000, log, type, "Start producing an EntityAction for prim at path: %s", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2F898C](v28, -1, -1);
        MEMORY[0x22E2F898C](v26, -1, -1);
      }
      v21 = TimelineBuilder.createAction(for:inputs:)(v9, a3);
      swift_release();
      result = v30;
      v32 = v30;
      v23 = *(_QWORD *)(v30 + 16);
      v22 = *(_QWORD *)(v30 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        result = v32;
      }
      ++v8;
      *(_QWORD *)(result + 16) = v23 + 1;
      *(_QWORD *)(result + 8 * v23 + 32) = v21;
      if (v6 == v8)
        return result;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void *v29;
  os_log_type_t type;
  NSObject *log;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = a1;
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v34 = v5 & 0xC000000000000001;
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v8 = 4;
      v28 = v6;
      v29 = a3;
      while (1)
      {
        v9 = v8 - 4;
        if (v34)
        {
          v10 = MEMORY[0x22E2F57B8](v8 - 4, v5);
          v11 = v8 - 3;
          if (__OFADD__(v9, 1))
            goto LABEL_20;
        }
        else
        {
          v10 = *(_QWORD *)(v5 + 8 * v8);
          swift_retain();
          v11 = v8 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        v12 = static os_log_type_t.info.getter();
        if (one-time initialization token for timeline != -1)
          swift_once();
        v35 = v11;
        v13 = static OS_os_log.timeline;
        if (os_log_type_enabled((os_log_t)static OS_os_log.timeline, v12))
        {
          swift_retain_n();
          v33 = v7;
          v14 = swift_slowAlloc();
          v32 = swift_slowAlloc();
          v36 = v32;
          *(_DWORD *)v14 = 136315138;
          v15 = (void *)RIOPxrUsdObjectCopyPath();
          log = v13;
          v16 = v5;
          v17 = (void *)RIOPxrSdfPathCopyString();
          v18 = a2;
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          type = v12;
          v21 = v20;

          a3 = v29;
          v5 = v16;
          v22 = v19;
          a2 = v18;
          v6 = v28;
          *(_QWORD *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v36);
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22BC20000, log, type, "Start producing a Track for prim at path: %s", (uint8_t *)v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22E2F898C](v32, -1, -1);
          v23 = v14;
          v7 = v33;
          MEMORY[0x22E2F898C](v23, -1, -1);
        }
        v24 = TimelineBuilder.createActions(for:inputs:)(v10, a3);
        swift_release();
        if (v24)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          v26 = v7[2];
          v25 = v7[3];
          if (v26 >= v25 >> 1)
            v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v7);
          v7[2] = v26 + 1;
          v7[v26 + 4] = v24;
        }
        ++v8;
        if (v35 == v6)
          goto LABEL_23;
      }
    }
  }
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say10RealityKit17AnimationResourceCG_Sits5NeverOTg509_sSiSay10d5Kit17fg10CGSiIgyod_j8AD_Sits5H11OIegnrzr_TRSiAJSiIgyod_Tf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v7 = result;
  v14 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if (a2 >= v7 && (v3 & 0x8000000000000000) == 0)
  {
    v4 = v14;
    while (a2 != v7)
    {
      result = a3(v7);
      v8 = result;
      v10 = v9;
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      v13 = v14 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
      if (a2 == ++v7)
        return v4;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized TimelineBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  if (one-time initialization token for primType != -1)
    swift_once();
  v9 = static TimelineConstants.Timeline.primType;
  v0 = (id)static TimelineConstants.Timeline.primType;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()();
  v3 = v9;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v9 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized TimelineBuilder.inputDescriptors()()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C760;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v4 = static EntityBuilder.OutputIdentifier;
  v5 = *(_QWORD *)algn_255BFA2C8;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_BYTE *)(inited + 80) = 112;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C760;
  v7 = one-time initialization token for primType;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = (void *)static TimelineConstants.Track.primType;
  *(_QWORD *)(v6 + 32) = static TimelineConstants.Track.primType;
  v9 = one-time initialization token for primType;
  v10 = v8;
  if (v9 != -1)
    swift_once();
  v11 = (void *)static TimelineConstants.Action.primType;
  *(_QWORD *)(v6 + 40) = static TimelineConstants.Action.primType;
  v12 = one-time initialization token for realityKitStruct;
  v13 = v11;
  if (v12 != -1)
    swift_once();
  v14 = (void *)static ToolsFoundations.Token.realityKitStruct;
  *(_QWORD *)(v6 + 48) = static ToolsFoundations.Token.realityKitStruct;
  *(_QWORD *)(inited + 88) = 0xD000000000000010;
  *(_QWORD *)(inited + 96) = 0x800000022BD07250;
  *(_QWORD *)(inited + 104) = 0xD000000000000027;
  *(_QWORD *)(inited + 112) = 0x800000022BD071F0;
  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 128) = 1;
  *(_BYTE *)(inited + 136) = 64;
  v15 = static EntityBuilder.OutputIdentifier;
  v16 = *(_QWORD *)algn_255BFA2C8;
  *(_QWORD *)(inited + 144) = 0xD000000000000010;
  *(_QWORD *)(inited + 152) = 0x800000022BD07270;
  *(_QWORD *)(inited + 160) = v15;
  *(_QWORD *)(inited + 168) = v16;
  *(_QWORD *)(inited + 176) = closure #1 in TimelineBuilder.inputDescriptors();
  *(_QWORD *)(inited + 184) = 0;
  *(_BYTE *)(inited + 192) = -127;
  v17 = v14;
  swift_bridgeObjectRetain();
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v19 = v18;
  swift_setDeallocating();
  swift_arrayDestroy();
  return v19;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1;
  v28 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_43;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
LABEL_3:
    v5 = 0;
    v25 = v3;
    v26 = v3 & 0xC000000000000001;
    v6 = *(_QWORD *)(a2 + 16);
    v24 = v4;
    while (1)
    {
      if (v26)
      {
        MEMORY[0x22E2F57B8](v5, v3);
        v7 = __OFADD__(v5++, 1);
        if (v7)
          goto LABEL_42;
      }
      else
      {
        swift_retain();
        v7 = __OFADD__(v5++, 1);
        if (v7)
          goto LABEL_42;
      }
      if (v6)
        break;
      swift_release();
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_5:
      specialized Array.append<A>(contentsOf:)((uint64_t)v9);
      if (v5 == v4)
      {
        swift_bridgeObjectRelease();
        return v28;
      }
    }
    v27 = v5;
    swift_bridgeObjectRetain();
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v10 = *(id *)(a2 + 8 * v8 + 32);
      if (RIOPxrUsdPrimHasRelationship())
      {
        v11 = RIOPxrUsdPrimCopyRelationship();
        type metadata accessor for Relationship();
        v12 = (_QWORD *)swift_allocObject();
        v12[2] = v11;
        v13 = Relationship.targets.getter();
        outlined consume of Result<AnyAttribute, Object.Error>(v12, 0);

      }
      else
      {
        lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
        swift_willThrowTypedImpl();
        outlined consume of Result<AnyAttribute, Object.Error>(0, 1);

        v13 = MEMORY[0x24BEE4AF8];
      }
      v3 = *(_QWORD *)(v13 + 16);
      v14 = v9[2];
      v15 = v14 + v3;
      if (__OFADD__(v14, v3))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        if (!v4)
          break;
        goto LABEL_3;
      }
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v15 <= v9[3] >> 1)
      {
        if (*(_QWORD *)(v13 + 16))
          goto LABEL_27;
      }
      else
      {
        if (v14 <= v15)
          v17 = v14 + v3;
        else
          v17 = v14;
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v17, 1, v9);
        if (*(_QWORD *)(v13 + 16))
        {
LABEL_27:
          v18 = v9[2];
          if ((v9[3] >> 1) - v18 < v3)
            goto LABEL_40;
          v19 = (unint64_t)&v9[v18 + 4];
          if (v13 + 32 < v19 + 8 * v3 && v19 < v13 + 32 + 8 * v3)
          {
            result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v3)
          {
            v21 = v9[2];
            v7 = __OFADD__(v21, v3);
            v22 = v21 + v3;
            if (v7)
              goto LABEL_41;
            v9[2] = v22;
          }
          goto LABEL_14;
        }
      }
      if (v3)
        goto LABEL_39;
LABEL_14:
      swift_bridgeObjectRelease();
      if (v6 == ++v8)
      {
        swift_release();
        swift_bridgeObjectRelease();
        v4 = v24;
        v3 = v25;
        v5 = v27;
        goto LABEL_5;
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized TimelineBuilder.printDebug(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  int v39;
  unint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t *v43;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[5];
  _QWORD v62[3];
  uint64_t v63;

  v57 = a2;
  v58 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationView?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnimationView();
  v8 = *(char **)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationGroup?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AnimationGroup();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v51 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.debug.getter();
  if (one-time initialization token for timeline != -1)
LABEL_21:
    swift_once();
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v16 = swift_allocObject();
  v47 = xmmword_22BD0C360;
  *(_OWORD *)(v16 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE0D00];
  v53 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v16 + 64) = v53;
  *(_QWORD *)(v16 + 32) = v57;
  *(_QWORD *)(v16 + 40) = a3;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  AnimationResource.definition.getter();
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
  v17 = swift_dynamicCast();
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (!v17)
  {
    v18(v12, 1, 1, v13);
    goto LABEL_18;
  }
  v18(v12, 0, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
LABEL_18:
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for AnimationGroup?);
    static os_log_type_t.debug.getter();
    return os_log(_:dso:log:_:_:)();
  }
  v45 = v14;
  v19 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v46 = v13;
  v19(v51, v12, v13);
  v20 = *(_QWORD *)(AnimationGroup.group.getter() + 16);
  swift_bridgeObjectRelease();
  v50 = v20;
  if (v20)
  {
    v14 = 0;
    a3 = 32;
    v49 = xmmword_22BD0C770;
    while (1)
    {
      v25 = AnimationGroup.group.getter();
      if (v14 >= *(_QWORD *)(v25 + 16))
      {
        __break(1u);
        goto LABEL_21;
      }
      v55 = a3;
      outlined init with copy of AnimationDefinition(v25 + a3, (uint64_t)v62);
      swift_bridgeObjectRelease();
      LODWORD(v57) = static os_log_type_t.debug.getter();
      v58 = static OS_os_log.timeline;
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v49;
      v56 = v14;
      v61[0] = v14;
      v27 = dispatch thunk of CustomStringConvertible.description.getter();
      v28 = MEMORY[0x24BEE0D00];
      v29 = v53;
      *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v26 + 64) = v29;
      *(_QWORD *)(v26 + 32) = v27;
      *(_QWORD *)(v26 + 40) = v30;
      outlined init with copy of AnimationDefinition((uint64_t)v62, (uint64_t)v61);
      v31 = String.init<A>(describing:)();
      *(_QWORD *)(v26 + 96) = v28;
      *(_QWORD *)(v26 + 104) = v29;
      *(_QWORD *)(v26 + 72) = v31;
      *(_QWORD *)(v26 + 80) = v32;
      v13 = (uint64_t)v6;
      v12 = v8;
      __swift_project_boxed_opaque_existential_1(v62, v63);
      dispatch thunk of AnimationDefinition.delay.getter();
      v33 = Double.description.getter();
      *(_QWORD *)(v26 + 136) = v28;
      *(_QWORD *)(v26 + 144) = v29;
      *(_QWORD *)(v26 + 112) = v33;
      *(_QWORD *)(v26 + 120) = v34;
      __swift_project_boxed_opaque_existential_1(v62, v63);
      dispatch thunk of AnimationDefinition.duration.getter();
      v35 = Double.description.getter();
      *(_QWORD *)(v26 + 176) = v28;
      *(_QWORD *)(v26 + 184) = v29;
      *(_QWORD *)(v26 + 152) = v35;
      *(_QWORD *)(v26 + 160) = v36;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      outlined init with copy of AnimationDefinition((uint64_t)v62, (uint64_t)v61);
      v37 = swift_dynamicCast();
      v38 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v8 + 7);
      if (!v37)
        break;
      v38(v6, 0, 1, v7);
      v39 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v8 + 6))(v6, 1, v7);
      v41 = v55;
      v40 = v56;
      if (v39 == 1)
        goto LABEL_14;
      v13 = (uint64_t)v48;
      (*((void (**)(char *, char *, uint64_t))v8 + 4))(v48, v6, v7);
      AnimationView.source.getter();
      if (!v60)
      {
        (*((void (**)(uint64_t, uint64_t))v8 + 1))(v13, v7);
        v42 = &v59;
        v43 = (uint64_t *)&demangling cache variable for type metadata for AnimationDefinition?;
        goto LABEL_15;
      }
      outlined init with take of AnimationDefinition(&v59, (uint64_t)v61);
      static os_log_type_t.debug.getter();
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = v47;
      outlined init with copy of AnimationDefinition((uint64_t)v61, (uint64_t)&v59);
      v22 = String.init<A>(describing:)();
      v23 = v53;
      *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v21 + 64) = v23;
      *(_QWORD *)(v21 + 32) = v22;
      *(_QWORD *)(v21 + 40) = v24;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
      (*((void (**)(uint64_t, uint64_t))v8 + 1))(v13, v7);
LABEL_8:
      v14 = v40 + 1;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v62);
      a3 = v41 + 40;
      if (v50 == v14)
        return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v51, v46);
    }
    v38(v6, 1, 1, v7);
    v41 = v55;
    v40 = v56;
LABEL_14:
    v42 = (__int128 *)v6;
    v43 = &demangling cache variable for type metadata for AnimationView?;
LABEL_15:
    outlined destroy of Any?((uint64_t)v42, v43);
    goto LABEL_8;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v51, v46);
}

uint64_t specialized TimelineBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(__int128 *, _QWORD);
  char *v26;
  void (*v27)(char *, uint64_t);
  _QWORD v28[3];
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationLibraryComponent?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Entity.ComponentSet();
  v3 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v28 - v6;
  v8 = type metadata accessor for AnimationLibraryComponent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v28 - v13;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v15 = static EntityBuilder.OutputName;
  v16 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v15, v16, &v32);
  if (!v33)
  {
    outlined destroy of Any?((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  v17 = v31;
  swift_bridgeObjectRelease();
  v28[2] = Inputs.prim.getter();
  type metadata accessor for Entity();
  static Entity.__fromCore(_:)();
  dispatch thunk of Entity.components.getter();
  Entity.ComponentSet.subscript.getter();
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v7, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1, v8) == 1)
  {
    swift_release();
    swift_release();
    swift_release();
    return outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for AnimationLibraryComponent?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v2, v8);
    v20 = (void *)RIOPxrUsdObjectCopyPath();
    v21 = (void *)RIOPxrSdfPathCopyString();
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28[1] = v17;
    v24 = v23;

    v25 = (void (*)(__int128 *, _QWORD))AnimationLibraryComponent.animations.modify();
    MEMORY[0x22E2F5020](0, v22, v24);
    v25(&v32, 0);
    v26 = v29;
    dispatch thunk of Entity.components.getter();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    Entity.ComponentSet.set<A>(_:)();
    swift_release();
    swift_release();
    swift_release();
    v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v11, v8);
    v18(v26, v30);
    return ((uint64_t (*)(char *, uint64_t))v27)(v14, v8);
  }
}

uint64_t partial apply for closure #1 in TimelineBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in TimelineBuilder.run(inputs:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_22BC46AC8()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t partial apply for closure #2 in closure #1 in TimelineBuilder.run(inputs:)(unint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in TimelineBuilder.run(inputs:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with take of AnimationDefinition(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with copy of AnimationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t type metadata accessor for TimelineBuilder.BindPathWrapper()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TimelineBuilder.BindPathWrapper;
  if (!type metadata singleton initialization cache for TimelineBuilder.BindPathWrapper)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimelineBuilder.BindPathWrapper(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in TimelineBuilder.createReplaceBehaviorAction(for:inputs:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t outlined init with take of TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimelineBuilder.BindPathWrapper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TimelineBuilder.Error and conformance TimelineBuilder.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineBuilder.Error and conformance TimelineBuilder.Error;
  if (!lazy protocol witness table cache variable for type TimelineBuilder.Error and conformance TimelineBuilder.Error)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for TimelineBuilder.Error, &type metadata for TimelineBuilder.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineBuilder.Error and conformance TimelineBuilder.Error);
  }
  return result;
}

uint64_t outlined init with copy of BindTarget.EntityPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget.EntityPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of BindTarget.EntityPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget.EntityPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [AnimationFillMode] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22E2F889C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for TimelineBuilder.Error(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for TimelineBuilder.Error(id *a1)
{

}

void **assignWithCopy for TimelineBuilder.Error(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **assignWithTake for TimelineBuilder.Error(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineBuilder.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimelineBuilder.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTag for TimelineBuilder.Error(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for TimelineBuilder.Error(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TimelineBuilder.Error()
{
  return &type metadata for TimelineBuilder.Error;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimelineBuilder.BindPathWrapper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for BindTarget.EntityPath();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for TimelineBuilder.BindPathWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for BindTarget.EntityPath();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for TimelineBuilder.BindPathWrapper(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for BindTarget.EntityPath();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for TimelineBuilder.BindPathWrapper(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for BindTarget.EntityPath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for TimelineBuilder.BindPathWrapper(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for BindTarget.EntityPath();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for TimelineBuilder.BindPathWrapper(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for BindTarget.EntityPath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineBuilder.BindPathWrapper()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22BC473E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for BindTarget.EntityPath();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimelineBuilder.BindPathWrapper()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22BC47440(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = type metadata accessor for BindTarget.EntityPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for TimelineBuilder.BindPathWrapper(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BindTarget.EntityPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for TimelineBuilder.BindPathWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BindTarget.EntityPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t type metadata completion function for TimelineBuilder.BindPathWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BindTarget.EntityPath();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t SceneDescriptionFoundations.ValueTypeName.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)RIOPxrSdfValueTypeNameCopyToken();
  v1 = (void *)RIOPxrTfTokenCopyString();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t SceneDescriptionFoundations.ValueTypeName.token.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCopyToken();
  *a1 = result;
  return result;
}

unint64_t SceneDescriptionFoundations.ValueTypeName.debugDescription.getter()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0 = (id)RIOPxrSdfValueTypeNameCopyToken();
  v1 = (void *)RIOPxrTfTokenCopyString();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000010;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.== infix(_:_:)()
{
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  return static _CFObject.== infix(_:_:)() & 1;
}

void SceneDescriptionFoundations.ValueTypeName.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int SceneDescriptionFoundations.ValueTypeName.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneDescriptionFoundations.ValueTypeName()
{
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.ValueTypeName()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)RIOPxrSdfValueTypeNameCopyToken();
  v1 = (void *)RIOPxrTfTokenCopyString();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef)
  {
    type metadata accessor for RIOPxrSdfValueTypeNameRef(255);
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfValueTypeNameRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneDescriptionFoundations.ValueTypeName()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneDescriptionFoundations.ValueTypeName()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneDescriptionFoundations.ValueTypeName()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void SceneDescriptionFoundations.ValueTypeName.type.getter()
{
  RIOPxrSdfValueTypeNameRef.type.getter();
}

void RIOPxrSdfValueTypeNameRef.type.getter()
{
  void *Bool;
  char v1;
  void *Int32;
  char v3;
  void *Int64;
  char v5;
  void *UInt8;
  char v7;
  void *UInt32;
  char v9;
  void *UInt64;
  char v11;
  void *Int2;
  char v13;
  uint64_t *v14;
  void *Int3;
  char v16;
  void *Int4;
  char v18;
  void *Half;
  char v20;
  void *Half2;
  char v22;
  void *Half3;
  char v24;
  void *Half4;
  char v26;
  void *Float;
  char v28;
  void *Float2;
  char v30;
  void *Float3;
  char v32;
  void *Float4;
  char v34;
  void *Double;
  char v36;
  void *Double2;
  char v38;
  void *Double3;
  char v40;
  void *Double4;
  char v42;
  void *Color3h;
  char v44;
  void *Color3f;
  char v46;
  void *Color3d;
  char v48;
  void *Point3h;
  char v50;
  void *Point3f;
  char v52;
  void *Point3d;
  char v54;
  void *Normal3h;
  char v56;
  void *Normal3f;
  char v58;
  void *Normal3d;
  char v60;
  void *Vector3h;
  char v62;
  void *Vector3f;
  char v64;
  void *Vector3d;
  char v66;
  void *Color4h;
  char v68;
  void *Color4f;
  char v70;
  void *Color4d;
  char v72;
  void *Quath;
  char v74;
  void *Quatf;
  char v76;
  void *Quatd;
  char v78;
  void *Matrix2d;
  char v80;
  void *Matrix3d;
  char v82;
  void *Matrix4d;
  char v84;
  void *Frame4d;
  char v86;
  void *String;
  char v88;
  void *TexCoord2h;
  char v90;
  void *TexCoord2f;
  char v92;
  void *TexCoord2d;
  char v94;
  void *TexCoord3h;
  char v96;
  void *TexCoord3f;
  char v98;
  void *TexCoord3d;
  char v100;
  void *AssetPath;
  char v102;
  void *Token;
  char v104;
  void *BoolArray;
  char v106;
  void *Int32Array;
  char v108;
  void *UInt8Array;
  char v110;
  void *UInt32Array;
  char v112;
  void *Int64Array;
  char v114;
  void *UInt64Array;
  char v116;
  void *Int2Array;
  char v118;
  void *Int3Array;
  char v120;
  void *Int4Array;
  char v122;
  void *HalfArray;
  char v124;
  void *Half2Array;
  char v126;
  void *Half3Array;
  char v128;
  void *Half4Array;
  char v130;
  void *FloatArray;
  char v132;
  void *Float2Array;
  char v134;
  void *Float3Array;
  char v136;
  void *Float4Array;
  char v138;
  void *DoubleArray;
  char v140;
  void *Double2Array;
  char v142;
  void *Double3Array;
  char v144;
  void *Double4Array;
  char v146;
  void *Vector3hArray;
  char v148;
  void *Vector3fArray;
  char v150;
  void *Vector3dArray;
  char v152;
  void *TexCoord2hArray;
  char v154;
  void *TexCoord2fArray;
  char v156;
  void *TexCoord2dArray;
  char v158;
  void *TexCoord3hArray;
  char v160;
  void *TexCoord3fArray;
  char v162;
  void *TexCoord3dArray;
  char v164;
  void *Normal3hArray;
  char v166;
  void *Normal3fArray;
  char v168;
  void *Normal3dArray;
  char v170;
  void *Point3hArray;
  char v172;
  void *Point3fArray;
  char v174;
  void *Point3dArray;
  char v176;
  void *Color3hArray;
  char v178;
  void *Color3fArray;
  char v180;
  void *Color3dArray;
  char v182;
  void *Color4hArray;
  char v184;
  void *Color4fArray;
  char v186;
  void *Color4dArray;
  char v188;
  void *QuathArray;
  char v190;
  void *QuatfArray;
  char v192;
  void *QuatdArray;
  char v194;
  void *Matrix2dArray;
  char v196;
  void *Matrix3dArray;
  char v198;
  void *Matrix4dArray;
  char v200;
  void *Frame4dArray;
  char v202;
  void *StringArray;
  char v204;
  void *TokenArray;
  char v206;
  void *AssetPathArray;
  char v208;

  Bool = (void *)RIOPxrSdfValueTypeNameCreateBool();
  type metadata accessor for RIOPxrSdfValueTypeNameRef(0);
  lazy protocol witness table accessor for type RIOPxrSdfValueTypeNameRef and conformance RIOPxrSdfValueTypeNameRef();
  v1 = static _CFObject.== infix(_:_:)();

  if ((v1 & 1) != 0)
    return;
  Int32 = (void *)RIOPxrSdfValueTypeNameCreateInt32();
  v3 = static _CFObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
    return;
  Int64 = (void *)RIOPxrSdfValueTypeNameCreateInt64();
  v5 = static _CFObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
    return;
  UInt8 = (void *)RIOPxrSdfValueTypeNameCreateUInt8();
  v7 = static _CFObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
    return;
  UInt32 = (void *)RIOPxrSdfValueTypeNameCreateUInt32();
  v9 = static _CFObject.== infix(_:_:)();

  if ((v9 & 1) != 0)
    return;
  UInt64 = (void *)RIOPxrSdfValueTypeNameCreateUInt64();
  v11 = static _CFObject.== infix(_:_:)();

  if ((v11 & 1) != 0)
    return;
  Int2 = (void *)RIOPxrSdfValueTypeNameCreateInt2();
  v13 = static _CFObject.== infix(_:_:)();

  if ((v13 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Int32>;
    goto LABEL_14;
  }
  Int3 = (void *)RIOPxrSdfValueTypeNameCreateInt3();
  v16 = static _CFObject.== infix(_:_:)();

  if ((v16 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Int32>;
    goto LABEL_14;
  }
  Int4 = (void *)RIOPxrSdfValueTypeNameCreateInt4();
  v18 = static _CFObject.== infix(_:_:)();

  if ((v18 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Int32>;
    goto LABEL_14;
  }
  Half = (void *)RIOPxrSdfValueTypeNameCreateHalf();
  v20 = static _CFObject.== infix(_:_:)();

  if ((v20 & 1) != 0)
    return;
  Half2 = (void *)RIOPxrSdfValueTypeNameCreateHalf2();
  v22 = static _CFObject.== infix(_:_:)();

  if ((v22 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Half>;
    goto LABEL_14;
  }
  Half3 = (void *)RIOPxrSdfValueTypeNameCreateHalf3();
  v24 = static _CFObject.== infix(_:_:)();

  if ((v24 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Half>;
    goto LABEL_14;
  }
  Half4 = (void *)RIOPxrSdfValueTypeNameCreateHalf4();
  v26 = static _CFObject.== infix(_:_:)();

  if ((v26 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Half>;
    goto LABEL_14;
  }
  Float = (void *)RIOPxrSdfValueTypeNameCreateFloat();
  v28 = static _CFObject.== infix(_:_:)();

  if ((v28 & 1) != 0)
    return;
  Float2 = (void *)RIOPxrSdfValueTypeNameCreateFloat2();
  v30 = static _CFObject.== infix(_:_:)();

  if ((v30 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Float>;
    goto LABEL_14;
  }
  Float3 = (void *)RIOPxrSdfValueTypeNameCreateFloat3();
  v32 = static _CFObject.== infix(_:_:)();

  if ((v32 & 1) != 0)
  {
    v14 = &demangling cache variable for type metadata for SIMD3<Float>;
    goto LABEL_14;
  }
  Float4 = (void *)RIOPxrSdfValueTypeNameCreateFloat4();
  v34 = static _CFObject.== infix(_:_:)();

  if ((v34 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
    goto LABEL_14;
  }
  Double = (void *)RIOPxrSdfValueTypeNameCreateDouble();
  v36 = static _CFObject.== infix(_:_:)();

  if ((v36 & 1) != 0)
    return;
  Double2 = (void *)RIOPxrSdfValueTypeNameCreateDouble2();
  v38 = static _CFObject.== infix(_:_:)();

  if ((v38 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Double>;
    goto LABEL_14;
  }
  Double3 = (void *)RIOPxrSdfValueTypeNameCreateDouble3();
  v40 = static _CFObject.== infix(_:_:)();

  if ((v40 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Double>;
    goto LABEL_14;
  }
  Double4 = (void *)RIOPxrSdfValueTypeNameCreateDouble4();
  v42 = static _CFObject.== infix(_:_:)();

  if ((v42 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Double>;
    goto LABEL_14;
  }
  Color3h = (void *)RIOPxrSdfValueTypeNameCreateColor3h();
  v44 = static _CFObject.== infix(_:_:)();

  if ((v44 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Color3<Half>;
    goto LABEL_14;
  }
  Color3f = (void *)RIOPxrSdfValueTypeNameCreateColor3f();
  v46 = static _CFObject.== infix(_:_:)();

  if ((v46 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Color3<Float>;
    goto LABEL_14;
  }
  Color3d = (void *)RIOPxrSdfValueTypeNameCreateColor3d();
  v48 = static _CFObject.== infix(_:_:)();

  if ((v48 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Color3<Double>;
    goto LABEL_14;
  }
  Point3h = (void *)RIOPxrSdfValueTypeNameCreatePoint3h();
  v50 = static _CFObject.== infix(_:_:)();

  if ((v50 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Point3<Half>;
    goto LABEL_14;
  }
  Point3f = (void *)RIOPxrSdfValueTypeNameCreatePoint3f();
  v52 = static _CFObject.== infix(_:_:)();

  if ((v52 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Point3<Float>;
    goto LABEL_14;
  }
  Point3d = (void *)RIOPxrSdfValueTypeNameCreatePoint3d();
  v54 = static _CFObject.== infix(_:_:)();

  if ((v54 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Point3<Double>;
    goto LABEL_14;
  }
  Normal3h = (void *)RIOPxrSdfValueTypeNameCreateNormal3h();
  v56 = static _CFObject.== infix(_:_:)();

  if ((v56 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Half>;
    goto LABEL_14;
  }
  Normal3f = (void *)RIOPxrSdfValueTypeNameCreateNormal3f();
  v58 = static _CFObject.== infix(_:_:)();

  if ((v58 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Float>;
    goto LABEL_14;
  }
  Normal3d = (void *)RIOPxrSdfValueTypeNameCreateNormal3d();
  v60 = static _CFObject.== infix(_:_:)();

  if ((v60 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Double>;
    goto LABEL_14;
  }
  Vector3h = (void *)RIOPxrSdfValueTypeNameCreateVector3h();
  v62 = static _CFObject.== infix(_:_:)();

  if ((v62 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Half>;
    goto LABEL_14;
  }
  Vector3f = (void *)RIOPxrSdfValueTypeNameCreateVector3f();
  v64 = static _CFObject.== infix(_:_:)();

  if ((v64 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Float>;
    goto LABEL_14;
  }
  Vector3d = (void *)RIOPxrSdfValueTypeNameCreateVector3d();
  v66 = static _CFObject.== infix(_:_:)();

  if ((v66 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Double>;
    goto LABEL_14;
  }
  Color4h = (void *)RIOPxrSdfValueTypeNameCreateColor4h();
  v68 = static _CFObject.== infix(_:_:)();

  if ((v68 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Color4<Half>;
    goto LABEL_14;
  }
  Color4f = (void *)RIOPxrSdfValueTypeNameCreateColor4f();
  v70 = static _CFObject.== infix(_:_:)();

  if ((v70 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Color4<Float>;
    goto LABEL_14;
  }
  Color4d = (void *)RIOPxrSdfValueTypeNameCreateColor4d();
  v72 = static _CFObject.== infix(_:_:)();

  if ((v72 & 1) != 0)
  {
    v14 = (uint64_t *)&demangling cache variable for type metadata for Color4<Double>;
    goto LABEL_14;
  }
  Quath = (void *)RIOPxrSdfValueTypeNameCreateQuath();
  v74 = static _CFObject.== infix(_:_:)();

  if ((v74 & 1) != 0
    || (Quatf = (void *)RIOPxrSdfValueTypeNameCreateQuatf(),
        v76 = static _CFObject.== infix(_:_:)(),
        Quatf,
        (v76 & 1) != 0))
  {
    type metadata accessor for simd_quatf(0);
    return;
  }
  Quatd = (void *)RIOPxrSdfValueTypeNameCreateQuatd();
  v78 = static _CFObject.== infix(_:_:)();

  if ((v78 & 1) != 0)
  {
    type metadata accessor for simd_quatd(0);
    return;
  }
  Matrix2d = (void *)RIOPxrSdfValueTypeNameCreateMatrix2d();
  v80 = static _CFObject.== infix(_:_:)();

  if ((v80 & 1) != 0)
  {
    type metadata accessor for simd_double2x2(0);
    return;
  }
  Matrix3d = (void *)RIOPxrSdfValueTypeNameCreateMatrix3d();
  v82 = static _CFObject.== infix(_:_:)();

  if ((v82 & 1) != 0)
  {
    type metadata accessor for simd_double3x3(0);
    return;
  }
  Matrix4d = (void *)RIOPxrSdfValueTypeNameCreateMatrix4d();
  v84 = static _CFObject.== infix(_:_:)();

  if ((v84 & 1) != 0)
  {
    type metadata accessor for simd_double4x4(0);
    return;
  }
  Frame4d = (void *)RIOPxrSdfValueTypeNameCreateFrame4d();
  v86 = static _CFObject.== infix(_:_:)();

  if ((v86 & 1) == 0)
  {
    String = (void *)RIOPxrSdfValueTypeNameCreateString();
    v88 = static _CFObject.== infix(_:_:)();

    if ((v88 & 1) == 0)
    {
      TexCoord2h = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2h();
      v90 = static _CFObject.== infix(_:_:)();

      if ((v90 & 1) != 0)
      {
        v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Half>;
      }
      else
      {
        TexCoord2f = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2f();
        v92 = static _CFObject.== infix(_:_:)();

        if ((v92 & 1) != 0)
        {
          v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Float>;
        }
        else
        {
          TexCoord2d = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2d();
          v94 = static _CFObject.== infix(_:_:)();

          if ((v94 & 1) != 0)
          {
            v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Double>;
          }
          else
          {
            TexCoord3h = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3h();
            v96 = static _CFObject.== infix(_:_:)();

            if ((v96 & 1) != 0)
            {
              v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Half>;
            }
            else
            {
              TexCoord3f = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3f();
              v98 = static _CFObject.== infix(_:_:)();

              if ((v98 & 1) != 0)
              {
                v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Float>;
              }
              else
              {
                TexCoord3d = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3d();
                v100 = static _CFObject.== infix(_:_:)();

                if ((v100 & 1) != 0)
                {
                  v14 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Double>;
                }
                else
                {
                  AssetPath = (void *)RIOPxrSdfValueTypeNameCreateAssetPath();
                  v102 = static _CFObject.== infix(_:_:)();

                  if ((v102 & 1) != 0)
                    return;
                  Token = (void *)RIOPxrSdfValueTypeNameCreateToken();
                  v104 = static _CFObject.== infix(_:_:)();

                  if ((v104 & 1) != 0)
                    return;
                  BoolArray = (void *)RIOPxrSdfValueTypeNameCreateBoolArray();
                  v106 = static _CFObject.== infix(_:_:)();

                  if ((v106 & 1) != 0)
                  {
                    v14 = (uint64_t *)&demangling cache variable for type metadata for [Bool];
                  }
                  else
                  {
                    Int32Array = (void *)RIOPxrSdfValueTypeNameCreateInt32Array();
                    v108 = static _CFObject.== infix(_:_:)();

                    if ((v108 & 1) != 0)
                    {
                      v14 = (uint64_t *)&demangling cache variable for type metadata for [Int32];
                    }
                    else
                    {
                      UInt8Array = (void *)RIOPxrSdfValueTypeNameCreateUInt8Array();
                      v110 = static _CFObject.== infix(_:_:)();

                      if ((v110 & 1) != 0)
                      {
                        v14 = (uint64_t *)&demangling cache variable for type metadata for [UInt8];
                      }
                      else
                      {
                        UInt32Array = (void *)RIOPxrSdfValueTypeNameCreateUInt32Array();
                        v112 = static _CFObject.== infix(_:_:)();

                        if ((v112 & 1) != 0)
                        {
                          v14 = (uint64_t *)&demangling cache variable for type metadata for [UInt32];
                        }
                        else
                        {
                          Int64Array = (void *)RIOPxrSdfValueTypeNameCreateInt64Array();
                          v114 = static _CFObject.== infix(_:_:)();

                          if ((v114 & 1) != 0)
                          {
                            v14 = (uint64_t *)&demangling cache variable for type metadata for [Int64];
                          }
                          else
                          {
                            UInt64Array = (void *)RIOPxrSdfValueTypeNameCreateUInt64Array();
                            v116 = static _CFObject.== infix(_:_:)();

                            if ((v116 & 1) != 0)
                            {
                              v14 = (uint64_t *)&demangling cache variable for type metadata for [UInt64];
                            }
                            else
                            {
                              Int2Array = (void *)RIOPxrSdfValueTypeNameCreateInt2Array();
                              v118 = static _CFObject.== infix(_:_:)();

                              if ((v118 & 1) != 0)
                              {
                                v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Int32>];
                              }
                              else
                              {
                                Int3Array = (void *)RIOPxrSdfValueTypeNameCreateInt3Array();
                                v120 = static _CFObject.== infix(_:_:)();

                                if ((v120 & 1) != 0)
                                {
                                  v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Int32>];
                                }
                                else
                                {
                                  Int4Array = (void *)RIOPxrSdfValueTypeNameCreateInt4Array();
                                  v122 = static _CFObject.== infix(_:_:)();

                                  if ((v122 & 1) != 0)
                                  {
                                    v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Int32>];
                                  }
                                  else
                                  {
                                    HalfArray = (void *)RIOPxrSdfValueTypeNameCreateHalfArray();
                                    v124 = static _CFObject.== infix(_:_:)();

                                    if ((v124 & 1) != 0)
                                    {
                                      v14 = (uint64_t *)&demangling cache variable for type metadata for [Half];
                                    }
                                    else
                                    {
                                      Half2Array = (void *)RIOPxrSdfValueTypeNameCreateHalf2Array();
                                      v126 = static _CFObject.== infix(_:_:)();

                                      if ((v126 & 1) != 0)
                                      {
                                        v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Half>];
                                      }
                                      else
                                      {
                                        Half3Array = (void *)RIOPxrSdfValueTypeNameCreateHalf3Array();
                                        v128 = static _CFObject.== infix(_:_:)();

                                        if ((v128 & 1) != 0)
                                        {
                                          v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Half>];
                                        }
                                        else
                                        {
                                          Half4Array = (void *)RIOPxrSdfValueTypeNameCreateHalf4Array();
                                          v130 = static _CFObject.== infix(_:_:)();

                                          if ((v130 & 1) != 0)
                                          {
                                            v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Half>];
                                          }
                                          else
                                          {
                                            FloatArray = (void *)RIOPxrSdfValueTypeNameCreateFloatArray();
                                            v132 = static _CFObject.== infix(_:_:)();

                                            if ((v132 & 1) != 0)
                                            {
                                              v14 = (uint64_t *)&demangling cache variable for type metadata for [Float];
                                            }
                                            else
                                            {
                                              Float2Array = (void *)RIOPxrSdfValueTypeNameCreateFloat2Array();
                                              v134 = static _CFObject.== infix(_:_:)();

                                              if ((v134 & 1) != 0)
                                              {
                                                v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Float>];
                                              }
                                              else
                                              {
                                                Float3Array = (void *)RIOPxrSdfValueTypeNameCreateFloat3Array();
                                                v136 = static _CFObject.== infix(_:_:)();

                                                if ((v136 & 1) != 0)
                                                {
                                                  v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Float>];
                                                }
                                                else
                                                {
                                                  Float4Array = (void *)RIOPxrSdfValueTypeNameCreateFloat4Array();
                                                  v138 = static _CFObject.== infix(_:_:)();

                                                  if ((v138 & 1) != 0)
                                                  {
                                                    v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Float>];
                                                  }
                                                  else
                                                  {
                                                    DoubleArray = (void *)RIOPxrSdfValueTypeNameCreateDoubleArray();
                                                    v140 = static _CFObject.== infix(_:_:)();

                                                    if ((v140 & 1) != 0)
                                                    {
                                                      v14 = (uint64_t *)&demangling cache variable for type metadata for [Double];
                                                    }
                                                    else
                                                    {
                                                      Double2Array = (void *)RIOPxrSdfValueTypeNameCreateDouble2Array();
                                                      v142 = static _CFObject.== infix(_:_:)();

                                                      if ((v142 & 1) != 0)
                                                      {
                                                        v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Double>];
                                                      }
                                                      else
                                                      {
                                                        Double3Array = (void *)RIOPxrSdfValueTypeNameCreateDouble3Array();
                                                        v144 = static _CFObject.== infix(_:_:)();

                                                        if ((v144 & 1) != 0)
                                                        {
                                                          v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Double>];
                                                        }
                                                        else
                                                        {
                                                          Double4Array = (void *)RIOPxrSdfValueTypeNameCreateDouble4Array();
                                                          v146 = static _CFObject.== infix(_:_:)();

                                                          if ((v146 & 1) != 0)
                                                          {
                                                            v14 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Double>];
                                                          }
                                                          else
                                                          {
                                                            Vector3hArray = (void *)RIOPxrSdfValueTypeNameCreateVector3hArray();
                                                            v148 = static _CFObject.== infix(_:_:)();

                                                            if ((v148 & 1) != 0)
                                                            {
                                                              v14 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Half>];
                                                            }
                                                            else
                                                            {
                                                              Vector3fArray = (void *)RIOPxrSdfValueTypeNameCreateVector3fArray();
                                                              v150 = static _CFObject.== infix(_:_:)();

                                                              if ((v150 & 1) != 0)
                                                              {
                                                                v14 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Float>];
                                                              }
                                                              else
                                                              {
                                                                Vector3dArray = (void *)RIOPxrSdfValueTypeNameCreateVector3dArray();
                                                                v152 = static _CFObject.== infix(_:_:)();

                                                                if ((v152 & 1) != 0)
                                                                {
                                                                  v14 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Double>];
                                                                }
                                                                else
                                                                {
                                                                  TexCoord2hArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2hArray();
                                                                  v154 = static _CFObject.== infix(_:_:)();

                                                                  if ((v154 & 1) != 0)
                                                                  {
                                                                    v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Half>];
                                                                  }
                                                                  else
                                                                  {
                                                                    TexCoord2fArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2fArray();
                                                                    v156 = static _CFObject.== infix(_:_:)();

                                                                    if ((v156 & 1) != 0)
                                                                    {
                                                                      v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Float>];
                                                                    }
                                                                    else
                                                                    {
                                                                      TexCoord2dArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord2dArray();
                                                                      v158 = static _CFObject.== infix(_:_:)();

                                                                      if ((v158 & 1) != 0)
                                                                      {
                                                                        v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Double>];
                                                                      }
                                                                      else
                                                                      {
                                                                        TexCoord3hArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3hArray();
                                                                        v160 = static _CFObject.== infix(_:_:)();

                                                                        if ((v160 & 1) != 0)
                                                                        {
                                                                          v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Half>];
                                                                        }
                                                                        else
                                                                        {
                                                                          TexCoord3fArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3fArray();
                                                                          v162 = static _CFObject.== infix(_:_:)();

                                                                          if ((v162 & 1) != 0)
                                                                          {
                                                                            v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Float>];
                                                                          }
                                                                          else
                                                                          {
                                                                            TexCoord3dArray = (void *)RIOPxrSdfValueTypeNameCreateTexCoord3dArray();
                                                                            v164 = static _CFObject.== infix(_:_:)();

                                                                            if ((v164 & 1) != 0)
                                                                            {
                                                                              v14 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Double>];
                                                                            }
                                                                            else
                                                                            {
                                                                              Normal3hArray = (void *)RIOPxrSdfValueTypeNameCreateNormal3hArray();
                                                                              v166 = static _CFObject.== infix(_:_:)();

                                                                              if ((v166 & 1) != 0)
                                                                              {
                                                                                v14 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Half>];
                                                                              }
                                                                              else
                                                                              {
                                                                                Normal3fArray = (void *)RIOPxrSdfValueTypeNameCreateNormal3fArray();
                                                                                v168 = static _CFObject.== infix(_:_:)();

                                                                                if ((v168 & 1) != 0)
                                                                                {
                                                                                  v14 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Float>];
                                                                                }
                                                                                else
                                                                                {
                                                                                  Normal3dArray = (void *)RIOPxrSdfValueTypeNameCreateNormal3dArray();
                                                                                  v170 = static _CFObject.== infix(_:_:)();

                                                                                  if ((v170 & 1) != 0)
                                                                                  {
                                                                                    v14 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Double>];
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    Point3hArray = (void *)RIOPxrSdfValueTypeNameCreatePoint3hArray();
                                                                                    v172 = static _CFObject.== infix(_:_:)();

                                                                                    if ((v172 & 1) != 0)
                                                                                    {
                                                                                      v14 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Half>];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      Point3fArray = (void *)RIOPxrSdfValueTypeNameCreatePoint3fArray();
                                                                                      v174 = static _CFObject.== infix(_:_:)();

                                                                                      if ((v174 & 1) != 0)
                                                                                      {
                                                                                        v14 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Float>];
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        Point3dArray = (void *)RIOPxrSdfValueTypeNameCreatePoint3dArray();
                                                                                        v176 = static _CFObject.== infix(_:_:)();

                                                                                        if ((v176 & 1) != 0)
                                                                                        {
                                                                                          v14 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Double>];
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          Color3hArray = (void *)RIOPxrSdfValueTypeNameCreateColor3hArray();
                                                                                          v178 = static _CFObject.== infix(_:_:)();

                                                                                          if ((v178 & 1) != 0)
                                                                                          {
                                                                                            v14 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Half>];
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            Color3fArray = (void *)RIOPxrSdfValueTypeNameCreateColor3fArray();
                                                                                            v180 = static _CFObject.== infix(_:_:)();

                                                                                            if ((v180 & 1) != 0)
                                                                                            {
                                                                                              v14 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Float>];
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              Color3dArray = (void *)RIOPxrSdfValueTypeNameCreateColor3dArray();
                                                                                              v182 = static _CFObject.== infix(_:_:)();

                                                                                              if ((v182 & 1) != 0)
                                                                                              {
                                                                                                v14 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Double>];
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                Color4hArray = (void *)RIOPxrSdfValueTypeNameCreateColor4hArray();
                                                                                                v184 = static _CFObject.== infix(_:_:)();

                                                                                                if ((v184 & 1) != 0)
                                                                                                {
                                                                                                  v14 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Half>];
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  Color4fArray = (void *)RIOPxrSdfValueTypeNameCreateColor4fArray();
                                                                                                  v186 = static _CFObject.== infix(_:_:)();

                                                                                                  if ((v186 & 1) != 0)
                                                                                                  {
                                                                                                    v14 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Float>];
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    Color4dArray = (void *)RIOPxrSdfValueTypeNameCreateColor4dArray();
                                                                                                    v188 = static _CFObject.== infix(_:_:)();

                                                                                                    if ((v188 & 1) != 0)
                                                                                                    {
                                                                                                      v14 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Double>];
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      QuathArray = (void *)RIOPxrSdfValueTypeNameCreateQuathArray();
                                                                                                      v190 = static _CFObject.== infix(_:_:)();

                                                                                                      if ((v190 & 1) != 0 || (QuatfArray = (void *)RIOPxrSdfValueTypeNameCreateQuatfArray(), v192 = static _CFObject.== infix(_:_:)(), QuatfArray, (v192 & 1) != 0))
                                                                                                      {
                                                                                                        v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatf];
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        QuatdArray = (void *)RIOPxrSdfValueTypeNameCreateQuatdArray();
                                                                                                        v194 = static _CFObject.== infix(_:_:)();

                                                                                                        if ((v194 & 1) != 0)
                                                                                                        {
                                                                                                          v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatd];
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          Matrix2dArray = (void *)RIOPxrSdfValueTypeNameCreateMatrix2dArray();
                                                                                                          v196 = static _CFObject.== infix(_:_:)();

                                                                                                          if ((v196 & 1) != 0)
                                                                                                          {
                                                                                                            v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_double2x2];
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            Matrix3dArray = (void *)RIOPxrSdfValueTypeNameCreateMatrix3dArray();
                                                                                                            v198 = static _CFObject.== infix(_:_:)();

                                                                                                            if ((v198 & 1) != 0)
                                                                                                            {
                                                                                                              v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_double3x3];
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              Matrix4dArray = (void *)RIOPxrSdfValueTypeNameCreateMatrix4dArray();
                                                                                                              v200 = static _CFObject.== infix(_:_:)();

                                                                                                              if ((v200 & 1) != 0)
                                                                                                              {
                                                                                                                v14 = (uint64_t *)&demangling cache variable for type metadata for [simd_double4x4];
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                Frame4dArray = (void *)RIOPxrSdfValueTypeNameCreateFrame4dArray();
                                                                                                                v202 = static _CFObject.== infix(_:_:)();

                                                                                                                if ((v202 & 1) != 0)
                                                                                                                {
                                                                                                                  v14 = (uint64_t *)&demangling cache variable for type metadata for [Frame4D];
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  StringArray = (void *)RIOPxrSdfValueTypeNameCreateStringArray();
                                                                                                                  v204 = static _CFObject.== infix(_:_:)();

                                                                                                                  if ((v204 & 1) != 0)
                                                                                                                  {
                                                                                                                    v14 = (uint64_t *)&demangling cache variable for type metadata for [String];
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    TokenArray = (void *)RIOPxrSdfValueTypeNameCreateTokenArray();
                                                                                                                    v206 = static _CFObject.== infix(_:_:)();

                                                                                                                    if ((v206 & 1) != 0)
                                                                                                                    {
                                                                                                                      v14 = &demangling cache variable for type metadata for [ToolsFoundations.Token];
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      AssetPathArray = (void *)RIOPxrSdfValueTypeNameCreateAssetPathArray();
                                                                                                                      v208 = static _CFObject.== infix(_:_:)();

                                                                                                                      if ((v208 & 1) == 0)
                                                                                                                        return;
                                                                                                                      v14 = (uint64_t *)&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath];
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      __swift_instantiateConcreteTypeFromMangledName(v14);
    }
  }
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Bool.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateBool();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt32();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int64.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt64();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt32();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt8.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt8();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt64.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt64();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble2();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble3();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble4();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreatePoint3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreatePoint3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreatePoint3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateVector3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateVector3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateVector3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord2h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord2f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord2d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateNormal3h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateNormal3f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateNormal3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor4h();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4f.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor4f();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor4d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Quath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuath();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Quatf.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatf();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Quatd.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatd();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix2d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix2d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix3d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix3d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix4d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix4d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Frame4d.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFrame4d();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.String.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateString();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Token.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateToken();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.AssetPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateAssetPath();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.BoolArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateBoolArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int32Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt32Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int64Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt64Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt32Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt32Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt8Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt8Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.UInt64Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt64Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Int4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.HalfArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalfArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Half4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.FloatArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloatArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Float4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.DoubleArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDoubleArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double2Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble2Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double3Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble3Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Double4Array.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble4Array();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor4hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor4fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Color4dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateColor4dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreatePoint3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreatePoint3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Point3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreatePoint3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateVector3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateVector3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Vector3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateVector3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord2hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord2fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord2dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord2dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TexCoord3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTexCoord3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3hArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateNormal3hArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3fArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateNormal3fArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Normal3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateNormal3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.QuathArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuathArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.QuatfArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatfArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.QuatdArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatdArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix2dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix2dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix3dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix3dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Matrix4dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix4dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.Frame4dArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFrame4dArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.StringArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateStringArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.TokenArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTokenArray();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.ValueTypeName.AssetPathArray.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateAssetPathArray();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.ValueTypeName, &type metadata for SceneDescriptionFoundations.ValueTypeName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.ValueTypeName and conformance SceneDescriptionFoundations.ValueTypeName);
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.ValueTypeName()
{
  return &type metadata for SceneDescriptionFoundations.ValueTypeName;
}

uint64_t closure #2 in TriggerBuilder.inputDescriptors()()
{
  id v0;
  uint64_t PrimIfNeeded;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if (!RIOPxrUsdStageHasPrimAtPrimPath())
    return 0;
  v0 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = PrimIfNeeded;
  if (String.count.getter() < 1)
    v3 = (id)RIOPxrTfTokenEmpty();
  else
    v3 = (id)RIOPxrTfTokenCreateWithCString();
  v4 = v3;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
    swift_release();

    return 0;
  }
  v7 = (void *)v6;
  v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {
    swift_release();

    return 0;
  }
  v9 = (void *)v8;

  v10 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized closure #3 in TriggerBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (!closure #2 in TriggerBuilder.inputDescriptors()())
    return MEMORY[0x24BEE4B08];
  v2 = v0;
  v3 = v1;
  if (one-time initialization token for actionTypesUsingAffectedObjects != -1)
    swift_once();
  v4 = static TriggerBuilder.actionTypesUsingAffectedObjects;
  swift_bridgeObjectRetain();
  v5 = specialized Set.contains(_:)(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    v6 = closure #1 in ActionBuilder.inputDescriptors()();
  else
    v6 = MEMORY[0x24BEE4B08];
  swift_release();
  return v6;
}

uint64_t specialized closure #4 in TriggerBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (closure #2 in TriggerBuilder.inputDescriptors()())
  {
    if (v0 == 0x6564696C6C6F43 && v1 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        v2 = MEMORY[0x24BEE4B08];
        goto LABEL_9;
      }
    }
    v2 = closure #1 in ActionBuilder.inputDescriptors()();
LABEL_9:
    swift_release();
    return v2;
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t specialized closure #5 in TriggerBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (closure #2 in TriggerBuilder.inputDescriptors()())
  {
    if (v0 == 0x7574736547706154 && v1 == 0xEA00000000006572)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        v2 = MEMORY[0x24BEE4B08];
        goto LABEL_9;
      }
    }
    v2 = closure #1 in ActionBuilder.inputDescriptors()();
LABEL_9:
    swift_release();
    return v2;
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t TriggerBuilder.run(inputs:)(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  void (*v17)(_OWORD *__return_ptr, __int128 *);
  uint64_t v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;

  v2 = v1;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v4 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v4 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v23 = 0;
LABEL_19:
    *(_QWORD *)&v25 = v23;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v23, 1);
    return specialized TriggerBuilder.clear(inputs:)();
  }
  v5 = (void *)RIOPxrUsdPrimCopyAttribute();
  v6 = RIOPxrUsdAttributeCopyValue();
  if (!v6)
  {
LABEL_18:
    v23 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_19;
  }
  v7 = (void *)v6;
  v8 = RIOPxrVtValueCopyToken();
  if (!v8)
  {

    goto LABEL_18;
  }
  v9 = (void *)v8;

  swift_release();
  v10 = (void *)RIOPxrTfTokenCopyString();
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v9, 0);
  if (one-time initialization token for triggerTypeToTriggerSpecificationsGenerator != -1)
    swift_once();
  v14 = static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator;
  if (*((_QWORD *)static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator + 2)
    && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13), (v16 & 1) != 0))
  {
    v17 = *(void (**)(_OWORD *__return_ptr, __int128 *))(v14[7] + 16 * v15);
    swift_retain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v25 = a1;
    v17(v24, &v25);
    swift_release();
    v18 = *(_QWORD *)&v24[0];
    swift_beginAccess();
    v19 = objc_getAssociatedObject(v2, &static BuilderAssociatedKeys.OutputsReference);
    result = swift_endAccess();
    if (v19)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(v24, &v25);
      type metadata accessor for Outputs();
      swift_dynamicCast();
      if (one-time initialization token for OutputName != -1)
        swift_once();
      v21 = static TriggerBuilder.OutputName;
      v22 = *(_QWORD *)algn_255BFA008;
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
      *(_QWORD *)&v25 = v18;
      swift_bridgeObjectRetain();
      Outputs.subscript.setter((uint64_t)&v25, v21, v22);
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return specialized TriggerBuilder.clear(inputs:)();
  }
  return result;
}

void *one-time initialization function for triggerTypeToTriggerSpecificationsGenerator()
{
  uint64_t inited;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (_:))>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C950;
  *(_QWORD *)(inited + 32) = 0x6564696C6C6F43;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(_QWORD *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "Notification");
  *(_BYTE *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  *(_QWORD *)(inited + 80) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0xD000000000000011;
  *(_QWORD *)(inited + 104) = 0x800000022BD07B00;
  *(_QWORD *)(inited + 112) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(_QWORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0x617254656E656353;
  *(_QWORD *)(inited + 136) = 0xEF6E6F697469736ELL;
  *(_QWORD *)(inited + 144) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(_QWORD *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0x7574736547706154;
  *(_QWORD *)(inited + 168) = 0xEA00000000006572;
  *(_QWORD *)(inited + 176) = specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification]);
  *(_QWORD *)(inited + 184) = 0;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized static TriggerBuilder.generateCollisionTriggerSpecifications(inputs:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  result = implicit closure #2 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator();
  *a1 = result;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
  v2 = type metadata accessor for __RKEntityTriggerSpecification();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22BD0C360;
  result = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v3 + 104))(v5 + v4, *MEMORY[0x24BDE6B98], v2);
  *a1 = v5;
  return result;
}

void *specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification])@<X0>(_QWORD *a1@<X8>)
{
  void *result;

  result = implicit closure #3 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator();
  *a1 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed Inputs) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = implicit closure #5 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator(*a1);
  *a2 = result;
  return result;
}

uint64_t implicit closure #2 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator()
{
  id v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v8[2];
  char v9;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)v8);

  swift_release();
  v2 = (void *)v8[0];
  v1 = v8[1];
  if ((v9 & 1) != 0)
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<String, Object.Error>(v2, v1, 1);
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    v4 = *(_QWORD *)(type metadata accessor for __RKEntityTriggerSpecification() - 8);
    v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_22BD0C360;
    v6 = (_QWORD *)(v3 + v5);
    *v6 = v2;
    v6[1] = v1;
    (*(void (**)(void))(v4 + 104))();
  }
  return v3;
}

void *implicit closure #3 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator()
{
  id v0;
  uint64_t v1;
  void *v2;
  _QWORD v4[3];
  int v5;
  void *v6;
  void *v7;
  char v8;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v7);

  v1 = swift_release();
  v2 = v7;
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<Double, Object.Error>(v2, 1);
    LODWORD(v2) = 0;
  }
  v7 = (void *)MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](v1);
  v4[2] = &v7;
  v5 = (int)v2;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:), (uint64_t)v4);
  return v7;
}

uint64_t implicit closure #5 in variable initialization expression of static TriggerBuilder.triggerTypeToTriggerSpecificationsGenerator(uint64_t a1)
{
  _QWORD v2[5];
  uint64_t v3;

  v3 = MEMORY[0x24BEE4AF8];
  v2[2] = &v3;
  v2[3] = a1;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(static EntityBuilder.OutputName, *(uint64_t *)algn_255BED398, (uint64_t)partial apply for closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:), (uint64_t)v2);
  return v3;
}

uint64_t type metadata accessor for TriggerBuilder()
{
  return objc_opt_self();
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance TriggerBuilder()
{
  uint64_t inited;
  uint64_t v1;
  Swift::Int v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = *(_QWORD *)algn_255BFA008;
  *(_QWORD *)(inited + 32) = static TriggerBuilder.OutputName;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 0xD000000000000020;
  *(_QWORD *)(inited + 56) = 0x800000022BD07AB0;
  *(_BYTE *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t specialized TriggerBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v23 = (unint64_t)v0;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v23 = inited;
  specialized Array._endMutation()();
  v3 = v23;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = MEMORY[0x24BEE4B08];
  v6 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  swift_retain();
  if (String.count.getter() < 1)
    v7 = (id)RIOPxrTfTokenEmpty();
  else
    v7 = (id)RIOPxrTfTokenCreateWithCString();
  v8 = v7;
  type metadata accessor for NamedPropertyDirtyState();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = v8;
  v10 = v8;
  v11 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v10, v5);

  v9[2] = v5;
  v9[3] = v11;
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v12 + 32) = v9;
  v23 = v12;
  specialized Array._endMutation()();
  v13 = v23;
  swift_retain();
  v14 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v13);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for PrimDirtyState();
  swift_allocObject();
  v15 = PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(v5, v14, 0);
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v16 + 32) = v15;
  v23 = v16;
  specialized Array._endMutation()();
  v17 = v23;
  swift_retain();
  v18 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v17);
  swift_bridgeObjectRelease();
  swift_release();
  swift_allocObject();
  v19 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v5, v18, 0);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_22BD0C650;
  *(_QWORD *)(v20 + 32) = v6;
  *(_QWORD *)(v20 + 40) = v19;
  v23 = v20;
  specialized Array._endMutation()();
  v21 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v23);
  swift_bridgeObjectRelease();
  swift_release();
  return v21;
}

uint64_t specialized TriggerBuilder.inputDescriptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[6];
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  unsigned __int8 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD v20[6];
  char v21;

  v6 = MEMORY[0x24BEE4B08];
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = static EntityBuilder.OutputName;
  v0 = *(_QWORD *)algn_255BED398;
  v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v20[0] = v1;
  v20[1] = v0;
  v20[2] = static EntityBuilder.OutputIdentifier;
  v20[3] = *(_QWORD *)algn_255BFA2C8;
  v20[4] = specialized closure #3 in TriggerBuilder.inputDescriptors();
  v20[5] = 0;
  v21 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v14, (uint64_t)v20);
  outlined consume of InputDescriptor(v14, *((uint64_t *)&v14 + 1), v15, v16, v17, v18, v19);
  v14 = xmmword_22BD0C960;
  v15 = static EntityBuilder.OutputIdentifier;
  v16 = *(_QWORD *)algn_255BFA2C8;
  v17 = specialized closure #4 in TriggerBuilder.inputDescriptors();
  v18 = 0;
  v19 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)&v7, (uint64_t)&v14);
  outlined consume of InputDescriptor(v7, v8, v9, v10, v11, v12, v13);
  v7 = 0xD00000000000001ALL;
  v8 = 0x800000022BD07AE0;
  v9 = 0xD00000000000001ALL;
  v10 = 0x800000022BD07AE0;
  v11 = specialized closure #5 in TriggerBuilder.inputDescriptors();
  v12 = 0;
  v13 = -127;
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)&v7);
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t specialized TriggerBuilder.clear(inputs:)()
{
  void *v0;
  id v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v6[2];

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v5, v6);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1)
      swift_once();
    v3 = static TriggerBuilder.OutputName;
    v4 = *(_QWORD *)algn_255BFA008;
    memset(v6, 0, sizeof(v6));
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)v6, v3, v4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void partial apply for closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t partial apply for closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TriggerBuilder.generateProximityToCameraTriggerSpecifications(inputs:)(*(float *)(v2 + 24), a1, a2, *(unint64_t **)(v2 + 16));
}

void outlined consume of Result<String, Object.Error>(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    outlined consume of Object.Error(a1);
  else
    swift_bridgeObjectRelease();
}

uint64_t AttributeMetadata.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributeMetadata.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static AttributeMetadata.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t AttributeMetadata.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int AttributeMetadata.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance AttributeMetadata<A>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return AttributeMetadata.init(stringLiteral:)(*a1, a1[1], a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeMetadata<A>()
{
  Hasher.init(_seed:)();
  AttributeMetadata.hash(into:)();
  return Hasher._finalize()();
}

uint64_t RelationshipMetadata.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

RealityIO::RelationshipMetadata __swiftcall RelationshipMetadata.init(stringLiteral:)(RealityIO::RelationshipMetadata stringLiteral)
{
  RealityIO::RelationshipMetadata *v1;

  *v1 = stringLiteral;
  return stringLiteral;
}

uint64_t static RelationshipMetadata.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t RelationshipMetadata.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int RelationshipMetadata.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

_QWORD *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance RelationshipMetadata@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RelationshipMetadata(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RelationshipMetadata()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RelationshipMetadata()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RelationshipMetadata()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void base witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral in AttributeMetadata<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for Equatable in AttributeMetadata<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

void base witness table accessor for ExpressibleByUnicodeScalarLiteral in AttributeMetadata<A>()
{
  JUMPOUT(0x22E2F889CLL);
}

unint64_t lazy protocol witness table accessor for type RelationshipMetadata and conformance RelationshipMetadata()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata;
  if (!lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RelationshipMetadata, &type metadata for RelationshipMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata;
  if (!lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RelationshipMetadata, &type metadata for RelationshipMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata;
  if (!lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RelationshipMetadata, &type metadata for RelationshipMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RelationshipMetadata and conformance RelationshipMetadata);
  }
  return result;
}

uint64_t type metadata instantiation function for AttributeMetadata()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for AttributeMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AttributeMetadata()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithTake for AttributeMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for AttributeMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttributeMetadata);
}

_QWORD *assignWithCopy for AttributeMetadata(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RelationshipMetadata()
{
  return &type metadata for RelationshipMetadata;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x22E2F8824](a1, v6, a5);
}

uint64_t StageDirtyState.__allocating_init(primsContainAnyOf:)(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1();
  type metadata accessor for StageDirtyState();
  v2 = swift_allocObject();
  StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v1, 0);
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO14PrimDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d9IO15Stagegh122C26stageMetadataContainsAnyOf012primsContainiJ04coreACShyAA16ToolsFoundationsO5TokenVG_ShyAA04PrimdE0CGSo010RIOBuilderdC13J73RefaSgtcfcSo0rdqsT0aAMcfu_32f3b6550bcda465057a28ab83a1317178AmSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v17)(_BYTE *, _QWORD);
  _BYTE v18[32];
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = __CocoaSet.count.getter();
    result = MEMORY[0x24BEE4AF8];
    if (!v3)
      return result;
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v19 = __CocoaSet.startIndex.getter();
    v20 = v5;
    v21 = 1;
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_9;
    __break(1u);
  }
  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v19 = specialized _NativeSet.startIndex.getter(a1);
    v20 = v6;
    v21 = v7 & 1;
    while (1)
    {
LABEL_9:
      while (1)
      {
        v13 = v19;
        v14 = v20;
        v15 = v21;
        v16 = *(id *)(specialized Set.subscript.getter(v19, v20, v21, a1) + 32);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized ContiguousArray._endMutation()();
        if (v2)
          break;
        v8 = specialized _NativeSet.index(after:)(v13, v14, v15, a1);
        v10 = v9;
        v12 = v11;
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v13, v14, v15);
        v19 = v8;
        v20 = v10;
        v21 = v12 & 1;
        if (!--v3)
          goto LABEL_14;
      }
      if ((v15 & 1) == 0)
        break;
      if (__CocoaSet.Index.handleBitPattern.getter())
        swift_isUniquelyReferenced_nonNull_native();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PrimDirtyState>.Index);
      v17 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v17(v18, 0);
      if (!--v3)
      {
LABEL_14:
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v19, v20, v21);
        return v22;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t StageDirtyState.stageMetadataContainsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StageDirtyState.primsContainAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StageDirtyState.__allocating_init(stageMetadataContainsAnyOf:)(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v2 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v2 = MEMORY[0x24BEE4B08];
  type metadata accessor for StageDirtyState();
  v3 = swift_allocObject();
  StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(a1, v2, 0);
  return v3;
}

uint64_t StageDirtyState.__allocating_init(stageMetadataContainsAnyOf:primsContainAnyOf:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2();
  type metadata accessor for StageDirtyState();
  v4 = swift_allocObject();
  StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(a1, v3, 0);
  return v4;
}

uint64_t StageDirtyState.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static StageDirtyState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Set.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0)
    return specialized static Set.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v24 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v26 = (v6 - 1) & v6;
      v27 = v3;
      v8 = __clz(__rbit64(v6)) | (v3 << 6);
      goto LABEL_24;
    }
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v9 >= v25)
      return 1;
    v10 = *(_QWORD *)(v24 + 8 * v9);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v25)
        return 1;
      v10 = *(_QWORD *)(v24 + 8 * v11);
      if (!v10)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v25)
          return 1;
        v10 = *(_QWORD *)(v24 + 8 * v11);
        if (!v10)
          break;
      }
    }
LABEL_23:
    v26 = (v10 - 1) & v10;
    v27 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_24:
    v13 = result;
    v14 = *(void **)(*(_QWORD *)(result + 48) + 8 * v8);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    v15 = v14;
    _CFObject.hash(into:)();
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      goto LABEL_31;
    v19 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v18);
    v20 = static _CFObject.== infix(_:_:)();

    if ((v20 & 1) == 0)
    {
      v21 = ~v17;
      while (1)
      {
        v18 = (v18 + 1) & v21;
        if (((*(_QWORD *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v18);
        v23 = static _CFObject.== infix(_:_:)();

        if ((v23 & 1) != 0)
          goto LABEL_7;
      }
LABEL_31:

      return 0;
    }
LABEL_7:

    result = v13;
    v6 = v26;
    v3 = v27;
  }
  v12 = v3 + 4;
  if (v3 + 4 >= v25)
    return 1;
  v10 = *(_QWORD *)(v24 + 8 * v12);
  if (v10)
  {
    v11 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v25)
      return 1;
    v10 = *(_QWORD *)(v24 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_23;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31[72];

  v3 = result;
  v4 = a2 & 0xC000000000000001;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v5 = result;
    else
      v5 = result & 0xFFFFFFFFFFFFFF8;
    if (v4)
      return __CocoaSet.isEqual(to:)();
    v7 = specialized _NativeSet.isEqual(to:)(v5, a2);
    return v7 & 1;
  }
  if (v4)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    v7 = specialized _NativeSet.isEqual(to:)(v6, v3);
    return v7 & 1;
  }
  if (result == a2)
  {
LABEL_42:
    v7 = 1;
    return v7 & 1;
  }
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
  {
LABEL_44:
    v7 = 0;
    return v7 & 1;
  }
  v8 = 0;
  v28 = result + 56;
  v9 = 1 << *(_BYTE *)(result + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(result + 56);
  v29 = (unint64_t)(v9 + 63) >> 6;
  v12 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_36;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v15 >= v29)
      goto LABEL_42;
    v16 = *(_QWORD *)(v28 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v29)
        goto LABEL_42;
      v16 = *(_QWORD *)(v28 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v29)
          goto LABEL_42;
        v16 = *(_QWORD *)(v28 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_35:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_36:
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    v19 = *(void (**)(char *))(*(_QWORD *)v18 + 120);
    swift_retain();
    v19(v31);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(a2 + 32);
    v22 = v20 & ~v21;
    if (((*(_QWORD *)(v12 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      goto LABEL_43;
    v30 = v8;
    v23 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 48) + 8 * v22) + 128);
    swift_retain();
    LOBYTE(v23) = v23(v18);
    swift_release();
    if ((v23 & 1) == 0)
    {
      v24 = ~v21;
      for (i = v22 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v12 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 48) + 8 * v26) + 128);
        swift_retain();
        LOBYTE(v27) = v27(v18);
        swift_release();
        if ((v27 & 1) != 0)
          goto LABEL_19;
      }
LABEL_43:
      swift_release();
      goto LABEL_44;
    }
LABEL_19:
    result = swift_release();
    v8 = v30;
  }
  v17 = v15 + 3;
  if (v17 >= v29)
    goto LABEL_42;
  v16 = *(_QWORD *)(v28 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_35;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v29)
      goto LABEL_42;
    v16 = *(_QWORD *)(v28 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_35;
  }
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  char v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  id v40;
  void *v41;
  char v42[72];

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = a2 + 56;
  v36 = result + 56;
  v37 = result;
  v35 = v8;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v11 >= v8)
    return 1;
  v12 = *(_QWORD *)(v4 + 8 * v11);
  v13 = v3 + 1;
  if (!v12)
  {
    v13 = v11 + 1;
    if (v11 + 1 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v13);
    if (!v12)
    {
      v13 = v11 + 2;
      if (v11 + 2 >= v8)
        return 1;
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (!v12)
      {
        v14 = v11 + 3;
        if (v14 < v8)
        {
          v12 = *(_QWORD *)(v4 + 8 * v14);
          if (v12)
          {
            v13 = v14;
            goto LABEL_21;
          }
          while (1)
          {
            v13 = v14 + 1;
            if (__OFADD__(v14, 1))
              break;
            if (v13 >= v8)
              return 1;
            v12 = *(_QWORD *)(v4 + 8 * v13);
            ++v14;
            if (v12)
              goto LABEL_21;
          }
LABEL_34:
          __break(1u);
          return result;
        }
        return 1;
      }
    }
  }
LABEL_21:
  v38 = (v12 - 1) & v12;
  v39 = v13;
  for (i = __clz(__rbit64(v12)) + (v13 << 6); ; i = __clz(__rbit64(v7)) | (v3 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 24 * i);
    v17 = *v15;
    v16 = (void *)v15[1];
    v18 = (void *)v15[2];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    v19 = v16;
    v40 = v18;
    specialized Set.hash(into:)((uint64_t)v42, v17);
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    v41 = v19;
    _CFObject.hash(into:)();
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v2 + 32);
    v22 = v20 & ~v21;
    if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      break;
    v23 = ~v21;
    while (1)
    {
      v24 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 24 * v22);
      v26 = *v24;
      v25 = (void *)v24[1];
      v27 = (void *)v24[2];
      swift_bridgeObjectRetain();
      v28 = v25;
      v29 = v27;
      if ((specialized static Set.== infix(_:_:)(v26, v17) & 1) != 0)
        break;

      swift_bridgeObjectRelease();
LABEL_25:
      v22 = (v22 + 1) & v23;
      if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        goto LABEL_31;
    }
    v30 = v9;
    v31 = v2;
    v32 = v28;
    v33 = v41;
    v34 = static _CFObject.== infix(_:_:)();

    swift_bridgeObjectRelease();
    v2 = v31;
    v9 = v30;

    if ((v34 & 1) == 0)
      goto LABEL_25;

    swift_bridgeObjectRelease();
    v4 = v36;
    result = v37;
    v8 = v35;
    v7 = v38;
    v3 = v39;
    if (!v38)
      goto LABEL_8;
LABEL_7:
    v38 = (v7 - 1) & v7;
    v39 = v3;
  }
LABEL_31:

  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31[72];

  v3 = result;
  v4 = a2 & 0xC000000000000001;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v5 = result;
    else
      v5 = result & 0xFFFFFFFFFFFFFF8;
    if (v4)
      return __CocoaSet.isEqual(to:)();
    v7 = specialized _NativeSet.isEqual(to:)(v5, a2);
    return v7 & 1;
  }
  if (v4)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    v7 = specialized _NativeSet.isEqual(to:)(v6, v3);
    return v7 & 1;
  }
  if (result == a2)
  {
LABEL_42:
    v7 = 1;
    return v7 & 1;
  }
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
  {
LABEL_44:
    v7 = 0;
    return v7 & 1;
  }
  v8 = 0;
  v28 = result + 56;
  v9 = 1 << *(_BYTE *)(result + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(result + 56);
  v29 = (unint64_t)(v9 + 63) >> 6;
  v12 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_36;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v15 >= v29)
      goto LABEL_42;
    v16 = *(_QWORD *)(v28 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v29)
        goto LABEL_42;
      v16 = *(_QWORD *)(v28 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v29)
          goto LABEL_42;
        v16 = *(_QWORD *)(v28 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_35:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_36:
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    v19 = *(void (**)(char *))(*(_QWORD *)v18 + 128);
    swift_retain();
    v19(v31);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(a2 + 32);
    v22 = v20 & ~v21;
    if (((*(_QWORD *)(v12 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      goto LABEL_43;
    v30 = v8;
    v23 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 48) + 8 * v22) + 136);
    swift_retain();
    LOBYTE(v23) = v23(v18);
    swift_release();
    if ((v23 & 1) == 0)
    {
      v24 = ~v21;
      for (i = v22 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v12 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 48) + 8 * v26) + 136);
        swift_retain();
        LOBYTE(v27) = v27(v18);
        swift_release();
        if ((v27 & 1) != 0)
          goto LABEL_19;
      }
LABEL_43:
      swift_release();
      goto LABEL_44;
    }
LABEL_19:
    result = swift_release();
    v8 = v30;
  }
  v17 = v15 + 3;
  if (v17 >= v29)
    goto LABEL_42;
  v16 = *(_QWORD *)(v28 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_35;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v29)
      goto LABEL_42;
    v16 = *(_QWORD *)(v28 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_35;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t StageDirtyState.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StageDirtyState.Type);
  v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  type metadata accessor for PrimDirtyState();
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, 255, (uint64_t (*)(uint64_t))type metadata accessor for PrimDirtyState, (uint64_t)&protocol conformance descriptor for PrimDirtyState);
  v1._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0xD000000000000014;
  v3._object = (void *)0x800000022BD07B40;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v6._object = (void *)0x800000022BD07B60;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  NSArray v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  Class isa;
  objc_class *v18;
  objc_class *v19;

  v3[2] = a1;
  v3[3] = a2;
  if (a3)
  {
    v4 = a3;
LABEL_13:
    v3[4] = v4;
    return (uint64_t)v3;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO14PrimDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d9IO15Stagegh122C26stageMetadataContainsAnyOf012primsContainiJ04coreACShyAA16ToolsFoundationsO5TokenVG_ShyAA04PrimdE0CGSo010RIOBuilderdC13J73RefaSgtcfcSo0rdqsT0aAMcfu_32f3b6550bcda465057a28ab83a1317178AmSTf3nnnpk_nTf1cn_n(a2);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOBuilderDirtyPrimDescriptorRef(0);
  v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = v7.super.isa;
    v19 = isa;
    v4 = RIOBuilderDirtyStageDescriptorCreateWithPrimDescriptorsAndMetadataDescriptors();

    goto LABEL_13;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  result = specialized Set.startIndex.getter(a1);
  v10 = result;
  v12 = v11;
  v14 = v13 & 1;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
      goto LABEL_16;
    RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    result = specialized _NativeSet.index(after:)(v10, v12, v14 & 1, a1);
    v10 = result;
    v12 = v15;
    v14 = v16 & 1;
    if (!--v8)
    {
      outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v15, v16 & 1);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t StageDirtyState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t StageDirtyState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int StageDirtyState.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  Hasher.init(_seed:)();
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v4, v1);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StageDirtyState()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5[4];

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v5, v2);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StageDirtyState(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v5);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StageDirtyState()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5[4];

  Hasher.init(_seed:)();
  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v5, v2);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StageDirtyState()
{
  return StageDirtyState.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StageDirtyState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if ((specialized static Set.== infix(_:_:)(*(_QWORD *)(*a1 + 24), *(_QWORD *)(*a2 + 24)) & 1) != 0)
    return specialized static Set.== infix(_:_:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v3 + 16));
  else
    return 0;
}

uint64_t specialized _NativeSet.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;

  v3 = *(_QWORD *)(a2 + 16);
  result = __CocoaSet.count.getter();
  if (v3 != result)
    return 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v9 &= v9 - 1;
LABEL_6:
    swift_retain();
    v11 = __CocoaSet.contains(_:)();
    result = swift_release();
    if ((v11 & 1) == 0)
      return 0;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v12 >= v10)
    return 1;
  v13 = *(_QWORD *)(v6 + 8 * v12);
  ++v5;
  if (v13)
    goto LABEL_19;
  v5 = v12 + 1;
  if (v12 + 1 >= v10)
    return 1;
  v13 = *(_QWORD *)(v6 + 8 * v5);
  if (v13)
  {
LABEL_19:
    v9 = (v13 - 1) & v13;
    goto LABEL_6;
  }
  v14 = v12 + 2;
  if (v14 >= v10)
    return 1;
  v13 = *(_QWORD *)(v6 + 8 * v14);
  if (v13)
  {
    v5 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v5 >= v10)
      return 1;
    v13 = *(_QWORD *)(v6 + 8 * v5);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_23:
  __break(1u);
  return result;
}

void specialized Set.hash(into:)(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  Swift::UInt v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  Swift::Int v21;
  unint64_t v23;
  int64_t v24;
  char v25[72];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v26 = *a1;
  v27 = v4;
  v5 = a1[3];
  v28 = a1[2];
  v29 = v5;
  v30 = v3;
  Hasher._finalize()();
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v12++, 1))
      goto LABEL_19;
    if (v12 >= v10)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v11);
      return;
    }
    v23 = *(_QWORD *)(v6 + 8 * v12);
    if (!v23)
      break;
LABEL_16:
    v9 = (v23 - 1) & v23;
    v14 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_5:
    v15 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 24 * v14);
    v17 = *v15;
    v16 = (void *)v15[1];
    v18 = (void *)v15[2];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    v19 = v16;
    v20 = v18;
    specialized Set.hash(into:)((uint64_t)v25, v17);
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    _CFObject.hash(into:)();
    v21 = Hasher._finalize()();

    swift_bridgeObjectRelease();
    v11 ^= v21;
  }
  v24 = v12 + 1;
  if (v12 + 1 >= v10)
    goto LABEL_17;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    ++v12;
    goto LABEL_16;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v10)
      goto LABEL_17;
    v23 = *(_QWORD *)(v6 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23[9];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v25 = *a1;
  v26 = v4;
  v5 = a1[3];
  v27 = a1[2];
  v28 = v5;
  v29 = v3;
  Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for PrimDirtyState();
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, 255, (uint64_t (*)(uint64_t))type metadata accessor for PrimDirtyState, (uint64_t)&protocol conformance descriptor for PrimDirtyState);
    Set.Iterator.init(_cocoa:)();
    a2 = v30;
    v6 = v31;
    v7 = v32;
    v8 = v33;
    v9 = v34;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a2 + 32);
    v6 = a2 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    v8 = 0;
  }
  v13 = 0;
  v14 = (unint64_t)(v7 + 64) >> 6;
  while (a2 < 0)
  {
    v22 = __CocoaSet.Iterator.next()();
    if (!v22)
      goto LABEL_26;
    v23[0] = v22;
    type metadata accessor for PrimDirtyState();
    swift_dynamicCast();
    v18 = v24;
    if (!v24)
      goto LABEL_27;
    v17 = v8;
    v15 = v9;
LABEL_10:
    Hasher.init(_seed:)();
    (*(void (**)(uint64_t *))(*(_QWORD *)v18 + 128))(v23);
    v19 = Hasher._finalize()();
    swift_release();
    v13 ^= v19;
    v8 = v17;
    v9 = v15;
  }
  if (v9)
  {
    v15 = (v9 - 1) & v9;
    v16 = __clz(__rbit64(v9)) | (v8 << 6);
    v17 = v8;
LABEL_9:
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v16);
    v18 = v24;
    swift_retain();
    if (!v18)
      goto LABEL_27;
    goto LABEL_10;
  }
  v17 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v17 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v17);
    if (!v20)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v17);
      if (!v20)
      {
        v21 = v8 + 3;
        while (v14 != v21)
        {
          v20 = *(_QWORD *)(v6 + 8 * v21++);
          if (v20)
          {
            v17 = v21 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        v24 = 0;
LABEL_27:
        outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
        Hasher._combine(_:)(v13);
        return;
      }
    }
LABEL_22:
    v15 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v17 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23[9];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v25 = *a1;
  v26 = v4;
  v5 = a1[3];
  v27 = a1[2];
  v28 = v5;
  v29 = v3;
  Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for PropertyDirtyState();
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, 255, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDirtyState, (uint64_t)&protocol conformance descriptor for PropertyDirtyState);
    Set.Iterator.init(_cocoa:)();
    a2 = v30;
    v6 = v31;
    v7 = v32;
    v8 = v33;
    v9 = v34;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a2 + 32);
    v6 = a2 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    v8 = 0;
  }
  v13 = 0;
  v14 = (unint64_t)(v7 + 64) >> 6;
  while (a2 < 0)
  {
    v22 = __CocoaSet.Iterator.next()();
    if (!v22)
      goto LABEL_26;
    v23[0] = v22;
    type metadata accessor for PropertyDirtyState();
    swift_dynamicCast();
    v18 = v24;
    if (!v24)
      goto LABEL_27;
    v17 = v8;
    v15 = v9;
LABEL_10:
    Hasher.init(_seed:)();
    (*(void (**)(uint64_t *))(*(_QWORD *)v18 + 120))(v23);
    v19 = Hasher._finalize()();
    swift_release();
    v13 ^= v19;
    v8 = v17;
    v9 = v15;
  }
  if (v9)
  {
    v15 = (v9 - 1) & v9;
    v16 = __clz(__rbit64(v9)) | (v8 << 6);
    v17 = v8;
LABEL_9:
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v16);
    v18 = v24;
    swift_retain();
    if (!v18)
      goto LABEL_27;
    goto LABEL_10;
  }
  v17 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v17 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v17);
    if (!v20)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v17);
      if (!v20)
      {
        v21 = v8 + 3;
        while (v14 != v21)
        {
          v20 = *(_QWORD *)(v6 + 8 * v21++);
          if (v20)
          {
            v17 = v21 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        v24 = 0;
LABEL_27:
        outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
        Hasher._combine(_:)(v13);
        return;
      }
    }
LABEL_22:
    v15 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v17 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  Swift::Int v14;
  unint64_t v16;
  int64_t v17;

  Hasher._finalize()();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_19;
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    v16 = *(_QWORD *)(v3 + 8 * v9);
    if (!v16)
      break;
LABEL_16:
    v6 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    v12 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v11);
    Hasher.init(_seed:)();
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
    v13 = v12;
    _CFObject.hash(into:)();
    v14 = Hasher._finalize()();

    v8 ^= v14;
  }
  v17 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_17;
  v16 = *(_QWORD *)(v3 + 8 * v17);
  if (v16)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v7)
      goto LABEL_17;
    v16 = *(_QWORD *)(v3 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t specialized static PrimDirtyStateBuilder.buildBlock(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = MEMORY[0x24BEE4B08];
  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x22E2F57B8](v4, a1);
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      swift_retain();
      specialized Set._Variant.insert(_:)(&v6, v5);
      swift_release();
      swift_release();
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t type metadata accessor for StageDirtyState()
{
  return objc_opt_self();
}

uint64_t base witness table accessor for Equatable in StageDirtyState(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type StageDirtyState and conformance StageDirtyState, a2, (uint64_t (*)(uint64_t))type metadata accessor for StageDirtyState, (uint64_t)&protocol conformance descriptor for StageDirtyState);
}

ValueMetadata *type metadata accessor for PrimDirtyStateBuilder()
{
  return &type metadata for PrimDirtyStateBuilder;
}

uint64_t method lookup function for StageDirtyState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StageDirtyState.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of StageDirtyState.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of StageDirtyState.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

_QWORD *specialized StageDirtyState.__allocating_init(core:)(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t j;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = (void *)RIOBuilderDirtyStageDescriptorCopyPrimDescriptors();
  type metadata accessor for RIOBuilderDirtyPrimDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v3 = MEMORY[0x24BEE4AF8];
  v4 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v5 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    goto LABEL_14;
LABEL_3:
  result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)();
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v7 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
      v8 = (id)MEMORY[0x22E2F57B8](v7, v4);
    else
      v8 = *(id *)(v4 + 8 * v7 + 32);
    v9 = (uint64_t)v8;
    if (RIOBuilderDirtyPrimDescriptorCopyType() == 2)
    {
      specialized TypeNamePrimDirtyState.__allocating_init(core:)(v9);
    }
    else
    {
      type metadata accessor for PrimDirtyState();
      PrimDirtyState.__allocating_init(core:)(v9);
    }
    ++v7;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v5 != v7);
  v10 = v3;
  swift_bridgeObjectRelease();
LABEL_15:
  v11 = specialized Set.init<A>(_:)(v10);
  swift_bridgeObjectRelease();
  v12 = (void *)RIOBuilderDirtyStageDescriptorCopyMetadataDescriptors();
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v3 >> 62))
  {
    v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_17;
LABEL_30:
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
LABEL_31:
    v23 = specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for StageDirtyState();
    result = (_QWORD *)swift_allocObject();
    result[2] = v23;
    result[3] = v11;
    result[4] = a1;
    return result;
  }
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_30;
LABEL_17:
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v14 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v13; ++i)
      {
        MEMORY[0x22E2F57B8](i, v3);
        v16 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        v18 = *(_QWORD *)(v3 + 16);
        v17 = *(_QWORD *)(v3 + 24);
        if (v18 >= v17 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        *(_QWORD *)(v3 + 16) = v18 + 1;
        *(_QWORD *)(v3 + 8 * v18 + 32) = v16;
      }
    }
    else
    {
      for (j = 0; j != v13; ++j)
      {
        v20 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        v22 = *(_QWORD *)(v14 + 16);
        v21 = *(_QWORD *)(v14 + 24);
        if (v22 >= v21 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        *(_QWORD *)(v14 + 16) = v22 + 1;
        *(_QWORD *)(v14 + 8 * v22 + 32) = v20;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x22E2F889C](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Set<PropertyDirtyState>.Iterator._Variant()
{
  return swift_release();
}

uint64_t outlined consume of Set<ToolsFoundations.Token>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t static ActionBuilder.generateGroupActionSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void *v42;
  void *v43;
  char v44;

  v0 = type metadata accessor for __RKEntityActionSpecification();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v35 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityGroupActionOrder?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __RKEntityGroupActionOrder();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v41 = (char *)&v35 - v15;
  Inputs.prim.getter();
  v16 = String.count.getter();
  v39 = v4;
  v40 = v1;
  v38 = v6;
  if (v16 < 1)
  {
    v17 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v17 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v43);

  swift_release();
  v18 = v43;
  if (v44 == 1)
  {
    v42 = v43;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v19 = v18;
LABEL_11:
    outlined consume of Result<Double, Object.Error>(v19, 1);
    return MEMORY[0x24BEE4AF8];
  }
  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v20 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v20 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v43);

  swift_release();
  v21 = v43;
  if ((v44 & 1) != 0)
  {
    v42 = v43;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    v19 = v21;
    goto LABEL_11;
  }
  swift_retain();
  __RKEntityGroupActionOrder.init(inputs:)((uint64_t)v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v41, v9, v10);
  v24 = Inputs.accumulatedValues(forKey:)(0x736E6F69746361, 0xE700000000000000);
  v25 = specialized _arrayConditionalCast<A, B>(_:)(v24);
  swift_bridgeObjectRelease();
  if (v25)
  {
    v37 = v21;
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v36 = v0;
      swift_bridgeObjectRetain();
      v27 = 0;
      v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v29 = *(_QWORD *)(v25 + 8 * v27++ + 32);
        v43 = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v29);
        swift_bridgeObjectRelease();
        v28 = v43;
      }
      while (v26 != v27);
      swift_bridgeObjectRelease();
      v0 = v36;
    }
    else
    {
      v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    if (v28[2])
    {
      v30 = v41;
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v41, v10);
      v31 = v38;
      __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
      v32 = v40;
      (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v31, *MEMORY[0x24BDE69C8], v0);
      v33 = (uint64_t)v39;
      static ActionBuilder.collapseAndReturnGroupActionSpecification(_:)(v31, (uint64_t)v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v34 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_22BD0C360;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v32 + 32))(v22 + v34, v33, v0);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v0);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
      return v22;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v41, v10);
  return MEMORY[0x24BEE4AF8];
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t started;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  unsigned int (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t result;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x24BDAC7A8](v4);
  v71 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  MEMORY[0x24BDAC7A8](v6);
  v78 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v8);
  v79 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments();
  v11 = *(_QWORD *)(started - 8);
  v81 = started;
  v82 = v11;
  MEMORY[0x24BDAC7A8](started);
  v80 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for __RKEntityAudioActionArguments();
  v84 = *(_QWORD *)(v13 - 8);
  v85 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v83 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for __RKEntityOrbitEntityActionArguments();
  v76 = *(_QWORD *)(v15 - 8);
  v77 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v75 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for __RKEntitySpinActionArguments();
  v73 = *(_QWORD *)(v17 - 8);
  v74 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v72 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for __RKEntityActionSpecification();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v86 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v87 = (char *)&v64 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v64 - v25;
  v27 = type metadata accessor for __RKEntityActionGroupArguments();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v31(v26, a1, v19);
  v32 = *(unsigned int (**)(char *, uint64_t))(v20 + 88);
  if (v32(v26, v19) != *MEMORY[0x24BDE69C8])
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
    v41 = a2;
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(v41, a1, v19);
  }
  v70 = a2;
  v33 = *(void (**)(char *, uint64_t))(v20 + 96);
  v33(v26, v19);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v26, v27);
  v34 = *(_QWORD *)(__RKEntityActionGroupArguments.actions.getter() + 16);
  swift_bridgeObjectRelease();
  v35 = v28;
  v36 = (uint64_t)v30;
  if (v34 != 1)
  {
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v27);
    v41 = v70;
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(v41, a1, v19);
  }
  v68 = v33;
  v69 = v35;
  v37 = __RKEntityActionGroupArguments.loopCount.getter();
  if ((v38 & 1) != 0)
  {
    v39 = 1;
    v40 = v87;
  }
  else
  {
    v39 = v37;
    v40 = v87;
    if (v37 < 1)
    {
      v35 = v69;
      goto LABEL_6;
    }
  }
  v67 = v27;
  result = __RKEntityActionGroupArguments.actions.getter();
  if (*(_QWORD *)(result + 16))
  {
    v66 = v39;
    v65 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v31(v40, (char *)(result + v65), v19);
    swift_bridgeObjectRelease();
    v43 = v86;
    v31(v86, v40, v19);
    v44 = ((uint64_t (*)(char *, uint64_t))v32)(v43, v19);
    if ((_DWORD)v44 == *MEMORY[0x24BDE69B8])
    {
      v68(v43, v19);
      v45 = (uint64_t)v83;
      v46 = v84;
      v47 = v85;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v43, v85);
      static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)(a1, v66, v45, v70);
LABEL_18:
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v20 + 8))(v40, v19);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v36, v67);
    }
    v48 = v44;
    if ((_DWORD)v44 == *MEMORY[0x24BDE6990])
    {
      v68(v43, v19);
      v49 = v81;
      v50 = v80;
      v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v82 + 32))(v80, v43, v81);
      MEMORY[0x22E2F4B04](v51);
      result = __RKEntityStartAnimateActionArguments.loopCount.getter();
      if ((unsigned __int128)(result * (__int128)v66) >> 64 == (result * v66) >> 63)
      {
        __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter();
        __RKEntityStartAnimateActionArguments.clipStart.getter();
        __RKEntityStartAnimateActionArguments.clipDuration.getter();
        __RKEntityStartAnimateActionArguments.clipReversed.getter();
        __RKEntityStartAnimateActionArguments.animationSpeed.getter();
        __RKEntityStartAnimateActionArguments.clipReverses.getter();
        v52 = v70;
        __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 104))(v52, v48, v19);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v49);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v87, v19);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v36, v67);
      }
      goto LABEL_37;
    }
    if ((_DWORD)v44 == *MEMORY[0x24BDE6978])
    {
      v68(v43, v19);
      v45 = (uint64_t)v75;
      v46 = v76;
      v47 = v77;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v75, v43, v77);
      static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)(v36, v66, v70);
      goto LABEL_18;
    }
    if ((_DWORD)v44 == *MEMORY[0x24BDE69A8])
    {
      v68(v43, v19);
      v54 = v72;
      v53 = v73;
      v55 = v74;
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v43, v74);
      static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)(v36, v66, v70);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
      goto LABEL_19;
    }
    if (v66 == 1)
    {
      v56 = *(_QWORD *)(__RKEntityActionGroupArguments.actions.getter() + 16);
      swift_bridgeObjectRelease();
      if (v56 == 1)
      {
        v57 = __RKEntityActionGroupArguments.actions.getter();
        v58 = v67;
        if (*(_QWORD *)(v57 + 16))
        {
          v59 = (uint64_t)v71;
          v31(v71, (char *)(v57 + v65), v19);
          v60 = 0;
        }
        else
        {
          v60 = 1;
          v59 = (uint64_t)v71;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v59, v60, 1, v19);
        swift_bridgeObjectRelease();
        v61 = *(void (**)(char *, uint64_t))(v20 + 8);
        v61(v87, v19);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v36, v58);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v59, 1, v19) != 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v70, v59, v19);
          v63 = v86;
          return ((uint64_t (*)(char *, uint64_t))v61)(v63, v19);
        }
        outlined destroy of Any?(v59, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
      }
      else
      {
        v61 = *(void (**)(char *, uint64_t))(v20 + 8);
        v61(v87, v19);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v36, v67);
      }
      v62 = v70;
      v43 = v86;
    }
    else
    {
      v61 = *(void (**)(char *, uint64_t))(v20 + 8);
      v61(v87, v19);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v36, v67);
      v62 = v70;
    }
    v31((char *)v62, a1, v19);
    v63 = v43;
    return ((uint64_t (*)(char *, uint64_t))v61)(v63, v19);
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(unint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  v31 = a3;
  v4 = type metadata accessor for __RKEntityGroupActionOrder();
  MEMORY[0x24BDAC7A8](v4);
  v30 = type metadata accessor for __RKEntityActionGroupArguments();
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntitySpinActionArguments();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __RKEntitySpinActionArguments.duration.getter();
  v12 = __RKEntitySpinActionArguments.iterations.getter();
  v13 = v12 | ((HIDWORD(v12) & 1) << 32);
  v14 = v11 | ((HIDWORD(v11) & 1) << 32);
  if (a2)
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v14, v13);
    v15 = v31;
    static ActionBuilder.copySpinActionArguments(_:multiplier:)();
    v16 = *MEMORY[0x24BDE69A8];
    v17 = type metadata accessor for __RKEntityActionSpecification();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  }
  else
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v14, v13);
    static ActionBuilder.copySpinActionArguments(_:multiplier:)();
    __RKEntityActionGroupArguments.order.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v19 = type metadata accessor for __RKEntityActionSpecification();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22BD0C360;
    v23 = v22 + v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 16))(v23, v10, v7);
    v24 = *MEMORY[0x24BDE69A8];
    v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 104);
    v27(v23, v24, v19);
    __RKEntityActionGroupArguments.exclusive.getter();
    __RKEntityActionGroupArguments.loopCount.getter();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v25 = v31;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v31, v6, v30);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v27)(v25, *MEMORY[0x24BDE69C8], v19);
  }
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(unint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  v31 = a3;
  v4 = type metadata accessor for __RKEntityGroupActionOrder();
  MEMORY[0x24BDAC7A8](v4);
  v30 = type metadata accessor for __RKEntityActionGroupArguments();
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntityOrbitEntityActionArguments();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __RKEntityOrbitEntityActionArguments.duration.getter();
  v12 = __RKEntityOrbitEntityActionArguments.rotations.getter();
  v13 = v12 | ((HIDWORD(v12) & 1) << 32);
  v14 = v11 | ((HIDWORD(v11) & 1) << 32);
  if (a2)
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v14, v13);
    v15 = v31;
    static ActionBuilder.copyOrbitActionArguments(_:multiplier:)(v31);
    v16 = *MEMORY[0x24BDE6978];
    v17 = type metadata accessor for __RKEntityActionSpecification();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  }
  else
  {
    specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(v14, v13);
    static ActionBuilder.copyOrbitActionArguments(_:multiplier:)((uint64_t)v10);
    __RKEntityActionGroupArguments.order.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v19 = type metadata accessor for __RKEntityActionSpecification();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22BD0C360;
    v23 = v22 + v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 16))(v23, v10, v7);
    v24 = *MEMORY[0x24BDE6978];
    v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 104);
    v27(v23, v24, v19);
    __RKEntityActionGroupArguments.exclusive.getter();
    __RKEntityActionGroupArguments.loopCount.getter();
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v25 = v31;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v31, v6, v30);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v27)(v25, *MEMORY[0x24BDE69C8], v19);
  }
}

uint64_t static ActionBuilder.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v46 = a3;
  v49 = a1;
  v50 = a2;
  v51 = a4;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for __RKEntityActionMultiplePerformBehavior();
  v6 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for __RKAudioSpatialModeSelection();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityAudioActionType?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for __RKEntityAudioActionType();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v50 < 1)
  {
    v40 = v6;
    v41 = v13;
    v44 = v11;
    v45 = v26;
    v49 = v22;
    v50 = (uint64_t)v15;
    MEMORY[0x22E2F484C](v24);
    v29 = __RKEntityAudioActionArguments.path.getter();
    v42 = v30;
    v43 = v29;
    __RKEntityAudioActionArguments.type.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v49, *MEMORY[0x24BDE6878], v19);
      outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for __RKEntityAudioActionType?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v18, v19);
    }
    v31 = (uint64_t)v44;
    __RKEntityAudioActionArguments.spatialMode.getter();
    v32 = v41;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v31, 1, v12);
    v34 = v40;
    if (v33 == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v50, *MEMORY[0x24BDE6950], v12);
      outlined destroy of Any?(v31, &demangling cache variable for type metadata for __RKAudioSpatialModeSelection?);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v50, v31, v12);
    }
    v35 = (uint64_t)v48;
    __RKEntityAudioActionArguments.volume.getter();
    __RKEntityAudioActionArguments.multiplePerformBehavior.getter();
    v36 = v47;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v47) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v8, *MEMORY[0x24BDE6DA0], v36);
      outlined destroy of Any?(v35, &demangling cache variable for type metadata for __RKEntityActionMultiplePerformBehavior?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v8, v35, v36);
    }
    v37 = v51;
    __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)();
    v38 = *MEMORY[0x24BDE69B8];
    v39 = type metadata accessor for __RKEntityActionSpecification();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v37, v38, v39);
  }
  else
  {
    v27 = type metadata accessor for __RKEntityActionSpecification();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v51, v49, v27);
  }
}

uint64_t static ActionBuilder.copySpinActionArguments(_:multiplier:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for __RKEntitySpinDirectionType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x22E2F4744](v8);
  __RKEntitySpinActionArguments.duration.getter();
  __RKEntitySpinActionArguments.iterations.getter();
  __RKEntitySpinActionArguments.direction.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDE6930], v3);
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  }
  __RKEntitySpinActionArguments.axis.getter();
  return __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)();
}

uint64_t static ActionBuilder.copyOrbitActionArguments(_:multiplier:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;

  v15 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __RKEntitySpinDirectionType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v14 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x22E2F4A38](v9);
  __RKEntityOrbitEntityActionArguments.pivotTarget.getter();
  __RKEntityOrbitEntityActionArguments.duration.getter();
  __RKEntityOrbitEntityActionArguments.rotations.getter();
  __RKEntityOrbitEntityActionArguments.orbitalAxis.getter();
  v12 = v10;
  v13 = __RKEntityOrbitEntityActionArguments.orientToPath.getter();
  __RKEntityOrbitEntityActionArguments.spinDirection.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v14, *MEMORY[0x24BDE6930], v4);
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for __RKEntitySpinDirectionType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v14, v3, v4);
  }
  return __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

float specialized static ActionBuilder.calculateMaximumMultiplier(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)&a1;
  v3 = 1.0;
  if ((a1 & 0x100000000) != 0)
    v2 = 1.0;
  if ((a2 & 0x100000000) == 0)
    v3 = *(float *)&a2;
  if (v2 <= v3)
  {
    if ((LODWORD(v3) & 0x7FFFFF) == 0)
      v2 = v3;
    if ((~LODWORD(v3) & 0x7F800000) != 0)
      v2 = v3;
  }
  return roundf(3.4028e38 / v2);
}

uint64_t one-time initialization function for lightComponent()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.lightComponent = result;
  return result;
}

id one-time initialization function for innerAngleAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.innerAngleAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for outerAngleAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.outerAngleAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for attenuationRadiusAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.attenuationRadiusAttributeName = (uint64_t)result;
  return result;
}

id one-time initialization function for attenuationFalloffExponentAttributeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static SpotLightComponentBuilder.attenuationFalloffExponentAttributeName = (uint64_t)result;
  return result;
}

uint64_t SpotLightComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];
  _QWORD aBlock[6];

  v2 = *v1;
  v7[2] = a1;
  v7[4] = v2;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in SpotLightComponentBuilder.run(inputs:);
  *(_QWORD *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in SpotLightComponentBuilder.run(inputs:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(int8x16_t *, _QWORD);
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  char v67;
  uint64_t v68;
  id v70;
  char v71;
  id v72;
  id v73;
  uint64_t v74;
  char v75;
  char v76;
  __int128 v77;
  int8x8_t v78;
  int8x8_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(int8x16_t *, _QWORD);
  void (*v96)(int8x16_t *, _QWORD);
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  uint64_t v114;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent.Shadow?);
  MEMORY[0x24BDAC7A8](v3);
  v105 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SpotLightComponent.Shadow();
  v106 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v103 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  MEMORY[0x24BDAC7A8](v7);
  v102 = (uint64_t)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v101 = (char *)&v97 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent?);
  MEMORY[0x24BDAC7A8](v11);
  v108 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SpotLightComponent();
  v110 = *(_QWORD *)(v13 - 8);
  v111 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v109 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for __EntityRef();
  v107 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = Inputs.prim.getter();
  v19 = (void *)RIOPxrUsdObjectCopyName();
  v20 = (void *)RIOPxrTfTokenCopyString();
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  if (one-time initialization token for infoID != -1)
    swift_once();
  v24 = (id)static SpotLightComponentBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_47:
    SpotLightComponentBuilder.clear(inputs:)();
    return swift_release();
  }
  v100 = v5;
  v104 = a2;
  v25 = (void *)RIOPxrUsdPrimCopyAttribute();
  v26 = RIOPxrUsdAttributeCopyValue();
  if (!v26)
  {
    swift_bridgeObjectRelease();

    goto LABEL_47;
  }
  v27 = (void *)v26;
  v28 = RIOPxrVtValueCopyToken();
  if (!v28)
  {
    swift_bridgeObjectRelease();

    goto LABEL_47;
  }
  v29 = (void *)v28;
  v99 = v18;

  v30 = (void *)RIOPxrTfTokenCopyString();
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v33 = v32;

  if (v31 == 0xD000000000000014 && v33 == 0x800000022BD07C10)
  {
    swift_bridgeObjectRelease();
    v34 = v104;
    goto LABEL_13;
  }
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v34 = v104;
  if ((v35 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
LABEL_13:
  if (one-time initialization token for OutputName != -1)
LABEL_71:
    swift_once();
  v36 = static EntityBuilder.OutputName;
  v37 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v36, v37, &v113);
  if (v114)
  {
    type metadata accessor for EntityProxy();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v38 = v112;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0)
      {
        SpotLightComponentBuilder.clear(inputs:)();
        swift_release();
        return swift_release();
      }
      v98 = v38;
      Inputs.prim.getter();
      if (one-time initialization token for colorAttributeName != -1)
        swift_once();
      v39 = (id)static SpotLightComponentBuilder.colorAttributeName;
      v40 = specialized Prim.attributeValue<A>(of:type:)();
      v42 = v41;
      v23 = v43;

      swift_release();
      v44.i32[0] = 0;
      v45.i32[0] = v23 & 1;
      v46 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v45, v44), 0);
      v45.i64[0] = v40;
      v45.i64[1] = v42;
      v113 = vbslq_s8(v46, v45, (int8x16_t)xmmword_22BD0C6D0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      lazy protocol witness table accessor for type Float and conformance Float();
      v47 = (void *)SIMD3<>.cgColor.getter();
      Inputs.prim.getter();
      if (one-time initialization token for intensityAttributeName != -1)
        swift_once();
      v48 = (id)static SpotLightComponentBuilder.intensityAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for innerAngleAttributeName != -1)
        swift_once();
      v49 = (id)static SpotLightComponentBuilder.innerAngleAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for outerAngleAttributeName != -1)
        swift_once();
      v50 = (id)static SpotLightComponentBuilder.outerAngleAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for attenuationRadiusAttributeName != -1)
        swift_once();
      v51 = (id)static SpotLightComponentBuilder.attenuationRadiusAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      Inputs.prim.getter();
      if (one-time initialization token for attenuationFalloffExponentAttributeName != -1)
        swift_once();
      v52 = (id)static SpotLightComponentBuilder.attenuationFalloffExponentAttributeName;
      specialized Prim.attributeValue<A>(of:type:)();

      swift_release();
      *(_BYTE *)(v34 + 17) = 1;
      type metadata accessor for Entity();
      v53 = MEMORY[0x24BEE27D0];
      __AssetRef.__as<A>(_:)();
      v114 = v53;
      static __EntityRef.__fromCore(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v113);
      v54 = static Entity.__fromCore(_:)();
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v17, v15);
      v55 = v47;
      v56 = (uint64_t)v109;
      SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)();
      v57 = v110;
      v58 = v111;
      v59 = v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v108, v56, v111);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v58);
      v107 = v54;
      v60 = (void (*)(int8x16_t *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v60(&v113, 0);
      specialized Builder.addComponent<A>(component:)(v56);
      v61 = Prim.children.getter();
      v62 = v61;
      v63 = v100;
      if (v61 >> 62)
      {
        swift_bridgeObjectRetain();
        v21 = _CocoaArrayWrapper.endIndex.getter();
        if (v21)
          goto LABEL_31;
      }
      else
      {
        v21 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v21)
        {
LABEL_31:
          v108 = v55;
          type metadata accessor for RIOPxrTfTokenRef(0);
          v34 = v62 & 0xC000000000000001;
          v17 = 4;
          while (1)
          {
            v64 = v17 - 4;
            if (v34)
            {
              MEMORY[0x22E2F57B8](v17 - 4, v62);
              v15 = v17 - 3;
              if (__OFADD__(v64, 1))
                goto LABEL_70;
            }
            else
            {
              swift_retain();
              v15 = v17 - 3;
              if (__OFADD__(v64, 1))
              {
LABEL_70:
                __break(1u);
                goto LABEL_71;
              }
            }
            v65 = (void *)RIOPxrUsdObjectCopyName();
            if (one-time initialization token for shadowStructName != -1)
              swift_once();
            v66 = (void *)static SpotLightComponentBuilder.shadowStructName;
            lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
            v23 = v66;
            v67 = static _CFObject.== infix(_:_:)();

            if ((v67 & 1) != 0)
              break;
            swift_release();
            ++v17;
            v63 = v100;
            if (v15 == v21)
            {
              swift_bridgeObjectRelease_n();
              v55 = v108;
              goto LABEL_81;
            }
          }
          swift_bridgeObjectRelease_n();
          if (one-time initialization token for shadowEnabledAttributeName != -1)
            swift_once();
          v70 = (id)static SpotLightComponentBuilder.shadowEnabledAttributeName;
          v71 = specialized Prim.attributeValue<A>(of:type:)();

          v55 = v108;
          if (v71 == 2 || (v71 & 1) == 0)
          {
            swift_release();
            v63 = v100;
            goto LABEL_81;
          }
          if (one-time initialization token for shadowDepthBiasAttributeName != -1)
            swift_once();
          v72 = (id)static SpotLightComponentBuilder.shadowDepthBiasAttributeName;
          specialized Prim.attributeValue<A>(of:type:)();

          if (one-time initialization token for shadowZBoundsAttributeName != -1)
            swift_once();
          v73 = (id)static SpotLightComponentBuilder.shadowZBoundsAttributeName;
          v74 = specialized Prim.attributeValue<A>(of:type:)();
          v76 = v75;

          LODWORD(v77) = 0;
          v78.i32[0] = v76 & 1;
          v79 = vdup_lane_s8(vceq_s8(v78, *(int8x8_t *)&v77), 0);
          if (one-time initialization token for shadowCullModeAttributeName != -1)
            swift_once();
          *(int8x8_t *)&v77 = vbsl_s8(v79, (int8x8_t)v74, (int8x8_t)0x412000003C23D70ALL);
          v97 = v77;
          v80 = (id)static SpotLightComponentBuilder.shadowCullModeAttributeName;
          v81 = specialized Prim.attributeValue<A>(of:type:)();
          v83 = v82;

          if (v83)
          {
            if (v81 == 1801675074 && v83 == 0xE400000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v84 = (unsigned int *)MEMORY[0x24BDE7A70];
LABEL_65:
              v85 = *v84;
              v86 = type metadata accessor for MaterialParameterTypes.FaceCulling();
              v87 = *(_QWORD *)(v86 - 8);
              v88 = (uint64_t)v101;
              (*(void (**)(char *, uint64_t, uint64_t))(v87 + 104))(v101, v85, v86);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v87 + 56))(v88, 0, 1, v86);
LABEL_78:
              outlined init with copy of MaterialParameterTypes.FaceCulling?(v88, v102);
              v91 = (uint64_t)v103;
              SpotLightComponent.Shadow.init(depthBias:cullMode:zNear:zFar:)();
              v93 = v105;
              v92 = v106;
              v94 = v100;
              (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v105, v91, v100);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v93, 0, 1, v94);
              v95 = (void (*)(int8x16_t *, _QWORD))dispatch thunk of Entity.components.modify();
              Entity.ComponentSet.subscript.setter();
              v95(&v113, 0);
              specialized Builder.addComponent<A>(component:)(v91);
              swift_release();

              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v94);
              outlined destroy of Any?(v88, &demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
              return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v109, v111);
            }
            if (v81 == 0x746E6F7246 && v83 == 0xE500000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v84 = (unsigned int *)MEMORY[0x24BDE7A80];
              goto LABEL_65;
            }
            if (v81 == 1701736270 && v83 == 0xE400000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_76:
              v84 = (unsigned int *)MEMORY[0x24BDE7A78];
              goto LABEL_65;
            }
            v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v89 & 1) != 0)
              goto LABEL_76;
          }
          v90 = type metadata accessor for MaterialParameterTypes.FaceCulling();
          v88 = (uint64_t)v101;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v101, 1, 1, v90);
          goto LABEL_78;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_81:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v105, 1, 1, v63);
      v96 = (void (*)(int8x16_t *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v96(&v113, 0);
      swift_release();

      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v109, v111);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v113, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for lightComponent != -1)
    swift_once();
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v68 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v68 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v68 + 32) = v21;
  *(_QWORD *)(v68 + 40) = v23;
  os_log(_:dso:log:type:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t SpotLightComponentBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(__int128 *, _QWORD);
  uint64_t v16;
  void (*v17)(__int128 *, _QWORD);
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent.Shadow?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpotLightComponent?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __EntityRef();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v11 = static EntityBuilder.OutputName;
  v12 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v11, v12, &v20);
  if (!v21)
  {
    outlined destroy of Any?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 17) & 1) == 0)
    return swift_release();
  type metadata accessor for Entity();
  v13 = MEMORY[0x24BEE27D0];
  __AssetRef.__as<A>(_:)();
  v21 = v13;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
  static Entity.__fromCore(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14 = type metadata accessor for SpotLightComponent();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  v15 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v15(&v20, 0);
  v16 = type metadata accessor for SpotLightComponent.Shadow();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v3, 1, 1, v16);
  v17 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v17(&v20, 0);
  swift_release();
  result = swift_release();
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

uint64_t type metadata accessor for SpotLightComponentBuilder()
{
  return objc_opt_self();
}

uint64_t specialized SpotLightComponentBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  if (one-time initialization token for realityKitComponentTypeName != -1)
    swift_once();
  v9 = static SpotLightComponentBuilder.realityKitComponentTypeName;
  v0 = (id)static SpotLightComponentBuilder.realityKitComponentTypeName;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()();
  v3 = v9;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v9 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t partial apply for closure #1 in SpotLightComponentBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in SpotLightComponentBuilder.run(inputs:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_22BC513D0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

id SafeSceneUUIDTable.getOrAssign(to:forScene:fallback:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v6 = v5;
  v38 = a4;
  v40 = a5;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v37 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v36 - v17;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v36 - v21;
  v39 = *(id *)(v6 + 16);
  objc_msgSend(v39, sel_lock, v20);
  v23 = 10867;
  if ((a3 & 1) != 0)
  {
    v24 = 0xE200000000000000;
  }
  else
  {
    v23 = 0;
    v24 = 0xE000000000000000;
  }
  v41 = v23;
  v42 = v24;
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = a1;
  v25._object = a2;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v27 = v41;
  v26 = v42;
  swift_beginAccess();
  v28 = *(_QWORD *)(v6 + 24);
  if (*(_QWORD *)(v28 + 16))
  {
    swift_bridgeObjectRetain();
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
    if ((v30 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v22, *(_QWORD *)(v28 + 56) + *(_QWORD *)(v11 + 72) * v29, v10);
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v31(v22, 0, 1, v10);
    }
    else
    {
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v31(v22, 1, 1, v10);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v22, 1, v10) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v40, v22, v10);
      swift_endAccess();
      swift_bridgeObjectRelease();
      v33 = v39;
      return objc_msgSend(v33, sel_unlock);
    }
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v31(v22, 1, 1, v10);
  }
  outlined destroy of UUID?((uint64_t)v22);
  swift_endAccess();
  outlined init with copy of UUID?(v38, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, v10) == 1)
  {
    v32 = v37;
    UUID.init()();
    outlined destroy of UUID?((uint64_t)v18);
  }
  else
  {
    v32 = v37;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v37, v18, v10);
  }
  v33 = v39;
  v34 = v40;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v32, v10);
  v31(v15, 0, 1, v10);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v15, v27, v26);
  swift_endAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v34, v32, v10);
  return objc_msgSend(v33, sel_unlock);
}

uint64_t SafeSceneUUIDTable.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SafeSceneUUIDTable()
{
  return objc_opt_self();
}

uint64_t SceneAssetKeepAlive.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneAssetKeepAlive()
{
  return objc_opt_self();
}

uint64_t specialized static ActionBuilder.findSceneRoot(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  swift_retain();
  if (RIOPxrUsdObjectIsValid())
  {
    v2 = 0;
    while (1)
    {
      v3 = a1;
      swift_retain();
      v4 = Object.authoredMetadata()();
      swift_release();
      if (String.count.getter() < 1)
        v5 = (id)RIOPxrTfTokenEmpty();
      else
        v5 = (id)RIOPxrTfTokenCreateWithCString();
      v6 = v5;
      if (*(_QWORD *)(v4 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v8 & 1) != 0))
      {
        v9 = *(id *)(*(_QWORD *)(v4 + 56) + 8 * v7);

        swift_bridgeObjectRelease();
        v10 = RIOPxrVtValueCopyString();
        if (v10)
        {
          v11 = (void *)v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v14 = v13;

          if (v14)
          {
            if (v12 == 0x62694C656E656373 && v14 == 0xEC00000079726172)
            {
              swift_release();
              swift_bridgeObjectRelease();
              return v2;
            }
            v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v15 & 1) != 0)
            {
              swift_release();
              return v2;
            }
          }
        }
        else
        {

        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      v16 = (void *)RIOPxrUsdObjectCopyName();
      if (String.count.getter() < 1)
        v17 = (id)RIOPxrTfTokenEmpty();
      else
        v17 = (id)RIOPxrTfTokenCreateWithCString();
      v18 = v17;
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
      v19 = static _CFObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        v20 = RIOPxrUsdPrimCopyParent();
        if (v20)
        {
          v21 = v20;
          type metadata accessor for Prim();
          a1 = swift_allocObject();
          *(_QWORD *)(a1 + 16) = v21;
          swift_release();
          v2 = v3;
          if ((RIOPxrUsdObjectIsValid() & 1) != 0)
            continue;
        }
      }
      swift_release();
      break;
    }
  }
  swift_release();
  return 0;
}

void specialized static ActionBuilder.generateChangeSceneActionSpecifications(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id EmptyPath;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  id v28;
  void *v29;
  uint64_t SwiftObject;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  char *v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v70 - v6;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v78 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v77 = (char *)&v70 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v70 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v70 - v17;
  Inputs.prim.getter();
  if (String.count.getter() < 1)
    v19 = (id)RIOPxrTfTokenEmpty();
  else
    v19 = (id)RIOPxrTfTokenCreateWithCString();
  v20 = v19;
  if (!RIOPxrUsdPrimHasRelationship())
  {

    swift_release();
    v79 = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return;
  }
  v21 = RIOPxrUsdPrimCopyRelationship();

  swift_release();
  type metadata accessor for Relationship();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v21;
  v23 = Relationship.targets.getter();
  if (*(_QWORD *)(v23 + 16))
  {
    EmptyPath = *(id *)(v23 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
  }
  outlined consume of Result<AnyAttribute, Object.Error>(v22, 0);
  v25 = Inputs.prim.getter();
  v26 = specialized static ActionBuilder.findSceneRoot(from:)(v25);
  swift_release();
  if (!v26)
  {

    return;
  }
  v76 = v26;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 56);
  v28 = (id)RIOBuilderInputsGetImportSession();
  if (!v28)
  {
    __break(1u);
    goto LABEL_34;
  }
  v29 = v28;
  v73 = v16;
  v74 = v27;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v31 = *(_QWORD *)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable);
  v32 = EmptyPath;
  swift_retain();
  v33 = (void *)RIOPxrSdfPathCopyString();
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = v35;
  v75 = v32;

  v79 = 10867;
  v80 = 0xE200000000000000;
  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38 = v79;
  v39 = v80;
  v40 = *(void **)(v31 + 16);
  objc_msgSend(v40, sel_lock);
  swift_beginAccess();
  v41 = *(_QWORD *)(v31 + 24);
  if (*(_QWORD *)(v41 + 16))
  {
    swift_bridgeObjectRetain();
    v42 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, *(_QWORD *)(v41 + 56) + *(_QWORD *)(v9 + 72) * v42, v8);
      v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v44(v7, 0, 1, v8);
    }
    else
    {
      v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v44(v7, 1, 1, v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v44(v7, 1, 1, v8);
  }
  swift_endAccess();
  objc_msgSend(v40, sel_unlock);
  swift_release();
  swift_bridgeObjectRelease();
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v45(v7, 1, v8) == 1)
  {
    swift_release();

    v46 = (uint64_t)v7;
LABEL_31:
    outlined destroy of UUID?(v46);
    return;
  }
  v72 = v44;
  v47 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v47(v18, v7, v8);
  v48 = (id)RIOBuilderInputsGetImportSession();
  if (!v48)
    goto LABEL_35;
  v49 = v48;
  v71 = v47;
  v74 = v45;
  v50 = RIOImportSessionGetSwiftObject();

  if (!v50)
  {
LABEL_36:
    __break(1u);
    return;
  }
  v51 = *(_QWORD *)(v50 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable);
  swift_retain();
  v52 = (id)RIOPxrUsdObjectCopyPath();
  v53 = (void *)RIOPxrSdfPathCopyString();
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v56 = v55;

  v57 = *(void **)(v51 + 16);
  objc_msgSend(v57, sel_lock);
  swift_beginAccess();
  v58 = *(_QWORD *)(v51 + 24);
  if (*(_QWORD *)(v58 + 16))
  {
    swift_bridgeObjectRetain();
    v59 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v56);
    if ((v60 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v5, *(_QWORD *)(v58 + 56) + *(_QWORD *)(v9 + 72) * v59, v8);
      v61 = v5;
      v62 = 0;
    }
    else
    {
      v61 = v5;
      v62 = 1;
    }
    v72(v61, v62, 1, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v72(v5, 1, 1, v8);
  }
  swift_endAccess();
  objc_msgSend(v57, sel_unlock);

  swift_release();
  swift_bridgeObjectRelease();
  if (v74(v5, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    swift_release();

    v46 = (uint64_t)v5;
    goto LABEL_31;
  }
  v63 = v73;
  v71(v73, v5, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
  v64 = type metadata accessor for __RKEntityActionSpecification();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_22BD0C360;
  v68 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v68(v77, v63, v8);
  v68(v78, v18, v8);
  __RKChangeSceneActionArguments.init(sceneRoot:targetSceneIdentifier:)();
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v65 + 104))(v67 + v66, *MEMORY[0x24BDE6970], v64);
  swift_release();

  v69 = *(void (**)(char *, uint64_t))(v9 + 8);
  v69(v73, v8);
  v69(v18, v8);
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d105IO22TypeNamePrimDirtyStateC04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16fg2O5h88VG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13DescriptorRefaSgtcfc12generateCoreL_AQyFSo08I60TftX0aAKcfu_33_1208ebe0c1611b0e36169838b3b02464AkUTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    result = specialized Set.startIndex.getter(a1);
    v4 = result;
    v6 = v5;
    v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_11;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v6)
        goto LABEL_12;
      v9 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      result = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, a1);
      v4 = result;
      v6 = v10;
      v8 = v11 & 1;
      if (!--v2)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v10, v11 & 1);
        return v12;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO18PropertyDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d16IO22TypeNamePrimgh146C04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16ToolsFoundationsO5TokenVG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13J94RefaSgtcfc12generateCoreL_AQyFSo0vfuwX0aANcfu0_32f9454acde0e12ec4aa46a683ab4ea6ebAnUTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v17)(_BYTE *, _QWORD);
  _BYTE v18[32];
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = __CocoaSet.count.getter();
    result = MEMORY[0x24BEE4AF8];
    if (!v3)
      return result;
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v19 = __CocoaSet.startIndex.getter();
    v20 = v5;
    v21 = 1;
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_9;
    __break(1u);
  }
  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v19 = specialized _NativeSet.startIndex.getter(a1);
    v20 = v6;
    v21 = v7 & 1;
    while (1)
    {
LABEL_9:
      while (1)
      {
        v13 = v19;
        v14 = v20;
        v15 = v21;
        v16 = *(id *)(specialized Set.subscript.getter(v19, v20, v21, a1) + 24);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized ContiguousArray._endMutation()();
        if (v2)
          break;
        v8 = specialized _NativeSet.index(after:)(v13, v14, v15, a1);
        v10 = v9;
        v12 = v11;
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v13, v14, v15);
        v19 = v8;
        v20 = v10;
        v21 = v12 & 1;
        if (!--v3)
          goto LABEL_14;
      }
      if ((v15 & 1) == 0)
        break;
      if (__CocoaSet.Index.handleBitPattern.getter())
        swift_isUniquelyReferenced_nonNull_native();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PropertyDirtyState>.Index);
      v17 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v17(v18, 0);
      if (!--v3)
      {
LABEL_14:
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v19, v20, v21);
        return v22;
      }
    }
    __break(1u);
  }
  return result;
}

_QWORD *TypeNamePrimDirtyState.__allocating_init(typeName:primMetadataContainsAnyOf:propertiesContainAnyOf:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;

  v5 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v5;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v8 = v7;
  swift_setDeallocating();
  v9 = swift_arrayDestroy();
  v10 = a3(v9);
  type metadata accessor for TypeNamePrimDirtyState();
  v11 = (_QWORD *)swift_allocObject();
  v11[5] = v8;
  swift_bridgeObjectRetain();
  v12 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v8, v10, a2);
  swift_bridgeObjectRelease();
  v11[2] = a2;
  v11[3] = v10;
  v11[4] = v12;
  return v11;
}

uint64_t PrimDirtyState.__allocating_init(propertiesContainAnyOf:)(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1();
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1 + 152))(MEMORY[0x24BEE4B08], v2, 0);
}

uint64_t PrimDirtyState.primMetadataContainsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrimDirtyState.propertiesContainAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrimDirtyState.__allocating_init(metadata:propertiesContainAnyOf:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 152))(a1, v4, 0);
}

uint64_t PrimDirtyState.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static PrimDirtyState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a2) & 1;
}

uint64_t PrimDirtyState.isEqual(to:)(uint64_t a1)
{
  uint64_t v1;

  if ((specialized static Set.== infix(_:_:)(*(_QWORD *)(v1 + 24), *(_QWORD *)(a1 + 24)) & 1) != 0)
    return specialized static Set.== infix(_:_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(a1 + 16));
  else
    return 0;
}

uint64_t PrimDirtyState.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrimDirtyState.Type);
  v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyDirtyState();
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, 255, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDirtyState, (uint64_t)&protocol conformance descriptor for PropertyDirtyState);
  v1._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0xD000000000000019;
  v3._object = (void *)0x800000022BD07D30;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0xD00000000000001BLL;
  v6._object = (void *)0x800000022BD07D50;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PrimDirtyState.__allocating_init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(a1, a2, a3);
  return v6;
}

uint64_t PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  Class isa;
  Class v17;
  objc_class *v18;
  objc_class *v19;

  v3[2] = a1;
  v3[3] = a2;
  if (a3)
  {
    v4 = a3;
LABEL_13:
    v3[4] = v4;
    return (uint64_t)v3;
  }
  v5 = a2;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO18PropertyDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d16IO22TypeNamePrimgh146C04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16ToolsFoundationsO5TokenVG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13J94RefaSgtcfc12generateCoreL_AQyFSo0vfuwX0aANcfu0_32f9454acde0e12ec4aa46a683ab4ea6ebAnUTf3nnnpk_nTf1cn_nTm(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
    v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = v17;
    v19 = isa;
    v4 = RIOBuilderDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors();

    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  result = specialized Set.startIndex.getter(a1);
  v9 = result;
  v11 = v10;
  v13 = v12 & 1;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_16;
    RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    result = specialized _NativeSet.index(after:)(v9, v11, v13 & 1, a1);
    v9 = result;
    v11 = v14;
    v13 = v15 & 1;
    if (!--v7)
    {
      outlined consume of Set<ToolsFoundations.Token>.Index._Variant(result, v14, v15 & 1);
      swift_bridgeObjectRelease();
      v5 = a2;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t PrimDirtyState.__allocating_init(core:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t j;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = (void *)MEMORY[0x22E2F6340]();
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_16;
LABEL_3:
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v9 = v5;
  if ((v6 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v7; ++i)
    {
      MEMORY[0x22E2F57B8](i, v6);
      v11 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
      swift_unknownObjectRelease();
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v5 + 16) = v13 + 1;
      *(_QWORD *)(v5 + 8 * v13 + 32) = v11;
    }
  }
  else
  {
    for (j = 0; j != v7; ++j)
    {
      v15 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
      v17 = *(_QWORD *)(v5 + 16);
      v16 = *(_QWORD *)(v5 + 24);
      if (v17 >= v16 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v5 + 16) = v17 + 1;
      *(_QWORD *)(v5 + 8 * v17 + 32) = v15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  v18 = specialized Set.init<A>(_:)(v9);
  swift_bridgeObjectRelease();
  v19 = (void *)MEMORY[0x22E2F634C](a1);
  type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v5 >> 62))
  {
    v20 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
      goto LABEL_19;
LABEL_32:
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x24BEE4AF8];
LABEL_33:
    v26 = specialized Set.init<A>(_:)(v25);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 152))(v18, v26, a1);
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_32;
LABEL_19:
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x22E2F57B8](v21, v5);
      else
        v22 = *(id *)(v5 + 8 * v21 + 32);
      v23 = v22;
      v24 = RIOBuilderDirtyPropertyDescriptorCopyType();
      if (v24 == 3)
      {
        specialized NamespacedPropertyDirtyState.__allocating_init(core:)(v23);
      }
      else if (v24 == 2)
      {
        specialized NamedPropertyDirtyState.__allocating_init(core:)((uint64_t)v23);
      }
      else
      {
        type metadata accessor for PropertyDirtyState();
        PropertyDirtyState.__allocating_init(core:)((uint64_t)v23);
      }
      ++v21;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v20 != v21);
    v25 = v5;
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t PrimDirtyState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t PrimDirtyState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int PrimDirtyState.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 128))(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PrimDirtyState()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 128))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PrimDirtyState()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PrimDirtyState()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 128))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PrimDirtyState()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PrimDirtyState(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 136))(*a2) & 1;
}

uint64_t TypeNamePrimDirtyState.typeNameIsAnyOf.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *TypeNamePrimDirtyState.__allocating_init(typeName:propertiesContainAnyOf:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v3;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v6 = v5;
  swift_setDeallocating();
  v7 = swift_arrayDestroy();
  v8 = a2(v7);
  type metadata accessor for TypeNamePrimDirtyState();
  v9 = (_QWORD *)swift_allocObject();
  v9[5] = v6;
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x24BEE4B08];
  v11 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v6, v8, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRelease();
  v9[2] = v10;
  v9[3] = v8;
  v9[4] = v11;
  return v9;
}

_QWORD *TypeNamePrimDirtyState.__allocating_init(typeName:primMetadataContainsAnyOf:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  id v9;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v3;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v6 = v5;
  swift_setDeallocating();
  swift_arrayDestroy();
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v7 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v7 = MEMORY[0x24BEE4B08];
  type metadata accessor for TypeNamePrimDirtyState();
  v8 = (_QWORD *)swift_allocObject();
  v8[5] = v6;
  swift_bridgeObjectRetain();
  v9 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v6, v7, a2);
  swift_bridgeObjectRelease();
  v8[2] = a2;
  v8[3] = v7;
  v8[4] = v9;
  return v8;
}

_QWORD *TypeNamePrimDirtyState.__allocating_init(typeNameIsAnyOf:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  id v5;

  v2 = MEMORY[0x24BEE4B08];
  v3 = MEMORY[0x24BEE4B08];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      v3 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    else
      v3 = MEMORY[0x24BEE4B08];
  }
  type metadata accessor for TypeNamePrimDirtyState();
  v4 = (_QWORD *)swift_allocObject();
  v4[5] = a1;
  swift_bridgeObjectRetain();
  v5 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, a1, v3, v2);
  swift_bridgeObjectRelease();
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v5;
  return v4;
}

_QWORD *TypeNamePrimDirtyState.__allocating_init(typeNameIsAnyOf:primMetadataContainsAnyOf:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  id v6;

  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v4 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v4 = MEMORY[0x24BEE4B08];
  type metadata accessor for TypeNamePrimDirtyState();
  v5 = (_QWORD *)swift_allocObject();
  v5[5] = a1;
  swift_bridgeObjectRetain();
  v6 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, a1, v4, a2);
  swift_bridgeObjectRelease();
  v5[2] = a2;
  v5[3] = v4;
  v5[4] = v6;
  return v5;
}

_QWORD *TypeNamePrimDirtyState.__allocating_init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v5 = a3();
  type metadata accessor for TypeNamePrimDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = a1;
  swift_bridgeObjectRetain();
  v7 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, a1, v5, a2);
  swift_bridgeObjectRelease();
  v6[2] = a2;
  v6[3] = v5;
  v6[4] = v7;
  return v6;
}

uint64_t TypeNamePrimDirtyState.hash(into:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[5];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  v4 = v1[3];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  v5 = v1[2];
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)((uint64_t)a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t TypeNamePrimDirtyState.isEqual(to:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = v1;
    v3 = v0[5];
    v4 = *(_QWORD *)(v1 + 40);
    swift_retain();
    swift_bridgeObjectRetain();
    LOBYTE(v3) = specialized static Set.== infix(_:_:)(v3, v4);
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0
      && (v5 = v0[3],
          v6 = *(_QWORD *)(v2 + 24),
          swift_bridgeObjectRetain(),
          LOBYTE(v5) = specialized static Set.== infix(_:_:)(v5, v6),
          swift_bridgeObjectRelease(),
          (v5 & 1) != 0))
    {
      v7 = v0[2];
      v8 = *(_QWORD *)(v2 + 16);
      swift_bridgeObjectRetain();
      v9 = specialized static Set.== infix(_:_:)(v7, v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = 0;
    }
    swift_release();
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t TypeNamePrimDirtyState.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypeNamePrimDirtyState.Type);
  v0 = String.init<A>(describing:)();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token();
  v1._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0xD000000000000012;
  v3._object = (void *)0x800000022BD07D70;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyDirtyState();
  lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, 255, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDirtyState, (uint64_t)&protocol conformance descriptor for PropertyDirtyState);
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0xD000000000000018;
  v6._object = (void *)0x800000022BD07D90;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0xD00000000000001BLL;
  v9._object = (void *)0x800000022BD07D50;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

id generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result;
  NSArray v7;
  NSArray v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  Class isa;
  uint64_t v18;

  if (a1)
    return a1;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d105IO22TypeNamePrimDirtyStateC04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16fg2O5h88VG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13DescriptorRefaSgtcfc12generateCoreL_AQyFSo08I60TftX0aAKcfu_33_1208ebe0c1611b0e36169838b3b02464AkUTf3nnnpk_nTf1cn_n(a2);
  type metadata accessor for RIOPxrTfTokenRef(0);
  v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy9RealityIO18PropertyDirtyStateCG_So010RIOBuildergF13DescriptorRefas5NeverOTg503_s9d16IO22TypeNamePrimgh146C04typeD7IsAnyOf020primMetadataContainsjK0017propertiesContainjK04coreACShyAA16ToolsFoundationsO5TokenVG_ALShyAA08PropertyfG0CGSo010RIOBuilderfE13J94RefaSgtcfc12generateCoreL_AQyFSo0vfuwX0aANcfu0_32f9454acde0e12ec4aa46a683ab4ea6ebAnUTf3nnnpk_nTf1cn_nTm(a3);
  type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
  v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a4 + 16);
  if (v9)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    result = (id)specialized Set.startIndex.getter(a4);
    v10 = (uint64_t)result;
    v12 = v11;
    v14 = v13 & 1;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(a4 + 32))
    {
      if (((*(_QWORD *)(a4 + 56 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_13;
      if (*(_DWORD *)(a4 + 36) != (_DWORD)v12)
        goto LABEL_14;
      RIOBuilderDirtyMetadataDescriptorCreateWithMetadata();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      result = (id)specialized _NativeSet.index(after:)(v10, v12, v14 & 1, a4);
      v10 = (uint64_t)result;
      v12 = v15;
      v14 = v16 & 1;
      if (!--v9)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant((uint64_t)result, v15, v16 & 1);
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_11:
    type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors();

    return (id)v18;
  }
  return result;
}

void TypeNamePrimDirtyState.__allocating_init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t TypeNamePrimDirtyState.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t TypeNamePrimDirtyState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TypeNamePrimDirtyState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ToolsFoundations.Token>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v22 = v1;
    v23 = a1 + 32;
    do
    {
      v6 = *(void **)(v23 + 8 * v4);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrTfTokenRef(0);
      lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrTfTokenRef, (uint64_t)&protocol conformance descriptor for RIOPxrTfTokenRef);
      v7 = v6;
      _CFObject.hash(into:)();
      v8 = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = v8 & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      if (((1 << v10) & v12) != 0)
      {
        v14 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v10);
        v15 = static _CFObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
        {
LABEL_3:

          v1 = v22;
          goto LABEL_4;
        }
        v16 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v16;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v10);
          v18 = static _CFObject.== infix(_:_:)();

          if ((v18 & 1) != 0)
            goto LABEL_3;
        }
        v1 = v22;
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v7;
      v19 = *(_QWORD *)(v3 + 16);
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)(v3 + 16) = v21;
LABEL_4:
      ++v4;
    }
    while (v4 != v1);
  }
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SceneDescriptionFoundations.Path>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v22 = v1;
    v23 = a1 + 32;
    do
    {
      v6 = *(void **)(v23 + 8 * v4);
      Hasher.init(_seed:)();
      type metadata accessor for RIOPxrSdfPathRef(0);
      lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState((unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
      v7 = v6;
      _CFObject.hash(into:)();

      v8 = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = v8 & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      if (((1 << v10) & v12) != 0)
      {
        v14 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v10);
        v15 = static _CFObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
        {
LABEL_3:

          v1 = v22;
          goto LABEL_4;
        }
        v16 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v16;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v10);
          v18 = static _CFObject.== infix(_:_:)();

          if ((v18 & 1) != 0)
            goto LABEL_3;
        }
        v1 = v22;
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v7;
      v19 = *(_QWORD *)(v3 + 16);
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)(v3 + 16) = v21;
LABEL_4:
      ++v4;
    }
    while (v4 != v1);
  }
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[3];
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 v47;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<InputDescriptor>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v28 = v1;
    v29 = a1 + 32;
    do
    {
      v6 = v29 + 56 * v4;
      v8 = *(_QWORD *)(v6 + 8);
      v9 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      v11 = *(void **)(v6 + 32);
      v12 = *(_QWORD *)(v6 + 40);
      v13 = *(_BYTE *)(v6 + 48);
      v41 = *(_QWORD *)v6;
      v7 = v41;
      v42 = v8;
      v43 = v9;
      v44 = v10;
      v45 = v11;
      v46 = v12;
      v47 = v13;
      v34 = v41;
      v35 = v8;
      v36 = v9;
      v37 = v10;
      v38 = v11;
      v39 = v12;
      v40 = v13;
      Hasher.init(_seed:)();
      v30 = v8;
      v31 = v7;
      outlined copy of InputDescriptor(v7, v8, v9, v10, v11, v12, v13);
      InputDescriptor.hash(into:)();
      v14 = Hasher._finalize()();
      v15 = ~(-1 << *(_BYTE *)(v3 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v5 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        while (1)
        {
          v20 = *(_QWORD *)(v3 + 48) + 56 * v16;
          v21 = *(_BYTE *)(v20 + 48);
          v22 = *(_OWORD *)(v20 + 16);
          v32[0] = *(_OWORD *)v20;
          v32[1] = v22;
          v32[2] = *(_OWORD *)(v20 + 32);
          v33 = v21;
          specialized static InputDescriptor.== infix(_:_:)((uint64_t)v32);
          if ((v23 & 1) != 0)
            break;
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v5 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          if ((v18 & (1 << v16)) == 0)
            goto LABEL_8;
        }
        outlined consume of InputDescriptor(v31, v30, v9, v10, v11, v12, v13);
      }
      else
      {
LABEL_8:
        *(_QWORD *)(v5 + 8 * v17) = v19 | v18;
        v24 = *(_QWORD *)(v3 + 48) + 56 * v16;
        *(_QWORD *)v24 = v31;
        *(_QWORD *)(v24 + 8) = v30;
        *(_QWORD *)(v24 + 16) = v9;
        *(_QWORD *)(v24 + 24) = v10;
        *(_QWORD *)(v24 + 32) = v11;
        *(_QWORD *)(v24 + 40) = v12;
        *(_BYTE *)(v24 + 48) = v13;
        v25 = *(_QWORD *)(v3 + 16);
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
        {
          __break(1u);
          return;
        }
        *(_QWORD *)(v3 + 16) = v27;
      }
      ++v4;
    }
    while (v4 != v28);
  }
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t);
  uint64_t v17;
  uint64_t (*v18)(unint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24[72];

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PropertyDirtyState>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = 0;
  v7 = v3 + 56;
  v22 = v1 & 0xFFFFFFFFFFFFFF8;
  v23 = v1 & 0xC000000000000001;
  v21 = v1 + 32;
  while (v23)
  {
    result = MEMORY[0x22E2F57B8](v6, v1);
    v8 = result;
    v9 = __OFADD__(v6++, 1);
    if (v9)
      goto LABEL_27;
LABEL_17:
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(_QWORD *)v8 + 120))(v24);
    result = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) == 0)
      goto LABEL_24;
    v15 = v1;
    v16 = *(uint64_t (**)(unint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 8 * v11) + 128);
    swift_retain();
    LOBYTE(v16) = v16(v8);
    result = swift_release();
    if ((v16 & 1) != 0)
    {
LABEL_10:
      result = swift_release();
      v1 = v15;
      if (v6 == v4)
        return v3;
    }
    else
    {
      v17 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v17;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          break;
        v18 = *(uint64_t (**)(unint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 8 * v11) + 128);
        swift_retain();
        LOBYTE(v18) = v18(v8);
        result = swift_release();
        if ((v18 & 1) != 0)
          goto LABEL_10;
      }
      v1 = v15;
LABEL_24:
      *(_QWORD *)(v7 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v8;
      v19 = *(_QWORD *)(v3 + 16);
      v9 = __OFADD__(v19, 1);
      v20 = v19 + 1;
      if (v9)
        goto LABEL_28;
      *(_QWORD *)(v3 + 16) = v20;
      if (v6 == v4)
        return v3;
    }
  }
  if (v6 >= *(_QWORD *)(v22 + 16))
    goto LABEL_29;
  v8 = *(_QWORD *)(v21 + 8 * v6);
  result = swift_retain();
  v9 = __OFADD__(v6++, 1);
  if (!v9)
    goto LABEL_17;
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t);
  uint64_t v17;
  uint64_t (*v18)(unint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24[72];

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PrimDirtyState>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = 0;
  v7 = v3 + 56;
  v22 = v1 & 0xFFFFFFFFFFFFFF8;
  v23 = v1 & 0xC000000000000001;
  v21 = v1 + 32;
  while (v23)
  {
    result = MEMORY[0x22E2F57B8](v6, v1);
    v8 = result;
    v9 = __OFADD__(v6++, 1);
    if (v9)
      goto LABEL_27;
LABEL_17:
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(_QWORD *)v8 + 128))(v24);
    result = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) == 0)
      goto LABEL_24;
    v15 = v1;
    v16 = *(uint64_t (**)(unint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 8 * v11) + 136);
    swift_retain();
    LOBYTE(v16) = v16(v8);
    result = swift_release();
    if ((v16 & 1) != 0)
    {
LABEL_10:
      result = swift_release();
      v1 = v15;
      if (v6 == v4)
        return v3;
    }
    else
    {
      v17 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v17;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          break;
        v18 = *(uint64_t (**)(unint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 8 * v11) + 136);
        swift_retain();
        LOBYTE(v18) = v18(v8);
        result = swift_release();
        if ((v18 & 1) != 0)
          goto LABEL_10;
      }
      v1 = v15;
LABEL_24:
      *(_QWORD *)(v7 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v8;
      v19 = *(_QWORD *)(v3 + 16);
      v9 = __OFADD__(v19, 1);
      v20 = v19 + 1;
      if (v9)
        goto LABEL_28;
      *(_QWORD *)(v3 + 16) = v20;
      if (v6 == v4)
        return v3;
    }
  }
  if (v6 >= *(_QWORD *)(v22 + 16))
    goto LABEL_29;
  v8 = *(_QWORD *)(v21 + 8 * v6);
  result = swift_retain();
  v9 = __OFADD__(v6++, 1);
  if (!v9)
    goto LABEL_17;
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *specialized TypeNamePrimDirtyState.__allocating_init(typeName:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  id v8;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v1;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = MEMORY[0x24BEE4B08];
  v6 = MEMORY[0x24BEE4B08];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      v6 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    else
      v6 = MEMORY[0x24BEE4B08];
  }
  type metadata accessor for TypeNamePrimDirtyState();
  v7 = (_QWORD *)swift_allocObject();
  v7[5] = v4;
  swift_bridgeObjectRetain();
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v6, v5);
  swift_bridgeObjectRelease();
  v7[2] = v5;
  v7[3] = v6;
  v7[4] = v8;
  return v7;
}

uint64_t specialized static PropertyDirtyStateBuilder.buildBlock(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = MEMORY[0x24BEE4B08];
  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x22E2F57B8](v4, a1);
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      swift_retain();
      specialized Set._Variant.insert(_:)(&v6, v5);
      swift_release();
      swift_release();
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t type metadata accessor for TypeNamePrimDirtyState()
{
  return objc_opt_self();
}

uint64_t base witness table accessor for Equatable in PrimDirtyState(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, a2, (uint64_t (*)(uint64_t))type metadata accessor for PrimDirtyState, (uint64_t)&protocol conformance descriptor for PrimDirtyState);
}

uint64_t type metadata accessor for PrimDirtyState()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PropertyDirtyStateBuilder()
{
  return &type metadata for PropertyDirtyStateBuilder;
}

uint64_t method lookup function for PrimDirtyState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PrimDirtyState.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PrimDirtyState.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PrimDirtyState.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t method lookup function for TypeNamePrimDirtyState()
{
  return swift_lookUpClassMethod();
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  Swift::Int result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OutputDescriptor>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v33 = v3 + 56;
    v29 = v1;
    v30 = a1 + 32;
    v28 = v3;
    while (1)
    {
      v31 = v4;
      v5 = (uint64_t *)(v30 + 40 * v4);
      v7 = *v5;
      v6 = v5[1];
      v9 = v5[2];
      v8 = v5[3];
      v10 = *((unsigned __int8 *)v5 + 32);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      String.hash(into:)();
      v32 = v10;
      Hasher._combine(_:)(v10);
      result = Hasher._finalize()();
      v12 = ~(-1 << *(_BYTE *)(v3 + 32));
      v13 = result & v12;
      v14 = (result & (unint64_t)v12) >> 6;
      v15 = *(_QWORD *)(v33 + 8 * v14);
      v16 = 1 << (result & v12);
      v17 = *(_QWORD *)(v3 + 48);
      if ((v16 & v15) != 0)
      {
        do
        {
          v18 = v17 + 40 * v13;
          result = *(_QWORD *)v18;
          v19 = *(_QWORD *)(v18 + 16);
          v20 = *(_QWORD *)(v18 + 24);
          v21 = *(unsigned __int8 *)(v18 + 32);
          v22 = *(_QWORD *)v18 == v7 && *(_QWORD *)(v18 + 8) == v6;
          if (v22 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            if (v19 == v9 && v20 == v8)
            {
              if (v32 == v21)
                goto LABEL_3;
            }
            else
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0 && ((v32 ^ v21) & 1) == 0)
              {
LABEL_3:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v3 = v28;
                v1 = v29;
                goto LABEL_4;
              }
            }
          }
          v13 = (v13 + 1) & v12;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v33 + 8 * (v13 >> 6));
          v16 = 1 << v13;
        }
        while ((v15 & (1 << v13)) != 0);
        v3 = v28;
        v1 = v29;
        v17 = *(_QWORD *)(v28 + 48);
      }
      *(_QWORD *)(v33 + 8 * v14) = v16 | v15;
      v24 = v17 + 40 * v13;
      *(_QWORD *)v24 = v7;
      *(_QWORD *)(v24 + 8) = v6;
      *(_QWORD *)(v24 + 16) = v9;
      *(_QWORD *)(v24 + 24) = v8;
      *(_BYTE *)(v24 + 32) = v32;
      v25 = *(_QWORD *)(v3 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v3 + 16) = v27;
LABEL_4:
      v4 = v31 + 1;
      if (v31 + 1 == v1)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

_QWORD *specialized TypeNamePrimDirtyState.__allocating_init(core:)(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t k;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t m;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v2 = (void *)RIOBuilderTypeNameDirtyPrimDescriptorCopyTypeNames();
  type metadata accessor for RIOPxrTfTokenRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  v3 = MEMORY[0x24BEE4AF8];
  v4 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v5 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    goto LABEL_16;
LABEL_3:
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  v7 = v3;
  if ((v4 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v5; ++i)
    {
      v9 = MEMORY[0x22E2F57B8](i, v4);
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v3 + 16) = v11 + 1;
      *(_QWORD *)(v3 + 8 * v11 + 32) = v9;
    }
  }
  else
  {
    for (j = 0; j != v5; ++j)
    {
      v13 = *(_QWORD *)(v3 + 16);
      v14 = *(_QWORD *)(v3 + 24);
      v15 = *(id *)(v4 + 8 * j + 32);
      if (v13 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
      *(_QWORD *)(v3 + 16) = v13 + 1;
      *(_QWORD *)(v3 + 8 * v13 + 32) = v15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  v16 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  v17 = (void *)MEMORY[0x22E2F661C](a1);
  type metadata accessor for RIOBuilderDirtyPropertyDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v3 >> 62))
  {
    v18 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
      goto LABEL_19;
LABEL_32:
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18)
    goto LABEL_32;
LABEL_19:
  result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)();
  if (v18 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v19 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v20 = (id)MEMORY[0x22E2F57B8](v19, v3);
    else
      v20 = *(id *)(v3 + 8 * v19 + 32);
    v21 = v20;
    v22 = RIOBuilderDirtyPropertyDescriptorCopyType();
    if (v22 == 3)
    {
      specialized NamespacedPropertyDirtyState.__allocating_init(core:)(v21);
    }
    else if (v22 == 2)
    {
      specialized NamedPropertyDirtyState.__allocating_init(core:)((uint64_t)v21);
    }
    else
    {
      type metadata accessor for PropertyDirtyState();
      PropertyDirtyState.__allocating_init(core:)((uint64_t)v21);
    }
    ++v19;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v18 != v19);
  v23 = v3;
  swift_bridgeObjectRelease();
LABEL_33:
  v24 = specialized Set.init<A>(_:)(v23);
  swift_bridgeObjectRelease();
  v25 = (void *)MEMORY[0x22E2F6610](a1);
  type metadata accessor for RIOBuilderDirtyMetadataDescriptorRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(v3 >> 62))
  {
    v26 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v26)
      goto LABEL_35;
LABEL_48:
    swift_bridgeObjectRelease();
    v27 = MEMORY[0x24BEE4AF8];
LABEL_49:
    v36 = specialized Set.init<A>(_:)(v27);
    swift_bridgeObjectRelease();
    type metadata accessor for TypeNamePrimDirtyState();
    result = (_QWORD *)swift_allocObject();
    result[2] = v36;
    result[3] = v24;
    result[4] = a1;
    result[5] = v16;
    return result;
  }
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v26)
    goto LABEL_48;
LABEL_35:
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0);
  if ((v26 & 0x8000000000000000) == 0)
  {
    v27 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (k = 0; k != v26; ++k)
      {
        MEMORY[0x22E2F57B8](k, v3);
        v29 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        swift_unknownObjectRelease();
        v31 = *(_QWORD *)(v3 + 16);
        v30 = *(_QWORD *)(v3 + 24);
        if (v31 >= v30 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        *(_QWORD *)(v3 + 16) = v31 + 1;
        *(_QWORD *)(v3 + 8 * v31 + 32) = v29;
      }
    }
    else
    {
      for (m = 0; m != v26; ++m)
      {
        v33 = RIOBuilderDirtyMetadataDescriptorCopyMetadata();
        v35 = *(_QWORD *)(v27 + 16);
        v34 = *(_QWORD *)(v27 + 24);
        if (v35 >= v34 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        *(_QWORD *)(v27 + 16) = v35 + 1;
        *(_QWORD *)(v27 + 8 * v35 + 32) = v33;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::UInt32 v30;
  uint64_t v31;
  Swift::UInt32 v32;
  char *v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(uint64_t, char *, uint64_t);
  char v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(uint64_t, char *, uint64_t);
  char *v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  void (*v54)(uint64_t, uint64_t);
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t result;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v77 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v72 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v74 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v76 = (char *)&v68 - v4;
  v5 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v71 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v90 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v89 = (char *)&v68 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v70 = (char *)&v68 - v10;
  v11 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v81 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v91 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v68 - v14;
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v68 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v68 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v93 = (char *)&v68 - v25;
  v26 = *(_QWORD *)(a1 + 16);
  if (!v26)
    return MEMORY[0x24BEE4B08];
  v87 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAssetBundle.ExportOptions.DeploymentTarget>);
  v27 = static _SetStorage.allocate(capacity:)();
  v28 = 0;
  v84 = v27 + 56;
  v69 = a1 + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80));
  v85 = *(_QWORD *)(v81 + 72);
  v86 = v19;
  v92 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
  v79 = v22;
  v88 = v15;
  v68 = v26;
  v83 = v27;
  while (2)
  {
    v73 = v28;
    v92(v93, v69 + v85 * v28, v11);
    Hasher.init(_seed:)();
    v29 = v70;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE63C0], MEMORY[0x24BDE63C8]);
    dispatch thunk of Hashable.hash(into:)();
    v82 = *(void (**)(char *, uint64_t))(v71 + 8);
    v82(v29, v5);
    v30 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    Hasher._combine(_:)(v30);
    v31 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    Hasher._combine(_:)(HIDWORD(v31));
    __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    Hasher._combine(_:)(v32);
    v33 = v76;
    __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
    lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE6428], MEMORY[0x24BDE6430]);
    v34 = v77;
    dispatch thunk of Hashable.hash(into:)();
    v75 = *(void (**)(char *, uint64_t))(v72 + 8);
    v75(v33, v34);
    v35 = Hasher._finalize()();
    v36 = v83;
    v37 = -1 << *(_BYTE *)(v83 + 32);
    v38 = v35 & ~v37;
    v39 = v38 >> 6;
    v40 = *(_QWORD *)(v84 + 8 * (v38 >> 6));
    v41 = 1 << v38;
    if (((1 << v38) & v40) == 0)
      goto LABEL_20;
    v80 = ~v37;
    do
    {
      v92(v22, *(_QWORD *)(v36 + 48) + v38 * v85, v11);
      __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
      __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
      lazy protocol witness table accessor for type PrimDirtyState and conformance PrimDirtyState(&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE63C0], MEMORY[0x24BDE63D0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v96 == v94 && v97 == v95)
      {
        swift_bridgeObjectRelease_n();
        v42 = v82;
        v82(v90, v5);
        v42(v89, v5);
        v43 = (void (*)(uint64_t, char *, uint64_t))v92;
        v92(v19, (uint64_t)v22, v11);
        v43(v87, v93, v11);
      }
      else
      {
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = v82;
        v82(v90, v5);
        v45(v89, v5);
        v46 = (void (*)(uint64_t, char *, uint64_t))v92;
        v92(v19, (uint64_t)v22, v11);
        v47 = v19;
        v48 = v87;
        v46(v87, v93, v11);
        v49 = 0;
        if ((v44 & 1) == 0)
          goto LABEL_16;
      }
      v50 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
      v52 = v51;
      v49 = v50 == __REAssetBundle.ExportOptions.DeploymentTarget.version.getter() && v52 == v53;
      v47 = v86;
      v48 = v87;
LABEL_16:
      v54 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
      v54(v48, v11);
      v54((uint64_t)v47, v11);
      v55 = v88;
      v56 = v79;
      v57 = (void (*)(char *, char *, uint64_t))v92;
      v92(v88, (uint64_t)v79, v11);
      v57(v91, v93, v11);
      if (v49)
      {
        v58 = v76;
        __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
        v59 = v74;
        __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter();
        v78 = static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)();
        v60 = v59;
        v61 = v77;
        v62 = v75;
        v75(v60, v77);
        v19 = v86;
        v63 = v88;
        v62(v58, v61);
        v54((uint64_t)v91, v11);
        v54((uint64_t)v63, v11);
        v54((uint64_t)v56, v11);
        v22 = v56;
        v36 = v83;
        if ((v78 & 1) != 0)
        {
          v54((uint64_t)v93, v11);
          v26 = v68;
          goto LABEL_3;
        }
      }
      else
      {
        v19 = v47;
        v54((uint64_t)v91, v11);
        v54((uint64_t)v55, v11);
        v54((uint64_t)v56, v11);
        v22 = v56;
        v36 = v83;
      }
      v38 = (v38 + 1) & v80;
      v39 = v38 >> 6;
      v40 = *(_QWORD *)(v84 + 8 * (v38 >> 6));
      v41 = 1 << v38;
    }
    while ((v40 & (1 << v38)) != 0);
    v26 = v68;
LABEL_20:
    *(_QWORD *)(v84 + 8 * v39) = v41 | v40;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v81 + 32))(*(_QWORD *)(v36 + 48) + v38 * v85, v93, v11);
    v65 = *(_QWORD *)(v36 + 16);
    v66 = __OFADD__(v65, 1);
    v67 = v65 + 1;
    if (!v66)
    {
      *(_QWORD *)(v36 + 16) = v67;
LABEL_3:
      v28 = v73 + 1;
      if (v73 + 1 == v26)
        return v36;
      continue;
    }
    break;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD v48[7];
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
  MEMORY[0x24BDAC7A8](v2);
  v49 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v48[6] = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v48[4] = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v48[5] = (char *)v48 - v5;
  v6 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v54 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v60 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v59 = (char *)v48 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v48[2] = (char *)v48 - v11;
  v12 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v70 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v53 = (char *)v48 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v48 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v58 = (char *)v48 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v48 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v48[1] = (char *)v48 - v26;
  v55 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x24BDAC7A8](v55);
  v65 = (char *)v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v64 = (char *)v48 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v63 = (char *)v48 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v69 = (char *)v48 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v62 = (char *)v48 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v61 = (char *)v48 - v37;
  MEMORY[0x24BDAC7A8](v38);
  MEMORY[0x24BDAC7A8](v39);
  v66 = (uint64_t)v48 - v40;
  MEMORY[0x24BDAC7A8](v41);
  v76 = (uint64_t)v48 - v43;
  v44 = *(_QWORD *)(a1 + 16);
  if (v44)
  {
    v73 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ImportSession.EvaluationFault>);
    v75 = a1;
    v56 = v44;
    v72 = static _SetStorage.allocate(capacity:)();
    v74 = v72 + 56;
    v57 = v75 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    v75 = *(_QWORD *)(v73 + 72);
    v51 = v2;
    v71 = v12;
    v48[3] = v6;
    v52 = v14;
    v50 = v19;
    v68 = v24;
    v45 = v76;
    v67 = 1;
    outlined init with copy of ImportSession.EvaluationFault(v57, v76);
    Hasher.init(_seed:)();
    outlined init with copy of ImportSession.EvaluationFault(v45, v66);
    v46 = (char *)&loc_22BC55EC8 + dword_22BC56684[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t outlined destroy of (ImportSession.EvaluationFault, ImportSession.EvaluationFault)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImportSession.EvaluationFault, ImportSession.EvaluationFault));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 48))(a1, 1, v11, v13) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for UUID?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v15, a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v19;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __RKEntityInteractionSpecification();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);

    return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v17;

    return swift_bridgeObjectRelease();
  }
}

id one-time initialization function for PreliminaryBehaviorPrimTypeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static BehaviorBuilder.PreliminaryBehaviorPrimTypeName = (uint64_t)result;
  return result;
}

id one-time initialization function for BehaviorPrimTypeName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static BehaviorBuilder.BehaviorPrimTypeName = (uint64_t)result;
  return result;
}

void one-time initialization function for TriggersPropertyName()
{
  static BehaviorBuilder.TriggersPropertyName = 0x7372656767697274;
  *(_QWORD *)algn_255BFA098 = 0xE800000000000000;
}

void one-time initialization function for ActionsPropertyName()
{
  static BehaviorBuilder.ActionsPropertyName = 0x736E6F69746361;
  *(_QWORD *)algn_255BFA0A8 = 0xE700000000000000;
}

void one-time initialization function for TriggersInputName()
{
  static BehaviorBuilder.TriggersInputName = 0x7372656767697274;
  *(_QWORD *)algn_255BFA0B8 = 0xE800000000000000;
}

void one-time initialization function for ActionsInputName()
{
  static BehaviorBuilder.ActionsInputName = 0x736E6F69746361;
  *(_QWORD *)algn_255BFA0C8 = 0xE700000000000000;
}

uint64_t BehaviorBuilder.inputDescriptors()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5[6];
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  _QWORD *v13;
  unsigned __int8 v14;
  _QWORD v15[6];
  char v16;

  v1 = *v0;
  v7 = MEMORY[0x24BEE4B08];
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = closure #1 in ActionBuilder.inputDescriptors();
  v2[3] = 0;
  v2[4] = v1;
  if (one-time initialization token for TriggersInputName != -1)
    swift_once();
  v15[0] = static BehaviorBuilder.TriggersInputName;
  v15[1] = *(_QWORD *)algn_255BFA0B8;
  v15[2] = 0xD000000000000020;
  v15[3] = 0x800000022BD07AB0;
  v15[4] = partial apply for closure #2 in BehaviorBuilder.inputDescriptors();
  v15[5] = v2;
  v16 = -127;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Set._Variant.insert(_:)((uint64_t)&v8, (uint64_t)v15);
  outlined consume of InputDescriptor(v8, v9, v10, v11, v12, (uint64_t)v13, v14);
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = closure #1 in ActionBuilder.inputDescriptors();
  v3[3] = 0;
  v3[4] = v1;
  if (one-time initialization token for ActionsInputName != -1)
    swift_once();
  v8 = static BehaviorBuilder.ActionsInputName;
  v9 = *(_QWORD *)algn_255BFA0C8;
  v10 = 0xD00000000000001FLL;
  v11 = 0x800000022BD06F70;
  v12 = partial apply for closure #3 in BehaviorBuilder.inputDescriptors();
  v13 = v3;
  v14 = -127;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)&v8);
  swift_release();
  outlined consume of InputDescriptor(v5[0], v5[1], v5[2], v5[3], (void *)v5[4], v5[5], v6);
  return v7;
}

uint64_t closure #2 in BehaviorBuilder.inputDescriptors()(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t), uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  id v12;
  uint64_t PrimIfNeeded;
  uint64_t v14;
  uint64_t v15;

  if (!RIOPxrUsdStageHasPrimAtPrimPath())
    return MEMORY[0x24BEE4B08];
  v12 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = PrimIfNeeded;

  if (*a6 != -1)
    swift_once();
  v15 = a3(*a7, *a8, v14);
  swift_release();
  return v15;
}

uint64_t BehaviorBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v32;
  void (*v33)(uint64_t *, char *, void *);
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  __int128 aBlock;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;
  __int128 v58;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x24BDAC7A8](v2);
  v48 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for __RKEntityInteractionSpecification();
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityActionSpecification();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v50 = (char *)&v43 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for __RKEntityTriggerSpecification();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v43 - v22;
  BehaviorBuilder.buildTriggerSpecifications(inputs:)(v16);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(v23, v16, v17);
  BehaviorBuilder.buildActionSpecifications(inputs:)((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    return outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
  }
  v45 = a1;
  v25 = v50;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v7, v8);
  v26 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v46 = v23;
  v26(v20, v23, v17);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v25, v8);
  __RKEntityInteractionSpecification.init(trigger:action:)();
  swift_beginAccess();
  v27 = objc_getAssociatedObject(v51, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (v27)
  {
    v43 = v8;
    v44 = v9;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v58, &aBlock);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    v28 = (void *)v49;
    if (one-time initialization token for OutputName != -1)
      swift_once();
    v29 = static BehaviorBuilder.OutputName;
    v30 = *(_QWORD *)algn_255BFA0D8;
    v55 = v28;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&aBlock);
    v32 = v47;
    v33 = *(void (**)(uint64_t *, char *, void *))(v47 + 16);
    v34 = v52;
    v33(boxed_opaque_existential_1, v52, v28);
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)&aBlock, v29, v30);
    swift_release();
    v35 = v28;
    v36 = v51[3];
    v37 = (uint64_t)v48;
    v33((uint64_t *)v48, v34, v35);
    (*(void (**)(uint64_t, _QWORD, uint64_t, void *))(v32 + 56))(v37, 0, 1, v35);
    swift_retain();
    Inputs.prim.getter();
    v38 = (void *)RIOPxrUsdObjectCopyPath();
    v39 = swift_release();
    v51 = &v43;
    MEMORY[0x24BDAC7A8](v39);
    *(&v43 - 4) = v36;
    *(&v43 - 3) = (uint64_t)v38;
    *(&v43 - 2) = v37;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = closure #1 in BehaviorsCommitter.commit(_:at:inputs:)partial apply;
    *(_QWORD *)(v40 + 24) = &v43 - 6;
    v56 = thunk for @callee_guaranteed () -> ()partial apply;
    v57 = v40;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v54 = thunk for @escaping @callee_guaranteed () -> ();
    v55 = &block_descriptor_8;
    v41 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v41);
    LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();

    swift_release();
    result = swift_release();
    v42 = v46;
    if ((v33 & 1) == 0)
    {
      outlined destroy of Any?(v37, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v52, v49);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v43);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v42, v17);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BehaviorBuilder.clear(inputs:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 aBlock;
  __int128 v16;
  uint64_t (*v17)();
  uint64_t v18;
  __int128 v19;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v5 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v19, &aBlock);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    if (one-time initialization token for OutputName != -1)
      swift_once();
    v7 = static BehaviorBuilder.OutputName;
    v8 = *(_QWORD *)algn_255BFA0D8;
    aBlock = 0u;
    v16 = 0u;
    swift_bridgeObjectRetain();
    Outputs.subscript.setter((uint64_t)&aBlock, v7, v8);
    swift_release();
    v9 = v1[3];
    v10 = type metadata accessor for __RKEntityInteractionSpecification();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
    swift_retain();
    Inputs.prim.getter();
    v11 = (void *)RIOPxrUsdObjectCopyPath();
    v12 = swift_release();
    MEMORY[0x24BDAC7A8](v12);
    *((_QWORD *)&aBlock - 4) = v9;
    *((_QWORD *)&aBlock - 3) = v11;
    *((_QWORD *)&aBlock - 2) = v4;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = partial apply for closure #1 in BehaviorsCommitter.commit(_:at:inputs:);
    *(_QWORD *)(v13 + 24) = &aBlock - 3;
    v17 = partial apply for thunk for @callee_guaranteed () -> ();
    v18 = v13;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v16 = thunk for @escaping @callee_guaranteed () -> ();
    *((_QWORD *)&v16 + 1) = &block_descriptor_4;
    v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RIOBuilderInputsPerformBlockSyncOnEngineQueue();
    _Block_release(v14);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();

    swift_release();
    result = swift_release();
    if ((v7 & 1) == 0)
      return outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BehaviorBuilder.buildTriggerSpecifications(inputs:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for TriggersInputName != -1)
    swift_once();
  v2 = Inputs.accumulatedValues(forKey:)(static BehaviorBuilder.TriggersInputName, *(uint64_t *)algn_255BFA0B8);
  v3 = specialized _arrayConditionalCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    v12 = type metadata accessor for __RKEntityTriggerSpecification();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  do
  {
    v7 = *(_QWORD *)(v3 + 8 * v5++ + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v7);
    swift_bridgeObjectRelease();
  }
  while (v4 != v5);
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v6 + 16))
  {
    *a1 = v6;
    v8 = *MEMORY[0x24BDE6B90];
    v9 = type metadata accessor for __RKEntityTriggerSpecification();
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 104))(a1, v8, v9);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
  else
  {
    v13 = type metadata accessor for __RKEntityTriggerSpecification();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
    return swift_bridgeObjectRelease();
  }
}

uint64_t BehaviorBuilder.buildActionSpecifications(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD *v22;
  char v23;

  v2 = type metadata accessor for __RKEntityGroupActionOrder();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for ActionsInputName != -1)
    swift_once();
  v6 = Inputs.accumulatedValues(forKey:)(static BehaviorBuilder.ActionsInputName, *(uint64_t *)algn_255BFA0C8);
  v7 = specialized _arrayConditionalCast<A, B>(_:)(v6);
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_11;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v13 = type metadata accessor for __RKEntityActionSpecification();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  v21[0] = a1;
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v11 = *(_QWORD *)(v7 + 8 * v9++ + 32);
    v22 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v11);
    swift_bridgeObjectRelease();
    v10 = v22;
  }
  while (v8 != v9);
  swift_bridgeObjectRelease_n();
  if (v10[2])
  {
    Inputs.prim.getter();
    if (String.count.getter() < 1)
    {
      v12 = (id)RIOPxrTfTokenEmpty();
    }
    else
    {
      String.utf8CString.getter();
      v12 = (id)RIOPxrTfTokenCreateWithCString();
      swift_release();
    }
    specialized Prim.attributeValueResult<A>(of:type:)((uint64_t)&v22);

    swift_release();
    v16 = v22;
    if ((v23 & 1) != 0)
    {
      v21[1] = v22;
      lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
      swift_willThrowTypedImpl();
      outlined consume of Result<Double, Object.Error>(v16, 1);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDE68D8], v2);
    v17 = v21[0];
    __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)();
    v18 = *MEMORY[0x24BDE69C8];
    v19 = type metadata accessor for __RKEntityActionSpecification();
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  else
  {
    v15 = type metadata accessor for __RKEntityActionSpecification();
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v21[0], 1, 1, v15);
    return swift_bridgeObjectRelease();
  }
}

uint64_t BehaviorBuilder.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BehaviorBuilder()
{
  return objc_opt_self();
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance BehaviorBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v5;

  v0 = specialized closure #1 in BehaviorBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v5 = inited;
  specialized Array._endMutation()();
  v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Int protocol witness for Builder.outputDescriptors() in conformance BehaviorBuilder()
{
  uint64_t inited;
  uint64_t v1;
  Swift::Int v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = *(_QWORD *)algn_255BFA0D8;
  *(_QWORD *)(inited + 32) = static BehaviorBuilder.OutputName;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 0xD000000000000021;
  *(_QWORD *)(inited + 56) = 0x800000022BD07F60;
  *(_BYTE *)(inited + 64) = 1;
  swift_bridgeObjectRetain();
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v2;
}

uint64_t one-time initialization function for behaviorCommitter()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.behaviorCommitter = result;
  return result;
}

void closure #1 in BehaviorsCommitter.commit(_:at:inputs:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  id v17;
  uint64_t v18;
  id v19;
  void *i;
  id v21;
  char v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  void (*v42)(char *, _QWORD);
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52[32];

  v51 = type metadata accessor for __RKEntityInteractionSpecification();
  v6 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v49 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v49 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v49 - v14;
  outlined init with copy of __RKEntityInteractionSpecification?(a3, (uint64_t)&v49 - v14);
  v16 = (uint64_t *)(a1 + 24);
  swift_beginAccess();
  v17 = a2;
  specialized Dictionary.subscript.setter((uint64_t)v15, v17);
  swift_endAccess();
  v18 = a1 + 32;
  v19 = v17;
  swift_beginAccess();
  for (i = v19; ; i = (void *)v24)
  {
    if (*(_QWORD *)(*(_QWORD *)v18 + 16))
    {
      v21 = i;
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v21);
      v23 = v22;

      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
        break;
    }
    if ((RIOPxrSdfPathIsEmpty() & 1) != 0)
      break;
    v24 = RIOPxrSdfPathCopyParentPath();

  }
  if (!*(_QWORD *)(*(_QWORD *)v18 + 16))
    goto LABEL_12;
  v25 = i;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v25);
  if ((v26 & 1) == 0)
  {

    swift_bridgeObjectRelease();
LABEL_12:
    if (one-time initialization token for behaviorCommitter != -1)
      swift_once();
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_22BD0C360;
    v34 = v19;
    v35 = (void *)RIOPxrSdfPathCopyString();
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

    *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v33 + 32) = v36;
    *(_QWORD *)(v33 + 40) = v38;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_retain();
    v39 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v39);
    swift_bridgeObjectRelease();
    Entity.__interactions.setter();
    swift_release();

    return;
  }

  swift_bridgeObjectRelease();
  v27 = *v16;
  if (!*(_QWORD *)(*v16 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v51);
LABEL_18:

    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
    return;
  }
  v28 = v19;
  swift_bridgeObjectRetain();
  v29 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
  v30 = v51;
  if ((v31 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v12, *(_QWORD *)(v27 + 56) + *(_QWORD *)(v6 + 72) * v29, v51);
    v32 = 0;
  }
  else
  {
    v32 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, v32, 1, v30);

  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v30) == 1)
    goto LABEL_18;
  v40 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v41 = v50;
  v40(v50, v12, v30);
  type metadata accessor for Entity();
  static Entity.fromCore(_:ignoringEntityInfo:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v49, v41, v30);
  v42 = (void (*)(char *, _QWORD))Entity.__interactions.modify();
  v44 = v43;
  v45 = *v43;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v44 = v45;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
    *v44 = v45;
  }
  v48 = *(_QWORD *)(v45 + 16);
  v47 = *(_QWORD *)(v45 + 24);
  if (v48 >= v47 >> 1)
  {
    v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, v45);
    *v44 = v45;
  }
  *(_QWORD *)(v45 + 16) = v48 + 1;
  v40((char *)(v45+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v48), v49, v30);
  v42(v52, 0);

  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v50, v30);
}

uint64_t BehaviorsCommitter.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BehaviorsCommitter()
{
  return objc_opt_self();
}

void specialized Prim.attributeValueResult<A>(of:type:)(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  void *v4;
  char Float;
  char v6;
  uint64_t v7;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    v7 = 0;
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (v4 = (void *)v3, Float = RIOPxrVtValueGetFloat(), v4, (Float & 1) == 0))
  {
    v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  v6 = 0;
  v7 = 0;
LABEL_8:
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (RIOPxrUsdPrimHasAttribute())
  {
    v2 = (void *)RIOPxrUsdPrimCopyAttribute();
    v3 = RIOPxrUsdAttributeCopyValue();
    if (v3)
    {
      v4 = (void *)v3;
      v5 = RIOPxrVtValueCopyString();
      if (v5)
      {
        v6 = (void *)v5;
        v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v9 = v8;

        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = v9;
        *(_BYTE *)(a1 + 16) = 0;
        return;
      }

    }
    v10 = RIOPxrUsdAttributeCopyTypeName();

    *(_QWORD *)a1 = v10;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_BYTE *)(a1 + 16) = 1;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char Double;
  char v6;
  uint64_t v7;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    v7 = 0;
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (v4 = (void *)v3, Double = RIOPxrVtValueGetDouble(), v4, (Double & 1) == 0))
  {
    v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  v6 = 0;
  v7 = 0;
LABEL_8:
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char UInt32;
  char v6;
  uint64_t v7;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    v7 = 0;
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (v4 = (void *)v3, UInt32 = RIOPxrVtValueGetUInt32(), v4, (UInt32 & 1) == 0))
  {
    v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  v6 = 0;
  v7 = 0;
LABEL_8:
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char Bool;
  char v6;
  uint64_t v7;

  if (!RIOPxrUsdPrimHasAttribute())
  {
    v7 = 0;
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  v2 = (void *)RIOPxrUsdPrimCopyAttribute();
  v3 = RIOPxrUsdAttributeCopyValue();
  if (!v3 || (v4 = (void *)v3, Bool = RIOPxrVtValueGetBool(), v4, (Bool & 1) == 0))
  {
    v7 = RIOPxrUsdAttributeCopyTypeName();

    goto LABEL_7;
  }

  v6 = 0;
  v7 = 0;
LABEL_8:
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v6;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  int Double3;
  uint64_t v6;

  if (RIOPxrUsdPrimHasAttribute())
  {
    v2 = (void *)RIOPxrUsdPrimCopyAttribute();
    v3 = RIOPxrUsdAttributeCopyValue();
    if (v3)
    {
      v4 = (void *)v3;
      Double3 = RIOPxrVtValueGetDouble3();

      if (Double3)
      {

        *(_OWORD *)a1 = 0u;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_BYTE *)(a1 + 32) = 0;
        return;
      }
    }
    v6 = RIOPxrUsdAttributeCopyTypeName();

    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  *(_BYTE *)(a1 + 32) = 1;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>);
  v3 = *(_QWORD *)(type metadata accessor for __RKEntityInteractionSpecification() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      v10 = v9;
      swift_bridgeObjectRetain();
      outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
      if (v10 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for UUID();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a3, v12 + *(_QWORD *)(v14 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v15;
    }

    v10 = *(_QWORD *)(v9 + 56);
    v11 = type metadata accessor for __RKEntityInteractionSpecification();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, v10 + *(_QWORD *)(v12 + 72) * v6, v11);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v14 = type metadata accessor for __RKEntityInteractionSpecification();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      while (1)
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for RIOPxrSdfPathRef(0);
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef();
        v11 = v10;
        _CFObject.hash(into:)();
        v12 = Hasher._finalize()();

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
          break;
        if (v13 < v9)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_QWORD *)(v14 + 8 * v3);
        v16 = (_QWORD *)(v14 + 8 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for __RKEntityInteractionSpecification() - 8) + 72);
        v19 = v18 * v3;
        v20 = v17 + v18 * v3;
        v21 = v18 * v6;
        v22 = v17 + v18 * v6 + v18;
        if (v19 < v21 || v20 >= v22)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v21)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v9)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for RIOPxrSdfPathRef(0);
        lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef();
        v11 = v10;
        _CFObject.hash(into:)();
        v12 = Hasher._finalize()();

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9)
            goto LABEL_5;
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v22 = *v20;
    v21 = (-1 << a1) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t specialized _IteratorBox.next()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;

  v2 = v1[2];
  v4 = v1[5];
  v3 = v1[6];
  v5 = v4;
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    v8 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v7);
    v9 = v8[1];
    v10 = (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v7);
    *(_QWORD *)a1 = *v8;
    *(_QWORD *)(a1 + 8) = v9;
    v11 = v10[1];
    *(_OWORD *)(a1 + 16) = *v10;
    *(_OWORD *)(a1 + 32) = v11;
    result = swift_bridgeObjectRetain();
LABEL_23:
    v1[5] = v5;
    v1[6] = v6;
    return result;
  }
  v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v14 = (unint64_t)(v1[4] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v1[3];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v6 = (v16 - 1) & v16;
        v7 = __clz(__rbit64(v16)) + (v13 << 6);
        v5 = v13;
        goto LABEL_3;
      }
      v17 = v4 + 2;
      v5 = v4 + 1;
      if (v4 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v5 = v4 + 2;
        if (v4 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v4 + 3));
          if (v16)
          {
            v13 = v4 + 3;
            goto LABEL_7;
          }
          v17 = v4 + 4;
          v5 = v4 + 3;
          if (v4 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v4 + 5;
            v5 = v4 + 4;
            if (v4 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v5 = v14 - 1;
              v18 = v4 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v6 = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v8 = -1 << *(_BYTE *)(a4 + 32);
  v9 = a4 + 64;
  v10 = ~v8;
  v11 = -v8;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(a4 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : ImportSession.MeshAssetEstimate].Iterator>);
  result = (_QWORD *)swift_allocObject();
  v15 = result;
  v16 = 0;
  result[2] = a4;
  result[3] = v9;
  result[4] = v10;
  result[5] = 0;
  result[6] = v13;
  if (!a2 || !a3)
  {
LABEL_14:
    *a1 = v15;
    return (_QWORD *)v16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    specialized _IteratorBox.next()((uint64_t)&v20);
    v17 = v21;
    if (v21)
    {
      v16 = 0;
      while (1)
      {
        v18 = v22;
        v19 = v23;
        *(_QWORD *)a2 = v20;
        *(_QWORD *)(a2 + 8) = v17;
        *(_OWORD *)(a2 + 16) = v18;
        *(_OWORD *)(a2 + 32) = v19;
        if (a3 - 1 == v16)
          break;
        specialized _IteratorBox.next()((uint64_t)&v20);
        v17 = v21;
        a2 += 48;
        ++v16;
        if (!v21)
          goto LABEL_14;
      }
      v16 = a3;
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for __RKEntityInteractionSpecification();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13.n128_f64[0] = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
LABEL_37:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v34 = -1 << *(_BYTE *)(v17 - 32);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v11, *(_QWORD *)(v39 + 56) + v29 * v25, v8, v13);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v11, v8);
    v30(a2, v15, v8);
    if (v23 == v38)
      goto LABEL_36;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    v19 = v34;
    a1 = v35;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

uint64_t specialized closure #1 in BehaviorBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t inited;
  uint64_t v6;
  unint64_t v8;

  if (one-time initialization token for PreliminaryBehaviorPrimTypeName != -1)
    swift_once();
  v8 = static BehaviorBuilder.PreliminaryBehaviorPrimTypeName;
  v0 = (id)static BehaviorBuilder.PreliminaryBehaviorPrimTypeName;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v8);
  v2 = one-time initialization token for BehaviorPrimTypeName;
  swift_retain();
  if (v2 != -1)
    swift_once();
  v8 = static BehaviorBuilder.BehaviorPrimTypeName;
  v3 = (id)static BehaviorBuilder.BehaviorPrimTypeName;
  v4 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C650;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v4;
  v8 = inited;
  specialized Array._endMutation()();
  v6 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v8);
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

void partial apply for closure #1 in BehaviorsCommitter.commit(_:at:inputs:)()
{
  uint64_t v0;

  closure #1 in BehaviorsCommitter.commit(_:at:inputs:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_22BC59BEC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t outlined init with copy of __RKEntityInteractionSpecification?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef)
  {
    type metadata accessor for RIOPxrSdfPathRef(255);
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfPathRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef);
  }
  return result;
}

uint64_t sub_22BC59CA4()
{
  return swift_deallocObject();
}

uint64_t sub_22BC59CB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in BehaviorBuilder.inputDescriptors()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in BehaviorBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), &one-time initialization token for TriggersPropertyName, &static BehaviorBuilder.TriggersPropertyName, algn_255BFA098);
}

uint64_t partial apply for closure #3 in BehaviorBuilder.inputDescriptors()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in BehaviorBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), &one-time initialization token for ActionsPropertyName, &static BehaviorBuilder.ActionsPropertyName, algn_255BFA0A8);
}

uint64_t closure #1 in closure #1 in AudioFileBuilder.stageSubscription.getter()
{
  void *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  _QWORD *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  id v43;
  id v44;
  uint64_t inited;
  uint64_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;

  if (one-time initialization token for loadingStrategy != -1)
    swift_once();
  v0 = (void *)static AudioConstants.AudioFile.loadingStrategy;
  type metadata accessor for NamedPropertyDirtyState();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = v0;
  v3 = MEMORY[0x24BEE4B08];
  v4 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v2, MEMORY[0x24BEE4B08]);

  v1[2] = v3;
  v1[3] = v4;
  v5 = one-time initialization token for shouldLoop;
  v49 = v1;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = (void *)static AudioConstants.AudioFile.shouldLoop;
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = v6;
  v8 = v6;
  v9 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, v3);

  v7[2] = v3;
  v7[3] = v9;
  v10 = one-time initialization token for randomizeStart;
  v48 = v7;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = (void *)static AudioConstants.AudioFile.randomizeStart;
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = v11;
  v13 = v11;
  v14 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v13, v3);

  v12[2] = v3;
  v12[3] = v14;
  v15 = one-time initialization token for normalization;
  swift_retain();
  if (v15 != -1)
    swift_once();
  v16 = (void *)static AudioConstants.AudioFile.normalization;
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = v16;
  v18 = v16;
  v19 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v18, v3);

  v17[2] = v3;
  v17[3] = v19;
  swift_retain();
  if (String.count.getter() < 1)
    v20 = (id)RIOPxrTfTokenEmpty();
  else
    v20 = (id)RIOPxrTfTokenCreateWithCString();
  v21 = v20;
  v22 = (_QWORD *)swift_allocObject();
  v22[4] = v21;
  v23 = v21;
  v24 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v23, v3);

  v22[2] = v3;
  v22[3] = v24;
  swift_retain();
  if (String.count.getter() < 1)
    v25 = (id)RIOPxrTfTokenEmpty();
  else
    v25 = (id)RIOPxrTfTokenCreateWithCString();
  v26 = v25;
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = v26;
  v28 = v26;
  v29 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v28, v3);

  v27[2] = v3;
  v27[3] = v29;
  v30 = one-time initialization token for calibrationMode;
  swift_retain();
  if (v30 != -1)
    swift_once();
  v31 = (void *)static AudioConstants.AudioFile.calibrationMode;
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = v31;
  v33 = v31;
  v34 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v33, v3);

  v32[2] = v3;
  v32[3] = v34;
  v35 = one-time initialization token for assetPath;
  swift_retain();
  if (v35 != -1)
    swift_once();
  v36 = (void *)static AudioConstants.AudioFile.assetPath;
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = v36;
  v38 = v36;
  v39 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v38, v3);

  v37[2] = v3;
  v37[3] = v39;
  v40 = one-time initialization token for mixGroup;
  swift_retain();
  if (v40 != -1)
    swift_once();
  v41 = (void *)static AudioConstants.AudioFile.mixGroup;
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = v41;
  v43 = v41;
  v44 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v43, v3);

  v42[2] = v3;
  v42[3] = v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0CF90;
  *(_QWORD *)(inited + 32) = v49;
  *(_QWORD *)(inited + 40) = v48;
  *(_QWORD *)(inited + 48) = v12;
  *(_QWORD *)(inited + 56) = v17;
  *(_QWORD *)(inited + 64) = v22;
  *(_QWORD *)(inited + 72) = v27;
  *(_QWORD *)(inited + 80) = v32;
  *(_QWORD *)(inited + 88) = v37;
  *(_QWORD *)(inited + 96) = v42;
  v50 = inited;
  specialized Array._endMutation()();
  v46 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v50);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v46;
}

void AudioFileBuilder.run(inputs:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t SwiftObject;
  uint64_t ServiceLocator;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  void *EmptyValue;
  void *v17;
  id v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint8_t *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  id v29;
  BOOL v30;
  id v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[12];
  id v35;
  id v36;
  Class isa;
  uint64_t v38;
  id v39;
  void **v40;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = *v1;
  v5 = Inputs.prim.getter();
  v6 = (id)RIOBuilderInputsGetImportSession();
  if (!v6)
    goto LABEL_27;
  v7 = v6;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_28:
    __break(1u);
    return;
  }
  swift_retain();
  ServiceLocator = REEngineGetServiceLocator();
  type metadata accessor for REAudioFileConfigurationWrapper();
  swift_allocObject();
  swift_retain();
  v10 = specialized REAudioFileConfigurationWrapper.init(prim:)();
  swift_release();
  v11 = MEMORY[0x22E2F60DC](ServiceLocator);
  if (!v11)
  {
    if (one-time initialization token for rioAudio != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.rioAudio);
    v20 = static os_log_type_t.error.getter();
    v21 = Logger.logObject.getter();
    if (os_log_type_enabled(v21, v20))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_22BC20000, v21, v20, "AudioFileBuilder could not get an AssetManager.", v22, 2u);
      MEMORY[0x22E2F898C](v22, -1, -1);
      swift_release();
      swift_release();

    }
    else
    {

      swift_release();
      swift_release();
    }
    goto LABEL_18;
  }
  v12 = v11;
  if (one-time initialization token for assetPath != -1)
    swift_once();
  v13 = (id)static AudioConstants.AudioFile.assetPath;
  if (!RIOPxrUsdPrimHasAttribute())
  {

    aBlock[0] = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return;
  }
  v14 = RIOPxrUsdPrimCopyAttribute();

  type metadata accessor for AnyAttribute();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue)
    EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
  outlined consume of Result<AnyAttribute, Object.Error>(v15, 0);
  v17 = (void *)RIOPxrVtValueCopyAssetPath();
  if (!v17)
  {
    swift_release();
    swift_release();

LABEL_18:
    swift_release();
    return;
  }
  v38 = v4;
  v39 = EmptyValue;
  v40 = (void **)v10;
  aBlock[0] = v17;
  v18 = v17;
  v23 = SceneDescriptionFoundations.AssetPath.referencedData.getter();
  v25 = v24;
  v36 = v18;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v26 = outlined consume of Data._Representation((uint64_t)v23, v25);
  v27 = v40;
  v28 = v38;
  if (v2[4])
  {
    v35 = (id)v2[7];
    swift_bridgeObjectRetain();
    swift_retain();
    if (specialized static REAudioFileConfigurationWrapper.== infix(_:_:)())
    {
      v29 = -[objc_class hash](isa, sel_hash);
      swift_release();
      v26 = swift_bridgeObjectRelease();
      v30 = v29 == v35;
      v27 = v40;
      if (v30)
      {
        swift_release();
        swift_release();
        swift_release();

        return;
      }
    }
    else
    {
      swift_release();
      v26 = swift_bridgeObjectRelease();
    }
  }
  v40 = &v35;
  MEMORY[0x24BDAC7A8](v26);
  v34[2] = v2;
  v34[3] = SwiftObject;
  v31 = v36;
  v34[4] = v12;
  v34[5] = isa;
  v34[6] = v27;
  v34[7] = v5;
  v34[8] = v36;
  v34[9] = a1;
  v34[10] = v28;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for closure #1 in AudioFileBuilder.run(inputs:);
  *(_QWORD *)(v32 + 24) = v34;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v32;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_5;
  v33 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  if ((v33 & 1) != 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
}

void closure #1 in AudioFileBuilder.run(inputs:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  _QWORD *v9;
  void **v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t SwiftObject;
  void **v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  os_log_type_t v37;
  id v38;
  NSObject *v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  __int128 v54;
  uint64_t v55[3];
  uint64_t v56;

  v9 = a1 + 3;
  if (a1[4])
  {
    swift_bridgeObjectRetain();
    swift_retain();
    RERelease();
    v11 = (void **)(a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v12 = a5;
    v13 = *v11;
    String.utf8CString.getter();
    v14 = v13;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_release();
    swift_bridgeObjectRelease();

    a5 = v12;
    swift_release();
    v15 = a1[4];
  }
  else
  {
    v15 = 0;
  }
  v16 = a1[3];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[4] = 0;
  outlined consume of AudioFileBuilder.Cache?(v16, v15);
  v17 = REAudioFileAssetCreateWithMappedDataAndConfiguration();
  if (v17)
  {
    v18 = v17;
    v51 = a5;
    swift_beginAccess();
    RIOImportSessionQueueAssetForLoad();
    v19 = (void *)RIOPxrUsdObjectCopyPath();
    v20 = (void *)RIOPxrSdfPathCopyString();
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    v24 = (id)RIOBuilderInputsGetImportSession();
    if (v24)
    {
      v25 = v24;
      SwiftObject = RIOImportSessionGetSwiftObject();

      if (SwiftObject)
      {
        v27 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
        swift_retain();
        swift_beginAccess();
        v28 = *v27;
        v29 = a7;
        v30 = v28;
        v31 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        RIOImportSessionRegisterAudioAsset();
        swift_release();

        swift_release();
        swift_release();
        swift_retain();
        v32 = NSObject.hashValue.getter();
        v34 = a1[3];
        v33 = a1[4];
        a1[3] = v21;
        a1[4] = v23;
        a1[5] = v18;
        a1[6] = v51;
        a1[7] = v32;
        outlined consume of AudioFileBuilder.Cache?(v34, v33);
        swift_beginAccess();
        v35 = objc_getAssociatedObject(a1, &static BuilderAssociatedKeys.OutputsReference);
        swift_endAccess();
        if (v35)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          outlined init with take of Any(&v54, v55);
          type metadata accessor for Outputs();
          swift_dynamicCast();
          v56 = MEMORY[0x24BEE27D0];
          v55[0] = v18;
          Outputs.subscript.setter((uint64_t)v55, 0xD00000000000001FLL, 0x800000022BD06D30);
          swift_release();
          return;
        }
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  if (one-time initialization token for rioAudio != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.rioAudio);
  v37 = static os_log_type_t.error.getter();
  swift_retain_n();
  v38 = a7;
  v39 = Logger.logObject.getter();
  if (os_log_type_enabled(v39, v37))
  {
    v40 = swift_slowAlloc();
    v53 = swift_slowAlloc();
    v55[0] = v53;
    *(_DWORD *)v40 = 136315394;
    v41 = (id)RIOPxrUsdObjectCopyPath();
    v42 = (void *)RIOPxrSdfPathCopyString();
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    v46 = v38;
    v47 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    *(_QWORD *)&v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22BC20000, v39, v37, "AudioFileBuilder could not create an REAssetRef. Prim path: %s. Asset path: %s.", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E2F898C](v53, -1, -1);
    MEMORY[0x22E2F898C](v40, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

void AudioFileBuilder.clear(inputs:)()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t SwiftObject;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (id)RIOBuilderInputsGetImportSession();
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = v1;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
  {
LABEL_8:
    __break(1u);
    return;
  }
  v4 = *(_QWORD *)(v0 + 32);
  swift_retain();
  if (v4)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    RERelease();
    v5 = (void **)(SwiftObject + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v6 = *v5;
    String.utf8CString.getter();
    v7 = v6;
    RIOImportSessionRemoveExtraAssetWithTag();
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    v8 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v0 + 24);
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  outlined consume of AudioFileBuilder.Cache?(v9, v8);
  swift_release();
}

uint64_t AudioFileBuilder.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of AudioFileBuilder.Cache?(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioFileBuilder()
{
  return objc_opt_self();
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance AudioFileBuilder()
{
  uint64_t v0;

  v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of protocol witness for Builder.outputDescriptors() in conformance AudioFileBuilder);
  swift_arrayDestroy();
  return v0;
}

uint64_t Prim.attribute(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t EmptyValue;

  if (RIOPxrUsdPrimHasAttribute())
  {
    v0 = RIOPxrUsdPrimCopyAttribute();
    type metadata accessor for AnyAttribute();
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = v0;
    EmptyValue = RIOPxrUsdAttributeCopyValue();
    if (!EmptyValue)
      EmptyValue = RIOPxrVtValueCreateEmptyValue();
    outlined consume of Result<AnyAttribute, Object.Error>(v1, 0);
  }
  else
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  return EmptyValue;
}

uint64_t REAudioFileConfigurationWrapper.__deallocating_deinit()
{
  REAudioFileAssetConfigurationDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioFileConfigurationWrapper()
{
  return objc_opt_self();
}

uint64_t destroy for AudioFileBuilder.Cache()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for AudioFileBuilder.Cache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AudioFileBuilder.Cache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AudioFileBuilder.Cache(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioFileBuilder.Cache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioFileBuilder.Cache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for AudioFileBuilder.Cache()
{
  return &unk_24F637AC8;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REAudioFileConfigurationWrapper()
{
  return specialized static REAudioFileConfigurationWrapper.== infix(_:_:)();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL specialized static REAudioFileConfigurationWrapper.== infix(_:_:)()
{
  int RandomizeStart;
  int ShouldLoop;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  int Streaming;
  int NormalizationMode;
  int CalibrationMode;
  double v17;
  double v18;
  double v19;

  RandomizeStart = REAudioFileAssetConfigurationGetRandomizeStart();
  if (RandomizeStart != REAudioFileAssetConfigurationGetRandomizeStart())
    return 0;
  ShouldLoop = REAudioFileAssetConfigurationGetShouldLoop();
  if (ShouldLoop != REAudioFileAssetConfigurationGetShouldLoop())
    return 0;
  v2 = (id)REAudioFileAssetConfigurationGetMixGroupName();
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = (id)REAudioFileAssetConfigurationGetMixGroupName();
  if (!v7)
  {
    if (!v6)
      goto LABEL_17;
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  if (!v6)
  {
    if (!v11)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (!v11)
    goto LABEL_15;
  if (v4 == v9 && v6 == v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v12 & 1) == 0)
      return result;
  }
LABEL_17:
  Streaming = REAudioFileAssetConfigurationGetStreaming();
  if (Streaming == REAudioFileAssetConfigurationGetStreaming())
  {
    NormalizationMode = REAudioFileAssetConfigurationGetNormalizationMode();
    if (NormalizationMode == REAudioFileAssetConfigurationGetNormalizationMode())
    {
      CalibrationMode = REAudioFileAssetConfigurationGetCalibrationMode();
      if (CalibrationMode == REAudioFileAssetConfigurationGetCalibrationMode())
      {
        REAudioFileAssetConfigurationGetCalibrationLevel();
        v18 = v17;
        REAudioFileAssetConfigurationGetCalibrationLevel();
        return v18 == v19;
      }
    }
  }
  return 0;
}

uint64_t specialized AudioFileBuilder.stageSubscription.getter()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;

  if (one-time initialization token for primType != -1)
    swift_once();
  v0 = (void *)static AudioConstants.AudioFile.primType;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v0;
  v2 = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = closure #1 in closure #1 in AudioFileBuilder.stageSubscription.getter();
  type metadata accessor for TypeNamePrimDirtyState();
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = v4;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE4B08];
  v8 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v5, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRelease();
  v6[2] = v7;
  v6[3] = v5;
  v6[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v9 + 32) = v6;
  v15 = v9;
  specialized Array._endMutation()();
  swift_retain();
  v10 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v15);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v11 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v7, v10, 0);
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v12 + 32) = v11;
  v16 = v12;
  specialized Array._endMutation()();
  v13 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v16);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t outlined consume of AudioFileBuilder.Cache?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t specialized REAudioFileConfigurationWrapper.init(prim:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id EmptyPath;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  Swift::String v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v30;
  unsigned __int8 v31;
  id v32[2];

  v1 = v0;
  v32[1] = *(id *)MEMORY[0x24BDAC8D0];
  *(_QWORD *)(v0 + 16) = REAudioFileAssetConfigurationCreate();
  if (one-time initialization token for randomizeStart != -1)
    swift_once();
  v32[0] = (id)static AudioConstants.AudioFile.randomizeStart;
  v2 = (id)static AudioConstants.AudioFile.randomizeStart;
  v3 = (void *)Prim.attribute(_:)();

  if (v3)
  {
    LOBYTE(v32[0]) = 0;
    RIOPxrVtValueGetBool();

  }
  REAudioFileAssetConfigurationSetRandomizeStart();
  if (one-time initialization token for shouldLoop != -1)
    swift_once();
  v32[0] = (id)static AudioConstants.AudioFile.shouldLoop;
  v4 = (id)static AudioConstants.AudioFile.shouldLoop;
  v5 = (void *)Prim.attribute(_:)();

  if (v5)
  {
    LOBYTE(v32[0]) = 0;
    RIOPxrVtValueGetBool();

  }
  REAudioFileAssetConfigurationSetShouldLoop();
  if (one-time initialization token for mixGroup != -1)
    swift_once();
  v6 = (id)static AudioConstants.AudioFile.mixGroup;
  if (RIOPxrUsdPrimHasRelationship())
  {
    v7 = RIOPxrUsdPrimCopyRelationship();

    type metadata accessor for Relationship();
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v7;
    v9 = Relationship.targets.getter();
    if (*(_QWORD *)(v9 + 16))
    {
      EmptyPath = *(id *)(v9 + 32);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      EmptyPath = (id)RIOPxrSdfPathCreateEmptyPath();
    }
    outlined consume of Result<AnyAttribute, Object.Error>(v8, 0);
    v12 = (void *)RIOPxrSdfPathCopyName();
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v11 = (void *)MEMORY[0x22E2F5278](v13, v15);
    swift_bridgeObjectRelease();
  }
  else
  {

    v32[0] = 0;
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    v11 = 0;
  }
  REAudioFileAssetConfigurationSetMixGroupName();

  if (one-time initialization token for loadingStrategy != -1)
    swift_once();
  v32[0] = (id)static AudioConstants.AudioFile.loadingStrategy;
  v16 = (id)static AudioConstants.AudioFile.loadingStrategy;
  v17 = (void *)Prim.attribute(_:)();

  if (v17)
  {
    v18 = (void *)RIOPxrVtValueCopyString();
    if (v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v19 = String.lowercased()();
      if (v19._countAndFlagsBits == 0x6D6165727473 && v19._object == (void *)0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
  }
  REAudioFileAssetConfigurationSetStreaming();
  if (one-time initialization token for normalization != -1)
    swift_once();
  v32[0] = (id)static AudioConstants.AudioFile.normalization;
  v20 = (id)static AudioConstants.AudioFile.normalization;
  v21 = (void *)Prim.attribute(_:)();

  if (v21)
  {
    v22 = (void *)RIOPxrVtValueCopyToken();

    if (v22)
    {
      v32[0] = v22;
      AudioConstants.AudioFile.Normalization.init(rawValue:)(v32, (char *)&v31);
    }
  }
  REAudioFileAssetConfigurationSetNormalizationMode();
  if (one-time initialization token for calibrationMode != -1)
    swift_once();
  v32[0] = (id)static AudioConstants.AudioFile.calibrationMode;
  v23 = (id)static AudioConstants.AudioFile.calibrationMode;
  v24 = (void *)Prim.attribute(_:)();

  if (v24
    && (v25 = (void *)RIOPxrVtValueCopyToken(), v24, v25)
    && (v32[0] = v25, AudioConstants.AudioFile.CalibrationMode.init(rawValue:)(v32, (char *)&v31), v31 != 3)
    && v31 > 1u)
  {
    REAudioFileAssetConfigurationSetCalibrationMode();
    if (String.count.getter() <= 0)
      v30 = (id)RIOPxrTfTokenEmpty();
    else
      v30 = (id)RIOPxrTfTokenCreateWithCString();
    v27 = v30;
  }
  else
  {
    REAudioFileAssetConfigurationSetCalibrationMode();
    if (String.count.getter() < 1)
      v26 = (id)RIOPxrTfTokenEmpty();
    else
      v26 = (id)RIOPxrTfTokenCreateWithCString();
    v27 = v26;
  }
  v32[0] = v27;
  v28 = (void *)Prim.attribute(_:)();

  if (v28)
  {
    v32[0] = 0;
    RIOPxrVtValueGetDouble();

  }
  REAudioFileAssetConfigurationSetCalibrationLevel();
  return v1;
}

void partial apply for closure #1 in AudioFileBuilder.run(inputs:)()
{
  uint64_t v0;

  closure #1 in AudioFileBuilder.run(inputs:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64));
}

uint64_t sub_22BC5C574()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __RKEntityMoveSelection.init(inputs:)@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::Int v13;
  unsigned int *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v15 = 0;
LABEL_13:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v15, 1);
    goto LABEL_14;
  }
  v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_12:
    v15 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_13;
  }
  v5 = (void *)v4;
  v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_12;
  }
  v7 = (void *)v6;

  swift_release();
  v8 = (void *)RIOPxrTfTokenCopyString();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  v13 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveSelectionUSD.init(rawValue:), v12);
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_release();
    v14 = (unsigned int *)MEMORY[0x24BDE67C0];
    goto LABEL_16;
  }
  if (v13 != 1)
  {
LABEL_14:
    lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  v14 = (unsigned int *)MEMORY[0x24BDE67B8];
LABEL_16:
  v17 = *v14;
  v18 = type metadata accessor for __RKEntityMoveSelection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a1, v17, v18);
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityMoveSelection.MoveSelectionLoadingError, &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityMoveSelection.MoveSelectionLoadingError, &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __RKEntityMoveSelection.MoveSelectionLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BC5C888 + 4 * byte_22BD0D040[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BC5C8A8 + 4 * byte_22BD0D045[v4]))();
}

_BYTE *sub_22BC5C888(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BC5C8A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC5C8B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC5C8B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC5C8C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC5C8C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  return &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if ((v7 & 1) != 0)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v6);
        swift_retain();
        return v5;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v5 = v9;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0))
    return swift_retain();
  else
    return 0;
}

void *specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if ((v7 & 1) != 0)
      {
        v5 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v6);
        v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UUID));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (char *)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, UUID));
    v14 = *v5;
    v15 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v9, v21);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, OpaquePointer>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (URL, __REAsset)>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  v24 = a1;
  v25 = v9;
  v10 = v6 + 64;
  v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v12 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v11, (uint64_t)v5, &demangling cache variable for type metadata for (String, (URL, __REAsset)));
    v13 = *v5;
    v14 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v14);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = (uint64_t *)(v7[6] + 16 * result);
    *v18 = v13;
    v18[1] = v14;
    v19 = v7[7];
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
    result = outlined init with take of (URL, __REAsset)(v25, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v17, &demangling cache variable for type metadata for (URL, __REAsset));
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v11 += v12;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ImportSession.MeshAssetEstimate>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 72);
  while (1)
  {
    v5 = *(v4 - 5);
    v6 = *(v4 - 4);
    v7 = *(v4 - 3);
    v8 = *(v4 - 2);
    v9 = *(v4 - 1);
    v10 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v5;
    v13[1] = v6;
    v14 = (_QWORD *)(v2[7] + 32 * result);
    *v14 = v7;
    v14[1] = v8;
    v14[2] = v9;
    v14[3] = v10;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [ImportSession.EvaluationFault]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SceneDescriptionFoundations.Path, [ToolsFoundations.Token]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v14 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t static CompileSession.CompilationOption_RequireIncludeMetadata.getter()
{
  return 0xD000000000000016;
}

uint64_t CompileSession.CompilationOption_RequireIncludeMetadata_Default.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

void one-time initialization function for CompilationOption_DumpDiagnosticsData()
{
  static CompileSession.CompilationOption_DumpDiagnosticsData = 0x67616944706D7544;
  unk_255BE94A0 = 0xEF73636974736F6ELL;
}

uint64_t static CompileSession.CompilationOption_DumpDiagnosticsData.getter()
{
  uint64_t v0;

  if (one-time initialization token for CompilationOption_DumpDiagnosticsData != -1)
    swift_once();
  v0 = static CompileSession.CompilationOption_DumpDiagnosticsData;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CompileSession.CompilationOption_DumpDiagnosticsData_Default.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 17);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

unint64_t static CompileSession.CompilationOption_DumpDiagnosticsDirectory.getter()
{
  return 0xD000000000000018;
}

uint64_t CompileSession.CompilationOption_DumpDiagnosticsDirectory_Default.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + 32))
  {
    v6 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v8 = objc_msgSend(v7, sel_temporaryDirectory);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = URL.path.getter();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(_QWORD *)(v1 + 24) = v6;
    *(_QWORD *)(v1 + 32) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v6;
}

unint64_t static CompileSession.CompilationOption_ForceIncludeUnusedMaterials.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t CompileSession.CompilationOption_ForceIncludeUnusedMaterials_Default.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 40);
  if (v1 != 2)
    return v1 & 1;
  result = 1;
  *(_BYTE *)(v0 + 40) = 1;
  return result;
}

uint64_t CompileSession.sourcePaths.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CompileSession.exportOptions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions;
  swift_beginAccess();
  v4 = type metadata accessor for __REAssetBundle.ExportOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CompileSession.compilationOptions.getter()
{
  return CompileSession.compilationOptions.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CompileSession.basePath.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompileSession.deploymentTargets.getter()
{
  return CompileSession.compilationOptions.getter();
}

uint64_t CompileSession.deploymentTargets.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CompileSession.deploymentTargets.modify())()
{
  swift_beginAccess();
  return CompileSession.deploymentTargets.modify;
}

uint64_t CompileSession.DeploymentTarget_Default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v3 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v17[-v11];
  v13 = v1 + OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default;
  swift_beginAccess();
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v13, (uint64_t)v12, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  v14 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(a1, v12, v14);
  outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDE63B0], v3);
  __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v9, a1, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
  swift_beginAccess();
  outlined assign with take of (URL, __REAsset)((uint64_t)v9, v13, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  return swift_endAccess();
}

uint64_t CompileSession.compatibilityFaultsByPrimPath.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CompileSession.compatibilityFaults.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v9 = 0;
  for (i = MEMORY[0x24BEE4B08]; ; i = v13)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7)
      goto LABEL_25;
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v9;
    if (!v15)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v7)
        goto LABEL_25;
      v15 = *(_QWORD *)(v3 + 8 * v9);
      if (!v15)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v7)
          goto LABEL_25;
        v15 = *(_QWORD *)(v3 + 8 * v9);
        if (!v15)
        {
          v9 = v14 + 3;
          if (v14 + 3 >= v7)
            goto LABEL_25;
          v15 = *(_QWORD *)(v3 + 8 * v9);
          if (!v15)
          {
            v9 = v14 + 4;
            if (v14 + 4 >= v7)
              goto LABEL_25;
            v15 = *(_QWORD *)(v3 + 8 * v9);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_24:
    v6 = (v15 - 1) & v15;
LABEL_5:
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    specialized Set.union<A>(_:)(v11, i);
    v13 = v12;
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 5;
  if (v16 >= v7)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return i;
  }
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v9 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v7)
      goto LABEL_25;
    v15 = *(_QWORD *)(v3 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD v25[2];

  v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v25 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v25 - v12;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v25[0] = a1 + 56;
  v25[1] = a2;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_5;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v19)
      goto LABEL_23;
    v23 = *(_QWORD *)(v25[0] + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v19)
        goto LABEL_23;
      v23 = *(_QWORD *)(v25[0] + 8 * v14);
      if (!v23)
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v19)
          goto LABEL_23;
        v23 = *(_QWORD *)(v25[0] + 8 * v14);
        if (!v23)
        {
          v14 = v22 + 3;
          if (v22 + 3 >= v19)
            goto LABEL_23;
          v23 = *(_QWORD *)(v25[0] + 8 * v14);
          if (!v23)
            break;
        }
      }
    }
LABEL_22:
    v18 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_5:
    outlined init with copy of CompileSession.ImportSessionData(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * v21, (uint64_t)v13, type metadata accessor for ImportSession.EvaluationFault);
    outlined init with take of CompileSession.ImportSessionData((uint64_t)v13, (uint64_t)v7, type metadata accessor for ImportSession.EvaluationFault);
    specialized Set._Variant.insert(_:)((uint64_t)v10, (uint64_t)v7);
    outlined destroy of CompileSession.ImportSessionData((uint64_t)v10, type metadata accessor for ImportSession.EvaluationFault);
  }
  v24 = v22 + 4;
  if (v24 >= v19)
  {
LABEL_23:
    swift_release();
    return;
  }
  v23 = *(_QWORD *)(v25[0] + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v19)
      goto LABEL_23;
    v23 = *(_QWORD *)(v25[0] + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t CompileSession.includeUnusedMaterials.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials);
  swift_beginAccess();
  return *v1;
}

uint64_t CompileSession.includeUnusedMaterials.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*CompileSession.includeUnusedMaterials.modify())()
{
  swift_beginAccess();
  return CompileSession.includeUnusedMaterials.modify;
}

unint64_t CompileSession.LoadError.errorDescription.getter(uint64_t a1, void *a2, char a3)
{
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;

  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v9 = 0xD00000000000001DLL;
    v6 = a1;
    v7 = (unint64_t)a2;
  }
  else
  {
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v9 = 0xD000000000000023;
    v5._countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    v6 = 0x6E7562206E692022;
    v7 = 0xEB00000000656C64;
  }
  String.append(_:)(*(Swift::String *)&v6);
  return v9;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance CompileSession.LoadError()
{
  uint64_t v0;

  return CompileSession.LoadError.errorDescription.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t CompileSession.__allocating_init(sourcePaths:exportOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  CompileSession.init(sourcePaths:exportOptions:)(a1, a2);
  return v4;
}

uint64_t CompileSession.init(sourcePaths:exportOptions:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  char *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  unint64_t v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  char *v79;

  v3 = v2;
  v72 = a1;
  v5 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v64 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v79 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v73 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v66 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x24BDAC7A8](v15);
  v68 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v71 = (char *)&v64 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v76 = (char *)&v64 - v20;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v64 - v23;
  *((_WORD *)v2 + 8) = 514;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v2[40] = 2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v6 + 56))(&v2[OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default], 1, 1, v5, v22);
  v25 = OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults;
  *(_QWORD *)&v3[v25] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
  v3[OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials] = 0;
  LODWORD(v74) = static os_log_type_t.info.getter();
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v26 = swift_allocObject();
  v78 = xmmword_22BD0C360;
  *(_OWORD *)(v26 + 16) = xmmword_22BD0C360;
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  v67 = v6;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v25) = v27(v24, 1, v5);
  outlined destroy of Any?((uint64_t)v24, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  v69 = v5;
  v70 = a2;
  if ((_DWORD)v25 == 1)
  {
    v28 = 0xE400000000000000;
    v29 = 1701736302;
  }
  else
  {
    v30 = v76;
    __REAssetBundle.ExportOptions.deploymentTarget.getter();
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v30, 1, v5);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v32 = v66;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v30, v5);
    v29 = __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
    v28 = v33;
    (*(void (**)(char *, unint64_t))(v73 + 8))(v32, v75);
  }
  v65 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v27;
  v66 = v3;
  *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
  v76 = (char *)lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v26 + 64) = v76;
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v28;
  v75 = type metadata accessor for OS_os_log();
  v34 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  v35 = *(_QWORD *)(v72 + 16);
  if (v35)
  {
    v36 = v72 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v73 = *(_QWORD *)(v9 + 72);
    v74 = v37;
    swift_bridgeObjectRetain();
    v38 = v79;
    while (1)
    {
      v74(v13, v36, v8);
      v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v39(v13, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v13, v8);
      static os_log_type_t.info.getter();
      v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = v78;
      v41 = URL.path.getter();
      v42 = v76;
      *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v40 + 64) = v42;
      *(_QWORD *)(v40 + 32) = v41;
      *(_QWORD *)(v40 + 40) = v43;
      v44 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v38, v8);
      v36 += v73;
      if (!--v35)
        goto LABEL_11;
    }
  }
  else
  {
    v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    swift_bridgeObjectRetain();
LABEL_11:
    v39(v13, 1, 1, v8);
  }
  v45 = v72;
  swift_bridgeObjectRelease();
  v46 = v66;
  *((_QWORD *)v66 + 6) = v45;
  v47 = &v46[OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions];
  v48 = type metadata accessor for __REAssetBundle.ExportOptions();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v47, v70, v48);
  if (*(_QWORD *)(v45 + 16))
  {
    v51 = (uint64_t)v79;
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v79, v45 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    v52 = specialized static CompileSession.findRKAssets(sourcePath:)(v51);
    v54 = v53;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v51, v8);
  }
  else
  {
    v52 = 0;
    v54 = 0xE000000000000000;
  }
  v55 = (uint64_t)v71;
  v56 = (uint64_t *)&v46[OBJC_IVAR____TtC9RealityIO14CompileSession_basePath];
  *v56 = v52;
  v56[1] = v54;
  *(_QWORD *)&v46[OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  v57 = v68;
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v55, v68, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  v58 = v69;
  if (v65(v57, 1, v69) == 1)
  {
    v59 = MEMORY[0x24BEE4B08];
  }
  else
  {
    v60 = v67;
    v61 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v64, v57, v58);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.ExportOptions.DeploymentTarget>);
    v62 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = v78;
    (*(void (**)(unint64_t, char *, uint64_t))(v60 + 16))(v63 + v62, v61, v58);
    v59 = specialized Set.init(_nonEmptyArrayLiteral:)(v63);
    swift_setDeallocating();
    v55 = (uint64_t)v71;
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v58);
  }
  outlined destroy of Any?(v55, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v48);
  *(_QWORD *)&v46[OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets] = v59;
  return (uint64_t)v46;
}

uint64_t CompileSession.__allocating_init(sourcePaths:exportOptions:compilationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  _BYTE *v15;
  _BYTE v17[16];
  __int128 v18;
  __int128 v19;

  v6 = type metadata accessor for __REAssetBundle.ExportOptions();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16))(v10, a2, v6, v8);
  type metadata accessor for CompileSession(0);
  v11 = swift_allocObject();
  CompileSession.init(sourcePaths:exportOptions:)(a1, (uint64_t)v10);
  if (*(_QWORD *)(a3 + 16))
  {
    swift_retain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x800000022BD08360);
    if ((v13 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v12, (uint64_t)&v18);
    }
    else
    {
      v18 = 0u;
      v19 = 0u;
    }
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    swift_retain();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  if (!*((_QWORD *)&v19 + 1))
  {
    outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  if (!swift_dynamicCast())
  {
LABEL_10:
    v14 = CompileSession.CompilationOption_ForceIncludeUnusedMaterials_Default.getter();
    goto LABEL_11;
  }
  v14 = v17[15];
LABEL_11:
  v15 = (_BYTE *)(v11 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials);
  swift_beginAccess();
  *v15 = v14 & 1;
  swift_release();
  return v11;
}

uint64_t CompileSession.__allocating_init(basePath:sourcePaths:exportOptions:compilationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  CompileSession.init(basePath:sourcePaths:exportOptions:compilationOptions:)(a1, a2, a3, a4);
  return v8;
}

uint64_t CompileSession.init(basePath:sourcePaths:exportOptions:compilationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (**v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  int v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;

  v5 = v4;
  v87 = a4;
  v90 = a1;
  v91 = a2;
  v7 = type metadata accessor for URL();
  v98 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v96 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v80 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v93 = *(_QWORD *)(v15 - 8);
  v94 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v82 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x24BDAC7A8](v17);
  v84 = (uint64_t)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v88 = (char *)&v79 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v79 - v22;
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v79 - v26;
  *((_WORD *)v4 + 8) = 514;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  v4[40] = 2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v10 + 56))(&v4[OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default], 1, 1, v9, v25);
  v28 = OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults;
  *(_QWORD *)&v5[v28] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
  v86 = &v5[OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials];
  v5[OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials] = 0;
  LODWORD(v92) = static os_log_type_t.info.getter();
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v29 = swift_allocObject();
  v97 = xmmword_22BD0C360;
  *(_OWORD *)(v29 + 16) = xmmword_22BD0C360;
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  v83 = v10;
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v28) = v30(v27, 1, v9);
  outlined destroy of Any?((uint64_t)v27, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  v89 = a3;
  v85 = v9;
  if ((_DWORD)v28 == 1)
  {
    v31 = 0xE400000000000000;
    v32 = 1701736302;
    goto LABEL_5;
  }
  __REAssetBundle.ExportOptions.deploymentTarget.getter();
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v30)(v23, 1, v9);
  if ((_DWORD)result != 1)
  {
    v34 = v82;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v23, v9);
    v32 = __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
    v31 = v35;
    (*(void (**)(char *, unint64_t))(v93 + 8))(v34, v94);
LABEL_5:
    v36 = v91;
    v81 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v30;
    v82 = v5;
    *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
    v94 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v29 + 64) = v94;
    *(_QWORD *)(v29 + 32) = v32;
    *(_QWORD *)(v29 + 40) = v31;
    v93 = type metadata accessor for OS_os_log();
    v37 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    v38 = *(_QWORD *)(v36 + 16);
    if (v38)
    {
      v39 = v98;
      v40 = v36 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
      v92 = *(_QWORD *)(v98 + 72);
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
      swift_bridgeObjectRetain();
      v42 = v96;
      while (1)
      {
        v41(v14, v40, v7);
        v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56);
        v43(v14, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v14, 1, v7) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v42, v14, v7);
        static os_log_type_t.info.getter();
        v44 = swift_allocObject();
        *(_OWORD *)(v44 + 16) = v97;
        v45 = URL.path.getter();
        v46 = v94;
        *(_QWORD *)(v44 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v44 + 64) = v46;
        *(_QWORD *)(v44 + 32) = v45;
        *(_QWORD *)(v44 + 40) = v47;
        v48 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        v39 = v98;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v42, v7);
        v40 += v92;
        if (!--v38)
          goto LABEL_11;
      }
    }
    else
    {
      v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
      swift_bridgeObjectRetain();
LABEL_11:
      v43(v14, 1, 1, v7);
    }
    v49 = v91;
    swift_bridgeObjectRelease();
    v50 = v82;
    *((_QWORD *)v82 + 6) = v49;
    v51 = &v50[OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions];
    v52 = type metadata accessor for __REAssetBundle.ExportOptions();
    v53 = *(void (***)(char *, uint64_t, uint64_t))(v52 - 8);
    v54 = v89;
    v53[2](v51, v89, v52);
    v55 = v90;
    v56 = URL.path.getter();
    v57 = (uint64_t *)&v50[OBJC_IVAR____TtC9RealityIO14CompileSession_basePath];
    *v57 = v56;
    v57[1] = v58;
    v59 = v87;
    *(_QWORD *)&v50[OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions] = v87;
    swift_bridgeObjectRetain();
    v60 = (uint64_t)v88;
    __REAssetBundle.ExportOptions.deploymentTarget.getter();
    v61 = v84;
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v60, v84, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    v62 = v85;
    if (v81(v61, 1, v85) == 1)
    {
      v63 = MEMORY[0x24BEE4B08];
    }
    else
    {
      v64 = v83;
      v65 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v80, v61, v62);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.ExportOptions.DeploymentTarget>);
      v66 = *(unsigned __int8 *)(v64 + 80);
      v96 = (char *)v53;
      v67 = v62;
      v68 = (v66 + 32) & ~v66;
      v69 = swift_allocObject();
      *(_OWORD *)(v69 + 16) = v97;
      (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v69 + v68, v65, v67);
      v63 = specialized Set.init(_nonEmptyArrayLiteral:)(v69);
      swift_setDeallocating();
      v54 = v89;
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v70 = *(void (**)(char *, uint64_t))(v64 + 8);
      v55 = v90;
      v71 = v65;
      v60 = (uint64_t)v88;
      v72 = v67;
      v53 = (void (**)(char *, uint64_t, uint64_t))v96;
      v70(v71, v72);
    }
    outlined destroy of Any?(v60, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    *(_QWORD *)&v50[OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets] = v63;
    if (*(_QWORD *)(v59 + 16)
      && (v73 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x800000022BD08360),
          (v74 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v59 + 56) + 32 * v73, (uint64_t)&v100);
    }
    else
    {
      v100 = 0u;
      v101 = 0u;
    }
    v75 = v98;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v53[1])(v54, v52);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v55, v7);
    if (*((_QWORD *)&v101 + 1))
    {
      v76 = swift_dynamicCast();
      v77 = v86;
      if (v76)
      {
        v78 = v99;
LABEL_24:
        swift_beginAccess();
        *v77 = v78 & 1;
        return (uint64_t)v50;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
      v77 = v86;
    }
    v78 = CompileSession.CompilationOption_ForceIncludeUnusedMaterials_Default.getter();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static CompileSession.cartesianProduct(of:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v3;
  *a2 = v5;
  return swift_bridgeObjectRetain();
}

unint64_t CompileSession.postOperationsAndExtraAssets(for:with:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  id v53;
  void *v54;
  Class isa;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  unsigned __int128 v64;
  char *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void (*v70)(void **, uint64_t);
  Swift::String v71;
  Swift::String v72;
  void **v73;
  uint64_t v74;
  Swift::String v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void **v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  char isUniquelyReferenced_nonNull_native;
  void **v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void **v100;
  void *v101;
  char *v102;
  void *v103;
  id v104;
  uint64_t ExtraAssetWithTag;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  Swift::String v125;
  Swift::String v126;
  unsigned __int128 v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void **v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int128 v163;
  __int128 v164;

  v3 = v2;
  v158 = a2;
  v151 = type metadata accessor for __AssetRef();
  v150 = *(_QWORD *)(v151 - 8);
  MEMORY[0x24BDAC7A8](v151);
  v149 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  MEMORY[0x24BDAC7A8](v148);
  v147 = (uint64_t)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v146 = (char *)&v136 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v9);
  v144 = (char *)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = (uint64_t *)type metadata accessor for String.Encoding();
  v143 = *(v145 - 1);
  MEMORY[0x24BDAC7A8](v145);
  v142 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for Date();
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x24BDAC7A8](v141);
  v139 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = (_QWORD *)type metadata accessor for UUID();
  v13 = *(v137 - 1);
  MEMORY[0x24BDAC7A8](v137);
  v138 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for URL();
  v152 = *(_QWORD *)(v153 - 8);
  MEMORY[0x24BDAC7A8](v153);
  v154 = (void **)((char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v155 = (char *)&v136 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v136 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v156 = (char *)&v136 - v22;
  v23 = type metadata accessor for Entity.ChildCollection();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = a1;
  v27 = dispatch thunk of Entity.name.getter();
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0)
    v30 = v27 & 0xFFFFFFFFFFFFLL;
  if (!v30)
  {
    type metadata accessor for Entity();
    HasHierarchy.children.getter();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7138], MEMORY[0x24BDE7150]);
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    v31 = dispatch thunk of Collection.distance(from:to:)();
    v32 = *(void (**)(char *, uint64_t))(v24 + 8);
    v32(v26, v23);
    if (v31 == 1)
    {
      HasHierarchy.children.getter();
      Entity.ChildCollection.subscript.getter();
      v32(v26, v23);
      dispatch thunk of Entity.name.getter();
      swift_release();
      dispatch thunk of Entity.name.setter();
    }
  }
  if (one-time initialization token for CompilationOption_DumpDiagnosticsData != -1)
LABEL_53:
    swift_once();
  v34 = static CompileSession.CompilationOption_DumpDiagnosticsData;
  v33 = unk_255BE94A0;
  v35 = (uint64_t *)(v3 + OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions);
  swift_beginAccess();
  v36 = *v35;
  if (*(_QWORD *)(*v35 + 16))
  {
    swift_bridgeObjectRetain();
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v33);
    if ((v38 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v36 + 56) + 32 * v37, (uint64_t)&v163);
    }
    else
    {
      v164 = 0u;
      v163 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v164 = 0u;
    v163 = 0u;
  }
  swift_endAccess();
  if (!*((_QWORD *)&v164 + 1))
  {
    outlined destroy of Any?((uint64_t)&v163, &demangling cache variable for type metadata for Any?);
LABEL_18:
    if ((CompileSession.CompilationOption_DumpDiagnosticsData_Default.getter() & 1) == 0)
      goto LABEL_34;
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_18;
  if (v162 != 1)
    goto LABEL_34;
LABEL_19:
  swift_beginAccess();
  v39 = *v35;
  if (*(_QWORD *)(*v35 + 16)
    && (v40 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x800000022BD08340), (v41 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v39 + 56) + 32 * v40, (uint64_t)&v163);
  }
  else
  {
    v164 = 0u;
    v163 = 0u;
  }
  v42 = v137;
  swift_endAccess();
  v136 = v3;
  if (*((_QWORD *)&v164 + 1))
  {
    if (swift_dynamicCast())
      goto LABEL_28;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v163, &demangling cache variable for type metadata for Any?);
  }
  CompileSession.CompilationOption_DumpDiagnosticsDirectory_Default.getter();
LABEL_28:
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  URL.lastPathComponent.getter();
  v43 = v156;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v137 = *(_QWORD **)(v152 + 8);
  v44 = v153;
  ((void (*)(char *, uint64_t))v137)(v20, v153);
  v45 = v138;
  UUID.init()();
  v46 = UUID.uuidString.getter();
  v48 = v47;
  (*(void (**)(char *, _QWORD *))(v13 + 8))(v45, v42);
  *(_QWORD *)&v163 = v46;
  *((_QWORD *)&v163 + 1) = v48;
  swift_bridgeObjectRetain();
  v49._countAndFlagsBits = 45;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50 = *((_QWORD *)&v163 + 1);
  v51 = v163;
  v52 = v139;
  Date.init()();
  v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  v54 = (void *)MEMORY[0x22E2F5278](0xD000000000000016, 0x800000022BD086D0);
  objc_msgSend(v53, sel_setDateFormat_, v54);

  isa = Date._bridgeToObjectiveC()().super.isa;
  v56 = objc_msgSend(v53, sel_stringFromDate_, isa);

  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v59 = v58;

  (*(void (**)(char *, uint64_t))(v140 + 8))(v52, v141);
  v163 = __PAIR128__(v50, v51);
  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = v57;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v62 = *((_QWORD *)&v163 + 1);
  v61 = v163;
  swift_bridgeObjectRetain();
  v63._countAndFlagsBits = 45;
  v63._object = (void *)0xE100000000000000;
  String.append(_:)(v63);
  v64 = v163;
  v65 = v142;
  static String.Encoding.utf8.getter();
  v66 = specialized static Utils.getDigest(of:salt:length:encoding:)(v61, v62, 0, (void *)0xE000000000000000);
  v68 = v67;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t *))(v143 + 8))(v65, v145);
  if (v68)
  {
    v69 = v68;
  }
  else
  {
    v66 = 0;
    v69 = (void *)0xE000000000000000;
  }
  v70 = (void (*)(void **, uint64_t))v137;
  v163 = v64;
  swift_bridgeObjectRetain();
  v71._countAndFlagsBits = v66;
  v71._object = v69;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v72 = (Swift::String)v163;
  v73 = v154;
  URL.deletingLastPathComponent()();
  *(_QWORD *)&v163 = URL.lastPathComponent.getter();
  *((_QWORD *)&v163 + 1) = v74;
  swift_bridgeObjectRetain();
  v75._countAndFlagsBits = 45;
  v75._object = (void *)0xE100000000000000;
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v76 = v155;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v70(v73, v44);
  v70((void **)v43, v44);
  (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v43, v76, v44);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_22BD0C5C0;
  v78 = URL.path.getter();
  v80 = v79;
  v81 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v77 + 56) = MEMORY[0x24BEE0D00];
  v82 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v77 + 64) = v82;
  *(_QWORD *)(v77 + 32) = v78;
  *(_QWORD *)(v77 + 40) = v80;
  v83 = URL.path.getter();
  *(_QWORD *)(v77 + 96) = v81;
  *(_QWORD *)(v77 + 104) = v82;
  *(_QWORD *)(v77 + 72) = v83;
  *(_QWORD *)(v77 + 80) = v84;
  type metadata accessor for OS_os_log();
  v85 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  URL.path.getter();
  v86 = (void **)(v157 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v87 = *v86;
  String.utf8CString.getter();
  v88 = v87;
  LOBYTE(v86) = RIOImportSessionDumpDiagnostics();
  swift_bridgeObjectRelease();

  swift_release();
  if ((v86 & 1) == 0)
  {
    static os_log_type_t.info.getter();
    v89 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

  }
  v70((void **)v156, v153);
  v3 = v136;
LABEL_34:
  swift_beginAccess();
  v90 = swift_bridgeObjectRetain();
  v91 = v157;
  v92 = ImportSession.getCompatibilityFaultsByPrimPath(for:)(v90);
  swift_bridgeObjectRelease();
  v93 = (uint64_t *)(v3 + OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v161 = *v93;
  *v93 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v92, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v161);
  *v93 = v161;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v95 = (void **)(v91 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v154 = v95;
  v96 = (void *)RIOImportSessionCopyExtraAssetTags();
  *(_QWORD *)&v163 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if ((_QWORD)v163)
    v97 = v163;
  else
    v97 = MEMORY[0x24BEE4AF8];
  v98 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v99 = *(_QWORD *)(v97 + 16);
  v143 = v97;
  if (v99)
  {
    v145 = (uint64_t *)(v3 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath);
    swift_beginAccess();
    v100 = (void **)(v97 + 40);
    v3 = MEMORY[0x24BEE0D00];
    do
    {
      v102 = (char *)*(v100 - 1);
      v101 = *v100;
      v103 = *v154;
      String.utf8CString.getter();
      swift_bridgeObjectRetain();
      v104 = v103;
      ExtraAssetWithTag = RIOImportSessionGetExtraAssetWithTag();

      swift_release();
      if (ExtraAssetWithTag)
      {
        v155 = v102;
        v156 = (char *)ExtraAssetWithTag;
        v157 = v98;
        v106 = *v145;
        v107 = v145[1];
        swift_bridgeObjectRetain();
        v13 = URL.path.getter();
        v109 = v108;
        *(_QWORD *)&v163 = v13;
        *((_QWORD *)&v163 + 1) = v108;
        v159 = v106;
        v160 = v107;
        lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        if ((BidirectionalCollection<>.starts<A>(with:)() & 1) != 0)
        {
          *(_QWORD *)&v163 = v13;
          *((_QWORD *)&v163 + 1) = v109;
          v159 = v106;
          v160 = v107;
          v110 = type metadata accessor for Locale();
          v111 = (uint64_t)v144;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v144, 1, 1, v110);
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.range<A>(of:options:range:locale:)();
          v113 = v112;
          v20 = v114;
          outlined destroy of Any?(v111, &demangling cache variable for type metadata for Locale?);
          if ((v20 & 1) != 0)
            v113 = 15;
          v115 = HIBYTE(v109) & 0xF;
          if ((v109 & 0x2000000000000000) == 0)
            v115 = v13 & 0xFFFFFFFFFFFFLL;
          if (4 * v115 < v113 >> 14)
          {
            __break(1u);
            goto LABEL_53;
          }
          swift_bridgeObjectRetain();
          v116 = String.subscript.getter();
          v118 = v117;
          v120 = v119;
          v122 = v121;
          swift_bridgeObjectRelease();
          v13 = MEMORY[0x22E2F52FC](v116, v118, v120, v122);
          v124 = v123;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v109 = v124;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        *(_QWORD *)&v163 = v13;
        *((_QWORD *)&v163 + 1) = v109;
        swift_bridgeObjectRetain();
        v125._countAndFlagsBits = 58;
        v125._object = (void *)0xE100000000000000;
        String.append(_:)(v125);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v126._countAndFlagsBits = (uint64_t)v155;
        v126._object = v101;
        String.append(_:)(v126);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v127 = v163;
        v128 = *(int *)(v148 + 48);
        v129 = (uint64_t)v146;
        (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v146, v158, v153);
        type metadata accessor for __REAsset();
        *((_QWORD *)&v164 + 1) = MEMORY[0x24BEE27D0];
        *(_QWORD *)&v163 = v156;
        v130 = v149;
        static __AssetRef.__fromCore(_:)();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v163);
        v131 = static __REAsset.__fromHandle(_:)();
        (*(void (**)(char *, uint64_t))(v150 + 8))(v130, v151);
        *(_QWORD *)(v129 + v128) = v131;
        v132 = v147;
        outlined init with take of (URL, __REAsset)(v129, v147, &demangling cache variable for type metadata for (URL, __REAsset));
        v133 = v157;
        v134 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v163 = v133;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v132, v127, *((uint64_t *)&v127 + 1), v134);
        v98 = v163;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = MEMORY[0x24BEE0D00];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v100 += 2;
      --v99;
    }
    while (v99);
  }
  swift_bridgeObjectRelease();
  return v98;
}

uint64_t CompileSession.compileSync(outputPath:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = v1;
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_22BD0C360;
  v5 = URL.path.getter();
  v7 = v6;
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  type metadata accessor for OS_os_log();
  v8 = static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  v19 = MEMORY[0x24BEE4AF8];
  v17 = MEMORY[0x24BEE4AF8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for USDImportService();
  inited = swift_initStackObject();
  static os_log_type_t.info.getter();
  v10 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 47;
  v11._object = (void *)0xE100000000000000;
  LOBYTE(v8) = String.hasSuffix(_:)(v11);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    v12._countAndFlagsBits = 47;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    swift_endAccess();
  }
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ImportSession.EvaluationFault>>);
  v14 = (unint64_t *)(v2 + OBJC_IVAR____TtC9RealityIO14CompileSession__compatibilityFaults);
  swift_beginAccess();
  *v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  closure #1 in CompileSession.compileSync(outputPath:)(v2, inited, (uint64_t)&v17, (uint64_t *)&v18, &v19, a1, &v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CompileSession.compileSync(outputPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  Swift::String v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  NSURL *v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  void *v105;
  char RealityKitOptionBool;
  int *v107;
  id v108;
  void *v109;
  void *v110;
  void *v111;
  int Bool;
  char v113;
  char v114;
  int v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t IsValid;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  uint64_t *v161;
  void (*v162)(char *, uint64_t, uint64_t *);
  unint64_t *v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  void (*v171)(uint64_t, uint64_t *);
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  void *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void **v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  Swift::String v193;
  Swift::String v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  char *v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, uint64_t *);
  uint64_t *v208;
  Swift::String v209;
  Swift::String v210;
  Swift::String v211;
  __int128 v212;
  uint64_t v213;
  void *v214;
  void *v215;
  Swift::String v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  int64_t v253;
  _QWORD *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int64_t v264;
  unint64_t v265;
  int64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  unint64_t v281;
  uint64_t v282;
  _BOOL8 v283;
  uint64_t v284;
  char v285;
  unint64_t v286;
  char v287;
  _QWORD *v288;
  uint64_t *v289;
  uint64_t v290;
  BOOL v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  void (*v295)(char *, uint64_t, uint64_t *);
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  char v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  void (*v303)(char *, uint64_t, uint64_t, uint64_t *);
  unint64_t v304;
  int v305;
  unint64_t v306;
  unint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t i;
  char *v327;
  char *v328;
  unint64_t v329;
  uint64_t v330;
  unsigned int v331;
  unint64_t v332;
  __n128 v333;
  unsigned __int32 v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void (*v364)(char *);
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  _QWORD *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  void *v376;
  id v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  char *v381;
  uint64_t *v382;
  _QWORD *v383;
  Class isa;
  uint64_t v385;
  uint64_t j;
  uint64_t result;
  id v388;
  id v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  char *v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  _QWORD *v404;
  Swift::String v405;
  Swift::String v406;
  uint64_t v407;
  void (*v408)(_QWORD *, _QWORD, uint64_t);
  uint64_t v409;
  uint64_t v410;
  uint64_t n;
  void *v412;
  id v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  _QWORD *v417;
  _QWORD *v418;
  Swift::String v419;
  Swift::String v420;
  uint64_t v421;
  void (*v422)(_QWORD *, _QWORD, uint64_t);
  uint64_t v423;
  uint64_t v424;
  uint64_t m;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t (*v432)(uint64_t, uint64_t *);
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t v437;
  uint64_t k;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  char *v447;
  int64_t v448;
  uint64_t v449;
  uint64_t v450;
  char *v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t *v461;
  char *v462;
  char *v463;
  char *v464;
  char *v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t *v469;
  unint64_t v470;
  void (*v471)(uint64_t, uint64_t *);
  int *v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  char *v477;
  uint64_t inited;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  unint64_t v482;
  unint64_t *v483;
  uint64_t *v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD *v488;
  char *v489;
  uint64_t v490;
  char *v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t *v494;
  char *v495;
  char *v496;
  void (*v497)(char *, _QWORD, uint64_t, uint64_t *);
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  void (*v503)(char *, unint64_t, uint64_t *);
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  uint64_t *v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  int64_t v513;
  uint64_t v514;
  uint64_t v515;
  char *v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  _QWORD *v520;
  char *v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  char *v525;
  uint64_t v526;
  __n128 v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  __int128 v533;
  __int128 v534;
  void *v535;
  uint64_t v536;

  v461 = a7;
  v482 = a6;
  v483 = a5;
  v484 = a4;
  v517 = a3;
  v536 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for __AssetRef();
  v492 = *(_QWORD *)(v8 - 8);
  v493 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v491 = (char *)&v443 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v444 = *(_QWORD *)(v10 - 8);
  v445 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v443 = (char *)&v443 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v479 = *(_QWORD *)(v12 - 8);
  v480 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v446 = (char *)&v443 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CompileSession.ImportSessionData));
  v510 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v496 = (char *)&v443 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v476 = type metadata accessor for CompileSession.ImportSessionData(0);
  v502 = *(_QWORD *)(v476 - 8);
  MEMORY[0x24BDAC7A8](v476);
  v507 = (uint64_t)&v443 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v469 = (unint64_t *)((char *)&v443 - v18);
  MEMORY[0x24BDAC7A8](v19);
  v481 = (char **)((char *)&v443 - v20);
  v490 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  v526 = *(_QWORD *)(v490 - 8);
  MEMORY[0x24BDAC7A8](v490);
  v489 = (char *)&v443 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v505 = (uint64_t)&v443 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v515 = (uint64_t)&v443 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v527.n128_u64[0] = (unint64_t)&v443 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
  MEMORY[0x24BDAC7A8](v28);
  v495 = (char *)&v443 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v494 = (unint64_t *)((char *)&v443 - v31);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v443 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v523 = (char *)&v443 - v36;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset))?);
  MEMORY[0x24BDAC7A8](v37);
  v521 = (char *)&v443 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x24BDAC7A8](v39);
  v451 = (char *)&v443 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v459 = (uint64_t)&v443 - v42;
  MEMORY[0x24BDAC7A8](v43);
  v458 = (uint64_t)&v443 - v44;
  MEMORY[0x24BDAC7A8](v45);
  v465 = (char *)&v443 - v46;
  MEMORY[0x24BDAC7A8](v47);
  v464 = (char *)&v443 - v48;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v49);
  v462 = (char *)&v443 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for __EngineRef();
  v467 = *(_QWORD *)(v51 - 8);
  v468 = v51;
  MEMORY[0x24BDAC7A8](v51);
  v466 = (char *)&v443 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = (uint64_t *)type metadata accessor for URL();
  v54 = *(v53 - 1);
  MEMORY[0x24BDAC7A8](v53);
  v452 = (char *)&v443 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v56);
  v447 = (char *)&v443 - v57;
  MEMORY[0x24BDAC7A8](v58);
  v477 = (char *)&v443 - v59;
  MEMORY[0x24BDAC7A8](v60);
  v487 = (uint64_t)&v443 - v61;
  MEMORY[0x24BDAC7A8](v62);
  v463 = (char *)&v443 - v63;
  MEMORY[0x24BDAC7A8](v64);
  v512 = (uint64_t)&v443 - v65;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CompileSession.ImportSessionData)?);
  MEMORY[0x24BDAC7A8](v66);
  v520 = (char **)((char *)&v443 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v68);
  v509 = (uint64_t *)((char *)&v443 - v69);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v70);
  v500 = (char *)&v443 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v72 = *(_QWORD *)(a1 + 48);
  v73 = *(_QWORD *)(v72 + 16);
  v508 = v53;
  v506 = v54;
  v485 = a1;
  v516 = (char *)v14;
  v498 = v73;
  if (!v73)
  {
    v303 = *(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v54 + 56);
    swift_bridgeObjectRetain();
    v303(v500, 1, 1, v53);
    goto LABEL_198;
  }
  v460 = (uint64_t *)(a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_compilationOptions);
  v74 = a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_basePath;
  v75 = a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_includeUnusedMaterials;
  v76 = (uint64_t *)(a1 + OBJC_IVAR____TtC9RealityIO14CompileSession_deploymentTargets);
  v499 = v72 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
  v501 = v72;
  swift_bridgeObjectRetain();
  v474 = v75;
  swift_beginAccess();
  v473 = v76;
  swift_beginAccess();
  v475 = v74;
  swift_beginAccess();
  v78 = v500;
  v77 = v501;
  v79 = 0;
  v456 = 0x800000022BD087A0;
  v449 = 0x800000022BD08320;
  v450 = MEMORY[0x24BEE4AD8] + 8;
  v80 = v512;
  v525 = v34;
  while (1)
  {
    if (v79 >= *(_QWORD *)(v77 + 16))
      goto LABEL_291;
    v81 = *(_QWORD *)(v54 + 72);
    v511 = v79;
    v503 = *(void (**)(char *, unint64_t, uint64_t *))(v54 + 16);
    v503(v78, v499 + v81 * v79, v53);
    v497 = *(void (**)(char *, _QWORD, uint64_t, uint64_t *))(v54 + 56);
    v497(v78, 0, 1, v53);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v54 + 48))(v78, 1, v53) == 1)
    {
LABEL_198:
      swift_bridgeObjectRelease();
      v531 = (_QWORD *)MEMORY[0x24BEE4AF8];
      type metadata accessor for __AssetLoadRequest();
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      v530 = __AssetLoadRequest.__allocating_init(serviceLocator:)();
      v304 = *v483;
      swift_bridgeObjectRetain();
      v305 = 0;
      v306 = 0;
      while (1)
      {
        v307 = *(_QWORD *)(v304 + 16);
        v308 = v520;
        if (v306 == v307)
        {
          v309 = 1;
        }
        else
        {
          if (v306 >= v307)
            goto LABEL_292;
          v310 = (uint64_t)&v496[*((int *)v516 + 12)];
          outlined init with copy of CompileSession.ImportSessionData(v304+ ((*(unsigned __int8 *)(v502 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v502 + 80))+ *(_QWORD *)(v502 + 72) * v306, v310, type metadata accessor for CompileSession.ImportSessionData);
          v311 = (uint64_t)v520 + *((int *)v516 + 12);
          *v520 = v306;
          outlined init with take of CompileSession.ImportSessionData(v310, v311, type metadata accessor for CompileSession.ImportSessionData);
          v308 = v520;
          v309 = 0;
          ++v306;
          v14 = (uint64_t)v516;
        }
        v312 = v510;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v510 + 56))(v308, v309, 1, v14);
        v313 = (uint64_t)v308;
        v314 = v509;
        outlined init with take of (URL, __REAsset)(v313, (uint64_t)v509, &demangling cache variable for type metadata for (offset: Int, element: CompileSession.ImportSessionData)?);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v312 + 48))(v314, 1, v14) == 1)
          break;
        v315 = *v314;
        v316 = (uint64_t)v314 + *(int *)(v14 + 48);
        v317 = v507;
        outlined init with take of CompileSession.ImportSessionData(v316, v507, type metadata accessor for CompileSession.ImportSessionData);
        v318 = v518;
        v319 = specialized CompileSession.handleLoad(of:with:assetLoadRequest:metadata:)(v317, v315, v530, &v531);
        v518 = v318;
        if (v318)
        {
          swift_release();
          outlined destroy of CompileSession.ImportSessionData(v317, type metadata accessor for CompileSession.ImportSessionData);
          swift_bridgeObjectRelease();
          v325 = v531[2];
          if (v325)
          {
            swift_bridgeObjectRetain();
            for (i = 0; i != v325; ++i)
              RERelease();
            goto LABEL_282;
          }
LABEL_283:
          result = swift_bridgeObjectRelease();
          goto LABEL_284;
        }
        v320 = v319;
        outlined destroy of CompileSession.ImportSessionData(v317, type metadata accessor for CompileSession.ImportSessionData);
        v305 |= v320;
      }
      swift_bridgeObjectRelease();
      v321 = RERealityFileWritingParametersCreate();
      swift_beginAccess();
      v322 = (uint64_t)v451;
      __REAssetBundle.ExportOptions.deploymentTarget.getter();
      v324 = v479;
      v323 = v480;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v479 + 48))(v322, 1, v480) == 1)
      {
        outlined destroy of Any?(v322, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
        swift_endAccess();
      }
      else
      {
        v327 = v446;
        (*(void (**)(char *, uint64_t, uint64_t))(v324 + 32))(v446, v322, v323);
        swift_endAccess();
        v328 = v443;
        __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
        v529 = __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
        v528 = v329;
        (*(void (**)(char *, uint64_t))(v444 + 8))(v328, v445);
        v330 = v321;
        v331 = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        v332 = (unint64_t)__REAssetBundle.ExportOptions.DeploymentTarget.version.getter() >> 32;
        __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
        v333.n128_u64[0] = __PAIR64__(v332, v331);
        v321 = v330;
        v333.n128_u32[2] = v334;
        v527 = v333;
        v335 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        MEMORY[0x22E2F6028](v335 + 32, v527);
        swift_release();
        RERealityFileWritingParametersSetMajorVersion();
        (*(void (**)(char *, uint64_t))(v324 + 8))(v327, v323);
      }
      v336 = RERealityFileWriterCreateWithParameters();
      RERealityFileWriterCertifyFreeOfChangeSceneActions();
      v535 = 0;
      URL.absoluteString.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v337 = RERealityFileWriterOpen();
      swift_release();
      if (v337)
      {
        v520 = (_QWORD *)v336;
        v519 = v321;
        v521 = (char *)RERealityFileAssetWriteReportCreate();
        v338 = *v484;
        v339 = *(_QWORD *)(*v484 + 64);
        v522 = *v484 + 64;
        v340 = 1 << *(_BYTE *)(v338 + 32);
        v341 = -1;
        if (v340 < 64)
          v341 = ~(-1 << v340);
        v342 = v341 & v339;
        v523 = (char *)((unint64_t)(v340 + 63) >> 6);
        v516 = v523 - 1;
        v524 = v338;
        swift_bridgeObjectRetain();
        v343 = 0;
        v345 = v494;
        v344 = v495;
        if (!v342)
          goto LABEL_219;
LABEL_217:
        v346 = __clz(__rbit64(v342));
        v347 = (v342 - 1) & v342;
        v348 = v346 | (v343 << 6);
LABEL_218:
        v349 = *(_QWORD *)(v524 + 56);
        v350 = (_QWORD *)(*(_QWORD *)(v524 + 48) + 16 * v348);
        v351 = v350[1];
        *v344 = *v350;
        v344[1] = v351;
        v352 = v349 + *(_QWORD *)(v526 + 72) * v348;
        v353 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v352, (uint64_t)v344 + *(int *)(v353 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v353 - 8) + 56))(v344, 0, 1, v353);
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with take of (URL, __REAsset)((uint64_t)v344, (uint64_t)v345, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
          v357 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v357 - 8) + 48))(v345, 1, v357) == 1)break;
          v528 = v347;
          v529 = v343;
          v527.n128_u64[0] = *v345;
          v525 = (char *)v345[1];
          v358 = *(int *)(v357 + 48);
          v360 = v489;
          v359 = v490;
          v361 = *(int *)(v490 + 48);
          v362 = *(unint64_t *)((char *)v345 + v358 + v361);
          v363 = v506;
          v364 = *(void (**)(char *))(v506 + 32);
          v365 = v508;
          v364(v489);
          *(_QWORD *)&v360[v361] = v362;
          v366 = *(int *)(v359 + 48);
          v367 = v505;
          ((void (*)(uint64_t, char *, uint64_t *))v364)(v505, v360, v365);
          *(_QWORD *)(v367 + v366) = v362;
          v368 = *(int *)(v359 + 48);
          v369 = v515;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(v363 + 16))(v515, v367, v365);
          *(_QWORD *)(v369 + v368) = v362;
          swift_retain();
          v370 = v491;
          dispatch thunk of __REAsset.__handle.getter();
          __AssetRef.__as<A>(_:)();
          (*(void (**)(char *, uint64_t))(v492 + 8))(v370, v493);
          (*(void (**)(uint64_t, uint64_t *))(v363 + 8))(v369, v365);
          v371 = REAssetWithMetadataCreate();
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          REAssetWithMetadataSetLabel();
          swift_release();
          v372 = v531;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v372 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v372[2] + 1, 1, v372);
          v374 = v372[2];
          v373 = v372[3];
          v345 = v494;
          v344 = v495;
          v343 = v529;
          if (v374 >= v373 >> 1)
            v372 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v373 > 1), v374 + 1, 1, v372);
          v372[2] = v374 + 1;
          v372[v374 + 4] = v371;
          v531 = v372;
          __AssetLoadRequest.add(asset:)();
          swift_release();
          outlined destroy of Any?(v505, &demangling cache variable for type metadata for (URL, __REAsset));
          v342 = v528;
          if (v528)
            goto LABEL_217;
LABEL_219:
          v354 = v343 + 1;
          if (__OFADD__(v343, 1))
            goto LABEL_294;
          if (v354 < (uint64_t)v523)
          {
            v355 = *(_QWORD *)(v522 + 8 * v354);
            if (v355)
              goto LABEL_222;
            v343 += 2;
            if (v354 + 1 >= (uint64_t)v523)
            {
              v343 = v354;
            }
            else
            {
              v355 = *(_QWORD *)(v522 + 8 * v343);
              if (v355)
              {
                ++v354;
LABEL_222:
                v347 = (v355 - 1) & v355;
                v348 = __clz(__rbit64(v355)) + (v354 << 6);
                v343 = v354;
                goto LABEL_218;
              }
              if (v354 + 2 < (uint64_t)v523)
              {
                v355 = *(_QWORD *)(v522 + 8 * (v354 + 2));
                if (v355)
                {
                  v354 += 2;
                  goto LABEL_222;
                }
                v375 = v354 + 3;
                if (v354 + 3 >= (uint64_t)v523)
                {
                  v343 = v354 + 2;
                }
                else
                {
                  v355 = *(_QWORD *)(v522 + 8 * v375);
                  if (v355)
                  {
                    v354 += 3;
                    goto LABEL_222;
                  }
                  while (1)
                  {
                    v354 = v375 + 1;
                    if (__OFADD__(v375, 1))
                      goto LABEL_297;
                    if (v354 >= (uint64_t)v523)
                      break;
                    v355 = *(_QWORD *)(v522 + 8 * v354);
                    ++v375;
                    if (v355)
                      goto LABEL_222;
                  }
                  v343 = (uint64_t)v516;
                }
              }
            }
          }
          v356 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v356 - 8) + 56))(v344, 1, 1, v356);
          v347 = 0;
        }
        swift_release();
        __AssetLoadRequest.waitForCompletion()();
        v383 = v531;
        if ((RERealityFileWriterWriteAssetArrayAndDependencies() & 1) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)v517 + 16))
          {
            swift_bridgeObjectRetain();
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            RERealityFileWriterSetConfigurationSetNames();

          }
          if (RERealityFileWriterClose())
          {
            RERelease();
            RERelease();
            RERelease();
            swift_release();
            v385 = v383[2];
            if (v385)
            {
              swift_bridgeObjectRetain();
              for (j = 0; j != v385; ++j)
                RERelease();
              swift_bridgeObjectRelease();
            }
            return swift_bridgeObjectRelease();
          }
          v412 = v535;
          if (v535)
          {
            type metadata accessor for CFErrorRef(0);
            lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
            v413 = v412;
            v414 = swift_allocError();
            *v415 = v413;
          }
          else
          {
            v434 = type metadata accessor for __RealityFileError();
            lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, (uint64_t (*)(uint64_t))MEMORY[0x24BDE5F60], MEMORY[0x24BDE5F68]);
            v435 = swift_allocError();
            *v436 = 0xD000000000000018;
            v436[1] = 0x800000022BD08780;
            (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v434 - 8) + 104))(v436, *MEMORY[0x24BDE5F58], v434);
            v414 = v435;
          }
          v518 = v414;
          swift_willThrow();
          RERelease();
          RERelease();
          RERelease();
          swift_release();
          v437 = v531[2];
          if (!v437)
            goto LABEL_283;
          swift_bridgeObjectRetain();
          for (k = 0; k != v437; ++k)
            RERelease();
LABEL_282:
          swift_bridgeObjectRelease();
          goto LABEL_283;
        }
        v388 = (id)RERealityFileAssetWriteReportGetError();
        if (v388)
        {
          v389 = v388;
          type metadata accessor for CFErrorRef(0);
          lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
          v390 = swift_allocError();
          *v391 = v389;
          v392 = v506;
          v393 = v447;
          v394 = v508;
          (*(void (**)(char *, unint64_t, uint64_t *))(v506 + 16))(v447, v482, v508);
          if (v390)
          {
LABEL_273:
            (*(void (**)(char *, uint64_t *))(v392 + 8))(v393, v394);
            v518 = v390;
            swift_willThrow();
            RERelease();
            RERelease();
            RERelease();
            swift_release();
            v424 = v531[2];
            if (!v424)
              goto LABEL_283;
            swift_bridgeObjectRetain();
            for (m = 0; m != v424; ++m)
              RERelease();
            goto LABEL_282;
          }
        }
        else
        {
          v394 = v508;
          (*(void (**)(char *, unint64_t, uint64_t *))(v506 + 16))(v447, v482, v508);
        }
        v416 = type metadata accessor for __RealityFileError();
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, (uint64_t (*)(uint64_t))MEMORY[0x24BDE5F60], MEMORY[0x24BDE5F68]);
        v390 = swift_allocError();
        v418 = v417;
        *(_QWORD *)&v533 = 0;
        *((_QWORD *)&v533 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v533 = 0xD000000000000026;
        *((_QWORD *)&v533 + 1) = 0x800000022BD08750;
        v419._countAndFlagsBits = URL.absoluteString.getter();
        String.append(_:)(v419);
        swift_bridgeObjectRelease();
        v420._countAndFlagsBits = 46;
        v420._object = (void *)0xE100000000000000;
        String.append(_:)(v420);
        v421 = *((_QWORD *)&v533 + 1);
        *v418 = v533;
        v418[1] = v421;
        v422 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v416 - 8) + 104);
        v423 = v416;
        v393 = v447;
        v392 = v506;
        v422(v418, *MEMORY[0x24BDE5F58], v423);
        goto LABEL_273;
      }
      v376 = v535;
      if (v535)
      {
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
        v377 = v376;
        v378 = swift_allocError();
        *v379 = v377;
        v380 = v506;
        v381 = v452;
        v382 = v508;
        (*(void (**)(char *, unint64_t, uint64_t *))(v506 + 16))(v452, v482, v508);
        if (v378)
        {
LABEL_265:
          (*(void (**)(char *, uint64_t *))(v380 + 8))(v381, v382);
          v518 = v378;
          swift_willThrow();
          RERelease();
          RERelease();
          swift_release();
          v410 = v531[2];
          if (!v410)
            goto LABEL_283;
          swift_bridgeObjectRetain();
          for (n = 0; n != v410; ++n)
            RERelease();
          goto LABEL_282;
        }
      }
      else
      {
        v382 = v508;
        (*(void (**)(char *, unint64_t, uint64_t *))(v506 + 16))(v452, v482, v508);
      }
      v402 = type metadata accessor for __RealityFileError();
      lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, (uint64_t (*)(uint64_t))MEMORY[0x24BDE5F60], MEMORY[0x24BDE5F68]);
      v378 = swift_allocError();
      v404 = v403;
      *(_QWORD *)&v533 = 0;
      *((_QWORD *)&v533 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v533 = 0xD000000000000026;
      *((_QWORD *)&v533 + 1) = 0x800000022BD08750;
      v405._countAndFlagsBits = URL.absoluteString.getter();
      String.append(_:)(v405);
      swift_bridgeObjectRelease();
      v406._countAndFlagsBits = 46;
      v406._object = (void *)0xE100000000000000;
      String.append(_:)(v406);
      v407 = *((_QWORD *)&v533 + 1);
      *v404 = v533;
      v404[1] = v407;
      v408 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v402 - 8) + 104);
      v409 = v402;
      v381 = v452;
      v380 = v506;
      v408(v404, *MEMORY[0x24BDE5F58], v409);
      goto LABEL_265;
    }
    (*(void (**)(uint64_t, char *, uint64_t *))(v54 + 32))(v80, v78, v53);
    if ((URL.isFileURL.getter() & 1) == 0)
      goto LABEL_26;
    if (one-time initialization token for supportedFilePathExtensions != -1)
      swift_once();
    v82 = static USDImportService.supportedFilePathExtensions;
    v83 = *(_QWORD *)(static USDImportService.supportedFilePathExtensions + 16);
    if (v83)
    {
      swift_bridgeObjectRetain_n();
      v84 = (uint64_t *)(v82 + 40);
      v85 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v87 = *v84;
        if (*v84)
        {
          v88 = *(v84 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
          v90 = v85[2];
          v89 = v85[3];
          if (v90 >= v89 >> 1)
            v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v89 > 1), v90 + 1, 1, v85);
          v85[2] = v90 + 1;
          v86 = &v85[2 * v90];
          v86[4] = v88;
          v86[5] = v87;
        }
        v84 += 2;
        --v83;
      }
      while (v83);
      swift_bridgeObjectRelease_n();
      v53 = v508;
    }
    else
    {
      v85 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    URL.pathExtension.getter();
    v91 = String.lowercased()();
    swift_bridgeObjectRelease();
    v92 = v85[2];
    if (!v92)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    if ((v85[4] != v91._countAndFlagsBits || (void *)v85[5] != v91._object)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v92 == 1)
        goto LABEL_24;
      v93 = (void **)(v85 + 7);
      v94 = 1;
      while (1)
      {
        v95 = v94 + 1;
        if (__OFADD__(v94, 1))
          goto LABEL_293;
        v96 = *(v93 - 1) == (void *)v91._countAndFlagsBits && *v93 == v91._object;
        if (v96 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v93 += 2;
        ++v94;
        if (v95 == v92)
        {
          swift_bridgeObjectRelease();
          v53 = v508;
LABEL_25:
          swift_bridgeObjectRelease();
          v54 = v506;
          v14 = (uint64_t)v516;
LABEL_26:
          v80 = v512;
          (*(void (**)(uint64_t, uint64_t *))(v54 + 8))(v512, v53);
          goto LABEL_27;
        }
      }
      v53 = v508;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v80 = v512;
    URL._bridgeToObjectiveC()(v97);
    v99 = v98;
    v100 = (void *)RIOPxrUsdStageCreateWithFileURL();

    v14 = (uint64_t)v516;
    if (!v100)
    {
      v54 = v506;
      (*(void (**)(uint64_t, uint64_t *))(v506 + 8))(v80, v53);
      goto LABEL_27;
    }
    v101 = v460;
    swift_beginAccess();
    v102 = *v101;
    if (*(_QWORD *)(v102 + 16)
      && (v103 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, v449), (v104 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v102 + 56) + 32 * v103, (uint64_t)&v533);
    }
    else
    {
      v533 = 0u;
      v534 = 0u;
    }
    swift_endAccess();
    if (*((_QWORD *)&v534 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (v531 != 1)
          goto LABEL_52;
        goto LABEL_51;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v533, &demangling cache variable for type metadata for Any?);
    }
    if ((CompileSession.CompilationOption_RequireIncludeMetadata_Default.getter() & 1) == 0)
      goto LABEL_52;
LABEL_51:
    v105 = (void *)RIOPxrTfTokenCreateWithCString();
    RealityKitOptionBool = RIOPxrUsdUtilsStageGetRealityKitOptionBool();

    if ((RealityKitOptionBool & 1) == 0)
    {
      v117 = v506;
      v118 = v512;
      (*(void (**)(uint64_t, uint64_t *))(v506 + 8))(v512, v53);

      v54 = v117;
      v80 = v118;
      goto LABEL_27;
    }
LABEL_52:
    type metadata accessor for Stage();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v100;
    v107 = v100;
    v108 = String.count.getter() < 1
         ? (id)RIOPxrTfTokenEmpty()
         : (id)RIOPxrTfTokenCreateWithCString();
    v109 = v108;
    v472 = v107;
    v110 = (void *)RIOPxrUsdStageCopyRootLayer();
    v111 = (void *)RIOPxrSdfLayerCopyCustomLayerDataValue();

    if (v111)
    {
      LOBYTE(v533) = 0;
      Bool = RIOPxrVtValueGetBool();
      v113 = v533;
      if (!Bool)
        v113 = 2;
      LOBYTE(v531) = v113;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
      if (swift_dynamicCast())
      {
        v114 = v533;
      }
      else
      {
        v114 = 2;
        LOBYTE(v533) = 2;
      }
      v116 = v472;

      v115 = v114 & 1;
    }
    else
    {

      v115 = 0;
      v116 = v472;
    }
    v119 = (void *)RIOPxrUsdStageCopyDefaultPrim();
    IsValid = RIOPxrUsdObjectIsValid();

    if ((_DWORD)IsValid)
    {
      v121 = (void *)RIOPxrUsdStageCopyDefaultPrim();
      IsValid = RIOPxrUsdPrimCopyVariantSets();

      type metadata accessor for VariantSets();
      v122 = swift_allocObject();
      *(_QWORD *)(v122 + 16) = IsValid;
      v123 = RIOPxrUsdVariantSetsCopySetNames();
      if (!v123)
      {
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_306:
        *(_QWORD *)IsValid = v533;
        result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      IsValid = v123;
      *(_QWORD *)&v533 = 0;
      static Array._forceBridgeFromObjectiveC(_:result:)();
      v124 = v533;
      if (!(_QWORD)v533)
        goto LABEL_302;

      v125 = v122;
      v524 = v122;
      if (!v115)
      {
LABEL_76:
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
    }
    else
    {
      v125 = 0;
      v124 = MEMORY[0x24BEE4AF8];
      v524 = 0;
      if (!v115)
        goto LABEL_76;
    }
    if (!*(_QWORD *)(v124 + 16))
      goto LABEL_76;
    if (*(_QWORD *)(*(_QWORD *)v517 + 16))
      goto LABEL_288;
    if (v125)
    {
      v126 = RIOPxrUsdVariantSetsCopySetNames();
      if (!v126)
        goto LABEL_303;
      v116 = (int *)v126;
      *(_QWORD *)&v533 = 0;
      static Array._forceBridgeFromObjectiveC(_:result:)();
      IsValid = v533;
      if (!(_QWORD)v533)
        goto LABEL_304;

      v125 = v524;
    }
    else
    {
      IsValid = MEMORY[0x24BEE4AF8];
    }
    v172 = *(_QWORD *)(IsValid + 16);
    v530 = IsValid;
    if (v172)
    {
      v173 = IsValid + 40;
      v174 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v125)
        {
          String.utf8CString.getter();
          swift_bridgeObjectRetain();
          swift_retain();
          v175 = (void *)RIOPxrUsdVariantSetsCopyVariantSet();
          swift_bridgeObjectRelease();
          swift_release();
          v176 = RIOPxrUsdVariantSetCopyVariantNames();
          if (!v176)
            goto LABEL_299;
          v177 = (void *)v176;
          *(_QWORD *)&v533 = 0;
          static Array._forceBridgeFromObjectiveC(_:result:)();
          v178 = v533;
          if (!(_QWORD)v533)
            goto LABEL_300;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v174 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v174[2] + 1, 1, v174);
          v180 = v174[2];
          v179 = v174[3];
          v116 = (int *)(v180 + 1);
          if (v180 >= v179 >> 1)
            v174 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v179 > 1), v180 + 1, 1, v174);
          v174[2] = v116;
          v174[v180 + 4] = v178;
          swift_release();
          v125 = v524;
        }
        v173 += 16;
        if (!--v172)
          goto LABEL_107;
      }
    }
    v174 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_107:
    swift_bridgeObjectRelease();
    v181 = specialized static CompileSession.cartesianProduct(of:)((uint64_t)v174);
    swift_bridgeObjectRelease();
    v453 = *(_QWORD *)(v181 + 16);
    if (!v453)
      break;
    *(_QWORD *)v517 = v124;
    swift_bridgeObjectRelease();
    v182 = type metadata accessor for __ServiceLocator();
    v457 = v181;
    v454 = v182;
    v455 = v181 + 32;
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    v183 = 0;
    do
    {
      if (v183 >= *(_QWORD *)(v457 + 16))
        goto LABEL_295;
      v486 = v183;
      v184 = *(_QWORD *)(v455 + 8 * v183);
      v185 = *(_QWORD *)(v184 + 16);
      v514 = v184;
      if (v185)
      {
        swift_bridgeObjectRetain_n();
        v186 = 0;
        v187 = (void **)(v184 + 40);
        v188 = 0xE000000000000000;
        do
        {
          v116 = (int *)*(v187 - 1);
          v189 = *v187;
          v190 = HIBYTE(v188) & 0xF;
          if ((v188 & 0x2000000000000000) == 0)
            v190 = v186 & 0xFFFFFFFFFFFFLL;
          if (v190)
            v191 = 95;
          else
            v191 = 0;
          if (v190)
            v192 = (void *)0xE100000000000000;
          else
            v192 = (void *)0xE000000000000000;
          *(_QWORD *)&v533 = v186;
          *((_QWORD *)&v533 + 1) = v188;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v193._countAndFlagsBits = v191;
          v193._object = v192;
          String.append(_:)(v193);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v194._countAndFlagsBits = (uint64_t)v116;
          v194._object = v189;
          String.append(_:)(v194);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v188 = *((_QWORD *)&v533 + 1);
          v186 = v533;
          v187 += 2;
          --v185;
        }
        while (v185);
        v184 = v514;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v186 = 0;
        v188 = 0xE000000000000000;
      }
      v195 = *(_QWORD *)(*(_QWORD *)v517 + 16);
      v196 = v524;
      v529 = v186;
      if (v195)
      {
        if (v195 <= *(_QWORD *)(v184 + 16))
        {
          v197 = 0;
          v53 = 0;
          v530 = v195;
          while ((unint64_t)v53 < *(_QWORD *)(*(_QWORD *)v517 + 16))
          {
            if (v196)
            {
              String.utf8CString.getter();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v198 = (void *)RIOPxrUsdVariantSetsCopyVariantSet();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              v116 = (int *)String.utf8CString.getter();
              RIOPxrUsdVariantSetSetVariantSelection();

              swift_bridgeObjectRelease();
              swift_release();
              v195 = v530;
              v196 = v524;
            }
            v53 = (uint64_t *)((char *)v53 + 1);
            v197 += 16;
            if ((uint64_t *)v195 == v53)
              goto LABEL_130;
          }
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v439 = type metadata accessor for __RealityFileError();
          lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, (uint64_t (*)(uint64_t))MEMORY[0x24BDE5F60], MEMORY[0x24BDE5F68]);
          v440 = swift_allocError();
          *v441 = 0xD000000000000053;
          v441[1] = 0x800000022BD087C0;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v439 - 8) + 104))(v441, *MEMORY[0x24BDE5F58], v439);
          v518 = v440;
          swift_willThrow();
          v442 = inited;
          swift_setDeallocating();

          swift_release();
          v432 = *(uint64_t (**)(uint64_t, uint64_t *))(v506 + 8);
          v433 = v512;
          goto LABEL_289;
        }
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
      }
LABEL_130:
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      v199 = v466;
      dispatch thunk of __Engine.__coreEngine.getter();
      swift_release();
      __AssetRef.__as<A>(_:)();
      (*(void (**)(char *, uint64_t))(v467 + 8))(v199, v468);
      v200 = RIOImportSessionCreateWithStage();
      if (!v200
        || (v201 = (void *)v200,
            v202 = type metadata accessor for Entity(),
            type metadata accessor for ImportSession(0),
            swift_allocObject(),
            (v488 = specialized ImportSession.init<A>(core:entityType:)(v201, v202)) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v395 = v512;
        v396 = URL.path.getter();
        v398 = v397;
        lazy protocol witness table accessor for type CompileSession.LoadError and conformance CompileSession.LoadError();
        v399 = swift_allocError();
        *(_QWORD *)v400 = v396;
        *(_QWORD *)(v400 + 8) = v398;
        *(_BYTE *)(v400 + 16) = 0;
        v518 = v399;
        swift_willThrow();
        v401 = inited;
        swift_setDeallocating();

        swift_release();
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(v506 + 8))(v395, v508);
        goto LABEL_284;
      }
      v203 = v463;
      URL.deletingPathExtension()();
      v204 = URL.lastPathComponent.getter();
      v206 = v205;
      v207 = *(void (**)(char *, uint64_t *))(v506 + 8);
      v208 = v508;
      v207(v203, v508);
      *(_QWORD *)&v533 = v204;
      *((_QWORD *)&v533 + 1) = v206;
      swift_bridgeObjectRetain();
      v209._countAndFlagsBits = 95;
      v209._object = (void *)0xE100000000000000;
      String.append(_:)(v209);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v210._countAndFlagsBits = v529;
      v210._object = (void *)v188;
      String.append(_:)(v210);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v211._countAndFlagsBits = 46;
      v211._object = (void *)0xE100000000000000;
      String.append(_:)(v211);
      swift_bridgeObjectRelease();
      v212 = v533;
      v213 = URL.pathExtension.getter();
      v215 = v214;
      v533 = v212;
      swift_bridgeObjectRetain();
      v216._countAndFlagsBits = v213;
      v216._object = v215;
      String.append(_:)(v216);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v217 = v477;
      URL.deletingLastPathComponent()();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      v471 = (void (*)(uint64_t, uint64_t *))v207;
      v207(v217, v208);
      v219 = *(_QWORD **)v475;
      v218 = *(_QWORD *)(v475 + 8);
      swift_bridgeObjectRetain();
      v220 = URL.path.getter();
      v222 = v221;
      *(_QWORD *)&v533 = v220;
      *((_QWORD *)&v533 + 1) = v221;
      v531 = v219;
      v532 = v218;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      if ((BidirectionalCollection<>.starts<A>(with:)() & 1) != 0)
      {
        *(_QWORD *)&v533 = v220;
        *((_QWORD *)&v533 + 1) = v222;
        v531 = v219;
        v532 = v218;
        v223 = type metadata accessor for Locale();
        v224 = (uint64_t)v462;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v223 - 8) + 56))(v462, 1, 1, v223);
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.range<A>(of:options:range:locale:)();
        v226 = v225;
        v228 = v227;
        outlined destroy of Any?(v224, &demangling cache variable for type metadata for Locale?);
        if ((v228 & 1) != 0)
          v229 = 15;
        else
          v229 = v226;
        swift_bridgeObjectRetain();
        v230 = specialized Collection.subscript.getter(v229, v220, v222);
        v232 = v231;
        v234 = v233;
        v236 = v235;
        swift_bridgeObjectRelease();
        v522 = MEMORY[0x22E2F52FC](v230, v232, v234, v236);
        v238 = v237;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v470 = v238;
      }
      else
      {
        v522 = v220;
        v470 = v222;
        swift_bridgeObjectRelease();
      }
      v240 = v479;
      v239 = v480;
      v242 = (uint64_t)v464;
      v241 = (uint64_t)v465;
      RIOPxrUsdStageSetIncludeUnusedMaterials();
      specialized Collection.first.getter(*v473, v241);
      v243 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v241, 1, v239);
      v244 = v484;
      if (v243 == 1)
      {
        CompileSession.DeploymentTarget_Default.getter(v242);
        outlined destroy of Any?(v241, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v240 + 32))(v242, v241, v239);
      }
      ++v486;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v240 + 56))(v242, 0, 1, v239);
      v245 = (unint64_t)v488;
      v246 = (uint64_t)v488 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
      swift_beginAccess();
      outlined assign with take of (URL, __REAsset)(v242, v246, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
      swift_endAccess();
      swift_beginAccess();
      RIOImportSessionUpdateSynchronouslyOnEngineQueue();
      v247 = CompileSession.postOperationsAndExtraAssets(for:with:)(v245, v487);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v530 = *v244;
      *(_QWORD *)&v533 = v530;
      *v244 = 0x8000000000000000;
      IsValid = isUniquelyReferenced_nonNull_native;
      v249 = *(_QWORD *)(v247 + 64);
      v504 = v247 + 64;
      v250 = 1 << *(_BYTE *)(v247 + 32);
      if (v250 < 64)
        v251 = ~(-1 << v250);
      else
        v251 = -1;
      v252 = v251 & v249;
      v513 = (unint64_t)(v250 + 63) >> 6;
      v448 = v513 - 1;
      v519 = v247;
      swift_bridgeObjectRetain();
      v253 = 0;
      v254 = v523;
      while (1)
      {
        v257 = (uint64_t)v525;
        if (v252)
        {
          v529 = (v252 - 1) & v252;
          v528 = v253;
          v258 = __clz(__rbit64(v252)) | (v253 << 6);
LABEL_149:
          v259 = (uint64_t *)(*(_QWORD *)(v519 + 48) + 16 * v258);
          v261 = *v259;
          v260 = v259[1];
          v262 = *(_QWORD *)(v519 + 56) + *(_QWORD *)(v526 + 72) * v258;
          v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v262, (uint64_t)v254 + *(int *)(v263 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
          *v254 = v261;
          v254[1] = v260;
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v263 - 8) + 56))(v254, 0, 1, v263);
          swift_bridgeObjectRetain();
          v257 = (uint64_t)v525;
          goto LABEL_165;
        }
        v264 = v253 + 1;
        if (__OFADD__(v253, 1))
        {
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
          goto LABEL_296;
        }
        if (v264 < v513)
        {
          v265 = *(_QWORD *)(v504 + 8 * v264);
          if (v265)
            goto LABEL_153;
          v266 = v253 + 2;
          if (v253 + 2 >= v513)
            goto LABEL_189;
          v265 = *(_QWORD *)(v504 + 8 * v266);
          if (v265)
            goto LABEL_156;
          v253 += 3;
          if (v264 + 2 >= v513)
            goto LABEL_186;
          v265 = *(_QWORD *)(v504 + 8 * v253);
          if (v265)
            goto LABEL_159;
          if (v264 + 3 < v513)
          {
            v265 = *(_QWORD *)(v504 + 8 * (v264 + 3));
            if (v265)
            {
              v264 += 3;
              goto LABEL_153;
            }
            v266 = v264 + 4;
            if (v264 + 4 >= v513)
            {
              v528 = v264 + 3;
              goto LABEL_164;
            }
            v265 = *(_QWORD *)(v504 + 8 * v266);
            if (v265)
            {
LABEL_156:
              v264 = v266;
              goto LABEL_153;
            }
            v253 = v264 + 5;
            if (v264 + 5 < v513)
            {
              v265 = *(_QWORD *)(v504 + 8 * v253);
              if (!v265)
              {
                while (1)
                {
                  v264 = v253 + 1;
                  if (__OFADD__(v253, 1))
                    goto LABEL_298;
                  if (v264 >= v513)
                    break;
                  v265 = *(_QWORD *)(v504 + 8 * v264);
                  ++v253;
                  if (v265)
                    goto LABEL_153;
                }
                v264 = v448;
LABEL_189:
                v528 = v264;
                goto LABEL_164;
              }
LABEL_159:
              v264 = v253;
LABEL_153:
              v529 = (v265 - 1) & v265;
              v258 = __clz(__rbit64(v265)) + (v264 << 6);
              v528 = v264;
              goto LABEL_149;
            }
LABEL_186:
            v528 = v266;
            goto LABEL_164;
          }
        }
        v528 = v253;
LABEL_164:
        v267 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v267 - 8) + 56))(v254, 1, 1, v267);
        v529 = 0;
LABEL_165:
        outlined init with take of (URL, __REAsset)((uint64_t)v254, v257, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
        v268 = (uint64_t *)v257;
        v269 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v269 - 8) + 48))(v268, 1, v269) == 1)
        {
          v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
          v53 = (uint64_t *)v521;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v270 - 8) + 56))(v521, 1, 1, v270);
        }
        else
        {
          v271 = (uint64_t)v268 + *(int *)(v269 + 48);
          v272 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
          v53 = (uint64_t *)v521;
          v274 = *v268;
          v273 = v268[1];
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v271, (uint64_t)&v521[*(int *)(v272 + 48)], &demangling cache variable for type metadata for (URL, __REAsset));
          *v53 = v274;
          v53[1] = v273;
          swift_bridgeObjectRetain();
          outlined destroy of Any?((uint64_t)v268, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v272 - 8) + 56))(v53, 0, 1, v272);
        }
        v275 = v522;
        v276 = v530;
        v116 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
        v277 = (*(uint64_t (**)(uint64_t *, uint64_t, int *))(*((_QWORD *)v116 - 1) + 48))(v53, 1, v116);
        v254 = v523;
        if (v277 == 1)
          break;
        v278 = (uint64_t)v53 + v116[12];
        v279 = *v53;
        v116 = (int *)v53[1];
        outlined init with take of (URL, __REAsset)(v278, v527.n128_i64[0], &demangling cache variable for type metadata for (URL, __REAsset));
        v281 = specialized __RawDictionaryStorage.find<A>(_:)(v279, (uint64_t)v116);
        v282 = *(_QWORD *)(v276 + 16);
        v283 = (v280 & 1) == 0;
        v284 = v282 + v283;
        if (__OFADD__(v282, v283))
        {
          __break(1u);
          goto LABEL_286;
        }
        v285 = v280;
        if (*(_QWORD *)(v276 + 24) >= v284)
        {
          if ((IsValid & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v284, IsValid & 1);
          v286 = specialized __RawDictionaryStorage.find<A>(_:)(v279, (uint64_t)v116);
          if ((v285 & 1) != (v287 & 1))
            goto LABEL_305;
          v281 = v286;
        }
        v288 = (_QWORD *)v533;
        v530 = v533;
        if ((v285 & 1) != 0)
        {
          v255 = *(_QWORD *)(v526 + 72) * v281;
          v256 = v515;
          outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(*(_QWORD *)(v533 + 56) + v255, v515, &demangling cache variable for type metadata for (URL, __REAsset));
          outlined destroy of Any?(v527.n128_i64[0], &demangling cache variable for type metadata for (URL, __REAsset));
          swift_bridgeObjectRelease();
          outlined assign with take of (URL, __REAsset)(v256, v288[7] + v255, &demangling cache variable for type metadata for (URL, __REAsset));
        }
        else
        {
          *(_QWORD *)(v533 + 8 * (v281 >> 6) + 64) |= 1 << v281;
          v289 = (uint64_t *)(v288[6] + 16 * v281);
          *v289 = v279;
          v289[1] = (uint64_t)v116;
          outlined init with take of (URL, __REAsset)(v527.n128_i64[0], v288[7] + *(_QWORD *)(v526 + 72) * v281, &demangling cache variable for type metadata for (URL, __REAsset));
          v290 = v288[2];
          v291 = __OFADD__(v290, 1);
          v292 = v290 + 1;
          if (v291)
            goto LABEL_287;
          v288[2] = v292;
        }
        IsValid = 1;
        v253 = v528;
        v252 = v529;
      }
      swift_bridgeObjectRelease();
      swift_release();
      *v484 = v276;
      swift_bridgeObjectRelease();
      v293 = v476;
      v294 = (char *)v481;
      v53 = v508;
      v295 = (void (*)(char *, uint64_t, uint64_t *))v503;
      v503((char *)v481 + *(int *)(v476 + 28), v482, v508);
      v295(&v294[*(int *)(v293 + 32)], v487, v53);
      *(_QWORD *)v294 = v488;
      *((_QWORD *)v294 + 1) = v275;
      v296 = v514;
      *((_QWORD *)v294 + 2) = v470;
      *((_QWORD *)v294 + 3) = v296;
      v297 = v483;
      v298 = *v483;
      swift_retain();
      v299 = swift_isUniquelyReferenced_nonNull_native();
      *v297 = v298;
      if ((v299 & 1) == 0)
      {
        v298 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v298 + 16) + 1, 1, v298);
        *v483 = v298;
      }
      v301 = *(_QWORD *)(v298 + 16);
      v300 = *(_QWORD *)(v298 + 24);
      if (v301 >= v300 >> 1)
      {
        v298 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v300 > 1, v301 + 1, 1, v298);
        *v483 = v298;
      }
      *(_QWORD *)(v298 + 16) = v301 + 1;
      outlined init with take of CompileSession.ImportSessionData((uint64_t)v481, v298+ ((*(unsigned __int8 *)(v502 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v502 + 80))+ *(_QWORD *)(v502 + 72) * v301, type metadata accessor for CompileSession.ImportSessionData);
      swift_release();
      v171 = v471;
      v471(v487, v53);
      v183 = v486;
      v54 = v506;
      v14 = (uint64_t)v516;
    }
    while (v486 != v453);
    v302 = inited;
    swift_setDeallocating();

    swift_bridgeObjectRelease();
    swift_release();
LABEL_93:
    v80 = v512;
    v171(v512, v53);
LABEL_27:
    v79 = v511 + 1;
    v78 = v500;
    v77 = v501;
    if (v511 + 1 == v498)
    {
      v497(v500, 1, 1, v53);
      goto LABEL_198;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v53 = v508;
  v116 = v472;
LABEL_77:
  v127 = v477;
  v128 = v512;
  v503(v477, v512, v53);
  v129 = type metadata accessor for Entity();
  v130 = specialized ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:)(v127, 0, 0, v129);
  if (v130)
  {
    v131 = (unint64_t)v130;
    RIOPxrUsdStageSetIncludeUnusedMaterials();
    v132 = v459;
    specialized Collection.first.getter(*v473, v459);
    v134 = v479;
    v133 = v480;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v479 + 48))(v132, 1, v480) == 1)
    {
      v135 = v458;
      CompileSession.DeploymentTarget_Default.getter(v458);
      outlined destroy of Any?(v132, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    }
    else
    {
      v135 = v458;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 32))(v458, v132, v133);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v134 + 56))(v135, 0, 1, v133);
    v136 = v131 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
    swift_beginAccess();
    outlined assign with take of (URL, __REAsset)(v135, v136, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_endAccess();
    v138 = *(_QWORD **)v475;
    v137 = *(_QWORD *)(v475 + 8);
    swift_bridgeObjectRetain();
    v139 = URL.path.getter();
    v141 = v140;
    *(_QWORD *)&v533 = v139;
    *((_QWORD *)&v533 + 1) = v140;
    v531 = v138;
    v532 = v137;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    if ((BidirectionalCollection<>.starts<A>(with:)() & 1) != 0)
    {
      *(_QWORD *)&v533 = v139;
      *((_QWORD *)&v533 + 1) = v141;
      v531 = v138;
      v532 = v137;
      v142 = type metadata accessor for Locale();
      v143 = (uint64_t)v462;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 56))(v462, 1, 1, v142);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      v145 = v144;
      v147 = v146;
      outlined destroy of Any?(v143, &demangling cache variable for type metadata for Locale?);
      if ((v147 & 1) != 0)
        v148 = 15;
      else
        v148 = v145;
      swift_bridgeObjectRetain();
      v149 = specialized Collection.subscript.getter(v148, v139, v141);
      v151 = v150;
      v153 = v152;
      v155 = v154;
      swift_bridgeObjectRelease();
      v156 = MEMORY[0x22E2F52FC](v149, v151, v153, v155);
      v158 = v157;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v139 = v156;
      swift_bridgeObjectRelease();
      v141 = v158;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v159 = v476;
    v160 = v469;
    v161 = v508;
    v162 = (void (*)(char *, uint64_t, uint64_t *))v503;
    v503((char *)v469 + *(int *)(v476 + 28), v482, v508);
    v162((char *)v160 + *(int *)(v159 + 32), v512, v161);
    *v160 = v131;
    v160[1] = v139;
    v160[2] = v141;
    v160[3] = MEMORY[0x24BEE4AF8];
    v163 = v483;
    v164 = *v483;
    swift_retain();
    v165 = swift_isUniquelyReferenced_nonNull_native();
    *v163 = v164;
    if ((v165 & 1) == 0)
    {
      v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v164 + 16) + 1, 1, v164);
      *v483 = v164;
    }
    v167 = *(_QWORD *)(v164 + 16);
    v166 = *(_QWORD *)(v164 + 24);
    v53 = v508;
    if (v167 >= v166 >> 1)
    {
      v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v166 > 1, v167 + 1, 1, v164);
      *v483 = v164;
    }
    *(_QWORD *)(v164 + 16) = v167 + 1;
    outlined init with take of CompileSession.ImportSessionData((uint64_t)v469, v164+ ((*(unsigned __int8 *)(v502 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v502 + 80))+ *(_QWORD *)(v502 + 72) * v167, type metadata accessor for CompileSession.ImportSessionData);
    swift_beginAccess();
    RIOImportSessionUpdateSynchronouslyOnEngineQueue();
    v168 = CompileSession.postOperationsAndExtraAssets(for:with:)(v131, v512);
    IsValid = (uint64_t)v484;
    v169 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v533 = *(_QWORD *)IsValid;
    *(_QWORD *)IsValid = 0x8000000000000000;
    v170 = v518;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v168, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v169, (uint64_t)&v533);
    v518 = v170;
    if (!v170)
    {
      *(_QWORD *)IsValid = v533;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
      v54 = v506;
      v171 = *(void (**)(uint64_t, uint64_t *))(v506 + 8);
      v14 = (uint64_t)v516;
      goto LABEL_93;
    }
    goto LABEL_306;
  }
  swift_bridgeObjectRelease();
  v426 = URL.path.getter();
  v428 = v427;
  lazy protocol witness table accessor for type CompileSession.LoadError and conformance CompileSession.LoadError();
  v429 = swift_allocError();
  *(_QWORD *)v430 = v426;
  *(_QWORD *)(v430 + 8) = v428;
  *(_BYTE *)(v430 + 16) = 0;
  v518 = v429;
  swift_willThrow();
  v431 = inited;
  swift_setDeallocating();

  swift_release();
  v432 = *(uint64_t (**)(uint64_t, uint64_t *))(v506 + 8);
  v433 = v128;
LABEL_289:
  result = v432(v433, v53);
LABEL_284:
  *v461 = v518;
  return result;
}

uint64_t CompileSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC9RealityIO14CompileSession_exportOptions;
  v2 = type metadata accessor for __REAssetBundle.ExportOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC9RealityIO14CompileSession____lazy_storage___DeploymentTarget_Default, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CompileSession.__deallocating_deinit()
{
  CompileSession.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_23;
  v10 = v7;
  v11 = v8;
  v57 = v9;
  v12 = (_QWORD *)*a5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v27 = (uint64_t *)(v21[6] + 16 * v14);
    *v27 = v10;
    v27[1] = v11;
    *(_QWORD *)(v21[7] + 8 * v14) = v57;
    v28 = v21[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v30;
LABEL_13:
    v31 = specialized LazyMapSequence.Iterator.next()();
    if (v32)
    {
      v34 = v31;
      v35 = v32;
      v36 = v33;
      do
      {
        v44 = (_QWORD *)*a5;
        v45 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        v47 = v44[2];
        v48 = (v46 & 1) == 0;
        v29 = __OFADD__(v47, v48);
        v49 = v47 + v48;
        if (v29)
          goto LABEL_24;
        v50 = v46;
        if (v44[3] < v49)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, 1);
          v45 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
          if ((v50 & 1) != (v51 & 1))
            goto LABEL_26;
        }
        v52 = (_QWORD *)*a5;
        if ((v50 & 1) != 0)
        {
          v37 = 8 * v45;
          v38 = *(_QWORD *)(v52[7] + 8 * v45);
          swift_bridgeObjectRetain();
          specialized Set.union<A>(_:)(v36, v38);
          v40 = v39;
          swift_bridgeObjectRelease();
          v41 = v52[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v41 + v37) = v40;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          v53 = (uint64_t *)(v52[6] + 16 * v45);
          *v53 = v34;
          v53[1] = v35;
          *(_QWORD *)(v52[7] + 8 * v45) = v36;
          v54 = v52[2];
          v29 = __OFADD__(v54, 1);
          v55 = v54 + 1;
          if (v29)
            goto LABEL_25;
          v52[2] = v55;
        }
        v34 = specialized LazyMapSequence.Iterator.next()();
        v35 = v42;
        v36 = v43;
      }
      while (v42);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v22 = 8 * v14;
    v23 = *(_QWORD *)(v21[7] + 8 * v14);
    swift_bridgeObjectRetain();
    specialized Set.union<A>(_:)(v57, v23);
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = v21[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v26 + v22) = v25;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int i;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t result;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  v59 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (uint64_t)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v50 = (uint64_t)v49 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v49 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset))?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (_QWORD *)((char *)v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = -1 << *(_BYTE *)(a1 + 32);
  v21 = ~v20;
  v22 = *(_QWORD *)(a1 + 64);
  v23 = -v20;
  v52 = a1;
  v53 = a1 + 64;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v54 = v21;
  v55 = 0;
  v56 = v24 & v22;
  v57 = a2;
  v58 = a3;
  v49[1] = a1;
  swift_bridgeObjectRetain();
  v49[0] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
  for (i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v19, 1, v25);
        ;
        i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v19, 1, v25))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Set<PropertyDirtyState>.Iterator._Variant();
      return swift_release();
    }
    v32 = *v19;
    v31 = v19[1];
    v33 = (uint64_t)v16;
    outlined init with take of (URL, __REAsset)((uint64_t)v19 + *(int *)(v25 + 48), (uint64_t)v16, &demangling cache variable for type metadata for (URL, __REAsset));
    v34 = *(_QWORD **)a5;
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
    v37 = v34[2];
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      break;
    v40 = v35;
    if (v34[3] >= v39)
    {
      if ((a4 & 1) != 0)
      {
        v43 = *(_QWORD **)a5;
        if ((v35 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v43 = *(_QWORD **)a5;
        if ((v40 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, a4 & 1);
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_22;
      v36 = v41;
      v43 = *(_QWORD **)a5;
      if ((v40 & 1) != 0)
      {
LABEL_5:
        v27 = v43[7];
        v28 = *(_QWORD *)(v59 + 72) * v36;
        v29 = v51;
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v27 + v28, v51, &demangling cache variable for type metadata for (URL, __REAsset));
        v30 = v50;
        outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v29, v50, &demangling cache variable for type metadata for (URL, __REAsset));
        outlined destroy of Any?(v29, &demangling cache variable for type metadata for (URL, __REAsset));
        v16 = (char *)v33;
        outlined destroy of Any?(v33, &demangling cache variable for type metadata for (URL, __REAsset));
        swift_bridgeObjectRelease();
        outlined assign with take of (URL, __REAsset)(v30, *(_QWORD *)(*(_QWORD *)a5 + 56) + v28, &demangling cache variable for type metadata for (URL, __REAsset));
        goto LABEL_6;
      }
    }
    v43[(v36 >> 6) + 8] |= 1 << v36;
    v44 = (uint64_t *)(v43[6] + 16 * v36);
    *v44 = v32;
    v44[1] = v31;
    v16 = (char *)v33;
    outlined init with take of (URL, __REAsset)(v33, v43[7] + *(_QWORD *)(v59 + 72) * v36, &demangling cache variable for type metadata for (URL, __REAsset));
    v45 = v43[2];
    v46 = __OFADD__(v45, 1);
    v47 = v45 + 1;
    if (v46)
      goto LABEL_21;
    v43[2] = v47;
LABEL_6:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for UUID();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
        return outlined assign with take of (URL, __REAsset)(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, &demangling cache variable for type metadata for (URL, __REAsset));
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];
        v17 = type metadata accessor for __RKEntityInteractionSpecification();
        return (id)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v9, a1, v17);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v13 & 1) == (v20 & 1))
    {
      v9 = v19;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_release();
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for RIOPxrSdfLayerRef(0);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  char v25;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= result && (a7 & 1) != 0)
    {
LABEL_7:
      v23 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = (uint64_t *)(v23[7] + 32 * v17);
        *v24 = a1;
        v24[1] = a2;
        v24[2] = a3;
        v24[3] = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= result && (a7 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a7 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
    if ((v21 & 1) == (v25 & 1))
    {
      v17 = result;
      v23 = *v8;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v17, a5, a6, a1, a2, a3, a4, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v9 = v6;
  v14 = *v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v28 = v22[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v22[2] = v30;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  a6();
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3, void (*a4)(void), void (*a5)(void))
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v8 = v5;
  v11 = *v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= v16 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    a4();
LABEL_7:
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = (id)swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v24 = 8 * v13;
    *(_QWORD *)(v19[6] + v24) = a2;
    *(_QWORD *)(v19[7] + v24) = a1;
    v25 = v19[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v19[2] = v27;
      return a2;
    }
    goto LABEL_14;
  }
  a5();
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) == (v23 & 1))
  {
    v13 = v22;
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset));
  result = outlined init with take of (URL, __REAsset)(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, &demangling cache variable for type metadata for (URL, __REAsset));
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for __RKEntityInteractionSpecification();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)))
              + 48);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
  v7 = *a1;
  v6 = a1[1];
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v4, (uint64_t)a2 + *(int *)(v5 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
  *a2 = v7;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  __n128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v40 - v11);
  v15 = *v1;
  v14 = v1[1];
  v17 = v1[2];
  v16 = v1[3];
  v18 = v16;
  v19 = v1[4];
  v41 = v6;
  v47 = v17;
  if (v19)
  {
    v45 = a1;
    v46 = v16;
    v42 = v14;
    v43 = v4;
    v44 = v9;
    v20 = v3;
    v21 = (v19 - 1) & v19;
    v22 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    v23 = *(_QWORD *)(v15 + 56);
    v24 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v22);
    v25 = v15;
    v27 = *v24;
    v26 = v24[1];
    v28 = v23
        + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, __REAsset))
                                - 8)
                    + 72)
        * v22;
    v3 = v20;
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v28, (uint64_t)v13 + *(int *)(v20 + 48), &demangling cache variable for type metadata for (URL, __REAsset));
    *v13 = v27;
    v13[1] = v26;
    v15 = v25;
    v4 = v43;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v13, 0, 1, v20);
    swift_bridgeObjectRetain();
    v9 = v44;
    a1 = v45;
    v14 = v42;
    goto LABEL_25;
  }
  v29 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_23:
    v18 = v11;
    goto LABEL_24;
  }
  v30 = (unint64_t)(v17 + 64) >> 6;
  if (v29 < v30)
  {
    v31 = *(_QWORD *)(v14 + 8 * v29);
    if (v31)
    {
LABEL_7:
      v42 = v14;
      v43 = v4;
      v44 = v9;
      v45 = a1;
      v20 = v3;
      v21 = (v31 - 1) & v31;
      v22 = __clz(__rbit64(v31)) + (v29 << 6);
      v46 = v29;
      goto LABEL_3;
    }
    v32 = v16 + 2;
    v18 = v16 + 1;
    if (v16 + 2 < v30)
    {
      v31 = *(_QWORD *)(v14 + 8 * v32);
      if (v31)
      {
LABEL_10:
        v29 = v32;
        goto LABEL_7;
      }
      v18 = v16 + 2;
      if (v16 + 3 < v30)
      {
        v31 = *(_QWORD *)(v14 + 8 * (v16 + 3));
        if (v31)
        {
          v29 = v16 + 3;
          goto LABEL_7;
        }
        v32 = v16 + 4;
        v18 = v16 + 3;
        if (v16 + 4 < v30)
        {
          v31 = *(_QWORD *)(v14 + 8 * v32);
          if (v31)
            goto LABEL_10;
          v29 = v16 + 5;
          v18 = v16 + 4;
          if (v16 + 5 < v30)
          {
            v31 = *(_QWORD *)(v14 + 8 * v29);
            if (v31)
              goto LABEL_7;
            v11 = v30 - 1;
            v33 = v16 + 6;
            while (v30 != v33)
            {
              v31 = *(_QWORD *)(v14 + 8 * v33++);
              if (v31)
              {
                v29 = v33 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v46 = v18;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v13, 1, 1, v3, v12);
  v21 = 0;
LABEL_25:
  *v1 = v15;
  v1[1] = v14;
  v34 = v46;
  v1[2] = v47;
  v1[3] = v34;
  v1[4] = v21;
  v35 = (void (*)(uint64_t))v1[5];
  outlined init with take of (URL, __REAsset)((uint64_t)v13, (uint64_t)v9, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset))?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 1, 1, v36);
  }
  else
  {
    v38 = (uint64_t)v41;
    outlined init with take of (URL, __REAsset)((uint64_t)v9, (uint64_t)v41, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
    v35(v38);
    outlined destroy of Any?(v38, &demangling cache variable for type metadata for (key: String, value: (URL, __REAsset)));
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (URL, __REAsset)));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a1, 0, 1, v39);
  }
}

uint64_t specialized static CompileSession.findRKAssets(sourcePath:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::Bool v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  Swift::String v16;
  Swift::Bool v17;
  uint64_t v18;
  _QWORD v20[4];

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v20 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)v20 - v8, a1, v2, v7);
  URL.lastPathComponent.getter();
  v10._countAndFlagsBits = 0x7374657373616B72;
  v10._object = (void *)0xE800000000000000;
  v11 = String.hasSuffix(_:)(v10);
  swift_bridgeObjectRelease();
  if (!v11)
  {
    while (1)
    {
      v20[2] = URL.path.getter();
      v20[3] = v12;
      v20[0] = 0x7374657373616B72;
      v20[1] = 0xE800000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v13 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        break;
      URL.deletingLastPathComponent()();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v9, v5, v2);
      if (!URL.lastPathComponent.getter() && v14 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        break;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        URL.lastPathComponent.getter();
        v16._countAndFlagsBits = 0x7374657373616B72;
        v16._object = (void *)0xE800000000000000;
        v17 = String.hasSuffix(_:)(v16);
        swift_bridgeObjectRelease();
        if (!v17)
          continue;
      }
      break;
    }
  }
  v18 = URL.path.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  return v18;
}

uint64_t type metadata accessor for CompileSession(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CompileSession);
}

uint64_t ObjC metadata update function for CompileSession()
{
  return type metadata accessor for CompileSession(0);
}

void type metadata completion function for CompileSession()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for __REAssetBundle.ExportOptions();
  if (v0 <= 0x3F)
  {
    type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for CompileSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CompileSession.__allocating_init(sourcePaths:exportOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of CompileSession.__allocating_init(basePath:sourcePaths:exportOptions:compilationOptions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t dispatch thunk of CompileSession.compileSync(outputPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

void type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?)
  {
    type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  }
}

uint64_t outlined assign with take of (URL, __REAsset)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t specialized static CompileSession.cartesianProduct(of:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  v3 = a1 + 32;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v4 = Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
    return v4;
  v7 = 1;
  v21 = v2;
  v22 = v3;
  while (1)
  {
    v8 = *(_QWORD *)(v3 + 8 * v7);
    v26 = *(_QWORD *)(v8 + 16);
    if (v26)
      break;
    v5 = (_QWORD *)v4;
LABEL_8:
    if (++v7 == v2)
      return (uint64_t)v5;
  }
  v23 = v7;
  v9 = *(_QWORD *)(v4 + 16);
  v24 = v8 + 32;
  result = swift_bridgeObjectRetain_n();
  v10 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v25 = v8;
  while (v10 < *(_QWORD *)(v8 + 16))
  {
    if (v9)
    {
      v11 = (uint64_t *)(v24 + 16 * v10);
      v12 = *v11;
      v13 = v11[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      for (i = 0; i != v9; ++i)
      {
        v15 = *(_QWORD **)(v4 + 8 * i + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        v17 = v15[2];
        v16 = v15[3];
        if (v17 >= v16 >> 1)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
        v15[2] = v17 + 1;
        v18 = &v15[2 * v17];
        v18[4] = v12;
        v18[5] = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v20 = v5[2];
        v19 = v5[3];
        if (v20 >= v19 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v5);
        v5[2] = v20 + 1;
        v5[v20 + 4] = v15;
      }
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v8 = v25;
    }
    if (++v10 == v26)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 = (uint64_t)v5;
      v2 = v21;
      v3 = v22;
      v7 = v23;
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized CompileSession.handleLoad(of:with:assetLoadRequest:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Class isa;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  _BYTE v34[4];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v41 = a4;
  v37 = a3;
  v40 = a2;
  v36 = type metadata accessor for __AssetRef();
  v38 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  __swift_project_boxed_opaque_existential_1(&v46, v48);
  v39 = dispatch thunk of __REAssetService.__handle.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
  v11 = a1 + *(int *)(type metadata accessor for CompileSession.ImportSessionData(0) + 28);
  v43 = v8;
  v44 = v7;
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v45 = v10;
  v12(v10, v11, v7);
  String.utf8CString.getter();
  RESceneCreate();
  swift_release();
  Entity.coreEntity.getter();
  RESceneAddEntity();
  type metadata accessor for Scene();
  static Scene.fromCore(_:)();
  v13 = v42;
  v14 = dispatch thunk of Scene.containsChangeSceneActions()();
  if (v13)
  {
    swift_release();
LABEL_3:
    (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v45, v44);
    return v14 & 1;
  }
  v15 = v6;
  v42 = a1;
  v16 = v38;
  swift_release();
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v46 = 0x523A79726F6D656DLL;
  v47 = 0xEB00000000746F6FLL;
  v49 = v40;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x656E65637365722ELL;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v19 = REAssetManagerSceneAssetCreate();
  swift_release();
  if (!v19)
  {
    v28 = type metadata accessor for __RealityFileError();
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError, (uint64_t (*)(uint64_t))MEMORY[0x24BDE5F60], MEMORY[0x24BDE5F68]);
    swift_allocError();
    v30 = v29;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v31._object = (void *)0x800000022BD08840;
    v31._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v31);
    v32._countAndFlagsBits = URL.absoluteString.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33 = v47;
    *v30 = v46;
    v30[1] = v33;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x24BDE5F58], v28);
    swift_willThrow();
    goto LABEL_3;
  }
  v48 = MEMORY[0x24BEE27D0];
  v46 = v19;
  static __AssetRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
  __AssetLoadRequest.add(asset:)();
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v15, v36);
  v20 = REAssetWithMetadataCreate();
  String.utf8CString.getter();
  REAssetWithMetadataSetLabel();
  swift_release();
  v21 = *v41;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  v23 = v42;
  v25 = v21[2];
  v24 = v21[3];
  if (v25 >= v24 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v21);
  v21[2] = v25 + 1;
  v21[v25 + 4] = v20;
  *v41 = v21;
  if (*(_QWORD *)(*(_QWORD *)(v23 + 24) + 16))
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    REAssetWithMetadataSetConfigurationNames();

  }
  RERelease();
  RERelease();
  (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v45, v44);
  LOBYTE(v14) = v35;
  return v14 & 1;
}

uint64_t type metadata accessor for CompileSession.ImportSessionData(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for CompileSession.ImportSessionData);
}

uint64_t type metadata accessor for CompileSession(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *specialized ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:)(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  NSURL *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void (*v19)(char *, uint64_t);
  _DWORD v21[4];
  uint64_t v22;

  v22 = a4;
  v21[3] = a3;
  v5 = type metadata accessor for __EngineRef();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v13, a1, v9, v11);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  dispatch thunk of __Engine.__coreEngine.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((specialized static USDImportService.canLoad(url:)() & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v14);
    v16 = v15;
    v17 = (void *)RIOImportSessionCreateWithURL();

    type metadata accessor for ImportSession(0);
    swift_allocObject();
    v18 = specialized ImportSession.init<A>(core:entityType:)(v17, v22);
    v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    swift_retain();
    v19(v13, v9);
    if (v18)
      swift_release();
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    v19(v13, v9);
    v18 = 0;
  }
  v19(a1, v9);
  return v18;
}

unint64_t lazy protocol witness table accessor for type CompileSession.LoadError and conformance CompileSession.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompileSession.LoadError and conformance CompileSession.LoadError;
  if (!lazy protocol witness table cache variable for type CompileSession.LoadError and conformance CompileSession.LoadError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for CompileSession.LoadError, &unk_24F637D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompileSession.LoadError and conformance CompileSession.LoadError);
  }
  return result;
}

uint64_t outlined init with take of (URL, __REAsset)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CompileSession.ImportSessionData(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined copy of CompileSession.LoadError()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for CompileSession.LoadError()
{
  return outlined consume of CompileSession.LoadError();
}

uint64_t outlined consume of CompileSession.LoadError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for CompileSession.LoadError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of CompileSession.LoadError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CompileSession.LoadError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of CompileSession.LoadError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CompileSession.LoadError();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CompileSession.LoadError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CompileSession.LoadError();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompileSession.LoadError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompileSession.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CompileSession.LoadError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for CompileSession.LoadError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

void *type metadata accessor for CompileSession.LoadError()
{
  return &unk_24F637D20;
}

char *initializeBufferWithCopyOfBuffer for CompileSession.ImportSessionData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (char *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = (char *)a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    a1[3] = a2[3];
    v9 = *(int *)(a3 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v13(&v7[*(int *)(a3 + 32)], (char *)a2 + *(int *)(a3 + 32), v12);
  }
  return v7;
}

uint64_t destroy for CompileSession.ImportSessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for URL();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 32), v5);
}

char *initializeWithCopy for CompileSession.ImportSessionData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for URL();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 32)], &a2[*(int *)(a3 + 32)], v11);
  return a1;
}

char *assignWithCopy for CompileSession.ImportSessionData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 32)], &a2[*(int *)(a3 + 32)], v9);
  return a1;
}

uint64_t initializeWithTake for CompileSession.ImportSessionData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32), v9);
  return a1;
}

char *assignWithTake for CompileSession.ImportSessionData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a1 + 2) = v6;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for URL();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(&a1[*(int *)(a3 + 32)], &a2[*(int *)(a3 + 32)], v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompileSession.ImportSessionData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22BC669E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CompileSession.ImportSessionData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22BC66A68(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CompileSession.ImportSessionData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #1 in closure #1 in EntityAnchoringBuilder.stageSubscription.getter()
{
  id v0;
  void *v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  _QWORD *v13;
  id v14;
  id v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v19;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  type metadata accessor for NamedPropertyDirtyState();
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = v1;
  v3 = v1;
  v4 = MEMORY[0x24BEE4B08];
  v5 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v3, MEMORY[0x24BEE4B08]);

  v2[2] = v4;
  v2[3] = v5;
  swift_retain();
  if (String.count.getter() < 1)
    v6 = (id)RIOPxrTfTokenEmpty();
  else
    v6 = (id)RIOPxrTfTokenCreateWithCString();
  v7 = v6;
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = v7;
  v9 = v7;
  v10 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v9, v4);

  v8[2] = v4;
  v8[3] = v10;
  swift_retain();
  if (String.count.getter() < 1)
    v11 = (id)RIOPxrTfTokenEmpty();
  else
    v11 = (id)RIOPxrTfTokenCreateWithCString();
  v12 = v11;
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = v12;
  v14 = v12;
  v15 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v14, v4);

  v13[2] = v4;
  v13[3] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5B0;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 48) = v13;
  v19 = inited;
  specialized Array._endMutation()();
  v17 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v19);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v17;
}

uint64_t type metadata accessor for EntityAnchoringBuilder()
{
  return objc_opt_self();
}

uint64_t specialized EntityAnchoringBuilder.stageSubscription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;

  v0 = closure #1 in closure #1 in EntityAnchoringBuilder.stageSubscription.getter();
  type metadata accessor for PrimDirtyState();
  swift_allocObject();
  v1 = MEMORY[0x24BEE4B08];
  v2 = PrimDirtyState.init(primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(MEMORY[0x24BEE4B08], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v2;
  v9 = inited;
  specialized Array._endMutation()();
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(v1, v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v10 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v10);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Array.append(_:)(uint64_t a1, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = a2(0, *(_QWORD *)(v5 + 16) + 1, 1, v5);
    v5 = result;
  }
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    result = a2(v7 > 1, v8 + 1, 1, v5);
    v5 = result;
  }
  *(_QWORD *)(v5 + 16) = v8 + 1;
  *(_QWORD *)(v5 + 8 * v8 + 32) = a1;
  *v2 = v5;
  return result;
}

char *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  char Int32;
  unint64_t v9;
  unint64_t v10;

  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = (char *)MEMORY[0x24BEE4AF8];
    for (i = 4; ; ++i)
    {
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](i - 4, a1) : *(id *)(a1 + 8 * i);
      v6 = v5;
      v7 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      Int32 = RIOPxrVtValueGetInt32();

      if ((Int32 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v10 = *((_QWORD *)v3 + 2);
        v9 = *((_QWORD *)v3 + 3);
        if (v10 >= v9 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v10 + 1;
        *(_DWORD *)&v3[4 * v10 + 32] = 0;
      }
      if (v7 == v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)MEMORY[0x24BEE4AF8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D10VyAIGXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  char *v2;
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (char *)MEMORY[0x24BEE4AF8];
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v18 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v5 = v18;
  v6 = (_QWORD *)(a1 + 32);
  do
  {
    *(_QWORD *)&v4 = *v6;
    v17 = v4;
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v2);
    v9 = *((_QWORD *)v7 + 2);
    v8 = *((_QWORD *)v7 + 3);
    v10 = v8 >> 1;
    v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7);
      v8 = *((_QWORD *)v7 + 3);
      v10 = v8 >> 1;
    }
    *((_QWORD *)v7 + 2) = v11;
    v4 = v17;
    *(_DWORD *)&v7[4 * v9 + 32] = v17;
    v12 = v9 + 2;
    if (v10 < v12)
    {
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v12, 1, v7);
      v4 = v17;
      v7 = v15;
    }
    *((_QWORD *)v7 + 2) = v12;
    *(_DWORD *)&v7[4 * v11 + 32] = DWORD1(v4);
    v14 = *(_QWORD *)(v18 + 16);
    v13 = *(_QWORD *)(v18 + 24);
    if (v14 >= v13 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v18 + 16) = v14 + 1;
    *(_QWORD *)(v18 + 8 * v14 + 32) = v7;
    ++v6;
    --v1;
  }
  while (v1);
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D11VyAIGXEfU0_Tf1cn_nTm(__n128 *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __n128))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v3 = a1[1].n128_i64[0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v13 = MEMORY[0x24BEE4AF8];
    v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v13;
    v8 = a1 + 2;
    do
    {
      v7 = a3(v7, *v8);
      v9 = v7;
      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
      ++v8;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU2_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  char *v2;
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (char *)MEMORY[0x24BEE4AF8];
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v18 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v5 = v18;
  v6 = (_QWORD *)(a1 + 32);
  do
  {
    *(_QWORD *)&v4 = *v6;
    v17 = v4;
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v2);
    v9 = *((_QWORD *)v7 + 2);
    v8 = *((_QWORD *)v7 + 3);
    v10 = v8 >> 1;
    v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7);
      v8 = *((_QWORD *)v7 + 3);
      v10 = v8 >> 1;
    }
    *((_QWORD *)v7 + 2) = v11;
    v4 = v17;
    *(_DWORD *)&v7[4 * v9 + 32] = v17;
    v12 = v9 + 2;
    if (v10 < v12)
    {
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v12, 1, v7);
      v4 = v17;
      v7 = v15;
    }
    *((_QWORD *)v7 + 2) = v12;
    *(_DWORD *)&v7[4 * v11 + 32] = DWORD1(v4);
    v14 = *(_QWORD *)(v18 + 16);
    v13 = *(_QWORD *)(v18 + 24);
    if (v14 >= v13 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v18 + 16) = v14 + 1;
    *(_QWORD *)(v18 + 8 * v14 + 32) = v7;
    ++v6;
    --v1;
  }
  while (v1);
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU3_Tf1cn_nTm(__n128 *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __n128))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v3 = a1[1].n128_i64[0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v13 = MEMORY[0x24BEE4AF8];
    v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v13;
    v8 = a1 + 2;
    do
    {
      v7 = a3(v7, *v8);
      v9 = v7;
      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
      ++v8;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU5_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  __int128 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v18 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v4 = v18;
  v5 = (__int128 *)(a1 + 32);
  do
  {
    v17 = *v5;
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v2);
    v8 = v6[2];
    v7 = v6[3];
    v9 = v7 >> 1;
    v10 = v8 + 1;
    if (v7 >> 1 <= v8)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
      v7 = v6[3];
      v9 = v7 >> 1;
    }
    v6[2] = v10;
    v11 = *((_QWORD *)&v17 + 1);
    v6[v8 + 4] = v17;
    v12 = v8 + 2;
    if (v9 < v12)
    {
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v12, 1, v6);
      v11 = *((_QWORD *)&v17 + 1);
      v6 = v15;
    }
    v6[2] = v12;
    v6[v10 + 4] = v11;
    v14 = *(_QWORD *)(v18 + 16);
    v13 = *(_QWORD *)(v18 + 24);
    if (v14 >= v13 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v18 + 16) = v14 + 1;
    *(_QWORD *)(v18 + 8 * v14 + 32) = v6;
    ++v5;
    --v1;
  }
  while (v1);
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU6_Tf1cn_nTm(__n128 *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __n128, __n128))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v3 = a1[1].n128_i64[0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v13 = MEMORY[0x24BEE4AF8];
    v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v13;
    v8 = a1 + 2;
    do
    {
      v7 = a3(v7, *v8, v8[1]);
      v9 = v7;
      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
      v8 += 2;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_SSs5NeverOTg503_s9d63IO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSSAA16fg2O5H7VXEfU8_Tf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v3;
  uint64_t v4;
  id *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v17;
    v7 = (id *)(a1 + 32);
    do
    {
      v8 = *v7;
      v9 = (void *)a3();
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v11;

      v14 = *(_QWORD *)(v17 + 16);
      v13 = *(_QWORD *)(v17 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v17 + 16) = v14 + 1;
      v15 = v17 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v10;
      *(_QWORD *)(v15 + 40) = v12;
      ++v7;
      --v3;
    }
    while (v3);
  }
  return v4;
}

char *specialized SIMD.asScalarArray()(double a1)
{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  int v6;
  int64_t v7;
  char *v9;

  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    v2 = *((_QWORD *)v1 + 3);
    v4 = v2 >> 1;
  }
  *((_QWORD *)v1 + 2) = v5;
  v6 = HIDWORD(a1);
  *(_DWORD *)&v1[4 * v3 + 32] = LODWORD(a1);
  v7 = v3 + 2;
  if (v4 < v7)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v7, 1, v1);
    v6 = HIDWORD(a1);
    v1 = v9;
  }
  *((_QWORD *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6;
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  int v6;
  int64_t v7;
  char *v9;

  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    v2 = *((_QWORD *)v1 + 3);
    v4 = v2 >> 1;
  }
  *((_QWORD *)v1 + 2) = v5;
  v6 = HIDWORD(a1);
  *(_DWORD *)&v1[4 * v3 + 32] = LODWORD(a1);
  v7 = v3 + 2;
  if (v4 < v7)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v7, 1, v1);
    v6 = HIDWORD(a1);
    v1 = v9;
  }
  *((_QWORD *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6;
  return v1;
}

char *specialized SIMD.asScalarArray()(__n128 a1)
{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;

  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    v2 = *((_QWORD *)v1 + 3);
    v4 = v2 >> 1;
  }
  *((_QWORD *)v1 + 2) = v5;
  v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    v6 = a1;
    v1 = v10;
  }
  *((_QWORD *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  v8 = *((_QWORD *)v1 + 3);
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u32[2] = a1.n128_u32[2];
    v1 = v11;
  }
  *((_QWORD *)v1 + 2) = v3 + 3;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  char *v13;
  char *v14;

  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    v2 = *((_QWORD *)v1 + 3);
    v4 = v2 >> 1;
  }
  *((_QWORD *)v1 + 2) = v5;
  v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    v6 = a1;
    v1 = v12;
  }
  *((_QWORD *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  v8 = *((_QWORD *)v1 + 3);
  v9 = v3 + 3;
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u64[1] = a1.n128_u64[1];
    v1 = v13;
  }
  *((_QWORD *)v1 + 2) = v9;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  v10 = *((_QWORD *)v1 + 3);
  if ((uint64_t)(v3 + 4) > (uint64_t)(v10 >> 1))
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v3 + 4, 1, v1);
    v6.n128_u32[3] = a1.n128_u32[3];
    v1 = v14;
  }
  *((_QWORD *)v1 + 2) = v3 + 4;
  *(_DWORD *)&v1[4 * v9 + 32] = v6.n128_u32[3];
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;

  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    v2 = *((_QWORD *)v1 + 3);
    v4 = v2 >> 1;
  }
  *((_QWORD *)v1 + 2) = v5;
  v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    v6 = a1;
    v1 = v10;
  }
  *((_QWORD *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  v8 = *((_QWORD *)v1 + 3);
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u32[2] = a1.n128_u32[2];
    v1 = v11;
  }
  *((_QWORD *)v1 + 2) = v3 + 3;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  return v1;
}

{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  char *v13;
  char *v14;

  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v1);
    v2 = *((_QWORD *)v1 + 3);
    v4 = v2 >> 1;
  }
  *((_QWORD *)v1 + 2) = v5;
  v6 = a1;
  *(_DWORD *)&v1[4 * v3 + 32] = a1.n128_u32[0];
  v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1, v1);
    v6 = a1;
    v1 = v12;
  }
  *((_QWORD *)v1 + 2) = v7;
  *(_DWORD *)&v1[4 * v5 + 32] = v6.n128_u32[1];
  v8 = *((_QWORD *)v1 + 3);
  v9 = v3 + 3;
  if ((uint64_t)(v3 + 3) > (uint64_t)(v8 >> 1))
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v3 + 3, 1, v1);
    v6.n128_u64[1] = a1.n128_u64[1];
    v1 = v13;
  }
  *((_QWORD *)v1 + 2) = v9;
  *(_DWORD *)&v1[4 * v7 + 32] = v6.n128_u32[2];
  v10 = *((_QWORD *)v1 + 3);
  if ((uint64_t)(v3 + 4) > (uint64_t)(v10 >> 1))
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v3 + 4, 1, v1);
    v6.n128_u32[3] = a1.n128_u32[3];
    v1 = v14;
  }
  *((_QWORD *)v1 + 2) = v3 + 4;
  *(_DWORD *)&v1[4 * v9 + 32] = v6.n128_u32[3];
  return v1;
}

_QWORD *specialized SIMD.asScalarArray()(__n128 a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *v9;

  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = v1[2];
  v2 = v1[3];
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
    v2 = v1[3];
    v4 = v2 >> 1;
  }
  v1[2] = v5;
  v6 = a1.n128_u64[1];
  v1[v3 + 4] = a1.n128_u64[0];
  v7 = v3 + 2;
  if (v4 < v7)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v2 > 1), v7, 1, v1);
    v6 = a1.n128_u64[1];
    v1 = v9;
  }
  v1[2] = v7;
  v1[v5 + 4] = v6;
  return v1;
}

_QWORD *specialized SIMD.asScalarArray()(__n128 a1, double a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;

  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v4 = v2[2];
  v3 = v2[3];
  v5 = v3 >> 1;
  v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v3 = v2[3];
    v5 = v3 >> 1;
  }
  v2[2] = v6;
  v7 = a1.n128_u64[1];
  v2[v4 + 4] = a1.n128_u64[0];
  v8 = v4 + 2;
  if (v5 < (uint64_t)(v4 + 2))
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 2, 1, v2);
    v7 = a1.n128_u64[1];
    v2 = v11;
  }
  v2[2] = v8;
  v2[v6 + 4] = v7;
  v9 = v2[3];
  if ((uint64_t)(v4 + 3) > (uint64_t)(v9 >> 1))
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v4 + 3, 1, v2);
  v2[2] = v4 + 3;
  *(double *)&v2[v8 + 4] = a2;
  return v2;
}

_QWORD *specialized SIMD.asScalarArray()(__n128 a1, __n128 a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v4 = v2[2];
  v3 = v2[3];
  v5 = v3 >> 1;
  v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v3 = v2[3];
    v5 = v3 >> 1;
  }
  v2[2] = v6;
  v8 = a1.n128_u64[1];
  v7 = a2;
  v2[v4 + 4] = a1.n128_u64[0];
  v9 = v4 + 2;
  if (v5 < (uint64_t)(v4 + 2))
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 2, 1, v2);
    v8 = a1.n128_u64[1];
    v7 = a2;
    v2 = v14;
  }
  v2[2] = v9;
  v2[v6 + 4] = v8;
  v10 = v2[3];
  v11 = v4 + 3;
  if ((uint64_t)(v4 + 3) > (uint64_t)(v10 >> 1))
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v4 + 3, 1, v2);
    v7 = a2;
    v2 = v15;
  }
  v2[2] = v11;
  v2[v9 + 4] = v7.n128_u64[0];
  v12 = v2[3];
  if ((uint64_t)(v4 + 4) > (uint64_t)(v12 >> 1))
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v4 + 4, 1, v2);
    v7.n128_u64[1] = a2.n128_u64[1];
    v2 = v16;
  }
  v2[2] = v4 + 4;
  v2[v11 + 4] = v7.n128_u64[1];
  return v2;
}

uint64_t componentPrimToDictionary(component:)()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *EmptyValue;
  char Bool;
  NSNumber v12;
  uint64_t isa;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  char IsNativeType;
  uint64_t i;
  id v21;
  void *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char Int32;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  void *v47;
  char Int64;
  void *v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  NSNumber v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  NSArray v66;
  uint64_t v67;
  void *v68;
  char v69;
  char v70;
  void *v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char v79;
  char v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char v85;
  char v86;
  char *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  __n128 v98;
  void *v99;
  char *v100;
  __n128 *v101;
  char *(*v102)(__n128);
  void *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  __n128 v109;
  void *v110;
  void *v111;
  uint64_t v112;
  char v113;
  char v114;
  char *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  __n128 v125;
  void *v126;
  char *v127;
  __n128 *v128;
  char *(*v129)(__n128);
  void *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char v134;
  char v135;
  __n128 v136;
  void *v137;
  void *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  char v143;
  __n128 v144;
  _QWORD *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  char *v151;
  __n128 *v152;
  uint64_t (*v153)(uint64_t, __n128, __n128);
  void *v154;
  void *v155;
  void *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  int8x8_t *v164;
  Class v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int8x16_t *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  int8x16_t *v177;
  NSArray v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int8x16_t *v183;
  uint64_t v184;
  uint64_t v185;
  int8x16_t *v186;
  uint64_t v187;
  void *v188;
  _QWORD *v189;
  _QWORD *v190;
  void *v191;
  uint64_t v192;
  uint64_t result;
  uint64_t v194;
  unint64_t v195;
  __n128 *v196;
  __n128 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  void *v206;
  _QWORD *v207;
  _QWORD *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  __n128 *v213;
  __n128 v214;
  __n128 v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  void *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  __n128 *v236;
  __n128 v237;
  __n128 v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  void *v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  char *v266;
  uint64_t v267;
  uint64_t (*v268)(void);
  void *v269;
  void *v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  __n128 v291;
  __n128 v292;
  __n128 v293;
  __n128 v294;
  __n128 v295;
  __n128 v296;
  double v297;
  __n128 v298;
  __n128 v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  __n128 v304;
  double v305;
  __n128 v306;
  __n128 v307;
  __n128 v308;
  void *v309;
  int8x16_t v310;
  __n128 v311;
  __n128 v312;
  double v313;
  __n128 v314;
  __n128 v315;
  unint64_t v316;
  int8x16_t v317;
  int8x16_t v318;
  __n128 v319;
  __n128 v320;
  double v321;
  __n128 v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  int8x16_t v327;
  int8x16_t v328;
  __n128 v329;
  __n128 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  id v334;
  char v335;
  char v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  int v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  id v348;
  _BYTE v349[48];
  _BYTE v350[48];
  _BYTE v351[48];
  _BYTE v352[48];
  _BYTE v353[112];
  _BYTE v354[144];
  __n128 v355;
  double v356;
  char v357;
  __n128 v358[2];
  char v359;
  int8x16_t v360[2];
  char v361;
  __n128 v362[2];
  char v363;
  __n128 v364;
  double v365;
  __n128 v366;
  double v367;
  __n128 v368;
  double v369;
  char v370;
  __n128 v371[8];
  uint64_t v372;

  v372 = *MEMORY[0x24BDAC8D0];
  v334 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCED8]), sel_init);
  v0 = Prim.attributes()();
  if (v0 >> 62)
    goto LABEL_282;
  v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v1)
  {
LABEL_283:
    swift_bridgeObjectRelease();
    v276 = Prim.children.getter();
    v346 = MEMORY[0x24BEE4AF8];
    if (v276 >> 62)
      goto LABEL_298;
    v277 = *(_QWORD *)((v276 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v277)
    {
      while (1)
      {
        v278 = 0;
        while ((v276 & 0xC000000000000001) != 0)
        {
          v279 = MEMORY[0x22E2F57B8](v278, v276);
          v280 = v278 + 1;
          if (__OFADD__(v278, 1))
          {
LABEL_295:
            __break(1u);
LABEL_296:
            v281 = v346;
            goto LABEL_300;
          }
LABEL_291:
          v348 = (id)v279;
          if ((closure #13 in componentPrimToDictionary(component:)() & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
          ++v278;
          if (v280 == v277)
            goto LABEL_296;
        }
        if (v278 < *(_QWORD *)((v276 & 0xFFFFFFFFFFFFFF8) + 0x10))
          break;
        __break(1u);
LABEL_298:
        v277 = _CocoaArrayWrapper.endIndex.getter();
        if (!v277)
          goto LABEL_299;
      }
      v279 = *(_QWORD *)(v276 + 8 * v278 + 32);
      swift_retain();
      v280 = v278 + 1;
      if (__OFADD__(v278, 1))
        goto LABEL_295;
      goto LABEL_291;
    }
LABEL_299:
    v281 = MEMORY[0x24BEE4AF8];
LABEL_300:
    swift_bridgeObjectRelease();
    if (v281 < 0 || (v281 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v282 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v282)
        goto LABEL_303;
    }
    else
    {
      v282 = *(_QWORD *)(v281 + 16);
      if (v282)
      {
LABEL_303:
        if (v282 < 1)
          __break(1u);
        v283 = 0;
        do
        {
          if ((v281 & 0xC000000000000001) != 0)
          {
            v284 = MEMORY[0x22E2F57B8](v283, v281);
          }
          else
          {
            v284 = *(_QWORD *)(v281 + 8 * v283 + 32);
            swift_retain();
          }
          ++v283;
          v285 = (void *)RIOPxrUsdObjectCopyName();
          v286 = (void *)RIOPxrTfTokenCopyString();
          v287 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v289 = v288;

          v290 = (void *)componentPrimToDictionary(component:)(v284);
          v346 = v287;
          v347 = v289;
          swift_bridgeObjectRetain();
          objc_msgSend(v334, sel___swift_setObject_forKeyedSubscript_, v290, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          swift_release();
        }
        while (v282 != v283);
      }
    }
    swift_release();
    return (uint64_t)v334;
  }
LABEL_3:
  v2 = 0;
  v3 = 0;
  v4 = v0 & 0xC000000000000001;
  v331 = v0 & 0xFFFFFFFFFFFFFF8;
  v324 = v1;
  v325 = v0;
  v323 = v0 & 0xC000000000000001;
  while (1)
  {
    while (1)
    {
      if (v4)
      {
        MEMORY[0x22E2F57B8](v2, v0);
        v5 = __OFADD__(v2++, 1);
        if (v5)
          goto LABEL_278;
      }
      else
      {
        if (v2 >= *(_QWORD *)(v331 + 16))
          goto LABEL_280;
        swift_retain();
        v5 = __OFADD__(v2++, 1);
        if (v5)
        {
LABEL_278:
          __break(1u);
          goto LABEL_279;
        }
      }
      v6 = (void *)RIOPxrUsdObjectCopyName();
      v7 = (void *)RIOPxrTfTokenCopyString();
      v332 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v333 = v8;

      v9 = (void *)RIOPxrUsdAttributeCopyTypeName();
      RIOPxrSdfValueTypeNameRef.type.getter();

      if (!swift_dynamicCastMetatype())
        break;
      EmptyValue = (void *)RIOPxrUsdAttributeCopyValue();
      if (!EmptyValue)
        EmptyValue = (void *)RIOPxrVtValueCreateEmptyValue();
      LOBYTE(v346) = 0;
      Bool = RIOPxrVtValueGetBool();

      if ((Bool & 1) == 0)
        goto LABEL_68;
      v12.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
LABEL_15:
      isa = (uint64_t)v12.super.super.isa;
LABEL_85:
      v346 = v332;
      v347 = v333;
      swift_bridgeObjectRetain();
      v55 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
LABEL_86:
      objc_msgSend(v334, sel___swift_setObject_forKeyedSubscript_, isa, v55, *(_OWORD *)&v291);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      if (v2 == v1)
        goto LABEL_283;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]);
    if (swift_dynamicCastMetatype())
    {
      v14 = (void *)RIOPxrUsdAttributeCopyValue();
      if (!v14)
        v14 = (void *)RIOPxrVtValueCreateEmptyValue();
      v15 = RIOPxrVtValueCopyBoolArray();
      if (!v15)
      {

        isa = 0;
        goto LABEL_85;
      }
      v16 = (void *)v15;
      v346 = 0;
      type metadata accessor for RIOPxrVtValueRef(0);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      v0 = v346;
      if (!v346)
        v0 = specialized static Array._allocateUninitialized(_:)(0);
      v346 = MEMORY[0x24BEE4AF8];
      if (v0 >> 62)
      {
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        v326 = v3;
        if (v17)
          goto LABEL_24;
      }
      else
      {
        v17 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v326 = v3;
        if (v17)
        {
LABEL_24:
          if (v17 < 1)
            goto LABEL_281;
          v18 = v2;
          IsNativeType = specialized Array._hoistableIsNativeTypeChecked()(v0);
          for (i = 0; i != v17; ++i)
          {
            if ((IsNativeType & 1) != 0)
              v21 = *(id *)(v0 + 8 * i + 32);
            else
              v21 = (id)MEMORY[0x22E2F57B8](i, v0);
            v22 = v21;
            LOBYTE(v348) = 0;
            v23 = RIOPxrVtValueGetBool();

            if ((v23 & 1) != 0)
            {
              v24 = (char)v348;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
              v25 = *(_QWORD *)(v346 + 16);
              v26 = specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
              v27 = v346;
              *(_QWORD *)(v346 + 16) = v25 + 1;
              *(_BYTE *)(v27 + v25 + 32) = v24;
              destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v26);
            }
          }
          goto LABEL_84;
        }
      }
      v18 = v2;
LABEL_84:
      swift_bridgeObjectRelease_n();

      isa = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v1 = v324;
      v0 = v325;
      v2 = v18;
      v3 = v326;
      v4 = v323;
      goto LABEL_85;
    }
    if (swift_dynamicCastMetatype())
      goto LABEL_33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    if (swift_dynamicCastMetatype())
    {
      v30 = (void *)RIOPxrUsdAttributeCopyValue();
      if (!v30)
        v30 = (void *)RIOPxrVtValueCreateEmptyValue();
      isa = RIOPxrVtValueCopyInt32Array();
      if (isa)
      {
        v346 = 0;
        type metadata accessor for RIOPxrVtValueRef(0);
        static Array._conditionallyBridgeFromObjectiveC(_:result:)();
        v0 = v346;
        v309 = (void *)isa;
        if (!v346)
          v0 = specialized static Array._allocateUninitialized(_:)(0);
        v316 = v2;
        v346 = specialized static Array._allocateUninitialized(_:)(0);
        v31 = swift_bridgeObjectRetain();
        v32 = specialized Array._getCount()(v31);
        if (v32)
        {
          v33 = v32;
          v34 = specialized Array._hoistableIsNativeTypeChecked()(v0);
          v35 = 4;
          while (1)
          {
            v36 = (v34 & 1) != 0 ? *(id *)(v0 + 8 * v35) : (id)MEMORY[0x22E2F57B8](v35 - 4, v0);
            v37 = v36;
            v38 = v35 - 3;
            if (__OFADD__(v35 - 4, 1))
              break;
            v348 = v36;
            closure #1 in closure #1 in RIOPxrVtValueRef.asInt32Array.getter((uint64_t)&v344);

            if ((v345 & 1) == 0)
            {
              v39 = v344;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
              v40 = *(_QWORD *)(v346 + 16);
              v41 = specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v40);
              v42 = v346;
              *(_QWORD *)(v346 + 16) = v40 + 1;
              *(_DWORD *)(v42 + 4 * v40 + 32) = v39;
              destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v41);
            }
            ++v35;
            if (v38 == v33)
              goto LABEL_53;
          }
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          swift_bridgeObjectRetain();
          v1 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v1)
            goto LABEL_283;
          goto LABEL_3;
        }
LABEL_53:
        swift_bridgeObjectRelease_n();

        isa = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v1 = v324;
        v0 = v325;
        v2 = v316;
        v4 = v323;
      }
      else
      {

      }
      goto LABEL_85;
    }
    if (swift_dynamicCastMetatype())
    {
LABEL_33:
      v28 = (void *)RIOPxrUsdAttributeCopyValue();
      if (!v28)
        v28 = (void *)RIOPxrVtValueCreateEmptyValue();
      LODWORD(v346) = 0;
      Int32 = RIOPxrVtValueGetInt32();

      if ((Int32 & 1) == 0)
        goto LABEL_68;
      v12.super.super.isa = Int32._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_15;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]);
    if (swift_dynamicCastMetatype())
    {
      v43 = (void *)RIOPxrUsdAttributeCopyValue();
      if (!v43)
        v43 = (void *)RIOPxrVtValueCreateEmptyValue();
      v44 = RIOPxrVtValueCopyInt32Array();
      if (v44)
      {
        v45 = (void *)v44;
        v346 = 0;
        type metadata accessor for RIOPxrVtValueRef(0);
        static Array._conditionallyBridgeFromObjectiveC(_:result:)();
        v46 = v346;
        if (!v346)
          v46 = specialized static Array._allocateUninitialized(_:)(0);
        specialized Sequence.compactMap<A>(_:)(v46);

        swift_bridgeObjectRelease();
        isa = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {

        isa = 0;
      }
      goto LABEL_85;
    }
    if (swift_dynamicCastMetatype())
    {
      v47 = (void *)RIOPxrUsdAttributeCopyValue();
      if (!v47)
        v47 = (void *)RIOPxrVtValueCreateEmptyValue();
      v346 = 0;
      Int64 = RIOPxrVtValueGetInt64();

      if ((Int64 & 1) == 0)
      {
LABEL_68:
        isa = 0;
        goto LABEL_85;
      }
      v12.super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_15;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]);
    if (swift_dynamicCastMetatype())
    {
      v49 = (void *)RIOPxrUsdAttributeCopyValue();
      if (!v49)
        v49 = (void *)RIOPxrVtValueCreateEmptyValue();
      v50 = RIOPxrVtValueRef.asInt64Array.getter();

      if (v50)
      {
LABEL_74:
        isa = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        isa = 0;
      }
LABEL_94:
      v55 = specialized _bridgeAnythingToObjectiveC<A>(_:)();
      goto LABEL_86;
    }
    if (swift_dynamicCastMetatype())
    {
      v51 = (void *)AnyAttribute.value.getter();
      v52 = RIOPxrVtValueRef.asUInt32.getter();

      if ((v52 & 0x100000000) == 0)
      {
        isa = (uint64_t)UInt32._bridgeToObjectiveC()().super.super.isa;
        goto LABEL_94;
      }
LABEL_93:
      isa = 0;
      goto LABEL_94;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt]);
    if (swift_dynamicCastMetatype())
    {
      v53 = (void *)AnyAttribute.value.getter();
      v54 = RIOPxrVtValueRef.asUInt32Array.getter();

      if (v54)
        goto LABEL_74;
      goto LABEL_93;
    }
    if (swift_dynamicCastMetatype())
    {
      v56 = (void *)AnyAttribute.value.getter();
      v57 = RIOPxrVtValueRef.asUInt8.getter();

      if ((v57 & 0x100) == 0)
      {
        isa = (uint64_t)UInt8._bridgeToObjectiveC()().super.super.isa;
        goto LABEL_94;
      }
      goto LABEL_93;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    if (swift_dynamicCastMetatype())
    {
      v58 = (void *)AnyAttribute.value.getter();
      v59 = RIOPxrVtValueRef.asUInt8Array.getter();

      if (v59)
        goto LABEL_74;
      goto LABEL_93;
    }
    if (swift_dynamicCastMetatype())
    {
      v60 = (void *)AnyAttribute.value.getter();
      v61 = RIOPxrVtValueRef.asUInt32.getter();

      if ((v61 & 0x100000000) != 0)
        v62.super.super.isa = 0;
      else
        v62.super.super.isa = UInt32._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v334, sel___swift_setObject_forKeyedSubscript_, v62.super.super.isa, specialized _bridgeAnythingToObjectiveC<A>(_:)());
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      v1 = v324;
      v0 = v325;
      v4 = v323;
      goto LABEL_179;
    }
    v63 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
    if (swift_dynamicCastMetatype())
    {
      v64 = (void *)AnyAttribute.value.getter();
      v65 = RIOPxrVtValueRef.asUInt32Array.getter();

      if (!v65)
        goto LABEL_175;
LABEL_100:
      v66.super.isa = Array._bridgeToObjectiveC()().super.isa;
LABEL_101:
      v67 = (uint64_t)v66.super.isa;
      swift_bridgeObjectRelease();
      goto LABEL_176;
    }
    if (swift_dynamicCastMetatype())
    {
      v68 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asUInt64.getter();
      v70 = v69;

      if ((v70 & 1) != 0)
        goto LABEL_175;
      v67 = (uint64_t)UInt64._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
    if (swift_dynamicCastMetatype())
    {
      v71 = (void *)AnyAttribute.value.getter();
      v72 = RIOPxrVtValueRef.asUInt64Array.getter();

      if (!v72)
        goto LABEL_175;
      goto LABEL_100;
    }
    if (swift_dynamicCastMetatype())
    {
      v73 = (void *)AnyAttribute.value.getter();
      v74 = RIOPxrVtValueRef.asFloat.getter();

      if ((v74 & 0x100000000) != 0)
        goto LABEL_175;
      v67 = (uint64_t)Float._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    if (swift_dynamicCastMetatype())
    {
      v75 = (void *)AnyAttribute.value.getter();
      v76 = RIOPxrVtValueRef.asFloatArray.getter();

      if (!v76)
        goto LABEL_175;
      goto LABEL_100;
    }
    if (swift_dynamicCastMetatype())
    {
      v77 = (void *)AnyAttribute.value.getter();
      v78 = RIOPxrVtValueRef.asDouble.getter();
      v80 = v79;

      if ((v80 & 1) != 0)
        goto LABEL_175;
      v67 = MEMORY[0x22E2F5464](*(double *)&v78);
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    if (swift_dynamicCastMetatype())
    {
      v81 = (void *)AnyAttribute.value.getter();
      v82 = RIOPxrVtValueRef.asDoubleArray.getter();

      if (!v82)
        goto LABEL_175;
      goto LABEL_100;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Int32>);
    if (swift_dynamicCastMetatype())
    {
      v83 = (void *)AnyAttribute.value.getter();
      v84 = RIOPxrVtValueRef.asInt2.getter();
      v86 = v85;

      if ((v86 & 1) != 0)
        goto LABEL_175;
      v87 = specialized SIMD.asScalarArray()(*(double *)&v84);
LABEL_125:
      v346 = (uint64_t)v87;
      v67 = _bridgeAnythingToObjectiveC<A>(_:)();
      outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for [Int32]);
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Int32>]);
    if (swift_dynamicCastMetatype())
    {
      v88 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asInt2Array.getter();

      if (!v67)
        goto LABEL_176;
      v89 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D10VyAIGXEfU_Tf1cn_n(v67);
      goto LABEL_129;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Int32>);
    if (swift_dynamicCastMetatype())
    {
      v92 = (void *)AnyAttribute.value.getter();
      v93 = RIOPxrVtValueRef.asInt3.getter();
      v95 = v94;
      v97 = v96;

      if ((v97 & 1) != 0)
        goto LABEL_175;
      v98.n128_u64[0] = v93;
      v98.n128_u64[1] = v95;
      v87 = specialized SIMD.asScalarArray()(v98);
      goto LABEL_125;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Int32>]);
    if (swift_dynamicCastMetatype())
    {
      v99 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asInt3Array.getter();

      if (!v67)
        goto LABEL_176;
      v100 = &v335;
      v101 = (__n128 *)v67;
      v102 = specialized SIMD.asScalarArray();
LABEL_137:
      v89 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3Vys5Int32VGG_SayAIGs5NeverOTg5072_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSays5e4VGs5D11VyAIGXEfU0_Tf1cn_nTm(v101, (uint64_t)v100, (uint64_t (*)(uint64_t, __n128))v102);
LABEL_129:
      v90 = v89;
      swift_bridgeObjectRelease();
      v346 = v90;
      v91 = (uint64_t *)&demangling cache variable for type metadata for [[Int32]];
LABEL_130:
      __swift_instantiateConcreteTypeFromMangledName(v91);
      v67 = _bridgeAnythingToObjectiveC<A>(_:)();
      outlined destroy of Any?((uint64_t)&v346, v91);
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Int32>);
    if (swift_dynamicCastMetatype())
    {
      v103 = (void *)AnyAttribute.value.getter();
      v104 = RIOPxrVtValueRef.asInt4.getter();
      v106 = v105;
      v108 = v107;

      if ((v108 & 1) != 0)
        goto LABEL_175;
      v109.n128_u64[0] = v104;
      v109.n128_u64[1] = v106;
      v87 = specialized SIMD.asScalarArray()(v109);
      goto LABEL_125;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Int32>]);
    if (swift_dynamicCastMetatype())
    {
      v110 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asInt4Array.getter();

      if (!v67)
        goto LABEL_176;
      v100 = &v336;
      v101 = (__n128 *)v67;
      v102 = specialized SIMD.asScalarArray();
      goto LABEL_137;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    if (swift_dynamicCastMetatype())
    {
      v111 = (void *)AnyAttribute.value.getter();
      v112 = RIOPxrVtValueRef.asFloat2.getter();
      v114 = v113;

      if ((v114 & 1) != 0)
        goto LABEL_175;
      v115 = specialized SIMD.asScalarArray()(*(double *)&v112);
LABEL_147:
      v346 = (uint64_t)v115;
      v67 = _bridgeAnythingToObjectiveC<A>(_:)();
      outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for [Float]);
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Float>]);
    if (swift_dynamicCastMetatype())
    {
      v116 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asFloat2Array.getter();

      if (!v67)
        goto LABEL_176;
      v117 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU2_Tf1cn_n(v67);
LABEL_151:
      v118 = v117;
      swift_bridgeObjectRelease();
      v346 = v118;
      v91 = (uint64_t *)&demangling cache variable for type metadata for [[Float]];
      goto LABEL_130;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    if (swift_dynamicCastMetatype())
    {
      v119 = (void *)AnyAttribute.value.getter();
      v120 = RIOPxrVtValueRef.asFloat3.getter();
      v122 = v121;
      v124 = v123;

      if ((v124 & 1) != 0)
        goto LABEL_175;
      v125.n128_u64[0] = v120;
      v125.n128_u64[1] = v122;
      v115 = specialized SIMD.asScalarArray()(v125);
      goto LABEL_147;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Float>]);
    if (swift_dynamicCastMetatype())
    {
      v126 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asFloat3Array.getter();

      if (!v67)
        goto LABEL_176;
      v127 = &v337;
      v128 = (__n128 *)v67;
      v129 = specialized SIMD.asScalarArray();
LABEL_158:
      v117 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_SaySfGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySfGs5d2VyS7GXEfU3_Tf1cn_nTm(v128, (uint64_t)v127, (uint64_t (*)(uint64_t, __n128))v129);
      goto LABEL_151;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
    if (swift_dynamicCastMetatype())
    {
      v130 = (void *)AnyAttribute.value.getter();
      v131 = RIOPxrVtValueRef.asFloat4.getter();
      v133 = v132;
      v135 = v134;

      if ((v135 & 1) != 0)
        goto LABEL_175;
      v136.n128_u64[0] = v131;
      v136.n128_u64[1] = v133;
      v115 = specialized SIMD.asScalarArray()(v136);
      goto LABEL_147;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Float>]);
    if (swift_dynamicCastMetatype())
    {
      v137 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asFloat4Array.getter();

      if (!v67)
        goto LABEL_176;
      v127 = &v338;
      v128 = (__n128 *)v67;
      v129 = specialized SIMD.asScalarArray();
      goto LABEL_158;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
    if (swift_dynamicCastMetatype())
    {
      v138 = (void *)AnyAttribute.value.getter();
      v139 = RIOPxrVtValueRef.asDouble2.getter();
      v141 = v140;
      v143 = v142;

      if ((v143 & 1) != 0)
        goto LABEL_175;
      v144.n128_u64[0] = v139;
      v144.n128_u64[1] = v141;
      v145 = specialized SIMD.asScalarArray()(v144);
LABEL_168:
      v346 = (uint64_t)v145;
      v67 = _bridgeAnythingToObjectiveC<A>(_:)();
      outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for [Double]);
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Double>]);
    if (swift_dynamicCastMetatype())
    {
      v146 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asDouble2Array.getter();

      if (!v67)
        goto LABEL_176;
      v147 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD2VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU5_Tf1cn_n(v67);
LABEL_172:
      v148 = v147;
      swift_bridgeObjectRelease();
      v346 = v148;
      v91 = &demangling cache variable for type metadata for [[Double]];
      goto LABEL_130;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
    if (swift_dynamicCastMetatype())
    {
      v149 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asDouble3.getter((uint64_t)v349);

      outlined init with take of (URL, __REAsset)((uint64_t)v349, (uint64_t)&v355, &demangling cache variable for type metadata for SIMD3<Double>?);
      if ((v357 & 1) != 0)
        goto LABEL_175;
      v145 = specialized SIMD.asScalarArray()(v355, v356);
      goto LABEL_168;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Double>]);
    if (swift_dynamicCastMetatype())
    {
      v150 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asDouble3Array.getter();

      if (!v67)
        goto LABEL_176;
      v151 = &v339;
      v152 = (__n128 *)v67;
      v153 = (uint64_t (*)(uint64_t, __n128, __n128))specialized SIMD.asScalarArray();
LABEL_184:
      v147 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySdGG_SaySdGs5NeverOTg5075_s9RealityIO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSaySdGs5d2VyS7GXEfU6_Tf1cn_nTm(v152, (uint64_t)v151, v153);
      goto LABEL_172;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
    if (swift_dynamicCastMetatype())
    {
      v154 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asDouble4.getter((uint64_t)v350);

      outlined init with take of (URL, __REAsset)((uint64_t)v350, (uint64_t)v358, &demangling cache variable for type metadata for SIMD4<Double>?);
      if ((v359 & 1) != 0)
        goto LABEL_175;
      v145 = specialized SIMD.asScalarArray()(v358[0], v358[1]);
      goto LABEL_168;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Double>]);
    if (swift_dynamicCastMetatype())
    {
      v155 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asDouble4Array.getter();

      if (!v67)
        goto LABEL_176;
      v151 = &v340;
      v152 = (__n128 *)v67;
      v153 = (uint64_t (*)(uint64_t, __n128, __n128))specialized SIMD.asScalarArray();
      goto LABEL_184;
    }
    type metadata accessor for simd_quatf(0);
    if (swift_dynamicCastMetatype())
    {
      v156 = (void *)AnyAttribute.value.getter();
      v157 = RIOPxrVtValueRef.asQuatf.getter();
      v159 = v158;
      v161 = v160;

      if ((v161 & 1) != 0)
        goto LABEL_249;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v162 = swift_allocObject();
      v163 = specialized static Array._adoptStorage(_:count:)(v162, 4);
      v164->i32[0] = vdupq_n_s64(v159).i32[3];
      v164->i32[1] = v157;
      v164[1] = vext_s8((int8x8_t)v157, (int8x8_t)v159, 4uLL);
      destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v163);
      goto LABEL_195;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatf]);
    if (swift_dynamicCastMetatype())
    {
      v166 = (void *)AnyAttribute.value.getter();
      v167 = RIOPxrVtValueRef.asQuatfArray.getter();

      if (!v167)
        goto LABEL_249;
      v346 = specialized static Array._allocateUninitialized(_:)(0);
      v168 = *(_QWORD *)(v167 + 16);
      if (v168)
      {
        v169 = 0;
        do
        {
          v327 = *(int8x16_t *)(v167 + 16 * v169++ + 32);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          v170 = swift_allocObject();
          v171 = specialized static Array._adoptStorage(_:count:)(v170, 4);
          *v172 = vextq_s8(v327, v327, 0xCuLL);
          v173 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v171);
          specialized Array.append(_:)(v173, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        }
        while (v168 != v169);
      }
LABEL_205:
      swift_bridgeObjectRelease();
      v178.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
LABEL_206:
      objc_msgSend(v334, sel___swift_setObject_forKeyedSubscript_, v178.super.isa, specialized _bridgeAnythingToObjectiveC<A>(_:)());
      swift_bridgeObjectRelease();

      goto LABEL_177;
    }
    type metadata accessor for simd_quatd(0);
    if (swift_dynamicCastMetatype())
    {
      v174 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asQuatd.getter((uint64_t)v351);

      outlined init with take of (URL, __REAsset)((uint64_t)v351, (uint64_t)v360, &demangling cache variable for type metadata for simd_quatd?);
      if ((v361 & 1) != 0)
        goto LABEL_249;
      v310 = v360[0];
      v317 = v360[1];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v175 = swift_allocObject();
      v176 = specialized static Array._adoptStorage(_:count:)(v175, 4);
      *v177 = vextq_s8(v317, v310, 8uLL);
      v177[1] = vextq_s8(v310, v317, 8uLL);
      destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v176);
      goto LABEL_195;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatd]);
    if (swift_dynamicCastMetatype())
    {
      v179 = (void *)AnyAttribute.value.getter();
      v180 = RIOPxrVtValueRef.asQuatdArray.getter();

      if (!v180)
        goto LABEL_249;
      v346 = specialized static Array._allocateUninitialized(_:)(0);
      v181 = *(_QWORD *)(v180 + 16);
      if (v181)
      {
        v182 = 0;
        do
        {
          v183 = (int8x16_t *)(v180 + 32 * v182);
          v328 = v183[3];
          v318 = v183[2];
          ++v182;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
          v184 = swift_allocObject();
          v185 = specialized static Array._adoptStorage(_:count:)(v184, 4);
          *v186 = vextq_s8(v328, v318, 8uLL);
          v186[1] = vextq_s8(v318, v328, 8uLL);
          v187 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v185);
          specialized Array.append(_:)(v187, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        }
        while (v181 != v182);
      }
      goto LABEL_205;
    }
    type metadata accessor for simd_double2x2(0);
    if (swift_dynamicCastMetatype())
    {
      v188 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asMatrix2d.getter((uint64_t)v352);

      outlined init with take of (URL, __REAsset)((uint64_t)v352, (uint64_t)v362, &demangling cache variable for type metadata for simd_double2x2?);
      if ((v363 & 1) != 0)
        goto LABEL_249;
      v311 = v362[0];
      v319 = v362[1];
      v346 = specialized static Array._allocateUninitialized(_:)(0);
      v189 = specialized SIMD.asScalarArray()(v311);
      specialized Array.append(_:)((uint64_t)v189, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v190 = specialized SIMD.asScalarArray()(v319);
      goto LABEL_239;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double2x2]);
    if (swift_dynamicCastMetatype())
      break;
    type metadata accessor for simd_double3x3(0);
    if (swift_dynamicCastMetatype())
    {
      v206 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asMatrix3d.getter((uint64_t)v353);

      outlined init with take of (URL, __REAsset)((uint64_t)v353, (uint64_t)&v364, &demangling cache variable for type metadata for simd_double3x3?);
      if ((v370 & 1) != 0)
        goto LABEL_249;
      v294 = v364;
      v297 = v365;
      v301 = v366;
      v305 = v367;
      v312 = v368;
      v321 = v369;
      v346 = specialized static Array._allocateUninitialized(_:)(0);
      v207 = specialized SIMD.asScalarArray()(v294, v297);
      specialized Array.append(_:)((uint64_t)v207, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v208 = specialized SIMD.asScalarArray()(v301, v305);
      specialized Array.append(_:)((uint64_t)v208, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v190 = specialized SIMD.asScalarArray()(v312, v321);
      goto LABEL_239;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double3x3]);
    if (swift_dynamicCastMetatype())
    {
      v209 = (void *)AnyAttribute.value.getter();
      v210 = RIOPxrVtValueRef.asMatrix3dArray.getter();

      if (!v210)
        goto LABEL_249;
      v346 = specialized static Array._allocateUninitialized(_:)(0);
      result = specialized Array.count.getter(v210);
      if (result < 0)
        goto LABEL_314;
      v211 = result;
      if (result)
      {
        v212 = 0;
        v213 = (__n128 *)(v210 + 96);
        while (*(_QWORD *)(v210 + 16) > v212)
        {
          ++v212;
          v298 = v213[-4];
          v302 = v213[-3];
          v214 = v213[-1];
          v306 = v213[-2];
          v329 = v213[1];
          v215 = *v213;
          v213 += 6;
          v313 = v214.n128_f64[0];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
          v216 = swift_allocObject();
          v217 = specialized static Array._adoptStorage(_:count:)(v216, 1);
          *v218 = specialized SIMD.asScalarArray()(v298, v302.n128_f64[0]);
          v219 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v217);
          specialized Array.append(_:)(v219, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          v220 = swift_allocObject();
          v221 = specialized static Array._adoptStorage(_:count:)(v220, 1);
          *v222 = specialized SIMD.asScalarArray()(v306, v313);
          v223 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v221);
          specialized Array.append(_:)(v223, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          v224 = swift_allocObject();
          v225 = specialized static Array._adoptStorage(_:count:)(v224, 1);
          *v226 = specialized SIMD.asScalarArray()(v215, v329.n128_f64[0]);
          v227 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v225);
          result = specialized Array.append(_:)(v227, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          if (v211 == v212)
            goto LABEL_253;
        }
        goto LABEL_315;
      }
      goto LABEL_253;
    }
    type metadata accessor for simd_double4x4(0);
    if (swift_dynamicCastMetatype())
    {
      v228 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asMatrix4d.getter((uint64_t)v354);

      outlined init with take of (URL, __REAsset)((uint64_t)v354, (uint64_t)v371, &demangling cache variable for type metadata for simd_double4x4?);
      if (_sSo14simd_double4x4aSgWOg((uint64_t)v371) == 1)
        goto LABEL_249;
      v291 = v371[0];
      v292 = v371[1];
      v295 = v371[2];
      v299 = v371[3];
      v303 = v371[4];
      v307 = v371[5];
      v314 = v371[6];
      v322 = v371[7];
      v346 = specialized static Array._allocateUninitialized(_:)(0);
      v229 = specialized SIMD.asScalarArray()(v291, v292);
      specialized Array.append(_:)((uint64_t)v229, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v230 = specialized SIMD.asScalarArray()(v295, v299);
      specialized Array.append(_:)((uint64_t)v230, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v231 = specialized SIMD.asScalarArray()(v303, v307);
      specialized Array.append(_:)((uint64_t)v231, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v190 = specialized SIMD.asScalarArray()(v314, v322);
LABEL_239:
      specialized Array.append(_:)((uint64_t)v190, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
LABEL_195:
      v165 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v334, sel___swift_setObject_forKeyedSubscript_, v165, specialized _bridgeAnythingToObjectiveC<A>(_:)());
      swift_bridgeObjectRelease();

      goto LABEL_177;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double4x4]);
    if (swift_dynamicCastMetatype())
    {
      v232 = (void *)AnyAttribute.value.getter();
      v233 = RIOPxrVtValueRef.asMatrix4dArray.getter();

      if (!v233)
      {
LABEL_249:
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_178;
      }
      v346 = specialized static Array._allocateUninitialized(_:)(0);
      result = specialized Array.count.getter(v233);
      if (result < 0)
        goto LABEL_316;
      v234 = result;
      if (result)
      {
        v235 = 0;
        v236 = (__n128 *)(v233 + 128);
        while (*(_QWORD *)(v233 + 16) > v235)
        {
          ++v235;
          v293 = v236[-6];
          v296 = v236[-5];
          v300 = v236[-4];
          v304 = v236[-3];
          v237 = v236[-1];
          v308 = v236[-2];
          v330 = v236[1];
          v238 = *v236;
          v236 += 8;
          v315 = v237;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
          v239 = swift_allocObject();
          v240 = specialized static Array._adoptStorage(_:count:)(v239, 1);
          *v241 = specialized SIMD.asScalarArray()(v293, v296);
          v242 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v240);
          specialized Array.append(_:)(v242, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          v243 = swift_allocObject();
          v244 = specialized static Array._adoptStorage(_:count:)(v243, 1);
          *v245 = specialized SIMD.asScalarArray()(v300, v304);
          v246 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v244);
          specialized Array.append(_:)(v246, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          v247 = swift_allocObject();
          v248 = specialized static Array._adoptStorage(_:count:)(v247, 1);
          *v249 = specialized SIMD.asScalarArray()(v308, v315);
          v250 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v248);
          specialized Array.append(_:)(v250, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          v251 = swift_allocObject();
          v252 = specialized static Array._adoptStorage(_:count:)(v251, 1);
          *v253 = specialized SIMD.asScalarArray()(v238, v330);
          v254 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v252);
          result = specialized Array.append(_:)(v254, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          if (v234 == v235)
            goto LABEL_253;
        }
        goto LABEL_317;
      }
LABEL_253:
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Double]]);
      goto LABEL_195;
    }
    if (swift_dynamicCastMetatype())
    {
      v255 = (void *)AnyAttribute.value.getter();
      v256 = RIOPxrVtValueRef.asString.getter();
      v258 = v257;

      if (!v258)
        goto LABEL_175;
      v66.super.isa = (Class)MEMORY[0x22E2F5278](v256, v258);
      goto LABEL_101;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCastMetatype())
    {
      v259 = (void *)AnyAttribute.value.getter();
      v260 = RIOPxrVtValueRef.asStringArray.getter();

      if (!v260)
        goto LABEL_175;
      goto LABEL_100;
    }
    if (swift_dynamicCastMetatype())
    {
      v261 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asToken.getter((uint64_t *)&v348);

      v262 = v348;
      if (v348)
      {
        v346 = (uint64_t)v348;
        v263 = ToolsFoundations.Token.stringValue.getter();
LABEL_272:
        v272 = v263;
        v273 = v264;

        v346 = v272;
        v347 = v273;
        v67 = _bridgeAnythingToObjectiveC<A>(_:)();
        outlined destroy of String((uint64_t)&v346);
        goto LABEL_176;
      }
      goto LABEL_175;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolsFoundations.Token]);
    if (swift_dynamicCastMetatype())
    {
      v265 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asTokenArray.getter();

      if (!v67)
        goto LABEL_176;
      v266 = &v341;
      v267 = v67;
      v268 = MEMORY[0x24BE271B8];
LABEL_276:
      v275 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_SSs5NeverOTg503_s9d63IO25componentPrimToDictionary0C0So09NSMutableF0CAA0D0C_tFSSAA16fg2O5H7VXEfU8_Tf1cn_nTm(v267, (uint64_t)v266, v268);
      swift_bridgeObjectRelease();
      v346 = v275;
      v67 = _bridgeAnythingToObjectiveC<A>(_:)();
      outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for [String]);
      goto LABEL_176;
    }
    if (swift_dynamicCastMetatype())
    {
      v269 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asPath.getter((uint64_t *)&v348);

      v262 = v348;
      if (v348)
      {
        v346 = (uint64_t)v348;
        v263 = SceneDescriptionFoundations.Path.string.getter();
        goto LABEL_272;
      }
LABEL_175:
      v67 = 0;
      goto LABEL_176;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.Path]);
    if (swift_dynamicCastMetatype())
    {
      v270 = (void *)AnyAttribute.value.getter();
      v67 = RIOPxrVtValueRef.asPathListOp.getter();

      if (!v67)
        goto LABEL_176;
      v266 = &v342;
      v267 = v67;
      v268 = MEMORY[0x24BE26C30];
      goto LABEL_276;
    }
    if (swift_dynamicCastMetatype())
    {
      v271 = (void *)AnyAttribute.value.getter();
      RIOPxrVtValueRef.asAssetPath.getter((uint64_t *)&v348);

      v262 = v348;
      if (v348)
      {
        v346 = (uint64_t)v348;
        v263 = SceneDescriptionFoundations.AssetPath.string.getter();
        goto LABEL_272;
      }
      goto LABEL_175;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath]);
    if (!swift_dynamicCastMetatype())
    {
      v178.super.isa = (Class)MEMORY[0x22E2F5278](0xD00000000000003CLL, 0x800000022BD08980);
      goto LABEL_206;
    }
    v274 = (void *)AnyAttribute.value.getter();
    v67 = RIOPxrVtValueRef.asAssetPathArray.getter();

    if (v67)
    {
      v266 = &v343;
      v267 = v67;
      v268 = MEMORY[0x24BE26890];
      goto LABEL_276;
    }
LABEL_176:
    objc_msgSend(v334, sel___swift_setObject_forKeyedSubscript_, v67, specialized _bridgeAnythingToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_177:
    swift_unknownObjectRelease();
    swift_release();
LABEL_178:
    v1 = v324;
    v0 = v325;
    v2 = v63;
    v4 = v323;
LABEL_179:
    if (v2 == v1)
      goto LABEL_283;
  }
  v191 = (void *)AnyAttribute.value.getter();
  v192 = RIOPxrVtValueRef.asMatrix2dArray.getter();

  if (!v192)
    goto LABEL_249;
  v346 = specialized static Array._allocateUninitialized(_:)(0);
  result = specialized Array._getCount()(v192);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_313;
  }
  v194 = result;
  if (!result)
    goto LABEL_253;
  v195 = 0;
  v196 = (__n128 *)(v192 + 48);
  while (*(_QWORD *)(v192 + 16) > v195)
  {
    ++v195;
    v320 = v196[-1];
    v197 = *v196;
    v196 += 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
    v198 = swift_allocObject();
    v199 = specialized static Array._adoptStorage(_:count:)(v198, 1);
    *v200 = specialized SIMD.asScalarArray()(v320);
    v201 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v199);
    specialized Array.append(_:)(v201, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v202 = swift_allocObject();
    v203 = specialized static Array._adoptStorage(_:count:)(v202, 1);
    *v204 = specialized SIMD.asScalarArray()(v197);
    v205 = destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v203);
    result = specialized Array.append(_:)(v205, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    if (v194 == v195)
      goto LABEL_253;
  }
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
  return result;
}

uint64_t specialized _bridgeAnythingToObjectiveC<A>(_:)()
{
  swift_bridgeObjectRetain();
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t closure #13 in componentPrimToDictionary(component:)()
{
  void *v0;
  id v1;
  void *v2;
  char v3;
  void *v4;
  id v5;
  void *v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  char v11;
  void *v13;
  id v14;
  void *v15;
  char v16;

  v0 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (String.count.getter() < 1)
    v1 = (id)RIOPxrTfTokenEmpty();
  else
    v1 = (id)RIOPxrTfTokenCreateWithCString();
  v2 = v1;
  type metadata accessor for RIOPxrTfTokenRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  v3 = static _CFObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
    return 1;
  v4 = (void *)RIOPxrUsdPrimCopyTypeName();
  v5 = String.count.getter() < 1
     ? (id)RIOPxrTfTokenEmpty()
     : (id)RIOPxrTfTokenCreateWithCString();
  v6 = v5;
  v7 = static _CFObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
    return 1;
  v8 = (void *)RIOPxrUsdPrimCopyTypeName();
  v9 = String.count.getter() < 1
     ? (id)RIOPxrTfTokenEmpty()
     : (id)RIOPxrTfTokenCreateWithCString();
  v10 = v9;
  v11 = static _CFObject.== infix(_:_:)();

  if ((v11 & 1) != 0)
    return 1;
  v13 = (void *)RIOPxrUsdPrimCopyTypeName();
  if (String.count.getter() < 1)
    v14 = (id)RIOPxrTfTokenEmpty();
  else
    v14 = (id)RIOPxrTfTokenCreateWithCString();
  v15 = v14;
  v16 = static _CFObject.== infix(_:_:)();

  return v16 & 1;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  uint64_t v2;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x24BEE1110]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE0D00] - 8) + 8))();
  return a1;
}

uint64_t _sSo14simd_double4x4aSgWOg(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t Stage.hasPrim(at:)()
{
  return RIOPxrUsdStageHasPrimAtPrimPath();
}

uint64_t Stage.prim(of:at:)()
{
  uint64_t PrimIfNeeded;
  uint64_t result;

  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = PrimIfNeeded;
  return result;
}

void Stage.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;

  v4 = (void *)RIOPxrUsdStageCopyRootLayer();
  v5 = (id)RIOPxrSdfLayerCopyCustomLayerDataValue();

  if (v5)
  {
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  }
}

uint64_t Stage.defaultPrim.getter()
{
  return Stage.defaultPrim.getter((uint64_t (*)(_QWORD))MEMORY[0x24BE27728]);
}

_QWORD *Stage.createImportSession(engine:pipelineVersion:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for __EngineRef();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__coreEngine.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  result = (_QWORD *)RIOImportSessionCreateWithStage();
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for Entity();
    type metadata accessor for ImportSession(0);
    swift_allocObject();
    return specialized ImportSession.init<A>(core:entityType:)(v7, v8);
  }
  return result;
}

uint64_t static Stage.LoadError.== infix(_:_:)()
{
  return 1;
}

void Stage.LoadError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int Stage.LoadError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t Stage.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = RIOPxrUsdStageCreateInMemory();
  return v0;
}

uint64_t Stage.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = RIOPxrUsdStageCreateInMemory();
  return v0;
}

uint64_t Stage.__allocating_init(identifier:buffer:length:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v1 = RIOPxrUsdStageCreateWithInMemoryBuffer();
  swift_release();
  if (v1)
  {
    *(_QWORD *)(v0 + 16) = v1;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t Stage.init(identifier:buffer:length:)()
{
  uint64_t v0;
  uint64_t v1;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v1 = RIOPxrUsdStageCreateWithInMemoryBuffer();
  swift_release();
  if (v1)
  {
    *(_QWORD *)(v0 + 16) = v1;
  }
  else
  {
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t Stage.__allocating_init(identifier:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  Stage.init(identifier:data:)(a1, a2, a3, a4);
  return v8;
}

uint64_t Stage.init(identifier:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  Class isa;
  uint64_t v8;

  isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v8 = RIOPxrUsdStageCreateWithInMemoryDataBufferWithErrorReporting();

  swift_release();
  if (v8)
  {
    outlined consume of Data._Representation(a3, a4);
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError();
    swift_allocError();
    swift_willThrow();
    outlined consume of Data._Representation(a3, a4);
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
  }
  return v4;
}

uint64_t Stage.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  Stage.init(from:)(a1);
  return v2;
}

uint64_t Stage.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  URL._bridgeToObjectiveC()((NSURL *)*MEMORY[0x24BDAC8D0]);
  v5 = v4;
  v6 = RIOPxrUsdStageCreateWithFileURLWithErrorReporting();

  if (v6)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    *(_QWORD *)(v2 + 16) = v6;
  }
  else
  {
    lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError();
    swift_allocError();
    swift_willThrow();
    v8 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t Stage.__allocating_init(contentsOf:)(uint64_t a1)
{
  uint64_t v2;
  NSURL *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = swift_allocObject();
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  v6 = RIOPxrUsdStageCreateWithFileURL();

  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  if (v6)
  {
    *(_QWORD *)(v2 + 16) = v6;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t Stage.init(contentsOf:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  URL._bridgeToObjectiveC()(a2);
  v6 = v5;
  v7 = RIOPxrUsdStageCreateWithFileURL();

  v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  if (v7)
  {
    *(_QWORD *)(v3 + 16) = v7;
  }
  else
  {
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t Stage.__allocating_init(from:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  Stage.init(from:)();
  return v0;
}

uint64_t Stage.init(from:)()
{
  uint64_t v0;
  uint64_t v1;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v1 = RIOPxrUsdStageCreateWithFilePathWithErrorReporting();
  swift_release();
  if (v1)
  {
    *(_QWORD *)(v0 + 16) = v1;
  }
  else
  {
    lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError();
    swift_allocError();
    swift_willThrow();
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
  }
  return v0;
}

uint64_t Stage.__allocating_init(withFilePath:)(uint64_t a1, uint64_t a2)
{
  return Stage.__allocating_init(withFilePath:)(a1, a2, MEMORY[0x24BE27798]);
}

uint64_t Stage.init(withFilePath:)(uint64_t a1, uint64_t a2)
{
  return Stage.init(withFilePath:)(a1, a2, MEMORY[0x24BE27798]);
}

uint64_t Stage.__allocating_init(contents:)(uint64_t a1, uint64_t a2)
{
  return Stage.__allocating_init(withFilePath:)(a1, a2, MEMORY[0x24BE277C8]);
}

uint64_t Stage.__allocating_init(withFilePath:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_allocObject();
  v5 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v6 = a3(v5 + 32);
  swift_release();
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v6;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v4;
}

uint64_t Stage.init(contents:)(uint64_t a1, uint64_t a2)
{
  return Stage.init(withFilePath:)(a1, a2, MEMORY[0x24BE277C8]);
}

uint64_t Stage.init(withFilePath:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v6 = a3(v5 + 32);
  swift_release();
  if (v6)
  {
    *(_QWORD *)(v3 + 16) = v6;
  }
  else
  {
    type metadata accessor for Stage();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t static Stage.isSupportedFile(_:)()
{
  uint64_t IsSupportedFile;

  URL.absoluteString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  IsSupportedFile = RIOPxrUsdStageIsSupportedFile();
  swift_release();
  return IsSupportedFile;
}

uint64_t Stage.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Stage.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t static Stage.makeTopLevelEntityStage(from:)()
{
  uint64_t TopLevelEntityFromStage;
  uint64_t result;

  TopLevelEntityFromStage = RIOPxrUsdUtilsCreateTopLevelEntityFromStage();
  type metadata accessor for Stage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = TopLevelEntityFromStage;
  return result;
}

uint64_t Stage.description.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrUsdStageCopyUSDA();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

Swift::String __swiftcall Stage.toString()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v0 = (void *)RIOPxrUsdStageCopyUSDA();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  v4 = v1;
  v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t Stage.debugDescription.getter()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;

  v0 = (void *)RIOPxrUsdStageCopyUSDA();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0xA3E65676174533CLL;
}

uint64_t Stage.metersPerUnit.getter()
{
  return RIOPxrUsdStageGetMetersPerUnit();
}

uint64_t Stage.metersPerUnit.setter()
{
  return RIOPxrUsdStageSetMetersPerUnit();
}

uint64_t (*Stage.metersPerUnit.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrUsdStageGetMetersPerUnit();
  *a1 = v3;
  return Stage.metersPerUnit.modify;
}

uint64_t Stage.metersPerUnit.modify()
{
  return RIOPxrUsdStageSetMetersPerUnit();
}

uint64_t key path getter for Stage.defaultPrim : Stage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = RIOPxrUsdStageCopyDefaultPrim();
  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *a1 = result;
  return result;
}

uint64_t key path setter for Stage.defaultPrim : Stage(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  char v3;
  id v4;

  v1 = *a1;
  swift_retain();
  v2 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  v3 = static _CFObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
  {
    RIOPxrUsdStageClearDefaultPrim();
  }
  else
  {
    v4 = *(id *)(v1 + 16);
    RIOPxrUsdStageSetDefaultPrim();

  }
  return swift_release();
}

uint64_t Stage.defaultPrim.setter(uint64_t a1)
{
  void *v2;
  char v3;
  id v4;

  v2 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
  type metadata accessor for RIOPxrUsdObjectRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
  v3 = static _CFObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
  {
    RIOPxrUsdStageClearDefaultPrim();
  }
  else
  {
    v4 = *(id *)(a1 + 16);
    RIOPxrUsdStageSetDefaultPrim();

  }
  return swift_release();
}

uint64_t Stage.pseudoRootPrim()()
{
  return Stage.defaultPrim.getter((uint64_t (*)(_QWORD))MEMORY[0x24BE27748]);
}

uint64_t Stage.defaultPrim.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = a1(*(_QWORD *)(v1 + 16));
  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t (*Stage.defaultPrim.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[1] = *(_QWORD *)(v1 + 16);
  v3 = RIOPxrUsdStageCopyDefaultPrim();
  type metadata accessor for Prim();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *a1 = v4;
  return Stage.defaultPrim.modify;
}

uint64_t Stage.defaultPrim.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  char v6;
  id v7;
  id v8;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v3 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
    type metadata accessor for RIOPxrUsdObjectRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
    v4 = static _CFObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
    {
      RIOPxrUsdStageClearDefaultPrim();
    }
    else
    {
      v7 = *(id *)(v2 + 16);
      RIOPxrUsdStageSetDefaultPrim();

    }
    swift_release();
  }
  else
  {
    v5 = (void *)RIOPxrUsdStageCopyPseudoRootPrim();
    type metadata accessor for RIOPxrUsdObjectRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrUsdObjectRef, (uint64_t)&protocol conformance descriptor for RIOPxrUsdObjectRef);
    v6 = static _CFObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
    {
      RIOPxrUsdStageClearDefaultPrim();
    }
    else
    {
      v8 = *(id *)(v2 + 16);
      RIOPxrUsdStageSetDefaultPrim();

    }
  }
  return swift_release();
}

uint64_t Stage.addReference(of:at:from:)@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  int IsSupportedFile;
  uint64_t result;
  void (*v13)(char *, uint64_t);
  id v14;
  uint64_t v15;
  char v16;
  id v17;
  uint64_t PrimIfNeeded;
  int v19;
  void *v20;
  uint64_t v21;
  id v22;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  URL.absoluteString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  IsSupportedFile = RIOPxrUsdStageIsSupportedFile();
  result = swift_release();
  if (IsSupportedFile)
  {
    result = URL.isFileURL.getter();
    if ((result & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
      if (v10)
      {
        v13 = *(void (**)(char *, uint64_t))(v7 + 8);
        v14 = v10;
        v13(v9, v6);
        v22 = v14;
      }
      else
      {
        URL.lastPathComponent.getter();
        Stage.generatePrimPath(for:)((uint64_t *)&v22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        v14 = v22;
      }
      v17 = (id)RIOPxrTfTokenEmpty();
      PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
      type metadata accessor for Prim();
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = PrimIfNeeded;

      URL.path.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v19 = RIOPxrUsdPrimAddReference();
      result = swift_release();
      if (v19)
      {
        v16 = 0;
      }
      else
      {
        v20 = (void *)RIOPxrUsdObjectCopyPath();
        RIOPxrUsdStageRemovePrim();

        result = swift_release();
        v16 = 1;
        v15 = 2;
      }
    }
    else
    {
      v15 = 1;
      v16 = 1;
    }
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 8) = v16;
  return result;
}

uint64_t Stage.generatePrimPath(for:)@<X0>(uint64_t *a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;
  int HasPrimAtPrimPath;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  int v10;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t result;

  v2 = (void *)MEMORY[0x22E2F5278]();
  v3 = objc_msgSend(v2, sel_stringByDeletingPathExtension);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.utf8CString.getter();
  v4 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  HasPrimAtPrimPath = RIOPxrUsdStageHasPrimAtPrimPath();

  if (HasPrimAtPrimPath)
  {
    v6 = 1;
    while (1)
    {
      swift_bridgeObjectRetain();
      v7._countAndFlagsBits = 95;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v9 = (void *)RIOPxrSdfPathCreateFromCString();
      swift_release();
      v10 = RIOPxrUsdStageHasPrimAtPrimPath();

      if (!v10)
        break;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
        goto LABEL_7;
      }
    }
    v13._countAndFlagsBits = 95;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v12 = RIOPxrSdfPathCreateFromCString();
  }
  else
  {
LABEL_7:
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v12 = RIOPxrSdfPathCreateFromCString();
  }
  result = swift_release();
  *a1 = v12;
  return result;
}

uint64_t Stage.removePrim(at:)()
{
  return RIOPxrUsdStageRemovePrim();
}

uint64_t Stage.addReference(identifier:at:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t PrimIfNeeded;
  uint64_t v12;
  int v13;
  uint64_t result;
  void *v15;
  void *v16;

  v5 = *a3;
  if (*a3)
  {
    v6 = *a3;
  }
  else
  {
    v7 = (void *)MEMORY[0x22E2F5278](a1, a2);
    v8 = objc_msgSend(v7, sel_stringByDeletingPathExtension);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Stage.generatePrimPath(for:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
    v5 = 0;
    v6 = v16;
  }
  v9 = v5;
  v10 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();
  type metadata accessor for Prim();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = PrimIfNeeded;

  String.utf8CString.getter();
  v13 = RIOPxrUsdPrimAddReference();
  result = swift_release();
  if (!v13)
  {
    v15 = (void *)RIOPxrUsdObjectCopyPath();
    RIOPxrUsdStageRemovePrim();

    result = swift_release();
    v12 = 2;
  }
  *(_QWORD *)a4 = v12;
  *(_BYTE *)(a4 + 8) = v13 ^ 1;
  return result;
}

uint64_t Stage.over(at:)(_QWORD *a1)
{
  return Stage.over(at:)(a1, MEMORY[0x24BE27788]);
}

uint64_t Stage.copyPrim(at:to:includingDescendants:)()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t PrimIfNeeded;
  uint64_t result;

  v0 = (void *)RIOPxrUsdStageCopyRootLayer();
  v1 = (void *)RIOPxrUsdStageCopyRootLayer();
  RIOPxrUsdUtilsSdfCopySpec();

  v2 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = PrimIfNeeded;
  return result;
}

uint64_t Stage.rootLayer()()
{
  return Stage.rootLayer()((uint64_t (*)(_QWORD))MEMORY[0x24BE27750]);
}

uint64_t Stage.classPrim(at:)(_QWORD *a1)
{
  return Stage.over(at:)(a1, MEMORY[0x24BE27778]);
}

uint64_t Stage.over(at:)(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = a2(*(_QWORD *)(v2 + 16), *a1);
  type metadata accessor for Prim();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t Stage.usedLayers()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v0 = (void *)RIOPxrUsdStageCopyUsedLayers();
  if (v0)
  {
    type metadata accessor for RIOPxrSdfLayerRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  v1 = MEMORY[0x24BEE4AF8];
  if (!(MEMORY[0x24BEE4AF8] >> 62))
  {
    v2 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_14;
LABEL_5:
  v11 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        v6 = MEMORY[0x22E2F57B8]();
        type metadata accessor for SceneDescriptionFoundations.Layer();
        *(_QWORD *)(swift_allocObject() + 16) = v6;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v4 = v5;
      }
      while (v2 != v5);
    }
    else
    {
      v7 = (void **)(v1 + 32);
      type metadata accessor for SceneDescriptionFoundations.Layer();
      do
      {
        v8 = *v7++;
        *(_QWORD *)(swift_allocObject() + 16) = v8;
        v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v2;
      }
      while (v2);
    }
    v10 = v11;
    swift_bridgeObjectRelease();

    return v10;
  }
  __break(1u);
  return result;
}

uint64_t Stage.sessionLayer()()
{
  return Stage.rootLayer()(MEMORY[0x24BE27758]);
}

uint64_t Stage.editTarget()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdStageCopyEditTarget();
  *a1 = result;
  return result;
}

uint64_t Stage.setEditTarget(to:)()
{
  return RIOPxrUsdStageSetEditTarget();
}

void Stage.setEditTarget(on:)()
{
  void *v0;

  v0 = (void *)RIOPxrUsdEditTargetCreateWithLayer();
  RIOPxrUsdStageSetEditTarget();

}

Swift::String __swiftcall Stage.toFlattenedString(addSourceFileComment:)(Swift::Bool addSourceFileComment)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v1 = (void *)RIOPxrUsdStageCopyFlattenedUSDA();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::Void __swiftcall Stage.reload()()
{
  RIOPxrUsdStageReload();
}

void Stage.loadThenUnload(loads:unloads:includeDescendants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int64_t v6;
  int v7;
  int v8;
  char v9;
  char v10;
  id v11;
  int64_t v12;
  uint64_t v13;
  char v14;
  NSSet v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  int v20;
  char v21;
  char v22;
  id v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  Class isa;
  unint64_t v28;
  unint64_t v29;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v28 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v6 = specialized Set.startIndex.getter(a1);
    v8 = v7;
    v10 = v9 & 1;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        goto LABEL_19;
      if (*(_DWORD *)(a1 + 36) != v8)
        goto LABEL_20;
      v11 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v12 = specialized _NativeSet.index(after:)(v6, v8, v10 & 1, a1);
      v6 = v12;
      v8 = v13;
      v10 = v14 & 1;
      if (!--v3)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v12, v13, v14 & 1);
        v4 = v28;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  else
  {
LABEL_9:
    specialized Set.init<A>(_:)(v4);
    swift_bridgeObjectRelease();
    type metadata accessor for RIOPxrSdfPathRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
    v15.super.isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(a2 + 16);
    v17 = MEMORY[0x24BEE4AF8];
    if (!v16)
    {
LABEL_17:
      specialized Set.init<A>(_:)(v17);
      swift_bridgeObjectRelease();
      isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      RIOPxrUsdStageLoadThenUnload();

      return;
    }
    v29 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v18 = specialized Set.startIndex.getter(a2);
    v20 = v19;
    v22 = v21 & 1;
    while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(_BYTE *)(a2 + 32))
    {
      if (((*(_QWORD *)(a2 + 56 + (((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a2 + 36) != v20)
        goto LABEL_23;
      v23 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v18);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v24 = specialized _NativeSet.index(after:)(v18, v20, v22 & 1, a2);
      v18 = v24;
      v20 = v25;
      v22 = v26 & 1;
      if (!--v16)
      {
        outlined consume of Set<ToolsFoundations.Token>.Index._Variant(v24, v25, v26 & 1);
        v17 = v29;
        goto LABEL_17;
      }
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

Swift::Void __swiftcall Stage.save()()
{
  RIOPxrUsdStageSave();
}

uint64_t Stage.export(to:sourceFileComment:fileFormatArguments:)@<X0>(uint64_t a1@<X2>, NSURL *a2@<X8>)
{
  void *v3;
  void *v4;
  NSDictionary v5;
  uint64_t v6;

  URL._bridgeToObjectiveC()(a2);
  v4 = v3;
  if (a1)
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v5.super.isa = 0;
  v6 = RIOPxrUsdStageExportWithFileURL();

  return v6;
}

uint64_t Stage.flatten()()
{
  return Stage.rootLayer()(MEMORY[0x24BE27738]);
}

uint64_t Stage.rootLayer()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = a1(*(_QWORD *)(v1 + 16));
  type metadata accessor for SceneDescriptionFoundations.Layer();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  return result;
}

void key path getter for Stage.subscript<A>(customLayerDataKey:) : <A>StageA(id *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id v5;

  v4 = *(uint64_t *)((char *)a1 + a2 - 16);
  v5 = *a1;
  Stage.subscript.getter(v4, a3);

}

uint64_t key path setter for Stage.subscript<A>(customLayerDataKey:) : <A>StageA(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  void *v17;

  v6 = *(uint64_t *)((char *)a3 + a4 - 16);
  v7 = *(uint64_t *)((char *)a3 + a4 - 8);
  v8 = type metadata accessor for Optional();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - v10;
  v12 = *a3;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v16 - v10, a1, v9);
  v17 = v12;
  v14 = v12;
  return Stage.subscript.setter((uint64_t)v11, &v17, v6, v7);
}

uint64_t Stage.subscript.setter(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  void *v21;
  void *v22;
  uint64_t v23;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    v19 = (void *)RIOPxrUsdStageCopyRootLayer();
    RIOPxrSdfLayerClearCustomLayerData();

    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    v21 = (void *)RIOPxrUsdStageCopyRootLayer();
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrSdfLayerSetCustomLayerData();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

void (*Stage.subscript.modify(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Optional();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  v15 = v14;
  Stage.subscript.getter(a3, (uint64_t)v13);
  return Stage.subscript.modify;
}

void Stage.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (*a1)[7];
  v5 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v6 = v2[3];
    v7 = v2[4];
    v8 = v2[1];
    v9 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[5], v3, v6);
    v12 = v4;
    Stage.subscript.setter((uint64_t)v5, (void **)&v12, v9, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  }
  else
  {
    v10 = v2[1];
    v11 = *v2;
    v12 = (*a1)[7];
    Stage.subscript.setter((uint64_t)v3, (void **)&v12, v11, v10);
  }
  free(v3);
  free(v5);
  free(v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Stage()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrUsdStageCopyUSDA();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Stage()
{
  return Stage.debugDescription.getter();
}

uint64_t static Stage.== infix(_:_:)()
{
  return RIOPxrUsdStageEqual();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Stage()
{
  return RIOPxrUsdStageEqual();
}

id Stage.USDError.getter()
{
  id result;
  id v1;
  _QWORD *v2;

  result = (id)RIOPxrUsdStageGetUsdError();
  if (result)
  {
    v1 = result;
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
    result = (id)swift_allocError();
    *v2 = v1;
  }
  return result;
}

uint64_t Stage.USDErrors.getter()
{
  id v0;
  void *v1;

  v0 = (id)RIOPxrUsdStageGetUsdErrors();
  if (v0)
  {
    v1 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

Swift::Void __swiftcall Stage.clearUSDError()()
{
  RIOPxrUsdStageClearUsdErrors();
}

uint64_t closure #1 in Stage.getUSDMessages(isWarning:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = (_QWORD *)(a2 + 16);
  v4 = String.init(cString:)();
  v6 = v5;
  swift_beginAccess();
  v7 = *(_QWORD **)(a2 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 16) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v3 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v3 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = v4;
  v11[5] = v6;
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t Stage.USDWarnings.getter()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  _QWORD v5[6];

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  v1 = (uint64_t *)(v0 + 16);
  v5[4] = partial apply for closure #1 in Stage.getUSDMessages(isWarning:);
  v5[5] = v0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  v5[3] = &block_descriptor_6;
  v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  RIOPxrUsdStageGatherDiagnostics();
  _Block_release(v2);
  swift_beginAccess();
  v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

uint64_t Stage.USDStatusMessages.getter()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  _QWORD v5[6];

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  v1 = (uint64_t *)(v0 + 16);
  v5[4] = partial apply for closure #1 in Stage.getUSDMessages(isWarning:);
  v5[5] = v0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  v5[3] = &block_descriptor_5;
  v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  RIOPxrUsdStageGatherDiagnostics();
  _Block_release(v2);
  swift_beginAccess();
  v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

Swift::Void __swiftcall Stage.clearUSDWarnings()()
{
  RIOPxrUsdStageClearDiagnostics();
}

Swift::Void __swiftcall Stage.clearUSDStatusMessages()()
{
  RIOPxrUsdStageClearDiagnostics();
}

void Stage.setDiagnosticNotification(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v3[6];

  v3[4] = a1;
  v3[5] = a2;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 1107296256;
  v3[2] = thunk for @escaping @callee_guaranteed () -> ();
  v3[3] = &block_descriptor_8_0;
  v2 = _Block_copy(v3);
  swift_retain();
  swift_release();
  RIOPxrUsdStageSetDiagnosticChangeNotification();
  _Block_release(v2);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

BOOL static Stage.MissingReferenceType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Stage.MissingReferenceType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Stage.Error.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Stage.MissingReferenceType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance Stage.MissingReferenceType()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Stage.Error()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Stage.MissingReference.type.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t Stage.MissingReference.assetPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.primPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.referencedPrimPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.sourceFile.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stage.MissingReference.sourcePrimPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall Stage.MissingReference.init(type:assetPath:primPath:referencedPrimPath:sourceFile:sourcePrimPath:)(RealityIO::Stage::MissingReference *__return_ptr retstr, RealityIO::Stage::MissingReferenceType type, Swift::String assetPath, Swift::String_optional primPath, Swift::String_optional referencedPrimPath, Swift::String_optional sourceFile, Swift::String_optional sourcePrimPath)
{
  retstr->type = *(_BYTE *)type;
  retstr->assetPath = assetPath;
  retstr->primPath = primPath;
  retstr->referencedPrimPath = referencedPrimPath;
  retstr->sourceFile.value._countAndFlagsBits = sourceFile.value._countAndFlagsBits;
  *(Swift::String_optional *)&retstr->sourceFile.value._object = *(Swift::String_optional *)&sourceFile.value._object;
  retstr->sourcePrimPath.value._object = sourcePrimPath.value._object;
}

void Stage.MissingReference.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[4];
  v2 = v0[6];
  v3 = v0[8];
  v4 = v0[10];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3)
        goto LABEL_4;
LABEL_8:
      Hasher._combine(_:)(0);
      if (v4)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_8;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_9:
  Hasher._combine(_:)(0);
}

Swift::Int Stage.MissingReference.hashValue.getter()
{
  Hasher.init(_seed:)();
  Stage.MissingReference.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Stage.MissingReference()
{
  Hasher.init(_seed:)();
  Stage.MissingReference.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Stage.MissingReference()
{
  Hasher.init(_seed:)();
  Stage.MissingReference.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static Stage.messageToErrorResult(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;

  v102 = a2;
  v101 = a1;
  v96 = a3;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>.Match?);
  MEMORY[0x24BDAC7A8](v3);
  v91 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>.Match);
  v92 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v88 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>.Match?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>.Match);
  v94 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v89 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>);
  v95 = *(_QWORD *)(v103 - 8);
  MEMORY[0x24BDAC7A8](v103);
  v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>);
  v97 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v20 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  v99 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring));
  Regex.init(_regexString:version:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring, Substring, Substring, Substring));
  v104 = v20;
  v24 = v18;
  Regex.init(_regexString:version:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring, Substring, Substring, Substring, Substring));
  Regex.init(_regexString:version:)();
  v100 = v21;
  v98 = v23;
  Regex.firstMatch(in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?);
    v25 = v105;
    v26 = v104;
    Regex.firstMatch(in:)();
    v27 = v94;
    v28 = v93;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v8, 1, v93) == 1)
    {
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring)>.Match?);
      v29 = (uint64_t)v91;
      v30 = v103;
      Regex.firstMatch(in:)();
      v31 = v92;
      v32 = v90;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v29, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v95 + 8))(v24, v30);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v26, v25);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v100);
        result = outlined destroy of Any?(v29, &demangling cache variable for type metadata for Regex<(Substring, Substring, Substring, Substring, Substring, Substring)>.Match?);
        v34 = v96;
        *v96 = 0u;
        v34[1] = 0u;
        v34[2] = 0u;
        v34[3] = 0u;
        v34[4] = 0u;
        *((_QWORD *)v34 + 10) = 0;
      }
      else
      {
        (*(void (**)(void))(v31 + 32))();
        Regex.Match.output.getter();
        swift_bridgeObjectRelease();
        v59 = v110;
        v60 = v111;
        v61 = v112;
        v62 = v113;
        v102 = v24;
        v63 = v118;
        v84 = v119;
        v64 = v121;
        v83 = v120;
        v87 = v122;
        v86 = v123;
        v65 = v125;
        v85 = v124;
        v93 = v126;
        v91 = v127;
        v66 = v129;
        v89 = v128;
        v101 = MEMORY[0x22E2F52FC](v114, v115, v116, v117);
        v94 = v67;
        swift_bridgeObjectRelease();
        v68 = MEMORY[0x22E2F52FC](v59, v60, v61, v62);
        v70 = v69;
        swift_bridgeObjectRelease();
        v71 = MEMORY[0x22E2F52FC](v63, v84, v83, v64);
        v73 = v72;
        swift_bridgeObjectRelease();
        v74 = MEMORY[0x22E2F52FC](v87, v86, v85, v65);
        v76 = v75;
        swift_bridgeObjectRelease();
        v77 = MEMORY[0x22E2F52FC](v93, v91, v89, v66);
        v79 = v78;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v92 + 8))(v88, v32);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v102, v103);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v104, v105);
        result = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v98, v100);
        v80 = v96;
        *(_QWORD *)v96 = 2;
        v81 = v94;
        v80[1] = v101;
        v80[2] = v81;
        v80[3] = v68;
        v80[4] = v70;
        v80[5] = v71;
        v80[6] = v73;
        v80[7] = v74;
        v80[8] = v76;
        v80[9] = v77;
        v80[10] = v79;
      }
    }
    else
    {
      (*(void (**)(void))(v27 + 32))();
      Regex.Match.output.getter();
      swift_bridgeObjectRelease();
      v39 = v110;
      v40 = v111;
      v41 = v112;
      v42 = v113;
      v102 = v24;
      v43 = v118;
      v44 = v119;
      v45 = v121;
      v87 = v120;
      v91 = v122;
      v90 = v123;
      v46 = v125;
      v88 = v124;
      v101 = MEMORY[0x22E2F52FC](v114, v115, v116, v117);
      v92 = v47;
      swift_bridgeObjectRelease();
      v48 = MEMORY[0x22E2F52FC](v39, v40, v41, v42);
      v50 = v49;
      swift_bridgeObjectRelease();
      v51 = MEMORY[0x22E2F52FC](v43, v44, v87, v45);
      v53 = v52;
      swift_bridgeObjectRelease();
      v54 = MEMORY[0x22E2F52FC](v91, v90, v88, v46);
      v56 = v55;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v89, v28);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v102, v103);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v104, v105);
      result = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v98, v100);
      v57 = v96;
      *(_QWORD *)v96 = 1;
      v58 = v92;
      v57[1] = v101;
      v57[2] = v58;
      v57[3] = v48;
      v57[4] = v50;
      v57[5] = 0;
      v57[6] = 0;
      v57[7] = v51;
      v57[8] = v53;
      v57[9] = v54;
      v57[10] = v56;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    v35 = MEMORY[0x22E2F52FC](v106, v107, v108, v109);
    v37 = v36;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v18, v103);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v104, v105);
    result = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v98, v100);
    v38 = v96;
    *(_QWORD *)v96 = 0;
    *((_QWORD *)v38 + 1) = v35;
    *((_QWORD *)v38 + 2) = v37;
    *(_OWORD *)((char *)v38 + 24) = 0u;
    *(_OWORD *)((char *)v38 + 40) = 0u;
    *(_OWORD *)((char *)v38 + 56) = 0u;
    *(_OWORD *)((char *)v38 + 72) = 0u;
  }
  return result;
}

uint64_t Stage.missingReferences.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 aBlock;
  uint64_t (*v22)(uint64_t, uint64_t);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v0 = swift_allocObject();
  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  v2 = (uint64_t *)(v0 + 16);
  *((_QWORD *)&v23 + 1) = partial apply for closure #1 in Stage.getUSDMessages(isWarning:);
  *(_QWORD *)&v24 = v0;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  *(_QWORD *)&v23 = &block_descriptor_13;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RIOPxrUsdStageGatherDiagnostics();
  _Block_release(v3);
  swift_beginAccess();
  v4 = *v2;
  swift_bridgeObjectRetain();
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    type metadata accessor for Stage();
    swift_bridgeObjectRetain();
    v6 = (char **)(v4 + 40);
    do
    {
      v8 = (uint64_t)*(v6 - 1);
      v9 = *v6;
      swift_bridgeObjectRetain();
      static Stage.messageToErrorResult(_:)(v8, v9, &aBlock);
      swift_bridgeObjectRelease();
      v10 = v22;
      if (v22)
      {
        v11 = aBlock;
        v12 = *((_QWORD *)&aBlock + 1);
        v19 = v24;
        v20 = v23;
        v17 = v26;
        v18 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
        v14 = v1[2];
        v13 = v1[3];
        if (v14 >= v13 >> 1)
          v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v1);
        v1[2] = v14 + 1;
        v7 = &v1[11 * v14];
        *((_BYTE *)v7 + 32) = v11;
        v7[5] = v12;
        v7[6] = v10;
        *(_OWORD *)(v7 + 7) = v20;
        *(_OWORD *)(v7 + 9) = v19;
        *(_OWORD *)(v7 + 11) = v18;
        *(_OWORD *)(v7 + 13) = v17;
      }
      v6 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v15 = specialized Set.init<A>(_:)((uint64_t)v1);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t Stage.upAxis.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdStageCopyUpAxis();
  *a1 = result;
  return result;
}

void Stage.upAxis.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdStageSetUpAxis();

}

void (*Stage.upAxis.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrUsdStageCopyUpAxis();
  return Stage.upAxis.modify;
}

void Stage.upAxis.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdStageSetUpAxis();

}

uint64_t Stage.colorConfiguration.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdStageCopyColorConfiguration();
  *a1 = result;
  return result;
}

void Stage.colorConfiguration.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdStageSetColorConfiguration();

}

void (*Stage.colorConfiguration.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrUsdStageCopyColorConfiguration();
  return Stage.colorConfiguration.modify;
}

void Stage.colorConfiguration.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdStageSetColorConfiguration();

}

uint64_t Stage.colorManagementSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdStageCopyColorManagementSystem();
  *a1 = result;
  return result;
}

void Stage.colorManagementSystem.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdStageSetColorManagementSystem();

}

void (*Stage.colorManagementSystem.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrUsdStageCopyColorManagementSystem();
  return Stage.colorManagementSystem.modify;
}

void Stage.colorManagementSystem.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrUsdStageSetColorManagementSystem();

}

uint64_t Stage.startTimeCode.getter()
{
  return RIOPxrUsdStageGetStartTimeCode();
}

uint64_t Stage.startTimeCode.setter()
{
  return RIOPxrUsdStageSetStartTimeCode();
}

uint64_t (*Stage.startTimeCode.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrUsdStageGetStartTimeCode();
  *a1 = v3;
  return Stage.startTimeCode.modify;
}

uint64_t Stage.startTimeCode.modify()
{
  return RIOPxrUsdStageSetStartTimeCode();
}

uint64_t Stage.endTimeCode.getter()
{
  return RIOPxrUsdStageGetEndTimeCode();
}

uint64_t Stage.endTimeCode.setter()
{
  return RIOPxrUsdStageSetEndTimeCode();
}

uint64_t (*Stage.endTimeCode.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrUsdStageGetEndTimeCode();
  *a1 = v3;
  return Stage.endTimeCode.modify;
}

uint64_t Stage.endTimeCode.modify()
{
  return RIOPxrUsdStageSetEndTimeCode();
}

Swift::Bool __swiftcall Stage.hasAuthoredTimeCodeRange()()
{
  return RIOPxrUsdStageHasAuthoredTimeCodeRange();
}

uint64_t Stage.timeCodesPerSecond.getter()
{
  return RIOPxrUsdStageGetTimeCodesPerSecond();
}

uint64_t Stage.timeCodesPerSecond.setter()
{
  return RIOPxrUsdStageSetTimeCodesPerSecond();
}

uint64_t (*Stage.timeCodesPerSecond.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrUsdStageGetTimeCodesPerSecond();
  *a1 = v3;
  return Stage.timeCodesPerSecond.modify;
}

uint64_t Stage.timeCodesPerSecond.modify()
{
  return RIOPxrUsdStageSetTimeCodesPerSecond();
}

uint64_t Stage.framesPerSecond.getter()
{
  return RIOPxrUsdStageGetFramesPerSecond();
}

uint64_t Stage.framesPerSecond.setter()
{
  return RIOPxrUsdStageSetFramesPerSecond();
}

uint64_t (*Stage.framesPerSecond.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrUsdStageGetFramesPerSecond();
  *a1 = v3;
  return Stage.framesPerSecond.modify;
}

uint64_t Stage.framesPerSecond.modify()
{
  return RIOPxrUsdStageSetFramesPerSecond();
}

Swift::Bool __swiftcall Stage.hasCustomMetadata()()
{
  void *v0;
  char HasCustomLayerMetaData;

  v0 = (void *)RIOPxrUsdStageCopyRootLayer();
  HasCustomLayerMetaData = RIOPxrSdfLayerHasCustomLayerMetaData();

  return HasCustomLayerMetaData;
}

Swift::Void __swiftcall Stage.clearAllCustomMetadata()()
{
  id v0;

  v0 = (id)RIOPxrUsdStageCopyRootLayer();
  RIOPxrSdfLayerClearAllCustomLayerMetaData();

}

_QWORD *specialized ImportSession.init<A>(core:entityType:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t EngineRef;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t RootEntity;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t ComponentByClass;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t aBlock;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;

  v3 = v2;
  v42[1] = a2;
  v5 = type metadata accessor for __EntityRef();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  v10 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)v3 + v11) = v12;
  *(_QWORD *)(v12 + 24) = v13;
  v14 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *v14 = 0;
  v14[1] = 0;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x24BEE4B00];
  if (a1)
  {
    *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
    v15 = a1;
    EngineRef = RIOImportSessionGetEngineRef();
    if (EngineRef
      && (v3[4] = EngineRef, (v17 = (id)RIOImportSessionGetStage()) != 0))
    {
      v18 = v17;
      v42[0] = v8;
      type metadata accessor for Stage();
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v18;
      v3[2] = v19;
      v20 = v18;
      RootEntity = RIOImportSessionGetRootEntity();
      if (RootEntity)
      {
        v22 = RootEntity;
        v23 = v20;
        type metadata accessor for AnchorEntity();
        v24 = swift_dynamicCastMetatype();
        REAnchorComponentGetComponentType();
        REEntityRemoveComponentByClass();
        REAnchoringComponentGetComponentType();
        ComponentByClass = REEntityGetComponentByClass();
        if (v24)
        {
          if (!ComponentByClass)
          {
            REAnchoringComponentGetComponentType();
            REEntityAddComponentByClass();
          }
        }
        else if (ComponentByClass)
        {
          REAnchoringComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        type metadata accessor for ModelEntity();
        if (swift_dynamicCastMetatype())
        {
          v46 = (void *)MEMORY[0x24BEE27D0];
          aBlock = v22;
          v27 = v42[0];
          static __EntityRef.__fromCore(_:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
          swift_allocObject();
          v28 = MEMORY[0x22E2F4228](v27);
        }
        else
        {
          type metadata accessor for BodyTrackedEntity();
          if (swift_dynamicCastMetatype())
          {
            v46 = (void *)MEMORY[0x24BEE27D0];
            aBlock = v22;
            v29 = v42[0];
            static __EntityRef.__fromCore(_:)();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
            swift_allocObject();
            v28 = MEMORY[0x22E2F4414](v29);
          }
          else
          {
            if (!swift_dynamicCastMetatype())
            {
              type metadata accessor for Entity();
              v46 = (void *)MEMORY[0x24BEE27D0];
              aBlock = v22;
              v41 = v42[0];
              static __EntityRef.__fromCore(_:)();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
              v31 = static Entity.__fromCore(_:)();
              (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v41, v5);
              goto LABEL_23;
            }
            v46 = (void *)MEMORY[0x24BEE27D0];
            aBlock = v22;
            v30 = v42[0];
            static __EntityRef.__fromCore(_:)();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
            swift_allocObject();
            v28 = MEMORY[0x22E2F4294](v30);
          }
        }
        v31 = v28;
LABEL_23:
        v32 = MEMORY[0x24BEE4B00];
        v3[3] = v31;
        type metadata accessor for BehaviorsCommitter();
        v33 = (_QWORD *)swift_allocObject();
        v33[3] = v32;
        swift_retain();
        v33[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v33[2] = v31;
        *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v33;
        v34 = swift_allocObject();
        swift_weakInit();
        v47 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
        v48 = v34;
        v35 = MEMORY[0x24BDAC760];
        aBlock = MEMORY[0x24BDAC760];
        v44 = 1107296256;
        v45 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
        v46 = &block_descriptor_75;
        v36 = _Block_copy(&aBlock);
        swift_release();
        v37 = v3[3];
        v38 = swift_allocObject();
        swift_weakInit();
        swift_unownedRetainStrong();
        swift_unownedRetain();
        swift_release();
        v39 = swift_allocObject();
        *(_QWORD *)(v39 + 16) = v37;
        *(_QWORD *)(v39 + 24) = v38;
        v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in ImportSession.init<A>(core:entityType:)partial apply;
        v48 = v39;
        aBlock = v35;
        v44 = 1107296256;
        v45 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
        v46 = &block_descriptor_83;
        v40 = _Block_copy(&aBlock);
        swift_release();
        RIOImportSessionSetRegistrationForScenes();
        _Block_release(v40);
        _Block_release(v36);
        RIOImportSessionSetSwiftObject();
        ImportSession.registerDefaultSwiftBuilders()();

        return v3;
      }

      swift_release();
    }
    else
    {

    }
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

  }
  else
  {
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)((char *)v3
                                                                         + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
  swift_bridgeObjectRelease();
  type metadata accessor for ImportSession(0);
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t type metadata accessor for Stage()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type Stage.LoadError and conformance Stage.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError;
  if (!lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Stage.LoadError, &type metadata for Stage.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError;
  if (!lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Stage.LoadError, &type metadata for Stage.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.LoadError and conformance Stage.LoadError);
  }
  return result;
}

_QWORD *specialized ImportSession.init<A>(core:entityType:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t EngineRef;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t RootEntity;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t aBlock;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for __EntityRef();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)v2 + v9) = v10;
  *(_QWORD *)(v10 + 24) = v11;
  v12 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x24BEE4B00];
  if (!a1)
  {
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
    goto LABEL_11;
  }
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
  v13 = a1;
  EngineRef = RIOImportSessionGetEngineRef();
  if (!EngineRef
    || (v2[4] = EngineRef, (v15 = (id)RIOImportSessionGetStage()) == 0))
  {

LABEL_9:
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

LABEL_11:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)((char *)v2
                                                                           + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
    swift_bridgeObjectRelease();
    type metadata accessor for ImportSession(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  v16 = v15;
  type metadata accessor for Stage();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  v2[2] = v17;
  v18 = v16;
  RootEntity = RIOImportSessionGetRootEntity();
  if (!RootEntity)
  {

    swift_release();
    goto LABEL_9;
  }
  v20 = RootEntity;
  REAnchorComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REAnchoringComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    REAnchoringComponentGetComponentType();
    REEntityAddComponentByClass();
  }
  v34 = (void *)MEMORY[0x24BEE27D0];
  aBlock = v20;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  v21 = MEMORY[0x22E2F4294](v6);
  v2[3] = v21;
  type metadata accessor for BehaviorsCommitter();
  v22 = (_QWORD *)swift_allocObject();
  v22[3] = MEMORY[0x24BEE4B00];
  swift_retain();
  v22[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v22[2] = v21;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v22;
  v23 = swift_allocObject();
  swift_weakInit();
  v35 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
  v36 = v23;
  v24 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  v34 = &block_descriptor_62;
  v25 = _Block_copy(&aBlock);
  swift_release();
  v26 = v2[3];
  v27 = swift_allocObject();
  swift_weakInit();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  *(_QWORD *)(v28 + 24) = v27;
  v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in ImportSession.init<A>(core:entityType:)partial apply;
  v36 = v28;
  aBlock = v24;
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  v34 = &block_descriptor_70;
  v29 = _Block_copy(&aBlock);
  swift_release();
  RIOImportSessionSetRegistrationForScenes();
  _Block_release(v29);
  _Block_release(v25);
  RIOImportSessionSetSwiftObject();
  ImportSession.registerDefaultSwiftBuilders()();

  return v2;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t EngineRef;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t RootEntity;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t aBlock;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for __EntityRef();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)v2 + v9) = v10;
  *(_QWORD *)(v10 + 24) = v11;
  v12 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x24BEE4B00];
  if (!a1)
  {
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
LABEL_12:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)((char *)v2
                                                                           + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
    swift_bridgeObjectRelease();
    type metadata accessor for ImportSession(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
  v13 = a1;
  EngineRef = RIOImportSessionGetEngineRef();
  if (!EngineRef
    || (v2[4] = EngineRef, (v15 = (id)RIOImportSessionGetStage()) == 0))
  {

LABEL_11:
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

    goto LABEL_12;
  }
  v16 = v15;
  type metadata accessor for Stage();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  v2[2] = v17;
  v18 = v16;
  RootEntity = RIOImportSessionGetRootEntity();
  if (!RootEntity)
  {

    swift_release();
    goto LABEL_11;
  }
  v20 = RootEntity;
  REAnchorComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REAnchoringComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAnchoringComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
  v34 = (void *)MEMORY[0x24BEE27D0];
  aBlock = v20;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  v21 = MEMORY[0x22E2F4228](v6);
  v2[3] = v21;
  type metadata accessor for BehaviorsCommitter();
  v22 = (_QWORD *)swift_allocObject();
  v22[3] = MEMORY[0x24BEE4B00];
  swift_retain();
  v22[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v22[2] = v21;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v22;
  v23 = swift_allocObject();
  swift_weakInit();
  v35 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
  v36 = v23;
  v24 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  v34 = &block_descriptor_37;
  v25 = _Block_copy(&aBlock);
  swift_release();
  v26 = v2[3];
  v27 = swift_allocObject();
  swift_weakInit();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  *(_QWORD *)(v28 + 24) = v27;
  v35 = partial apply for closure #2 in ImportSession.init<A>(core:entityType:);
  v36 = v28;
  aBlock = v24;
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  v34 = &block_descriptor_44;
  v29 = _Block_copy(&aBlock);
  swift_release();
  RIOImportSessionSetRegistrationForScenes();
  _Block_release(v29);
  _Block_release(v25);
  RIOImportSessionSetSwiftObject();
  ImportSession.registerDefaultSwiftBuilders()();

  return v2;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t EngineRef;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t RootEntity;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t aBlock;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for __EntityRef();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  v8 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)v2 + v9) = v10;
  *(_QWORD *)(v10 + 24) = v11;
  v12 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x24BEE4B00];
  if (!a1)
  {
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
LABEL_12:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)((char *)v2
                                                                           + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
    swift_bridgeObjectRelease();
    type metadata accessor for ImportSession(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
  v13 = a1;
  EngineRef = RIOImportSessionGetEngineRef();
  if (!EngineRef
    || (v2[4] = EngineRef, (v15 = (id)RIOImportSessionGetStage()) == 0))
  {

LABEL_11:
    outlined destroy of Any?((uint64_t)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

    goto LABEL_12;
  }
  v16 = v15;
  type metadata accessor for Stage();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  v2[2] = v17;
  v18 = v16;
  RootEntity = RIOImportSessionGetRootEntity();
  if (!RootEntity)
  {

    swift_release();
    goto LABEL_11;
  }
  v20 = RootEntity;
  REAnchorComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REAnchoringComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAnchoringComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
  v34 = (void *)MEMORY[0x24BEE27D0];
  aBlock = v20;
  static __EntityRef.__fromCore(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  type metadata accessor for BodyTrackedEntity();
  swift_allocObject();
  v21 = MEMORY[0x22E2F4414](v6);
  v2[3] = v21;
  type metadata accessor for BehaviorsCommitter();
  v22 = (_QWORD *)swift_allocObject();
  v22[3] = MEMORY[0x24BEE4B00];
  swift_retain();
  v22[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v22[2] = v21;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v22;
  v23 = swift_allocObject();
  swift_weakInit();
  v35 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
  v36 = v23;
  v24 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  v34 = &block_descriptor_49;
  v25 = _Block_copy(&aBlock);
  swift_release();
  v26 = v2[3];
  v27 = swift_allocObject();
  swift_weakInit();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  *(_QWORD *)(v28 + 24) = v27;
  v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in ImportSession.init<A>(core:entityType:)partial apply;
  v36 = v28;
  aBlock = v24;
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  v34 = &block_descriptor_57;
  v29 = _Block_copy(&aBlock);
  swift_release();
  RIOImportSessionSetRegistrationForScenes();
  _Block_release(v29);
  _Block_release(v25);
  RIOImportSessionSetSwiftObject();
  ImportSession.registerDefaultSwiftBuilders()();

  return v2;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(animResource: AnimationResource, trackNumber: Int)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Stage.MissingReference>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Int32>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Double>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatd>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_double2x2>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_double3x3>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_double4x4>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Builder>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<LazySequence<String>>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>, (uint64_t (*)(_QWORD))MEMORY[0x24BDE69E8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>, (uint64_t (*)(_QWORD))MEMORY[0x24BDE6BC0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>, (uint64_t (*)(_QWORD))MEMORY[0x24BDE6C58]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CompileSession.ImportSessionData>, type metadata accessor for CompileSession.ImportSessionData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.__ImportedScene>, (uint64_t (*)(_QWORD))MEMORY[0x24BDE6718]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>, type metadata accessor for ImportSession.EvaluationFault);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.Path>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[AnimationResource]>, &demangling cache variable for type metadata for [AnimationResource]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[[Double]]>, &demangling cache variable for type metadata for [[Double]]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Int32>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Int32>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Half>>, &demangling cache variable for type metadata for SIMD2<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord2<Half>>, &demangling cache variable for type metadata for TexCoord2<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Half>>, &demangling cache variable for type metadata for SIMD3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color3<Half>>, &demangling cache variable for type metadata for Color3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Point3<Half>>, &demangling cache variable for type metadata for Point3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Normal3<Half>>, &demangling cache variable for type metadata for Normal3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Vector3<Half>>, &demangling cache variable for type metadata for Vector3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord3<Half>>, &demangling cache variable for type metadata for TexCoord3<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Half>>, &demangling cache variable for type metadata for SIMD4<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color4<Half>>, &demangling cache variable for type metadata for Color4<Half>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord2<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Point3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Normal3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Vector3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color4<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord2<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Point3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Normal3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Vector3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TexCoord3<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Color4<Double>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SceneDescriptionFoundations.AssetPath>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>, &demangling cache variable for type metadata for [String : Any]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
          memmove(v14, a4 + 4, 32 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v14 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
          memmove(v14, a4 + 32, 4 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (animResource: AnimationResource, trackNumber: Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Builder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<LazySequence<String>>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Stage.MissingReference.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[8];
  v20 = a1[10];
  v8 = a2[3];
  v7 = a2[4];
  v10 = a2[5];
  v9 = a2[6];
  v11 = a2[8];
  v21 = a2[7];
  v22 = a1[7];
  v17 = a2[9];
  v18 = a1[9];
  v19 = a2[10];
  if (a1[1] == a2[1] && a1[2] == a2[2]
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (v3)
    {
      if (!v7)
        return 0;
      if (v2 != v8 || v3 != v7)
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v5)
    {
      if (!v9)
        return 0;
      if (v4 != v10 || v5 != v9)
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v15 & 1) == 0)
          return result;
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (v6)
    {
      if (!v11)
        return 0;
      if (v22 != v21 || v6 != v11)
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v16 & 1) == 0)
          return result;
      }
    }
    else if (v11)
    {
      return 0;
    }
    if (v20)
    {
      if (v19 && (v18 == v17 && v20 == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        return 1;
    }
    else if (!v19)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5[6];
  unsigned __int8 v6;
  uint64_t v7;
  _BYTE v8[56];

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type InputDescriptor and conformance InputDescriptor();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      outlined init with take of InputDescriptor(v4, (uint64_t)v8);
      outlined retain of InputDescriptor((uint64_t)v8);
      specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)v8);
      outlined consume of InputDescriptor(v5[0], v5[1], v5[2], v5[3], (void *)v5[4], v5[5], v6);
      v4 += 56;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned int *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path, (uint64_t)&type metadata for SceneDescriptionFoundations.Path, (void (*)(id *, void *))specialized Set._Variant.insert(_:));
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type ToolsFoundations.Token and conformance ToolsFoundations.Token, (uint64_t)&type metadata for ToolsFoundations.Token, (void (*)(id *, void *))specialized Set._Variant.insert(_:));
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;
  _BYTE v7[40];

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type OutputDescriptor and conformance OutputDescriptor();
  result = Set.init(minimumCapacity:)();
  v6 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      outlined init with take of OutputDescriptor(v4, (uint64_t)v7);
      outlined retain of OutputDescriptor((uint64_t)v7);
      specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 40;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type Stage.MissingReference and conformance Stage.MissingReference();
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      v5 = *(_OWORD *)(v4 + 48);
      v9[2] = *(_OWORD *)(v4 + 32);
      v9[3] = v5;
      v9[4] = *(_OWORD *)(v4 + 64);
      v10 = *(_QWORD *)(v4 + 80);
      v6 = *(_OWORD *)(v4 + 16);
      v9[0] = *(_OWORD *)v4;
      v9[1] = v6;
      outlined retain of Stage.MissingReference((uint64_t)v9);
      specialized Set._Variant.insert(_:)((uint64_t)&v7, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 88;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9[3];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta();
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    v4 = (void **)(a1 + 48);
    do
    {
      v6 = (uint64_t)*(v4 - 2);
      v5 = *(v4 - 1);
      v7 = *v4;
      v4 += 3;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(v9, v6, v5, v7);
      v8 = (void *)v9[1];

      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  return specialized Set.init<A>(_:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for PrimDirtyState, &lazy protocol witness table cache variable for type PrimDirtyState and conformance PrimDirtyState, (uint64_t)&protocol conformance descriptor for PrimDirtyState, (void (*)(uint64_t *, uint64_t))specialized Set._Variant.insert(_:));
}

{
  return specialized Set.init<A>(_:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDirtyState, &lazy protocol witness table cache variable for type PropertyDirtyState and conformance PropertyDirtyState, (uint64_t)&protocol conformance descriptor for PropertyDirtyState, (void (*)(uint64_t *, uint64_t))specialized Set._Variant.insert(_:));
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for RIOPxrSdfPathRef(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOPxrSdfPathRef and conformance RIOPxrSdfPathRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOPxrSdfPathRef, (uint64_t)&protocol conformance descriptor for RIOPxrSdfPathRef);
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x22E2F57B8](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for StageDirtyState, &lazy protocol witness table cache variable for type StageDirtyState and conformance StageDirtyState, (uint64_t)&protocol conformance descriptor for StageDirtyState, (void (*)(uint64_t *, uint64_t))specialized Set._Variant.insert(_:));
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(id *, void *))
{
  uint64_t v6;
  uint64_t result;
  void **v8;
  void *v9;
  id v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 16);
  a2();
  result = Set.init(minimumCapacity:)();
  v11 = result;
  if (v6)
  {
    v8 = (void **)(a1 + 32);
    do
    {
      v9 = *v8++;
      a4(&v10, v9);

      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t))
{
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  a2(0);
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(a3, a2, a4);
  result = Set.init(minimumCapacity:)();
  v12 = result;
  v17 = result;
  if (v10)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v13)
      return v12;
  }
  else
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v13)
      return v12;
  }
  if (v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v15 = MEMORY[0x22E2F57B8](i, a1);
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain();
      }
      a5(&v16, v15);
      swift_release();
    }
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_22BC724D8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Stage.getUSDMessages(isWarning:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Stage.getUSDMessages(isWarning:)(a1, v1);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Stage.Error and conformance Stage.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Stage.Error and conformance Stage.Error;
  if (!lazy protocol witness table cache variable for type Stage.Error and conformance Stage.Error)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Stage.Error, &type metadata for Stage.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.Error and conformance Stage.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType;
  if (!lazy protocol witness table cache variable for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Stage.MissingReferenceType, &type metadata for Stage.MissingReferenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.MissingReferenceType and conformance Stage.MissingReferenceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Stage.MissingReference and conformance Stage.MissingReference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference;
  if (!lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Stage.MissingReference, &type metadata for Stage.MissingReference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference;
  if (!lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Stage.MissingReference, &type metadata for Stage.MissingReference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stage.MissingReference and conformance Stage.MissingReference);
  }
  return result;
}

uint64_t sub_22BC72720@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrUsdStageGetMetersPerUnit();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC7274C()
{
  return RIOPxrUsdStageSetMetersPerUnit();
}

uint64_t sub_22BC7276C()
{
  return 16;
}

__n128 sub_22BC72778(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BC72784@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdStageCopyUpAxis();
  *a1 = result;
  return result;
}

uint64_t sub_22BC727B0()
{
  return RIOPxrUsdStageSetUpAxis();
}

uint64_t sub_22BC727C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdStageCopyColorConfiguration();
  *a1 = result;
  return result;
}

uint64_t sub_22BC727F0()
{
  return RIOPxrUsdStageSetColorConfiguration();
}

uint64_t sub_22BC72804@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrUsdStageCopyColorManagementSystem();
  *a1 = result;
  return result;
}

uint64_t sub_22BC72830()
{
  return RIOPxrUsdStageSetColorManagementSystem();
}

uint64_t sub_22BC72844@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrUsdStageGetStartTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC72870()
{
  return RIOPxrUsdStageSetStartTimeCode();
}

uint64_t sub_22BC72880@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrUsdStageGetEndTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC728AC()
{
  return RIOPxrUsdStageSetEndTimeCode();
}

uint64_t sub_22BC728BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrUsdStageGetTimeCodesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC728E8()
{
  return RIOPxrUsdStageSetTimeCodesPerSecond();
}

uint64_t sub_22BC728F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrUsdStageGetFramesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC72924()
{
  return RIOPxrUsdStageSetFramesPerSecond();
}

uint64_t method lookup function for Stage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Stage.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of Stage.__allocating_init(identifier:buffer:length:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of Stage.__allocating_init(identifier:data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of Stage.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of Stage.__allocating_init(contentsOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of Stage.__allocating_init(withFilePath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Stage.__allocating_init(contents:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t storeEnumTagSinglePayload for Stage.LoadError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BC729F0 + 4 * byte_22BD0D2D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BC72A10 + 4 * byte_22BD0D2D5[v4]))();
}

_BYTE *sub_22BC729F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BC72A10(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC72A18(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC72A20(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC72A28(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC72A30(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Stage.LoadError()
{
  return &type metadata for Stage.LoadError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Stage.Error()
{
  return &type metadata for Stage.Error;
}

uint64_t getEnumTagSinglePayload for Stage.Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Stage.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22BC72B4C + 4 * byte_22BD0D2DF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22BC72B80 + 4 * byte_22BD0D2DA[v4]))();
}

uint64_t sub_22BC72B80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BC72B88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22BC72B90);
  return result;
}

uint64_t sub_22BC72B9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22BC72BA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22BC72BA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22BC72BB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for Stage.MissingReferenceType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for Stage.MissingReferenceType(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Stage.MissingReferenceType()
{
  return &type metadata for Stage.MissingReferenceType;
}

uint64_t destroy for Stage.MissingReference()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Stage.MissingReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Stage.MissingReference(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Stage.MissingReference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Stage.MissingReference(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Stage.MissingReference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Stage.MissingReference()
{
  return &type metadata for Stage.MissingReference;
}

unint64_t lazy protocol witness table accessor for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.Path, &type metadata for SceneDescriptionFoundations.Path);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.Path, &type metadata for SceneDescriptionFoundations.Path);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for SceneDescriptionFoundations.Path, &type metadata for SceneDescriptionFoundations.Path);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path;
  if (!lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path)
  {
    result = MEMORY[0x22E2F889C]("嬒#tJ", &type metadata for SceneDescriptionFoundations.Path);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptionFoundations.Path and conformance SceneDescriptionFoundations.Path);
  }
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 7) + 32);
    v6 = v4 << 7;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 96 * a1 + 32);
    v6 = 96 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type OutputDescriptor and conformance OutputDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor;
  if (!lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for OutputDescriptor, &type metadata for OutputDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor;
  if (!lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for OutputDescriptor, &type metadata for OutputDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputDescriptor and conformance OutputDescriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InputDescriptor and conformance InputDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor;
  if (!lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for InputDescriptor, &type metadata for InputDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor;
  if (!lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for InputDescriptor, &type metadata for InputDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputDescriptor and conformance InputDescriptor);
  }
  return result;
}

uint64_t outlined retain of InputDescriptor(uint64_t a1)
{
  outlined copy of InputDescriptor(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return a1;
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_22BC73F04()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ImportSession.init<A>(core:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in ImportSession.init<A>(core:entityType:)(a1, a2, a3);
}

void partial apply for closure #2 in ImportSession.init<A>(core:entityType:)(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  closure #2 in ImportSession.init<A>(core:entityType:)(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
}

unint64_t lazy protocol witness table accessor for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta;
  if (!lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Inputs.PropertyDelta, &type metadata for Inputs.PropertyDelta);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta;
  if (!lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Inputs.PropertyDelta, &type metadata for Inputs.PropertyDelta);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Inputs.PropertyDelta and conformance Inputs.PropertyDelta);
  }
  return result;
}

uint64_t objectdestroy_40Tm()
{
  swift_unownedRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t one-time initialization function for customComponents()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.customComponents = result;
  return result;
}

uint64_t removeCustomComponentProxy(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;

  REComponentGetEntity();
  String.utf8CString.getter();
  v5 = REComponentClassFromName();
  swift_release();
  if (v5)
  {
    result = REEntityGetCustomComponent();
    if (result)
    {
      if (one-time initialization token for customComponents != -1)
        swift_once();
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_22BD0C360;
      _StringGuts.grow(_:)(26);
      v8._countAndFlagsBits = 0x676E69766F6D6552;
      v8._object = (void *)0xE900000000000020;
      String.append(_:)(v8);
      v9._countAndFlagsBits = a2;
      v9._object = a3;
      String.append(_:)(v9);
      v10._countAndFlagsBits = 0x6E65206D6F726620;
      v10._object = (void *)0xED00002079746974;
      String.append(_:)(v10);
      REEntityGetName();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<Int8>);
      _print_unlocked<A, B>(_:_:)();
      *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0xE000000000000000;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      return REEntityRemoveComponentByClass();
    }
  }
  else
  {
    if (one-time initialization token for customComponents != -1)
      swift_once();
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_22BD0C360;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = a2;
    v12._object = a3;
    String.append(_:)(v12);
    *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v11 + 32) = 0xD00000000000002FLL;
    *(_QWORD *)(v11 + 40) = 0x800000022BD08D50;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in CustomComponentBuilder.stageSubscription.getter()
{
  uint64_t inited;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  id v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  id v19;
  _QWORD *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ToolsFoundations.Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5C0;
  if (String.count.getter() < 1)
    v1 = (id)RIOPxrTfTokenEmpty();
  else
    v1 = (id)RIOPxrTfTokenCreateWithCString();
  *(_QWORD *)(inited + 32) = v1;
  if (String.count.getter() < 1)
    v2 = (id)RIOPxrTfTokenEmpty();
  else
    v2 = (id)RIOPxrTfTokenCreateWithCString();
  *(_QWORD *)(inited + 40) = v2;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v4 = v3;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (String.count.getter() < 1)
    v5 = (id)RIOPxrTfTokenEmpty();
  else
    v5 = (id)RIOPxrTfTokenCreateWithCString();
  v6 = v5;
  type metadata accessor for NamedPropertyDirtyState();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = v6;
  v8 = v6;
  v9 = MEMORY[0x24BEE4B08];
  v10 = generateCore #1 () in NamedPropertyDirtyState.init(propertyName:propertyMetadataContainsAnyOf:core:)(0, v8, MEMORY[0x24BEE4B08]);

  v7[2] = v9;
  v7[3] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v11 + 32) = v7;
  v26 = v11;
  specialized Array._endMutation()();
  swift_retain();
  v12 = specialized static PropertyDirtyStateBuilder.buildBlock(_:)(v26);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for TypeNamePrimDirtyState();
  v13 = (_QWORD *)swift_allocObject();
  v13[5] = v4;
  swift_bridgeObjectRetain();
  v14 = generateCore #1 () in TypeNamePrimDirtyState.init(typeNameIsAnyOf:primMetadataContainsAnyOf:propertiesContainAnyOf:core:)(0, v4, v12, v9);
  swift_bridgeObjectRelease();
  v13[2] = v9;
  v13[3] = v12;
  v13[4] = v14;
  swift_retain();
  if (String.count.getter() < 1)
    v15 = (id)RIOPxrTfTokenEmpty();
  else
    v15 = (id)RIOPxrTfTokenCreateWithCString();
  v26 = (unint64_t)v15;
  v16 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  swift_retain();
  if (String.count.getter() < 1)
    v17 = (id)RIOPxrTfTokenEmpty();
  else
    v17 = (id)RIOPxrTfTokenCreateWithCString();
  v26 = (unint64_t)v17;
  v18 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  swift_retain();
  if (String.count.getter() < 1)
    v19 = (id)RIOPxrTfTokenEmpty();
  else
    v19 = (id)RIOPxrTfTokenCreateWithCString();
  v26 = (unint64_t)v19;
  v20 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  swift_retain();
  if (String.count.getter() < 1)
    v21 = (id)RIOPxrTfTokenEmpty();
  else
    v21 = (id)RIOPxrTfTokenCreateWithCString();
  v26 = (unint64_t)v21;
  v22 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v26);
  v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_22BD0D660;
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v16;
  *(_QWORD *)(v23 + 48) = v18;
  *(_QWORD *)(v23 + 56) = v20;
  *(_QWORD *)(v23 + 64) = v22;
  v26 = v23;
  specialized Array._endMutation()();
  v24 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v26);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v24;
}

void CustomComponentBuilder.run(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t SwiftObject;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v1 = v0;
  v65 = *MEMORY[0x24BDAC8D0];
  v2 = (id)RIOBuilderInputsGetImportSession();
  if (!v2)
  {
    __break(1u);
LABEL_46:
    __break(1u);
  }
  v3 = v2;
  SwiftObject = RIOImportSessionGetSwiftObject();

  if (!SwiftObject)
    goto LABEL_46;
  swift_retain();
  swift_weakAssign();
  swift_release();
  Inputs.prim.getter();
  v5 = *(id *)(v1 + 40);
  if (!RIOPxrUsdPrimHasAttribute())
  {
    v6 = v5;
LABEL_23:

    goto LABEL_24;
  }
  v6 = (void *)RIOPxrUsdPrimCopyAttribute();
  v7 = RIOPxrUsdAttributeCopyValue();
  if (!v7)
  {

    goto LABEL_23;
  }
  v8 = (void *)v7;
  v9 = (void *)RIOPxrVtValueCopyToken();

  if (!v9)
  {
LABEL_24:
    specialized CustomComponentBuilder.clear(inputs:)();
    swift_release();
    return;
  }
  v10 = (void *)RIOPxrTfTokenCopyString();
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      v61 = v13;
      v24 = v11;
      if (one-time initialization token for customComponents != -1)
        swift_once();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_22BD0C5C0;
      v26 = (void *)RIOPxrUsdObjectCopyPath();
      v27 = (void *)RIOPxrSdfPathCopyString();
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      v31 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
      v32 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v25 + 32) = v28;
      *(_QWORD *)(v25 + 40) = v30;
      *(_QWORD *)(v25 + 96) = v31;
      *(_QWORD *)(v25 + 104) = v32;
      *(_QWORD *)(v25 + 64) = v32;
      *(_QWORD *)(v25 + 72) = v24;
      *(_QWORD *)(v25 + 80) = v61;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v14 = static EntityBuilder.OutputName;
  v15 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v14, v15, &v63);
  if (!v64)
  {
    outlined destroy of Any?((uint64_t)&v63);
    goto LABEL_29;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    if (one-time initialization token for customComponents != -1)
      swift_once();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v33 + 32) = v11;
    *(_QWORD *)(v33 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    swift_release();
    goto LABEL_32;
  }
  v16 = v62;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v1 + 24);
  if (v17)
  {
    v18 = *(_QWORD *)(v1 + 16);
    if ((v18 != v11 || v17 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      CustomComponentBuilder.removeProxyComponent()();
      if (v19)
      {
        v59 = v11;
        if (one-time initialization token for customComponents != -1)
          swift_once();
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_22BD0C5C0;
        *(_QWORD *)(v20 + 56) = MEMORY[0x24BEE0D00];
        v21 = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v20 + 64) = v21;
        *(_QWORD *)(v20 + 32) = v18;
        *(_QWORD *)(v20 + 40) = v17;
        swift_getErrorValue();
        v22 = Error.localizedDescription.getter();
        *(_QWORD *)(v20 + 96) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v20 + 104) = v21;
        *(_QWORD *)(v20 + 72) = v22;
        *(_QWORD *)(v20 + 80) = v23;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        v11 = v59;
        v16 = v62;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  *(_QWORD *)(v1 + 16) = v11;
  *(_QWORD *)(v1 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((RIOPxrUsdPrimIsActive() & 1) != 0)
  {
    v60 = v11;
    v34 = (void *)componentPrimToDictionary(component:)();
    v35 = (void *)objc_opt_self();
    *(_QWORD *)&v63 = 0;
    v36 = objc_msgSend(v35, sel_dataWithJSONObject_options_error_, v34, 0, &v63);
    v37 = (id)v63;
    if (v36)
    {
      v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v40 = v39;

      outlined copy of Data._Representation(v38, v40);
      CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(v16, v38, v40);
      outlined consume of Data._Representation(v38, v40);

      swift_release();
      outlined consume of Data._Representation(v38, v40);
      swift_release();
LABEL_32:
      swift_bridgeObjectRelease();
      return;
    }
    v52 = v37;
    v53 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for customComponents != -1)
      swift_once();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_22BD0C5C0;
    v55 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v54 + 56) = MEMORY[0x24BEE0D00];
    v56 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v54 + 64) = v56;
    *(_QWORD *)(v54 + 32) = v60;
    *(_QWORD *)(v54 + 40) = v13;
    swift_getErrorValue();
    v57 = Error.localizedDescription.getter();
    *(_QWORD *)(v54 + 96) = v55;
    *(_QWORD *)(v54 + 104) = v56;
    *(_QWORD *)(v54 + 72) = v57;
    *(_QWORD *)(v54 + 80) = v58;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
  }
  else
  {
    CustomComponentBuilder.removeProxyComponent()();
    if (v41)
    {
      if (one-time initialization token for customComponents != -1)
        swift_once();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_22BD0C760;
      v43 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v42 + 56) = MEMORY[0x24BEE0D00];
      v44 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v42 + 64) = v44;
      *(_QWORD *)(v42 + 32) = v11;
      *(_QWORD *)(v42 + 40) = v13;
      v45 = (void *)RIOPxrUsdObjectCopyPath();
      v46 = (void *)RIOPxrSdfPathCopyString();
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v49 = v48;

      *(_QWORD *)(v42 + 96) = v43;
      *(_QWORD *)(v42 + 104) = v44;
      *(_QWORD *)(v42 + 72) = v47;
      *(_QWORD *)(v42 + 80) = v49;
      swift_getErrorValue();
      v50 = Error.localizedDescription.getter();
      *(_QWORD *)(v42 + 136) = v43;
      *(_QWORD *)(v42 + 144) = v44;
      *(_QWORD *)(v42 + 112) = v50;
      *(_QWORD *)(v42 + 120) = v51;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
}

void CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  void *v14;
  char isEscapingClosureAtFileLocation;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v20 = a1;
  v7 = type metadata accessor for CustomComponentProxy();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v3[3];
  if (v11)
  {
    v21 = v3[2];
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v18[2] = Strong;
      v19 = v7;
      v18[0] = v4;
      v18[1] = v18;
      MEMORY[0x24BDAC7A8](Strong);
      v18[-2] = v21;
      v18[-1] = v11;
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = partial apply for closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:);
      *(_QWORD *)(v13 + 24) = &v18[-4];
      aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_7;
      v14 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      RIOBuilderInputsPerformBlockSyncOnEngineQueue();
      _Block_release(v14);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        outlined copy of Data._Representation(a2, a3);
        CustomComponentProxy.init(with:)();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        v16 = REComponentClassFromName();
        swift_release();
        if (v16)
        {
          v17 = specialized setCustomComponentProxy(_:_:_:)(v20, v16, (uint64_t)v10);
          swift_release();
          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
          v3[4] = v17;
        }
        else
        {
          lazy protocol witness table accessor for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError();
          swift_allocError();
          swift_willThrow();
          swift_release();
          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
        }
      }
    }
  }
}

uint64_t closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  String.utf8CString.getter();
  v4 = REComponentClassFromName();
  result = swift_release();
  if (!v4)
  {
    type metadata accessor for CustomComponentProxy();
    result = static Component.registerComponentProxy(componentName:)();
    if (!result)
    {
      if (one-time initialization token for customComponents != -1)
        swift_once();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_22BD0C360;
      *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v6 + 32) = a1;
      *(_QWORD *)(v6 + 40) = a2;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:type:_:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CustomComponentBuilder.removeProxyComponent()()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;

  v1 = (void *)v0[3];
  if (v1 && (v2 = v0[4]) != 0)
  {
    v3 = v0[2];
    v4 = one-time initialization token for customComponents;
    swift_bridgeObjectRetain();
    if (v4 != -1)
      swift_once();
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_22BD0C360;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = v3;
    v6._object = v1;
    String.append(_:)(v6);
    *(_QWORD *)(v5 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v5 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v5 + 32) = 0xD000000000000027;
    *(_QWORD *)(v5 + 40) = 0x800000022BD08D20;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    removeCustomComponentProxy(_:_:)(v2, v3, v1);
    swift_bridgeObjectRelease();
    v0[4] = 0;
  }
  else
  {
    lazy protocol witness table accessor for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t CustomComponentBuilder.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustomComponentBuilder()
{
  return objc_opt_self();
}

uint64_t CustomComponentBuilder.init()()
{
  uint64_t v0;
  id v1;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  if (String.count.getter() < 1)
    v1 = (id)RIOPxrTfTokenEmpty();
  else
    v1 = (id)RIOPxrTfTokenCreateWithCString();
  *(_QWORD *)(v0 + 40) = v1;
  *(_BYTE *)(v0 + 48) = 2;
  swift_weakInit();
  return v0;
}

uint64_t protocol witness for Builder.stageSubscription.getter in conformance CustomComponentBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v5;

  v0 = closure #1 in CustomComponentBuilder.stageSubscription.getter();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v1 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v5 = inited;
  specialized Array._endMutation()();
  v3 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v5);
  swift_bridgeObjectRelease();
  return v3;
}

void protocol witness for Builder.buildOrder.getter in conformance CustomComponentBuilder(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t protocol witness for Builder.inputDescriptors() in conformance CustomComponentBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[6];
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD v7[6];
  char v8;

  v6 = MEMORY[0x24BEE4B08];
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v1 = static EntityBuilder.OutputName;
  v0 = *(_QWORD *)algn_255BED398;
  v2 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v7[0] = v1;
  v7[1] = v0;
  v7[2] = static EntityBuilder.OutputIdentifier;
  v7[3] = *(_QWORD *)algn_255BFA2C8;
  v7[4] = 0;
  v7[5] = 0;
  v8 = 112;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)v7);
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t specialized setCustomComponentProxy(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t CustomComponent;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for CustomComponentProxy();
  v15 = v4;
  v16 = MEMORY[0x24BDE79F8];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, a3, v4);
  __AssetRef.__as<A>(_:)();
  CustomComponent = REEntityGetCustomComponent();
  v7 = MEMORY[0x24BEE0D00];
  if (CustomComponent)
    goto LABEL_5;
  if (one-time initialization token for customComponents != -1)
    swift_once();
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22BD0C360;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v14, v15);
  swift_getDynamicType();
  v9._countAndFlagsBits = dispatch thunk of static Component.componentName.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x20656874206F7420;
  v10._object = (void *)0xEF20797469746E65;
  String.append(_:)(v10);
  __AssetRef.__as<A>(_:)();
  REEntityGetName();
  v11._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 56) = v7;
  *(_QWORD *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v8 + 32) = 0xD00000000000001CLL;
  *(_QWORD *)(v8 + 40) = 0x800000022BD08D80;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  CustomComponent = REEntityAddComponentByClass();
  if (CustomComponent)
  {
LABEL_5:
    if (one-time initialization token for customComponents != -1)
      swift_once();
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v12 + 56) = v7;
    *(_QWORD *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v12 + 32) = 0xD00000000000003BLL;
    *(_QWORD *)(v12 + 40) = 0x800000022BD08DA0;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if (RECustomComponentGetObject())
      static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)();
    RENetworkMarkComponentDirty();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  return CustomComponent;
}

void specialized CustomComponentBuilder.clear(inputs:)()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;

  if (one-time initialization token for customComponents != -1)
    swift_once();
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22BD0C360;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v0 + 56) = MEMORY[0x24BEE0D00];
  v3 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v0 + 32) = 0x7261656C63206E49;
  *(_QWORD *)(v0 + 40) = 0xEA0000000000203ALL;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  CustomComponentBuilder.removeProxyComponent()();
  if (v4)
  {
    static os_log_type_t.error.getter();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_22BD0C360;
    _StringGuts.grow(_:)(59);
    v6._object = (void *)0x800000022BD08C90;
    v6._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v6);
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 8238;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    *(_QWORD *)(v5 + 56) = v2;
    *(_QWORD *)(v5 + 64) = v3;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0xE000000000000000;
    type metadata accessor for OS_os_log();
    v9 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

  }
}

unint64_t lazy protocol witness table accessor for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError;
  if (!lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for CustomComponentBuilder.ComponentRegistryError, &type metadata for CustomComponentBuilder.ComponentRegistryError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError;
  if (!lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for CustomComponentBuilder.ComponentRegistryError, &type metadata for CustomComponentBuilder.ComponentRegistryError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentBuilder.ComponentRegistryError and conformance CustomComponentBuilder.ComponentRegistryError);
  }
  return result;
}

uint64_t partial apply for closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:)()
{
  uint64_t v0;

  return closure #1 in CustomComponentBuilder.addProxyComponent(entity:with:inputs:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_22BC75F70()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for CustomComponentBuilder.ComponentRegistryError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BC75FD8 + 4 * byte_22BD0D679[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BC75FF8 + 4 * byte_22BD0D67E[v4]))();
}

_BYTE *sub_22BC75FD8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BC75FF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC76000(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC76008(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC76010(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC76018(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CustomComponentBuilder.ComponentRegistryError()
{
  return &type metadata for CustomComponentBuilder.ComponentRegistryError;
}

uint64_t ModelSortGroupBuilder.run(inputs:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v5[4];
  _QWORD aBlock[6];

  v5[3] = *v0;
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = partial apply for closure #1 in ModelSortGroupBuilder.run(inputs:);
  *(_QWORD *)(v1 + 24) = v5;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8;
  v2 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v2);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in ModelSortGroupBuilder.run(inputs:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  id v39;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48[3];
  uint64_t v49;

  v2 = type metadata accessor for ModelSortGroup();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v42 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v42 - v17;
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v3 + 56);
  v44((char *)&v42 - v17, 1, 1, v2, v16);
  v19 = (uint64_t)a1 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup;
  swift_beginAccess();
  outlined assign with take of ModelSortGroup?((uint64_t)v18, v19);
  swift_endAccess();
  specialized Builder.prim.getter();
  v20 = String.count.getter();
  v43 = v14;
  v45 = v19;
  v46 = v8;
  v21 = a1;
  v22 = v3;
  if (v20 < 1)
    v23 = (id)RIOPxrTfTokenEmpty();
  else
    v23 = (id)RIOPxrTfTokenCreateWithCString();
  v24 = v23;
  v25 = specialized Prim.attributeValue<A>(of:type:)();
  v27 = v26;

  swift_release();
  if (v27)
  {
    if (v25 == 0x73736150657270 && v27 == 0xE700000000000000)
      goto LABEL_10;
  }
  else
  {
    v27 = 0xE400000000000000;
    v25 = 1701736270;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v28 = *MEMORY[0x24BDE7648];
    v29 = type metadata accessor for ModelSortGroup.DepthPass();
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v11, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v11, 0, 1, v29);
    v31 = (uint64_t)v43;
    goto LABEL_17;
  }
  if (v25 == 0x7373615074736F70 && v27 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v31 = (uint64_t)v43;
LABEL_15:
    v33 = *MEMORY[0x24BDE7650];
    v34 = type metadata accessor for ModelSortGroup.DepthPass();
    v35 = *(_QWORD *)(v34 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v11, v33, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v11, 0, 1, v34);
    goto LABEL_17;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v31 = (uint64_t)v43;
  if ((v32 & 1) != 0)
    goto LABEL_15;
  v36 = type metadata accessor for ModelSortGroup.DepthPass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v11, 1, 1, v36);
LABEL_17:
  outlined init with copy of ModelSortGroup.DepthPass?((uint64_t)v11, (uint64_t)v46);
  ModelSortGroup.init(depthPass:)();
  v37 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v37(v18, v5, v2);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v44)(v18, 0, 1, v2);
  outlined init with take of ModelSortGroup?((uint64_t)v18, v31);
  v38 = v45;
  swift_beginAccess();
  outlined assign with take of ModelSortGroup?(v31, v38);
  swift_endAccess();
  swift_beginAccess();
  v39 = objc_getAssociatedObject(v21, &static BuilderAssociatedKeys.OutputsReference);
  result = swift_endAccess();
  if (v39)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v47, v48);
    type metadata accessor for Outputs();
    swift_dynamicCast();
    v49 = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v48);
    v37((char *)boxed_opaque_existential_1, v5, v2);
    Outputs.subscript.setter((uint64_t)v48, 0xD000000000000014, 0x800000022BD06D50);
    swift_release();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
    return outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Builder.prim.getter()
{
  void *v0;
  id v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  __int128 v5;
  __int128 v6;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static BuilderAssociatedKeys.CoreReference);
  result = swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v5, &v6);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    v3 = RIOBuilderCopyPrim();

    type metadata accessor for Prim();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ModelSortGroupBuilder.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Any?(v0 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup, &demangling cache variable for type metadata for ModelSortGroup?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupBuilder()
{
  uint64_t v0;

  v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of protocol witness for Builder.outputDescriptors() in conformance ModelSortGroupBuilder);
  swift_arrayDestroy();
  return v0;
}

uint64_t protocol witness for Builder.clear(inputs:) in conformance ModelSortGroupBuilder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ModelSortGroup();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup;
  swift_beginAccess();
  outlined assign with take of ModelSortGroup?((uint64_t)v3, v5);
  return swift_endAccess();
}

id static MeshSortingConstants.MeshSortingGroup.primType.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (one-time initialization token for primType != -1)
    swift_once();
  v2 = (void *)static MeshSortingConstants.MeshSortingGroup.primType;
  *a1 = static MeshSortingConstants.MeshSortingGroup.primType;
  return v2;
}

uint64_t ObjC metadata update function for ModelSortGroupBuilder()
{
  return type metadata accessor for ModelSortGroupBuilder();
}

uint64_t type metadata accessor for ModelSortGroupBuilder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModelSortGroupBuilder;
  if (!type metadata singleton initialization cache for ModelSortGroupBuilder)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ModelSortGroupBuilder()
{
  unint64_t v0;

  type metadata accessor for ModelSortGroup?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for ModelSortGroup?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModelSortGroup?)
  {
    type metadata accessor for ModelSortGroup();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModelSortGroup?);
  }
}

ValueMetadata *type metadata accessor for MeshSortingConstants()
{
  return &type metadata for MeshSortingConstants;
}

ValueMetadata *type metadata accessor for MeshSortingConstants.MeshSortingGroup()
{
  return &type metadata for MeshSortingConstants.MeshSortingGroup;
}

uint64_t outlined assign with take of ModelSortGroup?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized ModelSortGroupBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  if (one-time initialization token for primType != -1)
    swift_once();
  v9 = static MeshSortingConstants.MeshSortingGroup.primType;
  v0 = (id)static MeshSortingConstants.MeshSortingGroup.primType;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()();
  v3 = v9;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v9 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t partial apply for closure #1 in ModelSortGroupBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in ModelSortGroupBuilder.run(inputs:)(*(void **)(v0 + 16));
}

uint64_t sub_22BC76BDC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t outlined init with copy of ModelSortGroup.DepthPass?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModelSortGroup?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t one-time initialization function for iblComponents()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.iblComponents = result;
  return result;
}

id one-time initialization function for entityRelationshipName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ImageBasedLightReceiverBuilder.entityRelationshipName = (uint64_t)result;
  return result;
}

{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static ModelSortGroupComponentBuilder.entityRelationshipName = (uint64_t)result;
  return result;
}

uint64_t ImageBasedLightReceiverBuilder.inputDescriptors()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4[6];
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[6];
  char v15;

  v1 = *v0;
  v6 = MEMORY[0x24BEE4B08];
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = specialized closure #2 in ImageBasedLightReceiverBuilder.inputDescriptors();
  v2[3] = 0;
  v2[4] = closure #1 in ImageBasedLightReceiverBuilder.inputDescriptors();
  v2[5] = 0;
  v2[6] = v1;
  if (one-time initialization token for OutputIdentifier != -1)
    swift_once();
  v14[0] = 0xD000000000000010;
  v14[1] = 0x800000022BD07270;
  v14[2] = static EntityBuilder.OutputIdentifier;
  v14[3] = *(_QWORD *)algn_255BFA2C8;
  v14[4] = partial apply for closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors();
  v14[5] = v2;
  v15 = -127;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Set._Variant.insert(_:)((uint64_t)&v7, (uint64_t)v14);
  outlined consume of InputDescriptor(v7, v8, v9, v10, v11, v12, v13);
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v7 = static EntityBuilder.OutputName;
  v8 = *(_QWORD *)algn_255BED398;
  v9 = static EntityBuilder.OutputIdentifier;
  v10 = *(_QWORD *)algn_255BFA2C8;
  v11 = 0;
  v12 = 0;
  v13 = 112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)&v7);
  swift_release();
  outlined consume of InputDescriptor(v4[0], v4[1], v4[2], v4[3], (void *)v4[4], v4[5], v5);
  return v6;
}

uint64_t closure #1 in ImageBasedLightReceiverBuilder.inputDescriptors()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (RIOPxrUsdPrimHasRelationship())
  {
    v0 = RIOPxrUsdPrimCopyRelationship();
    type metadata accessor for Relationship();
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = v0;
    v2 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v1, 0);
    v3 = specialized Set.init<A>(_:)(v2);
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v11 = *a2;
  v6 = a3(a1, &v11);
  if (!v6)
    return MEMORY[0x24BEE4B08];
  v7 = v6;
  swift_bridgeObjectRelease();
  if (one-time initialization token for entityRelationshipName != -1)
    swift_once();
  v11 = static ImageBasedLightReceiverBuilder.entityRelationshipName;
  v8 = (id)static ImageBasedLightReceiverBuilder.entityRelationshipName;
  v9 = a5(&v11, v7);

  swift_release();
  return v9;
}

uint64_t ImageBasedLightReceiverBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];
  _QWORD aBlock[6];

  v2 = *v1;
  v7[2] = a1;
  v7[4] = v2;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in ImageBasedLightReceiverBuilder.run(inputs:);
  *(_QWORD *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_9;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in ImageBasedLightReceiverBuilder.run(inputs:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t SwiftObject;
  id v43;
  uint64_t EntityAtPrimPath;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  _BYTE *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD v61[2];
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v3 = type metadata accessor for __EntityRef();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Inputs.prim.getter();
  v7 = (void *)RIOPxrUsdObjectCopyName();
  v8 = (void *)RIOPxrTfTokenCopyString();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  if (one-time initialization token for infoID != -1)
    swift_once();
  v12 = (id)static ImageBasedLightReceiverBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_bridgeObjectRelease();

LABEL_23:
    ImageBasedLightReceiverBuilder.clear(inputs:)();
    swift_release();
    return;
  }
  v64 = v9;
  v13 = (void *)RIOPxrUsdPrimCopyAttribute();
  v14 = RIOPxrUsdAttributeCopyValue();
  if (!v14)
  {
    swift_bridgeObjectRelease();

    goto LABEL_23;
  }
  v15 = (void *)v14;
  v63 = a2;
  v16 = RIOPxrVtValueCopyToken();
  if (!v16)
  {
    swift_bridgeObjectRelease();

    goto LABEL_23;
  }
  v17 = (void *)v16;

  v18 = (void *)RIOPxrTfTokenCopyString();
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  if (v19 == 0xD000000000000022 && v21 == 0x800000022BD09110)
  {
    swift_bridgeObjectRelease();
    v22 = v64;
    goto LABEL_13;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v22 = v64;
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_13:
  if (Prim.parent.getter())
  {
    if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
    {
      if (one-time initialization token for iblComponents != -1)
        swift_once();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_22BD0C5C0;
      v28 = (void *)RIOPxrUsdObjectCopyPath();
      v29 = (void *)RIOPxrSdfPathCopyString();
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      v33 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE0D00];
      v34 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v27 + 32) = v30;
      *(_QWORD *)(v27 + 40) = v32;
      *(_QWORD *)(v27 + 96) = v33;
      *(_QWORD *)(v27 + 104) = v34;
      v35 = v64;
      *(_QWORD *)(v27 + 64) = v34;
      *(_QWORD *)(v27 + 72) = v35;
      *(_QWORD *)(v27 + 80) = v11;
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_release();
  }
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v24 = static EntityBuilder.OutputName;
  v25 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v24, v25, &v67);
  if (v68)
  {
    type metadata accessor for EntityProxy();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v26 = v66;
      swift_bridgeObjectRelease();
      if ((RIOPxrUsdPrimIsActive() & 1) == 0
        || (v62 = v26,
            v37 = specialized Inputs.pathsForRelationship(named:requestContext:)(),
            swift_bridgeObjectRelease(),
            !*(_QWORD *)(v37 + 16)))
      {
        swift_bridgeObjectRelease();
        ImageBasedLightReceiverBuilder.clear(inputs:)();
        swift_release();
        swift_release();
        return;
      }
      v38 = *(id *)(v37 + 32);
      swift_bridgeObjectRelease();
      v39 = v38;
      v40 = (id)RIOBuilderInputsGetImportSession();
      if (v40)
      {
        v41 = v40;
        SwiftObject = RIOImportSessionGetSwiftObject();

        if (SwiftObject)
        {
          swift_retain();
          swift_beginAccess();
          v43 = v39;
          EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
          if (!EntityAtPrimPath)
          {

            swift_release();
            if (one-time initialization token for iblComponents != -1)
              swift_once();
            v64 = static OS_os_log.iblComponents;
            v61[1] = static os_log_type_t.debug.getter();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            v51 = swift_allocObject();
            *(_OWORD *)(v51 + 16) = xmmword_22BD0C5C0;
            __AssetRef.__as<A>(_:)();
            REEntityGetName();
            v52 = String.init(cString:)();
            v54 = v53;
            v55 = MEMORY[0x24BEE0D00];
            *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE0D00];
            v56 = lazy protocol witness table accessor for type String and conformance String();
            *(_QWORD *)(v51 + 64) = v56;
            *(_QWORD *)(v51 + 32) = v52;
            *(_QWORD *)(v51 + 40) = v54;
            v57 = (void *)RIOPxrSdfPathCopyString();
            v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v60 = v59;

            *(_QWORD *)(v51 + 96) = v55;
            *(_QWORD *)(v51 + 104) = v56;
            *(_QWORD *)(v51 + 72) = v58;
            *(_QWORD *)(v51 + 80) = v60;
            os_log(_:dso:log:type:_:)();
            swift_bridgeObjectRelease();
            ImageBasedLightReceiverBuilder.clear(inputs:)();
            goto LABEL_42;
          }
          v45 = EntityAtPrimPath;
          type metadata accessor for Entity();
          v68 = MEMORY[0x24BEE27D0];
          *(_QWORD *)&v67 = v45;
          static __EntityRef.__fromCore(_:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v67);
          static Entity.__fromCore(_:)();
          v46 = *(void (**)(char *, uint64_t))(v4 + 8);
          v46(v6, v3);

          swift_release();
          __AssetRef.__as<A>(_:)();
          REImageBasedLightReceiverComponentGetComponentType();
          v47 = REEntityGetOrAddComponentByClass();
          swift_beginAccess();
          v48 = v63;
          v49 = objc_getAssociatedObject(v63, &static BuilderAssociatedKeys.CoreReference);
          swift_endAccess();
          if (v49)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            outlined init with take of Any(&v66, &v67);
            type metadata accessor for RIOBuilderRef(0);
            swift_dynamicCast();
            v50 = v65;
            RIOBuilderAddComponent();

            dispatch thunk of Entity.__coreEntity.getter();
            __AssetRef.__as<A>(_:)();
            v46(v6, v3);
            v48[17] = 1;
            REImageBasedLightReceiverComponentSetIBLEntity();
            MEMORY[0x22E2F5E0C](v47);
            swift_release();
LABEL_42:
            swift_release();
            swift_release();

            return;
          }
          goto LABEL_45;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v67);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for iblComponents != -1)
    swift_once();
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v36 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v36 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v36 + 32) = v22;
  *(_QWORD *)(v36 + 40) = v11;
  os_log(_:dso:log:type:_:)();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t ImageBasedLightReceiverBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v1, &v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 17) & 1) == 0)
    return swift_release();
  __AssetRef.__as<A>(_:)();
  REImageBasedLightReceiverComponentGetComponentType();
  REEntityRemoveComponentByClass();
  result = swift_release();
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

uint64_t type metadata accessor for ImageBasedLightReceiverBuilder()
{
  return objc_opt_self();
}

uint64_t specialized closure #2 in ImageBasedLightReceiverBuilder.inputDescriptors()()
{
  id v0;
  uint64_t PrimIfNeeded;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;

  if (!RIOPxrUsdStageHasPrimAtPrimPath())
    return 0;
  v0 = (id)RIOPxrTfTokenEmpty();
  PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

  type metadata accessor for Prim();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = PrimIfNeeded;
  if (one-time initialization token for infoID != -1)
    swift_once();
  v3 = (id)static ImageBasedLightReceiverBuilder.infoID;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    swift_release();

    return 0;
  }
  v4 = (void *)RIOPxrUsdPrimCopyAttribute();
  v5 = RIOPxrUsdAttributeCopyValue();
  if (!v5)
  {
    swift_release();

    return 0;
  }
  v6 = (void *)v5;
  v7 = RIOPxrVtValueCopyToken();
  if (!v7)
  {
    swift_release();

    return 0;
  }
  v8 = (void *)v7;

  v9 = v8;
  v10 = (void *)RIOPxrTfTokenCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized ImageBasedLightReceiverBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  if (one-time initialization token for realityKitComponentTypeName != -1)
    swift_once();
  v9 = static ImageBasedLightReceiverBuilder.realityKitComponentTypeName;
  v0 = (id)static ImageBasedLightReceiverBuilder.realityKitComponentTypeName;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()();
  v3 = v9;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v9 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

void partial apply for closure #1 in ImageBasedLightReceiverBuilder.run(inputs:)()
{
  uint64_t v0;

  closure #1 in ImageBasedLightReceiverBuilder.run(inputs:)(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_22BC78048()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_22BC78070()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #3 in ImageBasedLightReceiverBuilder.inputDescriptors()(a1, a2, *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 32));
}

uint64_t Inputs.identifierForEntity(withInputKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  Inputs.subscript.getter(a1, a2, &v7);
  if (v8)
  {
    type metadata accessor for EntityProxy();
    if ((swift_dynamicCast() & 1) != 0)
    {
      __EntityRef.__validInteractionIdentifier.getter();
      swift_release();
      v4 = type metadata accessor for UUID();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 0, 1, v4);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v7);
  }
  v6 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
}

uint64_t closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(unint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = a3;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v9 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v9 >= 1)
  {
    v11 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v12 = MEMORY[0x22E2F57B8](v11, a1);
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      ++v11;
      __EntityRef.__validInteractionIdentifier.getter();
      a2(v12, v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_release();
    }
    while (v9 != v11);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized Inputs.pathsForRelationship(named:requestContext:)()
{
  id v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  Inputs.prim.getter();
  swift_bridgeObjectRetain();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (RIOPxrUsdPrimHasRelationship())
  {
    v1 = RIOPxrUsdPrimCopyRelationship();

    swift_release();
    type metadata accessor for Relationship();
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = v1;
    v3 = Relationship.targets.getter();
    outlined consume of Result<AnyAttribute, Object.Error>(v2, 0);
    return v3;
  }
  else
  {

    swift_release();
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v5 = 0;
    return swift_willThrow();
  }
}

uint64_t specialized Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD aBlock[6];

  v6 = Inputs.accumulatedValues(forKey:)(a1, a2);
  v7 = specialized _arrayConditionalCast<A, B>(_:)(v6);
  v8 = swift_bridgeObjectRelease();
  if (v7)
    v9 = v7;
  else
    v9 = MEMORY[0x24BEE4AF8];
  if (!(v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  v8 = swift_bridgeObjectRelease();
  if (!v14)
    return swift_bridgeObjectRelease();
LABEL_6:
  MEMORY[0x24BDAC7A8](v8);
  v15[2] = v9;
  v15[3] = a3;
  v15[4] = a4;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:);
  *(_QWORD *)(v10 + 24) = v15;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_10;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)()
{
  uint64_t v0;

  return closure #1 in Inputs.forEachObjectPathInProperty(named:inputName:requestContext:callback:)(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t, char *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_22BC78628()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

void __RKEntityHideActionBuildOutAnimationType.init(inputs:)()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  void *v12;
  Swift::String v13;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v0 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v0 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v12 = 0;
LABEL_12:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v12, 1);
    goto LABEL_13;
  }
  v1 = (void *)RIOPxrUsdPrimCopyAttribute();
  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2)
  {
LABEL_11:
    v12 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v3 = (void *)v2;
  v4 = RIOPxrVtValueCopyToken();
  if (!v4)
  {

    goto LABEL_11;
  }
  v5 = (void *)v4;

  swift_release();
  v6 = (void *)RIOPxrTfTokenCopyString();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v5, 0);
  v13._countAndFlagsBits = v7;
  v13._object = v9;
  v10 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v13);
  if (v10 != 10)
  {
    v11 = v10;
    swift_release();
    __RKEntityHideActionBuildOutAnimationType.init(from:)(v11);
    return;
  }
LABEL_13:
  lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError();
  swift_allocError();
  swift_willThrow();
  swift_release();
}

void __RKEntityHideActionBuildOutAnimationType.init(from:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22BC78884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BDE6E50];
  v2 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

void __RKEntityShowActionBuildInAnimationType.init(inputs:)(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  Swift::String v17;

  Inputs.prim.getter();
  if (String.count.getter() < 1)
  {
    v2 = (id)RIOPxrTfTokenEmpty();
  }
  else
  {
    String.utf8CString.getter();
    v2 = (id)RIOPxrTfTokenCreateWithCString();
    swift_release();
  }
  if (!RIOPxrUsdPrimHasAttribute())
  {

    swift_release();
    v13 = 0;
LABEL_12:
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<ToolsFoundations.Token, Object.Error>(v13, 1);
    v14 = *MEMORY[0x24BDE6DF0];
    v15 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(a1, v14, v15);
    return;
  }
  v3 = (void *)RIOPxrUsdPrimCopyAttribute();
  v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4)
  {
LABEL_11:
    v13 = (void *)RIOPxrUsdAttributeCopyTypeName();

    swift_release();
    goto LABEL_12;
  }
  v5 = (void *)v4;
  v6 = RIOPxrVtValueCopyToken();
  if (!v6)
  {

    goto LABEL_11;
  }
  v7 = (void *)v6;

  swift_release();
  v8 = (void *)RIOPxrTfTokenCopyString();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined consume of Result<ToolsFoundations.Token, Object.Error>(v7, 0);
  v17._countAndFlagsBits = v9;
  v17._object = v11;
  v12 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v17);
  if (v12 == 10)
  {
    lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();
    swift_release();
  }
  else
  {
    v16 = v12;
    swift_release();
    __RKEntityShowActionBuildInAnimationType.init(from:)(v16);
  }
}

void __RKEntityShowActionBuildInAnimationType.init(from:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22BC78B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BDE6DF0];
  v2 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t __RKEntityActionVisibilityTypeUSD.rawValue.getter(char a1)
{
  return *(_QWORD *)&aNone_2[8 * a1];
}

unint64_t specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionVisibilityTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError, &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError, &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError, &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError, &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

uint64_t specialized __RKEntityActionVisibilityTypeUSD.init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = type metadata accessor for __RKEntityHideActionBuildOutAnimationType();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == *MEMORY[0x24BDE6E50])
  {
    v8 = 0;
LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return v8;
  }
  if (v7 == *MEMORY[0x24BDE6E18])
  {
    v8 = 1;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E40])
  {
    v8 = 2;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E38])
  {
    v8 = 3;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E20])
  {
    v8 = 4;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E28])
  {
    v8 = 5;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E30])
  {
    v8 = 6;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E48])
  {
    v8 = 7;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E58])
  {
    v8 = 9;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E60])
  {
    v8 = 8;
    goto LABEL_21;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = type metadata accessor for __RKEntityShowActionBuildInAnimationType();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == *MEMORY[0x24BDE6DF0])
  {
    v8 = 0;
LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return v8;
  }
  if (v7 == *MEMORY[0x24BDE6DB8])
  {
    v8 = 1;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6DE0])
  {
    v8 = 2;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6DD8])
  {
    v8 = 3;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6DC0])
  {
    v8 = 4;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6DC8])
  {
    v8 = 5;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6DD0])
  {
    v8 = 6;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6DE8])
  {
    v8 = 7;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6DF8])
  {
    v8 = 9;
    goto LABEL_21;
  }
  if (v7 == *MEMORY[0x24BDE6E00])
  {
    v8 = 8;
    goto LABEL_21;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
}

uint64_t storeEnumTagSinglePayload for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22BC790E8 + 4 * byte_22BD0D884[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22BC79108 + 4 * byte_22BD0D889[v4]))();
}

_BYTE *sub_22BC790E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22BC79108(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC79110(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC79118(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22BC79120(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22BC79128(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy9RealityIO16ToolsFoundationsO5TokenVSo16RIOPxrVtValueRefaG_So0i2TfhL0a_ALts5NeverOTg503_s9d4IO16fg2O5h5VSo16ijk48RefaSo0f2TfeI0aAGIgngoo_AE3key_AG5valuetAI_AGts5n46OIegnrzr_TR05_sSD9a6IOAA16cd2O5e8VRszSo16fgH46s16Rs_rlE02vtH0AGvgtuV25_AGtAE_AGtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return (id)v2;
  v3 = a1;
  v31 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v31;
  result = (id)specialized Dictionary.startIndex.getter(v3);
  v6 = (uint64_t)result;
  v7 = 0;
  v8 = v3 + 64;
  v25 = v3 + 80;
  v26 = v1;
  v27 = v5;
  v28 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v29 = v7;
    v12 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v6);
    v13 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v6);
    v14 = v3;
    v15 = *(_QWORD *)(v31 + 16);
    v16 = *(_QWORD *)(v31 + 24);
    v30 = v15 + 1;
    v17 = v12;
    result = v13;
    v18 = result;
    if (v15 >= v16 >> 1)
      result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v30, 1);
    *(_QWORD *)(v31 + 16) = v30;
    v19 = v31 + 16 * v15;
    *(_QWORD *)(v19 + 32) = v17;
    *(_QWORD *)(v19 + 40) = v18;
    v9 = 1 << *(_BYTE *)(v14 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v28;
    v20 = *(_QWORD *)(v28 + 8 * v11);
    if ((v20 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v14;
    v5 = v27;
    if (*(_DWORD *)(v14 + 36) != v27)
      goto LABEL_27;
    v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v26;
    }
    else
    {
      v22 = v11 + 1;
      v23 = (unint64_t)(v9 + 63) >> 6;
      v10 = v26;
      if (v11 + 1 < v23)
      {
        v24 = *(_QWORD *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_20:
          v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            v24 = *(_QWORD *)(v25 + 8 * v11++);
            if (v24)
            {
              v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v29 + 1;
    v6 = v9;
    if (v29 + 1 == v10)
      return (id)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4++;
      v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t result;
  Swift::Int v26;
  void (*v27)(char *, _QWORD);
  void (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *);
  uint64_t v42;
  char *v43;
  Swift::Int v44;
  uint64_t v45;
  char v46[32];
  uint64_t v47;

  v33 = a5;
  v34 = a8;
  v41 = a1;
  v42 = a2;
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v43 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v32 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v18 - 8);
  v36 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v32 - v19;
  v21 = dispatch thunk of Collection.count.getter();
  if (!v21)
    return static Array._allocateUninitialized(_:)();
  v39 = AssociatedTypeWitness;
  v22 = v8;
  v23 = a4;
  v24 = v21;
  v47 = MEMORY[0x22E2F583C](v23);
  v37 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v24);
  v40 = v22;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v24 & 0x8000000000000000) == 0)
  {
    v26 = v24;
    v38 = v17;
    while (v26)
    {
      v44 = v26;
      v27 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v28 = *(void (**)(char *))(v12 + 16);
      v29 = v12;
      v30 = v39;
      v28(v14);
      v27(v46, 0);
      v31 = v45;
      v41(v14, v43);
      if (v31)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v30);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v36);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v34, v43, v33);
      }
      v45 = 0;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v30);
      ContiguousArray.append(_:)();
      result = dispatch thunk of Collection.formIndex(after:)();
      v26 = v44 - 1;
      v12 = v29;
      if (v44 == 1)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v36);
        return v47;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t RIOPxrVtValueRef.asFloat.getter()
{
  return (unint64_t)(RIOPxrVtValueGetFloat() ^ 1u) << 32;
}

uint64_t RIOPxrVtValueRef.asBool.getter()
{
  if (RIOPxrVtValueGetBool())
    return 0;
  else
    return 2;
}

uint64_t RIOPxrVtValueRef.asString.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v0 = RIOPxrVtValueCopyString();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t RIOPxrVtValueRef.asAssetPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueCopyAssetPath();
  *a1 = result;
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t RIOPxrVtValueRef.asToken.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueCopyToken();
  *a1 = result;
  return result;
}

uint64_t RIOPxrVtValueRef.asDouble.getter()
{
  RIOPxrVtValueGetDouble();
  return 0;
}

uint64_t RIOPxrVtValueRef.asBoolArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279C0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asBoolArray.getter);
}

unint64_t RIOPxrVtValueRef.asInt32.getter()
{
  return RIOPxrVtValueRef.asInt32.getter((uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D30]);
}

uint64_t RIOPxrVtValueRef.asInt32Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A38], (uint64_t)MEMORY[0x24BE27D30], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t RIOPxrVtValueRef.asAssetPathArray.getter(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v4;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  result = a1(v4);
  if (result)
  {
    v7 = (void *)result;
    v9 = result;
    a4(&v8, &v9);

    return v8;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asInt64.getter()
{
  return RIOPxrVtValueRef.asInt64.getter((uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D40]);
}

uint64_t RIOPxrVtValueRef.asInt64Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x24BE27A50], (uint64_t)MEMORY[0x24BE27D40], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

unint64_t RIOPxrVtValueRef.asUInt32.getter()
{
  return RIOPxrVtValueRef.asInt32.getter((uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D70]);
}

unint64_t RIOPxrVtValueRef.asInt32.getter(uint64_t (*a1)(uint64_t, unsigned int *))
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v2 = a1(v1, &v5);
  v3 = v5;
  if (!v2)
    v3 = 0;
  return v3 | ((unint64_t)(v2 ^ 1u) << 32);
}

uint64_t RIOPxrVtValueRef.asUInt32Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x24BE27AB0], (uint64_t)MEMORY[0x24BE27D70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t RIOPxrVtValueRef.asUInt8.getter()
{
  return (RIOPxrVtValueGetUInt8() ^ 1) << 8;
}

uint64_t RIOPxrVtValueRef.asUInt8Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x24BE27AC0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUInt8Array.getter);
}

uint64_t RIOPxrVtValueRef.asBoolArray.getter(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v2;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  result = a1(v2);
  if (result)
  {
    v5 = (void *)result;
    v7 = result;
    a2(&v6, &v7);

    return v6;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asUInt64.getter()
{
  return RIOPxrVtValueRef.asInt64.getter(MEMORY[0x24BE27D78]);
}

uint64_t RIOPxrVtValueRef.asInt64.getter(uint64_t (*a1)(uint64_t, _QWORD *))
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v5[0] = 0;
  v2 = a1(v1, v5);
  v3 = v5[0];
  if (!v2)
    return 0;
  return v3;
}

uint64_t RIOPxrVtValueRef.asUInt64Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x24BE27AB8], MEMORY[0x24BE27D78], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloatArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x24BE27A08], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloatArray.getter);
}

uint64_t RIOPxrVtValueRef.asDoubleArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x24BE279E8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDoubleArray.getter);
}

uint64_t RIOPxrVtValueRef.asInt2.getter()
{
  RIOPxrVtValueGetInt2();
  return 0;
}

uint64_t RIOPxrVtValueRef.asInt2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A30], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt2Array.getter);
}

uint64_t RIOPxrVtValueRef.asInt3.getter()
{
  return RIOPxrVtValueRef.asInt3.getter((uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D28]);
}

uint64_t RIOPxrVtValueRef.asInt3Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A40], (uint64_t)MEMORY[0x24BE27D28], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t RIOPxrVtValueRef.asInt4.getter()
{
  return RIOPxrVtValueRef.asInt3.getter((uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D38]);
}

uint64_t RIOPxrVtValueRef.asInt3.getter(uint64_t (*a1)(uint64_t, _QWORD *))
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x24BDAC8D0];
  v5[0] = 0;
  v5[1] = 0;
  v2 = a1(v1, v5);
  v3 = v5[0];
  if (!v2)
    return 0;
  return v3;
}

uint64_t RIOPxrVtValueRef.asInt4Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A48], (uint64_t)MEMORY[0x24BE27D38], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloat2.getter()
{
  RIOPxrVtValueGetFloat2();
  return 0;
}

uint64_t RIOPxrVtValueRef.asFloat2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat2Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloat3.getter()
{
  return RIOPxrVtValueRef.asInt3.getter((uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27CF8]);
}

uint64_t RIOPxrVtValueRef.asFloat3Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F8], (uint64_t)MEMORY[0x24BE27CF8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t RIOPxrVtValueRef.asFloat4.getter()
{
  return RIOPxrVtValueRef.asInt3.getter((uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D00]);
}

uint64_t RIOPxrVtValueRef.asFloat4Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A00], (uint64_t)MEMORY[0x24BE27D00], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t RIOPxrVtValueRef.asDouble2.getter()
{
  RIOPxrVtValueGetDouble2();
  return 0;
}

uint64_t RIOPxrVtValueRef.asDouble2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble2Array.getter);
}

uint64_t RIOPxrVtValueRef.asDouble3.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asDouble3.getter((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CD8], a1);
}

uint64_t RIOPxrVtValueRef.asDouble3Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D8], (uint64_t)MEMORY[0x24BE27CD8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t RIOPxrVtValueRef.asDouble4.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asDouble3.getter((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CE0], a1);
}

uint64_t RIOPxrVtValueRef.asDouble3.getter@<X0>(uint64_t (*a1)(uint64_t, __int128 *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9 = 0u;
  v10 = 0u;
  result = a1(v2, &v9);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)&v9 + 1);
    v5 = v9;
    v8 = *((_QWORD *)&v10 + 1);
    v7 = v10;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asDouble4Array.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279E0], (uint64_t)MEMORY[0x24BE27CE0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t RIOPxrVtValueRef.asQuatf.getter()
{
  RIOPxrVtValueGetQuatf();
  return 0;
}

uint64_t RIOPxrVtValueRef.asQuatfArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x24BE27A88], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatfArray.getter);
}

uint64_t RIOPxrVtValueRef.asQuatd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueGetQuatd();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asQuatdArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x24BE27A80], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatdArray.getter);
}

uint64_t RIOPxrVtValueRef.asMatrix2d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueGetMatrix2d();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asMatrix2dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A58], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter);
}

uint64_t RIOPxrVtValueRef.asMatrix3d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueGetMatrix3d();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asMatrix3dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A60], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asMatrix4d.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[9];
  _BYTE v4[144];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (RIOPxrVtValueGetMatrix4d())
  {
    memset(v3, 0, 128);
    _s9RealityIO7Frame4DVSgWOi_((uint64_t)v3);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v3);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v3, (uint64_t)v4, &demangling cache variable for type metadata for simd_double4x4?);
  return outlined init with take of (URL, __REAsset)((uint64_t)v4, a1, &demangling cache variable for type metadata for simd_double4x4?);
}

uint64_t RIOPxrVtValueRef.asMatrix4dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A68], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter);
}

uint64_t RIOPxrVtValueRef.asStringArray.getter()
{
  uint64_t result;
  void *v1;

  result = RIOPxrVtValueCopyStringArray();
  if (result)
  {
    v1 = (void *)result;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asTokenArray.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x24BE27AA8], (uint64_t)type metadata accessor for RIOPxrTfTokenRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t RIOPxrVtValueRef.asPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueCopyPath();
  *a1 = result;
  return result;
}

uint64_t RIOPxrVtValueRef.asPathListOp.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x24BE27A78], (uint64_t)type metadata accessor for RIOPxrSdfPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t RIOPxrVtValueRef.asAssetPathArray.getter()
{
  return RIOPxrVtValueRef.asAssetPathArray.getter(MEMORY[0x24BE279B8], (uint64_t)type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t RIOPxrVtValueRef.mapUSDValue<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int Bool;
  char v5;
  uint64_t *v6;
  int v7;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  int Float3;
  int8x16_t v26;
  unint64_t v27;
  int v28;
  int8x16_t v29;
  unint64_t v30;
  int v31;
  int8x16_t v32;
  unint64_t v33;
  int v34;
  int8x16_t v35;
  unint64_t v36;
  int v37;
  int8x16_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  int Double3;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t *v50;
  int v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int Double4;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int Quatd;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int Matrix2d;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  _BYTE v87[144];
  int8x16_t v88;
  __int128 v89;
  char v90;

  if (swift_dynamicCastMetatype())
  {
    Bool = RIOPxrVtValueGetBool();
    v5 = 0;
    if (!Bool)
      v5 = 2;
    v88.i8[0] = v5;
    v6 = &demangling cache variable for type metadata for Bool?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    v88.i32[0] = 0;
    v88.i8[4] = RIOPxrVtValueGetInt32() ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Int32?;
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(v6);
LABEL_10:
    v7 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v7 ^ 1u, 1, a1);
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asInt.getter();
    v88.i8[8] = v9 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Int?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asInt64.getter();
    v88.i8[8] = v10 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Int64?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i16[0] = RIOPxrVtValueRef.asUInt8.getter() & 0x1FF;
    v6 = (uint64_t *)&demangling cache variable for type metadata for UInt8?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    v11 = RIOPxrVtValueRef.asUInt32.getter();
    v88.i32[0] = v11;
    v88.i8[4] = BYTE4(v11) & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for UInt32?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asUInt.getter();
    v88.i8[8] = v12 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for UInt?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asUInt64.getter();
    v88.i8[8] = v13 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for UInt64?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asInt2.getter();
    v88.i8[8] = v14 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Int32>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asInt3.getter();
    v88.i64[1] = v15;
    LOBYTE(v89) = v16 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Int32>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asInt4.getter();
    v88.i64[1] = v17;
    LOBYTE(v89) = v18 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Int32>?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i32[0] = 0;
    v88.i8[4] = RIOPxrVtValueGetFloat() ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Half?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asHalf2.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord2<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asTexCoord2h.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asHalf3.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asTexCoord3h.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for Color3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Point3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asNormal3h.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for Point3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Normal3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asNormal3h.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Vector3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asNormal3h.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord3<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asTexCoord3h.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asHalf4.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Half>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color4<Half>);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asColor4h.getter(v88.i64);
    v6 = (uint64_t *)&demangling cache variable for type metadata for Color4<Half>?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v19 = RIOPxrVtValueRef.asFloat.getter();
    v88.i32[0] = v19;
    v88.i8[4] = BYTE4(v19) & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Float?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asFloat2.getter();
    v88.i8[8] = v20 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asFloat3.getter();
    v88.i64[1] = v21;
    LOBYTE(v89) = v22 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asFloat4.getter();
    v88.i64[1] = v23;
    LOBYTE(v89) = v24 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color3<Float>);
  if (swift_dynamicCastMetatype())
  {
    Float3 = RIOPxrVtValueGetFloat3();
    v26 = 0uLL;
    v26.i32[3] = 0;
    if (Float3)
      v27 = -1;
    else
      v27 = 0;
    v88 = vandq_s8(v26, (int8x16_t)vdupq_n_s64(v27));
    LOBYTE(v89) = Float3 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Color3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color4<Float>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0uLL;
    LOBYTE(v89) = RIOPxrVtValueGetFloat4() ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Color4<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Point3<Float>);
  if (swift_dynamicCastMetatype())
  {
    v28 = RIOPxrVtValueGetFloat3();
    v29 = 0uLL;
    v29.i32[3] = 0;
    if (v28)
      v30 = -1;
    else
      v30 = 0;
    v88 = vandq_s8(v29, (int8x16_t)vdupq_n_s64(v30));
    LOBYTE(v89) = v28 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Point3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Normal3<Float>);
  if (swift_dynamicCastMetatype())
  {
    v31 = RIOPxrVtValueGetFloat3();
    v32 = 0uLL;
    v32.i32[3] = 0;
    if (v31)
      v33 = -1;
    else
      v33 = 0;
    v88 = vandq_s8(v32, (int8x16_t)vdupq_n_s64(v33));
    LOBYTE(v89) = v31 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Vector3<Float>);
  if (swift_dynamicCastMetatype())
  {
    v34 = RIOPxrVtValueGetFloat3();
    v35 = 0uLL;
    v35.i32[3] = 0;
    if (v34)
      v36 = -1;
    else
      v36 = 0;
    v88 = vandq_s8(v35, (int8x16_t)vdupq_n_s64(v36));
    LOBYTE(v89) = v34 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Float>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord3<Float>);
  if (swift_dynamicCastMetatype())
  {
    v37 = RIOPxrVtValueGetFloat3();
    v38 = 0uLL;
    v38.i32[3] = 0;
    if (v37)
      v39 = -1;
    else
      v39 = 0;
    v88 = vandq_s8(v38, (int8x16_t)vdupq_n_s64(v39));
    LOBYTE(v89) = v37 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Float>?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asDouble.getter();
    v88.i8[8] = v40 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Double?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asDouble2.getter();
    v88.i64[1] = v41;
    LOBYTE(v89) = v42 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for SIMD2<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    Double3 = RIOPxrVtValueGetDouble3();
    if (Double3)
    {
      v45 = v88.i64[1];
      v44 = v88.i64[0];
      v47 = *((_QWORD *)&v89 + 1);
      v46 = v89;
    }
    else
    {
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
    }
    v88.i64[0] = v44;
    v88.i64[1] = v45;
    *(_QWORD *)&v89 = v46;
    *((_QWORD *)&v89 + 1) = v47;
    v90 = Double3 ^ 1;
    v50 = (uint64_t *)&demangling cache variable for type metadata for SIMD3<Double>?;
    goto LABEL_99;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color3<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    v82 = 0u;
    v48 = RIOPxrVtValueGetDouble3();
    if (v48)
    {
      v82 = v88;
      v49 = v89;
    }
    else
    {
      v49 = 0;
    }
    v88 = v82;
    v89 = v49;
    v90 = v48 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Color3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Point3<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    v83 = 0u;
    v51 = RIOPxrVtValueGetDouble3();
    if (v51)
    {
      v83 = v88;
      v52 = v89;
    }
    else
    {
      v52 = 0;
    }
    v88 = v83;
    v89 = v52;
    v90 = v51 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Point3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Normal3<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    v84 = 0u;
    v53 = RIOPxrVtValueGetDouble3();
    if (v53)
    {
      v84 = v88;
      v54 = v89;
    }
    else
    {
      v54 = 0;
    }
    v88 = v84;
    v89 = v54;
    v90 = v53 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Normal3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Vector3<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    v85 = 0u;
    v55 = RIOPxrVtValueGetDouble3();
    if (v55)
    {
      v85 = v88;
      v56 = v89;
    }
    else
    {
      v56 = 0;
    }
    v88 = v85;
    v89 = v56;
    v90 = v55 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Vector3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TexCoord3<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v57 = RIOPxrVtValueGetDouble3();
    if (v57)
    {
      v86 = v88;
      v58 = v89;
    }
    else
    {
      v58 = 0;
    }
    v88 = v86;
    v89 = v58;
    v90 = v57 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for TexCoord3<Double>?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    Double4 = RIOPxrVtValueGetDouble4();
    if (Double4)
    {
      v61 = v88.i64[1];
      v60 = v88.i64[0];
      v63 = *((_QWORD *)&v89 + 1);
      v62 = v89;
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
    }
    v88.i64[0] = v60;
    v88.i64[1] = v61;
    *(_QWORD *)&v89 = v62;
    *((_QWORD *)&v89 + 1) = v63;
    v90 = Double4 ^ 1;
    v50 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Double>?;
    goto LABEL_99;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color4<Double>);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    v64 = RIOPxrVtValueGetDouble4();
    if (v64)
    {
      v66 = v88.i64[1];
      v65 = v88.i64[0];
      v68 = *((_QWORD *)&v89 + 1);
      v67 = v89;
    }
    else
    {
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v68 = 0;
    }
    v88.i64[0] = v65;
    v88.i64[1] = v66;
    *(_QWORD *)&v89 = v67;
    *((_QWORD *)&v89 + 1) = v68;
    v90 = v64 ^ 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for Color4<Double>?;
    goto LABEL_9;
  }
  type metadata accessor for simd_quatf(0);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asQuatf.getter();
    v88.i64[1] = v69;
    LOBYTE(v89) = v70 & 1;
    v6 = (uint64_t *)&demangling cache variable for type metadata for simd_quatf?;
    goto LABEL_9;
  }
  type metadata accessor for simd_quatd(0);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    Quatd = RIOPxrVtValueGetQuatd();
    if (Quatd)
    {
      v73 = v88.i64[1];
      v72 = v88.i64[0];
      v75 = *((_QWORD *)&v89 + 1);
      v74 = v89;
    }
    else
    {
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 0;
    }
    v88.i64[0] = v72;
    v88.i64[1] = v73;
    *(_QWORD *)&v89 = v74;
    *((_QWORD *)&v89 + 1) = v75;
    v90 = Quatd ^ 1;
    v50 = (uint64_t *)&demangling cache variable for type metadata for simd_quatd?;
    goto LABEL_99;
  }
  type metadata accessor for simd_double2x2(0);
  if (swift_dynamicCastMetatype())
  {
    v88 = 0u;
    v89 = 0u;
    Matrix2d = RIOPxrVtValueGetMatrix2d();
    if (Matrix2d)
    {
      v78 = v88.i64[1];
      v77 = v88.i64[0];
      v80 = *((_QWORD *)&v89 + 1);
      v79 = v89;
    }
    else
    {
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
    }
    v88.i64[0] = v77;
    v88.i64[1] = v78;
    *(_QWORD *)&v89 = v79;
    *((_QWORD *)&v89 + 1) = v80;
    v90 = Matrix2d ^ 1;
    v50 = (uint64_t *)&demangling cache variable for type metadata for simd_double2x2?;
    goto LABEL_99;
  }
  type metadata accessor for simd_double3x3(0);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asMatrix3d.getter((uint64_t)&v88);
    v50 = (uint64_t *)&demangling cache variable for type metadata for simd_double3x3?;
LABEL_99:
    outlined init with take of (URL, __REAsset)((uint64_t)&v88, (uint64_t)v87, v50);
    __swift_instantiateConcreteTypeFromMangledName(v50);
    goto LABEL_10;
  }
  type metadata accessor for simd_double4x4(0);
  if (swift_dynamicCastMetatype())
  {
    RIOPxrVtValueRef.asMatrix4d.getter((uint64_t)&v88);
    v50 = &demangling cache variable for type metadata for simd_double4x4?;
    goto LABEL_99;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asString.getter();
    v88.i64[1] = v81;
    v6 = (uint64_t *)&demangling cache variable for type metadata for String?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueCopyToken();
    v6 = (uint64_t *)&demangling cache variable for type metadata for ToolsFoundations.Token?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueCopyPath();
    v6 = (uint64_t *)&demangling cache variable for type metadata for SceneDescriptionFoundations.Path?;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueCopyAssetPath();
    v6 = (uint64_t *)&demangling cache variable for type metadata for SceneDescriptionFoundations.AssetPath?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asBoolArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Bool]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int8]);
  if (swift_dynamicCastMetatype()
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]),
        swift_dynamicCastMetatype())
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]),
        swift_dynamicCastMetatype()))
  {
    v88.i64[0] = RIOPxrVtValueRef.asInt32Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Int32]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asIntArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Int]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asInt64Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Int64]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asUIntArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asUInt8Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt8]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]);
  if (swift_dynamicCastMetatype()
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]),
        swift_dynamicCastMetatype()))
  {
    v88.i64[0] = RIOPxrVtValueRef.asUInt32Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt32]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asUInt64Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [UInt64]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Half]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asHalfArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Half]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asHalf2Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord2<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asTexCoord2hArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asHalf3Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asColor3hArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Point3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asPoint3hArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Normal3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asNormal3hArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Vector3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asVector3hArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord3<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asTexCoord3hArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asHalf4Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color4<Half>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asColor4hArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Half>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asFloatArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Float]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asFloat2Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord2<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asTexCoord2fArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asFloat3Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asColor3fArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Point3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asPoint3fArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Normal3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asNormal3fArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Vector3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asVector3fArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord3<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asTexCoord3fArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asFloat4Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color4<Float>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asColor4fArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Float>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asDoubleArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Double]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asDouble2Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord2<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asTexCoord2dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord2<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asDouble3Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asColor3dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Color3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Point3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asPoint3dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Point3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Normal3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asNormal3dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Normal3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Vector3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asVector3dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Vector3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TexCoord3<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asTexCoord3dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [TexCoord3<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asDouble4Array.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Color4<Double>]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asColor4dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [Color4<Double>]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatf]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asQuatfArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatf]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_quatd]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asQuatdArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatd]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double2x2]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asMatrix2dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_double2x2]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double3x3]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asMatrix3dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_double3x3]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [simd_double4x4]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asMatrix4dArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [simd_double4x4]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asStringArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [String]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolsFoundations.Token]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asTokenArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [ToolsFoundations.Token]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.Path]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asPathListOp.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SceneDescriptionFoundations.Path]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asAssetPathArray.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [SceneDescriptionFoundations.AssetPath]?;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolsFoundations.Token : RIOPxrVtValueRef]);
  if (swift_dynamicCastMetatype())
  {
    v88.i64[0] = RIOPxrVtValueRef.asDictionary.getter();
    v6 = (uint64_t *)&demangling cache variable for type metadata for [ToolsFoundations.Token : RIOPxrVtValueRef]?;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t static UsdAttributeValue.setValue(_:to:time:)(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(*a2 + 104) + 8))(a1, a2[2], *(_QWORD *)(*a2 + 96));
}

uint64_t static UsdAttributeValue.getValue(from:time:)(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 104) + 24))(a1[2], *(_QWORD *)(*a1 + 96));
}

uint64_t static UsdAttributeValueArrayElement.getValueArray(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a3 + 16))();
  if (!result)
    return static Array._allocateUninitialized(_:)();
  return result;
}

uint64_t static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(a1, a2, a3, (void (*)(_QWORD, uint64_t, _QWORD))MEMORY[0x24BEE40C8]);
}

uint64_t static UsdAttributeValueSIMD3ArrayElement.getValue3Array(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(a1, a2, a3, (void (*)(_QWORD, uint64_t, _QWORD))MEMORY[0x24BEE40F8]);
}

uint64_t static UsdAttributeValueSIMD4ArrayElement.getValue4Array(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(a1, a2, a3, (void (*)(_QWORD, uint64_t, _QWORD))MEMORY[0x24BEE4158]);
}

uint64_t static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, _QWORD))
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a3 + 24))();
  if (!result)
  {
    a4(0, a2, *(_QWORD *)(a3 + 8));
    return static Array._allocateUninitialized(_:)();
  }
  return result;
}

uint64_t Bool.vtValue.getter()
{
  return RIOPxrVtValueCreateWithBool();
}

uint64_t static Bool.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateBool();
  *a1 = result;
  return result;
}

uint64_t static Bool.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithBool();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Bool.getValueOpt(from:time:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int Bool;

  v0 = RIOPxrUsdAttributeCopyValue();
  v1 = 2;
  if (v0)
  {
    v2 = (void *)v0;
    Bool = RIOPxrVtValueGetBool();

    if (Bool)
      return 0;
    else
      return 2;
  }
  return v1;
}

uint64_t static Bool.getValue(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetBool();

    return 0;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Bool()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithBool();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Bool(char *a1@<X8>)
{
  uint64_t v2;
  char v3;
  void *v4;
  int Bool;

  v2 = RIOPxrUsdAttributeCopyValue();
  v3 = 2;
  if (v2)
  {
    v4 = (void *)v2;
    Bool = RIOPxrVtValueGetBool();

    if (Bool)
      v3 = 0;
    else
      v3 = 2;
  }
  *a1 = v3;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Bool(_BYTE *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetBool();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Bool@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateBool();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Bool()
{
  return RIOPxrVtValueCreateWithBool();
}

uint64_t Int8.vtValue.getter()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t static Int8.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt32();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int8.getValueOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Int32;
  int v3;

  v0 = RIOPxrUsdAttributeCopyValue();
  v3 = 1;
  if (v0)
  {
    v1 = (void *)v0;
    Int32 = RIOPxrVtValueGetInt32();

    if ((Int32 & 1) != 0)
      v3 = 0;
  }
  return (v3 << 8);
}

uint64_t static Int8.getValue(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetInt32();

    return 0;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int8()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt32();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int8(_BYTE *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  int Int32;
  BOOL v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  v5 = 1;
  if (v2)
  {
    v3 = (void *)v2;
    Int32 = RIOPxrVtValueGetInt32();

    if (Int32)
      v5 = 0;
  }
  *a1 = 0;
  a1[1] = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int8(_BYTE *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetInt32();

  }
  *a1 = 0;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int8()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t Int16.vtValue.getter()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t static Int16.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt32();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int16.getValueOpt(from:time:)(uint64_t a1)
{
  return static Int16.getValueOpt(from:time:)(a1, (uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D30]);
}

uint64_t static Int16.getValue(from:time:)(uint64_t a1)
{
  return static Int16.getValue(from:time:)(a1, (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D30]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int16()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt32();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D30], a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16(_WORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D30], a1);
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int16()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t static Int32.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, MEMORY[0x24BE27BD8]);
}

unint64_t static Int32.getValueOpt(from:time:)(uint64_t a1)
{
  return static Int32.getValueOpt(from:time:)(a1, (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D30]);
}

uint64_t static Int32.getValue(from:time:)(uint64_t a1)
{
  return static Int16.getValue(from:time:)(a1, (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D30]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE27BD8]);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D30], a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32(_DWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D30], a1);
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt32();
}

uint64_t Int.vtValue.getter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return RIOPxrVtValueCreateWithInt32();
  }
  __break(1u);
  return result;
}

uint64_t static Int.setValue(_:to:time:)(uint64_t result)
{
  void *v1;
  uint64_t v2;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v1 = (void *)RIOPxrVtValueCreateWithInt32();
    v2 = RIOPxrUsdAttributeSetValue();

    return v2;
  }
  __break(1u);
  return result;
}

uint64_t static Int.getValueOpt(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetInt32();

    return 0;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asInt.getter()
{
  RIOPxrVtValueGetInt32();
  return 0;
}

uint64_t static Int.getValue(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetInt32();

    return 0;
  }
  return result;
}

uint64_t static Int.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int(uint64_t *a1)
{
  uint64_t result;
  void *v2;
  uint64_t v3;

  result = *a1;
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v2 = (void *)RIOPxrVtValueCreateWithInt32();
    v3 = RIOPxrUsdAttributeSetValue();

    return v3;
  }
  __break(1u);
  return result;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Int32;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Int32 = RIOPxrVtValueGetInt32();

    v5 = Int32 ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetInt32();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return RIOPxrVtValueCreateWithInt32();
  }
  __break(1u);
  return result;
}

uint64_t static Int64.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, MEMORY[0x24BE27C00]);
}

uint64_t static Int64.getValueOpt(from:time:)(uint64_t a1)
{
  return static Int64.getValueOpt(from:time:)(a1, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D40]);
}

uint64_t static Int64.getValue(from:time:)(uint64_t a1)
{
  return static Int64.getValue(from:time:)(a1, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D40]);
}

uint64_t static Int64.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt64();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE27C00]);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64((uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D40], a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64(_QWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64((uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D40], a1);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Int64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt64();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Int64()
{
  return RIOPxrVtValueCreateWithInt64();
}

uint64_t UInt.vtValue.getter(unint64_t a1)
{
  uint64_t result;

  if (!HIDWORD(a1))
    return RIOPxrVtValueCreateWithUInt32();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static UInt.setValue(_:to:time:)(unint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t result;

  if (HIDWORD(a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v1 = (void *)RIOPxrVtValueCreateWithUInt32();
    v2 = RIOPxrUsdAttributeSetValue();

    return v2;
  }
  return result;
}

uint64_t static UInt.getValueOpt(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetUInt32();

    return 0;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asUInt.getter()
{
  RIOPxrVtValueGetUInt32();
  return 0;
}

uint64_t static UInt.getValue(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetUInt32();

    return 0;
  }
  return result;
}

uint64_t static UInt.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t result;

  if (HIDWORD(*a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v1 = (void *)RIOPxrVtValueCreateWithUInt32();
    v2 = RIOPxrUsdAttributeSetValue();

    return v2;
  }
  return result;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char UInt32;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    UInt32 = RIOPxrVtValueGetUInt32();

    v5 = UInt32 ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetUInt32();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance UInt@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt32();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt()
{
  _QWORD *v0;
  uint64_t result;

  if (!HIDWORD(*v0))
    return RIOPxrVtValueCreateWithUInt32();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UInt8.vtValue.getter()
{
  return RIOPxrVtValueCreateWithUInt8();
}

uint64_t static UInt8.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithUInt8();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static UInt8.getValueOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  int UInt8;
  int v3;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    v1 = (void *)v0;
    UInt8 = RIOPxrVtValueGetUInt8();

    v3 = UInt8 ^ 1;
  }
  else
  {
    v3 = 1;
  }
  return (v3 << 8);
}

uint64_t static UInt8.getValue(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetUInt8();

    return 0;
  }
  return result;
}

uint64_t static UInt8.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt8();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt8()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithUInt8();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt8(_BYTE *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char UInt8;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    UInt8 = RIOPxrVtValueGetUInt8();

    v5 = UInt8 ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *a1 = 0;
  a1[1] = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt8(_BYTE *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetUInt8();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance UInt8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt8();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt8()
{
  return RIOPxrVtValueCreateWithUInt8();
}

uint64_t UInt16.vtValue.getter()
{
  return RIOPxrVtValueCreateWithUInt32();
}

uint64_t static UInt16.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithUInt32();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static UInt16.getValueOpt(from:time:)(uint64_t a1)
{
  return static Int16.getValueOpt(from:time:)(a1, (uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D70]);
}

uint64_t static Int16.getValueOpt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, int *))
{
  uint64_t v3;
  void *v4;
  char v5;
  int v6;
  int v7;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = RIOPxrUsdAttributeCopyValue();
  if (v3 && (v4 = (void *)v3, v9 = 0, v5 = a2(v3, &v9), v4, (v5 & 1) != 0))
  {
    v6 = 0;
    v7 = (unsigned __int16)v9;
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  return v7 | (v6 << 16);
}

uint64_t static UInt16.getValue(from:time:)(uint64_t a1)
{
  return static Int16.getValue(from:time:)(a1, (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D70]);
}

uint64_t static Int16.getValue(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, unsigned int *))
{
  uint64_t result;
  void *v4;
  char v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v4 = (void *)result;
    v6 = 0;
    v5 = a2(result, &v6);

    if ((v5 & 1) != 0)
      return v6;
    else
      return 0;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt16()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithUInt32();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt16(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D70], a1);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int16(uint64_t (*a1)(uint64_t, int *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  char v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (v5 = (void *)v4, v9 = 0, v6 = a1(v4, &v9), v5, v6))
  {
    v7 = 0;
    v8 = v9;
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  *(_WORD *)a2 = v8;
  *(_BYTE *)(a2 + 2) = v7;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt16(_WORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D70], a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int16(uint64_t (*a1)(uint64_t, int *)@<X3>, _WORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (v5 = (void *)v4, v8 = 0, v6 = a1(v4, &v8), v5, v6))
    v7 = v8;
  else
    v7 = 0;
  *a2 = v7;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt16()
{
  return RIOPxrVtValueCreateWithUInt32();
}

uint64_t static UInt32.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, MEMORY[0x24BE27C90]);
}

uint64_t static Int32.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  void *v3;
  uint64_t v4;

  v3 = (void *)a3();
  v4 = RIOPxrUsdAttributeSetValue();

  return v4;
}

unint64_t static UInt32.getValueOpt(from:time:)(uint64_t a1)
{
  return static Int32.getValueOpt(from:time:)(a1, (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D70]);
}

unint64_t static Int32.getValueOpt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, unsigned int *))
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = RIOPxrUsdAttributeCopyValue();
  if (v3)
  {
    v4 = (void *)v3;
    v9 = 0;
    v5 = a2(v3, &v9);

    v6 = v9;
    v7 = v5 ^ 1;
    if (!v5)
      v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  return v6 | ((unint64_t)v7 << 32);
}

uint64_t static UInt32.getValue(from:time:)(uint64_t a1)
{
  return static Int16.getValue(from:time:)(a1, (uint64_t (*)(uint64_t, unsigned int *))MEMORY[0x24BE27D70]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt32(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE27C90]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int32(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  void *v5;
  uint64_t v6;

  v5 = (void *)a5(*a1);
  v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt32(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D70], a1);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int32(uint64_t (*a1)(uint64_t, int *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v9 = 0;
    v6 = a1(v4, &v9);

    v7 = v9;
    if (!v6)
      v7 = 0;
    v8 = v6 ^ 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  *(_DWORD *)a2 = v7;
  *(_BYTE *)(a2 + 4) = v8;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt32(_DWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32((uint64_t (*)(uint64_t, int *))MEMORY[0x24BE27D70], a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int32(uint64_t (*a1)(uint64_t, int *)@<X3>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (v5 = (void *)v4, v8 = 0, v6 = a1(v4, &v8), v5, v6))
    v7 = v8;
  else
    v7 = 0;
  *a2 = v7;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt32()
{
  return RIOPxrVtValueCreateWithUInt32();
}

uint64_t static UInt64.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt64();
  *a1 = result;
  return result;
}

uint64_t static UInt64.setValue(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, MEMORY[0x24BE27CA0]);
}

uint64_t static UInt64.getValueOpt(from:time:)(uint64_t a1)
{
  return static Int64.getValueOpt(from:time:)(a1, MEMORY[0x24BE27D78]);
}

uint64_t static Int64.getValueOpt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *))
{
  uint64_t result;
  void *v4;
  int v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v4 = (void *)result;
    v6[0] = 0;
    v5 = a2(result, v6);

    if (v5)
      return v6[0];
    else
      return 0;
  }
  return result;
}

uint64_t static UInt64.getValue(from:time:)(uint64_t a1)
{
  return static Int64.getValue(from:time:)(a1, MEMORY[0x24BE27D78]);
}

uint64_t static Int64.getValue(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *))
{
  uint64_t result;
  void *v4;
  char v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v4 = (void *)result;
    v6[0] = 0;
    v5 = a2(result, v6);

    if ((v5 & 1) != 0)
      return v6[0];
    else
      return 0;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance UInt64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE27CA0]);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  void *v5;
  uint64_t v6;

  v5 = (void *)a5(*a1);
  v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance UInt64(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64(MEMORY[0x24BE27D78], a1);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Int64(uint64_t (*a1)(uint64_t, _QWORD *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  char v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v9[0] = 0;
    v6 = a1(v4, v9);

    v7 = v9[0];
    if (!v6)
      v7 = 0;
    v8 = v6 ^ 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance UInt64(_QWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64(MEMORY[0x24BE27D78], a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Int64(uint64_t (*a1)(uint64_t, _QWORD *)@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4 && (v5 = (void *)v4, v8[0] = 0, v6 = a1(v4, v8), v5, v6))
    v7 = v8[0];
  else
    v7 = 0;
  *a2 = v7;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance UInt64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt64();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance UInt64()
{
  return RIOPxrVtValueCreateWithUInt64();
}

uint64_t Half.vtValue.getter()
{
  return RIOPxrVtValueCreateWithHalf();
}

uint64_t static Half.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf();
  *a1 = result;
  return result;
}

uint64_t static Half.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithHalf();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void static Half.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Float;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Float = RIOPxrVtValueGetFloat();

    *(_DWORD *)a1 = 0;
    v5 = Float ^ 1;
  }
  else
  {
    *(_DWORD *)a1 = 0;
    v5 = 1;
  }
  *(_BYTE *)(a1 + 4) = v5;
}

uint64_t RIOPxrVtValueRef.asHalf.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueGetFloat();
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = result ^ 1;
  return result;
}

void static Half.getValue(from:time:)(_DWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetFloat();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Half()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithHalf();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Half(_DWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetFloat();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Half()
{
  return RIOPxrVtValueCreateWithHalf();
}

uint64_t static Float.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

unint64_t static Float.getValueOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Float;
  unsigned __int8 v3;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    v1 = (void *)v0;
    Float = RIOPxrVtValueGetFloat();

    v3 = Float ^ 1;
  }
  else
  {
    v3 = 1;
  }
  return (unint64_t)v3 << 32;
}

float static Float.getValue(from:time:)()
{
  uint64_t v0;
  void *v1;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    v1 = (void *)v0;
    RIOPxrVtValueGetFloat();

  }
  return 0.0;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Float()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Float;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Float = RIOPxrVtValueGetFloat();

    v5 = Float ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = v5;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat();
}

uint64_t static Double.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithDouble();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Double.getValueOpt(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetDouble();

    return 0;
  }
  return result;
}

double static Double.getValue(from:time:)()
{
  uint64_t v0;
  void *v1;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    v1 = (void *)v0;
    RIOPxrVtValueGetDouble();

  }
  return 0.0;
}

uint64_t static Double.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Double()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithDouble();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Double;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Double = RIOPxrVtValueGetDouble();

    v5 = Double ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Double(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetDouble();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble();
}

uint64_t static simd_quatf.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithQuatf();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_quatf.getValueOpt(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetQuatf();

    return 0;
  }
  return result;
}

double static simd_quatf.getValue(from:time:)()
{
  uint64_t v0;
  double result;
  void *v2;

  v0 = RIOPxrUsdAttributeCopyValue();
  result = 0.0;
  if (v0)
  {
    v2 = (void *)v0;
    RIOPxrVtValueGetQuatf();

    return 0.0;
  }
  return result;
}

uint64_t static simd_quatf.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatf();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_quatf()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithQuatf();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_quatf(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Quatf;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Quatf = RIOPxrVtValueGetQuatf();

    v5 = Quatf ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_quatf(_OWORD *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  void *v4;

  v2 = RIOPxrUsdAttributeCopyValue();
  v3 = 0uLL;
  if (v2)
  {
    v4 = (void *)v2;
    RIOPxrVtValueGetQuatf();

    v3 = 0uLL;
  }
  *a1 = v3;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_quatf@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatf();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_quatf()
{
  return RIOPxrVtValueCreateWithQuatf();
}

uint64_t simd_quatd.vtValue.getter()
{
  return RIOPxrVtValueCreateWithQuatd();
}

uint64_t static simd_quatd.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithQuatd();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void static simd_quatd.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Quatd;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Quatd = RIOPxrVtValueGetQuatd();

    v5 = Quatd ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v5;
}

double static simd_quatd.getValue(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Quatd;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (v1 = (void *)v0, Quatd = RIOPxrVtValueGetQuatd(), v1, (Quatd & 1) != 0))
    return 0.0;
  else
    return 0.0;
}

uint64_t static simd_quatd.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatd();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_quatd()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithQuatd();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_quatd(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Quatd;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Quatd = RIOPxrVtValueGetQuatd();

    v5 = Quatd ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_quatd(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  int Quatd;
  __int128 v5;
  __int128 v6;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Quatd = RIOPxrVtValueGetQuatd();

    if (Quatd)
    {
      v6 = 0u;
      v5 = 0u;
    }
    else
    {
      v5 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_quatd@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatd();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_quatd()
{
  return RIOPxrVtValueCreateWithQuatd();
}

uint64_t static simd_float2x2.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix2f();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_float2x2.getValueOpt(from:time:)()
{
  return specialized static simd_float2x2.getValueOpt(from:time:)();
}

uint64_t static simd_float2x2.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix2d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_float2x2()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix2f();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_float2x2@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = specialized static simd_float2x2.getValueOpt(from:time:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_float2x2(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = specialized static simd_float2x2.getValue(from:time:)();
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_float2x2@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix2d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_float2x2()
{
  return RIOPxrVtValueCreateWithMatrix2f();
}

uint64_t static simd_double2x2.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix2d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void static simd_double2x2.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix2d;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix2d = RIOPxrVtValueGetMatrix2d();

    v5 = Matrix2d ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v5;
}

double static simd_double2x2.getValue(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Matrix2d;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (v1 = (void *)v0, Matrix2d = RIOPxrVtValueGetMatrix2d(), v1, (Matrix2d & 1) != 0))
    return 0.0;
  else
    return 0.0;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_double2x2()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix2d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_double2x2(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix2d;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix2d = RIOPxrVtValueGetMatrix2d();

    v5 = Matrix2d ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v5;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_double2x2(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  int Matrix2d;
  __int128 v5;
  __int128 v6;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix2d = RIOPxrVtValueGetMatrix2d();

    if (Matrix2d)
    {
      v6 = 0u;
      v5 = 0u;
    }
    else
    {
      v5 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_double2x2()
{
  return RIOPxrVtValueCreateWithMatrix2d();
}

uint64_t simd_float3x3.vtValue.getter()
{
  return RIOPxrVtValueCreateWithMatrix3f();
}

uint64_t static simd_float3x3.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix3f();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_float3x3.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[64];

  specialized static simd_float3x3.getValueOpt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float3x3?);
}

double static simd_float3x3.getValue(from:time:)@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  specialized static simd_float3x3.getValue(from:time:)(v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t static simd_float3x3.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix3d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_float3x3()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix3f();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_float3x3@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[64];

  specialized static simd_float3x3.getValueOpt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float3x3?);
}

double protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_float3x3@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  specialized static simd_float3x3.getValue(from:time:)(v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_float3x3@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix3d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_float3x3()
{
  return RIOPxrVtValueCreateWithMatrix3f();
}

uint64_t simd_double3x3.vtValue.getter()
{
  return RIOPxrVtValueCreateWithMatrix3d();
}

uint64_t static simd_double3x3.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix3d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_double3x3.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  void *v3;
  char Matrix3d;
  char v5;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v3 = (void *)result;
    Matrix3d = RIOPxrVtValueGetMatrix3d();

    result = 0;
    v5 = Matrix3d ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = v5;
  return result;
}

void static simd_double3x3.getValue(from:time:)(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix3d;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix3d = RIOPxrVtValueGetMatrix3d();

    if ((Matrix3d & 1) != 0)
    {
      v6 = 0u;
      v5 = 0u;
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v10 = 0u;
    }
    else
    {
      v5 = 0uLL;
      v7 = 0uLL;
      v8 = 0uLL;
      v9 = 0uLL;
      v10 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_double3x3()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix3d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_double3x3@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  void *v3;
  char Matrix3d;
  char v5;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v3 = (void *)result;
    Matrix3d = RIOPxrVtValueGetMatrix3d();

    result = 0;
    v5 = Matrix3d ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = v5;
  return result;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_double3x3(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  int Matrix3d;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix3d = RIOPxrVtValueGetMatrix3d();

    if (Matrix3d)
    {
      v6 = 0u;
      v5 = 0u;
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v10 = 0u;
    }
    else
    {
      v5 = 0uLL;
      v7 = 0uLL;
      v8 = 0uLL;
      v9 = 0uLL;
      v10 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_double3x3()
{
  return RIOPxrVtValueCreateWithMatrix3d();
}

uint64_t static simd_float4x4.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix4f();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_float4x4.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  float32x4_t v3[5];

  specialized static simd_float4x4.getValueOpt(from:time:)(v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float4x4?);
}

uint64_t static simd_float4x4.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_float4x4()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix4f();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_float4x4@<X0>(uint64_t a1@<X8>)
{
  float32x4_t v3[5];

  specialized static simd_float4x4.getValueOpt(from:time:)(v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float4x4?);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_float4x4(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(double *)&v2 = specialized static simd_float4x4.getValue(from:time:)();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance simd_float4x4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_float4x4()
{
  return RIOPxrVtValueCreateWithMatrix4f();
}

uint64_t simd_double4x4.vtValue.getter()
{
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t static simd_double4x4.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static simd_double4x4.getValueOpt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  int Matrix4d;
  _BYTE v6[144];
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      memset(v7, 0, sizeof(v7));
      _s9RealityIO7Frame4DVSgWOi_((uint64_t)v7);
    }
    else
    {
      _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v7);
    }
    outlined init with take of (URL, __REAsset)((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for simd_double4x4?);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for simd_double4x4?);
  return outlined init with take of (URL, __REAsset)((uint64_t)v7, a1, &demangling cache variable for type metadata for simd_double4x4?);
}

void static simd_double4x4.getValue(from:time:)(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix4d;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix4d = RIOPxrVtValueGetMatrix4d();

    if ((Matrix4d & 1) != 0)
    {
      v6 = 0u;
      v5 = 0u;
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
    }
    else
    {
      v5 = 0uLL;
      v7 = 0uLL;
      v8 = 0uLL;
      v9 = 0uLL;
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v12;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance simd_double4x4()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance simd_double4x4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix4d;
  _BYTE v6[144];
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix4d = RIOPxrVtValueGetMatrix4d();

    if ((Matrix4d & 1) != 0)
    {
      memset(v7, 0, sizeof(v7));
      _s9RealityIO7Frame4DVSgWOi_((uint64_t)v7);
    }
    else
    {
      _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v7);
    }
    outlined init with take of (URL, __REAsset)((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for simd_double4x4?);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
  }
  outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for simd_double4x4?);
  return outlined init with take of (URL, __REAsset)((uint64_t)v7, a1, &demangling cache variable for type metadata for simd_double4x4?);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance simd_double4x4(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  int Matrix4d;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix4d = RIOPxrVtValueGetMatrix4d();

    if (Matrix4d)
    {
      v6 = 0u;
      v5 = 0u;
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
    }
    else
    {
      v5 = 0uLL;
      v7 = 0uLL;
      v8 = 0uLL;
      v9 = 0uLL;
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v12;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance simd_double4x4()
{
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t Frame4D.vtValue.getter()
{
  simd_double4x4 v1;

  Frame4D.asDouble4x4()(&v1);
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t static Frame4D.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;
  simd_double4x4 v3;

  Frame4D.asDouble4x4()(&v3);
  v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Frame4D.getValueOpt(from:time:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix4d;
  _OWORD v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2 && (v3 = (void *)v2, Matrix4d = RIOPxrVtValueGetMatrix4d(), v3, (Matrix4d & 1) != 0))
  {
    memset(v6, 0, sizeof(v6));
    Frame4D.init(_:)((uint64_t)v6, a1);
    return _s9RealityIO7Frame4DVSgWOi_((uint64_t)a1);
  }
  else
  {
    _s9RealityIO7Frame4DVSgWOi0_((uint64_t)v6);
    return outlined init with take of (URL, __REAsset)((uint64_t)v6, (uint64_t)a1, &demangling cache variable for type metadata for Frame4D?);
  }
}

double static Frame4D.getValue(from:time:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix4d;
  double result;
  _OWORD v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2 && (v3 = (void *)v2, Matrix4d = RIOPxrVtValueGetMatrix4d(), v3, (Matrix4d & 1) != 0))
  {
    memset(v6, 0, sizeof(v6));
    Frame4D.init(_:)((uint64_t)v6, a1);
  }
  else
  {
    result = 0.0;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t static Frame4D.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFrame4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Frame4D()
{
  void *v0;
  uint64_t v1;
  simd_double4x4 v3;

  Frame4D.asDouble4x4()(&v3);
  v0 = (void *)RIOPxrVtValueCreateWithMatrix4d();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

double protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance Frame4D@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  int Matrix4d;
  double result;
  _OWORD v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2 && (v3 = (void *)v2, Matrix4d = RIOPxrVtValueGetMatrix4d(), v3, Matrix4d))
  {
    memset(v6, 0, sizeof(v6));
    Frame4D.init(_:)((uint64_t)v6, a1);
  }
  else
  {
    result = 0.0;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance Frame4D@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFrame4d();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance Frame4D()
{
  simd_double4x4 v1;

  Frame4D.asDouble4x4()(&v1);
  return RIOPxrVtValueCreateWithMatrix4d();
}

uint64_t String.vtValue.getter()
{
  uint64_t v0;

  String.utf8CString.getter();
  v0 = RIOPxrVtValueCreateWithCString();
  swift_release();
  return v0;
}

uint64_t static String.setValue(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  String.utf8CString.getter();
  v0 = (void *)RIOPxrVtValueCreateWithCString();
  swift_release();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static String.getValueOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyString();
  if (!v2)
  {

    return 0;
  }
  v3 = (void *)v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t static String.getValue(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyString();
  if (!v2)
  {

    return 0;
  }
  v3 = (void *)v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t static String.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateString();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance String()
{
  void *v0;
  uint64_t v1;

  String.utf8CString.getter();
  v0 = (void *)RIOPxrVtValueCreateWithCString();
  swift_release();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance String(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2)
    goto LABEL_5;
  v3 = (void *)v2;
  v4 = RIOPxrVtValueCopyString();
  if (!v4)
  {

LABEL_5:
    v6 = 0;
    v8 = 0;
    goto LABEL_6;
  }
  v5 = (void *)v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

LABEL_6:
  *a1 = v6;
  a1[1] = v8;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance String(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2)
    goto LABEL_5;
  v3 = (void *)v2;
  v4 = RIOPxrVtValueCopyString();
  if (!v4)
  {

LABEL_5:
    v6 = 0;
    v8 = 0xE000000000000000;
    goto LABEL_6;
  }
  v5 = (void *)v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

LABEL_6:
  *a1 = v6;
  a1[1] = v8;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateString();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance String()
{
  uint64_t v0;

  String.utf8CString.getter();
  v0 = RIOPxrVtValueCreateWithCString();
  swift_release();
  return v0;
}

uint64_t ToolsFoundations.Token.vtValue.getter()
{
  return RIOPxrVtValueCreateWithToken();
}

uint64_t static ToolsFoundations.Token.setValue(_:to:time:)(_QWORD *a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValue(_:to:time:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BE27C80]);
}

void static ToolsFoundations.Token.getValueOpt(from:time:)(uint64_t *a1@<X8>)
{
  static ToolsFoundations.Token.getValueOpt(from:time:)(MEMORY[0x24BE27AA0], a1);
}

void static ToolsFoundations.Token.getValue(from:time:)(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (v3 = (void *)v2, v4 = (id)RIOPxrVtValueCopyToken(), v3, !v4))
    v4 = (id)RIOPxrTfTokenEmpty();
  *a1 = v4;
}

uint64_t static ToolsFoundations.Token.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateToken();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance ToolsFoundations.Token(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE27C80]);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ToolsFoundations.Token(uint64_t *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ToolsFoundations.Token(MEMORY[0x24BE27AA0], a1);
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance ToolsFoundations.Token(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (v3 = (void *)v2, v4 = (id)RIOPxrVtValueCopyToken(), v3, !v4))
    v4 = (id)RIOPxrTfTokenEmpty();
  *a1 = v4;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance ToolsFoundations.Token@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateToken();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance ToolsFoundations.Token()
{
  return RIOPxrVtValueCreateWithToken();
}

uint64_t SceneDescriptionFoundations.AssetPath.vtValue.getter()
{
  return RIOPxrVtValueCreateWithAssetPath();
}

uint64_t static SceneDescriptionFoundations.AssetPath.setValue(_:to:time:)(_QWORD *a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValue(_:to:time:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BE27AD0]);
}

uint64_t static ToolsFoundations.Token.setValue(_:to:time:)(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  void *v3;
  uint64_t v4;

  v3 = (void *)a3(*a1);
  v4 = RIOPxrUsdAttributeSetValue();

  return v4;
}

void static SceneDescriptionFoundations.AssetPath.getValueOpt(from:time:)(uint64_t *a1@<X8>)
{
  static ToolsFoundations.Token.getValueOpt(from:time:)(MEMORY[0x24BE279B0], a1);
}

void static ToolsFoundations.Token.getValueOpt(from:time:)(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = a1();

  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

void static SceneDescriptionFoundations.AssetPath.getValue(from:time:)(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t EmptyPath;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (v3 = (void *)v2, EmptyPath = RIOPxrVtValueCopyAssetPath(), v3, !EmptyPath))
    EmptyPath = RIOPxrSdfAssetPathCreateEmptyPath();
  *a1 = EmptyPath;
}

uint64_t static SceneDescriptionFoundations.AssetPath.valueTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateAssetPath();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance SceneDescriptionFoundations.AssetPath(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance Int64(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE27AD0]);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t *a1@<X8>)
{
  protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ToolsFoundations.Token(MEMORY[0x24BE279B0], a1);
}

void protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ToolsFoundations.Token(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = a1();

  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

void protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t EmptyPath;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2 || (v3 = (void *)v2, EmptyPath = RIOPxrVtValueCopyAssetPath(), v3, !EmptyPath))
    EmptyPath = RIOPxrSdfAssetPathCreateEmptyPath();
  *a1 = EmptyPath;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance SceneDescriptionFoundations.AssetPath@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateAssetPath();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance SceneDescriptionFoundations.AssetPath()
{
  return RIOPxrVtValueCreateWithAssetPath();
}

uint64_t static SIMD2<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD2<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t static SIMD2<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD2<>.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD2<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD2<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t static TexCoord2<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord2<>.getValueOpt(from:time:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE40C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TexCoord2, (void (*)(char *, char *))partial apply for closure #1 in static TexCoord2<>.getValueOpt(from:time:), a4, a5);
}

uint64_t specialized TexCoord2.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = 4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 32);
    if (v5 != 1)
    {
      v6 = result;
      *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
      result = swift_bridgeObjectRelease();
      *a2 = v6;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static TexCoord2<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord2<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40C8], (uint64_t (*)(char *, uint64_t, uint64_t))TexCoord2.init(_:), a4);
}

uint64_t static TexCoord2<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord2<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TexCoord2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40C8], (void (*)(char *, uint64_t, uint64_t))SIMD2.init(_:), a5);
}

uint64_t static TexCoord2<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueTypeName.getter(a1, a2, MEMORY[0x24BE27068], MEMORY[0x24BE27078], MEMORY[0x24BE27088], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord2<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> TexCoord2<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord2<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord2<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> TexCoord2<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t TexCoord2<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord2<>.vtValue.getter(a1, a2, (uint64_t)MEMORY[0x24BEE40C8], (void (*)(char *, uint64_t, uint64_t))SIMD2.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2)
{
  return TexCoord2<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static TexCoord3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord2<>.getValueOpt(from:time:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TexCoord3, (void (*)(char *, char *))partial apply for closure #1 in static TexCoord3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static TexCoord3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord2<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))TexCoord3.init(_:), a4);
}

uint64_t static TexCoord3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord2<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TexCoord3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static TexCoord3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueTypeName.getter(a1, a2, MEMORY[0x24BE27098], MEMORY[0x24BE270A8], MEMORY[0x24BE270B8], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord3<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> TexCoord3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord3<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord3<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> TexCoord3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t TexCoord3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord2<>.vtValue.getter(a1, a2, (uint64_t)MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2)
{
  return TexCoord3<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static Color3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return static Color3<>.getValueOpt(from:time:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE40F8], type metadata accessor for Color3, (void (*)(char *, char *))partial apply for closure #1 in static Color3<>.getValueOpt(from:time:), a5, a6);
}

uint64_t static Color3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Color3<>.getValue(from:time:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))Color3.init(_:), a5);
}

uint64_t static Color3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  return static Color3<>.setValue(_:to:time:)(a1, a2, a3, a4, a5, type metadata accessor for Color3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t, uint64_t))SIMD3<>.init(_:), a6);
}

uint64_t static Color3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueTypeName.getter(a1, a2, MEMORY[0x24BE26E18], MEMORY[0x24BE26E28], MEMORY[0x24BE26E38], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Color3<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Color3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Color3<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Color3<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Color3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t Color3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return Color3<>.vtValue.getter(a1, a2, (uint64_t)MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, _QWORD, uint64_t))SIMD3<>.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Color3<A>(uint64_t a1, uint64_t a2)
{
  return Color3<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static Point3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord2<>.getValueOpt(from:time:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Point3, (void (*)(char *, char *))partial apply for closure #1 in static Point3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static Point3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord2<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))Point3.init(_:), a4);
}

uint64_t static Point3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord2<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Point3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static Point3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueTypeName.getter(a1, a2, MEMORY[0x24BE26FF8], MEMORY[0x24BE27008], MEMORY[0x24BE27018], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Point3<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Point3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Point3<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Point3<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Point3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Point3<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t Point3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord2<>.vtValue.getter(a1, a2, (uint64_t)MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Point3<A>(uint64_t a1, uint64_t a2)
{
  return Point3<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static Vector3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord2<>.getValueOpt(from:time:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Vector3, (void (*)(char *, char *))partial apply for closure #1 in static Vector3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static Vector3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord2<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))Vector3.init(_:), a4);
}

uint64_t static Vector3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord2<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Vector3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static Vector3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueTypeName.getter(a1, a2, MEMORY[0x24BE27108], MEMORY[0x24BE27118], MEMORY[0x24BE27128], a3);
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Vector3<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Vector3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Vector3<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Vector3<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Vector3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Vector3<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t Vector3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord2<>.vtValue.getter(a1, a2, (uint64_t)MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Vector3<A>(uint64_t a1, uint64_t a2)
{
  return Vector3<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static Normal3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static TexCoord2<>.getValueOpt(from:time:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Normal3, (void (*)(char *, char *))partial apply for closure #1 in static Normal3<>.getValueOpt(from:time:), a4, a5);
}

uint64_t static TexCoord2<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, void (*a6)(char *, char *)@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;

  v15 = *(_QWORD *)(a3 + 8);
  a4(255, a2, v15);
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = &v23[-v18];
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a3 + 24))(a1, a2, a3, a8);
  v24 = a2;
  v25 = a3;
  v20 = a5(0, a2, v15);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a6, (uint64_t)v23, MEMORY[0x24BEE4078], v20, v21, a7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t closure #1 in static TexCoord2<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];

  v9 = *(_QWORD *)(a3 + 8);
  v10 = a5(0, a2, v9);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v15 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)v15 - v11, a1);
  return a6(v12, a2, v9);
}

uint64_t specialized TexCoord3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = 4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 32);
  if (v5 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
  if (v5 >= 3)
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)(a1 + 40);
    result = swift_bridgeObjectRelease();
    *a2 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static Normal3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static TexCoord2<>.getValue(from:time:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))Normal3.init(_:), a4);
}

uint64_t static TexCoord2<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t), uint64_t (*a5)(char *, uint64_t, uint64_t), double a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a3 + 8);
  v12 = a4(0, a2, v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v16 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a3 + 32))(a1, a2, a3, a6);
  return a5(v14, a2, v11);
}

uint64_t static Normal3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static TexCoord2<>.setValue(_:to:time:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Normal3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:), a5);
}

uint64_t static TexCoord2<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(_QWORD, uint64_t, uint64_t), void (*a7)(char *, uint64_t, uint64_t), double a8)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);

  v23 = a2;
  v24 = a7;
  v9 = a4;
  v13 = *(_QWORD *)(a4 + 8);
  v14 = a5(0, a3, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  v18 = a6(0, a3, v13);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v24(v17, a3, v13);
  LOBYTE(v9) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, double))(v9 + 16))(v21, v23, a3, v9, a8);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return v9 & 1;
}

uint64_t static Normal3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueTypeName.getter(a1, a2, MEMORY[0x24BE26FC8], MEMORY[0x24BE26FD8], MEMORY[0x24BE26FE8], a3);
}

uint64_t static TexCoord2<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t MetatypeMetadata;
  uint64_t result;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    result = a3();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    result = a4();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    result = a5();
  }
  *a6 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Normal3<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Normal3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Normal3<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Normal3<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Normal3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t Normal3<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return TexCoord2<>.vtValue.getter(a1, a2, (uint64_t)MEMORY[0x24BEE40F8], (void (*)(char *, uint64_t, uint64_t))SIMD3.init(_:));
}

uint64_t TexCoord2<>.vtValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v9 + 16);
  v14 = *(_QWORD *)(v13 + 8);
  v22 = v15(0, v12, v14);
  v16 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4, a1);
  a4(v11, v12, v14);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 16))(v18, v12, a2);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v22);
  return v19;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Normal3<A>(uint64_t a1, uint64_t a2)
{
  return Normal3<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static Color4<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return static Color3<>.getValueOpt(from:time:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4158], type metadata accessor for Color4, (void (*)(char *, char *))partial apply for closure #1 in static Color4<>.getValueOpt(from:time:), a5, a6);
}

uint64_t static Color3<>.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t)@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t)@<X5>, void (*a7)(char *, char *)@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(char *, char *);
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a7;
  v16 = *(_QWORD *)(a4 + 8);
  a5(255, a2, v16);
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v24 - v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 24))(a1, a2, a4, a9);
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v21 = a6(0, a2, a3, v16);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(v25, (uint64_t)v26, MEMORY[0x24BEE4078], v21, v22, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

uint64_t closure #1 in static Color3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t), uint64_t (*a7)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a4 + 8);
  v12 = a6(0, a2, v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v17 - v13, a1);
  return a7(v14, a2, a3, v11);
}

uint64_t specialized Color4.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = 4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 32);
  if (v5 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v6 = result;
  *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
  if (v5 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(a1 + 40);
  if (v5 != 3)
  {
    *(_DWORD *)(result + 44) = *(_DWORD *)(a1 + 44);
    result = swift_bridgeObjectRelease();
    *a2 = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t static Color4<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Color3<>.getValue(from:time:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE4158], (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))Color4.init(_:), a5);
}

uint64_t static Color3<>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, uint64_t, uint64_t, uint64_t), double a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v13 = *(_QWORD *)(a4 + 8);
  v14 = a5(0, a2, v13);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v18 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 32))(a1, a2, a4, a7);
  return a6(v16, a2, a3, v13);
}

uint64_t static Color4<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  return static Color3<>.setValue(_:to:time:)(a1, a2, a3, a4, a5, type metadata accessor for Color4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE4158], (void (*)(char *, uint64_t, uint64_t, uint64_t))SIMD4<>.init(_:), a6);
}

uint64_t static Color3<>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t), uint64_t (*a7)(_QWORD, uint64_t, uint64_t), void (*a8)(char *, uint64_t, uint64_t, uint64_t), double a9)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);

  v26 = a2;
  v27 = a8;
  v10 = a5;
  v25 = a1;
  v14 = *(_QWORD *)(a5 + 8);
  v15 = a6(0, a3, a4, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v24 - v17;
  v19 = a7(0, a3, v14);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v25, v15);
  v27(v18, a3, a4, v14);
  LOBYTE(v10) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, double))(v10 + 16))(v22, v26, a3, v10, a9);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  return v10 & 1;
}

uint64_t static Color4<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueTypeName.getter(a1, a2, MEMORY[0x24BE26E48], MEMORY[0x24BE26E58], MEMORY[0x24BE26E68], a3);
}

uint64_t static Color3<>.valueTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(void)@<X4>, uint64_t (*a5)(void)@<X5>, uint64_t *a6@<X8>)
{
  uint64_t MetatypeMetadata;
  uint64_t result;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    result = a3();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    result = a4();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    result = a5();
  }
  *a6 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return static Color4<>.setValue(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <> Color4<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static Color4<>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static Color4<>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <> Color4<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color4<>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t Color4<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return Color3<>.vtValue.getter(a1, a2, (uint64_t)MEMORY[0x24BEE4158], (void (*)(char *, uint64_t, _QWORD, uint64_t))SIMD4<>.init(_:));
}

uint64_t Color3<>.vtValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, _QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v9 + 16);
  v14 = *(_QWORD *)(v13 + 8);
  v22 = v15(0, v12, v14);
  v16 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4, a1);
  a4(v11, v12, *(_QWORD *)(a1 + 24), v14);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 16))(v18, v12, a2);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v22);
  return v19;
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> Color4<A>(uint64_t a1, uint64_t a2)
{
  return Color4<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static ManagedColor.getValueOpt(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a5;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v27 - v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 16))(a1, a2, a4, a6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v22 = type metadata accessor for ManagedColor(0, a2, a3, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v27, 1, 1, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v21, v14, a2);
    v24 = RIOPxrUsdObjectCopyColorSpace();
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v21, a2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, a2);
    v28 = v24;
    v25 = v27;
    ManagedColor.init(color:space:)((uint64_t)v18, &v28, a2, a3, a4, v27);
    v26 = type metadata accessor for ManagedColor(0, a2, a3, a4);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 0, 1, v26);
  }
}

uint64_t static ManagedColor.getValue(from:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ManagedColor(255, v14, v15, v16);
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v25 - v20;
  static ManagedColor.getValueOpt(from:time:)(a1, a2, a3, a4, (uint64_t)&v25 - v20, a6);
  v22 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v17) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(a5, v21, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  v23 = (_OWORD *)swift_allocObject();
  v23[1] = xmmword_22BD0C770;
  v23[2] = 0u;
  v23[3] = 0u;
  (*(void (**)(void))(a3 + 8))();
  v26 = 0;
  ManagedColor.init(color:space:)((uint64_t)v13, &v26, a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t static ManagedColor.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  if (*(_QWORD *)(a1 + *(int *)(type metadata accessor for ManagedColor(0, a3, a4, a5) + 44)))
    RIOPxrUsdObjectSetColorSpace();
  else
    RIOPxrUsdObjectClearColorSpace();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(a5 + 8))(a1, a2, a3, a5, a6) & 1;
}

uint64_t static ManagedColor.valueTypeName.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance ManagedColor<A>(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  return static ManagedColor.setValue(_:to:time:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance ManagedColor<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return static ManagedColor.getValueOpt(from:time:)(a1, a2[2], a2[3], a2[4], a3, a4);
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance ManagedColor<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return static ManagedColor.getValue(from:time:)(a1, a2[2], a2[3], a2[4], a3, a4);
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance ManagedColor<A>(uint64_t a1, uint64_t a2)
{
  return static ManagedColor.valueTypeName.getter(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 32));
}

uint64_t static Half.vtValue(from:)(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v1)
  {
    if (v1 != 1)
      return RIOPxrVtValueCreateWithHalf2();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void static Half.getValue2Opt(from:time:)(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    if (RIOPxrVtValueGetHalf2())
    {
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v4 + 16) = 2;
      *(_QWORD *)(v4 + 32) = 0;
    }
    else
    {
      v4 = 0;
    }
    *a1 = v4;

  }
  else
  {
    *a1 = 0;
  }
}

uint64_t RIOPxrVtValueRef.asHalf2.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  if (RIOPxrVtValueGetHalf2())
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = 2;
    *(_QWORD *)(result + 32) = 0;
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

void static Half.getValue2(from:time:)(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (!v2)
    goto LABEL_5;
  v3 = (void *)v2;
  if (!RIOPxrVtValueGetHalf2())
  {

LABEL_5:
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = 2;
    *(_QWORD *)(v4 + 32) = 0;
    goto LABEL_6;
  }
  v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v4 + 16) = 2;
  *(_QWORD *)(v4 + 32) = 0;

LABEL_6:
  *a1 = v4;
}

uint64_t SIMD2<>.vtValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(a2 + 16))(v2);
}

uint64_t static Half.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf2();
  *a1 = result;
  return result;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Half(_QWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Half((void (*)(void))RIOPxrVtValueRef.asHalf2.getter, a1);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Half(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v1)
  {
    if (v1 != 1)
      return RIOPxrVtValueCreateWithHalf2();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void static Half.getValue3Opt(from:time:)(_QWORD *a1@<X8>)
{
  static Half.getValue3Opt(from:time:)((void (*)(void))RIOPxrVtValueRef.asHalf3.getter, a1);
}

uint64_t RIOPxrVtValueRef.asHalf3.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  if (RIOPxrVtValueGetHalf3())
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = 4;
    *(_DWORD *)(result + 44) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

void static Half.getValue3(from:time:)(_QWORD *a1@<X8>)
{
  static Half.getValue3(from:time:)((void (*)(_QWORD **__return_ptr))RIOPxrVtValueRef.asHalf3.getter, a1);
}

uint64_t static Half.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf3();
  *a1 = result;
  return result;
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Half(_QWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Half((void (*)(void))RIOPxrVtValueRef.asHalf3.getter, a1);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf3();
  *a1 = result;
  return result;
}

void static Half.getValue4Opt(from:time:)(_QWORD *a1@<X8>)
{
  static Half.getValue3Opt(from:time:)((void (*)(void))RIOPxrVtValueRef.asHalf4.getter, a1);
}

void static Half.getValue3Opt(from:time:)(void (*a1)(void)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id v5;

  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (id)v4;
    a1();

  }
  else
  {
    *a2 = 0;
  }
}

uint64_t RIOPxrVtValueRef.asHalf4.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  if (RIOPxrVtValueGetHalf4())
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = 4;
    *(_OWORD *)(result + 32) = 0uLL;
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

void static Half.getValue4(from:time:)(_QWORD *a1@<X8>)
{
  static Half.getValue3(from:time:)((void (*)(_QWORD **__return_ptr))RIOPxrVtValueRef.asHalf4.getter, a1);
}

void static Half.getValue3(from:time:)(void (*a1)(_QWORD **__return_ptr)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = RIOPxrUsdAttributeCopyValue();
  if (!v4 || (v5 = (void *)v4, a1(&v7), v5, (v6 = v7) == 0))
  {
    v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v6[2] = 4;
    v6[4] = 0;
    v6[5] = 0;
    swift_bridgeObjectRelease();
  }
  *a2 = v6;
}

uint64_t static Half.setValue4(_:to:time:)(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v1 = (void *)specialized static Half.vtValue(from:)((uint64_t)&v4);
  v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

uint64_t static Half.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Half(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v1 = (void *)specialized static Half.vtValue(from:)((uint64_t)&v4);
  v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Half(_QWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Half((void (*)(void))RIOPxrVtValueRef.asHalf4.getter, a1);
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Half(void (*a1)(void)@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id v5;

  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (id)v4;
    a1();

  }
  else
  {
    *a2 = 0;
  }
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf4();
  *a1 = result;
  return result;
}

uint64_t static Float.getValue2Opt(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetFloat2();

    return 0;
  }
  return result;
}

double static Float.getValue2(from:time:)()
{
  uint64_t v0;
  void *v1;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0)
  {
    v1 = (void *)v0;
    RIOPxrVtValueGetFloat2();

  }
  return 0.0;
}

uint64_t static Float.setValue2(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat2();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Float.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Float()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat2();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Float2;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Float2 = RIOPxrVtValueGetFloat2();

    v5 = Float2 ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Float(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetFloat2();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat2();
}

uint64_t static Float.getValue3Opt(from:time:)(uint64_t a1)
{
  return static Float.getValue3Opt(from:time:)(a1, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27CF8]);
}

double static Float.getValue3(from:time:)(uint64_t a1)
{
  return static Float.getValue3(from:time:)(a1, (uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27CF8]);
}

uint64_t static Float.setValue3(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat3();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Float.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Float()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat3();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27CF8], a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float(_OWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float((uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27CF8], a1);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat3();
}

uint64_t static Float.getValue4Opt(from:time:)(uint64_t a1)
{
  return static Float.getValue3Opt(from:time:)(a1, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D00]);
}

uint64_t static Float.getValue3Opt(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *))
{
  uint64_t result;
  void *v4;
  int v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v4 = (void *)result;
    v6[0] = 0;
    v6[1] = 0;
    v5 = a2(result, v6);

    if (v5)
      return v6[0];
    else
      return 0;
  }
  return result;
}

double static Float.getValue4(from:time:)(uint64_t a1)
{
  return static Float.getValue3(from:time:)(a1, (uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27D00]);
}

double static Float.getValue3(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, __int128 *, __n128))
{
  uint64_t v3;
  __int128 v4;
  void *v5;
  char v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = RIOPxrUsdAttributeCopyValue();
  v4 = 0uLL;
  if (v3)
  {
    v5 = (void *)v3;
    v8 = 0uLL;
    v6 = a2(v3, &v8, (__n128)0);

    if ((v6 & 1) != 0)
      *(_QWORD *)&v4 = v8;
    else
      *(_QWORD *)&v4 = 0;
  }
  return *(double *)&v4;
}

uint64_t static Float.setValue4(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat4();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Float.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Float()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithFloat4();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Float(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27D00], a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float(uint64_t (*a1)(uint64_t, uint64_t *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v10 = 0;
    v11 = 0;
    v6 = a1(v4, &v10);

    v7 = v10;
    v8 = v11;
    if (!v6)
    {
      v7 = 0;
      v8 = 0;
    }
    v9 = v6 ^ 1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 1;
  }
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v9;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Float(_OWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float((uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27D00], a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float(uint64_t (*a1)(uint64_t, __int128 *, __n128)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  void *v6;
  int v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  v5 = 0uLL;
  if (v4)
  {
    v6 = (void *)v4;
    v8 = 0uLL;
    v7 = a1(v4, &v8, (__n128)0);

    if (v7)
      v5 = v8;
    else
      v5 = 0uLL;
  }
  *a2 = v5;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Float()
{
  return RIOPxrVtValueCreateWithFloat4();
}

uint64_t static Double.getValue2Opt(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetDouble2();

    return 0;
  }
  return result;
}

double static Double.getValue2(from:time:)()
{
  uint64_t v0;
  double result;
  void *v2;

  v0 = RIOPxrUsdAttributeCopyValue();
  result = 0.0;
  if (v0)
  {
    v2 = (void *)v0;
    RIOPxrVtValueGetDouble2();

    return 0.0;
  }
  return result;
}

uint64_t static Double.setValue2(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithDouble2();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Double.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Double()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithDouble2();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Double2;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Double2 = RIOPxrVtValueGetDouble2();

    v5 = Double2 ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v5;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Double(_OWORD *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  void *v4;

  v2 = RIOPxrUsdAttributeCopyValue();
  v3 = 0uLL;
  if (v2)
  {
    v4 = (void *)v2;
    RIOPxrVtValueGetDouble2();

    v3 = 0uLL;
  }
  *a1 = v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble2();
}

uint64_t static Double.vtValue(from:)(__n128 a1, __n128 a2)
{
  return static Double.vtValue(from:)((uint64_t (*)(_OWORD *))MEMORY[0x24BE27B18], a1, a2);
}

{
  return static Double.vtValue(from:)((uint64_t (*)(_OWORD *))MEMORY[0x24BE27B28], a1, a2);
}

void static Double.getValue3Opt(from:time:)(uint64_t a1@<X8>)
{
  static Double.getValue3Opt(from:time:)((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CD8], a1);
}

double static Double.getValue3(from:time:)(uint64_t a1)
{
  return static Double.getValue3(from:time:)(a1, (uint64_t (*)(uint64_t, _OWORD *))MEMORY[0x24BE27CD8]);
}

uint64_t static Double.setValue3(_:to:time:)(uint64_t a1, __n128 a2, __n128 a3)
{
  return static Double.setValue3(_:to:time:)(a2, a3, a1, (uint64_t (*)(_OWORD *))MEMORY[0x24BE27B18]);
}

uint64_t static Double.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(a1, a2, a3, a4, (uint64_t (*)(_OWORD *))MEMORY[0x24BE27B18]);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CD8], a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double(_OWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CD8], a1);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble3();
}

uint64_t static Double.vtValue(from:)(uint64_t (*a1)(_OWORD *), __n128 a2, __n128 a3)
{
  _OWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return a1(v4);
}

void static Double.getValue4Opt(from:time:)(uint64_t a1@<X8>)
{
  static Double.getValue3Opt(from:time:)((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CE0], a1);
}

void static Double.getValue3Opt(from:time:)(uint64_t (*a1)(uint64_t, __int128 *)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v12 = 0u;
    v13 = 0u;
    v6 = a1(v4, &v12);

    if (v6)
    {
      v8 = *((_QWORD *)&v12 + 1);
      v7 = v12;
      v10 = *((_QWORD *)&v13 + 1);
      v9 = v13;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
    }
    v11 = v6 ^ 1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 1;
  }
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = v11;
}

double static Double.getValue4(from:time:)(uint64_t a1)
{
  return static Double.getValue3(from:time:)(a1, (uint64_t (*)(uint64_t, _OWORD *))MEMORY[0x24BE27CE0]);
}

double static Double.getValue3(from:time:)(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *))
{
  uint64_t v3;
  void *v4;
  char v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = RIOPxrUsdAttributeCopyValue();
  if (v3 && (v4 = (void *)v3, memset(v7, 0, sizeof(v7)), v5 = a2(v3, v7), v4, (v5 & 1) != 0))
    return *(double *)v7;
  else
    return 0.0;
}

uint64_t static Double.setValue4(_:to:time:)(uint64_t a1, __n128 a2, __n128 a3)
{
  return static Double.setValue3(_:to:time:)(a2, a3, a1, (uint64_t (*)(_OWORD *))MEMORY[0x24BE27B28]);
}

uint64_t static Double.setValue3(_:to:time:)(__n128 a1, __n128 a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  void *v4;
  uint64_t v5;
  _OWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v4 = (void *)a4(v7);
  v5 = RIOPxrUsdAttributeSetValue();

  return v5;
}

uint64_t static Double.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Double(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(a1, a2, a3, a4, (uint64_t (*)(_OWORD *))MEMORY[0x24BE27B28]);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Double(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_OWORD *))
{
  __int128 v5;
  void *v6;
  uint64_t v7;
  _OWORD v9[2];

  v5 = a1[1];
  v9[0] = *a1;
  v9[1] = v5;
  v6 = (void *)a5(v9);
  v7 = RIOPxrUsdAttributeSetValue();

  return v7;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Double(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CE0], a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Double(uint64_t (*a1)(uint64_t, __int128 *)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v12 = 0u;
    v13 = 0u;
    v6 = a1(v4, &v12);

    if (v6)
    {
      v8 = *((_QWORD *)&v12 + 1);
      v7 = v12;
      v10 = *((_QWORD *)&v13 + 1);
      v9 = v13;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
    }
    v11 = v6 ^ 1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 1;
  }
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = v11;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Double(_OWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double((uint64_t (*)(uint64_t, __int128 *))MEMORY[0x24BE27CE0], a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Double(uint64_t (*a1)(uint64_t, __int128 *)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = RIOPxrUsdAttributeCopyValue();
  if (v4)
  {
    v5 = (void *)v4;
    v9 = 0u;
    v10 = 0u;
    v6 = a1(v4, &v9);

    if (v6)
    {
      v8 = v9;
      v7 = v10;
    }
    else
    {
      v7 = 0uLL;
      v8 = 0uLL;
    }
  }
  else
  {
    v8 = 0uLL;
    v7 = 0uLL;
  }
  *a2 = v8;
  a2[1] = v7;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Double()
{
  return RIOPxrVtValueCreateWithDouble4();
}

uint64_t static Int.vtValue(from:)()
{
  return RIOPxrVtValueCreateWithInt2();
}

{
  return RIOPxrVtValueCreateWithInt3();
}

{
  return RIOPxrVtValueCreateWithInt4();
}

double static Int.getValue2Opt(from:time:)()
{
  return specialized static Int.getValue2Opt(from:time:)();
}

uint64_t static Int.setValue2(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt2();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int.value2TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Int(const float *a1)
{
  void *v1;
  uint64_t v2;

  vld2_f32(a1);
  v1 = (void *)RIOPxrVtValueCreateWithInt2();
  v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Int(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  specialized static Int.getValue2Opt(from:time:)();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Int(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = specialized static Int.getValue2(from:time:)();
  *a1 = v2;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.value2TypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Int(const float *a1)
{
  vld2_f32(a1);
  return RIOPxrVtValueCreateWithInt2();
}

uint64_t static Int32.getValue2Opt(from:time:)()
{
  uint64_t result;
  void *v1;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    RIOPxrVtValueGetInt2();

    return 0;
  }
  return result;
}

double static Int32.getValue2(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Int2;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (v1 = (void *)v0, Int2 = RIOPxrVtValueGetInt2(), v1, (Int2 & 1) != 0))
    return 0.0;
  else
    return 0.0;
}

uint64_t static Int32.setValue2(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt2();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2Element.setValue2(_:to:time:) in conformance Int32()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt2();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2Opt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Int2;
  char v5;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Int2 = RIOPxrVtValueGetInt2();

    v5 = Int2 ^ 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = v5;
}

void protocol witness for static UsdAttributeValueSIMD2Element.getValue2(from:time:) in conformance Int32(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    RIOPxrVtValueGetInt2();

  }
  *a1 = 0;
}

uint64_t protocol witness for static UsdVtValueSIMD2Element.vtValue(from:) in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt2();
}

uint64_t static Int32.getValue3Opt(from:time:)(uint64_t a1)
{
  return static Float.getValue3Opt(from:time:)(a1, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D28]);
}

double static Int32.getValue3(from:time:)(uint64_t a1)
{
  return static Float.getValue3(from:time:)(a1, (uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27D28]);
}

uint64_t static Int32.setValue3(_:to:time:)(uint64_t a1)
{
  return static Int32.setValue3(_:to:time:)(a1, MEMORY[0x24BE27BD0]);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t (*)(__n128))MEMORY[0x24BE27BD0]);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27D28], a1);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Int32(_OWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float((uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27D28], a1);
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt3();
}

uint64_t static Int.getValue3Opt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[48];

  specialized static Int.getValue3Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD3<Int>?);
}

uint64_t static Int.setValue3(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt3();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int.value3TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt3();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Int@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[48];

  specialized static Int.getValue3Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD3<Int>?);
}

void protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Int(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;

  *(double *)&v2 = specialized static Int.getValue3(from:time:)();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.value3TypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt3();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3Element.vtValue(from:) in conformance Int()
{
  return RIOPxrVtValueCreateWithInt3();
}

uint64_t static Int32.getValue4Opt(from:time:)(uint64_t a1)
{
  return static Float.getValue3Opt(from:time:)(a1, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BE27D38]);
}

double static Int32.getValue4(from:time:)(uint64_t a1)
{
  return static Float.getValue3(from:time:)(a1, (uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27D38]);
}

uint64_t static Int32.setValue4(_:to:time:)(uint64_t a1)
{
  return static Int32.setValue3(_:to:time:)(a1, MEMORY[0x24BE27BF0]);
}

uint64_t static Int32.setValue3(_:to:time:)(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  uint64_t v3;

  v2 = (void *)a2();
  v3 = RIOPxrUsdAttributeSetValue();

  return v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Int32(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t (*)(__n128))MEMORY[0x24BE27BF0]);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3Element.setValue3(_:to:time:) in conformance Int32(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128))
{
  void *v5;
  uint64_t v6;

  v5 = (void *)a5(*a1);
  v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Int32(uint64_t a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3Opt(from:time:) in conformance Float((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27D38], a1);
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Int32(_OWORD *a1@<X8>)
{
  protocol witness for static UsdAttributeValueSIMD3Element.getValue3(from:time:) in conformance Float((uint64_t (*)(uint64_t, __int128 *, __n128))MEMORY[0x24BE27D38], a1);
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Int32()
{
  return RIOPxrVtValueCreateWithInt4();
}

uint64_t static Int.getValue4Opt(from:time:)@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[48];

  specialized static Int.getValue4Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD4<Int>?);
}

uint64_t static Int.setValue4(_:to:time:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrVtValueCreateWithInt4();
  v1 = RIOPxrUsdAttributeSetValue();

  return v1;
}

uint64_t static Int.value4TypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.setValue4(_:to:time:) in conformance Int(const float *a1)
{
  void *v1;
  uint64_t v2;

  vld2q_f32(a1);
  v1 = (void *)RIOPxrVtValueCreateWithInt4();
  v2 = RIOPxrUsdAttributeSetValue();

  return v2;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.getValue4Opt(from:time:) in conformance Int@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[48];

  specialized static Int.getValue4Opt(from:time:)((uint64_t)v3);
  return outlined init with take of (URL, __REAsset)((uint64_t)v3, a1, &demangling cache variable for type metadata for SIMD4<Int>?);
}

void protocol witness for static UsdAttributeValueSIMD4Element.getValue4(from:time:) in conformance Int(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;

  *(double *)&v2 = specialized static Int.getValue4(from:time:)();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4Element.value4TypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt4();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4Element.vtValue(from:) in conformance Int(const float *a1)
{
  vld2q_f32(a1);
  return RIOPxrVtValueCreateWithInt4();
}

uint64_t static Array<A>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t static Array<A>.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a3 + 16))();
  if (!result)
    return static Array._allocateUninitialized(_:)();
  return result;
}

uint64_t static Array<A>.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))() & 1;
}

uint64_t static Array<A>.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t protocol witness for static UsdAttributeValue.setValue(_:to:time:) in conformance <A> [A](uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.setValue(_:to:time:)(*a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValue.getValueOpt(from:time:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = static Array<A>.getValueOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.getValue(from:time:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = static Array<A>.getValue(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValue.valueTypeName.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  return static Array<A>.valueTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t static Bool.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Bool.vtValue(from:));
}

uint64_t static Bool.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279C0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asBoolArray.getter);
}

uint64_t static Bool.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateBoolArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Bool.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Bool(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279C0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asBoolArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Bool@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateBoolArray();
  *a1 = result;
  return result;
}

uint64_t static Int8.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int8.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int8.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  void *v5;
  uint64_t v6;

  v5 = (void *)a5();
  v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

uint64_t static Int16.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int16.vtValue(from:));
}

uint64_t static Int16.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A38], (uint64_t (*)(id, _QWORD *))MEMORY[0x24BE27D30], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int16.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int16(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A38], (uint64_t (*)(id, _QWORD *))MEMORY[0x24BE27D30], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t static Int32.vtValue(from:)(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27BE0], (void (*)(_QWORD))MEMORY[0x24BE27BD8]);
}

uint64_t static Int32.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, (uint64_t)MEMORY[0x24BE27BE0], (uint64_t)MEMORY[0x24BE27BD8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  void *v5;
  uint64_t v6;

  v5 = (void *)a5(a1, a3, a4);
  v6 = RIOPxrUsdAttributeSetValue();

  return v6;
}

uint64_t static Int32.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A38], (uint64_t)MEMORY[0x24BE27D30], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t)MEMORY[0x24BE27BE0], (uint64_t)MEMORY[0x24BE27BD8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t))
{
  void *v7;
  uint64_t v8;

  v7 = (void *)a7(a1, a5, a6);
  v8 = RIOPxrUsdAttributeSetValue();

  return v8;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A38], (uint64_t)MEMORY[0x24BE27D30], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance Int32(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27BE0], (void (*)(_QWORD))MEMORY[0x24BE27BD8]);
}

uint64_t static Int.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A38], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asIntArray.getter);
}

uint64_t RIOPxrVtValueRef.asIntArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A38], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asIntArray.getter);
}

uint64_t static Int.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt32Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A38], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asIntArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt32Array();
  *a1 = result;
  return result;
}

uint64_t static Int64.vtValue(from:)(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x24BE27C08], (void (*)(uint64_t))MEMORY[0x24BE27C00]);
}

uint64_t static Int64.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x24BE27C08], (uint64_t)MEMORY[0x24BE27C00], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t static Int64.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A50], (uint64_t)MEMORY[0x24BE27D40], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t static Int64.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Int64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x24BE27C08], (uint64_t)MEMORY[0x24BE27C00], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Int64(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A50], (uint64_t)MEMORY[0x24BE27D40], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Int64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance Int64(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x24BE27C08], (void (*)(uint64_t))MEMORY[0x24BE27C00]);
}

uint64_t static UInt.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static UInt.vtValue(from:));
}

uint64_t static UInt.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUIntArray.getter);
}

uint64_t RIOPxrVtValueRef.asUIntArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x24BE27AB0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUIntArray.getter);
}

uint64_t static UInt.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt32Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static UInt.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUIntArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance UInt@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt32Array();
  *a1 = result;
  return result;
}

uint64_t static UInt8.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static UInt8.vtValue(from:));
}

uint64_t static UInt8.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AC0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUInt8Array.getter);
}

uint64_t static UInt8.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt8Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static UInt8.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt8(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AC0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asUInt8Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance UInt8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt8Array();
  *a1 = result;
  return result;
}

uint64_t static UInt16.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static UInt16.vtValue(from:));
}

uint64_t static UInt16.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB0], (uint64_t (*)(id, _QWORD *))MEMORY[0x24BE27D70], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static UInt16.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt16(uint64_t a1)
{
  return specialized static Int16.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB0], (uint64_t (*)(id, _QWORD *))MEMORY[0x24BE27D70], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t static UInt32.vtValue(from:)(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27C98], (void (*)(_QWORD))MEMORY[0x24BE27C90]);
}

uint64_t static UInt32.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, (uint64_t)MEMORY[0x24BE27C98], (uint64_t)MEMORY[0x24BE27C90], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static UInt32.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB0], (uint64_t)MEMORY[0x24BE27D70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t)MEMORY[0x24BE27C98], (uint64_t)MEMORY[0x24BE27C90], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB0], (uint64_t)MEMORY[0x24BE27D70], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt32Array.getter);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance UInt32(uint64_t a1)
{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27C98], (void (*)(_QWORD))MEMORY[0x24BE27C90]);
}

uint64_t static UInt64.vtValue(from:)(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x24BE27CA8], (void (*)(uint64_t))MEMORY[0x24BE27CA0]);
}

uint64_t static UInt64.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, MEMORY[0x24BE27CA8], (uint64_t)MEMORY[0x24BE27CA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t static UInt64.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB8], MEMORY[0x24BE27D78], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t static UInt64.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance UInt64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, MEMORY[0x24BE27CA8], (uint64_t)MEMORY[0x24BE27CA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int64.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance UInt64(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AB8], MEMORY[0x24BE27D78], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt64Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance UInt64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateUInt64Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance UInt64(uint64_t a1)
{
  return specialized static Int64.vtValue(from:)(a1, MEMORY[0x24BE27CA8], (void (*)(uint64_t))MEMORY[0x24BE27CA0]);
}

uint64_t static Half.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A28], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalfArray.getter);
}

uint64_t RIOPxrVtValueRef.asHalfArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter(MEMORY[0x24BE27A28], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalfArray.getter);
}

uint64_t static Half.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalfArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A28], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalfArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalfArray();
  *a1 = result;
  return result;
}

uint64_t static Float.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A08], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloatArray.getter);
}

uint64_t static Float.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloatArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A08], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloatArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloatArray();
  *a1 = result;
  return result;
}

uint64_t static Double.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279E8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDoubleArray.getter);
}

uint64_t static Double.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDoubleArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279E8], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDoubleArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDoubleArray();
  *a1 = result;
  return result;
}

uint64_t static simd_quatf.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_quatf.vtValue(from:));
}

uint64_t static simd_quatf.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A88], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatfArray.getter);
}

uint64_t static simd_quatf.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatfArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_quatf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_quatf.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_quatf(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A88], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatfArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_quatf@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatfArray();
  *a1 = result;
  return result;
}

uint64_t static simd_quatd.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_quatd.vtValue(from:));
}

uint64_t static simd_quatd.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A80], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatdArray.getter);
}

uint64_t static simd_quatd.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatdArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_quatd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_quatd.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_quatd(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A80], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asQuatdArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_quatd@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateQuatdArray();
  *a1 = result;
  return result;
}

uint64_t static simd_float2x2.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_float2x2.vtValue(from:));
}

uint64_t static simd_float2x2.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix2dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_float2x2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_float2x2.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_float2x2@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix2dArray();
  *a1 = result;
  return result;
}

uint64_t static simd_float3x3.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_float3x3.vtValue(from:));
}

uint64_t static simd_float3x3.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix3dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_float3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_float3x3.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_float3x3@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix3dArray();
  *a1 = result;
  return result;
}

uint64_t static simd_float4x4.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_float4x4.vtValue(from:));
}

uint64_t static simd_float4x4.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix4dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_float4x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_float4x4.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance simd_float4x4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateMatrix4dArray();
  *a1 = result;
  return result;
}

uint64_t static simd_double2x2.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_double2x2.vtValue(from:));
}

uint64_t static simd_double2x2.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A58], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_double2x2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_double2x2.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_double2x2(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A58], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter);
}

uint64_t static simd_double3x3.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_double3x3.vtValue(from:));
}

uint64_t static simd_double3x3.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A60], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_double3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_double3x3.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_double3x3(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A60], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter);
}

uint64_t static simd_double4x4.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static simd_double4x4.vtValue(from:));
}

uint64_t static simd_double4x4.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A68], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance simd_double4x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static simd_double4x4.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance simd_double4x4(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A68], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter);
}

uint64_t static Frame4D.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Frame4D.vtValue(from:));
}

uint64_t static Frame4D.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFrame4dArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Frame4D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Frame4D.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance Frame4D@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFrame4dArray();
  *a1 = result;
  return result;
}

uint64_t static Normal3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, _QWORD, double))type metadata accessor for Normal3, (void (*)(char *, char *))partial apply for closure #1 in static Normal3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static Normal3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static Normal3<>.vtValue(from:));
}

uint64_t static Normal3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, a3, a4, static Normal3<>.vtValue(from:));
}

uint64_t static Normal3<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MetatypeMetadata;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    v11 = RIOPxrUsdAttributeCopyValue();
    if (v11)
    {
      v7 = (void *)v11;
      v12 = RIOPxrVtValueCopyDouble3Array();
      if (v12)
      {
        v13 = (void *)v12;
        v21 = v12;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Normal3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
        return 0;
      v6 = RIOPxrUsdAttributeCopyValue();
      if (!v6)
        return 0;
      v7 = (void *)v6;
      v8 = RIOPxrVtValueCopyHalf3Array();
      if (v8)
      {
        v9 = (void *)v8;
        v21 = v8;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Normal3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v10);
        type metadata accessor for Normal3(0, a2, *(_QWORD *)(a3 + 8), v17);
        v18 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v18;
      }
      goto LABEL_14;
    }
    v14 = RIOPxrUsdAttributeCopyValue();
    if (v14)
    {
      v7 = (void *)v14;
      v15 = RIOPxrVtValueCopyFloat3Array();
      if (v15)
      {
        v16 = (void *)v15;
        v21 = v15;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Normal3<Float>;
        goto LABEL_13;
      }
LABEL_14:

    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asNormal3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord3hArray.getter(uint64_t (*a1)(uint64_t), uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = a1(v3);
  if (result)
  {
    v6 = (void *)result;
    v8 = result;
    a3(&v7, &v8);

    return v7;
  }
  return result;
}

uint64_t RIOPxrVtValueRef.asNormal3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asNormal3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Normal3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x24BE26FD0], MEMORY[0x24BE26FE0], MEMORY[0x24BE26FF0], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Normal3<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Normal3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Normal3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t static Color3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MetatypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSArray v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  MetatypeMetadata = swift_getMetatypeMetadata();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v9)
  {
    v35 = a1;
    MEMORY[0x24BDAC7A8](v9);
    v32 = a2;
    v33 = a3;
    v34 = a4;
    type metadata accessor for Color3(255, a2, a3, *(_QWORD *)(a4 + 8));
    v13 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    v15 = v14;
    v16 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v13);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Color3<>.vtValue(from:), (uint64_t)v31, v13, v15, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v17);
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v19 = RIOPxrVtValueCreateWithDouble3Array();
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
    if (MetatypeMetadata == v10)
    {
      v35 = a1;
      MEMORY[0x24BDAC7A8](v10);
      v32 = a2;
      v33 = a3;
      v34 = a4;
      type metadata accessor for Color3(255, a2, a3, *(_QWORD *)(a4 + 8));
      v20 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v22 = v21;
      v23 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v20);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static Color3<>.vtValue(from:), (uint64_t)v31, v20, v22, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
      v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v19 = RIOPxrVtValueCreateWithFloat3Array();
    }
    else
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
      if (MetatypeMetadata != v11)
        return RIOPxrVtValueCreateEmptyValue();
      v35 = a1;
      MEMORY[0x24BDAC7A8](v11);
      v32 = a2;
      v33 = a3;
      v34 = a4;
      type metadata accessor for Color3(255, a2, a3, *(_QWORD *)(a4 + 8));
      v25 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v27 = v26;
      v28 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v25);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in static Color3<>.vtValue(from:), (uint64_t)v31, v25, v27, MEMORY[0x24BEE4078], v28, MEMORY[0x24BEE40A8], v29);
      v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v19 = RIOPxrVtValueCreateWithHalf3Array();
    }
  }
  v30 = v19;

  return v30;
}

uint64_t closure #1 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for Color3(0, v6, v7, *(_QWORD *)(v5 + 8));
  Color3.red.getter();
  swift_dynamicCast();
  Color3.green.getter();
  swift_dynamicCast();
  Color3.blue.getter();
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithDouble3();
  *a2 = result;
  return result;
}

uint64_t closure #2 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for Color3(0, v6, v7, *(_QWORD *)(v5 + 8));
  Color3.red.getter();
  swift_dynamicCast();
  Color3.green.getter();
  swift_dynamicCast();
  Color3.blue.getter();
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithFloat3();
  *a2 = result;
  return result;
}

uint64_t closure #3 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for Color3(0, v4, v5, *(_QWORD *)(v3 + 8));
  Color3.red.getter();
  v6 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v6);
  Color3.green.getter();
  v7 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v7);
  Color3.blue.getter();
  v8 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v8);
  result = RIOPxrVtValueCreateWithHalf3();
  *a2 = result;
  return result;
}

uint64_t static Color3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Color3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, a5, static Color3<>.vtValue(from:));
}

uint64_t static Color3<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MetatypeMetadata;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    v13 = RIOPxrUsdAttributeCopyValue();
    if (v13)
    {
      v9 = (void *)v13;
      v14 = RIOPxrVtValueCopyDouble3Array();
      if (v14)
      {
        v15 = (void *)v14;
        v22 = v14;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v21);

        v12 = &demangling cache variable for type metadata for Color3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
        return 0;
      v8 = RIOPxrUsdAttributeCopyValue();
      if (!v8)
        return 0;
      v9 = (void *)v8;
      v10 = RIOPxrVtValueCopyHalf3Array();
      if (v10)
      {
        v11 = (void *)v10;
        v22 = v10;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v21);

        v12 = &demangling cache variable for type metadata for Color3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v12);
        type metadata accessor for Color3(0, a2, a3, *(_QWORD *)(a4 + 8));
        v19 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v19;
      }
      goto LABEL_14;
    }
    v16 = RIOPxrUsdAttributeCopyValue();
    if (v16)
    {
      v9 = (void *)v16;
      v17 = RIOPxrVtValueCopyFloat3Array();
      if (v17)
      {
        v18 = (void *)v17;
        v22 = v17;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v21);

        v12 = &demangling cache variable for type metadata for Color3<Float>;
        goto LABEL_13;
      }
LABEL_14:

    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asColor3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Color3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x24BE26E20], MEMORY[0x24BE26E30], MEMORY[0x24BE26E40], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Color3<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Color3<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Color3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Color3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Color3<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8));
}

uint64_t static Color4<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MetatypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSArray v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  MetatypeMetadata = swift_getMetatypeMetadata();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v9)
  {
    v35 = a1;
    MEMORY[0x24BDAC7A8](v9);
    v32 = a2;
    v33 = a3;
    v34 = a4;
    type metadata accessor for Color4(255, a2, a3, *(_QWORD *)(a4 + 8));
    v13 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    v15 = v14;
    v16 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v13);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Color4<>.vtValue(from:), (uint64_t)v31, v13, v15, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v17);
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v19 = RIOPxrVtValueCreateWithDouble4Array();
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
    if (MetatypeMetadata == v10)
    {
      v35 = a1;
      MEMORY[0x24BDAC7A8](v10);
      v32 = a2;
      v33 = a3;
      v34 = a4;
      type metadata accessor for Color4(255, a2, a3, *(_QWORD *)(a4 + 8));
      v20 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v22 = v21;
      v23 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v20);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static Color4<>.vtValue(from:), (uint64_t)v31, v20, v22, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
      v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v19 = RIOPxrVtValueCreateWithFloat4Array();
    }
    else
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
      if (MetatypeMetadata != v11)
        return RIOPxrVtValueCreateEmptyValue();
      v35 = a1;
      MEMORY[0x24BDAC7A8](v11);
      v32 = a2;
      v33 = a3;
      v34 = a4;
      type metadata accessor for Color4(255, a2, a3, *(_QWORD *)(a4 + 8));
      v25 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v27 = v26;
      v28 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v25);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in static Color4<>.vtValue(from:), (uint64_t)v31, v25, v27, MEMORY[0x24BEE4078], v28, MEMORY[0x24BEE40A8], v29);
      v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v19 = RIOPxrVtValueCreateWithHalf4Array();
    }
  }
  v30 = v19;

  return v30;
}

uint64_t closure #1 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for Color4(0, v7, v8, *(_QWORD *)(v6 + 8));
  Color4.red.getter();
  swift_dynamicCast();
  Color4.green.getter();
  swift_dynamicCast();
  Color4.blue.getter();
  swift_dynamicCast();
  Color4.alpha.getter();
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithDouble4();
  *a2 = result;
  return result;
}

uint64_t closure #2 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for Color4(0, v7, v8, *(_QWORD *)(v6 + 8));
  Color4.red.getter();
  swift_dynamicCast();
  Color4.green.getter();
  swift_dynamicCast();
  Color4.blue.getter();
  swift_dynamicCast();
  Color4.alpha.getter();
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithFloat4();
  *a2 = result;
  return result;
}

uint64_t closure #3 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for Color4(0, v4, v5, *(_QWORD *)(v3 + 8));
  Color4.red.getter();
  v6 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v6);
  Color4.green.getter();
  v7 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v7);
  Color4.blue.getter();
  v8 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v8);
  Color4.alpha.getter();
  v9 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v9);
  result = RIOPxrVtValueCreateWithHalf4();
  *a2 = result;
  return result;
}

uint64_t static Color4<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Color3<>.setValueArray(_:to:time:)(a1, a2, a3, a4, a5, static Color4<>.vtValue(from:));
}

uint64_t static Color3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v6;
  uint64_t v7;

  v6 = (void *)a6(a1, a3, a4, a5);
  v7 = RIOPxrUsdAttributeSetValue();

  return v7;
}

uint64_t static Color4<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MetatypeMetadata;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    v13 = RIOPxrUsdAttributeCopyValue();
    if (v13)
    {
      v9 = (void *)v13;
      v14 = RIOPxrVtValueCopyDouble4Array();
      if (v14)
      {
        v15 = (void *)v14;
        v22 = v14;
        closure #1 in RIOPxrVtValueRef.asColor4dArray.getter(&v21);

        v12 = &demangling cache variable for type metadata for Color4<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
        return 0;
      v8 = RIOPxrUsdAttributeCopyValue();
      if (!v8)
        return 0;
      v9 = (void *)v8;
      v10 = RIOPxrVtValueCopyHalf4Array();
      if (v10)
      {
        v11 = (void *)v10;
        v22 = v10;
        closure #1 in RIOPxrVtValueRef.asColor4hArray.getter(&v21);

        v12 = &demangling cache variable for type metadata for Color4<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v12);
        type metadata accessor for Color4(0, a2, a3, *(_QWORD *)(a4 + 8));
        v19 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v19;
      }
      goto LABEL_14;
    }
    v16 = RIOPxrUsdAttributeCopyValue();
    if (v16)
    {
      v9 = (void *)v16;
      v17 = RIOPxrVtValueCopyFloat4Array();
      if (v17)
      {
        v18 = (void *)v17;
        v22 = v17;
        closure #1 in RIOPxrVtValueRef.asColor4fArray.getter(&v21);

        v12 = &demangling cache variable for type metadata for Color4<Float>;
        goto LABEL_13;
      }
LABEL_14:

    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asColor4dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279E0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor4dArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor4fArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A00], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor4fArray.getter);
}

uint64_t RIOPxrVtValueRef.asColor4hArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A20], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor4hArray.getter);
}

uint64_t static Color4<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return static Color3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x24BE26E50], MEMORY[0x24BE26E60], MEMORY[0x24BE26E70], a3);
}

uint64_t static Color3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(void)@<X4>, uint64_t (*a5)(void)@<X5>, uint64_t *a6@<X8>)
{
  uint64_t MetatypeMetadata;
  uint64_t result;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    result = a3();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    result = a4();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    result = a5();
  }
  *a6 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Color4<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Color4<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Color4<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Color4<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Color4<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Color4<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8));
}

uint64_t static Vector3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, _QWORD, double))type metadata accessor for Vector3, (void (*)(char *, char *))partial apply for closure #1 in static Vector3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static Vector3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static Vector3<>.vtValue(from:));
}

uint64_t static Vector3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, a3, a4, static Vector3<>.vtValue(from:));
}

uint64_t static Vector3<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MetatypeMetadata;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    v11 = RIOPxrUsdAttributeCopyValue();
    if (v11)
    {
      v7 = (void *)v11;
      v12 = RIOPxrVtValueCopyDouble3Array();
      if (v12)
      {
        v13 = (void *)v12;
        v21 = v12;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Vector3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
        return 0;
      v6 = RIOPxrUsdAttributeCopyValue();
      if (!v6)
        return 0;
      v7 = (void *)v6;
      v8 = RIOPxrVtValueCopyHalf3Array();
      if (v8)
      {
        v9 = (void *)v8;
        v21 = v8;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Vector3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v10);
        type metadata accessor for Vector3(0, a2, *(_QWORD *)(a3 + 8), v17);
        v18 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v18;
      }
      goto LABEL_14;
    }
    v14 = RIOPxrUsdAttributeCopyValue();
    if (v14)
    {
      v7 = (void *)v14;
      v15 = RIOPxrVtValueCopyFloat3Array();
      if (v15)
      {
        v16 = (void *)v15;
        v21 = v15;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Vector3<Float>;
        goto LABEL_13;
      }
LABEL_14:

    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asVector3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asVector3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asVector3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Vector3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x24BE27110], MEMORY[0x24BE27120], MEMORY[0x24BE27130], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Vector3<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Vector3<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Vector3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Vector3<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Vector3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Vector3<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t static Point3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, _QWORD, double))type metadata accessor for Point3, (void (*)(char *, char *))partial apply for closure #1 in static Point3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static Point3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static Point3<>.vtValue(from:));
}

uint64_t static Point3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, a3, a4, static Point3<>.vtValue(from:));
}

uint64_t static Point3<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MetatypeMetadata;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    v11 = RIOPxrUsdAttributeCopyValue();
    if (v11)
    {
      v7 = (void *)v11;
      v12 = RIOPxrVtValueCopyDouble3Array();
      if (v12)
      {
        v13 = (void *)v12;
        v21 = v12;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Point3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
        return 0;
      v6 = RIOPxrUsdAttributeCopyValue();
      if (!v6)
        return 0;
      v7 = (void *)v6;
      v8 = RIOPxrVtValueCopyHalf3Array();
      if (v8)
      {
        v9 = (void *)v8;
        v21 = v8;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Point3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v10);
        type metadata accessor for Point3(0, a2, *(_QWORD *)(a3 + 8), v17);
        v18 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v18;
      }
      goto LABEL_14;
    }
    v14 = RIOPxrUsdAttributeCopyValue();
    if (v14)
    {
      v7 = (void *)v14;
      v15 = RIOPxrVtValueCopyFloat3Array();
      if (v15)
      {
        v16 = (void *)v15;
        v21 = v15;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for Point3<Float>;
        goto LABEL_13;
      }
LABEL_14:

    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asPoint3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asPoint3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asPoint3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static Point3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x24BE27000], MEMORY[0x24BE27010], MEMORY[0x24BE27020], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Point3<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Point3<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> Point3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Point3<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> Point3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Point3<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t static TexCoord2<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MetatypeMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSArray v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  MetatypeMetadata = swift_getMetatypeMetadata();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v7)
  {
    v35 = a1;
    MEMORY[0x24BDAC7A8](v7);
    v33 = a2;
    v34 = a3;
    type metadata accessor for TexCoord2(255, a2, *(_QWORD *)(a3 + 8), v11);
    v12 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    v14 = v13;
    v15 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v12);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static TexCoord2<>.vtValue(from:), (uint64_t)v32, v12, v14, MEMORY[0x24BEE4078], v15, MEMORY[0x24BEE40A8], v16);
    v17.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = RIOPxrVtValueCreateWithDouble2Array();
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
    if (MetatypeMetadata == v8)
    {
      v35 = a1;
      MEMORY[0x24BDAC7A8](v8);
      v33 = a2;
      v34 = a3;
      type metadata accessor for TexCoord2(255, a2, *(_QWORD *)(a3 + 8), v19);
      v20 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v22 = v21;
      v23 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v20);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static TexCoord2<>.vtValue(from:), (uint64_t)v32, v20, v22, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
      v17.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v18 = RIOPxrVtValueCreateWithFloat2Array();
    }
    else
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
      if (MetatypeMetadata != v9)
        return RIOPxrVtValueCreateEmptyValue();
      v35 = a1;
      MEMORY[0x24BDAC7A8](v9);
      v33 = a2;
      v34 = a3;
      type metadata accessor for TexCoord2(255, a2, *(_QWORD *)(a3 + 8), v25);
      v26 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v28 = v27;
      v29 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v26);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in static TexCoord2<>.vtValue(from:), (uint64_t)v32, v26, v28, MEMORY[0x24BEE4078], v29, MEMORY[0x24BEE40A8], v30);
      v17.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v18 = RIOPxrVtValueCreateWithHalf2Array();
    }
  }
  v31 = v18;

  return v31;
}

uint64_t closure #1 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v3);
  type metadata accessor for TexCoord2(0, v5, *(_QWORD *)(v4 + 8), v6);
  TexCoord2.x.getter();
  swift_dynamicCast();
  TexCoord2.y.getter();
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithDouble2();
  *a2 = result;
  return result;
}

uint64_t closure #2 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v3);
  type metadata accessor for TexCoord2(0, v5, *(_QWORD *)(v4 + 8), v6);
  TexCoord2.x.getter();
  swift_dynamicCast();
  TexCoord2.y.getter();
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithFloat2();
  *a2 = result;
  return result;
}

uint64_t closure #3 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for TexCoord2(0, v4, *(_QWORD *)(v3 + 8), v5);
  TexCoord2.x.getter();
  v6 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v6);
  TexCoord2.y.getter();
  v7 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v7);
  result = RIOPxrVtValueCreateWithHalf2();
  *a2 = result;
  return result;
}

uint64_t static TexCoord2<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, a3, a4, static TexCoord2<>.vtValue(from:));
}

uint64_t static TexCoord2<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MetatypeMetadata;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    v11 = RIOPxrUsdAttributeCopyValue();
    if (v11)
    {
      v7 = (void *)v11;
      v12 = RIOPxrVtValueCopyDouble2Array();
      if (v12)
      {
        v13 = (void *)v12;
        v21 = v12;
        closure #1 in RIOPxrVtValueRef.asTexCoord2dArray.getter(&v20);

        v10 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
        return 0;
      v6 = RIOPxrUsdAttributeCopyValue();
      if (!v6)
        return 0;
      v7 = (void *)v6;
      v8 = RIOPxrVtValueCopyHalf2Array();
      if (v8)
      {
        v9 = (void *)v8;
        v21 = v8;
        closure #1 in RIOPxrVtValueRef.asTexCoord2hArray.getter(&v20);

        v10 = &demangling cache variable for type metadata for TexCoord2<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v10);
        type metadata accessor for TexCoord2(0, a2, *(_QWORD *)(a3 + 8), v17);
        v18 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v18;
      }
      goto LABEL_14;
    }
    v14 = RIOPxrUsdAttributeCopyValue();
    if (v14)
    {
      v7 = (void *)v14;
      v15 = RIOPxrVtValueCopyFloat2Array();
      if (v15)
      {
        v16 = (void *)v15;
        v21 = v15;
        closure #1 in RIOPxrVtValueRef.asTexCoord2fArray.getter(&v20);

        v10 = (uint64_t *)&demangling cache variable for type metadata for TexCoord2<Float>;
        goto LABEL_13;
      }
LABEL_14:

    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asTexCoord2dArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTexCoord2dArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord2fArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTexCoord2fArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord2hArray.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A10], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTexCoord2hArray.getter);
}

uint64_t static TexCoord2<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x24BE27070], MEMORY[0x24BE27080], MEMORY[0x24BE27090], a3);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TexCoord2<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TexCoord2<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> TexCoord2<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord2<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> TexCoord2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TexCoord2<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t static TexCoord3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normal3<>.vtValue(from:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, _QWORD, double))type metadata accessor for TexCoord3, (void (*)(char *, char *))partial apply for closure #1 in static TexCoord3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #2 in static TexCoord3<>.vtValue(from:), (void (*)(char *, char *))partial apply for closure #3 in static TexCoord3<>.vtValue(from:));
}

uint64_t static Normal3<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, double), void (*a5)(char *, char *), void (*a6)(char *, char *), void (*a7)(char *, char *))
{
  uint64_t MetatypeMetadata;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSArray v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  MetatypeMetadata = swift_getMetatypeMetadata();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  if (MetatypeMetadata == v15)
  {
    v43 = a1;
    v19 = MEMORY[0x24BDAC7A8](v15);
    v41 = a2;
    v42 = a3;
    a4(255, a2, *(_QWORD *)(a3 + 8), v19);
    v20 = type metadata accessor for Array();
    type metadata accessor for RIOPxrVtValueRef(0);
    v22 = v21;
    v23 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v20);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a5, (uint64_t)v40, v20, v22, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
    v25.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v26 = RIOPxrVtValueCreateWithDouble3Array();
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
    if (MetatypeMetadata == v16)
    {
      v43 = a1;
      v27 = MEMORY[0x24BDAC7A8](v16);
      v41 = a2;
      v42 = a3;
      a4(255, a2, *(_QWORD *)(a3 + 8), v27);
      v28 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v30 = v29;
      v31 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v28);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a6, (uint64_t)v40, v28, v30, MEMORY[0x24BEE4078], v31, MEMORY[0x24BEE40A8], v32);
      v25.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v26 = RIOPxrVtValueCreateWithFloat3Array();
    }
    else
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type);
      if (MetatypeMetadata != v17)
        return RIOPxrVtValueCreateEmptyValue();
      v43 = a1;
      v33 = MEMORY[0x24BDAC7A8](v17);
      v41 = a2;
      v42 = a3;
      a4(255, a2, *(_QWORD *)(a3 + 8), v33);
      v34 = type metadata accessor for Array();
      type metadata accessor for RIOPxrVtValueRef(0);
      v36 = v35;
      v37 = MEMORY[0x22E2F889C](MEMORY[0x24BEE12E0], v34);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a7, (uint64_t)v40, v34, v36, MEMORY[0x24BEE4078], v37, MEMORY[0x24BEE40A8], v38);
      v25.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v26 = RIOPxrVtValueCreateWithHalf3Array();
    }
  }
  v39 = v26;

  return v39;
}

uint64_t closure #1 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X5>, void (*a3)(uint64_t)@<X6>, void (*a4)(uint64_t)@<X7>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t (*v11)(_QWORD, double);
  uint64_t v12;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = v11(0, v10);
  a2();
  swift_dynamicCast();
  a3(v12);
  swift_dynamicCast();
  a4(v12);
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithDouble3();
  *a5 = result;
  return result;
}

uint64_t closure #2 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X5>, void (*a3)(uint64_t)@<X6>, void (*a4)(uint64_t)@<X7>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t (*v11)(_QWORD, double);
  uint64_t v12;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = v11(0, v10);
  a2();
  swift_dynamicCast();
  a3(v12);
  swift_dynamicCast();
  a4(v12);
  swift_dynamicCast();
  result = RIOPxrVtValueCreateWithFloat3();
  *a5 = result;
  return result;
}

uint64_t closure #3 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X5>, void (*a3)(uint64_t)@<X6>, void (*a4)(uint64_t)@<X7>, uint64_t *a5@<X8>)
{
  double v9;
  uint64_t (*v10)(_QWORD, double);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = v10(0, v9);
  a2();
  v12 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v12);
  a3(v11);
  v13 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v13);
  a4(v11);
  v14 = swift_dynamicCast();
  destructiveProjectEnumData for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError(v14);
  result = RIOPxrVtValueCreateWithHalf3();
  *a5 = result;
  return result;
}

uint64_t static TexCoord3<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, a3, a4, static TexCoord3<>.vtValue(from:));
}

uint64_t static TexCoord3<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MetatypeMetadata;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    v11 = RIOPxrUsdAttributeCopyValue();
    if (v11)
    {
      v7 = (void *)v11;
      v12 = RIOPxrVtValueCopyDouble3Array();
      if (v12)
      {
        v13 = (void *)v12;
        v21 = v12;
        closure #1 in RIOPxrVtValueRef.asColor3dArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for TexCoord3<Double>;
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
    {
      if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
        return 0;
      v6 = RIOPxrUsdAttributeCopyValue();
      if (!v6)
        return 0;
      v7 = (void *)v6;
      v8 = RIOPxrVtValueCopyHalf3Array();
      if (v8)
      {
        v9 = (void *)v8;
        v21 = v8;
        closure #1 in RIOPxrVtValueRef.asColor3hArray.getter((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for TexCoord3<Half>;
LABEL_13:
        __swift_instantiateConcreteTypeFromMangledName(v10);
        type metadata accessor for TexCoord3(0, a2, *(_QWORD *)(a3 + 8), v17);
        v18 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        return v18;
      }
      goto LABEL_14;
    }
    v14 = RIOPxrUsdAttributeCopyValue();
    if (v14)
    {
      v7 = (void *)v14;
      v15 = RIOPxrVtValueCopyFloat3Array();
      if (v15)
      {
        v16 = (void *)v15;
        v21 = v15;
        closure #1 in RIOPxrVtValueRef.asColor3fArray.getter((unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v20);

        v10 = &demangling cache variable for type metadata for TexCoord3<Float>;
        goto LABEL_13;
      }
LABEL_14:

    }
  }
  return 0;
}

uint64_t RIOPxrVtValueRef.asTexCoord3dArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279D8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3dArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord3fArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE279F8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3fArray.getter);
}

uint64_t RIOPxrVtValueRef.asTexCoord3hArray.getter()
{
  return RIOPxrVtValueRef.asTexCoord3hArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A18], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asColor3hArray.getter);
}

uint64_t static TexCoord3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Normal3<>.valueArrayTypeName.getter(a1, a2, MEMORY[0x24BE270A0], MEMORY[0x24BE270B0], MEMORY[0x24BE270C0], a3);
}

uint64_t static Normal3<>.valueArrayTypeName.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t MetatypeMetadata;
  uint64_t result;

  MetatypeMetadata = swift_getMetatypeMetadata();
  if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type))
  {
    result = a3();
  }
  else if (MetatypeMetadata == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type))
  {
    result = a4();
  }
  else
  {
    if (MetatypeMetadata != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Half.Type))
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    result = a5();
  }
  *a6 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TexCoord3<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TexCoord3<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> TexCoord3<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static TexCoord3<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> TexCoord3<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TexCoord3<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t static String.vtValue(from:)()
{
  Class isa;
  uint64_t v1;

  isa = Array._bridgeToObjectiveC()().super.isa;
  v1 = RIOPxrVtValueCreateWithStringArray();

  return v1;
}

uint64_t static String.setValueArray(_:to:time:)()
{
  Class isa;
  void *v1;
  uint64_t v2;

  isa = Array._bridgeToObjectiveC()().super.isa;
  v1 = (void *)RIOPxrVtValueCreateWithStringArray();

  v2 = RIOPxrUsdAttributeSetValue();
  return v2;
}

uint64_t static String.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateStringArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance String()
{
  Class isa;
  void *v1;
  uint64_t v2;

  isa = Array._bridgeToObjectiveC()().super.isa;
  v1 = (void *)RIOPxrVtValueCreateWithStringArray();

  v2 = RIOPxrUsdAttributeSetValue();
  return v2;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateStringArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance String()
{
  Class isa;
  uint64_t v1;

  isa = Array._bridgeToObjectiveC()().super.isa;
  v1 = RIOPxrVtValueCreateWithStringArray();

  return v1;
}

uint64_t static ToolsFoundations.Token.vtValue(from:)(uint64_t a1)
{
  return static ToolsFoundations.Token.vtValue(from:)(a1, type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(Class))MEMORY[0x24BE27C88]);
}

uint64_t static ToolsFoundations.Token.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValueArray(_:to:time:)(a1, a2, type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(Class))MEMORY[0x24BE27C88]);
}

uint64_t static ToolsFoundations.Token.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AA8], (uint64_t)type metadata accessor for RIOPxrTfTokenRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t static ToolsFoundations.Token.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTokenArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(a1, a2, a3, a4, type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(Class))MEMORY[0x24BE27C88]);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance ToolsFoundations.Token(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27AA8], (uint64_t)type metadata accessor for RIOPxrTfTokenRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance ToolsFoundations.Token@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateTokenArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(a1, a2, a3, type metadata accessor for RIOPxrTfTokenRef, (uint64_t (*)(Class))MEMORY[0x24BE27C88]);
}

uint64_t static SceneDescriptionFoundations.AssetPath.vtValue(from:)(uint64_t a1)
{
  return static ToolsFoundations.Token.vtValue(from:)(a1, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x24BE27AD8]);
}

uint64_t static ToolsFoundations.Token.vtValue(from:)(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(Class))
{
  Class isa;
  uint64_t v6;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a2(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = a3(isa);

  return v6;
}

uint64_t static SceneDescriptionFoundations.AssetPath.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static ToolsFoundations.Token.setValueArray(_:to:time:)(a1, a2, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x24BE27AD8]);
}

uint64_t static ToolsFoundations.Token.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t (*a4)(Class))
{
  Class isa;
  void *v7;
  uint64_t v8;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a3(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = (void *)a4(isa);

  v8 = RIOPxrUsdAttributeSetValue();
  return v8;
}

uint64_t static SceneDescriptionFoundations.AssetPath.getValueArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279B8], (uint64_t)type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t static SceneDescriptionFoundations.AssetPath.valueArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateAssetPathArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(a1, a2, a3, a4, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x24BE27AD8]);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(Class))
{
  Class isa;
  void *v9;
  uint64_t v10;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a5(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = (void *)a6(isa);

  v10 = RIOPxrUsdAttributeSetValue();
  return v10;
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279B8], (uint64_t)type metadata accessor for RIOPxrSdfAssetPathRef, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asTokenArray.getter);
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance SceneDescriptionFoundations.AssetPath@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateAssetPathArray();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance SceneDescriptionFoundations.AssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(a1, a2, a3, type metadata accessor for RIOPxrSdfAssetPathRef, MEMORY[0x24BE27AD8]);
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance ToolsFoundations.Token(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(Class))
{
  Class isa;
  uint64_t v8;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  a4(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = a5(isa);

  return v8;
}

uint64_t static SIMD2<>.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t static SIMD2<>.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t static SIMD2<>.getValueArray(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static UsdAttributeValueSIMD2ArrayElement.getValue2Array(from:time:)(a1, a2, a3);
}

uint64_t static SIMD2<>.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 1;
}

uint64_t static SIMD2<>.valueArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SIMD2<>.setValueArray(_:to:time:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.getValueArrayOpt(from:time:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static UsdAttributeValueArrayElement.valueArrayTypeName.getter in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2)
{
  return static SIMD2<>.valueArrayTypeName.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for static UsdVtValueArrayElement.vtValue(from:) in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SIMD2<>.vtValue(from:)(a1, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a3 - 16));
}

uint64_t static Half.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A10], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf2Array.getter);
}

uint64_t RIOPxrVtValueRef.asHalf2Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A10], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf2Array.getter);
}

uint64_t static Half.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A10], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf2Array();
  *a1 = result;
  return result;
}

uint64_t static Half.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A18], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf3Array.getter);
}

uint64_t RIOPxrVtValueRef.asHalf3Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A18], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf3Array.getter);
}

uint64_t static Half.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A18], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf3Array();
  *a1 = result;
  return result;
}

uint64_t static Half.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t static Half.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A20], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf4Array.getter);
}

uint64_t RIOPxrVtValueRef.asHalf4Array.getter()
{
  return RIOPxrVtValueRef.asBoolArray.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE27A20], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf4Array.getter);
}

uint64_t static Half.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Half(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Half.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Half(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A20], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asHalf4Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Half@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateHalf4Array();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279F0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat2Array.getter);
}

uint64_t static Float.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279F0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asFloat2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat2Array();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279F8], (uint64_t)MEMORY[0x24BE27CF8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t static Float.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279F8], (uint64_t)MEMORY[0x24BE27CF8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat3Array();
  *a1 = result;
  return result;
}

uint64_t static Float.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t static Float.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A00], (uint64_t)MEMORY[0x24BE27D00], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t static Float.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Float.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Float(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A00], (uint64_t)MEMORY[0x24BE27D00], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Float@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateFloat4Array();
  *a1 = result;
  return result;
}

uint64_t static Double.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279D0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble2Array.getter);
}

uint64_t static Double.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279D0], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble2Array();
  *a1 = result;
  return result;
}

uint64_t static Double.vtValue(from:)(uint64_t a1)
{
  return specialized static Double.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27B20], (void (*)(_OWORD *))MEMORY[0x24BE27B18]);
}

{
  return specialized static Double.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27B30], (void (*)(_OWORD *))MEMORY[0x24BE27B28]);
}

uint64_t static Double.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, (uint64_t)MEMORY[0x24BE27B20], (uint64_t)MEMORY[0x24BE27B18], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279D8], (uint64_t)MEMORY[0x24BE27CD8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t static Double.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t)MEMORY[0x24BE27B20], (uint64_t)MEMORY[0x24BE27B18], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279D8], (uint64_t)MEMORY[0x24BE27CD8], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD3ArrayElement.vtValue(from:) in conformance Double(uint64_t a1)
{
  return specialized static Double.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27B20], (void (*)(_OWORD *))MEMORY[0x24BE27B18]);
}

uint64_t static Double.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, (uint64_t)MEMORY[0x24BE27B30], (uint64_t)MEMORY[0x24BE27B28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t static Double.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279E0], (uint64_t)MEMORY[0x24BE27CE0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t static Double.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Double(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t)MEMORY[0x24BE27B30], (uint64_t)MEMORY[0x24BE27B28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Double.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Double(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE279E0], (uint64_t)MEMORY[0x24BE27CE0], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asDouble3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Double@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateDouble4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdVtValueSIMD4ArrayElement.vtValue(from:) in conformance Double(uint64_t a1)
{
  return specialized static Double.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27B30], (void (*)(_OWORD *))MEMORY[0x24BE27B28]);
}

uint64_t static Int32.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.getValue2ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A30], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt2Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static UInt8.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A30], (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt2Array.getter);
}

uint64_t static Int32.vtValue(from:)(__n128 *a1)
{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27BE8], (void (*)(uint64_t, __n128))MEMORY[0x24BE27BD0]);
}

{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27BF8], (void (*)(uint64_t, __n128))MEMORY[0x24BE27BF0]);
}

uint64_t static Int32.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, (uint64_t)MEMORY[0x24BE27BE8], (uint64_t)MEMORY[0x24BE27BD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.getValue3ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A40], (uint64_t)MEMORY[0x24BE27D28], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t)MEMORY[0x24BE27BE8], (uint64_t)MEMORY[0x24BE27BD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.getValue3ArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A40], (uint64_t)MEMORY[0x24BE27D28], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdVtValueSIMD3ArrayElement.vtValue(from:) in conformance Int32(__n128 *a1)
{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27BE8], (void (*)(uint64_t, __n128))MEMORY[0x24BE27BD0]);
}

uint64_t static Int32.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue4Array(_:to:time:)(a1, a2, (uint64_t)MEMORY[0x24BE27BF8], (uint64_t)MEMORY[0x24BE27BF0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t static Int32.getValue4ArrayOpt(from:time:)(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A48], (uint64_t)MEMORY[0x24BE27D38], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int32(a1, a2, a3, a4, (uint64_t)MEMORY[0x24BE27BF8], (uint64_t)MEMORY[0x24BE27BF0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static Int32.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.getValue4ArrayOpt(from:time:) in conformance Int32(uint64_t a1)
{
  return specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(a1, MEMORY[0x24BE27A48], (uint64_t)MEMORY[0x24BE27D38], (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in RIOPxrVtValueRef.asInt3Array.getter);
}

uint64_t protocol witness for static UsdVtValueSIMD4ArrayElement.vtValue(from:) in conformance Int32(__n128 *a1)
{
  return specialized static Int32.vtValue(from:)(a1, (uint64_t (*)(Class))MEMORY[0x24BE27BF8], (void (*)(uint64_t, __n128))MEMORY[0x24BE27BF0]);
}

uint64_t static Int.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.value2ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt2Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD2ArrayElement.value2ArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt2Array();
  *a1 = result;
  return result;
}

uint64_t static Int.setValue3Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.value3ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt3Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.setValue3Array(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD3ArrayElement.value3ArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt3Array();
  *a1 = result;
  return result;
}

uint64_t static Int.setValue4Array(_:to:time:)(uint64_t a1, uint64_t a2)
{
  return static Int32.setValue(_:to:time:)(a1, a2, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t static Int.value4ArrayTypeName.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt4Array();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.setValue4Array(_:to:time:) in conformance Int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static UsdAttributeValueArrayElement.setValueArray(_:to:time:) in conformance Bool(a1, a2, a3, a4, (uint64_t (*)(void))specialized static Int.vtValue(from:));
}

uint64_t protocol witness for static UsdAttributeValueSIMD4ArrayElement.value4ArrayTypeName.getter in conformance Int@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfValueTypeNameCreateInt4Array();
  *a1 = result;
  return result;
}

uint64_t Dictionary<>.vtValue.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  Class isa;
  uint64_t v4;
  uint64_t v6;

  if (*((_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy9RealityIO16ToolsFoundationsO5TokenVSo16RIOPxrVtValueRefaG_So0i2TfhL0a_ALts5NeverOTg503_s9d4IO16fg2O5h5VSo16ijk48RefaSo0f2TfeI0aAGIgngoo_AE3key_AG5valuetAI_AGts5n46OIegnrzr_TR05_sSD9a6IOAA16cd2O5e8VRszSo16fgH46s16Rs_rlE02vtH0AGvgtuV25_AGtAE_AGtXEfU_Tf3nnnpf_nTf1cn_n(a1)
       + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrTfTokenRef, RIOPxrVtValueRef>);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v6 = v1;
  v2 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, 1, &v6);
  swift_bridgeObjectRelease();
  type metadata accessor for RIOPxrTfTokenRef(0);
  type metadata accessor for RIOPxrVtValueRef(0);
  lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  v4 = RIOPxrVtValueCreateWithDictionary();

  return v4;
}

uint64_t Array<A>.vtValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Array<A>.vtValue.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for UsdVtValue.vtValue.getter in conformance <> SIMD2<A>(uint64_t a1, uint64_t a2)
{
  return SIMD2<>.vtValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t RIOPxrVtValueRef.isEmpty.getter()
{
  return RIOPxrVtValueIsEmpty();
}

uint64_t RIOPxrVtValueRef.asTexCoord2h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  result = RIOPxrVtValueGetHalf2();
  if ((_DWORD)result)
  {
    v3 = v7;
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = 2;
    *(_QWORD *)(v4 + 32) = v3;
    result = specialized TexCoord2.init(_:)(v4, &v6);
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  return result;
}

int8x16_t RIOPxrVtValueRef.asTexCoord2f.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int Float2;
  int8x16_t v3;
  unint64_t v4;
  int8x16_t result;

  Float2 = RIOPxrVtValueGetFloat2();
  v3.i64[0] = 0;
  if (Float2)
    v4 = -1;
  else
    v4 = 0;
  result = vandq_s8(v3, (int8x16_t)vdupq_n_s64(v4));
  *a1 = result;
  a1[1].i8[0] = Float2 ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asColor3h.getter@<X0>(uint64_t *a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3h.getter((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27CF8], a1);
}

uint64_t RIOPxrVtValueRef.asPoint3h.getter@<X0>(uint64_t *a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3h.getter((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27D10], a1);
}

uint64_t RIOPxrVtValueRef.asColor3h.getter@<X0>(uint64_t (*a1)(uint64_t, uint64_t *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  result = a1(v2, &v10);
  if ((_DWORD)result)
  {
    v5 = v11;
    v6 = v10;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = 4;
    *(_DWORD *)(v7 + 44) = 0;
    *(_QWORD *)(v7 + 32) = v6;
    *(_DWORD *)(v7 + 40) = v5;
    result = specialized TexCoord3.init(_:)(v7, &v9);
    v8 = v9;
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t RIOPxrVtValueRef.asNormal3h.getter@<X0>(uint64_t *a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3h.getter((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27D10], a1);
}

uint64_t RIOPxrVtValueRef.asVector3h.getter@<X0>(uint64_t *a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3h.getter((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27D10], a1);
}

uint64_t RIOPxrVtValueRef.asTexCoord3h.getter@<X0>(uint64_t *a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3h.getter((uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x24BE27CF8], a1);
}

uint64_t RIOPxrVtValueRef.asColor4h.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0uLL;
  result = RIOPxrVtValueGetFloat4();
  if ((_DWORD)result)
  {
    v5 = v7;
    v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v3 + 16) = 4;
    *(_OWORD *)(v3 + 32) = v5;
    result = specialized Color4.init(_:)(v3, &v6);
    v4 = v6;
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return result;
}

double RIOPxrVtValueRef.asColor3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asPoint3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asNormal3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asVector3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

double RIOPxrVtValueRef.asTexCoord3f.getter@<D0>(int8x16_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = RIOPxrVtValueRef.asColor3f.getter(a1).u64[0];
  return result;
}

int8x16_t RIOPxrVtValueRef.asColor3f.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int Float3;
  int8x16_t v3;
  unint64_t v4;
  int8x16_t result;

  Float3 = RIOPxrVtValueGetFloat3();
  v3 = 0uLL;
  v3.i32[3] = 0;
  if (Float3)
    v4 = -1;
  else
    v4 = 0;
  result = vandq_s8(v3, (int8x16_t)vdupq_n_s64(v4));
  *a1 = result;
  a1[1].i8[0] = Float3 ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asColor4f.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueGetFloat4();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asTexCoord2d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;

  result = RIOPxrVtValueGetDouble2();
  v3 = 0uLL;
  if ((_DWORD)result)
    v3 = 0uLL;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asColor3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

{
  uint64_t result;
  __int128 v3;

  result = RIOPxrVtValueGetDouble3();
  if ((_DWORD)result)
    v3 = 0u;
  else
    v3 = 0uLL;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t RIOPxrVtValueRef.asPoint3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asNormal3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asVector3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asTexCoord3d.getter@<X0>(uint64_t a1@<X8>)
{
  return RIOPxrVtValueRef.asColor3d.getter(a1);
}

uint64_t RIOPxrVtValueRef.asColor4d.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueGetDouble4();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = result ^ 1;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asBoolArray.getter@<X0>(char **a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  char Bool;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  char **v12;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v12 = a1;
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v12 = a1;
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Bool = RIOPxrVtValueGetBool();

    if ((Bool & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v10 = *((_QWORD *)v5 + 2);
      v9 = *((_QWORD *)v5 + 3);
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v10 + 1;
      v5[v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asIntArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char Int32;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  _QWORD *v12;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v12 = a1;
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v12 = a1;
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Int32 = RIOPxrVtValueGetInt32();

    if ((Int32 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v12 = v5;
  return result;
}

uint64_t closure #1 in closure #1 in RIOPxrVtValueRef.asInt32Array.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = RIOPxrVtValueGetInt32();
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = result ^ 1;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asUIntArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char UInt32;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  _QWORD *v12;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v12 = a1;
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v12 = a1;
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    UInt32 = RIOPxrVtValueGetUInt32();

    if ((UInt32 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asUInt8Array.getter@<X0>(char **a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  char UInt8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  char **v12;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v12 = a1;
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v12 = a1;
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    UInt8 = RIOPxrVtValueGetUInt8();

    if ((UInt8 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v10 = *((_QWORD *)v5 + 2);
      v9 = *((_QWORD *)v5 + 3);
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v10 + 1;
      v5[v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt32Array.getter@<X0>(uint64_t (*a1)(id, _QWORD *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  char v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t (*v17)(BOOL, uint64_t, uint64_t, uint64_t);
  uint64_t *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v19[0] = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v6 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    v18 = a3;
    if (v7)
      goto LABEL_3;
LABEL_16:
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v18 = a3;
  if (!v7)
    goto LABEL_16;
LABEL_3:
  if (v7 < 1)
    __break(1u);
  v17 = a2;
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v10 = (id)MEMORY[0x22E2F57B8](v8, v6);
    else
      v10 = *(id *)(v6 + 8 * v8 + 32);
    v11 = v10;
    LODWORD(v19[0]) = 0;
    v12 = a1(v10, v19);

    if ((v12 & 1) != 0)
    {
      v13 = v19[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = v17(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
        v9 = v17(v14 > 1, v15 + 1, 1, v9);
      *(_QWORD *)(v9 + 16) = v15 + 1;
      *(_DWORD *)(v9 + 4 * v15 + 32) = v13;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v18 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt64Array.getter@<X0>(uint64_t (*a1)(id, _QWORD *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t (*v17)(BOOL, uint64_t, uint64_t, uint64_t);
  uint64_t *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v19[0] = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v6 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    v18 = a3;
    if (v7)
      goto LABEL_3;
LABEL_16:
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v18 = a3;
  if (!v7)
    goto LABEL_16;
LABEL_3:
  if (v7 < 1)
    __break(1u);
  v17 = a2;
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v10 = (id)MEMORY[0x22E2F57B8](v8, v6);
    else
      v10 = *(id *)(v6 + 8 * v8 + 32);
    v11 = v10;
    v19[0] = 0;
    v12 = a1(v10, v19);

    if ((v12 & 1) != 0)
    {
      v13 = v19[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = v17(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
        v9 = v17(v14 > 1, v15 + 1, 1, v9);
      *(_QWORD *)(v9 + 16) = v15 + 1;
      *(_QWORD *)(v9 + 8 * v15 + 32) = v13;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v18 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt2Array.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char Int2;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Int2 = RIOPxrVtValueGetInt2();

    if ((Int2 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asInt3Array.getter@<X0>(uint64_t (*a1)(id, __int128 *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t (*v16)(BOOL, uint64_t, uint64_t, uint64_t);
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v19 = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v6 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    v17 = a3;
    if (v7)
      goto LABEL_3;
LABEL_16:
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v17 = a3;
  if (!v7)
    goto LABEL_16;
LABEL_3:
  if (v7 < 1)
    __break(1u);
  v16 = a2;
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v10 = (id)MEMORY[0x22E2F57B8](v8, v6);
    else
      v10 = *(id *)(v6 + 8 * v8 + 32);
    v11 = v10;
    v19 = 0uLL;
    v12 = a1(v10, &v19);

    if ((v12 & 1) != 0)
    {
      v18 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = v16(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
      v14 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      if (v14 >= v13 >> 1)
        v9 = v16(v13 > 1, v14 + 1, 1, v9);
      *(_QWORD *)(v9 + 16) = v14 + 1;
      *(_OWORD *)(v9 + 16 * v14 + 32) = v18;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v17 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalfArray.getter@<X0>(char **a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  char Float;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Float = RIOPxrVtValueGetFloat();

    if ((Float & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v10 = *((_QWORD *)v5 + 2);
      v9 = *((_QWORD *)v5 + 3);
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v10 + 1;
      *(_DWORD *)&v5[4 * v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalf2Array.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  _QWORD *v12;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v12 = a1;
    if (v3)
      goto LABEL_3;
LABEL_17:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v12 = a1;
  if (!v3)
    goto LABEL_17;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    if (RIOPxrVtValueGetHalf2())
    {
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = 2;
      *(_QWORD *)(v8 + 32) = 0;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    else
    {

    }
    ++v4;
  }
  while (v3 != v4);
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTexCoord2hArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v1 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_21;
  v2 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!v2)
      break;
    v4 = 4;
    while (1)
    {
      v5 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v4 - 4, v1) : *(id *)(v1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = v2;
      if ((RIOPxrVtValueGetHalf2() & 1) == 0)
        __break(1u);
      v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v9 + 16) = 2;
      *(_QWORD *)(v9 + 32) = 0;
      v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v10 + 16) = 4;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      v11 = *(_QWORD *)(v9 + 16);
      if (!v11)
        goto LABEL_19;
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(v9 + 32);
      if (v11 == 1)
        goto LABEL_20;
      v12 = v10;
      *(_DWORD *)(v10 + 36) = *(_DWORD *)(v9 + 36);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v14 = v3[2];
      v13 = v3[3];
      if (v14 >= v13 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
      v3[2] = v14 + 1;
      v3[v14 + 4] = v12;
      ++v4;
      v2 = v8;
      if (v7 == v8)
        goto LABEL_17;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain_n();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v3;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalf3Array.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  _QWORD *v12;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v12 = a1;
    if (v3)
      goto LABEL_3;
LABEL_17:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v12 = a1;
  if (!v3)
    goto LABEL_17;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    if (RIOPxrVtValueGetHalf3())
    {
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = 4;
      *(_DWORD *)(v8 + 44) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 0;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    else
    {

    }
    ++v4;
  }
  while (v3 != v4);
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor3hArray.getter@<X0>(uint64_t (*a1)(BOOL, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t (*v17)(BOOL, uint64_t, uint64_t, uint64_t);

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v3 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_22;
  v4 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v4)
  {
    v17 = a1;
    v5 = MEMORY[0x24BEE4AF8];
    v6 = 4;
    while (1)
    {
      v7 = (v3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      a1 = (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))v4;
      if (!RIOPxrVtValueGetHalf3())
        __break(1u);
      v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v10 + 16) = 4;
      *(_DWORD *)(v10 + 44) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 0;
      v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v11 + 16) = 4;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      v12 = *(_QWORD *)(v10 + 16);
      if (!v12)
        goto LABEL_19;
      *(_DWORD *)(v11 + 32) = *(_DWORD *)(v10 + 32);
      if (v12 == 1)
        goto LABEL_20;
      v13 = v11;
      *(_DWORD *)(v11 + 36) = *(_DWORD *)(v10 + 36);
      if (v12 < 3)
        goto LABEL_21;
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = v17(0, *(_QWORD *)(v5 + 16) + 1, 1, v5);
      v15 = *(_QWORD *)(v5 + 16);
      v14 = *(_QWORD *)(v5 + 24);
      if (v15 >= v14 >> 1)
        v5 = v17(v14 > 1, v15 + 1, 1, v5);
      *(_QWORD *)(v5 + 16) = v15 + 1;
      *(_QWORD *)(v5 + 8 * v15 + 32) = v13;
      ++v6;
      v4 = (uint64_t)a1;
      if ((uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))v9 == a1)
        goto LABEL_24;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v5 = MEMORY[0x24BEE4AF8];
LABEL_24:
  result = swift_bridgeObjectRelease_n();
  *a2 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asHalf4Array.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  _QWORD *v12;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v12 = a1;
    if (v3)
      goto LABEL_3;
LABEL_17:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v12 = a1;
  if (!v3)
    goto LABEL_17;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    if (RIOPxrVtValueGetHalf4())
    {
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = 4;
      *(_OWORD *)(v8 + 32) = 0uLL;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    else
    {

    }
    ++v4;
  }
  while (v3 != v4);
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *v12 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor4hArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v1 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_24;
  v2 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = 4;
    while (1)
    {
      v5 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v4 - 4, v1) : *(id *)(v1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      if ((RIOPxrVtValueGetHalf4() & 1) == 0)
        __break(1u);
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = 4;
      *(_OWORD *)(v8 + 32) = 0uLL;
      v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v9 + 16) = 4;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v10 = *(_QWORD *)(v8 + 16);
      if (!v10)
        goto LABEL_20;
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v8 + 32);
      if (v10 == 1)
        goto LABEL_21;
      v11 = v9;
      *(_DWORD *)(v9 + 36) = *(_DWORD *)(v8 + 36);
      if (v10 < 3)
        goto LABEL_22;
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(v8 + 40);
      if (v10 == 3)
        goto LABEL_23;
      *(_DWORD *)(v9 + 44) = *(_DWORD *)(v8 + 44);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v13 = v3[2];
      v12 = v3[3];
      if (v13 >= v12 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v3);
      v3[2] = v13 + 1;
      v3[v13 + 4] = v11;
      ++v4;
      if (v7 == v2)
        goto LABEL_26;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_26:
  result = swift_bridgeObjectRelease_n();
  *a1 = v3;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asFloatArray.getter@<X0>(char **a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  char Float;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Float = RIOPxrVtValueGetFloat();

    if ((Float & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v10 = *((_QWORD *)v5 + 2);
      v9 = *((_QWORD *)v5 + 3);
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v10 + 1;
      *(_DWORD *)&v5[4 * v10 + 32] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asFloat2Array.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char Float2;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Float2 = RIOPxrVtValueGetFloat2();

    if ((Float2 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTexCoord2fArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  __int128 v13;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = 4;
    while (1)
    {
      v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if ((RIOPxrVtValueGetFloat2() & 1) == 0)
        __break(1u);

      *(_QWORD *)&v9 = 0;
      v13 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v11 = v4[2];
      v10 = v4[3];
      if (v11 >= v10 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v4);
      v4[2] = v11 + 1;
      *(_OWORD *)&v4[2 * v11 + 4] = v13;
      ++v5;
      if (v8 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor3fArray.getter@<X0>(unint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t result;
  uint64_t (*v14)(BOOL, uint64_t, uint64_t, uint64_t);

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v4 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v5)
  {
    v14 = (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))a1;
    v6 = MEMORY[0x24BEE4AF8];
    v7 = 4;
    while (1)
    {
      v8 = (v4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v7 - 4, v4) : *(id *)(v4 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      if ((RIOPxrVtValueGetFloat3() & 1) == 0)
        __break(1u);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = v14(0, *(_QWORD *)(v6 + 16) + 1, 1, v6);
      a1 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (a1 >= v11 >> 1)
        v6 = v14(v11 > 1, a1 + 1, 1, v6);
      v12 = 0uLL;
      HIDWORD(v12) = 0;
      *(_QWORD *)(v6 + 16) = a1 + 1;
      *(_OWORD *)(v6 + 16 * a1 + 32) = v12;
      ++v7;
      if (v10 == v5)
        goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v6 = MEMORY[0x24BEE4AF8];
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *a2 = v6;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor4fArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = 4;
    while (1)
    {
      v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if ((RIOPxrVtValueGetFloat4() & 1) == 0)
        __break(1u);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v10 = v4[2];
      v9 = v4[3];
      if (v10 >= v9 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v4);
      v4[2] = v10 + 1;
      *(_OWORD *)&v4[2 * v10 + 4] = 0uLL;
      ++v5;
      if (v8 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asDoubleArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char Double;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Double = RIOPxrVtValueGetDouble();

    if ((Double & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v5[v10 + 4] = 0;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asDouble2Array.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char Double2;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Double2 = RIOPxrVtValueGetDouble2();

    if ((Double2 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      *(_OWORD *)&v5[2 * v10 + 4] = 0uLL;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTexCoord2dArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = 4;
    while (1)
    {
      v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if ((RIOPxrVtValueGetDouble2() & 1) == 0)
        __break(1u);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v10 = v4[2];
      v9 = v4[3];
      if (v10 >= v9 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v4);
      v4[2] = v10 + 1;
      v11 = &v4[4 * v10];
      *((_OWORD *)v11 + 2) = 0uLL;
      *((_OWORD *)v11 + 3) = 0u;
      ++v5;
      if (v8 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor3dArray.getter@<X0>(unint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t (*v14)(BOOL, uint64_t, uint64_t, uint64_t);

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v4 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v5)
  {
    v14 = (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))a1;
    v6 = MEMORY[0x24BEE4AF8];
    v7 = 4;
    while (1)
    {
      v8 = (v4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v7 - 4, v4) : *(id *)(v4 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      if ((RIOPxrVtValueGetDouble3() & 1) == 0)
        __break(1u);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = v14(0, *(_QWORD *)(v6 + 16) + 1, 1, v6);
      a1 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (a1 >= v11 >> 1)
        v6 = v14(v11 > 1, a1 + 1, 1, v6);
      *(_QWORD *)(v6 + 16) = a1 + 1;
      v12 = v6 + 32 * a1;
      *(_OWORD *)(v12 + 48) = 0uLL;
      *(_OWORD *)(v12 + 32) = 0u;
      ++v7;
      if (v10 == v5)
        goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v6 = MEMORY[0x24BEE4AF8];
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *a2 = v6;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asDouble3Array.getter@<X0>(uint64_t (*a1)(id, __int128 *)@<X2>, uint64_t (*a2)(BOOL, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t (*v17)(BOOL, uint64_t, uint64_t, uint64_t);
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v21 = 0;
  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v6 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    v18 = a3;
    if (v7)
      goto LABEL_3;
LABEL_16:
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v18 = a3;
  if (!v7)
    goto LABEL_16;
LABEL_3:
  if (v7 < 1)
    __break(1u);
  v17 = a2;
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v11 = (id)MEMORY[0x22E2F57B8](v8, v6);
    else
      v11 = *(id *)(v6 + 8 * v8 + 32);
    v12 = v11;
    v21 = 0u;
    v22 = 0u;
    v13 = a1(v11, &v21);

    if ((v13 & 1) != 0)
    {
      v19 = v22;
      v20 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = v17(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
        v9 = v17(v14 > 1, v15 + 1, 1, v9);
      *(_QWORD *)(v9 + 16) = v15 + 1;
      v10 = v9 + 32 * v15;
      *(_OWORD *)(v10 + 32) = v20;
      *(_OWORD *)(v10 + 48) = v19;
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v18 = v9;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asColor4dArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = 4;
    while (1)
    {
      v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2F57B8](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if ((RIOPxrVtValueGetDouble4() & 1) == 0)
        __break(1u);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v10 = v4[2];
      v9 = v4[3];
      if (v10 >= v9 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v4);
      v4[2] = v10 + 1;
      v11 = &v4[4 * v10];
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      ++v5;
      if (v8 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_18:
  result = swift_bridgeObjectRelease_n();
  *a1 = v4;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asQuatfArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char Quatf;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v6 = *(id *)(v2 + 8 * v4 + 32);
    v7 = v6;
    Quatf = RIOPxrVtValueGetQuatf();

    if ((Quatf & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      *(_OWORD *)&v5[2 * v10 + 4] = 0uLL;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asQuatdArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  id v7;
  void *v8;
  char Quatd;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v7 = *(id *)(v2 + 8 * v4 + 32);
    v8 = v7;
    Quatd = RIOPxrVtValueGetQuatd();

    if ((Quatd & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v11 = v5[2];
      v10 = v5[3];
      if (v11 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
      v5[2] = v11 + 1;
      v6 = &v5[4 * v11];
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  id v7;
  void *v8;
  char Matrix2d;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v7 = *(id *)(v2 + 8 * v4 + 32);
    v8 = v7;
    Matrix2d = RIOPxrVtValueGetMatrix2d();

    if ((Matrix2d & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v11 = v5[2];
      v10 = v5[3];
      if (v11 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
      v5[2] = v11 + 1;
      v6 = &v5[4 * v11];
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  id v7;
  void *v8;
  char Matrix3d;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  _QWORD *v13;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    v13 = a1;
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v13 = a1;
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v7 = *(id *)(v2 + 8 * v4 + 32);
    v8 = v7;
    Matrix3d = RIOPxrVtValueGetMatrix3d();

    if ((Matrix3d & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v11 = v5[2];
      v10 = v5[3];
      if (v11 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
      v5[2] = v11 + 1;
      v6 = &v5[12 * v11];
      v6[2] = 0u;
      v6[3] = 0u;
      v6[4] = 0u;
      v6[5] = 0u;
      v6[6] = 0u;
      v6[7] = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *v13 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  id v7;
  void *v8;
  char Matrix4d;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;

  type metadata accessor for RIOPxrVtValueRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v2 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v3 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  if (v3 < 1)
    __break(1u);
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x22E2F57B8](v4, v2);
    else
      v7 = *(id *)(v2 + 8 * v4 + 32);
    v8 = v7;
    Matrix4d = RIOPxrVtValueGetMatrix4d();

    if ((Matrix4d & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v11 = v5[2];
      v10 = v5[3];
      if (v11 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
      v5[2] = v11 + 1;
      v6 = &v5[16 * v11];
      v6[2] = 0u;
      v6[3] = 0u;
      v6[4] = 0u;
      v6[5] = 0u;
      v6[6] = 0u;
      v6[7] = 0u;
      v6[8] = 0u;
      v6[9] = 0u;
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_17:
  result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

uint64_t closure #1 in RIOPxrVtValueRef.asTokenArray.getter@<X0>(void (*a1)(_QWORD)@<X2>, void (*a2)(BOOL, unint64_t, uint64_t)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t j;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void (*v17)(BOOL, unint64_t, uint64_t);
  unint64_t v18;

  a1(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  v5 = MEMORY[0x24BEE4AF8];
  if (v18)
    v6 = v18;
  else
    v6 = MEMORY[0x24BEE4AF8];
  if (!(v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_6;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *a3 = v5;
    return result;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_19;
LABEL_6:
  result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a2)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v17 = a2;
    if ((v6 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = MEMORY[0x22E2F57B8](i, v6);
        v12 = *(_QWORD *)(v5 + 16);
        v11 = *(_QWORD *)(v5 + 24);
        if (v12 >= v11 >> 1)
          v17(v11 > 1, v12 + 1, 1);
        *(_QWORD *)(v5 + 16) = v12 + 1;
        *(_QWORD *)(v5 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      for (j = 0; j != v7; ++j)
      {
        v15 = *(_QWORD *)(v5 + 16);
        v14 = *(_QWORD *)(v5 + 24);
        v16 = *(id *)(v6 + 8 * j + 32);
        if (v15 >= v14 >> 1)
          v17(v14 > 1, v15 + 1, 1);
        *(_QWORD *)(v5 + 16) = v15 + 1;
        *(_QWORD *)(v5 + 8 * v15 + 32) = v16;
      }
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t RIOPxrVtValueRef.asDictionary.getter()
{
  uint64_t v0;
  void *v1;

  v0 = RIOPxrVtValueCopyDictionary();
  if (v0)
  {
    v1 = (void *)v0;
    type metadata accessor for RIOPxrTfTokenRef(0);
    type metadata accessor for RIOPxrVtValueRef(0);
    lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  return 0;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v30 = (_QWORD *)*a3;
      v10 = *(v28 - 1);
      v11 = v29;
      v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = 8 * v31;
      *(_QWORD *)(v38[6] + v39) = v10;
      *(_QWORD *)(v38[7] + v39) = v11;
      v40 = v38[2];
      v25 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v41;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a2 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for RIOPxrTfTokenRef(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x800000022BD075A0;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  type metadata accessor for RIOPxrTfTokenRef(0);
  _print_unlocked<A, B>(_:_:)();
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void specialized static Int.getValue3Opt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  void *v4;
  char Int3;
  BOOL v6;

  v2 = RIOPxrUsdAttributeCopyValue();
  v3 = 0uLL;
  if (v2)
  {
    v4 = (void *)v2;
    Int3 = RIOPxrVtValueGetInt3();

    v6 = (Int3 & 1) == 0;
    v3 = 0uLL;
  }
  else
  {
    v6 = 1;
  }
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v6;
}

void specialized static Int.getValue4Opt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  void *v4;
  char Int4;
  char v6;
  __int128 v7;
  __int128 v8;

  v2 = RIOPxrUsdAttributeCopyValue();
  v3 = 0uLL;
  if (v2)
  {
    v4 = (void *)v2;
    Int4 = RIOPxrVtValueGetInt4();

    if ((Int4 & 1) != 0)
    {
      v6 = 0;
      v3 = 0uLL;
      *(_QWORD *)&v7 = 0;
      *((_QWORD *)&v7 + 1) = (unsigned __int128)0 >> 96;
      v8 = v7;
    }
    else
    {
      v6 = 1;
      v8 = 0uLL;
      v3 = 0uLL;
    }
  }
  else
  {
    v6 = 1;
    v8 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v6;
}

double specialized static Int.getValue2Opt(from:time:)()
{
  uint64_t v0;
  double result;
  void *v2;

  v0 = RIOPxrUsdAttributeCopyValue();
  result = 0.0;
  if (v0)
  {
    v2 = (void *)v0;
    RIOPxrVtValueGetInt2();

    return 0.0;
  }
  return result;
}

uint64_t specialized static ToolsFoundations.Token.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v8 = (void *)result;
    v9 = a2();
    if (v9)
    {
      v10 = (void *)v9;
      v12 = v9;
      a5(&v11, &v12);

      return v11;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t specialized static UInt8.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v6 = (void *)result;
    v7 = a2();
    if (v7)
    {
      v8 = (void *)v7;
      v10 = v7;
      a3(&v9, &v10);

      return v9;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t specialized static Frame4D.getValueArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  _QWORD *v51;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyMatrix4dArray();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v51 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter(&v50);

    v4 = v50;
    v5 = *(_QWORD *)(v50 + 16);
    if (v5)
    {
      v51 = (_QWORD *)MEMORY[0x24BEE4AF8];
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v7 = 0;
      v3 = v51;
      do
      {
        v8 = 0;
        v9 = (__int128 *)(v4 + 32 + (v7 << 7));
        v11 = *v9;
        v10 = v9[1];
        v13 = v9[2];
        v12 = v9[3];
        v15 = v9[4];
        v14 = v9[5];
        v17 = v9[6];
        v16 = v9[7];
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v22 = 0uLL;
        v23 = 0uLL;
        v24 = 0uLL;
        v25 = 0uLL;
        do
        {
          v27 = v8 >> 2;
          v28 = v15;
          v29 = v14;
          if (v8 >> 2 != 2)
          {
            v28 = v13;
            v29 = v12;
            if (v27 != 1)
            {
              v28 = v11;
              v29 = v10;
              if (v27)
              {
                v28 = v17;
                v29 = v16;
                if ((v8 & 0x7FFFFFFFFFFFFFFCLL) != 0xC)
                {
                  __break(1u);
                  return result;
                }
              }
            }
          }
          v49[0] = v28;
          v49[1] = v29;
          v26 = *((_QWORD *)v49 + (v8 & 3));
          v41 = v18;
          v42 = v19;
          v43 = v20;
          v44 = v21;
          v45 = v22;
          v46 = v23;
          v47 = v24;
          v48 = v25;
          *((_QWORD *)&v41 + (v8 & 0xF)) = v26;
          v24 = v47;
          v25 = v48;
          v22 = v45;
          v23 = v46;
          v20 = v43;
          v21 = v44;
          ++v8;
          v18 = v41;
          v19 = v42;
        }
        while (v8 != 16);
        v51 = v3;
        v31 = v3[2];
        v30 = v3[3];
        if (v31 >= v30 >> 1)
        {
          v39 = v47;
          v40 = v48;
          v37 = v41;
          v38 = v46;
          v35 = v44;
          v36 = v45;
          v33 = v42;
          v34 = v43;
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          v19 = v33;
          v20 = v34;
          v21 = v35;
          v22 = v36;
          v18 = v37;
          v23 = v38;
          v24 = v39;
          v25 = v40;
          v3 = v51;
        }
        ++v7;
        v3[2] = v31 + 1;
        v32 = &v3[16 * v31];
        v32[2] = v18;
        v32[3] = v19;
        v32[4] = v20;
        v32[5] = v21;
        v32[6] = v22;
        v32[7] = v23;
        v32[8] = v24;
        v32[9] = v25;
      }
      while (v7 != v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return (uint64_t)v3;
}

_QWORD *specialized static simd_float2x2.getValueArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  float64x2_t *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  unint64_t v11;
  unint64_t v12;
  float32x2_t *v13;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  _QWORD *v18;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyMatrix2dArray();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v18 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix2dArray.getter(&v17);

    v4 = (float64x2_t *)v17;
    v5 = *(_QWORD *)(v17 + 16);
    if (v5)
    {
      v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v3 = v18;
      v6 = v18[2];
      v7 = 2 * v6;
      v8 = v4 + 3;
      do
      {
        v9 = v8[-1];
        v10 = *v8;
        v18 = v3;
        v11 = v3[3];
        v12 = v6 + 1;
        if (v6 >= v11 >> 1)
        {
          v15 = v10;
          v16 = v9;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v6 + 1, 1);
          v10 = v15;
          v9 = v16;
          v3 = v18;
        }
        v3[2] = v12;
        v13 = (float32x2_t *)&v3[v7];
        v13[4] = vcvt_f32_f64(v9);
        v13[5] = vcvt_f32_f64(v10);
        v7 += 2;
        v8 += 2;
        v6 = v12;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return v3;
}

_QWORD *specialized static simd_float3x3.getValueArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  float64x2_t *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  __int128 v21;
  unsigned int v22;
  _OWORD *v23;
  float64x2_t v25;
  float64_t v26;
  float64x2_t v27;
  float64_t v28;
  float64x2_t v29;
  float64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyMatrix3dArray();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v32 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix3dArray.getter(&v31);

    v4 = (float64x2_t *)v31;
    v5 = *(_QWORD *)(v31 + 16);
    if (v5)
    {
      v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v3 = v32;
      v6 = v32[2];
      v7 = 6 * v6;
      v8 = v4 + 6;
      do
      {
        v9 = v8[-4];
        v10 = v8[-3];
        v12 = v8[-2];
        v11 = v8[-1];
        v14 = *v8;
        v13 = v8[1];
        v32 = v3;
        v15 = v3[3];
        v16 = v6 + 1;
        if (v6 >= v15 >> 1)
        {
          v29 = v14;
          v30 = v13.f64[0];
          v27 = v12;
          v28 = v11.f64[0];
          v25 = v9;
          v26 = v10.f64[0];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v6 + 1, 1);
          v9 = v25;
          v10.f64[0] = v26;
          v12 = v27;
          v11.f64[0] = v28;
          v14 = v29;
          v13.f64[0] = v30;
          v3 = v32;
        }
        *(float32x2_t *)&v17 = vcvt_f32_f64(v9);
        *(float *)&v18 = v10.f64[0];
        *((_QWORD *)&v17 + 1) = v18;
        *(float32x2_t *)&v19 = vcvt_f32_f64(v12);
        *(float *)&v20 = v11.f64[0];
        *((_QWORD *)&v19 + 1) = v20;
        *(float32x2_t *)&v21 = vcvt_f32_f64(v14);
        *(float *)&v22 = v13.f64[0];
        *((_QWORD *)&v21 + 1) = v22;
        v3[2] = v16;
        v23 = &v3[v7];
        v23[2] = v17;
        v23[3] = v19;
        v23[4] = v21;
        v7 += 6;
        v8 += 6;
        v6 = v16;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return v3;
}

_QWORD *specialized static simd_float4x4.getValueArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  float64x2_t *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  unint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  _QWORD *v30;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyMatrix4dArray();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v30 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asMatrix4dArray.getter(&v29);

    v4 = (float64x2_t *)v29;
    v5 = *(_QWORD *)(v29 + 16);
    if (v5)
    {
      v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v3 = v30;
      v6 = v30[2];
      v7 = (v6 << 6) | 0x30;
      v8 = v4 + 8;
      do
      {
        v9 = v8[-6];
        v10 = v8[-5];
        v12 = v8[-4];
        v11 = v8[-3];
        v14 = v8[-2];
        v13 = v8[-1];
        v16 = *v8;
        v15 = v8[1];
        v30 = v3;
        v17 = v3[3];
        v18 = v6 + 1;
        if (v6 >= v17 >> 1)
        {
          v28 = v15;
          v26 = v11;
          v27 = v13;
          v24 = v10;
          v25 = v16;
          v22 = v12;
          v23 = v14;
          v21 = v9;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v6 + 1, 1);
          v9 = v21;
          v12 = v22;
          v14 = v23;
          v10 = v24;
          v16 = v25;
          v11 = v26;
          v13 = v27;
          v15 = v28;
          v3 = v30;
        }
        v3[2] = v18;
        v19 = (float32x4_t *)((char *)v3 + v7);
        v19[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
        *v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
        v19[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v13);
        v19[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v15);
        v7 += 64;
        v8 += 8;
        v6 = v18;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return v3;
}

_QWORD *specialized static Int8.getValueArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v11;
  _QWORD *v12;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyInt32Array();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v12 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asInt32Array.getter((uint64_t (*)(id, _QWORD *))MEMORY[0x24BE27D30], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v11);

    v4 = v11;
    v5 = *(_QWORD *)(v11 + 16);
    if (v5)
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v6 = 0;
      v3 = v12;
      v7 = v12[2];
      do
      {
        v8 = *(_DWORD *)(v4 + 4 * v6 + 32);
        v12 = v3;
        v9 = v3[3];
        if (v7 + v6 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + v6 + 1, 1);
          v3 = v12;
        }
        v3[2] = v7 + v6 + 1;
        *((_BYTE *)v3 + v7 + v6++ + 32) = v8;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return v3;
}

_QWORD *specialized static Int.getValue2ArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v12;
  _QWORD *v13;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyInt2Array();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v13 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asInt2Array.getter(&v12);

    v4 = v12;
    v5 = *(_QWORD *)(v12 + 16);
    if (v5)
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v6 = 0;
      v3 = v13;
      v7 = v13[2];
      do
      {
        v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
        v13 = v3;
        v9 = v3[3];
        if (v7 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + 1, 1);
          v3 = v13;
        }
        ++v6;
        *(_QWORD *)&v10 = (int)v8;
        *((_QWORD *)&v10 + 1) = SHIDWORD(v8);
        v3[2] = v7 + 1;
        *(_OWORD *)&v3[2 * v7++ + 4] = v10;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return v3;
}

_QWORD *specialized static Int.getValue3ArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyInt3Array();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v15 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asInt3Array.getter((uint64_t (*)(id, __int128 *))MEMORY[0x24BE27D28], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v14);

    v4 = v14;
    v5 = *(_QWORD *)(v14 + 16);
    if (v5)
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v6 = 0;
      v3 = v15;
      v7 = v15[2] + 1;
      do
      {
        v8 = *(_OWORD *)(v4 + 16 * v6 + 32);
        v15 = v3;
        v9 = v3[3];
        if (v7 - 1 >= v9 >> 1)
        {
          v13 = v8;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7, 1);
          v8 = v13;
          v3 = v15;
        }
        ++v6;
        *(_QWORD *)&v10 = (int)v8;
        *((_QWORD *)&v10 + 1) = SDWORD1(v8);
        v3[2] = v7;
        v11 = &v3[4 * v7];
        *v11 = v10;
        v11[1] = (unint64_t)SDWORD2(v8);
        ++v7;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return v3;
}

_QWORD *specialized static Int.getValue4ArrayOpt(from:time:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = RIOPxrVtValueCopyInt4Array();
  v3 = (_QWORD *)v2;
  if (v2)
  {
    v16 = (_QWORD *)v2;
    closure #1 in RIOPxrVtValueRef.asInt3Array.getter((uint64_t (*)(id, __int128 *))MEMORY[0x24BE27D38], (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &v15);

    v4 = v15;
    v5 = *(_QWORD *)(v15 + 16);
    if (v5)
    {
      v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v6 = 0;
      v3 = v16;
      v7 = v16[2] + 1;
      do
      {
        v8 = *(_OWORD *)(v4 + 16 * v6 + 32);
        v16 = v3;
        v9 = v3[3];
        if (v7 - 1 >= v9 >> 1)
        {
          v14 = v8;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7, 1);
          v8 = v14;
          v3 = v16;
        }
        ++v6;
        *(_QWORD *)&v10 = (int)v8;
        *((_QWORD *)&v10 + 1) = SDWORD1(v8);
        v11 = v10;
        *(_QWORD *)&v10 = SDWORD2(v8);
        *((_QWORD *)&v10 + 1) = SHIDWORD(v8);
        v3[2] = v7;
        v12 = &v3[4 * v7];
        *v12 = v11;
        v12[1] = v10;
        ++v7;
      }
      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

  }
  return v3;
}

uint64_t specialized static Int16.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(id, _QWORD *), uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v9 = RIOPxrUsdAttributeCopyValue();
  if (!v9)
    return 0;
  v10 = (void *)v9;
  v11 = a2();
  if (v11)
  {
    v12 = (void *)v11;
    v22 = v11;
    closure #1 in RIOPxrVtValueRef.asInt32Array.getter(a3, a4, &v21);

    v13 = v21;
    v14 = *(_QWORD *)(v21 + 16);
    if (v14)
    {
      v22 = MEMORY[0x24BEE4AF8];
      a5(0, v14, 0);
      v15 = 0;
      v16 = v22;
      v17 = *(_QWORD *)(v22 + 16);
      do
      {
        v18 = *(_DWORD *)(v13 + 4 * v15 + 32);
        v22 = v16;
        v19 = *(_QWORD *)(v16 + 24);
        if (v17 >= v19 >> 1)
        {
          a5(v19 > 1, v17 + 1, 1);
          v16 = v22;
        }
        ++v15;
        *(_QWORD *)(v16 + 16) = v17 + 1;
        *(_WORD *)(v16 + 2 * v17++ + 32) = v18;
      }
      while (v14 != v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {

    return 0;
  }
  return v16;
}

uint64_t specialized static simd_float2x2.getValueOpt(from:time:)()
{
  uint64_t result;
  void *v1;
  char Matrix2d;

  result = RIOPxrUsdAttributeCopyValue();
  if (result)
  {
    v1 = (void *)result;
    Matrix2d = RIOPxrVtValueGetMatrix2d();

    if ((Matrix2d & 1) != 0)
      return (uint64_t)vcvt_f32_f64((float64x2_t)0);
    else
      return 0;
  }
  return result;
}

void specialized static simd_float3x3.getValueOpt(from:time:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix3d;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix3d = RIOPxrVtValueGetMatrix3d();

    if ((Matrix3d & 1) != 0)
    {
      v5 = 0;
      *(float32x2_t *)&v6 = vcvt_f32_f64((float64x2_t)0);
      *((float *)&v6 + 2) = 0.0;
      HIDWORD(v6) = 0;
      *(_QWORD *)&v7 = v6;
      *((float *)&v7 + 2) = 0.0;
      HIDWORD(v7) = 0;
      *(_QWORD *)&v8 = v6;
      *((float *)&v8 + 2) = 0.0;
      HIDWORD(v8) = 0;
    }
    else
    {
      v5 = 1;
      v7 = 0uLL;
      v8 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 1;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 48) = v5;
}

void specialized static simd_float4x4.getValueOpt(from:time:)(float32x4_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix4d;
  char v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix4d = RIOPxrVtValueGetMatrix4d();

    if ((Matrix4d & 1) != 0)
    {
      v5 = 0;
      v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), (float64x2_t)0);
      v7 = v6;
      v8 = v6;
      v9 = v6;
    }
    else
    {
      v5 = 1;
      v7 = 0uLL;
      v8 = 0uLL;
      v9 = 0uLL;
      v6 = 0uLL;
    }
  }
  else
  {
    v6 = 0uLL;
    v5 = 1;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4].i8[0] = v5;
}

uint64_t specialized static Half.vtValue(from:)(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >= 3)
    return RIOPxrVtValueCreateWithHalf3();
LABEL_7:
  __break(1u);
  return result;
}

{
  unint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v1 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 != 3)
    return RIOPxrVtValueCreateWithHalf4();
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized static Half.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 4;
      RIOPxrVtValueCreateWithHalf();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithHalfArray();

  return v5;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    result = specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (!v5)
        break;
      if (v5 == 1)
        goto LABEL_8;
      RIOPxrVtValueCreateWithHalf2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      v4 += 8;
      if (!--v1)
        goto LABEL_6;
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
  else
  {
LABEL_6:
    type metadata accessor for RIOPxrVtValueRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = RIOPxrVtValueCreateWithHalf2Array();

    return v7;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    result = specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (!v5)
        break;
      if (v5 == 1)
        goto LABEL_9;
      if (v5 < 3)
        goto LABEL_10;
      RIOPxrVtValueCreateWithHalf3();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      v4 += 8;
      if (!--v1)
        goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_7:
    type metadata accessor for RIOPxrVtValueRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = RIOPxrVtValueCreateWithHalf3Array();

    return v7;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    result = specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (!v5)
        break;
      if (v5 == 1)
        goto LABEL_10;
      if (v5 < 3)
        goto LABEL_11;
      if (v5 == 3)
        goto LABEL_12;
      RIOPxrVtValueCreateWithHalf4();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      v4 += 8;
      if (!--v1)
        goto LABEL_8;
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_8:
    type metadata accessor for RIOPxrVtValueRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = RIOPxrVtValueCreateWithHalf4Array();

    return v7;
  }
  return result;
}

uint64_t specialized static Frame4D.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 128;
      RIOPxrVtValueCreateWithMatrix4d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithMatrix4dArray();

  return v5;
}

uint64_t specialized static Bool.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      ++v3;
      RIOPxrVtValueCreateWithBool();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithBoolArray();

  return v5;
}

uint64_t specialized static Double.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 8;
      RIOPxrVtValueCreateWithDouble();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithDoubleArray();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithDouble2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithDouble2Array();

  return v5;
}

uint64_t specialized static Float.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 4;
      RIOPxrVtValueCreateWithFloat();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithFloatArray();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 8;
      RIOPxrVtValueCreateWithFloat2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithFloat2Array();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithFloat3();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithFloat3Array();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithFloat4();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithFloat4Array();

  return v5;
}

uint64_t specialized static Int.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  int64_t *v3;
  uint64_t result;
  int64_t v5;
  Class isa;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (int64_t *)(a1 + 32);
    while (1)
    {
      v5 = *v3++;
      result = v5;
      if (v5 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (result > 0x7FFFFFFF)
        goto LABEL_8;
      RIOPxrVtValueCreateWithInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v1)
        goto LABEL_6;
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
  else
  {
LABEL_6:
    type metadata accessor for RIOPxrVtValueRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = RIOPxrVtValueCreateWithInt32Array();

    return v7;
  }
  return result;
}

{
  uint64_t v1;
  const float *v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (const float *)(a1 + 32);
    do
    {
      vld2_f32(v3);
      v3 += 4;
      RIOPxrVtValueCreateWithInt2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithInt2Array();

  return v5;
}

{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 32;
      RIOPxrVtValueCreateWithInt3();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithInt3Array();

  return v5;
}

{
  uint64_t v1;
  const float *v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (const float *)(a1 + 32);
    do
    {
      vld2q_f32(v3);
      v3 += 8;
      RIOPxrVtValueCreateWithInt4();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithInt4Array();

  return v5;
}

uint64_t specialized static simd_quatd.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 32;
      RIOPxrVtValueCreateWithQuatd();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithQuatdArray();

  return v5;
}

uint64_t specialized static simd_quatf.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 16;
      RIOPxrVtValueCreateWithQuatf();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithQuatfArray();

  return v5;
}

uint64_t specialized static simd_float2x2.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 40;
    do
    {
      RIOPxrVtValueCreateWithMatrix2f();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 16;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithMatrix2dArray();

  return v5;
}

uint64_t specialized static simd_float3x3.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 64;
    do
    {
      RIOPxrVtValueCreateWithMatrix3f();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 48;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithMatrix3dArray();

  return v5;
}

uint64_t specialized static simd_float4x4.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 80;
    do
    {
      RIOPxrVtValueCreateWithMatrix4f();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 64;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithMatrix4dArray();

  return v5;
}

uint64_t specialized static simd_double2x2.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 48;
    do
    {
      RIOPxrVtValueCreateWithMatrix2d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithMatrix2dArray();

  return v5;
}

uint64_t specialized static simd_double3x3.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 96;
    do
    {
      v3 += 96;
      RIOPxrVtValueCreateWithMatrix3d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithMatrix3dArray();

  return v5;
}

uint64_t specialized static simd_double4x4.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 128;
    do
    {
      v3 += 128;
      RIOPxrVtValueCreateWithMatrix4d();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithMatrix4dArray();

  return v5;
}

uint64_t specialized static UInt.vtValue(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  Class isa;
  uint64_t v7;
  uint64_t result;

  v1 = a1[2];
  if (!v1)
    goto LABEL_7;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!HIDWORD(a1[4]))
  {
    RIOPxrVtValueCreateWithUInt32();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = a1 + 5;
      do
      {
        v5 = *v4++;
        if (HIDWORD(v5))
          goto LABEL_8;
        RIOPxrVtValueCreateWithUInt32();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (--v3);
    }
LABEL_7:
    type metadata accessor for RIOPxrVtValueRef(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = RIOPxrVtValueCreateWithUInt32Array();

    return v7;
  }
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Int8.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      ++v3;
      RIOPxrVtValueCreateWithInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithInt32Array();

  return v5;
}

uint64_t specialized static Int16.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 2;
      RIOPxrVtValueCreateWithInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithInt32Array();

  return v5;
}

uint64_t specialized static Int32.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 8;
      RIOPxrVtValueCreateWithInt2();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithInt2Array();

  return v5;
}

uint64_t specialized static Double.vtValue(from:)(uint64_t a1, uint64_t (*a2)(Class), void (*a3)(_OWORD *))
{
  uint64_t v4;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  Class isa;
  uint64_t v11;
  _OWORD v13[2];
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v7 = (__int128 *)(a1 + 32);
    do
    {
      v8 = *v7;
      v9 = v7[1];
      v7 += 2;
      v13[0] = v8;
      v13[1] = v9;
      a3(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = a2(isa);

  return v11;
}

uint64_t specialized static Int32.vtValue(from:)(__n128 *a1, uint64_t (*a2)(Class), void (*a3)(uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v7;
  __n128 *v8;
  __n128 v9;
  Class isa;
  uint64_t v11;

  v4 = a1[1].n128_i64[0];
  if (v4)
  {
    v7 = specialized ContiguousArray.reserveCapacity(_:)();
    v8 = a1 + 2;
    do
    {
      v9 = *v8++;
      a3(v7, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v7 = specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = a2(isa);

  return v11;
}

uint64_t specialized static UInt8.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      ++v3;
      RIOPxrVtValueCreateWithUInt8();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithUInt8Array();

  return v5;
}

uint64_t specialized static UInt16.vtValue(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    do
    {
      v3 += 2;
      RIOPxrVtValueCreateWithUInt32();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = RIOPxrVtValueCreateWithUInt32Array();

  return v5;
}

uint64_t specialized static Int32.vtValue(from:)(uint64_t a1, uint64_t (*a2)(Class), void (*a3)(_QWORD))
{
  uint64_t v4;
  unsigned int *v7;
  unsigned int v8;
  Class isa;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v7 = (unsigned int *)(a1 + 32);
    do
    {
      v8 = *v7++;
      a3(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = a2(isa);

  return v10;
}

uint64_t specialized static Int64.vtValue(from:)(uint64_t a1, uint64_t (*a2)(Class), void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v7 = (uint64_t *)(a1 + 32);
    do
    {
      v8 = *v7++;
      a3(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
  type metadata accessor for RIOPxrVtValueRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = a2(isa);

  return v10;
}

uint64_t specialized static Half.setValue3(_:to:time:)(uint64_t result)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >= 3)
  {
    v2 = (void *)RIOPxrVtValueCreateWithHalf3();
    v3 = RIOPxrUsdAttributeSetValue();

    return v3;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized static Half.setValue2(_:to:time:)(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v1)
  {
    if (v1 != 1)
    {
      v2 = (void *)RIOPxrVtValueCreateWithHalf2();
      v3 = RIOPxrUsdAttributeSetValue();

      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double specialized static Int.getValue3(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Int3;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (v1 = (void *)v0, Int3 = RIOPxrVtValueGetInt3(), v1, (Int3 & 1) != 0))
    return 0.0;
  else
    return 0.0;
}

double specialized static Int.getValue4(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Int4;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (v0 && (v1 = (void *)v0, Int4 = RIOPxrVtValueGetInt4(), v1, (Int4 & 1) != 0))
    return 0.0;
  else
    return 0.0;
}

double specialized static Int.getValue2(from:time:)()
{
  uint64_t v0;
  double result;
  void *v2;

  v0 = RIOPxrUsdAttributeCopyValue();
  result = 0.0;
  if (v0)
  {
    v2 = (void *)v0;
    RIOPxrVtValueGetInt2();

    return 0.0;
  }
  return result;
}

double specialized static simd_float2x2.getValue(from:time:)()
{
  uint64_t v0;
  double v1;
  void *v2;
  char Matrix2d;

  v0 = RIOPxrUsdAttributeCopyValue();
  v1 = 0.0;
  if (v0)
  {
    v2 = (void *)v0;
    Matrix2d = RIOPxrVtValueGetMatrix2d();

    if ((Matrix2d & 1) != 0)
      return COERCE_DOUBLE(vcvt_f32_f64((float64x2_t)0));
  }
  return v1;
}

void specialized static simd_float3x3.getValue(from:time:)(_OWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char Matrix3d;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = RIOPxrUsdAttributeCopyValue();
  if (v2)
  {
    v3 = (void *)v2;
    Matrix3d = RIOPxrVtValueGetMatrix3d();

    if ((Matrix3d & 1) != 0)
    {
      *(float32x2_t *)&v5 = vcvt_f32_f64((float64x2_t)0);
      *((float *)&v5 + 2) = 0.0;
      HIDWORD(v5) = 0;
      *(_QWORD *)&v6 = v5;
      *((float *)&v6 + 2) = 0.0;
      HIDWORD(v6) = 0;
      *(_QWORD *)&v7 = v5;
      *((float *)&v7 + 2) = 0.0;
      HIDWORD(v7) = 0;
    }
    else
    {
      v6 = 0uLL;
      v7 = 0uLL;
      v5 = 0uLL;
    }
  }
  else
  {
    v5 = 0uLL;
    v6 = 0uLL;
    v7 = 0uLL;
  }
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
}

double specialized static simd_float4x4.getValue(from:time:)()
{
  uint64_t v0;
  void *v1;
  char Matrix4d;
  double result;

  v0 = RIOPxrUsdAttributeCopyValue();
  if (!v0)
    return 0.0;
  v1 = (void *)v0;
  Matrix4d = RIOPxrVtValueGetMatrix4d();

  if ((Matrix4d & 1) == 0)
    return 0.0;
  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), (float64x2_t)0).u64[0];
  return result;
}

double _s9RealityIO7Frame4DVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t _s9RealityIO7Frame4DVSgWOi_(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t partial apply for closure #1 in static TexCoord2<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40C8], (uint64_t (*)(char *, uint64_t, uint64_t))TexCoord2.init(_:));
}

uint64_t partial apply for closure #1 in static TexCoord3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))TexCoord3.init(_:));
}

uint64_t partial apply for closure #1 in static Color3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in static Color3<>.getValueOpt(from:time:)(a1, v2[2], v2[3], v2[4], a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))Color3.init(_:));
}

uint64_t partial apply for closure #1 in static Point3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))Point3.init(_:));
}

uint64_t partial apply for closure #1 in static Vector3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))Vector3.init(_:));
}

uint64_t partial apply for closure #1 in static Normal3<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TexCoord2<>.getValueOpt(from:time:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE40F8], (uint64_t (*)(char *, uint64_t, uint64_t))Normal3.init(_:));
}

uint64_t partial apply for closure #1 in static Color4<>.getValueOpt(from:time:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in static Color3<>.getValueOpt(from:time:)(a1, v2[2], v2[3], v2[4], a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE4158], (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))Color4.init(_:));
}

uint64_t partial apply for closure #3 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Normal3.x.getter, (void (*)(uint64_t))Normal3.y.getter, (void (*)(uint64_t))Normal3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Normal3.x.getter, (void (*)(uint64_t))Normal3.y.getter, (void (*)(uint64_t))Normal3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static Normal3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Normal3.x.getter, (void (*)(uint64_t))Normal3.y.getter, (void (*)(uint64_t))Normal3.z.getter, a2);
}

uint64_t partial apply for closure #3 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Color3<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #2 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Color3<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #1 in static Color3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Color3<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #3 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Color4<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #2 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Color4<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #1 in static Color4<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Color4<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #3 in static Vector3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Vector3.x.getter, (void (*)(uint64_t))Vector3.y.getter, (void (*)(uint64_t))Vector3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static Vector3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Vector3.x.getter, (void (*)(uint64_t))Vector3.y.getter, (void (*)(uint64_t))Vector3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static Vector3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Vector3.x.getter, (void (*)(uint64_t))Vector3.y.getter, (void (*)(uint64_t))Vector3.z.getter, a2);
}

uint64_t partial apply for closure #3 in static Point3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Point3.x.getter, (void (*)(uint64_t))Point3.y.getter, (void (*)(uint64_t))Point3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static Point3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Point3.x.getter, (void (*)(uint64_t))Point3.y.getter, (void (*)(uint64_t))Point3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static Point3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))Point3.x.getter, (void (*)(uint64_t))Point3.y.getter, (void (*)(uint64_t))Point3.z.getter, a2);
}

uint64_t partial apply for closure #3 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static TexCoord2<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #2 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static TexCoord2<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #1 in static TexCoord2<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static TexCoord2<>.vtValue(from:)(a1, a2);
}

uint64_t partial apply for closure #3 in static TexCoord3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))TexCoord3.x.getter, (void (*)(uint64_t))TexCoord3.y.getter, (void (*)(uint64_t))TexCoord3.z.getter, a2);
}

uint64_t partial apply for closure #2 in static TexCoord3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))TexCoord3.x.getter, (void (*)(uint64_t))TexCoord3.y.getter, (void (*)(uint64_t))TexCoord3.z.getter, a2);
}

uint64_t partial apply for closure #1 in static TexCoord3<>.vtValue(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Normal3<>.vtValue(from:)(a1, (void (*)(void))TexCoord3.x.getter, (void (*)(uint64_t))TexCoord3.y.getter, (void (*)(uint64_t))TexCoord3.z.getter, a2);
}

unint64_t lazy protocol witness table accessor for type Half and conformance Half()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Half and conformance Half;
  if (!lazy protocol witness table cache variable for type Half and conformance Half)
  {
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for Half, &type metadata for Half);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Half and conformance Half);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Half(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Half and conformance Half();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Float(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Float and conformance Float();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE1418], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Double(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Double and conformance Double();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE17B8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Int(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Int and conformance Int();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE3FD0], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE3FD8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    result = MEMORY[0x22E2F889C](MEMORY[0x24BEE3FB0], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Int32(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Int32 and conformance Int32();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static UsdAttributeValue.setValue(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static UsdAttributeValue.getValueOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValue.getValue(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValue.valueTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueArrayElement.setValueArray(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static UsdAttributeValueArrayElement.getValueArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueArrayElement.valueArrayTypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2Element.setValue2(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2Element.getValue2(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2Element.value2TypeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2ArrayElement.setValue2Array(_:to:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static UsdAttributeValueSIMD2ArrayElement.getValue2ArrayOpt(from:time:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of UsdVtValue.vtValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static UsdVtValueArrayElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static UsdVtValueSIMD2ArrayElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UsdVtValueQuatElement.vtValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for __RKEntityTriggerSpecification();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a2, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDE6BB8], v6);
  v11 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
    *a3 = v11;
  }
  v14 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v11);
    *a3 = v11;
  }
  *(_QWORD *)(v11 + 16) = v14 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v14, v9, v6);
  Inputs.performBlockLaterWithEntity(_:_:)(a1, (uint64_t)closure #1 in closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:), 0);
}

void closure #1 in closure #1 in static TriggerBuilder.generateTapTriggerSpecifications(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionComponent?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Entity.ComponentSet();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.components.getter();
  v7 = type metadata accessor for CollisionComponent();
  Entity.ComponentSet.subscript.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v2, 1, v7);
  outlined destroy of CollisionComponent?((uint64_t)v2);
  if (v8 == 1)
    Entity.generateCollisionShapes(recursive:)(1);
}

uint64_t outlined destroy of CollisionComponent?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t one-time initialization function for anchoringComponent()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.anchoringComponent = result;
  return result;
}

id one-time initialization function for alignmentPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.alignmentPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for boundsPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.boundsPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for classificationPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.classificationPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for resourcePathPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.resourcePathPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for physicalWidthPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.physicalWidthPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for transformPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.transformPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for typePropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.typePropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for isRequiredPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.isRequiredPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for scaleFactorPropertyName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.scaleFactorPropertyName = (uint64_t)result;
  return result;
}

id one-time initialization function for descriptorName()
{
  id result;

  if (String.count.getter() < 1)
    result = (id)RIOPxrTfTokenEmpty();
  else
    result = (id)RIOPxrTfTokenCreateWithCString();
  static AnchoringComponentBuilder.descriptorName = (uint64_t)result;
  return result;
}

uint64_t AnchoringComponentBuilder.run(inputs:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];
  _QWORD aBlock[6];

  v2 = *v1;
  v7[2] = a1;
  v7[4] = v2;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in AnchoringComponentBuilder.run(inputs:);
  *(_QWORD *)(v3 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_11;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOBuilderInputsPerformBlockSyncOnEngineQueue();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in AnchoringComponentBuilder.run(inputs:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t result;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  char Bool;
  void *v52;
  id v53;
  void *v54;
  char Float;
  id v56;
  id v57;
  void *v58;
  char v59;
  id v60;
  void *v61;
  char v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  char v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  void *v73;
  char v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  char v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t CFDataNoCopy;
  void *v92;
  void *v93;
  char v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  id v102;
  void *v103;
  char v104;
  id v105;
  void *v106;
  char v107;
  id v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  id v113;
  __int128 v114;
  void *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  void *v121;
  void *v122;
  char v123;
  id v124;
  void *v125;
  id v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v2 = Inputs.prim.getter();
  v3 = (void *)RIOPxrUsdObjectCopyName();
  v4 = (void *)RIOPxrTfTokenCopyString();
  v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v133 = v5;

  v6 = Prim.children.getter();
  v7 = v6;
  if (v6 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      v130 = v2;
      type metadata accessor for RIOPxrTfTokenRef(0);
      v2 = 4;
      while (1)
      {
        v9 = v2 - 4;
        if ((v7 & 0xC000000000000001) != 0)
        {
          v10 = MEMORY[0x22E2F57B8](v2 - 4, v7);
          v11 = v2 - 3;
          if (__OFADD__(v9, 1))
            goto LABEL_15;
        }
        else
        {
          v10 = swift_retain();
          v11 = v2 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        v12 = v10;
        v13 = (void *)RIOPxrUsdObjectCopyName();
        if (one-time initialization token for descriptorName != -1)
          swift_once();
        v14 = (void *)static AnchoringComponentBuilder.descriptorName;
        lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
        v15 = v14;
        v16 = static _CFObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          v2 = v130;
          v17 = v12;
          goto LABEL_18;
        }
        swift_release();
        ++v2;
        if (v11 == v8)
        {
          swift_bridgeObjectRelease_n();
          v17 = 0;
          v2 = v130;
          goto LABEL_18;
        }
      }
    }
  }
  swift_bridgeObjectRelease_n();
  v17 = 0;
LABEL_18:
  if (one-time initialization token for infoID != -1)
    swift_once();
  v18 = (id)static AnchoringComponentBuilder.infoID;
  if ((RIOPxrUsdPrimHasAttribute() & 1) == 0)
  {
    swift_bridgeObjectRelease();

LABEL_45:
    AnchoringComponentBuilder.clear(inputs:)();
    swift_release();
    return swift_release();
  }
  v19 = (void *)RIOPxrUsdPrimCopyAttribute();
  v20 = RIOPxrUsdAttributeCopyValue();
  if (!v20)
  {
    swift_bridgeObjectRelease();

    goto LABEL_45;
  }
  v21 = (void *)v20;
  v22 = RIOPxrVtValueCopyToken();
  if (!v22)
  {
    swift_bridgeObjectRelease();

    goto LABEL_45;
  }
  v23 = (void *)v22;

  v24 = (void *)RIOPxrTfTokenCopyString();
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  if (v25 == 0xD000000000000014 && v27 == 0x800000022BD09300)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
LABEL_30:
  if (!Prim.parent.getter())
    goto LABEL_33;
  if ((RIOPxrUsdPrimEvaluateEntityOnExport() & 1) == 0)
  {
    if (one-time initialization token for anchoringComponent != -1)
      swift_once();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_22BD0C5C0;
    v37 = (void *)RIOPxrUsdObjectCopyPath();
    v38 = (void *)RIOPxrSdfPathCopyString();
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v41 = v40;

    v42 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v36 + 56) = MEMORY[0x24BEE0D00];
    v43 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v36 + 32) = v39;
    *(_QWORD *)(v36 + 40) = v41;
    *(_QWORD *)(v36 + 96) = v42;
    *(_QWORD *)(v36 + 104) = v43;
    *(_QWORD *)(v36 + 64) = v43;
    *(_QWORD *)(v36 + 72) = v129;
    *(_QWORD *)(v36 + 80) = v133;
    os_log(_:dso:log:type:_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_release();
LABEL_33:
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v29 = static EntityBuilder.OutputName;
  v30 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v29, v30, &v136);
  if (!*((_QWORD *)&v137 + 1))
  {
    outlined destroy of Any?((uint64_t)&v136);
    goto LABEL_51;
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    if (one-time initialization token for anchoringComponent != -1)
      swift_once();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_22BD0C360;
    *(_QWORD *)(v44 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v44 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v44 + 32) = v129;
    *(_QWORD *)(v44 + 40) = v133;
    os_log(_:dso:log:type:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((RIOPxrUsdPrimIsActive() & 1) == 0)
  {
    AnchoringComponentBuilder.clear(inputs:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  if (one-time initialization token for typePropertyName != -1)
    swift_once();
  *(_QWORD *)&v136 = static AnchoringComponentBuilder.typePropertyName;
  v31 = (id)static AnchoringComponentBuilder.typePropertyName;
  v32 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v17);

  if (!v32 || (v33 = (void *)RIOPxrVtValueCopyToken(), v32, !v33))
  {
    if (String.count.getter() < 1)
      v34 = (id)RIOPxrTfTokenEmpty();
    else
      v34 = (id)RIOPxrTfTokenCreateWithCString();
    v33 = v34;
  }
  v45 = v2;
  __AssetRef.__as<A>(_:)();
  REAnchoringComponentGetComponentType();
  v46 = REEntityGetOrAddComponentByClass();
  swift_beginAccess();
  v47 = objc_getAssociatedObject(a2, &static BuilderAssociatedKeys.CoreReference);
  result = swift_endAccess();
  if (v47)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v144, &v136);
    type metadata accessor for RIOBuilderRef(0);
    swift_dynamicCast();
    RIOBuilderAddComponent();

    if (one-time initialization token for isRequiredPropertyName != -1)
      swift_once();
    v48 = (void *)static AnchoringComponentBuilder.isRequiredPropertyName;
    *(_QWORD *)&v136 = static AnchoringComponentBuilder.isRequiredPropertyName;
    swift_retain();
    v49 = v48;
    v50 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v45);

    swift_release();
    if (v50)
    {
      LOBYTE(v136) = 0;
      Bool = RIOPxrVtValueGetBool();

      if ((Bool & 1) != 0)
        REAnchoringComponentSetIsRequired();
    }
    if (one-time initialization token for scaleFactorPropertyName != -1)
      swift_once();
    v52 = (void *)static AnchoringComponentBuilder.scaleFactorPropertyName;
    *(_QWORD *)&v136 = static AnchoringComponentBuilder.scaleFactorPropertyName;
    swift_retain();
    v53 = v52;
    v54 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v45);

    swift_release();
    if (v54)
    {
      LODWORD(v136) = 0;
      Float = RIOPxrVtValueGetFloat();

      if ((Float & 1) != 0)
        REAnchoringComponentSetScaleFactor();
    }
    v56 = v33;
    if (String.count.getter() < 1)
      v57 = (id)RIOPxrTfTokenEmpty();
    else
      v57 = (id)RIOPxrTfTokenCreateWithCString();
    v58 = v57;
    type metadata accessor for RIOPxrTfTokenRef(0);
    lazy protocol witness table accessor for type RIOPxrTfTokenRef and conformance RIOPxrTfTokenRef();
    v59 = static _CFObject.== infix(_:_:)();

    if ((v59 & 1) != 0)
      goto LABEL_73;
    if (String.count.getter() < 1)
      v60 = (id)RIOPxrTfTokenEmpty();
    else
      v60 = (id)RIOPxrTfTokenCreateWithCString();
    v61 = v60;
    v62 = static _CFObject.== infix(_:_:)();

    if ((v62 & 1) != 0)
    {

      if (one-time initialization token for transformPropertyName != -1)
        swift_once();
      *(_QWORD *)&v136 = static AnchoringComponentBuilder.transformPropertyName;
      v63 = (id)static AnchoringComponentBuilder.transformPropertyName;
      v64 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v17);

      if (v64)
      {
        v142 = 0u;
        v143 = 0u;
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        RIOPxrVtValueGetMatrix4d();

      }
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorTransform();
      goto LABEL_173;
    }
    if (String.count.getter() < 1)
      v65 = (id)RIOPxrTfTokenEmpty();
    else
      v65 = (id)RIOPxrTfTokenCreateWithCString();
    v66 = v65;
    v67 = static _CFObject.== infix(_:_:)();

    if ((v67 & 1) != 0)
    {

      if (one-time initialization token for alignmentPropertyName != -1)
        swift_once();
      *(_QWORD *)&v136 = static AnchoringComponentBuilder.alignmentPropertyName;
      v68 = (id)static AnchoringComponentBuilder.alignmentPropertyName;
      v69 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v17);

      if (!v69 || (v70 = (void *)RIOPxrVtValueCopyToken(), v69, !v70))
      {
        if (String.count.getter() < 1)
          v71 = (id)RIOPxrTfTokenEmpty();
        else
          v71 = (id)RIOPxrTfTokenCreateWithCString();
        v70 = v71;
      }
      v79 = v70;
      if (String.count.getter() < 1)
        v80 = (id)RIOPxrTfTokenEmpty();
      else
        v80 = (id)RIOPxrTfTokenCreateWithCString();
      v81 = v80;
      v82 = static _CFObject.== infix(_:_:)();

      if ((v82 & 1) != 0)
      {

      }
      else
      {
        if (String.count.getter() < 1)
          v83 = (id)RIOPxrTfTokenEmpty();
        else
          v83 = (id)RIOPxrTfTokenCreateWithCString();
        v96 = v83;
        static _CFObject.== infix(_:_:)();

      }
      if (one-time initialization token for classificationPropertyName != -1)
        swift_once();
      *(_QWORD *)&v136 = static AnchoringComponentBuilder.classificationPropertyName;
      v97 = (id)static AnchoringComponentBuilder.classificationPropertyName;
      v98 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v17);

      if (!v98 || (v99 = (void *)RIOPxrVtValueCopyToken(), v98, !v99))
      {
        if (String.count.getter() < 1)
          v100 = (id)RIOPxrTfTokenEmpty();
        else
          v100 = (id)RIOPxrTfTokenCreateWithCString();
        v99 = v100;
      }
      v134 = v17;
      v101 = v99;
      if (String.count.getter() < 1)
        v102 = (id)RIOPxrTfTokenEmpty();
      else
        v102 = (id)RIOPxrTfTokenCreateWithCString();
      v103 = v102;
      v104 = static _CFObject.== infix(_:_:)();

      if ((v104 & 1) != 0)
        goto LABEL_162;
      v105 = String.count.getter() < 1
           ? (id)RIOPxrTfTokenEmpty()
           : (id)RIOPxrTfTokenCreateWithCString();
      v106 = v105;
      v107 = static _CFObject.== infix(_:_:)();

      if ((v107 & 1) != 0)
        goto LABEL_162;
      v108 = String.count.getter() < 1
           ? (id)RIOPxrTfTokenEmpty()
           : (id)RIOPxrTfTokenCreateWithCString();
      v111 = v108;
      v112 = static _CFObject.== infix(_:_:)();

      if ((v112 & 1) != 0
        || (String.count.getter() < 1
          ? (v113 = (id)RIOPxrTfTokenEmpty())
          : (v113 = (id)RIOPxrTfTokenCreateWithCString()),
            v122 = v113,
            v123 = static _CFObject.== infix(_:_:)(),
            v122,
            (v123 & 1) != 0))
      {
LABEL_162:

      }
      else
      {
        if (String.count.getter() < 1)
          v124 = (id)RIOPxrTfTokenEmpty();
        else
          v124 = (id)RIOPxrTfTokenCreateWithCString();
        v125 = v124;
        static _CFObject.== infix(_:_:)();

      }
      if (one-time initialization token for boundsPropertyName != -1)
        swift_once();
      *(_QWORD *)&v136 = static AnchoringComponentBuilder.boundsPropertyName;
      v126 = (id)static AnchoringComponentBuilder.boundsPropertyName;
      v127 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v134);

      if (v127)
      {
        *(_QWORD *)&v136 = 0;
        RIOPxrVtValueGetFloat2();

      }
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorAlignment();
      REAnchoringComponentSetDescriptorClassification();
      REAnchoringComponentSetDescriptorBounds();

      goto LABEL_172;
    }
    if (String.count.getter() < 1)
      v72 = (id)RIOPxrTfTokenEmpty();
    else
      v72 = (id)RIOPxrTfTokenCreateWithCString();
    v73 = v72;
    v74 = static _CFObject.== infix(_:_:)();

    if ((v74 & 1) == 0)
    {
      if (String.count.getter() < 1)
        v78 = (id)RIOPxrTfTokenEmpty();
      else
        v78 = (id)RIOPxrTfTokenCreateWithCString();
      v93 = v78;
      v94 = static _CFObject.== infix(_:_:)();

      if ((v94 & 1) == 0)
      {
        if (String.count.getter() < 1)
          v95 = (id)RIOPxrTfTokenEmpty();
        else
          v95 = (id)RIOPxrTfTokenCreateWithCString();
        v109 = v95;
        v110 = static _CFObject.== infix(_:_:)();

        if ((v110 & 1) == 0)
          goto LABEL_174;
        goto LABEL_74;
      }
LABEL_73:

LABEL_74:
      REAnchoringComponentSetDescriptorType();
LABEL_173:
      MEMORY[0x22E2F5E0C](v46);
LABEL_174:

      swift_release();
      swift_release();
      result = swift_release();
      a2[17] = 1;
      return result;
    }

    if (one-time initialization token for resourcePathPropertyName != -1)
      swift_once();
    *(_QWORD *)&v136 = static AnchoringComponentBuilder.resourcePathPropertyName;
    v75 = (id)static AnchoringComponentBuilder.resourcePathPropertyName;
    v76 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v17);

    if (v76)
    {
      v77 = (void *)RIOPxrVtValueCopyAssetPath();

    }
    else
    {
      v77 = 0;
    }
    if (one-time initialization token for physicalWidthPropertyName != -1)
      swift_once();
    *(_QWORD *)&v136 = static AnchoringComponentBuilder.physicalWidthPropertyName;
    v84 = (id)static AnchoringComponentBuilder.physicalWidthPropertyName;
    v85 = (void *)specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)((uint64_t)&v136, v17);

    if (v85)
    {
      LODWORD(v136) = 0;
      RIOPxrVtValueGetFloat();

    }
    REAnchoringComponentSetDescriptorType();
    if (!v77)
      goto LABEL_173;
    v79 = v77;
    v86 = (void *)RIOPxrSdfAssetPathResolvedPathCopyString();
    v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v89 = v88;

    String.utf8CString.getter();
    v90 = (void *)RIOPxrArAssetCreate();
    swift_release();
    if (!v90)
    {
      swift_bridgeObjectRelease();

LABEL_172:
      goto LABEL_173;
    }
    CFDataNoCopy = RIOPxrArAssetCreateCFDataNoCopy();
    if (!CFDataNoCopy
      || (v92 = (void *)CFDataNoCopy,
          v136 = xmmword_22BD0F140,
          static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
          v92,
          *((_QWORD *)&v136 + 1) >> 60 == 15))
    {

      swift_bridgeObjectRelease();
      goto LABEL_173;
    }
    v132 = v90;
    v114 = v136;
    specialized static CGImageRef.image(with:)(v136, *((uint64_t *)&v136 + 1));
    v128 = v115;
    if (!v115)
    {
      swift_bridgeObjectRelease();

      outlined consume of Data?(v114, *((unint64_t *)&v114 + 1));
LABEL_177:

      goto LABEL_173;
    }
    type metadata accessor for __USDARReferenceProvidingPlugin();
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.assetService.getter();
    swift_release();
    static __USDARReferenceProvidingPlugin.instance(for:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v136);
    *(_QWORD *)&v136 = v87;
    *((_QWORD *)&v136 + 1) = v89;
    *(_QWORD *)&v144 = 91;
    *((_QWORD *)&v144 + 1) = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v116 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
    result = swift_bridgeObjectRelease();
    if (v116[2])
    {
      v117 = v116[4];
      v118 = v116[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v136 = v117;
      *((_QWORD *)&v136 + 1) = v118;
      *(_QWORD *)&v144 = 47;
      *((_QWORD *)&v144 + 1) = 0xE100000000000000;
      v119 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v119 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        dispatch thunk of __USDARReferenceProvidingPlugin.createSchemePrefix(with:)();
        swift_bridgeObjectRelease();
        v120 = v79;
        v121 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REAnchoringComponentSetDescriptorResourceGroup();
        swift_release();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REAnchoringComponentSetDescriptorResourceName();
        swift_release();
        swift_release();

        outlined consume of Data?(v114, *((unint64_t *)&v114 + 1));
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();

        outlined consume of Data?(v114, *((unint64_t *)&v114 + 1));
      }
      goto LABEL_177;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnchoringComponentBuilder.clear(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  swift_bridgeObjectRetain();
  Inputs.subscript.getter(v2, v1, &v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for EntityProxy();
  if ((swift_dynamicCast() & 1) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 17) & 1) == 0)
    return swift_release();
  __AssetRef.__as<A>(_:)();
  REAnchoringComponentGetComponentType();
  REEntityRemoveComponentByClass();
  result = swift_release();
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

uint64_t AnchoringComponentBuilder.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnchoringComponentBuilder()
{
  return objc_opt_self();
}

uint64_t specialized AnchoringComponentBuilder.stageSubscription.getter()
{
  id v0;
  _QWORD *v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  if (one-time initialization token for realityKitComponentTypeName != -1)
    swift_once();
  v9 = static AnchoringComponentBuilder.realityKitComponentTypeName;
  v0 = (id)static AnchoringComponentBuilder.realityKitComponentTypeName;
  v1 = specialized TypeNamePrimDirtyState.__allocating_init(typeName:)((uint64_t *)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C380;
  *(_QWORD *)(inited + 32) = v1;
  v9 = inited;
  specialized Array._endMutation()();
  v3 = v9;
  swift_retain();
  v4 = specialized static PrimDirtyStateBuilder.buildBlock(_:)(v3);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for StageDirtyState();
  swift_allocObject();
  v5 = StageDirtyState.init(stageMetadataContainsAnyOf:primsContainAnyOf:core:)(MEMORY[0x24BEE4B08], v4, 0);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C380;
  *(_QWORD *)(v6 + 32) = v5;
  v9 = v6;
  specialized Array._endMutation()();
  v7 = specialized static StageDirtyStateBuilder.buildBlock(_:)(v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized AnchoringComponentBuilder.inputDescriptors()()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputDescriptor>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C5C0;
  if (one-time initialization token for OutputName != -1)
    swift_once();
  v2 = static EntityBuilder.OutputName;
  v1 = *(_QWORD *)algn_255BED398;
  v3 = one-time initialization token for OutputIdentifier;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v5 = static EntityBuilder.OutputIdentifier;
  v4 = *(_QWORD *)algn_255BFA2C8;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_BYTE *)(inited + 80) = 112;
  swift_bridgeObjectRetain();
  if (String.count.getter() < 1)
    v6 = (id)RIOPxrTfTokenEmpty();
  else
    v6 = (id)RIOPxrTfTokenCreateWithCString();
  *(_QWORD *)(inited + 88) = 0xD000000000000010;
  *(_QWORD *)(inited + 96) = 0x800000022BD092E0;
  *(_QWORD *)(inited + 104) = 0xD000000000000020;
  *(_QWORD *)(inited + 112) = 0x800000022BD07090;
  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 128) = 1;
  *(_BYTE *)(inited + 136) = 32;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v8 = v7;
  swift_setDeallocating();
  swift_arrayDestroy();
  return v8;
}

uint64_t partial apply for closure #1 in AnchoringComponentBuilder.run(inputs:)()
{
  uint64_t v0;

  return closure #1 in AnchoringComponentBuilder.run(inputs:)(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_22BC95A9C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t specialized AnchoringComponentBuilder.getAttribute(named:fromPrim:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t EmptyValue;

  if (!a2)
    return 0;
  if (!RIOPxrUsdPrimHasAttribute())
  {
    lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
    swift_willThrowTypedImpl();
    outlined consume of Result<AnyAttribute, Object.Error>(0, 1);
    return 0;
  }
  v2 = RIOPxrUsdPrimCopyAttribute();
  type metadata accessor for AnyAttribute();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = v2;
  EmptyValue = RIOPxrUsdAttributeCopyValue();
  if (!EmptyValue)
    EmptyValue = RIOPxrVtValueCreateEmptyValue();
  outlined consume of Result<AnyAttribute, Object.Error>(v3, 0);
  return EmptyValue;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.AtEnd.getter()
{
  return 0xFFFFFFFFLL;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.Same.getter()
{
  return 4294967294;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;

  v0 = (id)RIOPxrSdfNamespaceEditCopyCurrentPath();
  v1 = (void *)RIOPxrSdfPathCopyString();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = v2;
  v3._countAndFlagsBits = 540945696;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  v4 = (id)RIOPxrSdfNamespaceEditCopyNewPath();
  v5 = (void *)RIOPxrSdfPathCopyString();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  RIOPxrSdfNamespaceEditGetIndex();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t SceneDescriptionFoundations.NamespaceEdit.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = SceneDescriptionFoundations.NamespaceEdit.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000010;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.currentPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCopyCurrentPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.newPath.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCopyNewPath();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.index.getter()
{
  return RIOPxrSdfNamespaceEditGetIndex();
}

uint64_t SceneDescriptionFoundations.NamespaceEdit.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCreateEmpty();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.NamespaceEdit.init(currentPath:newPath:index:)(void **a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *a2;
  v6 = RIOPxrSdfNamespaceEditCreateFromPaths();

  *a3 = v6;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.remove(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCreateRemove();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.rename(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCreateRename();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.reorder(from:at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCreateReorder();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.reparent(from:to:at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCreateReparent();
  *a1 = result;
  return result;
}

uint64_t static SceneDescriptionFoundations.NamespaceEdit.reparentAndRename(from:to:with:at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfNamespaceEditCreateReparentAndRename();
  *a1 = result;
  return result;
}

uint64_t SceneDescriptionFoundations.Layer.__allocating_init(tag:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Anonymous;

  v3 = swift_allocObject();
  if (a2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  Anonymous = RIOPxrSdfLayerCreateAnonymous();
  swift_unknownObjectRelease();
  *(_QWORD *)(v3 + 16) = Anonymous;
  return v3;
}

uint64_t SceneDescriptionFoundations.Layer.init(tag:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Anonymous;

  if (a2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  Anonymous = RIOPxrSdfLayerCreateAnonymous();
  swift_unknownObjectRelease();
  *(_QWORD *)(v2 + 16) = Anonymous;
  return v2;
}

uint64_t SceneDescriptionFoundations.Layer.__allocating_init(relativeTo:identifier:)(uint64_t a1)
{
  swift_allocObject();
  return SceneDescriptionFoundations.Layer.init(relativeTo:identifier:)(a1);
}

uint64_t SceneDescriptionFoundations.Layer.init(relativeTo:identifier:)(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t RelativeToLayer;

  if (a1)
    v2 = *(id *)(a1 + 16);
  else
    v2 = 0;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  RelativeToLayer = RIOPxrSdfLayerCreateOrFindRelativeToLayer();

  swift_release();
  swift_release();
  if (RelativeToLayer)
  {
    *(_QWORD *)(v1 + 16) = RelativeToLayer;
  }
  else
  {
    type metadata accessor for SceneDescriptionFoundations.Layer();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

uint64_t SceneDescriptionFoundations.Layer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SceneDescriptionFoundations.Layer.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneDescriptionFoundations.Layer()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrSdfLayerCopyIdentifier();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t SceneDescriptionFoundations.Layer.description.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)RIOPxrSdfLayerCopyIdentifier();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SceneDescriptionFoundations.Layer()
{
  return SceneDescriptionFoundations.Layer.debugDescription.getter();
}

uint64_t SceneDescriptionFoundations.Layer.debugDescription.getter()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;

  v0 = (void *)RIOPxrSdfLayerCopyIdentifier();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x203A726579614C3CLL;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.identifier()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()((uint64_t (*)(_QWORD))MEMORY[0x24BE269B0]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t SceneDescriptionFoundations.Layer.defaultPrim.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerCopyDefaultPrim();
  *a1 = result;
  return result;
}

void key path setter for SceneDescriptionFoundations.Layer.defaultPrim : SceneDescriptionFoundations.Layer(id *a1)
{
  id v1;

  v1 = *a1;
  if (RIOPxrTfTokenIsEmpty())
  {

    RIOPxrSdfLayerClearDefaultPrim();
  }
  else
  {
    RIOPxrSdfLayerSetDefaultPrim();

  }
}

void SceneDescriptionFoundations.Layer.defaultPrim.setter(id *a1)
{
  id v1;

  v1 = *a1;
  if (RIOPxrTfTokenIsEmpty())
  {

    RIOPxrSdfLayerClearDefaultPrim();
  }
  else
  {
    RIOPxrSdfLayerSetDefaultPrim();

  }
}

void (*SceneDescriptionFoundations.Layer.defaultPrim.modify(uint64_t *a1))(void **a1, char a2)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrSdfLayerCopyDefaultPrim();
  return SceneDescriptionFoundations.Layer.defaultPrim.modify;
}

void SceneDescriptionFoundations.Layer.defaultPrim.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    if (RIOPxrTfTokenIsEmpty())
    {

      RIOPxrSdfLayerClearDefaultPrim();
    }
    else
    {
      RIOPxrSdfLayerSetDefaultPrim();

    }
  }
  else
  {
    v3 = v2;
    if (RIOPxrTfTokenIsEmpty())
    {

      RIOPxrSdfLayerClearDefaultPrim();
      return;
    }
    RIOPxrSdfLayerSetDefaultPrim();
  }

}

uint64_t SceneDescriptionFoundations.Layer.autoPlay.getter()
{
  id v0;
  void *v1;
  id v2;
  char Bool;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  v2 = (id)RIOPxrSdfLayerGetMetadata();

  if (v2 && (Bool = RIOPxrVtValueGetBool(), v2, (Bool & 1) != 0))
    return 0;
  else
    return 0;
}

void SceneDescriptionFoundations.Layer.autoPlay.setter()
{
  id v0;
  void *v1;
  id v2;

  if (String.count.getter() < 1)
    v0 = (id)RIOPxrTfTokenEmpty();
  else
    v0 = (id)RIOPxrTfTokenCreateWithCString();
  v1 = v0;
  v2 = (id)RIOPxrVtValueCreateWithBool();
  RIOPxrSdfLayerSetMetadata();

}

void (*SceneDescriptionFoundations.Layer.autoPlay.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = SceneDescriptionFoundations.Layer.autoPlay.getter() & 1;
  return SceneDescriptionFoundations.Layer.autoPlay.modify;
}

void SceneDescriptionFoundations.Layer.autoPlay.modify(uint64_t a1, char a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v3 = String.count.getter();
  if ((a2 & 1) != 0)
  {
    if (v3 < 1)
      goto LABEL_6;
  }
  else if (v3 < 1)
  {
LABEL_6:
    v4 = (id)RIOPxrTfTokenEmpty();
    goto LABEL_7;
  }
  v4 = (id)RIOPxrTfTokenCreateWithCString();
LABEL_7:
  v6 = v4;
  v5 = (void *)RIOPxrVtValueCreateWithBool();
  RIOPxrSdfLayerSetMetadata();

}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.isEmpty()()
{
  return RIOPxrSdfLayerIsEmpty();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.isAnonymous()()
{
  return RIOPxrSdfLayerIsAnonymous();
}

uint64_t SceneDescriptionFoundations.Layer.transferContent(from:)()
{
  return RIOPxrSdfLayerTransferContent();
}

uint64_t SceneDescriptionFoundations.Layer.transferContent(to:)()
{
  return RIOPxrSdfLayerTransferContent();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.reload(force:)(Swift::Bool force)
{
  return RIOPxrSdfLayerReload();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.save(force:)(Swift::Bool force)
{
  return RIOPxrSdfLayerSave();
}

uint64_t SceneDescriptionFoundations.Layer.export(to:comment:fileFormatArguments:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, NSURL *a3@<X8>)
{
  void *v5;
  void *v6;
  NSDictionary v7;
  uint64_t v8;

  URL._bridgeToObjectiveC()(a3);
  v6 = v5;
  if (!a2)
  {
    v7.super.isa = 0;
    if (!a1)
      goto LABEL_5;
    goto LABEL_3;
  }
  v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a1)
LABEL_3:
    String.utf8CString.getter();
LABEL_5:
  v8 = RIOPxrSdfLayerExportWithURL();

  swift_unknownObjectRelease();
  return v8;
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.export(to:comment:fileFormatArguments:)(Swift::String to, Swift::String_optional comment, Swift::OpaquePointer_optional fileFormatArguments)
{
  void *object;
  NSDictionary v4;
  char v5;

  object = comment.value._object;
  if (fileFormatArguments.value._rawValue)
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v4.super.isa = 0;
  String.utf8CString.getter();
  if (object)
    String.utf8CString.getter();
  v5 = RIOPxrSdfLayerExportWithFilePath();

  swift_release();
  swift_unknownObjectRelease();
  return v5;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.toString()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v0 = RIOPxrSdfLayerCopyExportString();
  if (v0)
  {
    v1 = (void *)v0;
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v3;

  }
  else
  {
    v2 = 0;
    v4 = 0xE000000000000000;
  }
  v5 = v2;
  v6 = (void *)v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clear()()
{
  RIOPxrSdfLayerClear();
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.comment()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE26978]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.setComment(to:)(Swift::String to)
{
  SceneDescriptionFoundations.Layer.setComment(to:)(to._countAndFlagsBits, (uint64_t)to._object, MEMORY[0x24BE26AE8]);
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.setIdentifier(_:)(Swift::String a1)
{
  SceneDescriptionFoundations.Layer.setComment(to:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x24BE26B28]);
}

uint64_t SceneDescriptionFoundations.Layer.setComment(to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = String.utf8CString.getter();
  a3(v5, v6 + 32);
  return swift_release();
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.displayName()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE26990]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.assetName()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE26960]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.fileExtension()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE269A8]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.repositoryPath()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE269C8]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static SceneDescriptionFoundations.Layer.createIdentifier(with:options:)()
{
  Class isa;
  void *Identifier;
  uint64_t v2;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  Identifier = (void *)RIOPxrSdfLayerCreateIdentifier();

  swift_release();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.absolutePath(relativeTo:)(Swift::String relativeTo)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  String.utf8CString.getter();
  v1 = (void *)RIOPxrSdfLayerCopyAbsolutePath();
  swift_release();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall SceneDescriptionFoundations.Layer.realPath()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = SceneDescriptionFoundations.Layer.identifier()(MEMORY[0x24BE269C0]);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t SceneDescriptionFoundations.Layer.identifier()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)a1(*(_QWORD *)(v1 + 16));
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void SceneDescriptionFoundations.Layer.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;

  v4 = RIOPxrSdfLayerCopyCustomLayerDataValue();
  if (v4)
  {
    v5 = (id)v4;
    RIOPxrVtValueRef.mapUSDValue<A>()(a1, a2);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  }
}

void key path getter for SceneDescriptionFoundations.Layer.subscript<A>(customLayerDataKey:) : <A>SceneDescriptionFoundations.LayerA(id *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id v5;

  v4 = *(uint64_t *)((char *)a1 + a2 - 16);
  v5 = *a1;
  SceneDescriptionFoundations.Layer.subscript.getter(v4, a3);

}

uint64_t key path setter for SceneDescriptionFoundations.Layer.subscript<A>(customLayerDataKey:) : <A>SceneDescriptionFoundations.LayerA(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  void *v17;

  v6 = *(uint64_t *)((char *)a3 + a4 - 16);
  v7 = *(uint64_t *)((char *)a3 + a4 - 8);
  v8 = type metadata accessor for Optional();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - v10;
  v12 = *a3;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v16 - v10, a1, v9);
  v17 = v12;
  v14 = v12;
  return SceneDescriptionFoundations.Layer.subscript.setter((uint64_t)v11, &v17, v6, v7);
}

uint64_t SceneDescriptionFoundations.Layer.subscript.setter(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v20;
  uint64_t v21;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v11, v8);
    RIOPxrSdfLayerClearCustomLayerData();

    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
    v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    RIOPxrSdfLayerSetCustomLayerData();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a3);
  }
}

void (*SceneDescriptionFoundations.Layer.subscript.modify(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  id v15;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Optional();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v14 = *a2;
  v9[6] = v13;
  v9[7] = v14;
  v15 = v14;
  SceneDescriptionFoundations.Layer.subscript.getter(a3, (uint64_t)v13);
  return SceneDescriptionFoundations.Layer.subscript.modify;
}

void SceneDescriptionFoundations.Layer.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (*a1)[7];
  v5 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v6 = v2[3];
    v7 = v2[4];
    v8 = v2[1];
    v9 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[5], v3, v6);
    v12 = v4;
    SceneDescriptionFoundations.Layer.subscript.setter((uint64_t)v5, (void **)&v12, v9, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  }
  else
  {
    v10 = v2[1];
    v11 = *v2;
    v12 = (*a1)[7];
    SceneDescriptionFoundations.Layer.subscript.setter((uint64_t)v3, (void **)&v12, v11, v10);
  }
  free(v3);
  free(v5);
  free(v2);
}

uint64_t SceneDescriptionFoundations.Layer.subLayerPaths()()
{
  void *v0;

  v0 = (void *)RIOPxrSdfLayerCopySubLayerPaths();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4AF8];
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.setSubLayerPaths(paths:)(Swift::OpaquePointer paths)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  RIOPxrSdfLayerSetSubLayerPathsWithStrings();

}

Swift::Int __swiftcall SceneDescriptionFoundations.Layer.numSubLayerPaths()()
{
  return RIOPxrSdfLayerGetNumSubLayerPaths();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.canApplyEdits(with:)(Swift::OpaquePointer with)
{
  return SceneDescriptionFoundations.Layer.canApplyEdits(with:)((uint64_t)with._rawValue, MEMORY[0x24BE268E8]);
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.applyEdits(with:)(Swift::OpaquePointer with)
{
  return SceneDescriptionFoundations.Layer.canApplyEdits(with:)((uint64_t)with._rawValue, MEMORY[0x24BE268E0]);
}

uint64_t SceneDescriptionFoundations.Layer.canApplyEdits(with:)(uint64_t a1, uint64_t (*a2)(uint64_t, Class))
{
  uint64_t v2;
  uint64_t v4;
  Class isa;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9RealityIO16ToolsFoundationsO5TokenVG_So08RIOPxrTfH3Refas5NeverOTg503_s9d4IO16fg2O5h18V7vtValue4fromSo08I83VtG3RefaSayAEG_tFZSo0i2TfeK0aAEcfu_33_1208ebe0c1611b0e36169838b3b02464AeLTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for RIOPxrSdfNamespaceEditRef(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = a2(v4, isa);

  return v6;
}

uint64_t SceneDescriptionFoundations.Layer.flattenSubGraphInPlace(subGraph:)()
{
  return RIOPxrSdfLayerFlattenSubGraphInPlace();
}

uint64_t SceneDescriptionFoundations.Layer.copyPathToLayer(from:to:on:)()
{
  return RIOPxrUsdUtilsSdfCopySpec();
}

uint64_t SceneDescriptionFoundations.Layer.copyPathToLayer(from:to:on:includingDescendants:)()
{
  return RIOPxrUsdUtilsSdfCopySpec();
}

unint64_t one-time initialization function for replicationMessagePublishers()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static SceneDescriptionFoundations.Layer.replicationMessagePublishers = result;
  return result;
}

uint64_t @objc closure #1 in SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.init(layerBase:)(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  swift_retain();
  v4 = specialized Data.init(bytes:count:)(a1, a2);
  v6 = v5;
  PassthroughSubject.send(_:)();
  swift_release();
  return outlined consume of Data._Representation(v4, v6);
}

uint64_t SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.deinit()
{
  uint64_t v0;

  RIOPxrSdfLayerReplicationStopSending();
  swift_release();

  return v0;
}

uint64_t SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.__deallocating_deinit()
{
  uint64_t v0;

  RIOPxrSdfLayerReplicationStopSending();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.receive<A>(subscriber:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  swift_retain();
  PassthroughSubject.receive<A>(subscriber:)();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance SceneDescriptionFoundations.Layer.ReplicationMessagePublisher(uint64_t a1)
{
  return SceneDescriptionFoundations.Layer.ReplicationMessagePublisher.receive<A>(subscriber:)(a1);
}

uint64_t SceneDescriptionFoundations.Layer.replicationMessagePublisher.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  if (one-time initialization token for replicationMessagePublishers != -1)
    swift_once();
  v1 = *(void **)(v0 + 16);
  swift_beginAccess();
  v2 = static SceneDescriptionFoundations.Layer.replicationMessagePublishers;
  v3 = v1;
  v4 = specialized Dictionary.subscript.getter(v3, v2);

  swift_endAccess();
  if (!v4)
  {
    type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher();
    v4 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Data, Never>);
    swift_allocObject();
    v5 = v3;
    *(_QWORD *)(v4 + 16) = PassthroughSubject.init()();
    *(_QWORD *)(v4 + 24) = v5;
    RIOPxrSdfLayerReplicationStartSending();
    swift_beginAccess();
    v6 = v5;
    v7 = swift_retain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v7, v6);
    swift_endAccess();

  }
  return v4;
}

void SceneDescriptionFoundations.Layer.receiveReplicationMessage(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22BC97418()
{
  return RIOPxrSdfLayerReplicationReceive();
}

uint64_t SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(a1, a2, a3, MEMORY[0x24BE278E0]);
}

uint64_t SceneDescriptionFoundations.Layer.exportToARKitUSDZ(at:firstLayerName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(a1, a2, a3, MEMORY[0x24BE278D8]);
}

uint64_t SceneDescriptionFoundations.Layer.exportToUSDZ(at:firstLayerName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v26 - v13, a1, v7, v12);
  if (a3)
  {
    v15 = *(void (**)(char *, uint64_t))(v8 + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    URL.deletingPathExtension()();
    v16 = URL.lastPathComponent.getter();
    v18 = v17;
    v15 = *(void (**)(char *, uint64_t))(v8 + 8);
    v15(v10, v7);
    v26[0] = v16;
    v26[1] = v18;
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 0x636473752ELL;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
  }
  v15(v14, v7);
  v20 = (void *)RIOPxrSdfLayerCopyIdentifier();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v21 = (void *)RIOPxrSdfAssetPathCreateFromCString();
  swift_release();
  URL.path.getter();
  v22 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v23 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v24 = a4(v21, v22 + 32, v23 + 32);

  swift_release();
  swift_release();
  return v24;
}

uint64_t SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  _QWORD v8[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:);
  *(_QWORD *)(v5 + 24) = v4;
  v8[4] = partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
  v8[5] = v5;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
  v8[3] = &block_descriptor_12;
  v6 = _Block_copy(v8);
  swift_retain();
  swift_release();
  RIOPxrUsdUtilsModifyAssetPaths();
  _Block_release(v6);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = a2(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x22E2F5278](v4, v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>)(uint64_t a1, void *a2)
{
  uint64_t (*v2)(void);
  id v3;
  uint64_t v4;

  v2 = *(uint64_t (**)(void))(a1 + 32);
  v3 = a2;
  v4 = v2();

  return v4;
}

uint64_t SceneDescriptionFoundations.Layer.colorConfiguration.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerCopyColorConfiguration();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Layer.colorConfiguration.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrSdfLayerSetColorConfiguration();

}

void (*SceneDescriptionFoundations.Layer.colorConfiguration.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrSdfLayerCopyColorConfiguration();
  return SceneDescriptionFoundations.Layer.colorConfiguration.modify;
}

void SceneDescriptionFoundations.Layer.colorConfiguration.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrSdfLayerSetColorConfiguration();

}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasColorConfiguration()()
{
  return RIOPxrSdfLayerHasColorConfiguration();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearColorConfiguration()()
{
  RIOPxrSdfLayerClearColorConfiguration();
}

uint64_t SceneDescriptionFoundations.Layer.colorManagementSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerCopyColorManagementSystem();
  *a1 = result;
  return result;
}

void SceneDescriptionFoundations.Layer.colorManagementSystem.setter(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrSdfLayerSetColorManagementSystem();

}

void (*SceneDescriptionFoundations.Layer.colorManagementSystem.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = *(_QWORD *)(v1 + 16);
  *a1 = RIOPxrSdfLayerCopyColorManagementSystem();
  return SceneDescriptionFoundations.Layer.colorManagementSystem.modify;
}

void SceneDescriptionFoundations.Layer.colorManagementSystem.modify(id *a1)
{
  id v1;

  v1 = *a1;
  RIOPxrSdfLayerSetColorManagementSystem();

}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasColorManagementSystem()()
{
  return RIOPxrSdfLayerHasColorManagementSystem();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearColorManagementSystem()()
{
  RIOPxrSdfLayerClearColorManagementSystem();
}

uint64_t SceneDescriptionFoundations.Layer.documentation.getter()
{
  void *v0;

  v0 = (void *)RIOPxrSdfLayerCopyDocumentation();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t SceneDescriptionFoundations.Layer.documentation.setter(uint64_t a1, uint64_t a2)
{
  return SceneDescriptionFoundations.Layer.documentation.setter(a1, a2, MEMORY[0x24BE26B00]);
}

uint64_t (*SceneDescriptionFoundations.Layer.documentation.modify(Swift::String *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v3;

  a1[1]._countAndFlagsBits = *(_QWORD *)(v1 + 16);
  v3 = (void *)RIOPxrSdfLayerCopyDocumentation();
  *a1 = String.init(_:)(v3);
  return SceneDescriptionFoundations.Layer.documentation.modify;
}

uint64_t SceneDescriptionFoundations.Layer.documentation.modify(uint64_t a1, char a2)
{
  return SceneDescriptionFoundations.Layer.documentation.modify(a1, a2, MEMORY[0x24BE26B00]);
}

uint64_t SceneDescriptionFoundations.Layer.startTimeCode.getter()
{
  return RIOPxrSdfLayerGetStartTimeCode();
}

uint64_t SceneDescriptionFoundations.Layer.startTimeCode.setter()
{
  return RIOPxrSdfLayerSetStartTimeCode();
}

uint64_t (*SceneDescriptionFoundations.Layer.startTimeCode.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrSdfLayerGetStartTimeCode();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.startTimeCode.modify;
}

uint64_t SceneDescriptionFoundations.Layer.startTimeCode.modify()
{
  return RIOPxrSdfLayerSetStartTimeCode();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasStartTimeCode()()
{
  return RIOPxrSdfLayerHasStartTimeCode();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearStartTimeCode()()
{
  RIOPxrSdfLayerClearStartTimeCode();
}

uint64_t SceneDescriptionFoundations.Layer.endTimeCode.getter()
{
  return RIOPxrSdfLayerGetEndTimeCode();
}

uint64_t SceneDescriptionFoundations.Layer.endTimeCode.setter()
{
  return RIOPxrSdfLayerSetEndTimeCode();
}

uint64_t (*SceneDescriptionFoundations.Layer.endTimeCode.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrSdfLayerGetEndTimeCode();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.endTimeCode.modify;
}

uint64_t SceneDescriptionFoundations.Layer.endTimeCode.modify()
{
  return RIOPxrSdfLayerSetEndTimeCode();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasEndTimeCode()()
{
  return RIOPxrSdfLayerHasEndTimeCode();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearEndTimeCode()()
{
  RIOPxrSdfLayerClearEndTimeCode();
}

uint64_t SceneDescriptionFoundations.Layer.timeCodesPerSecond.getter()
{
  return RIOPxrSdfLayerGetTimeCodesPerSecond();
}

uint64_t SceneDescriptionFoundations.Layer.timeCodesPerSecond.setter()
{
  return RIOPxrSdfLayerSetTimeCodesPerSecond();
}

uint64_t (*SceneDescriptionFoundations.Layer.timeCodesPerSecond.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrSdfLayerGetTimeCodesPerSecond();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.timeCodesPerSecond.modify;
}

uint64_t SceneDescriptionFoundations.Layer.timeCodesPerSecond.modify()
{
  return RIOPxrSdfLayerSetTimeCodesPerSecond();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasTimeCodesPerSecond()()
{
  return RIOPxrSdfLayerHasTimeCodesPerSecond();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearTimeCodesPerSecond()()
{
  RIOPxrSdfLayerClearTimeCodesPerSecond();
}

uint64_t SceneDescriptionFoundations.Layer.framesPerSecond.getter()
{
  return RIOPxrSdfLayerGetFramesPerSecond();
}

uint64_t SceneDescriptionFoundations.Layer.framesPerSecond.setter()
{
  return RIOPxrSdfLayerSetFramesPerSecond();
}

uint64_t (*SceneDescriptionFoundations.Layer.framesPerSecond.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = *(_QWORD *)(v1 + 16);
  RIOPxrSdfLayerGetFramesPerSecond();
  *a1 = v3;
  return SceneDescriptionFoundations.Layer.framesPerSecond.modify;
}

uint64_t SceneDescriptionFoundations.Layer.framesPerSecond.modify()
{
  return RIOPxrSdfLayerSetFramesPerSecond();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasFramesPerSecond()()
{
  return RIOPxrSdfLayerHasFramesPerSecond();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearFramesPerSecond()()
{
  RIOPxrSdfLayerClearFramesPerSecond();
}

uint64_t SceneDescriptionFoundations.Layer.framePrecision.getter()
{
  return RIOPxrSdfLayerGetFramePrecision();
}

uint64_t SceneDescriptionFoundations.Layer.framePrecision.setter()
{
  return RIOPxrSdfLayerSetFramePrecision();
}

uint64_t (*SceneDescriptionFoundations.Layer.framePrecision.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 8) = RIOPxrSdfLayerGetFramePrecision();
  return SceneDescriptionFoundations.Layer.framePrecision.modify;
}

uint64_t SceneDescriptionFoundations.Layer.framePrecision.modify()
{
  return RIOPxrSdfLayerSetFramePrecision();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasFramePrecision()()
{
  return RIOPxrSdfLayerHasFramePrecision();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearFramePrecision()()
{
  RIOPxrSdfLayerClearFramePrecision();
}

uint64_t SceneDescriptionFoundations.Layer.owner.getter()
{
  void *v0;

  v0 = (void *)RIOPxrSdfLayerCopyOwner();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t SceneDescriptionFoundations.Layer.owner.setter(uint64_t a1, uint64_t a2)
{
  return SceneDescriptionFoundations.Layer.documentation.setter(a1, a2, MEMORY[0x24BE26B38]);
}

uint64_t (*SceneDescriptionFoundations.Layer.owner.modify(Swift::String *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v3;

  a1[1]._countAndFlagsBits = *(_QWORD *)(v1 + 16);
  v3 = (void *)RIOPxrSdfLayerCopyOwner();
  *a1 = String.init(_:)(v3);
  return SceneDescriptionFoundations.Layer.owner.modify;
}

uint64_t SceneDescriptionFoundations.Layer.owner.modify(uint64_t a1, char a2)
{
  return SceneDescriptionFoundations.Layer.documentation.modify(a1, a2, MEMORY[0x24BE26B38]);
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasOwner()()
{
  return RIOPxrSdfLayerHasOwner();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearOwner()()
{
  RIOPxrSdfLayerClearOwner();
}

uint64_t SceneDescriptionFoundations.Layer.sessionOwner.getter()
{
  void *v0;

  v0 = (void *)RIOPxrSdfLayerCopySessionOwner();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v7 = String.utf8CString.getter();
  a5(v6, v7 + 32);
  return swift_release();
}

uint64_t SceneDescriptionFoundations.Layer.sessionOwner.setter(uint64_t a1, uint64_t a2)
{
  return SceneDescriptionFoundations.Layer.documentation.setter(a1, a2, MEMORY[0x24BE26B40]);
}

uint64_t SceneDescriptionFoundations.Layer.documentation.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  a3(v5, v6 + 32);
  return swift_release();
}

uint64_t (*SceneDescriptionFoundations.Layer.sessionOwner.modify(Swift::String *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v3;

  a1[1]._countAndFlagsBits = *(_QWORD *)(v1 + 16);
  v3 = (void *)RIOPxrSdfLayerCopySessionOwner();
  *a1 = String.init(_:)(v3);
  return SceneDescriptionFoundations.Layer.sessionOwner.modify;
}

uint64_t SceneDescriptionFoundations.Layer.sessionOwner.modify(uint64_t a1, char a2)
{
  return SceneDescriptionFoundations.Layer.documentation.modify(a1, a2, MEMORY[0x24BE26B40]);
}

uint64_t SceneDescriptionFoundations.Layer.documentation.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = String.utf8CString.getter();
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    a3(v8, v6 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    a3(v8, v7 + 32);
  }
  return swift_release();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasSessionOwner()()
{
  return RIOPxrSdfLayerHasSessionOwner();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearSessionOwner()()
{
  RIOPxrSdfLayerClearSessionOwner();
}

uint64_t SceneDescriptionFoundations.Layer.hasOwnedSubLayers.getter()
{
  return RIOPxrSdfLayerGetHasOwnedSubLayers();
}

uint64_t SceneDescriptionFoundations.Layer.hasOwnedSubLayers.setter()
{
  return RIOPxrSdfLayerSetHasOwnedSubLayers();
}

uint64_t (*SceneDescriptionFoundations.Layer.hasOwnedSubLayers.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = RIOPxrSdfLayerGetHasOwnedSubLayers();
  return SceneDescriptionFoundations.Layer.hasOwnedSubLayers.modify;
}

uint64_t SceneDescriptionFoundations.Layer.hasOwnedSubLayers.modify()
{
  return RIOPxrSdfLayerSetHasOwnedSubLayers();
}

Swift::Bool __swiftcall SceneDescriptionFoundations.Layer.hasCustomMetadata()()
{
  return RIOPxrSdfLayerHasCustomLayerMetaData();
}

Swift::Void __swiftcall SceneDescriptionFoundations.Layer.clearAllCustomMetadata()()
{
  RIOPxrSdfLayerClearAllCustomLayerMetaData();
}

uint64_t type metadata accessor for SceneDescriptionFoundations.Layer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher()
{
  return objc_opt_self();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, void *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaSet.count.getter();
  if (!__OFADD__(result, 1))
  {
    *v3 = specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RIOPxrSdfLayerRef, SceneDescriptionFoundations.Layer.ReplicationMessagePublisher>);
    v2 = static _DictionaryStorage.convert(_:capacity:)();
    v17 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for RIOPxrSdfLayerRef(0);
      do
      {
        swift_dynamicCast();
        type metadata accessor for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher();
        swift_dynamicCast();
        v2 = v17;
        v10 = *(_QWORD *)(v17 + 16);
        if (*(_QWORD *)(v17 + 24) <= v10)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v10 + 1, 1);
          v2 = v17;
        }
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef();
        _CFObject.hash(into:)();
        result = Hasher._finalize()();
        v4 = v2 + 64;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 64 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 64 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v11 = 0;
          v12 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v13 = v7 == v12;
            if (v7 == v12)
              v7 = 0;
            v11 |= v13;
            v14 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v14 == -1);
          v8 = __clz(__rbit64(~v14)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        v9 = 8 * v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v9) = v16;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v9) = v15;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaDictionary.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B00];
  }
  return v2;
}

uint64_t sub_22BC9848C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SceneDescriptionFoundations.Layer.modifyAssetPaths(modifyFunction:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_22BC984A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in SceneDescriptionFoundations.Layer.ReplicationMessagePublisher()
{
  return MEMORY[0x24BEE40A8];
}

uint64_t sub_22BC984F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerCopyDefaultPrim();
  *a1 = result;
  return result;
}

uint64_t sub_22BC98528@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SceneDescriptionFoundations.Layer.autoPlay.getter();
  *a1 = result & 1;
  return result;
}

void sub_22BC98554()
{
  SceneDescriptionFoundations.Layer.autoPlay.setter();
}

uint64_t sub_22BC98580()
{
  return 16;
}

__n128 sub_22BC9858C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22BC98598@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerCopyColorConfiguration();
  *a1 = result;
  return result;
}

uint64_t sub_22BC985C4()
{
  return RIOPxrSdfLayerSetColorConfiguration();
}

uint64_t sub_22BC985D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerCopyColorManagementSystem();
  *a1 = result;
  return result;
}

uint64_t sub_22BC98604()
{
  return RIOPxrSdfLayerSetColorManagementSystem();
}

uint64_t sub_22BC98618@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return keypath_get_12Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE26998], a2);
}

uint64_t sub_22BC98624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(a1, a2, a3, a4, MEMORY[0x24BE26B00]);
}

uint64_t sub_22BC98640@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrSdfLayerGetStartTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC9866C()
{
  return RIOPxrSdfLayerSetStartTimeCode();
}

uint64_t sub_22BC9867C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrSdfLayerGetEndTimeCode();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC986A8()
{
  return RIOPxrSdfLayerSetEndTimeCode();
}

uint64_t sub_22BC986B8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrSdfLayerGetTimeCodesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC986E4()
{
  return RIOPxrSdfLayerSetTimeCodesPerSecond();
}

uint64_t sub_22BC986F4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RIOPxrSdfLayerGetFramesPerSecond();
  *a1 = v3;
  return result;
}

uint64_t sub_22BC98720()
{
  return RIOPxrSdfLayerSetFramesPerSecond();
}

uint64_t sub_22BC98730@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerGetFramePrecision();
  *a1 = result;
  return result;
}

uint64_t sub_22BC9875C()
{
  return RIOPxrSdfLayerSetFramePrecision();
}

uint64_t sub_22BC98770@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return keypath_get_12Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE269B8], a2);
}

uint64_t sub_22BC9877C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(a1, a2, a3, a4, MEMORY[0x24BE26B38]);
}

uint64_t sub_22BC98798@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return keypath_get_12Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE269D0], a2);
}

uint64_t keypath_get_12Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, Swift::String *a3@<X8>)
{
  void *v4;
  uint64_t result;
  Swift::String v6;

  v4 = (void *)a2(*(_QWORD *)(*(_QWORD *)a1 + 16));
  v6 = String.init(_:)(v4);
  result = v6._countAndFlagsBits;
  *a3 = v6;
  return result;
}

uint64_t sub_22BC987D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SceneDescriptionFoundations.Layer.documentation : SceneDescriptionFoundations.Layer(a1, a2, a3, a4, MEMORY[0x24BE26B40]);
}

uint64_t sub_22BC987F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RIOPxrSdfLayerGetHasOwnedSubLayers();
  *a1 = result;
  return result;
}

uint64_t sub_22BC9881C()
{
  return RIOPxrSdfLayerSetHasOwnedSubLayers();
}

ValueMetadata *type metadata accessor for SceneDescriptionFoundations.NamespaceEdit()
{
  return &type metadata for SceneDescriptionFoundations.NamespaceEdit;
}

uint64_t method lookup function for SceneDescriptionFoundations.Layer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SceneDescriptionFoundations.Layer.__allocating_init(tag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SceneDescriptionFoundations.Layer.__allocating_init(relativeTo:identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for SceneDescriptionFoundations.Layer.ReplicationMessagePublisher()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef;
  if (!lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef)
  {
    type metadata accessor for RIOPxrSdfLayerRef(255);
    result = MEMORY[0x22E2F889C](&protocol conformance descriptor for RIOPxrSdfLayerRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RIOPxrSdfLayerRef and conformance RIOPxrSdfLayerRef);
  }
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.init(bytes:count:)(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  type metadata accessor for Data.RangeReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t ImportSession.getExtraAssetForTag(tag:)()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  uint64_t ExtraAssetWithTag;

  v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  String.utf8CString.getter();
  v3 = v2;
  ExtraAssetWithTag = RIOImportSessionGetExtraAssetWithTag();

  swift_release();
  return ExtraAssetWithTag;
}

Swift::Bool __swiftcall ImportSession.setExtraAssetForTag(tag:assetRef:)(Swift::String tag, Swift::OpaquePointer assetRef)
{
  uint64_t v2;
  void **v3;
  void *v4;
  id v5;
  char v6;

  v3 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v4 = *v3;
  String.utf8CString.getter();
  v5 = v4;
  v6 = RIOImportSessionSetExtraAssetWithTag();

  swift_release();
  return v6;
}

Swift::Void __swiftcall ImportSession.removeExtraAssetForTag(tag:)(Swift::String tag)
{
  uint64_t v1;
  void **v2;
  void *v3;
  id v4;

  v2 = (void **)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v3 = *v2;
  String.utf8CString.getter();
  v4 = v3;
  RIOImportSessionRemoveExtraAssetWithTag();

  swift_release();
}

uint64_t ImportSession.entity(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t EntityAtPrimPath;
  _QWORD v7[4];

  v0 = type metadata accessor for __EntityRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
  if (EntityAtPrimPath)
  {
    type metadata accessor for Entity();
    v7[3] = MEMORY[0x24BEE27D0];
    v7[0] = EntityAtPrimPath;
    static __EntityRef.__fromCore(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
    EntityAtPrimPath = static Entity.__fromCore(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return EntityAtPrimPath;
}

Swift::Void __swiftcall ImportSession.queueAssetForLoad(_:)(Swift::OpaquePointer a1)
{
  swift_beginAccess();
  RIOImportSessionQueueAssetForLoad();
}

uint64_t ImportSession.registerAudioAsset(path:tag:asset:)(void **a1)
{
  uint64_t v1;
  void *v2;
  id *v3;
  id v4;
  id v5;
  void *v6;

  v2 = *a1;
  v3 = (id *)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v4 = *v3;
  v5 = v2;
  v6 = (void *)RIOPxrSdfAssetPathAssetPathCopyString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  RIOImportSessionRegisterAudioAsset();

  swift_release();
  return swift_release();
}

Swift::Bool __swiftcall ImportSession.dumpDiagnostics(_:)(Swift::String a1)
{
  return ImportSession.dumpDiagnostics(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x24BE26750]);
}

uint64_t ImportSession.getCompatibilityFaultsByPrimPath(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  uint64_t result;
  int64_t v19;
  void *v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  __n128 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  int64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  int64_t v54;
  _QWORD aBlock[6];

  v43 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x24BDAC7A8](v43);
  v42 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v47 = (char *)&v41 - v11;
  v12 = swift_allocObject();
  v51 = v12;
  *(_QWORD *)(v12 + 16) = MEMORY[0x24BEE4B00];
  v41 = v12 + 16;
  v13 = *(_QWORD *)(a1 + 56);
  v45 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (void **)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  v52 = a1;
  swift_bridgeObjectRetain();
  v44 = v17;
  result = swift_beginAccess();
  v19 = 0;
  v46 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v54 = v19;
      v24 = v23 | (v19 << 6);
      goto LABEL_22;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v46)
      goto LABEL_24;
    v26 = *(_QWORD *)(v45 + 8 * v25);
    v27 = v19 + 1;
    if (!v26)
    {
      v27 = v19 + 2;
      if (v19 + 2 >= v46)
        goto LABEL_24;
      v26 = *(_QWORD *)(v45 + 8 * v27);
      if (!v26)
      {
        v27 = v19 + 3;
        if (v19 + 3 >= v46)
          goto LABEL_24;
        v26 = *(_QWORD *)(v45 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_21:
    v16 = (v26 - 1) & v26;
    v54 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_22:
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    v30 = v47;
    v29(v47, *(_QWORD *)(v52 + 48) + *(_QWORD *)(v7 + 72) * v24, v6);
    v31 = v7;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v30, v6);
    v32 = v6;
    v33 = v48;
    __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
    __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
    LODWORD(v33) = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    v34 = (unint64_t)__REAssetBundle.ExportOptions.DeploymentTarget.version.getter() >> 32;
    __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
    v35.n128_u64[0] = __PAIR64__(v34, v33);
    v35.n128_u64[1] = v36;
    v53 = v35;
    v37 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v38 = MEMORY[0x22E2F6028](v37 + 32, v53);
    swift_release();
    if (v38)
    {
      v20 = *v44;
      aBlock[4] = partial apply for closure #1 in ImportSession.getCompatibilityFaultsByPrimPath(for:);
      aBlock[5] = v51;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
      aBlock[3] = &block_descriptor_13;
      v21 = _Block_copy(aBlock);
      v22 = v20;
      swift_retain();
      swift_release();
      RIOImportSessionGatherFaultRecords();
      _Block_release(v21);

    }
    else
    {
      v39 = (uint64_t)v42;
      v29(v42, (unint64_t)v9, v32);
      swift_storeEnumTagMultiPayload();
      addFault #1 (_:_:) in ImportSession.getCompatibilityFaultsByPrimPath(for:)(47, 0xE100000000000000, v39, v51);
      outlined destroy of ImportSession.EvaluationFault(v39);
    }
    v6 = v32;
    v7 = v31;
    result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v6);
    v19 = v54;
  }
  v28 = v19 + 4;
  if (v19 + 4 >= v46)
  {
LABEL_24:
    swift_release();
    swift_beginAccess();
    v40 = *(_QWORD *)(v51 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    return v40;
  }
  v26 = *(_QWORD *)(v45 + 8 * v28);
  if (v26)
  {
    v27 = v19 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v46)
      goto LABEL_24;
    v26 = *(_QWORD *)(v45 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ImportSession.EvaluationFault(uint64_t a1)
{
  return type metadata accessor for CompileSession(a1, (uint64_t *)&type metadata singleton initialization cache for ImportSession.EvaluationFault);
}

uint64_t sub_22BC992FC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t ImportSession.getAllExtraAssetTags()()
{
  void *v0;

  swift_beginAccess();
  v0 = (void *)RIOImportSessionCopyExtraAssetTags();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return MEMORY[0x24BEE4AF8];
}

uint64_t ImportSession.includeUnusedMaterials.setter()
{
  return RIOPxrUsdStageSetIncludeUnusedMaterials();
}

Swift::Void __swiftcall ImportSession.requestUpdateSynchronouslyOnEngineQueue()()
{
  ImportSession.requestUpdateSynchronouslyOnEngineQueue()((uint64_t (*)(_QWORD))MEMORY[0x24BE26878]);
}

_QWORD *ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v15;

  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v10);
  v13 = ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v12, 0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v13;
}

_QWORD *ImportSession.__allocating_init<A>(core:entityType:)(void *a1, uint64_t a2)
{
  swift_allocObject();
  return ImportSession.init<A>(core:entityType:)(a1, a2);
}

uint64_t ImportSession.stage.getter()
{
  return swift_retain();
}

uint64_t ImportSession.rootEntity.getter()
{
  return swift_retain();
}

uint64_t ImportSession.engineRef.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t key path setter for ImportSession.deploymentTarget : ImportSession(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, (uint64_t)v6, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  v7 = *a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  outlined assign with take of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t ImportSession.deploymentTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  return outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v3, a1, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
}

uint64_t ImportSession.deploymentTarget.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  outlined assign with take of __REAssetBundle.ExportOptions.DeploymentTarget?(a1, v3);
  return swift_endAccess();
}

uint64_t (*ImportSession.deploymentTarget.modify())()
{
  swift_beginAccess();
  return CompileSession.deploymentTargets.modify;
}

void ImportSession.register(builderGenerator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD aBlock[6];

  v5 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v6 = *v5;
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  aBlock[4] = partial apply for closure #1 in ImportSession.register(builderGenerator:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  aBlock[3] = &block_descriptor_9;
  v9 = _Block_copy(aBlock);
  v10 = v6;
  swift_retain();
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v9);

}

uint64_t closure #1 in ImportSession.register(builderGenerator:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void *v14;
  uint64_t v15;
  char v16;
  void *v17;
  char isUniquelyReferenced_nonNull_native;
  void *v19;
  _QWORD **v20;
  void (*v21)(_QWORD *);
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD v35[4];
  uint64_t v36;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v6 = Strong;
  type metadata accessor for Prim();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = a1;
  v9 = a3(v7);
  if (!v9)
  {
    swift_release();
    swift_release();
    return 0;
  }
  v11 = v9;
  v12 = v10;
  ObjectType = swift_getObjectType();
  Builder.generateCore(primRef:)((uint64_t)v8, ObjectType, v12);
  Builder.generateOutputs()();
  v14 = (void *)RIOPxrUsdObjectCopyPath();
  v15 = v6 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v15 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v14), (v16 & 1) != 0))
  {
    swift_endAccess();

  }
  else
  {

    swift_endAccess();
    v17 = (void *)RIOPxrUsdObjectCopyPath();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v36 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(MEMORY[0x24BEE4AF8], v17, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v15 = v36;

    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  v19 = (void *)RIOPxrUsdObjectCopyPath();
  swift_beginAccess();
  v21 = specialized Dictionary.subscript.modify(v35, v19);
  v22 = *v20;
  if (*v20)
  {
    v23 = v20;
    swift_unknownObjectRetain();
    v24 = swift_isUniquelyReferenced_nonNull_native();
    *v23 = v22;
    if ((v24 & 1) == 0)
    {
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      *v23 = v22;
    }
    v25 = v22[2];
    v26 = v22[3];
    v27 = v25 + 1;
    if (v25 >= v26 >> 1)
    {
      v34 = v25 + 1;
      v31 = v22;
      v32 = v22[2];
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v25 + 1, 1, v31);
      v25 = v32;
      v27 = v34;
      v22 = v33;
      *v23 = v33;
    }
    v22[2] = v27;
    v28 = &v22[2 * v25];
    v28[4] = v11;
    v28[5] = v12;
  }
  ((void (*)(_QWORD *, _QWORD))v21)(v35, 0);
  swift_endAccess();

  v29 = Builder.core.getter(ObjectType, v12);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v29;
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1, void *a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = v3();
  swift_release();

  return v5;
}

id ImportSession.core.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  return *v1;
}

uint64_t ImportSession.sceneUpdatePassCompletion.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1);
  return v2;
}

uint64_t key path getter for ImportSession.sceneUpdatePassCompletion : ImportSession@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for ImportSession.sceneUpdatePassCompletion : ImportSession(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
  ImportSession.sceneUpdatePassCompletion.didset();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);
}

uint64_t ImportSession.sceneUpdatePassCompletion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
  ImportSession.sceneUpdatePassCompletion.didset();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
}

uint64_t ImportSession.sceneUpdatePassCompletion.didset()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v10[6];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = v1[1];
    v4 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v5 = *v4;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v2;
    *(_QWORD *)(v6 + 24) = v3;
    v10[4] = partial apply for thunk for @callee_guaranteed (@guaranteed CFStringRef) -> (@unowned Unmanaged<CFStringRef>);
    v10[5] = v6;
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = &block_descriptor_248;
    v7 = _Block_copy(v10);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v2);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v2);
    v8 = v5;
    swift_release();
    RIOImportSessionSetSceneUpdatePassCompletion();
    _Block_release(v7);

    return outlined consume of (@escaping @callee_guaranteed () -> ())?(v2);
  }
  else
  {
    swift_beginAccess();
    return RIOImportSessionSetSceneUpdatePassCompletion();
  }
}

uint64_t (*ImportSession.sceneUpdatePassCompletion.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ImportSession.sceneUpdatePassCompletion.modify;
}

uint64_t ImportSession.sceneUpdatePassCompletion.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return ImportSession.sceneUpdatePassCompletion.didset();
  return result;
}

_QWORD *ImportSession.__allocating_init(pipelineVersion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for __EngineRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  dispatch thunk of __Engine.__coreEngine.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v4 = (void *)RIOImportSessionCreateWithEngine();
  v5 = type metadata accessor for Entity();
  type metadata accessor for ImportSession(0);
  swift_allocObject();
  return specialized ImportSession.init<A>(core:entityType:)(v4, v5);
}

_QWORD *ImportSession.__allocating_init(serviceLocator:pipelineVersion:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  getEngine(_:)(a1);
  v1 = (void *)RIOImportSessionCreateWithEngine();
  v2 = type metadata accessor for Entity();
  type metadata accessor for ImportSession(0);
  swift_allocObject();
  v3 = specialized ImportSession.init<A>(core:entityType:)(v1, v2);
  swift_release();
  return v3;
}

uint64_t getEngine(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v7[2];

  v2 = type metadata accessor for __EngineRef();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
  }
  swift_retain();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  dispatch thunk of __Engine.__coreEngine.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7[1];
}

BOOL static ImportSession.LoadError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ImportSession.LoadError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ImportSession.LoadError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *ImportSession.__allocating_init<A>(from:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v15;

  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v10);
  v13 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v12, 0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v13;
}

void *ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSURL *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v16;

  getEngine(_:)(a2);
  if ((specialized static USDImportService.canLoad(url:)() & 1) == 0)
  {
    lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
    swift_allocError();
    *v12 = 0;
LABEL_6:
    swift_willThrow();
    swift_release();
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
    return a5;
  }
  v16 = (uint64_t)a5;
  URL._bridgeToObjectiveC()(v7);
  v9 = v8;
  a5 = (void *)RIOImportSessionCreateWithURLWithErrorReporting();

  if (!a5)
  {
    lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
    swift_allocError();
    *v13 = 1;
    goto LABEL_6;
  }
  swift_allocObject();
  v10 = a5;
  a5 = ImportSession.init<A>(core:entityType:)(a5, v16);
  swift_release();
  swift_retain();

  v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  swift_release();
  return a5;
}

_QWORD *ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSURL *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  getEngine(_:)(a2);
  if ((specialized static USDImportService.canLoad(url:)() & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v7);
    v9 = v8;
    v10 = (void *)RIOImportSessionCreateWithURL();

    swift_allocObject();
    v11 = ImportSession.init<A>(core:entityType:)(v10, a5);
    swift_release();
    v12 = type metadata accessor for URL();
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
    swift_retain();
    v13(a1, v12);
    if (v11)
      swift_release();
  }
  else
  {
    swift_release();
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
    return 0;
  }
  return v11;
}

_QWORD *ImportSession.__allocating_init<A>(contentsOf:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v17;

  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a1, v10, v12);
  v15 = ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)((uint64_t)v14, 0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v15;
}

_QWORD *ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  NSURL *v9;
  void *v10;
  void *v11;
  uint64_t SingleUseImporterWithURL;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  getEngine(_:)(a2);
  if ((specialized static USDImportService.canLoad(url:)() & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v9);
    v11 = v10;
    if (a6)
      SingleUseImporterWithURL = RIOImportSessionCreateSingleUseImporterWithURL();
    else
      SingleUseImporterWithURL = RIOImportSessionCreateWithURL();
    v15 = (void *)SingleUseImporterWithURL;

    swift_allocObject();
    v14 = ImportSession.init<A>(core:entityType:)(v15, a5);
    swift_release();
    v16 = type metadata accessor for URL();
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    swift_retain();
    v17(a1, v16);
    if (v14)
      swift_release();
  }
  else
  {
    swift_release();
    v13 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
    return 0;
  }
  return v14;
}

_QWORD *ImportSession.__allocating_init<A>(named:in:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  return ImportSession.__allocating_init<A>(named:in:serviceLocator:pipelineVersion:threading:entityType:)(a1, a2, a3, 0, a4, a5, a6, a7);
}

_QWORD *ImportSession.__allocating_init<A>(named:in:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  void (*v24)(_BYTE *, uint64_t);
  _BYTE v26[4];
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a8;
  v28 = a7;
  v27 = a6;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (void **)&v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for URL();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = &v26[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v20);
  v22 = &v26[-v21];
  type metadata accessor for USDImportService();
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v15);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {

    swift_release();
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
    return 0;
  }
  else
  {
    (*(void (**)(_BYTE *, void **, uint64_t))(v17 + 32))(v22, v15, v16);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v19, v22, v16);
    v23 = ImportSession.__allocating_init<A>(contentsOf:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v19, a4, a5, v27, v28);

    v24 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
    swift_retain();
    v24(v22, v16);
    if (v23)
      swift_release();
  }
  return v23;
}

uint64_t ImportSession.__allocating_init<A>(withName:in:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, void *a6, uint64_t a7)
{
  return ImportSession.__allocating_init<A>(withName:in:serviceLocator:pipelineVersion:threading:entityType:)(a1, a2, a3, 0, a4, a5, a6, a7);
}

uint64_t ImportSession.__allocating_init<A>(withName:in:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, unsigned int a6, void *a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  void *v24;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a8;
  v28 = a7;
  v26 = a5;
  v27 = a6;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (void **)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v26 - v20;
  type metadata accessor for USDImportService();
  static USDImportService.urlForUSD(named:in:)(a1, a2, a3, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
    swift_allocError();
    *v22 = 2;
    swift_willThrow();

    swift_release();
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v16 + 32))(v21, v14, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v15);
    v23 = v30;
    v24 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)((uint64_t)v18, a4, v26, v27, v28);
    if (!v23)
      a4 = (uint64_t)v24;

    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  return a4;
}

_QWORD *ImportSession.__allocating_init<A>(stage:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4 = specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(a1, 0, a2, a3, a4);
  swift_release();
  return v4;
}

_QWORD *ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5 = specialized ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:)(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

_QWORD *ImportSession.__allocating_init<A>(stage:serviceLocator:pipelineVersion:threading:entityType:isolationMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t SingleUseImporterWithStage;
  void *v9;
  _QWORD *v10;

  getEngine(_:)(a2);
  if (a6)
    SingleUseImporterWithStage = RIOImportSessionCreateSingleUseImporterWithStage();
  else
    SingleUseImporterWithStage = RIOImportSessionCreateWithStage();
  v9 = (void *)SingleUseImporterWithStage;
  swift_allocObject();
  v10 = ImportSession.init<A>(core:entityType:)(v9, a5);
  swift_release();
  swift_release();
  return v10;
}

_QWORD *ImportSession.init<A>(core:entityType:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  id v16;
  uint64_t EngineRef;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t RootEntity;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t ComponentByClass;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[2];
  uint64_t aBlock;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;

  v3 = v2;
  v42[1] = a2;
  v5 = type metadata accessor for __EntityRef();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  v10 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
  type metadata accessor for SafeSceneUUIDTable();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)v3 + v11) = v12;
  *(_QWORD *)(v12 + 24) = v13;
  v14 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion);
  *v14 = 0;
  v14[1] = 0;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_swiftBuildersByPrimPath) = MEMORY[0x24BEE4B00];
  if (!a1)
  {
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();
    goto LABEL_11;
  }
  v15 = &static TriggerBuilder.OutputName;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core) = a1;
  v16 = a1;
  EngineRef = RIOImportSessionGetEngineRef();
  if (!EngineRef
    || (v3[4] = EngineRef, (v18 = (id)RIOImportSessionGetStage()) == 0))
  {

LABEL_9:
    outlined destroy of Any?((uint64_t)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
    swift_release();

LABEL_11:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)((char *)v3
                                                                           + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
    swift_bridgeObjectRelease();
    type metadata accessor for ImportSession(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  v19 = v18;
  v42[0] = v8;
  type metadata accessor for Stage();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  v3[2] = v20;
  v21 = v19;
  RootEntity = RIOImportSessionGetRootEntity();
  if (!RootEntity)
  {

    swift_release();
    v15 = &static TriggerBuilder.OutputName;
    goto LABEL_9;
  }
  v23 = RootEntity;
  v24 = v21;
  type metadata accessor for AnchorEntity();
  v25 = swift_dynamicCastMetatype();
  REAnchorComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REAnchoringComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (v25)
  {
    if (!ComponentByClass)
    {
      REAnchoringComponentGetComponentType();
      REEntityAddComponentByClass();
    }
  }
  else if (ComponentByClass)
  {
    REAnchoringComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
  type metadata accessor for ModelEntity();
  if (swift_dynamicCastMetatype())
  {
    v46 = (void *)MEMORY[0x24BEE27D0];
    aBlock = v23;
    v28 = v42[0];
    static __EntityRef.__fromCore(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
    swift_allocObject();
    v29 = MEMORY[0x22E2F4228](v28);
  }
  else
  {
    type metadata accessor for BodyTrackedEntity();
    if (swift_dynamicCastMetatype())
    {
      v46 = (void *)MEMORY[0x24BEE27D0];
      aBlock = v23;
      v30 = v42[0];
      static __EntityRef.__fromCore(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
      swift_allocObject();
      v29 = MEMORY[0x22E2F4414](v30);
    }
    else if (swift_dynamicCastMetatype())
    {
      v46 = (void *)MEMORY[0x24BEE27D0];
      aBlock = v23;
      v31 = v42[0];
      static __EntityRef.__fromCore(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
      swift_allocObject();
      v29 = MEMORY[0x22E2F4294](v31);
    }
    else
    {
      type metadata accessor for Entity();
      v46 = (void *)MEMORY[0x24BEE27D0];
      aBlock = v23;
      v32 = v42[0];
      static __EntityRef.__fromCore(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
      v29 = static Entity.__fromCore(_:)();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v32, v5);
    }
  }
  v33 = MEMORY[0x24BEE4B00];
  v3[3] = v29;
  type metadata accessor for BehaviorsCommitter();
  v34 = (_QWORD *)swift_allocObject();
  v34[3] = v33;
  swift_retain();
  v34[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v34[2] = v29;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter) = v34;
  v35 = swift_allocObject();
  swift_weakInit();
  v47 = partial apply for closure #1 in ImportSession.init<A>(core:entityType:);
  v48 = v35;
  v36 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v44 = 1107296256;
  v45 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  v46 = &block_descriptor_13_0;
  v37 = _Block_copy(&aBlock);
  swift_release();
  v38 = v3[3];
  v39 = swift_allocObject();
  swift_weakInit();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = v38;
  *(_QWORD *)(v40 + 24) = v39;
  v47 = partial apply for closure #2 in ImportSession.init<A>(core:entityType:);
  v48 = v40;
  aBlock = v36;
  v44 = 1107296256;
  v45 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  v46 = &block_descriptor_20;
  v41 = _Block_copy(&aBlock);
  swift_release();
  RIOImportSessionSetRegistrationForScenes();
  _Block_release(v41);
  _Block_release(v37);
  RIOImportSessionSetSwiftObject();
  ImportSession.registerDefaultSwiftBuilders()();

  return v3;
}

uint64_t closure #1 in ImportSession.init<A>(core:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void (*v42)(uint64_t, _BYTE *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, _BYTE *, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, _BYTE *, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void (*v60)(uint64_t, _BYTE *, uint64_t);
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_BYTE *, uint64_t);
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  int v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  void (*v78)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v79;
  _BYTE *v80;
  char v81;
  void (*v82)(_BYTE *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char isUniquelyReferenced_nonNull_native;
  void (*v87)(_BYTE *, uint64_t);
  _BYTE v88[4];
  int v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  void (*v104)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[4];

  v110 = a3;
  v107 = a2;
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v99);
  v100 = &v88[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v98 = &v88[-v6];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v7);
  v94 = &v88[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v108 = &v88[-v10];
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v88[-v12];
  MEMORY[0x24BDAC7A8](v14);
  v92 = &v88[-v15];
  MEMORY[0x24BDAC7A8](v16);
  v97 = &v88[-v17];
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v88[-v19];
  MEMORY[0x24BDAC7A8](v21);
  v23 = &v88[-v22];
  v111 = type metadata accessor for UUID();
  v24 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v109 = &v88[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v26);
  v93 = &v88[-v27];
  MEMORY[0x24BDAC7A8](v28);
  v30 = &v88[-v29];
  v31 = type metadata accessor for __SceneRef();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v34 = &v88[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v95 = v13;
    v36 = (uint64_t)v23;
    v37 = result;
    type metadata accessor for Scene();
    v113[3] = MEMORY[0x24BEE27D0];
    v113[0] = a1;
    static __SceneRef.__fromCore(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
    v38 = static Scene.__fromCore(_:)();
    (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v34, v31);
    v39 = String.init(cString:)();
    v41 = v40;
    v107 = v37;
    v90 = OBJC_IVAR____TtC9RealityIO13ImportSession_sceneTable;
    swift_retain();
    Scene.__sceneIdentifier.getter();
    v105 = v39;
    v106 = v41;
    SafeSceneUUIDTable.getOrAssign(to:forScene:fallback:)(v39, v41, 1, v36, (uint64_t)v30);
    swift_release();
    v101 = v36;
    outlined destroy of Any?(v36, &demangling cache variable for type metadata for UUID?);
    v103 = v38;
    Scene.__sceneIdentifier.getter();
    v42 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v24 + 16);
    v43 = (uint64_t)v97;
    v102 = v30;
    v44 = v111;
    v45 = v42;
    v42((uint64_t)v97, v30, v111);
    v104 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
    v104(v43, 0, 1, v44);
    v46 = v99;
    v47 = v98;
    v48 = (uint64_t)&v98[*(int *)(v99 + 48)];
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v20, (uint64_t)v98, &demangling cache variable for type metadata for UUID?);
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v43, v48, &demangling cache variable for type metadata for UUID?);
    v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    v50 = v49((uint64_t)v47, 1, v44);
    v96 = v24;
    v51 = (uint64_t)v47;
    v91 = v49;
    if (v50 == 1)
    {
      outlined destroy of Any?(v43, &demangling cache variable for type metadata for UUID?);
      v51 = (uint64_t)v47;
      outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
      v52 = v111;
      v53 = v45;
      if (v49(v48, 1, v111) == 1)
      {
        outlined destroy of Any?((uint64_t)v47, &demangling cache variable for type metadata for UUID?);
        v54 = (uint64_t)v109;
        v55 = v104;
        v56 = v101;
        goto LABEL_10;
      }
    }
    else
    {
      v57 = v43;
      v58 = (uint64_t)v47;
      v59 = v92;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v58, (uint64_t)v92, &demangling cache variable for type metadata for UUID?);
      if (v49(v48, 1, v111) != 1)
      {
        v60 = v45;
        v61 = v93;
        v62 = v48;
        v63 = v111;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 32))(v93, v62, v111);
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v89 = dispatch thunk of static Equatable.== infix(_:_:)();
        v64 = v51;
        v65 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
        v66 = v61;
        v53 = v60;
        v65(v66, v63);
        outlined destroy of Any?(v57, &demangling cache variable for type metadata for UUID?);
        outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
        v65(v59, v63);
        outlined destroy of Any?(v64, &demangling cache variable for type metadata for UUID?);
        v54 = (uint64_t)v109;
        v52 = v63;
        v55 = v104;
        v56 = v101;
        if ((v89 & 1) != 0)
          goto LABEL_10;
        goto LABEL_9;
      }
      outlined destroy of Any?(v43, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
      v52 = v111;
      (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v59, v111);
      v53 = v45;
    }
    outlined destroy of Any?(v51, &demangling cache variable for type metadata for (UUID?, UUID?));
    v54 = (uint64_t)v109;
    v55 = v104;
    v56 = v101;
LABEL_9:
    v53(v56, v102, v52);
    v55(v56, 0, 1, v52);
    Scene.__sceneIdentifier.setter();
LABEL_10:
    type metadata accessor for Entity();
    v67 = static Entity.fromCore(_:ignoringEntityInfo:)();
    swift_retain();
    Entity.__interactionIdentifier.getter();
    SafeSceneUUIDTable.getOrAssign(to:forScene:fallback:)(v105, v106, 0, v56, v54);
    swift_release();
    outlined destroy of Any?(v56, &demangling cache variable for type metadata for UUID?);
    v68 = (uint64_t)v95;
    v111 = v67;
    Entity.__interactionIdentifier.getter();
    v69 = v108;
    v99 = (uint64_t)v53;
    v53((uint64_t)v108, (_BYTE *)v54, v52);
    v55((uint64_t)v69, 0, 1, v52);
    v70 = *(int *)(v46 + 48);
    v71 = v100;
    v72 = (uint64_t)&v100[v70];
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v68, (uint64_t)v100, &demangling cache variable for type metadata for UUID?);
    outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v69, v72, &demangling cache variable for type metadata for UUID?);
    v73 = v91;
    if (v91((uint64_t)v71, 1, v52) == 1)
    {
      outlined destroy of Any?((uint64_t)v69, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?(v68, &demangling cache variable for type metadata for UUID?);
      v74 = v73(v72, 1, v52);
      v75 = v102;
      v76 = v109;
      if (v74 == 1)
      {
        outlined destroy of Any?((uint64_t)v71, &demangling cache variable for type metadata for UUID?);
LABEL_18:
        v84 = *(_QWORD *)(v107 + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter);
        String.utf8CString.getter();
        swift_retain();
        swift_bridgeObjectRelease();
        v85 = (void *)RIOPxrSdfPathCreateFromCString();
        swift_release();
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v112 = *(_QWORD *)(v84 + 32);
        *(_QWORD *)(v84 + 32) = 0x8000000000000000;
        specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v110, v85, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v84 + 32) = v112;
        swift_bridgeObjectRelease();
        swift_endAccess();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v87 = *(void (**)(_BYTE *, uint64_t))(v96 + 8);
        v87(v76, v52);
        return ((uint64_t (*)(_BYTE *, uint64_t))v87)(v75, v52);
      }
    }
    else
    {
      v77 = v94;
      outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?((uint64_t)v71, (uint64_t)v94, &demangling cache variable for type metadata for UUID?);
      if (v73(v72, 1, v52) != 1)
      {
        v79 = v96;
        v80 = v93;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v96 + 32))(v93, v72, v52);
        lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v81 = dispatch thunk of static Equatable.== infix(_:_:)();
        v82 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
        v82(v80, v52);
        outlined destroy of Any?((uint64_t)v108, &demangling cache variable for type metadata for UUID?);
        outlined destroy of Any?((uint64_t)v95, &demangling cache variable for type metadata for UUID?);
        v82(v77, v52);
        outlined destroy of Any?((uint64_t)v71, &demangling cache variable for type metadata for UUID?);
        v75 = v102;
        v78 = v104;
        v76 = v109;
        if ((v81 & 1) != 0)
          goto LABEL_18;
LABEL_17:
        v83 = v101;
        ((void (*)(uint64_t, _BYTE *, uint64_t))v99)(v101, v76, v52);
        v78(v83, 0, 1, v52);
        Entity.__interactionIdentifier.setter();
        goto LABEL_18;
      }
      outlined destroy of Any?((uint64_t)v108, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?((uint64_t)v95, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(_BYTE *, uint64_t))(v96 + 8))(v77, v52);
      v75 = v102;
      v76 = v109;
    }
    outlined destroy of Any?((uint64_t)v71, &demangling cache variable for type metadata for (UUID?, UUID?));
    v78 = v104;
    goto LABEL_17;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

void closure #2 in ImportSession.init<A>(core:entityType:)(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t Strong;
  uint64_t v55;
  _QWORD *v56;
  void **v57;
  void *v58;
  void *v59;
  id v60;
  _QWORD v61[2];
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD aBlock[3];
  void *v84;
  uint64_t (*v85)();
  _QWORD *v86;

  v14 = type metadata accessor for __SceneImportOperation.__ImportedScene();
  v78 = *(_QWORD *)(v14 - 8);
  v79 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v77 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v76 = (char *)v61 - v17;
  v70 = type metadata accessor for __AssetRef();
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v68 = (char *)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID();
  v80 = *(_QWORD *)(v22 - 8);
  v81 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v67 = (char *)v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v75 = (char *)v61 - v25;
  v74 = type metadata accessor for __SceneRef();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v72 = (char *)v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && a3)
  {
    if (a4 < 0)
    {
      __break(1u);
    }
    else
    {
      v65 = a5;
      v61[1] = a6;
      v61[0] = a1;
      v62 = a7;
      v63 = a2;
      v64 = a3;
      v27 = MEMORY[0x24BEE4AF8];
      if (a4)
      {
        v28 = (void *)MEMORY[0x24BEE27D0];
        v29 = a2;
        v30 = v65;
        v66 = v21;
        do
        {
          v32 = *v29++;
          v31 = v32;
          if (v32)
          {
            v33 = *a3;
            if (*a3)
            {
              v82 = v29;
              type metadata accessor for Scene();
              v84 = v28;
              aBlock[0] = v31;
              v34 = v72;
              static __SceneRef.__fromCore(_:)();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
              static Scene.__fromCore(_:)();
              (*(void (**)(char *, uint64_t))(v73 + 8))(v34, v74);
              Scene.__sceneIdentifier.getter();
              v35 = v80;
              v36 = v21;
              v37 = (uint64_t)v21;
              v38 = v81;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v36, 1, v81) == 1)
              {
                swift_release();
                outlined destroy of Any?(v37, &demangling cache variable for type metadata for UUID?);
                v21 = (char *)v37;
              }
              else
              {
                v39 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 32);
                v71 = v27;
                v40 = v75;
                v39(v75, v37, v38);
                type metadata accessor for __REAsset();
                v84 = v28;
                aBlock[0] = v33;
                v41 = v68;
                static __AssetRef.__fromCore(_:)();
                __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
                static __REAsset.__fromHandle(_:)();
                (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v70);
                (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v67, v40, v38);
                dispatch thunk of Scene.name.getter();
                swift_retain();
                v42 = v76;
                v27 = v71;
                __SceneImportOperation.__ImportedScene.init(sceneIdentifier:sceneName:sceneAsset:sceneActive:)();
                (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v77, v42, v79);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
                v44 = *(_QWORD *)(v27 + 16);
                v43 = *(_QWORD *)(v27 + 24);
                v21 = v66;
                v45 = v81;
                if (v44 >= v43 >> 1)
                  v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v27);
                *(_QWORD *)(v27 + 16) = v44 + 1;
                v46 = v78;
                v47 = v27
                    + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))
                    + *(_QWORD *)(v78 + 72) * v44;
                v48 = v79;
                (*(void (**)(unint64_t, char *, uint64_t))(v78 + 32))(v47, v77, v79);
                swift_release();
                swift_release();
                (*(void (**)(char *, uint64_t))(v46 + 8))(v76, v48);
                (*(void (**)(char *, uint64_t))(v80 + 8))(v75, v45);
                v28 = (void *)MEMORY[0x24BEE27D0];
              }
              v29 = v82;
            }
          }
          --v30;
          ++a3;
          --a4;
        }
        while (a4);
      }
      v49 = v64[v65];
      if (!v49)
        goto LABEL_21;
      if (!v63[v65])
        goto LABEL_21;
      v50 = v62;
      RESceneGetName();
      v51 = String.init(cString:)();
      v53 = v52;
      type metadata accessor for __SceneResourceCache();
      swift_unownedRetainStrong();
      static __SceneResourceCache.attachImportedScenesForSceneChangeToEntity(importedScenes:entity:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v55 = Strong;
        v56 = (_QWORD *)swift_allocObject();
        v56[2] = v51;
        v56[3] = v53;
        v56[4] = v49;
        v56[5] = v50;
        v56[6] = v61[0];
        v57 = (void **)(v55 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
        swift_beginAccess();
        v58 = *v57;
        v85 = partial apply for closure #1 in closure #2 in ImportSession.init<A>(core:entityType:);
        v86 = v56;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        v84 = &block_descriptor_242;
        v59 = _Block_copy(aBlock);
        swift_retain();
        v60 = v58;
        swift_retain();
        swift_release();
        RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue();
        _Block_release(v59);
        swift_release();
        swift_release();

      }
      else
      {
LABEL_21:
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t closure #1 in closure #2 in ImportSession.init<A>(core:entityType:)()
{
  uint64_t v0;
  uint64_t result;
  id *v2;
  id v3;
  Swift::String v4;
  _QWORD v5[4];

  String.utf8CString.getter();
  RESceneCreate();
  swift_release();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  dispatch thunk of __REAssetService.__handle.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  RESceneLoadFromAsset();
  RESceneGetEntitiesArray();
  if (v0 < 1)
    return RERelease();
  type metadata accessor for Entity();
  static Entity.fromCore(_:ignoringEntityInfo:)();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v2 = (id *)(result + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
    swift_beginAccess();
    v3 = *v2;
    swift_release();
    RIOImportSessionOverridePrimPathToEntityForSceneAssetEntities();

    REEntityInsertChild();
    swift_retain();
    v4._countAndFlagsBits = 0;
    v4._object = (void *)0xE000000000000000;
    Entity.setLoadContext(fileName:)(v4);
    swift_release_n();
    return RERelease();
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v11(a2, a3, a4, a5, a6);
  return swift_release();
}

void ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  id v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  id v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  id v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  void *v92;
  id v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  id v98;
  uint64_t aBlock;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, void *);
  void *v102;
  uint64_t (*v103)();
  _QWORD *v104;

  v1 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  v3 = swift_allocObject();
  swift_weakInit();
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v3;
  v4[3] = closure #1 in ImportSession.registerDefaultSwiftBuilders();
  v4[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v4;
  v5 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_91;
  v6 = _Block_copy(&aBlock);
  v7 = v2;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v6);

  v8 = *v1;
  v9 = swift_allocObject();
  swift_weakInit();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v9;
  v10[3] = closure #2 in ImportSession.registerDefaultSwiftBuilders();
  v10[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v10;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_99;
  v11 = _Block_copy(&aBlock);
  v12 = v8;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v11);

  v13 = *v1;
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = closure #3 in ImportSession.registerDefaultSwiftBuilders();
  v15[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v15;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_107;
  v16 = _Block_copy(&aBlock);
  v17 = v13;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v16);

  v18 = *v1;
  v19 = swift_allocObject();
  swift_weakInit();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v19;
  v20[3] = closure #4 in ImportSession.registerDefaultSwiftBuilders();
  v20[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v20;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_115;
  v21 = _Block_copy(&aBlock);
  v22 = v18;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v21);

  v23 = swift_allocObject();
  swift_weakInit();
  v24 = *v1;
  v25 = swift_allocObject();
  swift_weakInit();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v25;
  v26[3] = partial apply for closure #5 in ImportSession.registerDefaultSwiftBuilders();
  v26[4] = v23;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v26;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_124;
  v27 = _Block_copy(&aBlock);
  swift_retain_n();
  v28 = v24;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v27);
  swift_release_n();

  v29 = *v1;
  v30 = swift_allocObject();
  swift_weakInit();
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = v30;
  v31[3] = closure #6 in ImportSession.registerDefaultSwiftBuilders();
  v31[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v31;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_132;
  v32 = _Block_copy(&aBlock);
  v33 = v29;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v32);

  v34 = *v1;
  v35 = swift_allocObject();
  swift_weakInit();
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = v35;
  v36[3] = closure #7 in ImportSession.registerDefaultSwiftBuilders();
  v36[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v36;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_140;
  v37 = _Block_copy(&aBlock);
  v38 = v34;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v37);

  v39 = *v1;
  v40 = swift_allocObject();
  swift_weakInit();
  v41 = (_QWORD *)swift_allocObject();
  v41[2] = v40;
  v41[3] = closure #8 in ImportSession.registerDefaultSwiftBuilders();
  v41[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v41;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_148;
  v42 = _Block_copy(&aBlock);
  v43 = v39;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v42);

  v44 = *v1;
  v45 = swift_allocObject();
  swift_weakInit();
  v46 = (_QWORD *)swift_allocObject();
  v46[2] = v45;
  v46[3] = closure #9 in ImportSession.registerDefaultSwiftBuilders();
  v46[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v46;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_156;
  v47 = _Block_copy(&aBlock);
  v48 = v44;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v47);

  v49 = *v1;
  v50 = swift_allocObject();
  swift_weakInit();
  v51 = (_QWORD *)swift_allocObject();
  v51[2] = v50;
  v51[3] = closure #10 in ImportSession.registerDefaultSwiftBuilders();
  v51[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v51;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_164;
  v52 = _Block_copy(&aBlock);
  v53 = v49;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v52);

  v54 = *v1;
  v55 = swift_allocObject();
  swift_weakInit();
  v56 = (_QWORD *)swift_allocObject();
  v56[2] = v55;
  v56[3] = closure #11 in ImportSession.registerDefaultSwiftBuilders();
  v56[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v56;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_172;
  v57 = _Block_copy(&aBlock);
  v58 = v54;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v57);

  v59 = *v1;
  v60 = swift_allocObject();
  swift_weakInit();
  v61 = (_QWORD *)swift_allocObject();
  v61[2] = v60;
  v61[3] = closure #12 in ImportSession.registerDefaultSwiftBuilders();
  v61[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v61;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_180;
  v62 = _Block_copy(&aBlock);
  v63 = v59;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v62);

  v64 = *v1;
  v65 = swift_allocObject();
  swift_weakInit();
  v66 = (_QWORD *)swift_allocObject();
  v66[2] = v65;
  v66[3] = closure #13 in ImportSession.registerDefaultSwiftBuilders();
  v66[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v66;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_188;
  v67 = _Block_copy(&aBlock);
  v68 = v64;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v67);

  v69 = *v1;
  v70 = swift_allocObject();
  swift_weakInit();
  v71 = (_QWORD *)swift_allocObject();
  v71[2] = v70;
  v71[3] = closure #14 in ImportSession.registerDefaultSwiftBuilders();
  v71[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v71;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_196;
  v72 = _Block_copy(&aBlock);
  v73 = v69;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v72);

  v74 = *v1;
  v75 = swift_allocObject();
  swift_weakInit();
  v76 = (_QWORD *)swift_allocObject();
  v76[2] = v75;
  v76[3] = closure #15 in ImportSession.registerDefaultSwiftBuilders();
  v76[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v76;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_204;
  v77 = _Block_copy(&aBlock);
  v78 = v74;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v77);

  v79 = *v1;
  v80 = swift_allocObject();
  swift_weakInit();
  v81 = (_QWORD *)swift_allocObject();
  v81[2] = v80;
  v81[3] = closure #16 in ImportSession.registerDefaultSwiftBuilders();
  v81[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v81;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_212;
  v82 = _Block_copy(&aBlock);
  v83 = v79;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v82);

  v84 = *v1;
  v85 = swift_allocObject();
  swift_weakInit();
  v86 = (_QWORD *)swift_allocObject();
  v86[2] = v85;
  v86[3] = closure #17 in ImportSession.registerDefaultSwiftBuilders();
  v86[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v86;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_220;
  v87 = _Block_copy(&aBlock);
  v88 = v84;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v87);

  v89 = *v1;
  v90 = swift_allocObject();
  swift_weakInit();
  v91 = (_QWORD *)swift_allocObject();
  v91[2] = v90;
  v91[3] = closure #18 in ImportSession.registerDefaultSwiftBuilders();
  v91[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v91;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_228;
  v92 = _Block_copy(&aBlock);
  v93 = v89;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v92);

  v94 = *v1;
  v95 = swift_allocObject();
  swift_weakInit();
  v96 = (_QWORD *)swift_allocObject();
  v96[2] = v95;
  v96[3] = closure #19 in ImportSession.registerDefaultSwiftBuilders();
  v96[4] = 0;
  v103 = closure #1 in ImportSession.register(builderGenerator:)partial apply;
  v104 = v96;
  aBlock = v5;
  v100 = 1107296256;
  v101 = thunk for @escaping @callee_guaranteed (@guaranteed RIOPxrUsdObjectRef) -> (@unowned Unmanaged<RIOBuilderRef>?);
  v102 = &block_descriptor_236;
  v97 = _Block_copy(&aBlock);
  v98 = v94;
  swift_release();
  RIOImportSessionRegisterBuilderGenerator();
  _Block_release(v97);

}

Swift::Void __swiftcall ImportSession.setIsLoadModelUseCase(isLoadModel:)(Swift::Bool isLoadModel)
{
  ImportSession.setIsLoadModelUseCase(isLoadModel:)(isLoadModel, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE26838]);
}

void ImportSession.setOriginalUrl(url:)()
{
  uint64_t v0;
  id *v1;
  id v2;
  NSURL *v3;
  void *v4;
  void *v5;

  v1 = (id *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  RIOImportSessionSetOriginalUrl();

}

Swift::Void __swiftcall ImportSession.setLoadSubdsAsSubds(loadAsSubd:)(Swift::Bool loadAsSubd)
{
  ImportSession.setIsLoadModelUseCase(isLoadModel:)(loadAsSubd, MEMORY[0x24BE26840]);
}

uint64_t ImportSession.setIsLoadModelUseCase(isLoadModel:)(char a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  return a2(*v5, a1 & 1);
}

uint64_t ImportSession.getLoadSubdsAsSubds(url:)()
{
  swift_beginAccess();
  return RIOImportSessionGetLoadSubdsAsSubds();
}

uint64_t ImportSession.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0
                                                                         + OBJC_IVAR____TtC9RealityIO13ImportSession_sceneUpdatePassCompletion));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ImportSession.__deallocating_deinit()
{
  ImportSession.deinit();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for TimelineBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  return result;
}

uint64_t closure #2 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for TimelineTrackAndActionBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  return result;
}

uint64_t closure #3 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for TriggerBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  return result;
}

uint64_t closure #4 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for ActionBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  return result;
}

uint64_t closure #5 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;
  uint64_t v1;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(_QWORD *)(result + OBJC_IVAR____TtC9RealityIO13ImportSession_behaviorsCommitter);
    swift_retain();
    swift_release();
    type metadata accessor for BehaviorBuilder();
    result = swift_allocObject();
    *(_BYTE *)(result + 16) = 2;
    *(_QWORD *)(result + 24) = v1;
  }
  return result;
}

uint64_t closure #6 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for PhysicsComponentBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  return result;
}

uint64_t closure #7 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for ReferenceImageBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  return result;
}

double closure #8 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t v0;
  double result;

  type metadata accessor for AudioFileBuilder();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 2;
  result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  return result;
}

uint64_t closure #9 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for AudioFileGroupBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t closure #10 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for AudioMixGroupBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  return result;
}

uint64_t closure #11 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for ImageBasedLightReceiverBuilder();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #12 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for ImageBasedLightBuilder();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_WORD *)(result + 40) = 2;
  return result;
}

uint64_t closure #13 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for VirtualEnvironmentProbeComponentBuilder();
  swift_allocObject();
  return VirtualEnvironmentProbeComponentBuilder.init()();
}

uint64_t closure #14 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModelSortGroupBuilder();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 2;
  v1 = v0 + OBJC_IVAR____TtC9RealityIO21ModelSortGroupBuilder_meshSortingGroup;
  v2 = type metadata accessor for ModelSortGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t closure #15 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for ModelSortGroupComponentBuilder();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #16 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for AnchoringComponentBuilder();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t closure #17 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for SpotLightComponentBuilder();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #18 in ImportSession.registerDefaultSwiftBuilders()()
{
  uint64_t result;

  type metadata accessor for DirectionalLightComponentBuilder();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 2;
  return result;
}

uint64_t closure #19 in ImportSession.registerDefaultSwiftBuilders()()
{
  type metadata accessor for CustomComponentBuilder();
  swift_allocObject();
  return CustomComponentBuilder.init()();
}

Swift::Void __swiftcall ImportSession.requestUpdate()()
{
  ImportSession.requestUpdateSynchronouslyOnEngineQueue()((uint64_t (*)(_QWORD))MEMORY[0x24BE26868]);
}

Swift::Void __swiftcall ImportSession.requestCancel()()
{
  ImportSession.requestUpdateSynchronouslyOnEngineQueue()(MEMORY[0x24BE26870]);
}

void ImportSession.reloadAsset(assetURL:)()
{
  uint64_t v0;
  id *v1;
  id v2;
  NSURL *v3;
  void *v4;
  void *v5;
  char v6;
  _BYTE *v7;

  v1 = (id *)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v2 = *v1;
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  v6 = RIOImportSessionReloadAsset();

  if ((v6 & 1) == 0)
  {
    lazy protocol witness table accessor for type ImportSession.LoadError and conformance ImportSession.LoadError();
    swift_allocError();
    *v7 = 1;
    swift_willThrow();
  }
}

void ImportSession.performBlockAfterAssetLoadOnEngineQueue(block:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD aBlock[6];

  v5 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v6 = *v5;
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_23;
  v7 = _Block_copy(aBlock);
  v8 = v6;
  swift_retain();
  swift_release();
  RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue();
  _Block_release(v7);

}

uint64_t ImportSession.activeSceneCount.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  result = RIOImportSessionGetSceneCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = 0;
    v2 = result;
    if (result)
    {
      v3 = 0;
      while (1)
      {
        if (RIOImportSessionIsSceneActive())
        {
          if (__OFADD__(v1++, 1))
            break;
        }
        if (v2 == ++v3)
          return v1;
      }
      __break(1u);
    }
    return v1;
  }
  return result;
}

uint64_t ImportSession.entityTaggingEditMode.getter()
{
  return RIOPxrUsdStageGetEntityTaggingEditMode();
}

uint64_t ImportSession.entityTaggingEditMode.setter()
{
  return RIOPxrUsdStageSetEntityTaggingEditMode();
}

uint64_t (*ImportSession.entityTaggingEditMode.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = RIOPxrUsdStageGetEntityTaggingEditMode();
  return ImportSession.entityTaggingEditMode.modify;
}

uint64_t ImportSession.entityTaggingEditMode.modify(unsigned __int8 *a1, uint64_t a2)
{
  return ImportSession.entityTaggingEditMode.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE27898]);
}

uint64_t ImportSession.includeUnusedMaterials.getter()
{
  return RIOPxrUsdStageGetIncludeUnusedMaterials();
}

uint64_t (*ImportSession.includeUnusedMaterials.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = RIOPxrUsdStageGetIncludeUnusedMaterials();
  return ImportSession.includeUnusedMaterials.modify;
}

uint64_t ImportSession.includeUnusedMaterials.modify(unsigned __int8 *a1, uint64_t a2)
{
  return ImportSession.entityTaggingEditMode.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE278A8]);
}

uint64_t ImportSession.entityTaggingEditMode.modify(unsigned __int8 *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)(*(_QWORD *)a1 + 16), a1[8]);
}

Swift::Void __swiftcall ImportSession.runSampleScene()()
{
  ImportSession.requestUpdateSynchronouslyOnEngineQueue()(MEMORY[0x24BE26820]);
}

uint64_t ImportSession.requestUpdateSynchronouslyOnEngineQueue()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  return a1(*v3);
}

Swift::Bool __swiftcall ImportSession.dumpDependencies(_:)(Swift::String a1)
{
  return ImportSession.dumpDiagnostics(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x24BE26748]);
}

uint64_t ImportSession.dumpDiagnostics(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  void **v5;
  void *v6;
  id v7;
  uint64_t v8;

  v5 = (void **)(v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v6 = *v5;
  String.utf8CString.getter();
  v7 = v6;
  v8 = a3();

  swift_release();
  return v8;
}

uint64_t ImportSession.getStatistics()()
{
  uint64_t result;

  swift_beginAccess();
  result = RIOImportSessionCopyStatistics();
  if (result)
    result = static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  else
    __break(1u);
  __break(1u);
  return result;
}

uint64_t static ImportSession.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  id v9;

  type metadata accessor for RIOImportSessionRef(0);
  v4 = (void **)(a1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v5 = *v4;
  v6 = (void **)(a2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v7 = *v6;
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
  v8 = v5;
  v9 = v7;
  LOBYTE(v6) = static _CFObject.== infix(_:_:)();

  return v6 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImportSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  char v10;

  v2 = *a1;
  v3 = *a2;
  type metadata accessor for RIOImportSessionRef(0);
  v4 = (void **)(v2 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v5 = *v4;
  v6 = (void **)(v3 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v7 = *v6;
  lazy protocol witness table accessor for type RIOPxrUsdObjectRef and conformance RIOPxrUsdObjectRef(&lazy protocol witness table cache variable for type RIOImportSessionRef and conformance RIOImportSessionRef, (uint64_t (*)(uint64_t))type metadata accessor for RIOImportSessionRef, (uint64_t)&protocol conformance descriptor for RIOImportSessionRef);
  v8 = v5;
  v9 = v7;
  v10 = static _CFObject.== infix(_:_:)();

  return v10 & 1;
}

uint64_t ImportSession.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImportSession.Type);
  v0 = String.init<A>(describing:)();
  swift_retain();
  v1 = (void *)RIOPxrUsdStageCopyUSDA();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_release();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 0x203A656761747328;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = dispatch thunk of Entity.name.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 10537;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x800000022BD09580;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImportSession()
{
  return ImportSession.description.getter();
}

_QWORD *ImportSession.prim(of:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *result;
  _QWORD *v5;
  id v6;
  uint64_t PrimIfNeeded;
  _QWORD v8[2];

  v0 = type metadata accessor for __EntityRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.__coreEntity.getter();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  result = (id)MEMORY[0x22E2F6754](v8[1]);
  if (result)
  {
    v5 = result;
    v6 = (id)RIOPxrTfTokenEmpty();
    PrimIfNeeded = RIOPxrUsdStageCreatePrimIfNeeded();

    type metadata accessor for Prim();
    result = (_QWORD *)swift_allocObject();
    result[2] = PrimIfNeeded;
  }
  return result;
}

uint64_t ImportSession.primPath(of:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[2];

  v0 = type metadata accessor for __EntityRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.__coreEntity.getter();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v4 = (id)MEMORY[0x22E2F6754](v9[1]);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (void *)RIOPxrSdfPathCopyString();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t static ImportSession.allComponents.getter()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  _QWORD v5[6];

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4B00];
  v1 = (uint64_t *)(v0 + 16);
  v5[4] = partial apply for closure #1 in static ImportSession.allComponents.getter;
  v5[5] = v0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  v5[3] = &block_descriptor_29;
  v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  REGlobalTypeRegistryWithReadLock();
  _Block_release(v2);
  swift_beginAccess();
  v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

uint64_t closure #1 in static ImportSession.allComponents.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t ID;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;

  result = RETypeRegistryGetTypeInfoByTypeName();
  if ((_DWORD)result)
  {
    result = RETypeInfoGetSubClassCount();
    if (result < 0)
      goto LABEL_25;
    if (result)
    {
      v4 = 0;
      v24 = (_QWORD *)(a2 + 16);
      v25 = result;
      while (result != v4)
      {
        v27 = v4;
        RETypeInfoGetSubClass();
        v26 = REComponentClassFromTypeInfo();
        if (v26)
        {
          if (RETypeInfoGetName())
          {
            String.init(cString:)();
            ID = RETypeInfoGetID();
            v8 = v7;
            lazy protocol witness table accessor for type String and conformance String();
            v9 = StringProtocol.contains<A>(_:)();
            swift_bridgeObjectRelease();
            if ((v9 & 1) == 0)
            {
              swift_beginAccess();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v11 = (_QWORD *)*v24;
              *v24 = 0x8000000000000000;
              v13 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
              v14 = v11[2];
              v15 = (v12 & 1) == 0;
              v16 = v14 + v15;
              if (__OFADD__(v14, v15))
                goto LABEL_23;
              v17 = v12;
              if (v11[3] >= v16)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  specialized _NativeDictionary.copy()();
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
                v18 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
                if ((v17 & 1) != (v19 & 1))
                {
                  type metadata accessor for REComponentClassPtr(0);
                  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return result;
                }
                v13 = v18;
              }
              if ((v17 & 1) != 0)
              {
                v5 = (uint64_t *)(v11[7] + 16 * v13);
                *v5 = ID;
                v5[1] = v8;
              }
              else
              {
                v11[(v13 >> 6) + 8] |= 1 << v13;
                *(_QWORD *)(v11[6] + 8 * v13) = v26;
                v20 = (uint64_t *)(v11[7] + 16 * v13);
                *v20 = ID;
                v20[1] = v8;
                v21 = v11[2];
                v22 = __OFADD__(v21, 1);
                v23 = v21 + 1;
                if (v22)
                  goto LABEL_24;
                v11[2] = v23;
              }
              *v24 = v11;
              swift_bridgeObjectRelease();
              swift_endAccess();
            }
          }
        }
        v4 = v27 + 1;
        result = v25;
        if (v25 == v27 + 1)
          return result;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
  }
  return result;
}

uint64_t one-time initialization function for realityKitComponentClasses()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<REComponentClassPtr>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22BD0F300;
  *(_QWORD *)(v0 + 32) = REAnchoringComponentGetComponentType();
  *(_QWORD *)(v0 + 40) = REBallSocketJointComponentGetComponentType();
  *(_QWORD *)(v0 + 48) = REBodyTrackingComponentGetComponentType();
  *(_QWORD *)(v0 + 56) = REColliderComponentGetComponentType();
  *(_QWORD *)(v0 + 64) = REDebugMeshComponentGetComponentType();
  *(_QWORD *)(v0 + 72) = REDirectionalLightComponentGetComponentType();
  *(_QWORD *)(v0 + 80) = REHingeJointComponentGetComponentType();
  *(_QWORD *)(v0 + 88) = REMeshComponentGetComponentType();
  *(_QWORD *)(v0 + 96) = REMeshSortingComponentGetComponentType();
  *(_QWORD *)(v0 + 104) = REPerspectiveCameraComponentGetComponentType();
  *(_QWORD *)(v0 + 112) = RERigidBodyComponentGetComponentType();
  *(_QWORD *)(v0 + 120) = REMotionStateComponentGetComponentType();
  *(_QWORD *)(v0 + 128) = REPinComponentGetComponentType();
  *(_QWORD *)(v0 + 136) = REPointLightComponentGetComponentType();
  *(_QWORD *)(v0 + 144) = RESceneUnderstandingComponentGetComponentType();
  *(_QWORD *)(v0 + 152) = RESpotLightComponentGetComponentType();
  *(_QWORD *)(v0 + 160) = RENetworkComponentGetComponentType();
  *(_QWORD *)(v0 + 168) = RETransformComponentGetComponentType();
  *(_QWORD *)(v0 + 176) = REImageBasedLightComponentGetComponentType();
  *(_QWORD *)(v0 + 184) = REImageBasedLightReceiverComponentGetComponentType();
  result = REVirtualEnvironmentProbeComponentGetComponentType();
  *(_QWORD *)(v0 + 192) = result;
  static ImportSession.realityKitComponentClasses = (_UNKNOWN *)v0;
  return result;
}

uint64_t static ImportSession.realityKitComponentClasses.getter()
{
  if (one-time initialization token for realityKitComponentClasses != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ImportSession.realityKitComponentClasses.setter(void *a1)
{
  if (one-time initialization token for realityKitComponentClasses != -1)
    swift_once();
  swift_beginAccess();
  static ImportSession.realityKitComponentClasses = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ImportSession.realityKitComponentClasses.modify())()
{
  if (one-time initialization token for realityKitComponentClasses != -1)
    swift_once();
  swift_beginAccess();
  return CompileSession.includeUnusedMaterials.modify;
}

uint64_t static ImportSession.realityKitComponents.getter()
{
  return static ImportSession.realityKitComponents.getter((uint64_t)partial apply for closure #1 in static ImportSession.allComponents.getter, (uint64_t)&block_descriptor_34, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
}

uint64_t static ImportSession.internalComponents.getter()
{
  return static ImportSession.realityKitComponents.getter((uint64_t)partial apply for closure #1 in static ImportSession.allComponents.getter, (uint64_t)&block_descriptor_39, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
}

uint64_t static ImportSession.realityKitComponents.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD aBlock[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = MEMORY[0x24BEE4B00];
  v7 = (uint64_t *)(v6 + 16);
  aBlock[4] = a1;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> ();
  aBlock[3] = a2;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  REGlobalTypeRegistryWithReadLock();
  _Block_release(v8);
  swift_beginAccess();
  v9 = *v7;
  swift_bridgeObjectRetain();
  swift_release();
  v10 = specialized _NativeDictionary.filter(_:)(v9, a3);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t static ImportSession.getRealityKitComponentName(componentClass:)()
{
  REComponentClassGetName();
  return String.init(cString:)();
}

uint64_t static ImportSession.getSwiftRealityKitComponentName(reComponentName:)(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0F310;
  *(_QWORD *)(inited + 32) = 0x726564696C6C6F43;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v5 + 32) = 0x6F6973696C6C6F43;
  *(_QWORD *)(v5 + 40) = 0xE90000000000006ELL;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = 1752393037;
  *(_QWORD *)(inited + 64) = 0xE400000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v6 + 32) = 0x6C65646F4DLL;
  *(_QWORD *)(v6 + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0x73654D6775626544;
  *(_QWORD *)(inited + 88) = 0xE900000000000068;
  *(_QWORD *)(inited + 96) = &outlined read-only object #0 of static ImportSession.getSwiftRealityKitComponentName(reComponentName:);
  *(_QWORD *)(inited + 104) = 0x646F426469676952;
  *(_QWORD *)(inited + 112) = 0xE900000000000079;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v7 + 32) = 0x4273636973796850;
  *(_QWORD *)(v7 + 40) = 0xEB0000000079646FLL;
  *(_QWORD *)(inited + 120) = v7;
  *(_QWORD *)(inited + 128) = 0x74536E6F69746F4DLL;
  *(_QWORD *)(inited + 136) = 0xEB00000000657461;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22BD0C360;
  strcpy((char *)(v8 + 32), "PhysicsMotion");
  *(_WORD *)(v8 + 46) = -4864;
  *(_QWORD *)(inited + 144) = v8;
  *(_QWORD *)(inited + 152) = 0x6B726F7774654ELL;
  *(_QWORD *)(inited + 160) = 0xE700000000000000;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22BD0C360;
  *(_QWORD *)(v9 + 32) = 0x6E6F7268636E7953;
  *(_QWORD *)(v9 + 40) = 0xEF6E6F6974617A69;
  *(_QWORD *)(inited + 168) = v9;
  *(_QWORD *)(inited + 176) = 0x614D776F64616853;
  *(_QWORD *)(inited + 184) = 0xE900000000000070;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22BD0C5C0;
  *(_QWORD *)(v10 + 32) = 0xD000000000000016;
  *(_QWORD *)(v10 + 40) = 0x800000022BD095B0;
  *(_QWORD *)(v10 + 48) = 0x6867694C746F7053;
  *(_QWORD *)(v10 + 56) = 0xEF776F6461685374;
  *(_QWORD *)(inited + 192) = v10;
  v11 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t ImportSession.TextureOperatorContainer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;

  v1 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v1 + 64);
  v3 = v1 + 64;
  v2 = v4;
  v5 = 1 << *(_BYTE *)(*(_QWORD *)(v0 + 16) + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v2;
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    v11 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v10;
    if (!v12)
    {
      v10 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v3 + 8 * v10);
      if (!v12)
      {
        v10 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v3 + 8 * v10);
        if (!v12)
        {
          v10 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v3 + 8 * v10);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
LABEL_5:
    result = RERelease();
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v0;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v10 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v10 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v3 + 8 * v10);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t ImportSession.TextureOperatorContainer.__deallocating_deinit()
{
  ImportSession.TextureOperatorContainer.deinit();
  return swift_deallocClassInstance();
}

uint64_t ImportSession.TextureOperatorContainer.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
}

uint64_t ImportSession.TextureOperatorContainer.keys.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *ImportSession.TextureOperatorContainer.makeIterator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = -1;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *(_QWORD *)(v1 + 64);
  v5 = ~v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : OpaquePointer].Iterator>);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v1;
  v6[3] = v1 + 64;
  v6[4] = v5;
  v6[5] = 0;
  v6[6] = v4;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t ImportSession.TextureOperatorContainer.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

void ImportSession.TextureOperatorContainer.setDownsample(factor:for:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  void *v20;
  id v21;
  void *PrimIfNeeded;
  id v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;

  v4 = *(_QWORD *)(v3 + 24);
  if (!*(_QWORD *)(v4 + 16))
    return;
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = 0;
  v30 = v9 + 56;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v9 + 56);
  v31 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v13 &= v13 - 1;
      goto LABEL_24;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v17 >= v31)
      goto LABEL_35;
    v18 = *(_QWORD *)(v30 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v31)
        goto LABEL_35;
      v18 = *(_QWORD *)(v30 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v31)
          goto LABEL_35;
        v18 = *(_QWORD *)(v30 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v13 = (v18 - 1) & v18;
LABEL_24:
    String.utf8CString.getter();
    v20 = (void *)RIOPxrSdfPathCreateFromCString();
    swift_release();
    v21 = (id)RIOPxrTfTokenEmpty();
    PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

    type metadata accessor for Prim();
    *(_QWORD *)(swift_initStackObject() + 16) = PrimIfNeeded;
    if (String.count.getter() < 1)
      v23 = (id)RIOPxrTfTokenEmpty();
    else
      v23 = (id)RIOPxrTfTokenCreateWithCString();
    v24 = v23;
    if (!RIOPxrUsdPrimHasAttribute())
    {

      lazy protocol witness table accessor for type Object.Error and conformance Object.Error();
      swift_willThrowTypedImpl();
      swift_allocError();
      *v29 = 0;
      swift_release();
      swift_release();
      return;
    }
    v25 = RIOPxrUsdPrimCopyAttribute();

    type metadata accessor for AnyAttribute();
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = v25;
    swift_retain();
    if (String.count.getter() <= 0)
      v27 = (id)RIOPxrTfTokenEmpty();
    else
      v27 = (id)RIOPxrTfTokenCreateWithCString();
    v28 = v27;
    if (String.count.getter() < 1)
      v14 = (id)RIOPxrTfTokenEmpty();
    else
      v14 = (id)RIOPxrTfTokenCreateWithCString();
    v15 = v14;
    v16 = (void *)RIOPxrVtValueCreateWithInt32();
    RIOPxrUsdObjectMetadataSetValue();

    outlined consume of Result<AnyAttribute, Object.Error>(v26, 0);
    outlined consume of Result<AnyAttribute, Object.Error>(v26, 0);

  }
  v19 = v17 + 3;
  if (v19 >= v31)
  {
LABEL_35:
    swift_release();
    return;
  }
  v18 = *(_QWORD *)(v30 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v31)
      goto LABEL_35;
    v18 = *(_QWORD *)(v30 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_38:
  __break(1u);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ImportSession.TextureOperatorContainer@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = ImportSession.TextureOperatorContainer.makeIterator()();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ImportSession.TextureOperatorContainer()
{
  return 0;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance ImportSession.TextureOperatorContainer()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ImportSession.TextureOperatorContainer()
{
  uint64_t v0;

  v0 = specialized _copySequenceToContiguousArray<A>(_:)();
  swift_release();
  return v0;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ImportSession.TextureOperatorContainer(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t specialized Sequence._copyContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = ImportSession.TextureOperatorContainer.makeIterator()();
  result = swift_release();
  v8 = 0;
  if (!a2 || !a3)
  {
LABEL_9:
    *a1 = v6;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    v9 = v12;
    v8 = 0;
    if ((_QWORD)v12)
    {
      v10 = v11;
      while (1)
      {
        *(_QWORD *)a2 = v10;
        *(_OWORD *)(a2 + 8) = v9;
        if (a3 - 1 == v8)
          break;
        dispatch thunk of _AnyIteratorBoxBase.next()();
        v10 = v11;
        v9 = v12;
        a2 += 24;
        ++v8;
      }
      v8 = a3;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ImportSession.TextureOperatorContainer()
{
  type metadata accessor for ImportSession.TextureOperatorContainer();
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t ImportSession.gatherUsedTexturesAsImportOperations()()
{
  return ImportSession.gatherUsedTexturesAsImportOperations()((uint64_t)&unk_24F63A4C8, (uint64_t)partial apply for closure #1 in ImportSession.gatherUsedTexturesAsImportOperations(), (uint64_t)&block_descriptor_51, MEMORY[0x24BE26770]);
}

uint64_t ImportSession.gatherTexturesAsImportOperations()()
{
  return ImportSession.gatherUsedTexturesAsImportOperations()((uint64_t)&unk_24F63A518, (uint64_t)partial apply for closure #1 in ImportSession.gatherTexturesAsImportOperations(), (uint64_t)&block_descriptor_59, MEMORY[0x24BE26768]);
}

uint64_t ImportSession.gatherUsedTexturesAsImportOperations()(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t, void *))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD aBlock[6];

  v7 = swift_allocObject();
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v7 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v8);
  v10 = (void **)(v4 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v11 = *v10;
  type metadata accessor for __ServiceLocator();
  v12 = v11;
  static __ServiceLocator.shared.getter();
  v13 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v7;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  a4(v12, v13, v15);
  _Block_release(v15);

  swift_beginAccess();
  v16 = *(_QWORD *)(v7 + 16);
  swift_beginAccess();
  v17 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  type metadata accessor for ImportSession.TextureOperatorContainer();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v16;
  *(_QWORD *)(result + 24) = v17;
  return result;
}

uint64_t closure #1 in ImportSession.gatherUsedTexturesAsImportOperations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  Swift::Int v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t inited;
  Swift::Int v22;
  char v23;
  uint64_t *v24;
  char v25;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;

  v8 = (uint64_t *)(a4 + 16);
  v9 = String.init(cString:)();
  v11 = v10;
  v12 = String.init(cString:)();
  v14 = v13;
  swift_beginAccess();
  v15 = *(_QWORD *)(a4 + 16);
  if (*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRetain();
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
    if ((v17 & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Set._Variant.insert(_:)(&v28, v9, v11);
      swift_bridgeObjectRelease();
      v18 = v29;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = *v8;
      *v8 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v12, v14, isUniquelyReferenced_nonNull_native);
      v20 = v27;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22BD0C360;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v11;
  swift_bridgeObjectRetain();
  v22 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_beginAccess();
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *v8;
  *v8 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v12, v14, v23);
  v20 = v29;
LABEL_6:
  *v8 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a1)
    return swift_bridgeObjectRelease();
  v24 = (uint64_t *)(a5 + 16);
  swift_beginAccess();
  v25 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *v24;
  *v24 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v12, v14, v25);
  *v24 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

  return RERetain();
}

uint64_t ImportSession.MeshAssetEstimate.meshCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ImportSession.MeshAssetEstimate.vertexTotal.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ImportSession.MeshAssetEstimate.triangleTotal.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ImportSession.MeshAssetEstimate.attrDimension.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t ImportSession.MeshAssetEstimate.approximateFootprint.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v1 = v0[1];
  v2 = v0[3];
  v3 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((unint64_t)(v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = v0[2];
  v5 = (unsigned __int128)(v4 * (__int128)3) >> 64;
  v6 = 3 * v4;
  if (v5 != v6 >> 63)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((unint64_t)(v6 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = 4 * v3;
  result = v7 + 4 * v6;
  if (__OFADD__(v7, 4 * v6))
LABEL_11:
    __break(1u);
  return result;
}

_QWORD *static ImportSession.MeshAssetEstimate.+ infix(_:_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (__OFADD__(*result, *a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = a2[1];
  v4 = result[1];
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = result[2];
  v8 = a2[2];
  v5 = __OFADD__(v7, v8);
  v9 = v7 + v8;
  if (v5)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v10 = result[3];
  if (a2[3] > v10)
    v10 = a2[3];
  *a3 = *result + *a2;
  a3[1] = v6;
  a3[2] = v9;
  a3[3] = v10;
  return result;
}

double static ImportSession.MeshAssetEstimate.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ImportSession.MeshAssetEstimates.entityCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t ImportSession.MeshAssetEstimates.entityPaths.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *ImportSession.MeshAssetEstimates.makeIterator()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *v0;
  v2 = -1;
  v3 = -1 << *(_BYTE *)(*v0 + 32);
  v4 = *v0 + 64;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v5 = v2 & *(_QWORD *)(*v0 + 64);
  v6 = ~v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<[String : ImportSession.MeshAssetEstimate].Iterator>);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v1;
  v7[3] = v4;
  v7[4] = v6;
  v7[5] = 0;
  v7[6] = v5;
  swift_bridgeObjectRetain();
  return v7;
}

double ImportSession.MeshAssetEstimates.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v8;
  char v9;
  _OWORD *v10;
  __int128 v11;
  double result;

  v5 = *v3;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v8);
      v11 = v10[1];
      *(_OWORD *)a3 = *v10;
      *(_OWORD *)(a3 + 16) = v11;
      *(_BYTE *)(a3 + 32) = 0;
      swift_bridgeObjectRelease();
      return result;
    }
    swift_bridgeObjectRelease();
  }
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ImportSession.MeshAssetEstimates@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = ImportSession.MeshAssetEstimates.makeIterator()();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ImportSession.MeshAssetEstimates()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance ImportSession.MeshAssetEstimates(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ImportSession.MeshAssetEstimates()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

RealityIO::ImportSession::MeshAssetEstimates __swiftcall ImportSession.gatherEntitiesWithMeshAssetEstimates()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  RealityIO::ImportSession::MeshAssetEstimates result;
  _QWORD aBlock[6];

  v2 = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = (void **)(v1 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v5 = *v4;
  aBlock[4] = partial apply for closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned UnsafeMutablePointer<OpaquePointer?>?, @unowned Int, @unowned Int) -> ();
  aBlock[3] = &block_descriptor_65;
  v6 = _Block_copy(aBlock);
  v7 = v5;
  swift_retain();
  swift_release();
  RIOImportSessionGatherMeshEstimates();
  _Block_release(v6);

  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  result.table._rawValue = (void *)swift_release();
  *v2 = v8;
  return result;
}

uint64_t closure #1 in ImportSession.gatherEntitiesWithMeshAssetEstimates()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v11 = String.init(cString:)();
  v13 = v12;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(a6 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, a4, a5, v11, v13, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a6 + 16) = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void ImportSession.EvaluationFault.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[4];

  v1 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement();
  v8[2] = *(_QWORD *)(v1 - 8);
  v8[3] = v1;
  MEMORY[0x24BDAC7A8](v1);
  v8[1] = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x24BDAC7A8](v5);
  outlined init with copy of ImportSession.EvaluationFault(v0, (uint64_t)v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (char *)sub_22BCA05B8 + 4 * byte_22BD0F320[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22BCA05B8()
{
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void sub_22BCA0740()
{
  Hasher._combine(_:)(0);
  JUMPOUT(0x22BCA0720);
}

Swift::Int ImportSession.EvaluationFault.hashValue.getter()
{
  Hasher.init(_seed:)();
  ImportSession.EvaluationFault.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImportSession.EvaluationFault()
{
  Hasher.init(_seed:)();
  ImportSession.EvaluationFault.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImportSession.EvaluationFault()
{
  Hasher.init(_seed:)();
  ImportSession.EvaluationFault.hash(into:)();
  return Hasher._finalize()();
}

uint64_t ImportSession.getEvaluationFaults()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD aBlock[6];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_deploymentTarget;
  swift_beginAccess();
  outlined init with copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v5, (uint64_t)v3, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10RealityKit15__REAssetBundleV13ExportOptionsV16DeploymentTargetV_s5NeverOSo25RERealityFileMajorVersionVTg503_s9c66IO13ImportSessionC19getEvaluationFaultsSDySSSayAC0F5FaultOGGyFSo25lmno11V0A3Kit15__ef3V13gh3V16iJ6VXEfU_SDySSSay0C2IO0rS0C0U5FaultOGGz_XxTf1cn_nTf4ng_n((uint64_t)v3, v4);
  swift_release();
  outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for __REAssetBundle.ExportOptions.DeploymentTarget?);
  v6 = (void **)(v0 + OBJC_IVAR____TtC9RealityIO13ImportSession_core);
  swift_beginAccess();
  v7 = *v6;
  aBlock[4] = partial apply for closure #2 in ImportSession.getEvaluationFaults();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafePointer<Int8>, @unowned OpaquePointer) -> ();
  aBlock[3] = &block_descriptor_71;
  v8 = _Block_copy(aBlock);
  swift_retain();
  v9 = v7;
  swift_release();
  RIOImportSessionGatherFaultRecords();
  _Block_release(v8);

  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v10;
}

uint64_t addFault #1 (_:_:) in ImportSession.getEvaluationFaults()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v8 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  v9 = *(_QWORD *)(a4 + 16);
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>);
    v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImportSession.EvaluationFault(0) - 8) + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_22BD0C360;
    outlined init with copy of ImportSession.EvaluationFault(a3, v20 + v19);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v8;
    *v8 = 0x8000000000000000;
    v17 = v20;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImportSession.EvaluationFault>);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImportSession.EvaluationFault(0) - 8) + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22BD0C360;
  outlined init with copy of ImportSession.EvaluationFault(a3, v15 + v14);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v15);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *v8;
  *v8 = 0x8000000000000000;
  v17 = v12;
LABEL_6:
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, a1, a2, isUniquelyReferenced_nonNull_native);
  *v8 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t closure #1 in ImportSession.getEvaluationFaults()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t *v21;

  v19 = a2;
  v21 = a3;
  v4 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter();
  __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  LODWORD(v7) = __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  v11 = (unint64_t)__REAssetBundle.ExportOptions.DeploymentTarget.version.getter() >> 32;
  __REAssetBundle.ExportOptions.DeploymentTarget.version.getter();
  v12.n128_u64[0] = __PAIR64__(v11, v7);
  v12.n128_u64[1] = v13;
  v20 = v12;
  v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x22E2F6028](v14 + 32, v20);
  result = swift_release();
  if (!v15)
  {
    v17 = type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v6, a1, v17);
    swift_storeEnumTagMultiPayload();
    addFault #1 (_:_:) in ImportSession.getEvaluationFaults()(0, 0xE000000000000000, (uint64_t)v6, v19);
    result = outlined destroy of ImportSession.EvaluationFault((uint64_t)v6);
  }
  *v21 = v15;
  return result;
}

uint64_t closure #2 in ImportSession.getEvaluationFaults()(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = type metadata accessor for ImportSession.EvaluationFault(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = String.init(cString:)();
  v11 = v10;
  switch(a2)
  {
    case 0:
      break;
    default:
      *v8 = String.init(cString:)();
      v8[1] = v12;
      break;
  }
  swift_storeEnumTagMultiPayload();
  addFault #1 (_:_:) in ImportSession.getEvaluationFaults()(v9, v11, (uint64_t)v8, a4);
  swift_bridgeObjectRelease();
  return outlined destroy of ImportSession.EvaluationFault((uint64_t)v8);
}

uint64_t ImportSession.getCompatibilityFaults(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;

  v1 = ImportSession.getCompatibilityFaultsByPrimPath(for:)(a1);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  for (i = MEMORY[0x24BEE4B08]; ; i = v12)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_5;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v6)
      goto LABEL_25;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v6)
        goto LABEL_25;
      v14 = *(_QWORD *)(v2 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v6)
          goto LABEL_25;
        v14 = *(_QWORD *)(v2 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 3;
          if (v13 + 3 >= v6)
            goto LABEL_25;
          v14 = *(_QWORD *)(v2 + 8 * v8);
          if (!v14)
          {
            v8 = v13 + 4;
            if (v13 + 4 >= v6)
              goto LABEL_25;
            v14 = *(_QWORD *)(v2 + 8 * v8);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_24:
    v5 = (v14 - 1) & v14;
LABEL_5:
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    specialized Set.union<A>(_:)(v10, i);
    v12 = v11;
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 5;
  if (v15 >= v6)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return i;
  }
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v6)
      goto LABEL_25;
    v14 = *(_QWORD *)(v2 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

